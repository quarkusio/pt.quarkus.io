<tmx version="1.4">
  <header creationtool="Translate Toolkit" creationtoolversion="3.12.1" segtype="sentence" o-tmf="UTF-8" adminlang="en" srclang="en" datatype="PlainText" />
  <body>
    <tu>
      <tuv xml:lang="en">
        <seg>                    &lt;vaadin-grid-column auto-width
                        header="Associated Interceptors"
                        ${columnBodyRenderer(this._interceptorsRenderer, [])}
                        resizable&gt;
                    &lt;/vaadin-grid-column&gt;
                &lt;/vaadin-grid&gt;`;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>                    &lt;vaadin-grid-column auto-width
                        header="Associated Interceptors"
                        ${columnBodyRenderer(this._interceptorsRenderer, [])}
                        resizable&gt;
                    &lt;/vaadin-grid-column&gt;
                &lt;/vaadin-grid&gt;`;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>                    &lt;vaadin-grid-column auto-width
                        header="Kind"
                        ${columnBodyRenderer(this._kindRenderer, [])}
                        resizable&gt;
                    &lt;/vaadin-grid-column&gt;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>                    &lt;vaadin-grid-column auto-width
                        header="Kind"
                        ${columnBodyRenderer(this._kindRenderer, [])}
                        resizable&gt;
                    &lt;/vaadin-grid-column&gt;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>            return html`
                &lt;vaadin-grid .items="${this._beans}" class="arctable" theme="no-border"&gt;
                    &lt;vaadin-grid-column auto-width
                        header="Bean"
                        ${columnBodyRenderer(this._beanRenderer, [])}
                        resizable&gt;
                    &lt;/vaadin-grid-column&gt;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>            return html`
                &lt;vaadin-grid .items="${this._beans}" class="arctable" theme="no-border"&gt;
                    &lt;vaadin-grid-column auto-width
                        header="Bean"
                        ${columnBodyRenderer(this._beanRenderer, [])}
                        resizable&gt;
                    &lt;/vaadin-grid-column&gt;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>        .annotation {
          color: var(--lumo-contrast-50pct);
        }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>        .annotation {
          color: var(--lumo-contrast-50pct);
        }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>        .producer {
          color: var(--lumo-primary-text-color);
        }
        `;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>        .producer {
          color: var(--lumo-primary-text-color);
        }
        `;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>        // Check more values on somekeyResponse
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>        // Check more values on somekeyResponse
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>        // Get the properties to make sure it is changed
        JsonNode allPropertiesResponse = super.executeJsonRPCMethod("getAllValues");
        String applicationName = allPropertiesResponse.get("quarkus.application.name").asText();
        Assertions.assertEquals("changedByTest", applicationName);
    }
}
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>        // Get the properties to make sure it is changed
        JsonNode allPropertiesResponse = super.executeJsonRPCMethod("getAllValues");
        String applicationName = allPropertiesResponse.get("quarkus.application.name").asText();
        Assertions.assertEquals("changedByTest", applicationName);
    }
}
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>        // Select a lesson ...
        return constraintFactory
                .forEach(Lesson.class)
                // ... and pair it with another lesson ...
                .join(Lesson.class,
                        // ... in the same timeslot ...
                        Joiners.equal(Lesson::getTimeslot),
                        // ... in the same room ...
                        Joiners.equal(Lesson::getRoom),
                        // ... and the pair is unique (different id, no reverse pairs) ...
                        Joiners.lessThan(Lesson::getId))
                // ... then penalize each pair with a hard weight.
                .penalize(HardSoftScore.ONE_HARD)
                .asConstraint("Room conflict");
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>        // Select a lesson ...
        return constraintFactory
                .forEach(Lesson.class)
                // ... and pair it with another lesson ...
                .join(Lesson.class,
                        // ... in the same timeslot ...
                        Joiners.equal(Lesson::getTimeslot),
                        // ... in the same room ...
                        Joiners.equal(Lesson::getRoom),
                        // ... and the pair is unique (different id, no reverse pairs) ...
                        Joiners.lessThan(Lesson::getId))
                // ... then penalize each pair with a hard weight.
                .penalize(HardSoftScore.ONE_HARD)
                .asConstraint("Room conflict");
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>        JsonNode updatePropertyResponse = super.executeJsonRPCMethod("updateProperty",
                Map.of(
                        "name", "quarkus.application.name",
                        "value", "changedByTest"));
        Assertions.assertTrue(updatePropertyResponse.asBoolean());
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>        JsonNode updatePropertyResponse = super.executeJsonRPCMethod("updateProperty",
                Map.of(
                        "name", "quarkus.application.name",
                        "value", "changedByTest"));
        Assertions.assertTrue(updatePropertyResponse.asBoolean());
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>        List&lt;Lesson&gt; lessonList = new ArrayList&lt;&gt;();
        lessonList.add(new Lesson(101L, "Math", "B. May", "9th grade"));
        lessonList.add(new Lesson(102L, "Physics", "M. Curie", "9th grade"));
        lessonList.add(new Lesson(103L, "Geography", "M. Polo", "9th grade"));
        lessonList.add(new Lesson(104L, "English", "I. Jones", "9th grade"));
        lessonList.add(new Lesson(105L, "Spanish", "P. Cruz", "9th grade"));
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>        List&lt;Lesson&gt; lessonList = new ArrayList&lt;&gt;();
        lessonList.add(new Lesson(101L, "Math", "B. May", "9th grade"));
        lessonList.add(new Lesson(102L, "Physics", "M. Curie", "9th grade"));
        lessonList.add(new Lesson(103L, "Geography", "M. Polo", "9th grade"));
        lessonList.add(new Lesson(104L, "English", "I. Jones", "9th grade"));
        lessonList.add(new Lesson(105L, "Spanish", "P. Cruz", "9th grade"));
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>        List&lt;Room&gt; roomList = new ArrayList&lt;&gt;();
        roomList.add(new Room("Room A"));
        roomList.add(new Room("Room B"));
        roomList.add(new Room("Room C"));
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>        List&lt;Room&gt; roomList = new ArrayList&lt;&gt;();
        roomList.add(new Room("Room A"));
        roomList.add(new Room("Room B"));
        roomList.add(new Room("Room C"));
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>        code {
          font-size: 85%;
        }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>        code {
          font-size: 85%;
        }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>        conflictingLesson.setRoom(ROOM);
        conflictingLesson.setTimeslot(TIMESLOT1);
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>        conflictingLesson.setRoom(ROOM);
        conflictingLesson.setTimeslot(TIMESLOT1);
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>        constraintVerifier.verifyThat(TimeTableConstraintProvider::roomConflict)
                .given(firstLesson, conflictingLesson, nonConflictingLesson)
                .penalizesBy(1);
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>        constraintVerifier.verifyThat(TimeTableConstraintProvider::roomConflict)
                .given(firstLesson, conflictingLesson, nonConflictingLesson)
                .penalizesBy(1);
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>        firstLesson.setRoom(ROOM);
        firstLesson.setTimeslot(TIMESLOT1);
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>        firstLesson.setRoom(ROOM);
        firstLesson.setTimeslot(TIMESLOT1);
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>        lessonList.add(new Lesson(201L, "Math", "B. May", "10th grade"));
        lessonList.add(new Lesson(202L, "Chemistry", "M. Curie", "10th grade"));
        lessonList.add(new Lesson(203L, "History", "I. Jones", "10th grade"));
        lessonList.add(new Lesson(204L, "English", "P. Cruz", "10th grade"));
        lessonList.add(new Lesson(205L, "French", "M. Curie", "10th grade"));
        return new TimeTable(timeslotList, roomList, lessonList);
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>        lessonList.add(new Lesson(201L, "Math", "B. May", "10th grade"));
        lessonList.add(new Lesson(202L, "Chemistry", "M. Curie", "10th grade"));
        lessonList.add(new Lesson(203L, "History", "I. Jones", "10th grade"));
        lessonList.add(new Lesson(204L, "English", "P. Cruz", "10th grade"));
        lessonList.add(new Lesson(205L, "French", "M. Curie", "10th grade"));
        return new TimeTable(timeslotList, roomList, lessonList);
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>        nonConflictingLesson.setRoom(ROOM);
        nonConflictingLesson.setTimeslot(TIMESLOT2);
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>        nonConflictingLesson.setRoom(ROOM);
        nonConflictingLesson.setTimeslot(TIMESLOT2);
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>        } else {
            return html`No beans found`;
        }
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>        } else {
            return html`No beans found`;
        }
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>      if(bean.kind.toLowerCase() === "field"){
        kind = "Producer field";
        level = "success";
      }else if(bean.kind.toLowerCase() === "method"){
          kind = "Producer method";
          level = "success";
      }else if(bean.kind.toLowerCase() === "synthetic"){
        level = "contrast";
      }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>      if(bean.kind.toLowerCase() === "field"){
        kind = "Producer field";
        level = "success";
      }else if(bean.kind.toLowerCase() === "method"){
          kind = "Producer method";
          level = "success";
      }else if(bean.kind.toLowerCase() === "synthetic"){
        level = "contrast";
      }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>      return html`
        ${level
          ? html`&lt;qui-badge level='${level}' small&gt;&lt;span&gt;${kind}&lt;/span&gt;&lt;/qui-badge&gt;` 
          : html`&lt;qui-badge small&gt;&lt;span&gt;${kind}&lt;/span&gt;&lt;/qui-badge&gt;`
        }`;
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>      return html`
        ${level
          ? html`&lt;qui-badge level='${level}' small&gt;&lt;span&gt;${kind}&lt;/span&gt;&lt;/qui-badge&gt;` 
          : html`&lt;qui-badge small&gt;&lt;span&gt;${kind}&lt;/span&gt;&lt;/qui-badge&gt;`
        }`;
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    /**
     * Adds a new user to the database
     * @param username the username
     * @param password the unencrypted password (it will be encrypted with bcrypt)
     * @param role the comma-separated roles
     */
    public static void add(String username, String password, String role) { &lt;5&gt;
        User user = new User();
        user.username = username;
        user.password = BcryptUtil.bcryptHash(password);
        user.role = role;
        user.persist();
    }
}
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    /**
     * Adds a new user to the database
     * @param username the username
     * @param password the unencrypted password (it will be encrypted with bcrypt)
     * @param role the comma-separated roles
     */
    public static void add(String username, String password, String role) { &lt;5&gt;
        User user = new User();
        user.username = username;
        user.password = BcryptUtil.bcryptHash(password);
        user.role = role;
        user.persist();
    }
}
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    // ...
}
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    // ...
}
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    // ....
}
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    // ....
}
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    // To try, open http://localhost:8080/timeTable
    @GET
    public TimeTable getTimeTable() {
        // Get the solver status before loading the solution
        // to avoid the race condition that the solver terminates between them
        SolverStatus solverStatus = getSolverStatus();
        TimeTable solution = findById(SINGLETON_TIME_TABLE_ID);
        scoreManager.updateScore(solution); // Sets the score
        solution.setSolverStatus(solverStatus);
        return solution;
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    // To try, open http://localhost:8080/timeTable
    @GET
    public TimeTable getTimeTable() {
        // Get the solver status before loading the solution
        // to avoid the race condition that the solver terminates between them
        SolverStatus solverStatus = getSolverStatus();
        TimeTable solution = findById(SINGLETON_TIME_TABLE_ID);
        scoreManager.updateScore(solution); // Sets the score
        solution.setSolverStatus(solverStatus);
        return solution;
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    &lt;dependency&gt;
        &lt;groupId&gt;io.quarkus&lt;/groupId&gt;
        &lt;artifactId&gt;quarkus-junit5&lt;/artifactId&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    &lt;dependency&gt;
        &lt;groupId&gt;io.quarkus&lt;/groupId&gt;
        &lt;artifactId&gt;quarkus-junit5&lt;/artifactId&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    @GET
    @PermitAll
    @Produces(MediaType.TEXT_PLAIN)
    public String publicResource() {
        return "public";
   }
}
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    @GET
    @PermitAll
    @Produces(MediaType.TEXT_PLAIN)
    public String publicResource() {
        return "public";
   }
}
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    @GET
    @RolesAllowed("admin")
    @Produces(MediaType.TEXT_PLAIN)
    public String adminResource() {
         return "admin";
    }
}
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    @GET
    @RolesAllowed("admin")
    @Produces(MediaType.TEXT_PLAIN)
    public String adminResource() {
         return "admin";
    }
}
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    @GET
    @RolesAllowed("user")
    @Path("/me")
    public String me(@Context SecurityContext securityContext) {
        return securityContext.getUserPrincipal().getName();
    }
}
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    @GET
    @RolesAllowed("user")
    @Path("/me")
    public String me(@Context SecurityContext securityContext) {
        return securityContext.getUserPrincipal().getName();
    }
}
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    @Inject
    ConstraintVerifier&lt;TimeTableConstraintProvider, TimeTable&gt; constraintVerifier;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    @Inject
    ConstraintVerifier&lt;TimeTableConstraintProvider, TimeTable&gt; constraintVerifier;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    @Inject
    SolverManager&lt;TimeTable, Long&gt; solverManager;
    @Inject
    ScoreManager&lt;TimeTable, HardSoftScore&gt; scoreManager;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    @Inject
    SolverManager&lt;TimeTable, Long&gt; solverManager;
    @Inject
    ScoreManager&lt;TimeTable, HardSoftScore&gt; scoreManager;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    @Inject
    SolverManager&lt;TimeTable, UUID&gt; solverManager;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    @Inject
    SolverManager&lt;TimeTable, UUID&gt; solverManager;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    @Inject
    TimeTableResource timeTableResource;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    @Inject
    TimeTableResource timeTableResource;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    @Override
    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {
        return new Constraint[] {
                // Hard constraints
                roomConflict(constraintFactory),
                teacherConflict(constraintFactory),
                studentGroupConflict(constraintFactory),
                // Soft constraints are only implemented in the optaplanner-quickstarts code
        };
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    @Override
    public Constraint[] defineConstraints(ConstraintFactory constraintFactory) {
        return new Constraint[] {
                // Hard constraints
                roomConflict(constraintFactory),
                teacherConflict(constraintFactory),
                studentGroupConflict(constraintFactory),
                // Soft constraints are only implemented in the optaplanner-quickstarts code
        };
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    @Override
    public HardSoftScore calculateScore(TimeTable timeTable) {
        List&lt;Lesson&gt; lessonList = timeTable.getLessonList();
        int hardScore = 0;
        for (Lesson a : lessonList) {
            for (Lesson b : lessonList) {
                if (a.getTimeslot() != null &amp;&amp; a.getTimeslot().equals(b.getTimeslot())
                        &amp;&amp; a.getId() &lt; b.getId()) {
                    // A room can accommodate at most one lesson at the same time.
                    if (a.getRoom() != null &amp;&amp; a.getRoom().equals(b.getRoom())) {
                        hardScore--;
                    }
                    // A teacher can teach at most one lesson at the same time.
                    if (a.getTeacher().equals(b.getTeacher())) {
                        hardScore--;
                    }
                    // A student can attend at most one lesson at the same time.
                    if (a.getStudentGroup().equals(b.getStudentGroup())) {
                        hardScore--;
                    }
                }
            }
        }
        int softScore = 0;
        // Soft constraints are only implemented in the optaplanner-quickstarts code
        return HardSoftScore.of(hardScore, softScore);
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    @Override
    public HardSoftScore calculateScore(TimeTable timeTable) {
        List&lt;Lesson&gt; lessonList = timeTable.getLessonList();
        int hardScore = 0;
        for (Lesson a : lessonList) {
            for (Lesson b : lessonList) {
                if (a.getTimeslot() != null &amp;&amp; a.getTimeslot().equals(b.getTimeslot())
                        &amp;&amp; a.getId() &lt; b.getId()) {
                    // A room can accommodate at most one lesson at the same time.
                    if (a.getRoom() != null &amp;&amp; a.getRoom().equals(b.getRoom())) {
                        hardScore--;
                    }
                    // A teacher can teach at most one lesson at the same time.
                    if (a.getTeacher().equals(b.getTeacher())) {
                        hardScore--;
                    }
                    // A student can attend at most one lesson at the same time.
                    if (a.getStudentGroup().equals(b.getStudentGroup())) {
                        hardScore--;
                    }
                }
            }
        }
        int softScore = 0;
        // Soft constraints are only implemented in the optaplanner-quickstarts code
        return HardSoftScore.of(hardScore, softScore);
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    @Override
    public String toString() {
        return dayOfWeek + " " + startTime;
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    @Override
    public String toString() {
        return dayOfWeek + " " + startTime;
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    @Override
    public String toString() {
        return name;
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    @Override
    public String toString() {
        return name;
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    @Override
    public String toString() {
        return subject + "(" + id + ")";
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    @Override
    public String toString() {
        return subject + "(" + id + ")";
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    @POST
    @Path("/solve")
    public TimeTable solve(TimeTable problem) {
        UUID problemId = UUID.randomUUID();
        // Submit the problem to start solving
        SolverJob&lt;TimeTable, UUID&gt; solverJob = solverManager.solve(problemId, problem);
        TimeTable solution;
        try {
            // Wait until the solving ends
            solution = solverJob.getFinalBestSolution();
        } catch (InterruptedException | ExecutionException e) {
            throw new IllegalStateException("Solving failed.", e);
        }
        return solution;
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    @POST
    @Path("/solve")
    public TimeTable solve(TimeTable problem) {
        UUID problemId = UUID.randomUUID();
        // Submit the problem to start solving
        SolverJob&lt;TimeTable, UUID&gt; solverJob = solverManager.solve(problemId, problem);
        TimeTable solution;
        try {
            // Wait until the solving ends
            solution = solverJob.getFinalBestSolution();
        } catch (InterruptedException | ExecutionException e) {
            throw new IllegalStateException("Solving failed.", e);
        }
        return solution;
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    @POST
    @Path("/solve")
    public void solve() {
        solverManager.solveAndListen(SINGLETON_TIME_TABLE_ID,
                this::findById,
                this::save);
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    @POST
    @Path("/solve")
    public void solve() {
        solverManager.solveAndListen(SINGLETON_TIME_TABLE_ID,
                this::findById,
                this::save);
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    @POST
    @Path("/stopSolving")
    public void stopSolving() {
        solverManager.terminateEarly(SINGLETON_TIME_TABLE_ID);
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    @POST
    @Path("/stopSolving")
    public void stopSolving() {
        solverManager.terminateEarly(SINGLETON_TIME_TABLE_ID);
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    @PlanningId
    private Long id;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    @PlanningId
    private Long id;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    @PlanningScore
    private HardSoftScore score;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    @PlanningScore
    private HardSoftScore score;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    @PlanningVariable
    private Timeslot timeslot;
    @PlanningVariable
    private Room room;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    @PlanningVariable
    private Timeslot timeslot;
    @PlanningVariable
    private Room room;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    @PostConstruct
    void init() {
        Multi.createFrom().ticks().every(Duration.ofHours(4)).subscribe().with((item) -&gt; {
            jokeStream.onNext(getJoke());
        });
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    @PostConstruct
    void init() {
        Multi.createFrom().ticks().every(Duration.ofHours(4)).subscribe().with((item) -&gt; {
            jokeStream.onNext(getJoke());
        });
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    @RegisterExtension
    static final QuarkusDevModeTest config = new QuarkusDevModeTest().withEmptyApplication();
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    @RegisterExtension
    static final QuarkusDevModeTest config = new QuarkusDevModeTest().withEmptyApplication();
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    @Test
    @Timeout(600_000)
    public void solve() {
        TimeTable problem = generateProblem();
        TimeTable solution = timeTableResource.solve(problem);
        assertFalse(solution.getLessonList().isEmpty());
        for (Lesson lesson : solution.getLessonList()) {
            assertNotNull(lesson.getTimeslot());
            assertNotNull(lesson.getRoom());
        }
        assertTrue(solution.getScore().isFeasible());
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    @Test
    @Timeout(600_000)
    public void solve() {
        TimeTable problem = generateProblem();
        TimeTable solution = timeTableResource.solve(problem);
        assertFalse(solution.getLessonList().isEmpty());
        for (Lesson lesson : solution.getLessonList()) {
            assertNotNull(lesson.getTimeslot());
            assertNotNull(lesson.getRoom());
        }
        assertTrue(solution.getScore().isFeasible());
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    @Test
    @Timeout(600_000)
    public void solveDemoDataUntilFeasible() throws InterruptedException {
        timeTableResource.solve();
        TimeTable timeTable = timeTableResource.getTimeTable();
        while (timeTable.getSolverStatus() != SolverStatus.NOT_SOLVING) {
            // Quick polling (not a Test Thread Sleep anti-pattern)
            // Test is still fast on fast machines and doesn't randomly fail on slow machines.
            Thread.sleep(20L);
            timeTable = timeTableResource.getTimeTable();
        }
        assertFalse(timeTable.getLessonList().isEmpty());
        for (Lesson lesson : timeTable.getLessonList()) {
            assertNotNull(lesson.getTimeslot());
            assertNotNull(lesson.getRoom());
        }
        assertTrue(timeTable.getScore().isFeasible());
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    @Test
    @Timeout(600_000)
    public void solveDemoDataUntilFeasible() throws InterruptedException {
        timeTableResource.solve();
        TimeTable timeTable = timeTableResource.getTimeTable();
        while (timeTable.getSolverStatus() != SolverStatus.NOT_SOLVING) {
            // Quick polling (not a Test Thread Sleep anti-pattern)
            // Test is still fast on fast machines and doesn't randomly fail on slow machines.
            Thread.sleep(20L);
            timeTable = timeTableResource.getTimeTable();
        }
        assertFalse(timeTable.getLessonList().isEmpty());
        for (Lesson lesson : timeTable.getLessonList()) {
            assertNotNull(lesson.getTimeslot());
            assertNotNull(lesson.getRoom());
        }
        assertTrue(timeTable.getScore().isFeasible());
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    @Test
    public void testSomekey() throws Exception {
        JsonNode somekeyResponse = super.getBuildTimeData("somekey");
        Assertions.assertNotNull(somekeyResponse);
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    @Test
    public void testSomekey() throws Exception {
        JsonNode somekeyResponse = super.getBuildTimeData("somekey");
        Assertions.assertNotNull(somekeyResponse);
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    @Test
    public void testUpdateProperties() throws Exception {
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    @Test
    public void testUpdateProperties() throws Exception {
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    @Test
    void roomConflict() {
        Lesson firstLesson = new Lesson(1, "Subject1", "Teacher1", "Group1");
        Lesson conflictingLesson = new Lesson(2, "Subject2", "Teacher2", "Group2");
        Lesson nonConflictingLesson = new Lesson(3, "Subject3", "Teacher3", "Group3");
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    @Test
    void roomConflict() {
        Lesson firstLesson = new Lesson(1, "Subject1", "Teacher1", "Group1");
        Lesson conflictingLesson = new Lesson(2, "Subject2", "Teacher2", "Group2");
        Lesson nonConflictingLesson = new Lesson(3, "Subject3", "Teacher3", "Group3");
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    @Test
    void shouldAccessAdminWhenAdminAuthenticated() {
        given()
                .auth().preemptive().basic("admin", "admin")
                .when()
                .get("/api/admin")
                .then()
                .statusCode(HttpStatus.SC_OK);
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    @Test
    void shouldAccessAdminWhenAdminAuthenticated() {
        given()
                .auth().preemptive().basic("admin", "admin")
                .when()
                .get("/api/admin")
                .then()
                .statusCode(HttpStatus.SC_OK);
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    @Test
    void shouldAccessPublicWhenAnonymous() {
        get("/api/public")
                .then()
                .statusCode(HttpStatus.SC_OK);
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    @Test
    void shouldAccessPublicWhenAnonymous() {
        get("/api/public")
                .then()
                .statusCode(HttpStatus.SC_OK);
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    @Test
    void shouldAccessUserAndGetIdentityWhenUserAuthenticated() {
        given()
                .auth().preemptive().basic("user", "user")
                .when()
                .get("/api/users/me")
                .then()
                .statusCode(HttpStatus.SC_OK)
                .body(is("user"));
    }
}
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    @Test
    void shouldAccessUserAndGetIdentityWhenUserAuthenticated() {
        given()
                .auth().preemptive().basic("user", "user")
                .when()
                .get("/api/users/me")
                .then()
                .statusCode(HttpStatus.SC_OK)
                .body(is("user"));
    }
}
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    @Test
    void shouldNotAccessAdminWhenAnonymous() {
        get("/api/admin")
                .then()
                .statusCode(HttpStatus.SC_UNAUTHORIZED);
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    @Test
    void shouldNotAccessAdminWhenAnonymous() {
        get("/api/admin")
                .then()
                .statusCode(HttpStatus.SC_UNAUTHORIZED);
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    @Test
    void shouldNotAccessUserWhenAdminAuthenticated() {
        given()
                .auth().preemptive().basic("admin", "admin")
                .when()
                .get("/api/users/me")
                .then()
                .statusCode(HttpStatus.SC_FORBIDDEN);
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    @Test
    void shouldNotAccessUserWhenAdminAuthenticated() {
        given()
                .auth().preemptive().basic("admin", "admin")
                .when()
                .get("/api/users/me")
                .then()
                .statusCode(HttpStatus.SC_FORBIDDEN);
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    @Transactional
    protected TimeTable findById(Long id) {
        if (!SINGLETON_TIME_TABLE_ID.equals(id)) {
            throw new IllegalStateException("There is no timeTable with id (" + id + ").");
        }
        // Occurs in a single transaction, so each initialized lesson references the same timeslot/room instance
        // that is contained by the timeTable's timeslotList/roomList.
        return new TimeTable(
                Timeslot.listAll(Sort.by("dayOfWeek").and("startTime").and("endTime").and("id")),
                Room.listAll(Sort.by("name").and("id")),
                Lesson.listAll(Sort.by("subject").and("teacher").and("studentGroup").and("id")));
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    @Transactional
    protected TimeTable findById(Long id) {
        if (!SINGLETON_TIME_TABLE_ID.equals(id)) {
            throw new IllegalStateException("There is no timeTable with id (" + id + ").");
        }
        // Occurs in a single transaction, so each initialized lesson references the same timeslot/room instance
        // that is contained by the timeTable's timeslotList/roomList.
        return new TimeTable(
                Timeslot.listAll(Sort.by("dayOfWeek").and("startTime").and("endTime").and("id")),
                Room.listAll(Sort.by("name").and("id")),
                Lesson.listAll(Sort.by("subject").and("teacher").and("studentGroup").and("id")));
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    @Transactional
    protected void save(TimeTable timeTable) {
        for (Lesson lesson : timeTable.getLessonList()) {
            // TODO this is awfully naive: optimistic locking causes issues if called by the SolverManager
            Lesson attachedLesson = Lesson.findById(lesson.getId());
            attachedLesson.setTimeslot(lesson.getTimeslot());
            attachedLesson.setRoom(lesson.getRoom());
        }
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    @Transactional
    protected void save(TimeTable timeTable) {
        for (Lesson lesson : timeTable.getLessonList()) {
            // TODO this is awfully naive: optimistic locking causes issues if called by the SolverManager
            Lesson attachedLesson = Lesson.findById(lesson.getId());
            attachedLesson.setTimeslot(lesson.getTimeslot());
            attachedLesson.setRoom(lesson.getRoom());
        }
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    @ValueRangeProvider
    @ProblemFactCollectionProperty
    private List&lt;Timeslot&gt; timeslotList;
    @ValueRangeProvider
    @ProblemFactCollectionProperty
    private List&lt;Room&gt; roomList;
    @PlanningEntityCollectionProperty
    private List&lt;Lesson&gt; lessonList;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    @ValueRangeProvider
    @ProblemFactCollectionProperty
    private List&lt;Timeslot&gt; timeslotList;
    @ValueRangeProvider
    @ProblemFactCollectionProperty
    private List&lt;Room&gt; roomList;
    @PlanningEntityCollectionProperty
    private List&lt;Lesson&gt; lessonList;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    CardPageBuildItem cardPageBuildItem = new CardPageBuildItem(); // &lt;2&gt;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    CardPageBuildItem cardPageBuildItem = new CardPageBuildItem(); // &lt;2&gt;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    Constraint roomConflict(ConstraintFactory constraintFactory) {
        // A room can accommodate at most one lesson at the same time.
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    Constraint roomConflict(ConstraintFactory constraintFactory) {
        // A room can accommodate at most one lesson at the same time.
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    Constraint studentGroupConflict(ConstraintFactory constraintFactory) {
        // A student can attend at most one lesson at the same time.
        return constraintFactory.forEach(Lesson.class)
                .join(Lesson.class,
                        Joiners.equal(Lesson::getTimeslot),
                        Joiners.equal(Lesson::getStudentGroup),
                        Joiners.lessThan(Lesson::getId))
                .penalize(HardSoftScore.ONE_HARD)
                .asConstraint("Student group conflict");
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    Constraint studentGroupConflict(ConstraintFactory constraintFactory) {
        // A student can attend at most one lesson at the same time.
        return constraintFactory.forEach(Lesson.class)
                .join(Lesson.class,
                        Joiners.equal(Lesson::getTimeslot),
                        Joiners.equal(Lesson::getStudentGroup),
                        Joiners.lessThan(Lesson::getId))
                .penalize(HardSoftScore.ONE_HARD)
                .asConstraint("Student group conflict");
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    Constraint teacherConflict(ConstraintFactory constraintFactory) {
        // A teacher can teach at most one lesson at the same time.
        return constraintFactory.forEach(Lesson.class)
                .join(Lesson.class,
                        Joiners.equal(Lesson::getTimeslot),
                        Joiners.equal(Lesson::getTeacher),
                        Joiners.lessThan(Lesson::getId))
                .penalize(HardSoftScore.ONE_HARD)
                .asConstraint("Teacher conflict");
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    Constraint teacherConflict(ConstraintFactory constraintFactory) {
        // A teacher can teach at most one lesson at the same time.
        return constraintFactory.forEach(Lesson.class)
                .join(Lesson.class,
                        Joiners.equal(Lesson::getTimeslot),
                        Joiners.equal(Lesson::getTeacher),
                        Joiners.lessThan(Lesson::getId))
                .penalize(HardSoftScore.ONE_HARD)
                .asConstraint("Teacher conflict");
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    _beanRenderer(bean) {
        return html`&lt;vaadin-vertical-layout&gt;
      &lt;code class="annotation"&gt;@${bean.scope.simpleName}&lt;/code&gt;
      ${bean.nonDefaultQualifiers.map(qualifier =&gt;
            html`${this._qualifierRenderer(qualifier)}`
        )}
      &lt;code&gt;${bean.providerType.name}&lt;/code&gt;
      &lt;/vaadin-vertical-layout&gt;`;
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    _beanRenderer(bean) {
        return html`&lt;vaadin-vertical-layout&gt;
      &lt;code class="annotation"&gt;@${bean.scope.simpleName}&lt;/code&gt;
      ${bean.nonDefaultQualifiers.map(qualifier =&gt;
            html`${this._qualifierRenderer(qualifier)}`
        )}
      &lt;code&gt;${bean.providerType.name}&lt;/code&gt;
      &lt;/vaadin-vertical-layout&gt;`;
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    _camelize(str) {
        return str.replace(/(?:^\w|[A-Z]|\b\w|\s+)/g, function (match, index) {
            if (+match === 0)
                return "";
            return index === 0 ? match.toUpperCase() : match.toLowerCase();
        });
    }
}
customElements.define('qwc-arc-beans', QwcArcBeans);
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    _camelize(str) {
        return str.replace(/(?:^\w|[A-Z]|\b\w|\s+)/g, function (match, index) {
            if (+match === 0)
                return "";
            return index === 0 ? match.toUpperCase() : match.toLowerCase();
        });
    }
}
customElements.define('qwc-arc-beans', QwcArcBeans);
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    _interceptorsRenderer(bean) {
        if (bean.interceptors &amp;&amp; bean.interceptors.length &gt; 0) {
            return html`&lt;vaadin-vertical-layout&gt;
                          ${bean.interceptorInfos.map(interceptor =&gt;
                              html`&lt;div&gt;
                                    &lt;code&gt;${interceptor.interceptorClass.name}&lt;/code&gt; 
                                    &lt;qui-badge class="${bean.kind.toLowerCase()}" small pill&gt;&lt;span&gt;${interceptor.priority}&lt;/span&gt;&lt;/qui-badge&gt;
                                  &lt;/div&gt;`
                          )}
                        &lt;/vaadin-vertical-layout&gt;`;
        }
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    _interceptorsRenderer(bean) {
        if (bean.interceptors &amp;&amp; bean.interceptors.length &gt; 0) {
            return html`&lt;vaadin-vertical-layout&gt;
                          ${bean.interceptorInfos.map(interceptor =&gt;
                              html`&lt;div&gt;
                                    &lt;code&gt;${interceptor.interceptorClass.name}&lt;/code&gt; 
                                    &lt;qui-badge class="${bean.kind.toLowerCase()}" small pill&gt;&lt;span&gt;${interceptor.priority}&lt;/span&gt;&lt;/qui-badge&gt;
                                  &lt;/div&gt;`
                          )}
                        &lt;/vaadin-vertical-layout&gt;`;
        }
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    _kindBadgeRenderer(bean){
      let kind = this._camelize(bean.kind);
      let level = null;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    _kindBadgeRenderer(bean){
      let kind = this._camelize(bean.kind);
      let level = null;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    _kindClassRenderer(bean){
      return html`
          ${bean.declaringClass
            ? html`&lt;code class="producer"&gt;${bean.declaringClass.simpleName}.${bean.memberName}()&lt;/code&gt;`
            : html`&lt;code class="producer"&gt;${bean.memberName}&lt;/code&gt;`
          }
      `;
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    _kindClassRenderer(bean){
      return html`
          ${bean.declaringClass
            ? html`&lt;code class="producer"&gt;${bean.declaringClass.simpleName}.${bean.memberName}()&lt;/code&gt;`
            : html`&lt;code class="producer"&gt;${bean.memberName}&lt;/code&gt;`
          }
      `;
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    _kindRenderer(bean) {
      return html`
        &lt;vaadin-vertical-layout&gt;
          ${this._kindBadgeRenderer(bean)}
          ${this._kindClassRenderer(bean)}
        &lt;/vaadin-vertical-layout&gt;
    `;
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    _kindRenderer(bean) {
      return html`
        &lt;vaadin-vertical-layout&gt;
          ${this._kindBadgeRenderer(bean)}
          ${this._kindClassRenderer(bean)}
        &lt;/vaadin-vertical-layout&gt;
    `;
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    _qualifierRenderer(qualifier) {
        return html`&lt;code class="annotation"&gt;${qualifier.simpleName}&lt;/code&gt;`;
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    _qualifierRenderer(qualifier) {
        return html`&lt;code class="annotation"&gt;${qualifier.simpleName}&lt;/code&gt;`;
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    cardPageBuildItem.addPage(Page.externalPageBuilder("Schema json")
            .url(nonApplicationRootPathBuildItem.resolvePath("openapi") + "?format=json")
            .isJsonContent()
            .icon("font-awesome-solid:file-code"));
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    cardPageBuildItem.addPage(Page.externalPageBuilder("Schema json")
            .url(nonApplicationRootPathBuildItem.resolvePath("openapi") + "?format=json")
            .isJsonContent()
            .icon("font-awesome-solid:file-code"));
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    cardPageBuildItem.addPage(Page.externalPageBuilder("Schema yaml") // &lt;3&gt;
            .url(nonApplicationRootPathBuildItem.resolvePath("openapi")) // &lt;4&gt;
            .isYamlContent() // &lt;5&gt;
            .icon("font-awesome-solid:file-lines")); // &lt;6&gt;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    cardPageBuildItem.addPage(Page.externalPageBuilder("Schema yaml") // &lt;3&gt;
            .url(nonApplicationRootPathBuildItem.resolvePath("openapi")) // &lt;4&gt;
            .isYamlContent() // &lt;5&gt;
            .icon("font-awesome-solid:file-lines")); // &lt;6&gt;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    cardPageBuildItem.addPage(Page.externalPageBuilder("Swagger UI")
            .url(nonApplicationRootPathBuildItem.resolvePath("swagger-ui"))
            .isHtmlContent()
            .icon("font-awesome-solid:signs-post"));
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    cardPageBuildItem.addPage(Page.externalPageBuilder("Swagger UI")
            .url(nonApplicationRootPathBuildItem.resolvePath("swagger-ui"))
            .isHtmlContent()
            .icon("font-awesome-solid:signs-post"));
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    constructor() {
        super();
        this._beans = beans;
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    constructor() {
        super();
        this._beans = beans;
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    constructor() { // &lt;7&gt;
        super();
        this._beans = beans;
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    constructor() { // &lt;7&gt;
        super();
        this._beans = beans;
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    hotReload(){
        // ..
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    hotReload(){
        // ..
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    private DayOfWeek dayOfWeek;
    private LocalTime startTime;
    private LocalTime endTime;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    private DayOfWeek dayOfWeek;
    private LocalTime startTime;
    private LocalTime endTime;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    private String name;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    private String name;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    private String subject;
    private String teacher;
    private String studentGroup;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    private String subject;
    private String teacher;
    private String studentGroup;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    private TimeTable generateProblem() {
        List&lt;Timeslot&gt; timeslotList = new ArrayList&lt;&gt;();
        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(8, 30), LocalTime.of(9, 30)));
        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(9, 30), LocalTime.of(10, 30)));
        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(10, 30), LocalTime.of(11, 30)));
        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(13, 30), LocalTime.of(14, 30)));
        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(14, 30), LocalTime.of(15, 30)));
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    private TimeTable generateProblem() {
        List&lt;Timeslot&gt; timeslotList = new ArrayList&lt;&gt;();
        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(8, 30), LocalTime.of(9, 30)));
        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(9, 30), LocalTime.of(10, 30)));
        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(10, 30), LocalTime.of(11, 30)));
        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(13, 30), LocalTime.of(14, 30)));
        timeslotList.add(new Timeslot(DayOfWeek.MONDAY, LocalTime.of(14, 30), LocalTime.of(15, 30)));
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    private final BroadcastProcessor&lt;Joke&gt; jokeStream = BroadcastProcessor.create();
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    private final BroadcastProcessor&lt;Joke&gt; jokeStream = BroadcastProcessor.create();
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    private static final Room ROOM = new Room("Room1");
    private static final Timeslot TIMESLOT1 = new Timeslot(DayOfWeek.MONDAY, LocalTime.of(9,0), LocalTime.NOON);
    private static final Timeslot TIMESLOT2 = new Timeslot(DayOfWeek.TUESDAY, LocalTime.of(9,0), LocalTime.NOON);
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    private static final Room ROOM = new Room("Room1");
    private static final Timeslot TIMESLOT1 = new Timeslot(DayOfWeek.MONDAY, LocalTime.of(9,0), LocalTime.NOON);
    private static final Timeslot TIMESLOT2 = new Timeslot(DayOfWeek.TUESDAY, LocalTime.of(9,0), LocalTime.NOON);
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    public DayOfWeek getDayOfWeek() {
        return dayOfWeek;
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    public DayOfWeek getDayOfWeek() {
        return dayOfWeek;
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    public HardSoftScore getScore() {
        return score;
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    public HardSoftScore getScore() {
        return score;
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    public Lesson() {
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    public Lesson() {
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    public Lesson(Long id, String subject, String teacher, String studentGroup) {
        this.id = id;
        this.subject = subject;
        this.teacher = teacher;
        this.studentGroup = studentGroup;
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    public Lesson(Long id, String subject, String teacher, String studentGroup) {
        this.id = id;
        this.subject = subject;
        this.teacher = teacher;
        this.studentGroup = studentGroup;
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    public List&lt;Lesson&gt; getLessonList() {
        return lessonList;
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    public List&lt;Lesson&gt; getLessonList() {
        return lessonList;
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    public List&lt;Room&gt; getRoomList() {
        return roomList;
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    public List&lt;Room&gt; getRoomList() {
        return roomList;
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    public List&lt;Timeslot&gt; getTimeslotList() {
        return timeslotList;
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    public List&lt;Timeslot&gt; getTimeslotList() {
        return timeslotList;
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    public LocalTime getEndTime() {
        return endTime;
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    public LocalTime getEndTime() {
        return endTime;
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    public LocalTime getStartTime() {
        return startTime;
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    public LocalTime getStartTime() {
        return startTime;
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    public Long getId() {
        return id;
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    public Long getId() {
        return id;
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    public Multi&lt;Joke&gt; streamJokes() { // &lt;1&gt;
        return jokeStream;
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    public Multi&lt;Joke&gt; streamJokes() { // &lt;1&gt;
        return jokeStream;
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    public Room getRoom() {
        return room;
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    public Room getRoom() {
        return room;
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    public Room() {
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    public Room() {
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    public Room(String name) {
        this.name = name;
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    public Room(String name) {
        this.name = name;
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    public SolverStatus getSolverStatus() {
        return solverManager.getSolverStatus(SINGLETON_TIME_TABLE_ID);
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    public SolverStatus getSolverStatus() {
        return solverManager.getSolverStatus(SINGLETON_TIME_TABLE_ID);
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    public SomeTest() {
        super("io.quarkus.my-extension");
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    public SomeTest() {
        super("io.quarkus.my-extension");
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    public String getName() {
        return name;
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    public String getName() {
        return name;
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    public String getStudentGroup() {
        return studentGroup;
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    public String getStudentGroup() {
        return studentGroup;
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    public String getSubject() {
        return subject;
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    public String getSubject() {
        return subject;
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    public String getTeacher() {
        return teacher;
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    public String getTeacher() {
        return teacher;
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    public TimeTable() {
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    public TimeTable() {
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    public TimeTable(List&lt;Timeslot&gt; timeslotList, List&lt;Room&gt; roomList, List&lt;Lesson&gt; lessonList) {
        this.timeslotList = timeslotList;
        this.roomList = roomList;
        this.lessonList = lessonList;
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    public TimeTable(List&lt;Timeslot&gt; timeslotList, List&lt;Room&gt; roomList, List&lt;Lesson&gt; lessonList) {
        this.timeslotList = timeslotList;
        this.roomList = roomList;
        this.lessonList = lessonList;
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    public Timeslot getTimeslot() {
        return timeslot;
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    public Timeslot getTimeslot() {
        return timeslot;
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    public Timeslot() {
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    public Timeslot() {
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    public Timeslot(DayOfWeek dayOfWeek, LocalTime startTime, LocalTime endTime) {
        this.dayOfWeek = dayOfWeek;
        this.startTime = startTime;
        this.endTime = endTime;
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    public Timeslot(DayOfWeek dayOfWeek, LocalTime startTime, LocalTime endTime) {
        this.dayOfWeek = dayOfWeek;
        this.startTime = startTime;
        this.endTime = endTime;
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    public static final Long SINGLETON_TIME_TABLE_ID = 1L;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    public static final Long SINGLETON_TIME_TABLE_ID = 1L;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    public void setRoom(Room room) {
        this.room = room;
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    public void setRoom(Room room) {
        this.room = room;
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    public void setTimeslot(Timeslot timeslot) {
        this.timeslot = timeslot;
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    public void setTimeslot(Timeslot timeslot) {
        this.timeslot = timeslot;
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    render() {
        if (this._beans) {
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    render() {
        if (this._beans) {
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    render() { // &lt;8&gt;
        if (this._beans) {
            return html`&lt;ul&gt;
                ${this._beans.map((bean) =&gt; // &lt;9&gt;
                    html`&lt;li&gt;${bean.providerType.name}&lt;/li&gt;`
                )}&lt;/ul&gt;`;
        } else {
            return html`No beans found`;
        }
    }
}
customElements.define('qwc-arc-beans', QwcArcBeans); // &lt;10&gt;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    render() { // &lt;8&gt;
        if (this._beans) {
            return html`&lt;ul&gt;
                ${this._beans.map((bean) =&gt; // &lt;9&gt;
                    html`&lt;li&gt;${bean.providerType.name}&lt;/li&gt;`
                )}&lt;/ul&gt;`;
        } else {
            return html`No beans found`;
        }
    }
}
customElements.define('qwc-arc-beans', QwcArcBeans); // &lt;10&gt;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    render(){
        // ...
    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    render(){
        // ...
    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    return cardPageBuildItem;
}
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    return cardPageBuildItem;
}
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    static properties = {
        _beans: {state: true},
    };
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    static properties = {
        _beans: {state: true},
    };
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    static properties = {
        _beans: {state: true}, // &lt;6&gt;
    };
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    static properties = {
        _beans: {state: true}, // &lt;6&gt;
    };
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    static styles = css`
        .arctable {
          height: 100%;
          padding-bottom: 10px;
        }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    static styles = css`
        .arctable {
          height: 100%;
          padding-bottom: 10px;
        }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    static styles = css` // &lt;4&gt;
        .annotation {
          color: var(--lumo-contrast-50pct); // &lt;5&gt;
        }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    static styles = css` // &lt;4&gt;
        .annotation {
          color: var(--lumo-contrast-50pct); // &lt;5&gt;
        }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    testImplementation 'io.quarkus:quarkus-junit5'
}
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    testImplementation 'io.quarkus:quarkus-junit5'
}
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    var array = new JsonArray();
    for (CaffeineCache cc : allCaches) {
        array.add(getJsonRepresentationForCache(cc));
    }
    return array;
}
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    var array = new JsonArray();
    for (CaffeineCache cc : allCaches) {
        array.add(getJsonRepresentationForCache(cc));
    }
    return array;
}
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>    }
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>    }
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>"Context" Holder</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Portador do "Contexto"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg># Effectively disable spent-time termination in favor of the best-score-limit
%test.quarkus.optaplanner.solver.termination.spent-limit=1h
%test.quarkus.optaplanner.solver.termination.best-score-limit=0hard/*soft
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg># Effectively disable spent-time termination in favor of the best-score-limit
%test.quarkus.optaplanner.solver.termination.spent-limit=1h
%test.quarkus.optaplanner.solver.termination.best-score-limit=0hard/*soft
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg># The solver runs only for 5 seconds to avoid an HTTP timeout in this simple implementation.
# It's recommended to run for at least 5 minutes ("5m") otherwise.
quarkus.optaplanner.solver.termination.spent-limit=5s
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg># The solver runs only for 5 seconds to avoid an HTTP timeout in this simple implementation.
# It's recommended to run for at least 5 minutes ("5m") otherwise.
quarkus.optaplanner.solver.termination.spent-limit=5s
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>## How do you unify imperative and reactive programming?</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>## Como unificar a programação imperativa e reativa?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>## What are you doing to improve developer joy?</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>## O que você está fazendo para melhorar a alegria do desenvolvedor?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>## What does Container First mean?</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>## O que significa Container First?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>## What is GraalVM?</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>## O que é GraalVM?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>## What is your view on standards?</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>## Qual é a sua opinião sobre os padrões?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>$ curl -i -X GET -u admin:admin http://localhost:8080/api/admin
HTTP/1.1 200 OK
Content-Length: 5
Content-Type: text/plain;charset=UTF-8
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>$ curl -i -X GET -u admin:admin http://localhost:8080/api/admin
HTTP/1.1 200 OK
Content-Length: 5
Content-Type: text/plain;charset=UTF-8
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>$ curl -i -X GET -u admin:admin http://localhost:8080/api/users/me
HTTP/1.1 403 Forbidden
Content-Length: 34
Content-Type: text/html;charset=UTF-8
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>$ curl -i -X GET -u admin:admin http://localhost:8080/api/users/me
HTTP/1.1 403 Forbidden
Content-Length: 34
Content-Type: text/html;charset=UTF-8
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>$ curl -i -X GET -u user:user http://localhost:8080/api/users/me
HTTP/1.1 200 OK
Content-Length: 4
Content-Type: text/plain;charset=UTF-8
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>$ curl -i -X GET -u user:user http://localhost:8080/api/users/me
HTTP/1.1 200 OK
Content-Length: 4
Content-Type: text/plain;charset=UTF-8
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>$ curl -i -X GET http://localhost:8080/api/admin
HTTP/1.1 401 Unauthorized
Content-Length: 14
Content-Type: text/html;charset=UTF-8
WWW-Authenticate: Basic
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>$ curl -i -X GET http://localhost:8080/api/admin
HTTP/1.1 401 Unauthorized
Content-Length: 14
Content-Type: text/html;charset=UTF-8
WWW-Authenticate: Basic
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>$ curl -i -X GET http://localhost:8080/api/public
HTTP/1.1 200 OK
Content-Length: 6
Content-Type: text/plain;charset=UTF-8
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>$ curl -i -X GET http://localhost:8080/api/public
HTTP/1.1 200 OK
Content-Length: 6
Content-Type: text/plain;charset=UTF-8
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>$ curl -i -X POST http://localhost:8080/timeTable/solve -H "Content-Type:application/json" -d '{"timeslotList":[{"dayOfWeek":"MONDAY","startTime":"08:30:00","endTime":"09:30:00"},{"dayOfWeek":"MONDAY","startTime":"09:30:00","endTime":"10:30:00"}],"roomList":[{"name":"Room A"},{"name":"Room B"}],"lessonList":[{"id":1,"subject":"Math","teacher":"A. Turing","studentGroup":"9th grade"},{"id":2,"subject":"Chemistry","teacher":"M. Curie","studentGroup":"9th grade"},{"id":3,"subject":"French","teacher":"M. Curie","studentGroup":"10th grade"},{"id":4,"subject":"History","teacher":"I. Jones","studentGroup":"10th grade"}]}'
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>$ curl -i -X POST http://localhost:8080/timeTable/solve -H "Content-Type:application/json" -d '{"timeslotList":[{"dayOfWeek":"MONDAY","startTime":"08:30:00","endTime":"09:30:00"},{"dayOfWeek":"MONDAY","startTime":"09:30:00","endTime":"10:30:00"}],"roomList":[{"name":"Room A"},{"name":"Room B"}],"lessonList":[{"id":1,"subject":"Math","teacher":"A. Turing","studentGroup":"9th grade"},{"id":2,"subject":"Chemistry","teacher":"M. Curie","studentGroup":"9th grade"},{"id":3,"subject":"French","teacher":"M. Curie","studentGroup":"10th grade"},{"id":4,"subject":"History","teacher":"I. Jones","studentGroup":"10th grade"}]}'
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>%prod.quarkus.datasource.db-kind=postgresql
%prod.quarkus.datasource.username=quarkus
%prod.quarkus.datasource.password=quarkus
%prod.quarkus.datasource.jdbc.url=jdbc:postgresql:elytron_security_jpa
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>%prod.quarkus.datasource.db-kind=postgresql
%prod.quarkus.datasource.username=quarkus
%prod.quarkus.datasource.password=quarkus
%prod.quarkus.datasource.jdbc.url=jdbc:postgresql:elytron_security_jpa
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>%prod.quarkus.datasource.reactive.url=vertx-reactive:postgresql://localhost:5431/security_jpa
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>%prod.quarkus.datasource.reactive.url=vertx-reactive:postgresql://localhost:5431/security_jpa
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>(Optional) Add the GraalVM `bin` directory to the path</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>(Opcional) Adicione o diretório `bin` GraalVM `bin` no PATH</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>(Optional) Set the `JAVA_HOME` environment variable to the GraalVM installation directory.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>(Opcional) Defina a variável de ambiente `JAVA_HOME` para o diretório de instalação do GraalVM.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>**Important:** the guides are maintained in the main Quarkus repository and pull requests should be submitted there:
https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc.
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>**Importante:** os guias são mantidos no repositório principal do Quarkus e pull requests devem ser enviados por lá:
https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc.
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>*Deprecated*: backward compatibility and presence in the ecosystem is not guaranteed. Such extensions are likely to be replaced or removed in a future version of Quarkus.
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>*Deprecated*: a compatibilidade com versões anteriores e a presença no ecossistema não são garantidas. Tais extensões provavelmente serão substituídas ou removidas em uma versão futura do Quarkus.
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>*Experimental*: early feedback is requested to mature the idea. There is no guarantee of stability nor long term presence in the platform until the solution matures. Such extensions are at the beginning of their maturation process.
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>*Experimental*: é solicitado feedback antecipado para amadurecer a ideia. Não há garantia de estabilidade nem presença de longo prazo na plataforma até que a solução amadureça. Tais extensões estão no início de seu processo de maturação.
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>*Image credit: https://diataxis.fr/*</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>*Crédito da imagem: https://diataxis.fr/*</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>*Preview*: backward compatibility and presence in the ecosystem is not guaranteed. Specific improvements might require to change configuration or APIs and plans to become _stable_ are under way. Such extensions are in the middle of their maturation process.
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>*Preview*: a retrocompatibilidade e a presença no ecossistema não são garantidas. Melhorias específicas podem exigir a alteração da configuração ou APIs e planos para se tornar _stable_ estão em andamento. Tais extensões estão no meio de seu processo de maturação.
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>*Stable*: backward compatibility and presence in the ecosystem are taken very seriously. An application can safely rely on these extensions. Extensions not marked as preview or experimental (the majority) are stable.
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>*Stable*: retrocompatibilidade e presença no ecossistema são levadas muito a sério. Um aplicativo pode confiar com segurança nessas extensões. As extensões não marcadas como visualização ou experimentais (a maioria) são estáveis.
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>*Template extension methods* are used to extend the set of accessible properties of data objects.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>*Os métodos de extensão de modelos* são utilizados para estender o conjunto de propriedades acessíveis dos objetos de dados.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>+</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>+</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>+
- The associated recorder should use the provided `MetricsFactory` to register metrics, for example</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>+ - O registrador associado deve usar o `MetricsFactory` fornecido para registrar métricas, por exemplo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>... Solving ended: ..., score calculation speed (29455/sec), ...
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>... Solving ended: ..., score calculation speed (29455/sec), ...
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>... Solving started: time spent (33), best score (-8init/0hard/0soft), environment mode (REPRODUCIBLE), random (JDK with seed 0).
... Construction Heuristic phase (0) ended: time spent (73), best score (0hard/0soft), score calculation speed (459/sec), step total (4).
... Local Search phase (1) ended: time spent (5000), best score (0hard/0soft), score calculation speed (28949/sec), step total (28398).
... Solving ended: time spent (5000), best score (0hard/0soft), score calculation speed (28524/sec), phase total (2), environment mode (REPRODUCIBLE).
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>... Solving started: time spent (33), best score (-8init/0hard/0soft), environment mode (REPRODUCIBLE), random (JDK with seed 0).
... Construction Heuristic phase (0) ended: time spent (73), best score (0hard/0soft), score calculation speed (459/sec), step total (4).
... Local Search phase (1) ended: time spent (5000), best score (0hard/0soft), score calculation speed (28949/sec), step total (28398).
... Solving ended: time spent (5000), best score (0hard/0soft), score calculation speed (28524/sec), phase total (2), environment mode (REPRODUCIBLE).
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>... Solving started: time spent (67), best score (-20init/0hard/0soft), environment mode (REPRODUCIBLE), random (JDK with seed 0).
...     CH step (0), time spent (128), score (-18init/0hard/0soft), selected move count (15), picked move ([Math(101) {null -&gt; Room A}, Math(101) {null -&gt; MONDAY 08:30}]).
...     CH step (1), time spent (145), score (-16init/0hard/0soft), selected move count (15), picked move ([Physics(102) {null -&gt; Room A}, Physics(102) {null -&gt; MONDAY 09:30}]).
...
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>... Solving started: time spent (67), best score (-20init/0hard/0soft), environment mode (REPRODUCIBLE), random (JDK with seed 0).
...     CH step (0), time spent (128), score (-18init/0hard/0soft), selected move count (15), picked move ([Math(101) {null -&gt; Room A}, Math(101) {null -&gt; MONDAY 08:30}]).
...     CH step (1), time spent (145), score (-16init/0hard/0soft), selected move count (15), picked move ([Physics(102) {null -&gt; Room A}, Physics(102) {null -&gt; MONDAY 09:30}]).
...
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>... and a name of a method that should compute the value of the header. It can either be a static method or a default method in this interface. The method can take either no parameters, a single String parameter or a single `io.quarkus.rest.client.reactive.ComputedParamContext` parameter (which is very useful for code that needs to compute headers based on method parameters and naturally complements `@io.quarkus.rest.client.reactive.NotBody`).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>... e um nome de um método que deve calcular o valor do cabeçalho. Pode ser um método estático ou um método padrão nesta interface. O método pode não receber nenhum parâmetro, um único parâmetro String ou um único parâmetro `io.quarkus.rest.client.reactive.ComputedParamContext` (que é muito útil para código que precisa calcular cabeçalhos com base em parâmetros de métodos e complementa naturalmente `@io.quarkus.rest.client.reactive.NotBody`).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>... as well as a value from your application's configuration</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>... bem como um valor da configuração da sua aplicação</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>... or as a normal Jakarta REST `@HeaderParam` annotated argument</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>... ou como um argumento anotado do Jakarta REST `@HeaderParam` normal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>... or even any mixture of verbatim text, method parameters (referenced by name), a configuration value (as mentioned previously) and method invocations (as mentioned before)</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>... ou mesmo qualquer mistura de texto literal, parâmetros de métodos (referenciados pelo nome), um valor de configuração (como mencionado anteriormente) e invocações de métodos (como mencionado anteriormente)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>./gradlew --console=plain quarkusDev {dev-additional-parameters}
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>./gradlew --console=plain quarkusDev {dev-additional-parameters}
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>./gradlew build -Dquarkus.package.type=native -Dquarkus.native.container-build=true {build-additional-parameters}
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>./gradlew build -Dquarkus.package.type=native -Dquarkus.native.container-build=true {build-additional-parameters}
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>./mvnw install -Dnative -Dquarkus.native.container-build=true {build-additional-parameters}
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>./mvnw install -Dnative -Dquarkus.native.container-build=true {build-additional-parameters}
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>./mvnw quarkus:dev {dev-additional-parameters}
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>./mvnw quarkus:dev {dev-additional-parameters}
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>./target/security-jpa-quickstart-runner
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>./target/security-jpa-quickstart-runner
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/**
  * Called when displayed
  */
connectedCallback() {
    super.connectedCallback();
    this.jsonRpc.getAll().then(jsonRpcResponse =&gt; { // &lt;1&gt;
        this._caches = new Map();
        jsonRpcResponse.result.forEach(c =&gt; { //&lt;2&gt;
            this._caches.set(c.name, c);
        });
    });
}
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/**
  * Called when displayed
  */
connectedCallback() {
    super.connectedCallback();
    this.jsonRpc.getAll().then(jsonRpcResponse =&gt; { // &lt;1&gt;
        this._caches = new Map();
        jsonRpcResponse.result.forEach(c =&gt; { //&lt;2&gt;
            this._caches.set(c.name, c);
        });
    });
}
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/**
 * This component shows the Arc Beans
 */
export class QwcArcBeans extends LitElement {
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/**
 * This component shows the Arc Beans
 */
export class QwcArcBeans extends LitElement {
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/**
 * This component shows the Arc Beans
 */
export class QwcArcBeans extends LitElement { // &lt;3&gt;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/**
 * This component shows the Arc Beans
 */
export class QwcArcBeans extends LitElement { // &lt;3&gt;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>// ...
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>// ...
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>// ...
this.logControl
                .addToggle("On/off switch", true, (e) =&gt; {
                    this._toggleOnOffClicked(e);
                }).addItem("Log levels", "font-awesome-solid:layer-group", "var(--lumo-tertiary-text-color)", (e) =&gt; {
                    this._logLevels();
                }).addItem("Columns", "font-awesome-solid:table-columns", "var(--lumo-tertiary-text-color)", (e) =&gt; {
                    this._columns();
                }).addItem("Zoom out", "font-awesome-solid:magnifying-glass-minus", "var(--lumo-tertiary-text-color)", (e) =&gt; {
                    this._zoomOut();
                }).addItem("Zoom in", "font-awesome-solid:magnifying-glass-plus", "var(--lumo-tertiary-text-color)", (e) =&gt; {
                    this._zoomIn();
                }).addItem("Clear", "font-awesome-solid:trash-can", "var(--lumo-error-color)", (e) =&gt; {
                    this._clearLog();
                }).addFollow("Follow log", true , (e) =&gt; {
                    this._toggleFollowLog(e);
                }).done();
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>// ...
this.logControl
                .addToggle("On/off switch", true, (e) =&gt; {
                    this._toggleOnOffClicked(e);
                }).addItem("Log levels", "font-awesome-solid:layer-group", "var(--lumo-tertiary-text-color)", (e) =&gt; {
                    this._logLevels();
                }).addItem("Columns", "font-awesome-solid:table-columns", "var(--lumo-tertiary-text-color)", (e) =&gt; {
                    this._columns();
                }).addItem("Zoom out", "font-awesome-solid:magnifying-glass-minus", "var(--lumo-tertiary-text-color)", (e) =&gt; {
                    this._zoomOut();
                }).addItem("Zoom in", "font-awesome-solid:magnifying-glass-plus", "var(--lumo-tertiary-text-color)", (e) =&gt; {
                    this._zoomIn();
                }).addItem("Clear", "font-awesome-solid:trash-can", "var(--lumo-error-color)", (e) =&gt; {
                    this._clearLog();
                }).addFollow("Follow log", true , (e) =&gt; {
                    this._toggleFollowLog(e);
                }).done();
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/all-builditems</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/all-builditems</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/all-config</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/all-config</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/amazon-lambda</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/amazon-lambda</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/amazon-lambda-http</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/amazon-lambda-http</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/amazon-snapstart</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/amazon-snapstart</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/amqp</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/amqp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/amqp-dev-services</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/amqp-dev-services</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/amqp-reference</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/amqp-reference</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/ansible</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/ansible</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/apicurio-registry-dev-services</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/apicurio-registry-dev-services</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/appcds</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/appcds</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/aws-lambda</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/aws-lambda</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/aws-lambda-http</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/aws-lambda-http</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/aws-lambda-snapstart</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/aws-lambda-snapstart</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/azure-functions</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/azure-functions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/azure-functions-http</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/azure-functions-http</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/blaze-persistence</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/blaze-persistence</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/build-analytics</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/build-analytics</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/building-my-first-extension</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/building-my-first-extension</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/building-native-image</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/building-native-image</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/cache</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/cache</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/cache-redis-reference</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/cache-redis-reference</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/camel</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/camel</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/capabilities</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/capabilities</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/cassandra</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/cassandra</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/cdi</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/cdi</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/cdi-integration</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/cdi-integration</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/cdi-reference</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/cdi-reference</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/centralized-log-management</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/centralized-log-management</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/class-loading-reference</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/class-loading-reference</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/cli-tooling</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/cli-tooling</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/command-mode-reference</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/command-mode-reference</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/conditional-extension-dependencies</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/conditional-extension-dependencies</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/config</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/config</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/config-extending-support</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/config-extending-support</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/config-mappings</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/config-mappings</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/config-reference</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/config-reference</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/config-yaml</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/config-yaml</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/container-image</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/container-image</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/context-propagation</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/context-propagation</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/continuous-testing</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/continuous-testing</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/credentials-provider</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/credentials-provider</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/databases-dev-services</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/databases-dev-services</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/datasource</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/datasource</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/deploying-to-azure-cloud</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/deploying-to-azure-cloud</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/deploying-to-google-cloud</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/deploying-to-google-cloud</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/deploying-to-heroku</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/deploying-to-heroku</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/deploying-to-kubernetes</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/deploying-to-kubernetes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/deploying-to-openshift</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/deploying-to-openshift</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/dev-mode-differences</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/dev-mode-differences</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/dev-services</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/dev-services</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/dev-ui</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/dev-ui</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/dev-ui-v2</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/dev-ui-v2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/doc-concept</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/doc-concept</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/doc-contribute-docs-howto</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/doc-contribute-docs-howto</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/doc-create-tutorial</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/doc-create-tutorial</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/doc-reference</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/doc-reference</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/duplicated-context</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/duplicated-context</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/elasticsearch</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/elasticsearch</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/elasticsearch-dev-services</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/elasticsearch-dev-services</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/extension-codestart</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/extension-codestart</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/extension-metadata</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/extension-metadata</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/extension-registry-user</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/extension-registry-user</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/flyway</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/flyway</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/funqy</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/funqy</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/funqy-amazon-lambda</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/funqy-amazon-lambda</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/funqy-amazon-lambda-http</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/funqy-amazon-lambda-http</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/funqy-aws-lambda</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/funqy-aws-lambda</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/funqy-aws-lambda-http</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/funqy-aws-lambda-http</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/funqy-azure-functions-http</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/funqy-azure-functions-http</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/funqy-gcp-functions</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/funqy-gcp-functions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/funqy-gcp-functions-http</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/funqy-gcp-functions-http</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/funqy-http</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/funqy-http</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/funqy-knative-events</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/funqy-knative-events</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/gcp-functions</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/gcp-functions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/gcp-functions-http</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/gcp-functions-http</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/getting-started</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/getting-started</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/getting-started-dev-services</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/getting-started-dev-services</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/getting-started-reactive</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/getting-started-reactive</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/getting-started-testing</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/getting-started-testing</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/gradle-tooling</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/gradle-tooling</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/grpc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/grpc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/grpc-generation-reference</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/grpc-generation-reference</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/grpc-getting-started</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/grpc-getting-started</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/grpc-kubernetes</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/grpc-kubernetes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/grpc-service-consumption</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/grpc-service-consumption</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/grpc-service-implementation</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/grpc-service-implementation</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/grpc-virtual-threads</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/grpc-virtual-threads</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/grpc-xds</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/grpc-xds</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/hibernate-orm</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/hibernate-orm</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/hibernate-orm-panache</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/hibernate-orm-panache</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/hibernate-orm-panache-kotlin</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/hibernate-orm-panache-kotlin</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/hibernate-reactive</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/hibernate-reactive</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/hibernate-reactive-panache</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/hibernate-reactive-panache</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/hibernate-search-orm-elasticsearch</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/hibernate-search-orm-elasticsearch</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/http-reference</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/http-reference</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/ide-tooling</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/ide-tooling</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/infinispan-client</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/infinispan-client</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/infinispan-client-reference</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/infinispan-client-reference</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/infinispan-dev-services</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/infinispan-dev-services</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/init-tasks</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/init-tasks</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/jms</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/jms</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/jreleaser</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/jreleaser</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/kafka</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/kafka</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/kafka-dev-services</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/kafka-dev-services</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/kafka-dev-ui</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/kafka-dev-ui</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/kafka-reactive-getting-started</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/kafka-reactive-getting-started</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/kafka-schema-registry-avro</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/kafka-schema-registry-avro</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/kafka-schema-registry-json-schema</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/kafka-schema-registry-json-schema</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/kafka-streams</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/kafka-streams</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/kogito</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/kogito</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/kogito-dev-services</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/kogito-dev-services</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/kogito-dmn</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/kogito-dmn</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/kogito-drl</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/kogito-drl</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/kogito-pmml</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/kogito-pmml</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/kotlin</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/kotlin</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/kubernetes-client</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/kubernetes-client</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/kubernetes-config</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/kubernetes-config</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/kubernetes-dev-services</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/kubernetes-dev-services</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/lifecycle</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/lifecycle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/liquibase</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/liquibase</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/liquibase-mongodb</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/liquibase-mongodb</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/logging</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/logging</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/lra</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/lra</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/mailer</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/mailer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/mailer-reference</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/mailer-reference</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/management-interface-reference</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/management-interface-reference</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/maven-tooling</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/maven-tooling</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/messaging-virtual-threads</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/messaging-virtual-threads</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/micrometer</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/micrometer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/mongodb</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/mongodb</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/mongodb-panache</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/mongodb-panache</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/mongodb-panache-kotlin</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/mongodb-panache-kotlin</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/mutiny-primer</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/mutiny-primer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/native-and-ssl</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/native-and-ssl</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/native-reference</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/native-reference</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/openapi-swaggerui</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/openapi-swaggerui</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/opentelemetry</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/opentelemetry</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/opentracing</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/opentracing</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/optaplanner</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/optaplanner</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/performance-measure</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/performance-measure</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/picocli</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/picocli</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/platform</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/platform</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/podman</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/podman</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/pulsar</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/pulsar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/pulsar-dev-services</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/pulsar-dev-services</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/pulsar-getting-started</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/pulsar-getting-started</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/quarkus-maven-plugin</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/quarkus-maven-plugin</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/quarkus-reactive-architecture</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/quarkus-reactive-architecture</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/quarkus-runtime-base-image</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/quarkus-runtime-base-image</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/quartz</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/quartz</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/qute</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/qute</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/qute-reference</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/qute-reference</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/rabbitmq</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/rabbitmq</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/rabbitmq-dev-services</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/rabbitmq-dev-services</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/rabbitmq-reference</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/rabbitmq-reference</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/reactive-event-bus</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/reactive-event-bus</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/reactive-routes</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/reactive-routes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/reactive-sql-clients</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/reactive-sql-clients</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/reaugmentation</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/reaugmentation</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/redis</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/redis</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/redis-dev-services</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/redis-dev-services</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/redis-reference</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/redis-reference</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/rest-client</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/rest-client</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/rest-client-multipart</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/rest-client-multipart</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/rest-client-reactive</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/rest-client-reactive</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/rest-data-panache</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/rest-data-panache</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/rest-json</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/rest-json</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/resteasy</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/resteasy</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/resteasy-client</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/resteasy-client</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/resteasy-client-multipart</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/resteasy-client-multipart</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/resteasy-reactive</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/resteasy-reactive</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/resteasy-reactive-migration</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/resteasy-reactive-migration</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/resteasy-reactive-virtual-threads</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/resteasy-reactive-virtual-threads</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/scheduler</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/scheduler</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/scheduler-reference</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/scheduler-reference</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/scripting</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/scripting</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/security</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/security</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/security-architecture</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/security-architecture</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/security-authentication-mechanisms</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/security-authentication-mechanisms</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/security-authorization</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/security-authorization</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/security-authorize-web-endpoints-reference</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/security-authorize-web-endpoints-reference</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/security-basic-authentication</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/security-basic-authentication</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/security-basic-authentication-concept</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/security-basic-authentication-concept</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/security-basic-authentication-howto</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/security-basic-authentication-howto</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/security-built-in-authentication</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/security-built-in-authentication</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/security-built-in-authentication-support-concept</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/security-built-in-authentication-support-concept</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/security-cors</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/security-cors</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/security-csrf-prevention</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/security-csrf-prevention</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/security-customization</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/security-customization</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/security-getting-started</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/security-getting-started</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/security-getting-started-tutorial</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/security-getting-started-tutorial</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/security-identity-providers</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/security-identity-providers</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/security-jdbc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/security-jdbc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/security-jpa</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/security-jpa</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/security-jwt</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/security-jwt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/security-jwt-build</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/security-jwt-build</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/security-keycloak-admin-client</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/security-keycloak-admin-client</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/security-keycloak-authorization</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/security-keycloak-authorization</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/security-ldap</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/security-ldap</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/security-oauth2</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/security-oauth2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/security-oidc-auth0-tutorial</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/security-oidc-auth0-tutorial</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/security-oidc-bearer-token-authentication</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/security-oidc-bearer-token-authentication</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/security-oidc-bearer-token-authentication-tutorial</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/security-oidc-bearer-token-authentication-tutorial</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/security-oidc-code-flow-authentication</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/security-oidc-code-flow-authentication</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/security-oidc-code-flow-authentication-tutorial</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/security-oidc-code-flow-authentication-tutorial</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/security-oidc-configuration-properties-reference</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/security-oidc-configuration-properties-reference</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/security-openid-connect</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/security-openid-connect</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/security-openid-connect-client</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/security-openid-connect-client</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/security-openid-connect-client-reference</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/security-openid-connect-client-reference</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/security-openid-connect-dev-services</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/security-openid-connect-dev-services</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/security-openid-connect-multitenancy</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/security-openid-connect-multitenancy</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/security-openid-connect-providers</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/security-openid-connect-providers</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/security-openid-connect-web-authentication</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/security-openid-connect-web-authentication</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/security-overview</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/security-overview</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/security-overview-concept</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/security-overview-concept</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/security-proactive-authentication</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/security-proactive-authentication</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/security-properties</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/security-properties</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/security-testing</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/security-testing</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/security-vulnerability-detection</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/security-vulnerability-detection</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/security-webauthn</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/security-webauthn</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/smallrye-fault-tolerance</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/smallrye-fault-tolerance</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/smallrye-graphql</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/smallrye-graphql</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/smallrye-graphql-client</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/smallrye-graphql-client</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/smallrye-health</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/smallrye-health</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/smallrye-metrics</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/smallrye-metrics</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/software-transactional-memory</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/software-transactional-memory</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/spring-boot-properties</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/spring-boot-properties</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/spring-cache</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/spring-cache</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/spring-cloud-config-client</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/spring-cloud-config-client</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/spring-data-jpa</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/spring-data-jpa</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/spring-data-rest</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/spring-data-rest</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/spring-di</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/spring-di</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/spring-scheduled</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/spring-scheduled</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/spring-security</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/spring-security</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/spring-web</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/spring-web</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/stork</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/stork</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/stork-kubernetes</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/stork-kubernetes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/stork-reference</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/stork-reference</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/telemetry-micrometer</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/telemetry-micrometer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/telemetry-micrometer-tutorial</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/telemetry-micrometer-tutorial</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/telemetry-opentracing-to-otel-tutorial</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/telemetry-opentracing-to-otel-tutorial</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/tests-with-coverage</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/tests-with-coverage</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/tooling</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/tooling</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/transaction</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/transaction</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/update-quarkus</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/update-quarkus</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/upx</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/upx</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/validation</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/validation</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/vertx</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/vertx</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/vertx-reference</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/vertx-reference</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/virtual-threads</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/virtual-threads</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/websockets</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/websockets</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/writing-extensions</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/writing-extensions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/guides/writing-native-applications-tips</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/guides/writing-native-applications-tips</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>/newsletter/</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>/newsletter/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>2021 Stevie Award</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Prêmio Stevie 2021</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>404 - Not Found</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>404 - Não Encontrado</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a @click=${() =&gt; this._info()}&gt;Info&lt;/a&gt;;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a @click=${() =&gt; this._info()}&gt;Info&lt;/a&gt;;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a class="anchor" href="#being-reactive"&gt;&lt;/a&gt;Being reactive</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a class="anchor" href="#being-reactive"&gt;&lt;/a&gt;Sendo reativo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a class="anchor" href="#event-driven-architectures"&gt;&lt;/a&gt;Event-driven Architectures</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a class="anchor" href="#event-driven-architectures"&gt;&lt;/a&gt;Arquiteturas orientadas a eventos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a class="anchor" href="#http-microservices"&gt;&lt;/a&gt;HTTP microservices</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a class="anchor" href="#http-microservices"&gt;&lt;/a&gt;Microsserviços HTTP</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="/container-first"&gt;Container First&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="/container-first"&gt;Contêiner em primeiro lugar&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="/container-first"&gt;Learn more&lt;/a&gt;&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="/container-first"&gt;Saiba mais&lt;/a&gt;&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="/continuum"&gt;Learn more&lt;/a&gt;&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="/continuum"&gt;Saiba mais&lt;/a&gt;&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="/continuum"&gt;Unifies imperative and reactive&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="/continuum"&gt;Unifica imperativo e reativo&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="/continuum/"&gt;Learn more about Reactive&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="/continuum/"&gt;Saiba mais sobre Reactive&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="/developer-joy"&gt;Developer Joy&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="/developer-joy"&gt;Alegria do desenvolvedor&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="/developer-joy"&gt;Learn more&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="/developer-joy"&gt;Saiba Mais&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="/developer-joy"&gt;Learn more&lt;/a&gt;&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="/developer-joy"&gt;Saiba mais&lt;/a&gt;&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="/developer-joy/"&gt;Learn more about Developer Joy&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="/developer-joy/"&gt;Saiba mais sobre o prazer em desenvolver&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="/kubernetes-native"&gt;Kube-Native&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="/kubernetes-native"&gt;Kube-Nativo&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="/kubernetes-native/"&gt;Learn more about Kubernetes-native&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="/kubernetes-native/"&gt;Saiba mais sobre o Kubernetes-native&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="/standards"&gt;Community and Standards&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="/standards"&gt;Comunidade e Padrões&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="/standards"&gt;Learn more&lt;/a&gt;&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="/standards"&gt;Saiba mais&lt;/a&gt;&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="/standards/"&gt;Learn more about Standards&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="/standards/"&gt;Saiba mais sobre Padrões&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="https://code.quarkus.io" class="button-cta secondary white"&gt;START CODING&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="https://code.quarkus.io" class="button-cta secondary white"&gt;COMECE A CODIFICAR&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="https://github.com/orgs/quarkusio/projects/13/views/1" class="{% if page.url contains '/roadmap/' %}active{% endif %}"&gt;ROADMAP&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="https://github.com/orgs/quarkusio/projects/13/views/1" class="{% if page.url contains '/roadmap/' %}active{% endif %}"&gt;ROADMAP&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="https://github.com/quarkusio/quarkus/discussions"&gt;Go to the Quarkus GitHub Discussions&lt;i class="fas fa-external-link-alt"&gt;&lt;/i&gt;&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="https://github.com/quarkusio/quarkus/discussions"&gt;Vá para o Quarkus GitHub Discussions&lt;i class="fas fa-external-link-alt"&gt;&lt;/i&gt;&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="https://hub.quarkiverse.io" class="{% if page.url contains 'hub.quarkiverse.io' %}active{% endif %}"&gt;SHARE EXTENSIONS&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="https://hub.quarkiverse.io" class="{% if page.url contains 'hub.quarkiverse.io' %}active{% endif %}"&gt;COMPARTILHE EXTENSÕES&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="https://quarkus.io/extensions/" class="{% if page.url contains '/extensions/' %}active{% endif %}"&gt;BROWSE EXTENSIONS&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="https://quarkus.io/extensions/" class="{% if page.url contains '/extensions/' %}active{% endif %}"&gt;PROCURAR EXTENSÕES&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="https://www.redhat.com/en/topics/cloud-native-apps/why-choose-red-hat-quarkus" class="button-cta btn-sm"&gt;Red Hat Support&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="https://www.redhat.com/en/topics/cloud-native-apps/why-choose-red-hat-quarkus" class="button-cta btn-sm"&gt;Suporte Red Hat&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{ site.data.versions.quarkus.announce }}"&gt;More Information&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="{{ site.data.versions.quarkus.announce }}"&gt;Mais informações&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{ site.data.versions.quarkus.announce }}"&gt;Read the release notes&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="{{ site.data.versions.quarkus.announce }}"&gt;Leia as notas de versão&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/about" class="{% if page.url contains '/about/' %}active{% endif %}"&gt;WHAT IS QUARKUS?&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="{{site.baseurl}}/about" class="{% if page.url contains '/about/' %}active{% endif %}"&gt;O QUE É QUARKUS?&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/blog" class="{% if page.url contains '/blog/' %}active{% endif %}"&gt;BLOG&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="{{site.baseurl}}/blog" class="{% if page.url contains '/blog/' %}active{% endif %}"&gt;BLOG&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/books" class="{% if page.url contains '/books/' %}active{% endif %}"&gt;BOOKS&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="{{site.baseurl}}/books" class="{% if page.url contains '/books/' %}active{% endif %}"&gt;LIVROS&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/container-first" class="{% if page.url contains '/container-first/' %}active{% endif %}"&gt;CONTAINER FIRST&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="{{site.baseurl}}/container-first" class="{% if page.url contains '/container-first/' %}active{% endif %}"&gt;CONTAINER PRIMEIRO&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/continuum" class="{% if page.url contains '/continuum/' %}active{% endif %}"&gt;REACTIVE&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="{{site.baseurl}}/continuum" class="{% if page.url contains '/continuum/' %}active{% endif %}"&gt;REATIVO&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/developer-joy" class="{% if page.url contains '/developer-joy/' %}active{% endif %}"&gt;DEVELOPER JOY&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="{{site.baseurl}}/developer-joy" class="{% if page.url contains '/developer-joy/' %}active{% endif %}"&gt;ALEGRIA DO DESENVOLVEDOR&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/discussion" class="{% if page.url contains '/discussion/' %}active{% endif %}"&gt;DISCUSSION&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="{{site.baseurl}}/discussion" class="{% if page.url contains '/discussion/' %}active{% endif %}"&gt;DISCUSSÃO&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/events" class="{% if page.url contains '/events/' %}active{% endif %}"&gt;EVENTS&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="{{site.baseurl}}/events" class="{% if page.url contains '/events/' %}active{% endif %}"&gt;EVENTOS&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/faq/#what-is-a-quarkus-extension" class="{% if page.url contains 'what-is-a-quarkus-extension' %}active{% endif %}"&gt;USE EXTENSIONS&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="{{site.baseurl}}/faq/#what-is-a-quarkus-extension" class="{% if page.url contains 'what-is-a-quarkus-extension' %}active{% endif %}"&gt;USAR EXTENSÕES&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/get-started" class="{% if page.url contains '/get-started/' %}active{% endif %}"&gt;GET STARTED&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="{{site.baseurl}}/get-started" class="{% if page.url contains '/get-started/' %}active{% endif %}"&gt;COMEÇAR&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/get-started/" class="button-cta"&gt;Get Started with Quarkus&lt;/a&gt; &lt;a href="{{site.baseurl}}/guides/" class="button-cta"&gt;Read the Guides&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="{{site.baseurl}}/get-started/" class="button-cta"&gt;Introdução ao Quarkus&lt;/a&gt; &lt;a href="{{site.baseurl}}/guides/" class="button-cta"&gt;Leia os guias&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/guides" class="{% if page.url contains '/guides/' %}active{% endif %}"&gt;DOCUMENTATION&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="{{site.baseurl}}/guides" class="{% if page.url contains '/guides/' %}active{% endif %}"&gt;DOCUMENTAÇÃO&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/guides/cli-tooling"&gt;Read the CLI Tooling guide&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="{{site.baseurl}}/guides/cli-tooling"&gt;Leia o guia de ferramentas da CLI&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/guides/continuous-testing"&gt;Read the Continuous Testing guide&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="{{site.baseurl}}/guides/continuous-testing"&gt;Leia o guia de Testes Contínuos&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/guides/dev-services"&gt;Read the Dev Services guide&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="{{site.baseurl}}/guides/dev-services"&gt;Leia o guia de Serviços de Desenvolvimento&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/guides/dev-ui"&gt;Read the Dev UI guide&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="{{site.baseurl}}/guides/dev-ui"&gt;Leia o guia da interface do usuário do desenvolvedor&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/guides/maven-tooling#dev-mode/"&gt;Read the Dev Mode guide&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="{{site.baseurl}}/guides/maven-tooling#dev-mode/"&gt;Leia o guia do Modo de Desenvolvimento&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/guides/maven-tooling#remote-development-mode"&gt;Read the Remote Development Mode guide&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="{{site.baseurl}}/guides/maven-tooling#remote-development-mode"&gt;Leia o guia do Modo de Desenvolvimento Remoto&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/guides/writing-extensions" class="{% if page.url contains '/guides/writing-extensions' %}active{% endif %}"&gt;CREATE EXTENSIONS&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="{{site.baseurl}}/guides/writing-extensions" class="{% if page.url contains '/guides/writing-extensions' %}active{% endif %}"&gt;CRIAR EXTENSÕES&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/insights" class="{% if page.url contains '/insights/' %}active{% endif %}"&gt;PODCAST&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="{{site.baseurl}}/insights" class="{% if page.url contains '/insights/' %}active{% endif %}"&gt;PODCAST&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/kubernetes-native" class="{% if page.url contains '/kubernetes-native/' %}active{% endif %}"&gt;KUBERNETES NATIVE&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="{{site.baseurl}}/kubernetes-native" class="{% if page.url contains '/kubernetes-native/' %}active{% endif %}"&gt;KUBERNETES NATIVO&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/newsletter" class="{% if page.url contains '/newsletter/' %}active{% endif %}"&gt;NEWSLETTER&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="{{site.baseurl}}/newsletter" class="{% if page.url contains '/newsletter/' %}active{% endif %}"&gt;BOLETIM INFORMATIVO&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/qtips" class="{% if page.url contains '/qtips/' %}active{% endif %}"&gt;"Q" TIP VIDEOS&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="{{site.baseurl}}/qtips" class="{% if page.url contains '/qtips/' %}active{% endif %}"&gt;VÍDEOS "Q" TIP&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/standards" class="{% if page.url contains '/standards/' %}active{% endif %}"&gt;STANDARDS&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="{{site.baseurl}}/standards" class="{% if page.url contains '/standards/' %}active{% endif %}"&gt;PADRÕES&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/support/" class="{% if page.url contains '/support/' %}active{% endif %}"&gt;SUPPORT&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="{{site.baseurl}}/support/" class="{% if page.url contains '/support/' %}active{% endif %}"&gt;SUPORTE&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;a href="{{site.baseurl}}/worldtour/"&gt;Learn more about the Quarkus World Tour&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;a href="{{site.baseurl}}/worldtour/"&gt;Saiba mais sobre o Quarkus World Tour&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;code class="bash"&gt;$ mvn package -Pnative

  # Or

$ gradle build -Dquarkus.package.type=native&lt;/code&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;code class="bash"&gt;$ mvn package -Pnative

  # Ou

$ gradle build -Dquarkus.package.type=native&lt;/code&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;dependency&gt;
    &lt;groupId&gt;io.quarkus&lt;/groupId&gt;
    &lt;artifactId&gt;quarkus-security-jpa-reactive&lt;/artifactId&gt;
&lt;/dependency&gt;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;dependency&gt;
    &lt;groupId&gt;io.quarkus&lt;/groupId&gt;
    &lt;artifactId&gt;quarkus-security-jpa-reactive&lt;/artifactId&gt;
&lt;/dependency&gt;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;dependency&gt;
    &lt;groupId&gt;io.quarkus&lt;/groupId&gt;
    &lt;artifactId&gt;quarkus-security-jpa&lt;/artifactId&gt;
&lt;/dependency&gt;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;dependency&gt;
    &lt;groupId&gt;io.quarkus&lt;/groupId&gt;
    &lt;artifactId&gt;quarkus-security-jpa&lt;/artifactId&gt;
&lt;/dependency&gt;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;dependency&gt;
    &lt;groupId&gt;io.quarkus&lt;/groupId&gt;
    &lt;artifactId&gt;quarkus-vertx-http-dev-ui-tests&lt;/artifactId&gt;
    &lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;dependency&gt;
    &lt;groupId&gt;io.quarkus&lt;/groupId&gt;
    &lt;artifactId&gt;quarkus-vertx-http-dev-ui-tests&lt;/artifactId&gt;
    &lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;dependency&gt;
    &lt;groupId&gt;org.optaplanner&lt;/groupId&gt;
    &lt;artifactId&gt;optaplanner-test&lt;/artifactId&gt;
    &lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;dependency&gt;
    &lt;groupId&gt;org.optaplanner&lt;/groupId&gt;
    &lt;artifactId&gt;optaplanner-test&lt;/artifactId&gt;
    &lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;{quarkus-platform-groupid}&lt;/groupId&gt;
            &lt;artifactId&gt;quarkus-bom&lt;/artifactId&gt;
            &lt;version&gt;{quarkus-version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;{quarkus-platform-groupid}&lt;/groupId&gt;
            &lt;artifactId&gt;quarkus-optaplanner-bom&lt;/artifactId&gt;
            &lt;version&gt;{quarkus-version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;io.quarkus&lt;/groupId&gt;
        &lt;artifactId&gt;quarkus-resteasy-reactive&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;io.quarkus&lt;/groupId&gt;
        &lt;artifactId&gt;quarkus-resteasy-reactive-jackson&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.optaplanner&lt;/groupId&gt;
        &lt;artifactId&gt;optaplanner-quarkus&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.optaplanner&lt;/groupId&gt;
        &lt;artifactId&gt;optaplanner-quarkus-jackson&lt;/artifactId&gt;
    &lt;/dependency&gt;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;{quarkus-platform-groupid}&lt;/groupId&gt;
            &lt;artifactId&gt;quarkus-bom&lt;/artifactId&gt;
            &lt;version&gt;{quarkus-version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;{quarkus-platform-groupid}&lt;/groupId&gt;
            &lt;artifactId&gt;quarkus-optaplanner-bom&lt;/artifactId&gt;
            &lt;version&gt;{quarkus-version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;io.quarkus&lt;/groupId&gt;
        &lt;artifactId&gt;quarkus-resteasy-reactive&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;io.quarkus&lt;/groupId&gt;
        &lt;artifactId&gt;quarkus-resteasy-reactive-jackson&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.optaplanner&lt;/groupId&gt;
        &lt;artifactId&gt;optaplanner-quarkus&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.optaplanner&lt;/groupId&gt;
        &lt;artifactId&gt;optaplanner-quarkus-jackson&lt;/artifactId&gt;
    &lt;/dependency&gt;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;div class="badges"&gt;
    &lt;h3&gt;Badges&lt;/h3&gt;
    &lt;p&gt;Badges wrap the Vaadin theme in a component.
        See &lt;a href="https://vaadin.com/docs/latest/components/badge"&gt;https://vaadin.com/docs/latest/components/badge&lt;/a&gt; for more info.
    &lt;/p&gt;
    &lt;div class="cards"&gt;
        &lt;qui-card title="Small"&gt;
            &lt;div slot="content"&gt;
                &lt;div class="cardcontents"&gt;
                    &lt;qui-badge small&gt;&lt;span&gt;Default&lt;/span&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge level="success" small&gt;&lt;span&gt;Success&lt;/span&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge level="warning" small&gt;&lt;span&gt;Warning&lt;/span&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge level="error" small&gt;&lt;span&gt;Error&lt;/span&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge level="contrast" small&gt;&lt;span&gt;Contrast&lt;/span&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge background="pink" color="purple" small&gt;&lt;span&gt;Custom colours&lt;/span&gt;&lt;/qui-badge&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/qui-card&gt; 
        &lt;qui-card title="Primary"&gt;
            &lt;div slot="content"&gt;
                &lt;div class="cardcontents"&gt;
                    &lt;qui-badge primary&gt;&lt;span&gt;Default primary&lt;/span&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge level="success" primary&gt;&lt;span&gt;Success primary&lt;/span&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge level="warning" primary&gt;&lt;span&gt;Warning primary&lt;/span&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge level="error" primary&gt;&lt;span&gt;Error primary&lt;/span&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge level="contrast" primary&gt;&lt;span&gt;Contrast primary&lt;/span&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge background="pink" color="purple" primary&gt;&lt;span&gt;Custom colours&lt;/span&gt;&lt;/qui-badge&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/qui-card&gt;
        &lt;qui-card title="Pill"&gt;
            &lt;div slot="content"&gt;
                &lt;div class="cardcontents"&gt;
                    &lt;qui-badge pill&gt;&lt;span&gt;Default pill&lt;/span&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge level="success" pill&gt;&lt;span&gt;Success pill&lt;/span&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge level="warning" pill&gt;&lt;span&gt;Warning pill&lt;/span&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge level="error" pill&gt;&lt;span&gt;Error pill&lt;/span&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge level="contrast" pill&gt;&lt;span&gt;Contrast pill&lt;/span&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge background="pink" color="purple" pill&gt;&lt;span&gt;Custom colours&lt;/span&gt;&lt;/qui-badge&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/qui-card&gt;
        &lt;qui-card title="With icon"&gt;
            &lt;div slot="content"&gt;            
                &lt;div class="cardcontents"&gt;
                    &lt;qui-badge text="Default" icon="font-awesome-solid:circle-info"&gt;
                        &lt;span&gt;Default icon&lt;/span&gt;
                    &lt;/qui-badge&gt;
                    &lt;qui-badge text="Success" level="success" icon="font-awesome-solid:check"&gt;
                        &lt;span&gt;Success icon&lt;/span&gt;
                    &lt;/qui-badge&gt;
                    &lt;qui-badge text="Warning" level="warning" icon="font-awesome-solid:triangle-exclamation"&gt;
                        &lt;span&gt;Warning icon&lt;/span&gt;
                    &lt;/qui-badge&gt;
                    &lt;qui-badge text="Error" level="error" icon="font-awesome-solid:circle-exclamation"&gt;
                        &lt;span&gt;Error icon&lt;/span&gt;
                    &lt;/qui-badge&gt;
                    &lt;qui-badge text="Contrast" level="contrast" icon="font-awesome-solid:hand"&gt;
                        &lt;span&gt;Contrast icon&lt;/span&gt;
                    &lt;/qui-badge&gt;
                    &lt;qui-badge text="Custom" background="pink" color="purple" icon="font-awesome-brands:redhat"&gt;
                        &lt;span&gt;Custom colours&lt;/span&gt;
                    &lt;/qui-badge&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/qui-card&gt;
        &lt;qui-card title="Icon only"&gt;
            &lt;div slot="content"&gt;
                &lt;div class="cardcontents"&gt;
                    &lt;qui-badge icon="font-awesome-solid:clock"&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge level="success" icon="font-awesome-solid:check"&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge level="warning" icon="font-awesome-solid:triangle-exclamation"&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge level="error" icon="font-awesome-solid:circle-exclamation"&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge level="contrast" icon="font-awesome-solid:hand"&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge level="contrast" background="pink" color="purple" icon="font-awesome-brands:redhat"&gt;&lt;/qui-badge&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/qui-card&gt;
        &lt;qui-card title="Clickable"&gt;
            &lt;div slot="content"&gt;
                &lt;div class="cardcontents"&gt;
                    &lt;qui-badge clickable @click=${() =&gt; this._info()}&gt;&lt;span&gt;Default&lt;/span&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge clickable level="success" @click=${() =&gt; this._success()}&gt;&lt;span&gt;Success&lt;/span&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge clickable level="warning" @click=${() =&gt; this._warning()}&gt;&lt;span&gt;Warning&lt;/span&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge clickable level="error" @click=${() =&gt; this._error()}&gt;&lt;span&gt;Error&lt;/span&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge clickable level="contrast" @click=${() =&gt; this._contrast()}&gt;&lt;span&gt;Contrast&lt;/span&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge clickable background="pink" color="purple" @click=${() =&gt; this._info()}&gt;&lt;span&gt;Custom colours&lt;/span&gt;&lt;/qui-badge&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/qui-card&gt;
    &lt;/div&gt;
&lt;/div&gt;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;div class="badges"&gt;
    &lt;h3&gt;Badges&lt;/h3&gt;
    &lt;p&gt;Badges wrap the Vaadin theme in a component.
        See &lt;a href="https://vaadin.com/docs/latest/components/badge"&gt;https://vaadin.com/docs/latest/components/badge&lt;/a&gt; for more info.
    &lt;/p&gt;
    &lt;div class="cards"&gt;
        &lt;qui-card title="Small"&gt;
            &lt;div slot="content"&gt;
                &lt;div class="cardcontents"&gt;
                    &lt;qui-badge small&gt;&lt;span&gt;Default&lt;/span&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge level="success" small&gt;&lt;span&gt;Success&lt;/span&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge level="warning" small&gt;&lt;span&gt;Warning&lt;/span&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge level="error" small&gt;&lt;span&gt;Error&lt;/span&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge level="contrast" small&gt;&lt;span&gt;Contrast&lt;/span&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge background="pink" color="purple" small&gt;&lt;span&gt;Custom colours&lt;/span&gt;&lt;/qui-badge&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/qui-card&gt; 
        &lt;qui-card title="Primary"&gt;
            &lt;div slot="content"&gt;
                &lt;div class="cardcontents"&gt;
                    &lt;qui-badge primary&gt;&lt;span&gt;Default primary&lt;/span&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge level="success" primary&gt;&lt;span&gt;Success primary&lt;/span&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge level="warning" primary&gt;&lt;span&gt;Warning primary&lt;/span&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge level="error" primary&gt;&lt;span&gt;Error primary&lt;/span&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge level="contrast" primary&gt;&lt;span&gt;Contrast primary&lt;/span&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge background="pink" color="purple" primary&gt;&lt;span&gt;Custom colours&lt;/span&gt;&lt;/qui-badge&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/qui-card&gt;
        &lt;qui-card title="Pill"&gt;
            &lt;div slot="content"&gt;
                &lt;div class="cardcontents"&gt;
                    &lt;qui-badge pill&gt;&lt;span&gt;Default pill&lt;/span&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge level="success" pill&gt;&lt;span&gt;Success pill&lt;/span&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge level="warning" pill&gt;&lt;span&gt;Warning pill&lt;/span&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge level="error" pill&gt;&lt;span&gt;Error pill&lt;/span&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge level="contrast" pill&gt;&lt;span&gt;Contrast pill&lt;/span&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge background="pink" color="purple" pill&gt;&lt;span&gt;Custom colours&lt;/span&gt;&lt;/qui-badge&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/qui-card&gt;
        &lt;qui-card title="With icon"&gt;
            &lt;div slot="content"&gt;            
                &lt;div class="cardcontents"&gt;
                    &lt;qui-badge text="Default" icon="font-awesome-solid:circle-info"&gt;
                        &lt;span&gt;Default icon&lt;/span&gt;
                    &lt;/qui-badge&gt;
                    &lt;qui-badge text="Success" level="success" icon="font-awesome-solid:check"&gt;
                        &lt;span&gt;Success icon&lt;/span&gt;
                    &lt;/qui-badge&gt;
                    &lt;qui-badge text="Warning" level="warning" icon="font-awesome-solid:triangle-exclamation"&gt;
                        &lt;span&gt;Warning icon&lt;/span&gt;
                    &lt;/qui-badge&gt;
                    &lt;qui-badge text="Error" level="error" icon="font-awesome-solid:circle-exclamation"&gt;
                        &lt;span&gt;Error icon&lt;/span&gt;
                    &lt;/qui-badge&gt;
                    &lt;qui-badge text="Contrast" level="contrast" icon="font-awesome-solid:hand"&gt;
                        &lt;span&gt;Contrast icon&lt;/span&gt;
                    &lt;/qui-badge&gt;
                    &lt;qui-badge text="Custom" background="pink" color="purple" icon="font-awesome-brands:redhat"&gt;
                        &lt;span&gt;Custom colours&lt;/span&gt;
                    &lt;/qui-badge&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/qui-card&gt;
        &lt;qui-card title="Icon only"&gt;
            &lt;div slot="content"&gt;
                &lt;div class="cardcontents"&gt;
                    &lt;qui-badge icon="font-awesome-solid:clock"&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge level="success" icon="font-awesome-solid:check"&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge level="warning" icon="font-awesome-solid:triangle-exclamation"&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge level="error" icon="font-awesome-solid:circle-exclamation"&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge level="contrast" icon="font-awesome-solid:hand"&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge level="contrast" background="pink" color="purple" icon="font-awesome-brands:redhat"&gt;&lt;/qui-badge&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/qui-card&gt;
        &lt;qui-card title="Clickable"&gt;
            &lt;div slot="content"&gt;
                &lt;div class="cardcontents"&gt;
                    &lt;qui-badge clickable @click=${() =&gt; this._info()}&gt;&lt;span&gt;Default&lt;/span&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge clickable level="success" @click=${() =&gt; this._success()}&gt;&lt;span&gt;Success&lt;/span&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge clickable level="warning" @click=${() =&gt; this._warning()}&gt;&lt;span&gt;Warning&lt;/span&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge clickable level="error" @click=${() =&gt; this._error()}&gt;&lt;span&gt;Error&lt;/span&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge clickable level="contrast" @click=${() =&gt; this._contrast()}&gt;&lt;span&gt;Contrast&lt;/span&gt;&lt;/qui-badge&gt;
                    &lt;qui-badge clickable background="pink" color="purple" @click=${() =&gt; this._info()}&gt;&lt;span&gt;Custom colours&lt;/span&gt;&lt;/qui-badge&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/qui-card&gt;
    &lt;/div&gt;
&lt;/div&gt;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;div class="cards"&gt;
    &lt;div class="cardcontents"&gt;
        &lt;qui-alert&gt;&lt;span&gt;Info alert&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="success"&gt;&lt;span&gt;Success alert&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="warning"&gt;&lt;span&gt;Warning alert&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="error"&gt;&lt;span&gt;Error alert&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;hr class="line"&gt;
        &lt;qui-alert permanent&gt;&lt;span&gt;Permanent Info alert&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="success" permanent&gt;&lt;span&gt;Permanent Success alert&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="warning" permanent&gt;&lt;span&gt;Permanent Warning alert&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="error" permanent&gt;&lt;span&gt;Permanent Error alert&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;hr class="line"&gt;
        &lt;qui-alert center&gt;&lt;span&gt;Center Info alert&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="success" center&gt;&lt;span&gt;Center Success alert&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="warning" center&gt;&lt;span&gt;Center Warning alert&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="error" center&gt;&lt;span&gt;Center Error alert&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;hr class="line"&gt;
        &lt;qui-alert showIcon&gt;&lt;span&gt;Info alert with icon&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="success" showIcon&gt;&lt;span&gt;Success alert with icon&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="warning" showIcon&gt;&lt;span&gt;Warning alert with icon&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="error" showIcon&gt;&lt;span&gt;Error alert with icon&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;hr class="line"&gt;
        &lt;qui-alert icon="font-awesome-brands:redhat"&gt;&lt;span&gt;Info alert with custom icon&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="success" icon="font-awesome-brands:redhat"&gt;&lt;span&gt;Success alert with custom icon&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="warning" icon="font-awesome-brands:redhat"&gt;&lt;span&gt;Warning alert with custom icon&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="error" icon="font-awesome-brands:redhat"&gt;&lt;span&gt;Error alert with custom icon&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;hr class="line"&gt;
        &lt;qui-alert size="small" showIcon&gt;&lt;span&gt;Small Info alert with icon&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="success" size="small" showIcon&gt;&lt;span&gt;Small Success alert with icon&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="warning" size="small" showIcon&gt;&lt;span&gt;Small Warning alert with icon&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="error" size="small" showIcon&gt;&lt;span&gt;Small Error alert with icon&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;hr class="line"&gt;
        &lt;qui-alert showIcon&gt;&lt;span&gt;Info &lt;code&gt;alert&lt;/code&gt; with markup &lt;br&gt;&lt;a href="https://quarkus.io/" target="_blank"&gt;quarkus.io&lt;/a&gt;&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="success" showIcon&gt;&lt;span&gt;Success &lt;code&gt;alert&lt;/code&gt; with markup &lt;br&gt;&lt;a href="https://quarkus.io/" target="_blank"&gt;quarkus.io&lt;/a&gt;&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="warning" showIcon&gt;&lt;span&gt;Warning &lt;code&gt;alert&lt;/code&gt; with markup &lt;br&gt;&lt;a href="https://quarkus.io/" target="_blank"&gt;quarkus.io&lt;/a&gt;&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="error" showIcon&gt;&lt;span&gt;Error &lt;code&gt;alert&lt;/code&gt; with markup &lt;br&gt;&lt;a href="https://quarkus.io/" target="_blank"&gt;quarkus.io&lt;/a&gt;&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;hr class="line"&gt;
        &lt;qui-alert showIcon primary&gt;&lt;span&gt;Primary Info alert with icon&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="success" showIcon primary&gt;&lt;span&gt;Primary Success alert with icon&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="warning" showIcon primary&gt;&lt;span&gt;Primary Warning alert with icon&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="error" showIcon primary&gt;&lt;span&gt;Primary Error alert with icon&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;hr class="line"&gt;
        &lt;qui-alert title="Information"&gt;&lt;span&gt;Info alert with title&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert title="Well done" level="success"&gt;&lt;span&gt;Success alert with title&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert title="Beware" level="warning"&gt;&lt;span&gt;Warning alert with title&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert title="Ka-boom" level="error"&gt;&lt;span&gt;Error alert with title&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;hr class="line"&gt;
        &lt;qui-alert title="Information" showIcon&gt;&lt;span&gt;Info alert with title and icon&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert title="Well done" level="success" showIcon&gt;&lt;span&gt;Success alert with title and icon&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert title="Beware" level="warning" showIcon&gt;&lt;span&gt;Warning alert with title and icon&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert title="Ka-boom" level="error" showIcon&gt;&lt;span&gt;Error alert with title and icon&lt;/span&gt;&lt;/qui-alert&gt;
    &lt;/div&gt;
&lt;/div&gt;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;div class="cards"&gt;
    &lt;div class="cardcontents"&gt;
        &lt;qui-alert&gt;&lt;span&gt;Info alert&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="success"&gt;&lt;span&gt;Success alert&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="warning"&gt;&lt;span&gt;Warning alert&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="error"&gt;&lt;span&gt;Error alert&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;hr class="line"&gt;
        &lt;qui-alert permanent&gt;&lt;span&gt;Permanent Info alert&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="success" permanent&gt;&lt;span&gt;Permanent Success alert&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="warning" permanent&gt;&lt;span&gt;Permanent Warning alert&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="error" permanent&gt;&lt;span&gt;Permanent Error alert&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;hr class="line"&gt;
        &lt;qui-alert center&gt;&lt;span&gt;Center Info alert&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="success" center&gt;&lt;span&gt;Center Success alert&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="warning" center&gt;&lt;span&gt;Center Warning alert&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="error" center&gt;&lt;span&gt;Center Error alert&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;hr class="line"&gt;
        &lt;qui-alert showIcon&gt;&lt;span&gt;Info alert with icon&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="success" showIcon&gt;&lt;span&gt;Success alert with icon&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="warning" showIcon&gt;&lt;span&gt;Warning alert with icon&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="error" showIcon&gt;&lt;span&gt;Error alert with icon&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;hr class="line"&gt;
        &lt;qui-alert icon="font-awesome-brands:redhat"&gt;&lt;span&gt;Info alert with custom icon&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="success" icon="font-awesome-brands:redhat"&gt;&lt;span&gt;Success alert with custom icon&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="warning" icon="font-awesome-brands:redhat"&gt;&lt;span&gt;Warning alert with custom icon&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="error" icon="font-awesome-brands:redhat"&gt;&lt;span&gt;Error alert with custom icon&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;hr class="line"&gt;
        &lt;qui-alert size="small" showIcon&gt;&lt;span&gt;Small Info alert with icon&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="success" size="small" showIcon&gt;&lt;span&gt;Small Success alert with icon&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="warning" size="small" showIcon&gt;&lt;span&gt;Small Warning alert with icon&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="error" size="small" showIcon&gt;&lt;span&gt;Small Error alert with icon&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;hr class="line"&gt;
        &lt;qui-alert showIcon&gt;&lt;span&gt;Info &lt;code&gt;alert&lt;/code&gt; with markup &lt;br&gt;&lt;a href="https://quarkus.io/" target="_blank"&gt;quarkus.io&lt;/a&gt;&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="success" showIcon&gt;&lt;span&gt;Success &lt;code&gt;alert&lt;/code&gt; with markup &lt;br&gt;&lt;a href="https://quarkus.io/" target="_blank"&gt;quarkus.io&lt;/a&gt;&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="warning" showIcon&gt;&lt;span&gt;Warning &lt;code&gt;alert&lt;/code&gt; with markup &lt;br&gt;&lt;a href="https://quarkus.io/" target="_blank"&gt;quarkus.io&lt;/a&gt;&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="error" showIcon&gt;&lt;span&gt;Error &lt;code&gt;alert&lt;/code&gt; with markup &lt;br&gt;&lt;a href="https://quarkus.io/" target="_blank"&gt;quarkus.io&lt;/a&gt;&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;hr class="line"&gt;
        &lt;qui-alert showIcon primary&gt;&lt;span&gt;Primary Info alert with icon&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="success" showIcon primary&gt;&lt;span&gt;Primary Success alert with icon&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="warning" showIcon primary&gt;&lt;span&gt;Primary Warning alert with icon&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert level="error" showIcon primary&gt;&lt;span&gt;Primary Error alert with icon&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;hr class="line"&gt;
        &lt;qui-alert title="Information"&gt;&lt;span&gt;Info alert with title&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert title="Well done" level="success"&gt;&lt;span&gt;Success alert with title&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert title="Beware" level="warning"&gt;&lt;span&gt;Warning alert with title&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert title="Ka-boom" level="error"&gt;&lt;span&gt;Error alert with title&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;hr class="line"&gt;
        &lt;qui-alert title="Information" showIcon&gt;&lt;span&gt;Info alert with title and icon&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert title="Well done" level="success" showIcon&gt;&lt;span&gt;Success alert with title and icon&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert title="Beware" level="warning" showIcon&gt;&lt;span&gt;Warning alert with title and icon&lt;/span&gt;&lt;/qui-alert&gt;
        &lt;qui-alert title="Ka-boom" level="error" showIcon&gt;&lt;span&gt;Error alert with title and icon&lt;/span&gt;&lt;/qui-alert&gt;
    &lt;/div&gt;
&lt;/div&gt;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;div class="codeBlock"&gt;
    &lt;qui-code-block 
        mode='${this._mode}'
        src='${this._externalUrl}'&gt;
    &lt;/qui-code-block&gt;
&lt;/div&gt;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;div class="codeBlock"&gt;
    &lt;qui-code-block 
        mode='${this._mode}'
        src='${this._externalUrl}'&gt;
    &lt;/qui-code-block&gt;
&lt;/div&gt;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;div class="codeBlock"&gt;
    &lt;qui-code-block 
        mode='yaml'
        content='${yaml}'&gt;
    &lt;/qui-code-block&gt;
&lt;/div&gt;;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;div class="codeBlock"&gt;
    &lt;qui-code-block 
        mode='yaml'
        content='${yaml}'&gt;
    &lt;/qui-code-block&gt;
&lt;/div&gt;;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;qui-card title="My title"&gt;
    &lt;div slot="content"&gt;
        My contents
    &lt;/div&gt;
&lt;/qui-card&gt;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;qui-card title="My title"&gt;
    &lt;div slot="content"&gt;
        My contents
    &lt;/div&gt;
&lt;/qui-card&gt;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;qui-ide-link title='Source full class name' 
                        class='text-source'
                        fileName='${sourceClassNameFull}'
                        lineNumber=${sourceLineNumber}&gt;[${sourceClassNameFull}]&lt;/qui-ide-link&gt;;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;qui-ide-link title='Source full class name' 
                        class='text-source'
                        fileName='${sourceClassNameFull}'
                        lineNumber=${sourceLineNumber}&gt;[${sourceClassNameFull}]&lt;/qui-ide-link&gt;;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;span class="icon"&gt;&lt;i class="fa fa-lock" title="Fixed at build time"&gt;&lt;/i&gt;&lt;/span&gt; Configuration property fixed at build time - All other configuration properties are overridable at runtime &lt;input type="search" id="config-search-0" placeholder="FILTER CONFIGURATION" disabled&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;span class="icon"&gt;&lt;i class="fa fa-lock" title="Fixed at build time"&gt;&lt;/i&gt;&lt;/span&gt; Propriedade de Configuração Fixa no Momento da Compilação - Todas as outras propriedades de configuração podem ser sobrepostas em tempo de execução. &lt;input type="search" id="config-search-0" placeholder="FILTER CONFIGURATION" disabled&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;span href="https://quarkus.io/extensions/"&gt;Extensions&lt;i class="fas fa-chevron-down"&gt;&lt;/i&gt;&lt;/span&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;span href="https://quarkus.io/extensions/"&gt;Extensões&lt;i class="fas fa-chevron-down"&gt;&lt;/i&gt;&lt;/span&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;span href="{{site.baseurl}}/about/"&gt;Why&lt;i class="fas fa-chevron-down"&gt;&lt;/i&gt;&lt;/span&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;span href="{{site.baseurl}}/about/"&gt;Por que&lt;i class="fas fa-chevron-down"&gt;&lt;/i&gt;&lt;/span&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;span href="{{site.baseurl}}/community/"&gt;Community&lt;i class="fas fa-chevron-down"&gt;&lt;/i&gt;&lt;/span&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;span href="{{site.baseurl}}/community/"&gt;Comunidade&lt;i class="fas fa-chevron-down"&gt;&lt;/i&gt;&lt;/span&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;span href="{{site.baseurl}}/learn/"&gt;Learn&lt;i class="fas fa-chevron-down"&gt;&lt;/i&gt;&lt;/span&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;span href="{{site.baseurl}}/learn/"&gt;Aprenda&lt;i class="fas fa-chevron-down"&gt;&lt;/i&gt;&lt;/span&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>&lt;table&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Timestamp&lt;/th&gt;
            &lt;th&gt;User&lt;/th&gt;
            &lt;th&gt;Joke&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        {#for joke in jokes} // &lt;1&gt;
        &lt;tr&gt;
            &lt;td&gt;{joke.timestamp}&lt;/td&gt;
            &lt;td&gt;&lt;span&gt;&lt;img src="{joke.profilePic}" height="30px"&gt;&lt;/img&gt; {joke.user}&lt;/span&gt;&lt;/td&gt;
            &lt;td&gt;{joke.fullJoke}&lt;/td&gt;
        &lt;/tr&gt;
        {/for}
    &lt;/tbody&gt;
&lt;/table&gt;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;table&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Timestamp&lt;/th&gt;
            &lt;th&gt;User&lt;/th&gt;
            &lt;th&gt;Joke&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        {#for joke in jokes} // &lt;1&gt;
        &lt;tr&gt;
            &lt;td&gt;{joke.timestamp}&lt;/td&gt;
            &lt;td&gt;&lt;span&gt;&lt;img src="{joke.profilePic}" height="30px"&gt;&lt;/img&gt; {joke.user}&lt;/span&gt;&lt;/td&gt;
            &lt;td&gt;{joke.fullJoke}&lt;/td&gt;
        &lt;/tr&gt;
        {/for}
    &lt;/tbody&gt;
&lt;/table&gt;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>@BuildStep(onlyIf = IsDevelopment.class)// &lt;1&gt;
JsonRPCProvidersBuildItem createJsonRPCServiceForCache() {// &lt;2&gt;
    return new JsonRPCProvidersBuildItem(CacheJsonRPCService.class);// &lt;3&gt;
}
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>@BuildStep(onlyIf = IsDevelopment.class)// &lt;1&gt;
JsonRPCProvidersBuildItem createJsonRPCServiceForCache() {// &lt;2&gt;
    return new JsonRPCProvidersBuildItem(CacheJsonRPCService.class);// &lt;3&gt;
}
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>@BuildStep(onlyIf = IsDevelopment.class)// &lt;1&gt;
public CardPageBuildItem pages(NonApplicationRootPathBuildItem nonApplicationRootPathBuildItem) {
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>@BuildStep(onlyIf = IsDevelopment.class)// &lt;1&gt;
public CardPageBuildItem pages(NonApplicationRootPathBuildItem nonApplicationRootPathBuildItem) {
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>@Entity
@Table(name = "test_user")
@UserDefinition &lt;1&gt;
public class User extends PanacheEntity {
    @Username &lt;2&gt;
    public String username;
    @Password &lt;3&gt;
    public String password;
    @Roles &lt;4&gt;
    public String role;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>@Entity
@Table(name = "test_user")
@UserDefinition &lt;1&gt;
public class User extends PanacheEntity {
    @Username &lt;2&gt;
    public String username;
    @Password &lt;3&gt;
    public String password;
    @Roles &lt;4&gt;
    public String role;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>@NonBlocking // &lt;1&gt;
public JsonArray getAll() { // &lt;2&gt;
    Collection&lt;String&gt; names = manager.getCacheNames();
    List&lt;CaffeineCache&gt; allCaches = new ArrayList&lt;&gt;(names.size());
    for (String name : names) {
        Optional&lt;Cache&gt; cache = manager.getCache(name);
        if (cache.isPresent() &amp;&amp; cache.get() instanceof CaffeineCache) {
            allCaches.add((CaffeineCache) cache.get());
        }
    }
    allCaches.sort(Comparator.comparing(CaffeineCache::getName));
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>@NonBlocking // &lt;1&gt;
public JsonArray getAll() { // &lt;2&gt;
    Collection&lt;String&gt; names = manager.getCacheNames();
    List&lt;CaffeineCache&gt; allCaches = new ArrayList&lt;&gt;(names.size());
    for (String name : names) {
        Optional&lt;Cache&gt; cache = manager.getCache(name);
        if (cache.isPresent() &amp;&amp; cache.get() instanceof CaffeineCache) {
            allCaches.add((CaffeineCache) cache.get());
        }
    }
    allCaches.sort(Comparator.comparing(CaffeineCache::getName));
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>@Path("/api/admin")
public class AdminResource {
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>@Path("/api/admin")
public class AdminResource {
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>@Path("/api/public")
public class PublicResource {
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>@Path("/api/public")
public class PublicResource {
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>@Path("/api/users")
public class UserResource {
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>@Path("/api/users")
public class UserResource {
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>@Path("/timeTable")
public class TimeTableResource {
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>@Path("/timeTable")
public class TimeTableResource {
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>@PlanningEntity
public class Lesson {
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>@PlanningEntity
public class Lesson {
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>@PlanningSolution
public class TimeTable {
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>@PlanningSolution
public class TimeTable {
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>@QuarkusTest
class TimeTableConstraintProviderTest {
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>@QuarkusTest
class TimeTableConstraintProviderTest {
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>@QuarkusTest
public class JpaSecurityRealmTest {
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>@QuarkusTest
public class JpaSecurityRealmTest {
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>@QuarkusTest
public class TimeTableResourceTest {
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>@QuarkusTest
public class TimeTableResourceTest {
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>@Singleton
public class Startup {
    @Transactional
    public void loadUsers(@Observes StartupEvent evt) {
        // reset and load all test users
        User.deleteAll();
        User.add("admin", "admin", "admin");
        User.add("user", "user", "user");
    }
}
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>@Singleton
public class Startup {
    @Transactional
    public void loadUsers(@Observes StartupEvent evt) {
        // reset and load all test users
        User.deleteAll();
        User.add("admin", "admin", "admin");
        User.add("user", "user", "user");
    }
}
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A "thread-like" data structure managed by the Operating System.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Uma estrutura de dados "semelhante à uma thread" gerenciada pelo sistema operacional.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A HTTP server can redirect a response to another location by sending a response with a status code that starts with "3" and a HTTP header "Location" holding the URL to be redirected to. When the REST Client receives a redirection response from a HTTP server, it won't automatically perform another request to the new location. We can enable the automatic redirection in REST Client by adding the "follow-redirects" property:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Um servidor HTTP pode redirecionar uma resposta para outra localização, enviando uma resposta com um código de estado que começa por "3" e um cabeçalho HTTP "Location" que contém o URL para onde deve ser redirecionado. Quando o Cliente REST recebe uma resposta de redirecionamento de um servidor HTTP, não efetua automaticamente outra requisição para a nova localização. Podemos ativar o redirecionamento automático no Cliente REST adicionando a propriedade "follow-redirects":</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A Kubernetes Native Java stack tailored for OpenJDK HotSpot and GraalVM, crafted from the best of breed Java libraries and standards.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Uma pilha Java nativa do Kubernetes sob medida para OpenJDK HotSpot e GraalVM, criada a partir das melhores bibliotecas e padrões Java.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A _build step_ is a non-static method which is annotated with the `@io.quarkus.deployment.annotations.BuildStep` annotation.
Each build step may xref:consuming-values[consume] items that are produced by earlier stages, and xref:producing-values[produce] items that can be consumed by later stages. Build steps are normally only run when they produce a build item that is
ultimately consumed by another step.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Uma _etapa de construção_ é um método não estático anotado com a anotação `@io.quarkus.deployment.annotations.BuildStep`. Cada etapa de construção pode xref:consuming-values[consumir] itens produzidos por etapas anteriores e xref:producing-values[produzir] itens que podem ser consumidos por etapas posteriores. Normalmente, as etapas de construção são executadas somente quando produzem um item de construção que, em última análise, é consumido por outra etapa.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A _capability_ represents a technical capability that can be queried by other extensions.
An extension may provide multiple capabilities and multiple extensions can provide the same capability.
By default, capabilities are not displayed to users.
Capabilities should be used when checking for the presence of an extension rather than class path based checks.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Uma _capacidade_ representa um recurso técnico que pode ser consultado por outras extensões. Uma extensão pode fornecer várias capacidades e várias extensões podem fornecer a mesma capacidade. Por padrão, as capacidades não são exibidas aos usuários. As capacidades devem ser usadas ao verificar a presença de uma extensão em vez de verificações baseadas em caminhos de classe.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A _feature_ represents a functionality provided by an extension.
The name of the feature gets displayed in the log during application bootstrap.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Uma _funcionalidade_ representa uma funcionalidade fornecida por uma extensão. O nome da funcionalidade é exibido no registro durante o bootstrap da aplicação.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A `ClientHeadersFactory` can look as follows:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Um `ClientHeadersFactory` pode ter o seguinte aspecto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A `RuntimeException` crossing the transaction boundaries will roll back the transaction.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Um 'RuntimeException' cruzando os limites da transação reverterá a transação.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A `StartupEvent` is fired after all `io.quarkus.deployment.builditem.ServiceStartBuildItem` producers have been consumed.
The implication of this is that if an extension has services that application components would expect to have been
started when they observe a `StartupEvent`, the build steps that invoke the runtime code to start those services needs
to produce a `ServiceStartBuildItem` to ensure that the runtime code is run before the `StartupEvent` is sent. Recall that
we saw the production of a `ServiceStartBuildItem` in the previous section, and it is repeated here for clarity:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Um `StartupEvent` é disparado após todos os produtores de `io.quarkus.deployment.builditem.ServiceStartBuildItem` terem sido consumidos. A implicação disso é que, se uma extensão tiver serviços que os componentes da aplicação esperam que tenham sido iniciados quando observam um `StartupEvent` , as etapas de construção que invocam o código de tempo de execução para iniciar esses serviços precisam produzir um `ServiceStartBuildItem` para garantir que o código de tempo de execução seja executado antes que o `StartupEvent` seja enviado. Lembre-se de que vimos a produção de um `ServiceStartBuildItem` na seção anterior, e ela é repetida aqui para maior clareza:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A build step may consume values from previous steps in the following ways:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Um passo de construção pode consumir valores de passos anteriores das seguintes formas:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A build step may produce values for subsequent steps in several possible ways:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Uma etapa de construção pode produzir valores para as etapas subsequentes de várias maneiras possíveis:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A build step that consumes the `ContextRegistrationPhaseBuildItem` should always produce a `ContextConfiguratorBuildItem` or at least inject a `BuildProducer` for this build item, otherwise it could be ignored or processed at the wrong time (e.g. after the correct CDI bootstrap phase).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Uma etapa de construção que consome o `ContextRegistrationPhaseBuildItem` deve sempre produzir um `ContextConfiguratorBuildItem` ou, pelo menos, injetar um `BuildProducer` para este item de construção, caso contrário, pode ser ignorado ou processado no momento errado (por exemplo, após a fase de bootstrap correta do CDI).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A build step that consumes the `ObserverRegistrationPhaseBuildItem` should always produce an `ObserverConfiguratorBuildItem` or at least inject a `BuildProducer` for this build item, otherwise it could be ignored or processed at the wrong time (e.g. after the correct CDI bootstrap phase).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Uma etapa de construção que consome o `ObserverRegistrationPhaseBuildItem` deve sempre produzir um `ObserverConfiguratorBuildItem` ou, pelo menos, injetar um `BuildProducer` para este item de construção, caso contrário, pode ser ignorado ou processado no momento errado (por exemplo, após a fase de bootstrap correta do CDI).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A build step that consumes the `ValidationPhaseBuildItem` should always produce a `ValidationErrorBuildItem` or at least inject a `BuildProducer` for this build item, otherwise it could be ignored or processed at the wrong time (e.g. after the correct CDI bootstrap phase).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Uma etapa de construção que consome o `ValidationPhaseBuildItem` deve sempre produzir um `ValidationErrorBuildItem` ou, pelo menos, injetar um `BuildProducer` para este item de construção, caso contrário, pode ser ignorado ou processado no momento errado (por exemplo, após a fase de bootstrap correta do CDI).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A class that will be initialized at runtime rather than build time. This will cause the build to fail if the class is initialized as part of the native executable build process, so care must be taken.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Uma classe que será inicializada em tempo de execução e não em tempo de construção. Isso fará com que a construção falhe se a classe for inicializada como parte do processo de construção do executável nativo, portanto, é preciso ter cuidado.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A class that will be reinitialized at runtime by Substrate. This will result in the static initializer running twice.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Uma classe que será reinicializada em tempo de execução pelo Substrate. Isso fará com que o inicializador estático seja executado duas vezes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A cohesive platform for optimized developer joy with unified configuration and no hassle native executable generation. Zero config, live reload in the blink of an eye and streamlined code for the 80% common usages, flexible for the remainder 20%.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Uma plataforma coesa para otimizar a alegria do desenvolvedor com configuração unificada e geração de executável nativo sem complicações. Configuração zero, recarregamento ao vivo num piscar de olhos e código simplificado para 80% das utilizações comuns, flexível para os restantes 20%.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A cohesive platform for optimized developer joy:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Uma plataforma coesa para uma alegria otimizada para programadores:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A comma-separated list of host:port to use for establishing the initial connection to the Kafka cluster.

Type: _string_</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Uma lista separada por vírgulas de host:port a ser usada para estabelecer a conexão inicial com o cluster Kafka.

Tipo: _string_</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A comma-separating list of incoming record headers to be propagated to the outgoing record

Type: _string_</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Uma lista separada por vírgulas de cabeçalhos de registro de entrada a serem propagados para o registro de saída

Tipo: _string_</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A common purpose for an extension is to integrate a non-CDI aware service into the CDI based Quarkus runtime.
Step 1 of this task is to load any configuration needed in a STATIC_INIT build step as we did in xref:parsing-config-to-objects[Parsing Config to Objects].
Now we need to create an instance of the service using the configuration.
Let's return to the `TestProcessor#parseServiceXmlConfig` method to see how this can be done.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Uma finalidade comum de uma extensão é integrar um serviço não compatível com CDI ao tempo de execução do Quarkus baseado em CDI. A etapa 1 dessa tarefa é carregar qualquer configuração necessária em uma etapa de construção STATIC_INIT, como fizemos em xref:parsing-config-to-objects[Analisando Configurações para Objetos]. Agora precisamos criar uma instância do serviço usando a configuração. Vamos voltar ao método `TestProcessor#parseServiceXmlConfig` para ver como isso pode ser feito.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A configuration mapping name can contain an extra suffix segment for the case where there are configuration
mappings for multiple xref:config-phases[Config Phases]. Classes which correspond to the `BUILD_TIME` and `BUILD_AND_RUN_TIME_FIXED`
may end with `BuildTimeConfig` or `BuildTimeConfiguration`, classes which correspond to the `RUN_TIME` phase
may end with `RuntimeConfig`, `RunTimeConfig`, `RuntimeConfiguration` or `RunTimeConfiguration` while classes which
correspond to the `BOOTSTRAP` configuration may end with `BootstrapConfig` or `BootstrapConfiguration`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Um nome de mapeamento de configuração pode conter um segmento de sufixo extra para o caso de haver mapeamentos de configuração para várias xref:config-phases[Fases de Configuração]. As classes que correspondem a `BUILD_TIME` e `BUILD_AND_RUN_TIME_FIXED` podem terminar com `BuildTimeConfig` ou `BuildTimeConfiguration` , as classes que correspondem à fase `RUN_TIME` podem terminar com `RuntimeConfig` , `RunTimeConfig` , `RuntimeConfiguration` ou `RunTimeConfiguration` , enquanto as classes que correspondem à configuração `BOOTSTRAP` podem terminar com `BootstrapConfig` ou `BootstrapConfiguration` .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A configuration property name can be split into segments. For example, a property name like
`quarkus.log.file.enable` can be split into the following segments:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Um nome de propriedade de configuração pode ser dividido em segmentos. Por exemplo, um nome de propriedade como `quarkus.log.file.enable` pode ser dividido nos seguintes segmentos:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A convenience feature that allows you to control most of the above features from a single build item.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Uma funcionalidade de conveniência que permite controlar a maioria das funcionalidades acima referidas a partir de um único item de construção.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A convenient way to tell Quarkus that the extension requires SSL, and it should be enabled during native image build.
When using this feature, remember to add your extension to the list of extensions that offer SSL support automatically on the https://github.com/quarkusio/quarkus/blob/main/docs/src/main/asciidoc/native-and-ssl.adoc[native and ssl guide].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Uma maneira conveniente de informar ao Quarkus que a extensão requer SSL e deve ser ativada durante a criação da imagem nativa. Ao usar esse recurso, lembre-se de adicionar sua extensão à lista de extensões que oferecem suporte a SSL automaticamente na https://github.com/quarkusio/quarkus/blob/main/docs/src/main/asciidoc/native-and-ssl.adoc[guia nativo e ssl].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A corresponding `application.properties` for the above example could be:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Um `application.properties` correspondente para o exemplo acima poderia ser:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A custom `bootstrap` script</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Um script `bootstrap` personalizado</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A custom image name can be configured as such:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Um nome de imagem personalizado pode ser configurado. Por exemplo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A deployment time submodule that handles the build time processing and bytecode recording.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Um submódulo de tempo de implantação que trata do processamento do tempo de construção e da gravação de bytecode.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A feature can be registered in a xref:build-step-processors[Build Step Processors] method that produces a `FeatureBuildItem`:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Uma funcionalidade pode ser registrada num método xref:build-step-processors[Build Step Processors] que produz um `FeatureBuildItem`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A few recommendations:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Algumas recomendações:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A framework at runtime typically reads configuration, scan the classpath and classes for metadata (annotations, getters etc.), build a metamodel on top of which it runs, find options via the service loader pattern, prepare invocation calls (reflection), proxy interfaces, etc. +
These operations should be done at build time and the metamodel be passed to the recorder DSL that will generate classes that will be executed at runtime and boot the framework.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Um framework em tempo de execução normalmente lê a configuração, examina o classpath e as classes em busca de metadados (anotações, getters etc.), constrói um metamodelo sobre o qual é executado, encontra opções por meio do padrão do carregador de serviços, prepara chamadas de invocação (reflexão), interfaces de proxy etc.

 Essas operações devem ser feitas no momento da construção e o metamodelo deve ser passado para a DSL do gravador, que gerará classes que serão executadas no tempo de execução e inicializarão o framework.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A gRPC client injection point must be annotated with the `@GrpcClient` qualifier. This qualifier can be used to specify the name that is used to configure the underlying gRPC client. For example, if you set it to `hello-service`, configuring the host of the service is done using the `quarkus.grpc.clients.**hello-service**.host`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O ponto de injeção do cliente gRPC deve ser anotado com o qualificador `@GrpcClient`. Este qualificador pode ser usado para especificar o nome que é utilizado para configurar o cliente gRPC subjacente. Por exemplo, se você defini-lo como `hello-service`, a configuração do host do serviço é feita usando o qualificador `quarkus.grpc.clients. *hello-service*.host`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A gRPC client interceptor can be implemented by a CDI bean that also implements the `io.grpc.ClientInterceptor` interface.
You can annotate an injected client with `@io.quarkus.grpc.RegisterClientInterceptor` to register the specified interceptor for the particular client instance.
The `@RegisterClientInterceptor` annotation is repeatable.
Alternatively, if you want to apply the interceptor to any injected client then annotate the interceptor bean with `@io.quarkus.grpc.GlobalInterceptor`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Um interceptor de cliente gRPC pode ser implementado por um bean CDI que também implementa a interface `io.grpc.ClientInterceptor` . Você pode anotar um cliente injetado com `@io.quarkus.grpc.RegisterClientInterceptor` para registrar o interceptor especificado para a instância específica do cliente. A anotação `@RegisterClientInterceptor` pode ser repetida. Como alternativa, se você deseja aplicar o interceptador a qualquer cliente injetado, anote o bean do interceptador com `@io.quarkus.grpc.GlobalInterceptor` .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A haiku for you.
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Um haiku para você.
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A high level overview of what the various steps of a CI/CD pipeline would look is the following:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Uma visão geral de alto nível do que seriam as várias etapas de um pipeline CI/CD é a seguinte:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A key to used when writing the record

Type: _string_</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Uma chave a ser usada ao gravar o registro

Tipo: _string_</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A list of all extensions that support Dev Services and their configuration options.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Uma lista de todas as extensões que suportam Dev Services e as suas opções de configuração.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A list of features installed in the runtime image</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Uma lista de funcionalidades instaladas na imagem de tempo de execução</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A more detailed example:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Um exemplo mais detalhado:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A name or value property of this consumer.

`properties` is application defined metadata attached to a consumer.

When getting a topic stats, associate this metadata with the consumer stats for easier identification.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Um nome ou propriedade de valor desse consumidor.

'propriedades' são metadados definidos pelo aplicativo anexados a um consumidor.

Ao obter estatísticas de tópico, associe esses metadados às estatísticas do consumidor para facilitar a identificação.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A plugin can be any executable, jar or Java command that can be found locally or obtained remotely.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A plugin can be any executable, jar or Java command that can be found locally or obtained remotely.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A port value of zero will result in a randomly assigned port.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Um valor de porta zero resultará numa porta atribuída aleatoriamente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A project based on {project-name} version 2.13 or later.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Um projeto baseado na versão 2.13 ou posterior de {project-name}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A quick review of the code revealed the deadlocking issue;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A quick review of the code revealed the deadlocking issue;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A recorder consuming a `MetricsFactory` can use `MetricsFactory::metricsSystemSupported()` can be used to control initialization of metrics objects during bytecode recording in a similar way.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Um gravador que consome um `MetricsFactory` pode usar `MetricsFactory::metricsSystemSupported()` pode ser usado para controlar a inicialização de objetos de métricas durante a gravação de bytecode de forma semelhante.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A runtime submodule that contains the runtime behavior that will provide the extension behavior in the native executable or runtime JVM.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Um submódulo de tempo de execução que contém o comportamento de tempo de execução que fornecerá o comportamento de extensão no executável nativo ou na JVM de tempo de execução.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A simple example is to provide a custom ObjectMapper to the REST Client Reactive Jackson extension by doing:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Um exemplo simples é fornecer um ObjectMapper personalizado para a extensão Cliente REST Reativo Jackson:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A simple example of customizing the request would be to add a custom header:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Um exemplo simples de personalização da requisição seria adicionar um cabeçalho personalizado:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A simple example of implementing such a `ResponseExceptionMapper` for the `ExtensionsService` discussed above, could be:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Um exemplo simples de implementação de tal `ResponseExceptionMapper` para o `ExtensionsService` discutido acima, poderia ser:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A simple example where the event payloads are `Long` values is the following:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Um exemplo simples em que os payloads do evento são valores `Long` é o seguinte:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A simpler way to convert HTTP response codes of 400 or above is to use the `@ClientExceptionMapper` annotation.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Uma forma mais simples de converter códigos de resposta HTTP de 400 pra cima é utilizar a anotação `@ClientExceptionMapper`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A small part of the extension work is executed at runtime via the generated classes, while the bulk of the work is done at build time (called deployment time)</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Uma pequena parte do trabalho de extensão é executada em tempo de execução através das classes geradas, enquanto a maior parte do trabalho é feita em tempo de construção (chamado tempo de implantação)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A starter template has been generated for both JVM and native execution modes.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Foi gerado um modelo inicial para os modos de execução JVM e nativo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A static template extension method can be used to add "computed properties" to a data class. The class of the first parameter is used to match the base object and the method name is used to match the property name.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Um método de extensão de modelo estático pode ser utilizado para adicionar “propriedades computadas” a uma classe de dados. A classe do primeiro parâmetro é utilizada para corresponder ao objeto base e o nome do método é utilizado para corresponder ao nome da propriedade.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A synthetic bean may register a synthetic injection point via the `ExtendedBeanConfigurator#addInjectionPoint()` method.
This injection point is validated at build time and considered when xref:cdi-reference.adoc#remove_unused_beans[detecting unused beans].
The injected reference is accessible through the `SyntheticCreationalContext#getInjectedReference()` methods at runtime.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Um bean sintético pode registrar um ponto de injeção sintético por meio do método `ExtendedBeanConfigurator#addInjectionPoint()` . Esse ponto de injeção é validado no momento da construção e considerado na xref:cdi-reference.adoc#remove_unused_beans[detecção de beans não utilizados] . A referência injetada pode ser acessada por meio dos métodos `SyntheticCreationalContext#getInjectedReference()` em tempo de execução.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A synthetic injection point with required type `Bar` was added; this is an equivalent of `@Inject Bar`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Foi adicionado um ponto de injeção sintético com o tipo obrigatório `Bar`; este é equivalente a `@Inject Bar`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A system property that will be set at native executable build time.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Uma propriedade do sistema que será definida em tempo de construção do executável nativo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A unique experience with access to Quarkus experts designed to help you get started with Java in a Kubernetes world.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Uma experiência única com acesso a especialistas em Quarkus projetados para ajudá-lo a começar a usar Java em um mundo Kubernetes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A very useful pattern of creating such beans but also giving application code the ability to easily override some beans with custom implementations, is to use
the `@DefaultBean` that Quarkus provides.
This is best explained with an example.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Um padrão muito útil para criar esses beans, mas que também dá ao código do aplicativo a capacidade de substituir facilmente alguns beans com implementações personalizadas, é usar o `@DefaultBean` que o Quarkus fornece. É melhor explicar isso com um exemplo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A virtual (and in person where possible) tour of Java User Groups creating a unique hands-on experience with access to Quarkus experts designed to help you get started with Java in a Kubernetes world.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Um tour virtual (e presencial, sempre que possível) de Grupos de Usuários Java, criando uma experiência prática única com acesso a especialistas em Quarkus projetados para ajudá-lo a começar a usar Java em um mundo Kubernetes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A working Docker environment</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Um ambiente Docker funcional</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A working container runtime (Docker or xref:podman.adoc[Podman])</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Um container runtime instalado (Docker ou xref:podman.adoc[Podman])</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A xref:configuring-c-development[working C development environment]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Um  link:#configuring-c-development[ambiente de desenvolvimento em C]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>AMQP Dev Services</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Dev Services AMQP</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>AMQP Reference</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Referência AMQP</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>ANNOTATION_STORE</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>ANNOTATION_STORE</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>API returning `Uni` can be used directly using `uni.await().atMost(...)`. It blocks the virtual thread, without blocking the carrier thread, and also improves the resilience of your application with an easy (non-blocking) timeout support.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A API que retornar `Uni` pode ser utilizada diretamente através de `uni.await().atMost(…​)`. Bloqueia a thread virtual, sem bloquear a carrier thread, e também melhora a resiliência da sua aplicação com um suporte fácil de timeout (não bloqueante).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>AWS Lambda</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>AWS Lambda</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>AWS Lambda SnapStart Configuration</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Configuração do AWS Lambda SnapStart</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>AWS Lambda supports creating your lambdas by referencing https://docs.aws.amazon.com/lambda/latest/dg/lambda-images.html[container images] rather than uploading ZIP files. This can have some benefits such as bypassing the size limit of the uploaded ZIP files. You can define lambda functions for both native builds and regular JVM builds.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O AWS Lambda suporta a criação dos seus lambdas referenciando link:https://docs.aws.amazon.com/lambda/latest/dg/lambda-images.html[imagens de contêineres] em vez de carregar arquivos ZIP. Isso pode ter alguns benefícios, como contornar o limite de tamanho dos arquivos ZIP carregados. É possível definir funções lambda tanto para compilações nativas quanto para compilações regulares da JVM.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>AWS X-Ray does add many classes to your distribution, do ensure you are using at least the 256MB AWS Lambda memory size.
This is explicitly set in `manage.sh` `cmd_create()`. Whilst the native image potentially can always use a lower memory setting, it would be recommended to keep the setting the same, especially to help compare performance.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O AWS X-Ray adiciona muitas classes à sua distribuição, portanto, certifique-se de que esteja usando pelo menos o tamanho de memória do AWS Lambda de 256 MB. Isso é definido explicitamente em `manage.sh` `cmd_create()`. Embora a imagem nativa sempre possa usar uma configuração de memória menor, seria recomendável manter a mesma configuração, especialmente para ajudar a comparar o desempenho.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Absolute paths also have an impact on nested endpoints. If the above called `nestedRoute("custom-endpoint", "/deep")`,
the resulting endpoint will be found at `/deep`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os caminhos absolutos também têm impacto sobre os endpoints aninhados. Se o usuário acima chamou `nestedRoute("custom-endpoint", "/deep")` , o endpoint resultante será encontrado em `/deep`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Absolute paths are handled differently. If the above called `route("/custom-endpoint")`, the resulting
endpoint will be found at `/custom-endpoint`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os caminhos absolutos são tratados de forma diferente. Se o acima chamou `route("/custom-endpoint")`, o endpoint resultante será encontrado em `/custom-endpoint` .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Abstract A - All Rock'n Roll and Big Drum Solos</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Resumo A - Todos os solos de Rock'n Roll e Big Drum</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Abstract B - More Easy Listening</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Resumo B - Audição Mais Fácil</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Access Git repositories with JGit</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Acesse repositórios Git com JGit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Accessing application properties with Spring Boot properties API</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Acessando propriedades da aplicação com Spring Boot Properties API</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>According to link:{vthreadjep}[JEP 425] this can happen in two situations:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Segundo o link:{vthreadjep}[JEP 425], isto pode acontecer em duas situações:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>ActiveMQ Artemis is part of `quarkus-pooled-jms`, and it needs to use `quarkus.pooled-jms.transaction=XA`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O ActiveMQ Artemis faz parte do `quarkus-pooled-jms` e precisa usar o `quarkus.pooled-jms.transaction=XA`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Add `@Singleton` as default scope. Classes already annotated with a scope are skipped automatically.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Adicione `@Singleton` como escopo padrão. As classes já anotadas com um escopo são ignoradas automaticamente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Add `org.eclipse.microprofile.graphql.GraphQLApi` to the set of bean defining annotations.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Adicionar `org.eclipse.microprofile.graphql.GraphQLApi` ao conjunto de anotações de definição de bean.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Add `quarkus-jaxb` as a dependency in your Maven `pom.xml`, or Gradle `build.gradle` file.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Adicione `quarkus-jaxb` como uma dependência no seu arquivo Maven `pom.xml`, ou Gradle `build.gradle`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Add a build step in your deployment module that produces a `HealthBuildItem`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Adicione uma etapa de construção no seu módulo de implantação que produz um `HealthBuildItem`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Add a build step to your processor to register a Jackson module via the `JacksonModuleBuildItem`.
You need to name your module in a unique way across all Jackson modules.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Adicione uma etapa de construção ao seu processador para registrar um módulo Jackson por meio do `JacksonModuleBuildItem`. Você precisa nomear o seu módulo de uma forma única em todos os módulos Jackson.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Add a build step to your processor to register the serializer via the `JsonbSerializerBuildItem`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Adicione um passo de construção ao seu processador para registrar o serializador através do `JsonbSerializerBuildItem`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Add a dependency to `quarkus-jackson-spi` on your extension's deployment module.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Adicione uma dependência a `quarkus-jackson-spi` no módulo de implantação da sua extensão.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Add a dependency to `quarkus-jsonb-spi` on your extension's deployment module.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Adicione uma dependência a `quarkus-jsonb-spi` no módulo de implantação da sua extensão.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Add a way to disable the extension health check via a config item `quarkus.&lt;extension&gt;.health.enabled` that should be enabled by default.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Adicione uma forma de desativar a verificação de integridade da extensão através de um item de configuração `quarkus.&lt;extension&gt;.health.enabled` que deve estar ativado por padrão.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Add an optional `name` property to the `GreetingProperties`:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Adicione uma propriedade opcional `name` à classe `GreetingProperties`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Add the Quarkus Kubernetes extension to your build file:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Adicione a extensão Kubernetes do Quarkus ao seu arquivo de construção:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Add the Quarkus gRPC extension to your build file:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Adicione a extensão Quarkus gRPC ao seu arquivo de build:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Add the Quarkus gRPC xDS extension to your build file:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Adicione a extensão Quarkus gRPC xDS ao arquivo de compilação do seu projeto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Add the `@MyInterceptorBinding` annotation.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Adicionar a anotação `@MyInterceptorBinding`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Add the following dependency to your build file:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Adicione a seguinte dependência ao seu arquivo de build:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Adding external JARs to the indexer with IndexDependencyBuildItem</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Adicionar JARs externos ao indexador com IndexDependencyBuildItem</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Additional information:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Informações adicionais:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Additional references</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Referências adicionais</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Additional requirements for client SSL</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Requisitos adicionais para o cliente SSL</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Additional set `-Djavax.net.ssl.trustStorePassword=changeit` if your `cacerts` file is password protected.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Conjunto adicional `-Djavax.net.ssl.trustStorePassword=changeit` se o arquivo `cacerts` estiver protegido por senha.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Additionally, Quarkus includes extensions that make it easy to deploy serverless microservices to cloud providers including AWS Lambda, Azure Functions, and Google Cloud Functions as well as Knative to take advantage of Quarkus application’s fast startup times. &lt;a href="{{site.baseurl}}/guides/deploying-to-kubernetes"&gt;Read the guide for more details.&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Além disso, o Quarkus inclui extensões que facilitam a implantação de microsserviços sem servidor em provedores de nuvem, incluindo AWS Lambda, Azure Functions e Google Cloud Functions, bem como o Knative para aproveitar os tempos de inicialização rápidos do aplicativo Quarkus. &lt;a href="{{site.baseurl}}/guides/deploying-to-kubernetes"&gt;Leia o guia para obter mais detalhes.&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Additionally, each extension that registers a custom CDI context via `ContextRegistrationPhaseBuildItem` should also produce the `CustomScopeBuildItem` in order to contribute the custom scope annotation name to the set of bean defining annotations.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Além disso, cada extensão que registra um contexto CDI personalizado através do `ContextRegistrationPhaseBuildItem` deve também produzir o `CustomScopeBuildItem` de modo a contribuir com o nome da anotação de escopo personalizado para o conjunto de anotações que definem o bean.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Additionally, the bean resolver returned from `BeanDiscoveryFinishedBuildItem#getBeanResolver()` can be used to apply the type-safe resolution rules, e.g. to find out whether there is a bean that would satisfy certain combination of required type and qualifiers.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Além disso, o resolvedor de beans retornado por `BeanDiscoveryFinishedBuildItem#getBeanResolver()` pode ser utilizado para aplicar as regras de resolução de tipagem segura, por exemplo, para descobrir se existe um bean que satisfaça uma determinada combinação de tipo e qualificadores necessários.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Additionally, the bean resolver returned from `SynthesisFinishedBuildItem#getBeanResolver()` can be used to apply the type-safe resolution rules, e.g. to find out whether there is a bean that would satisfy certain combination of required type and qualifiers.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Além disso, o resolvedor de beans retornado por `SynthesisFinishedBuildItem#getBeanResolver()` pode ser utilizado para aplicar as regras de resolução de tipagem segura, por exemplo, para descobrir se existe um bean que satisfaça uma determinada combinação de tipo e qualificadores necessários.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Additionally, we can limit the number of redirections using the property "max-redirects".</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Além disso, podemos limitar o número de redirecionamentos utilizando a propriedade "max-redirects".</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Address of SOCKS5 proxy.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Endereço do proxy SOCKS5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Adds all monitoring options.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Adiciona todas as opções de monitoração.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Adds jvmstat support</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Adiciona suporte a jvmstat</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Adds support for accepting connections from JMX clients.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Adiciona suporte para aceitar conexões de clientes JMX.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Adds support for connections to JMX servers.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Adiciona suporte para conexões a servidores JMX.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Adds support for generating heap dumps</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Adiciona suporte para gerar heap dumps</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Advanced configuration of the transaction is possible with the use of the `@TransactionConfiguration` annotation that is set in addition to the standard `@Transactional` annotation on your entry method or at the class level.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A configuração avançada da transação é possível com a utilização da anotação `@TransactionConfiguration` que é definida para além da anotação `@Transactional` padrão no seu método de entrada ou ao nível da classe.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>After compilation has finished, you find the build artifact in `target/native-sources`:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Após finalizar a compilação, você encontrará o artefato compilado em `target/native-sources`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>After you run the build, there are a few extra files generated by the `quarkus-amazon-lambda` extension.  These files
are in the build directory:  `target/` for maven, `build/` for gradle.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Depois você executa a compilação, há alguns arquivos extras gerados pela extensão `quarkus-amazon-lambda`. Esses arquivos estão no diretório de compilação: `target/` para maven, `build/` para gradle.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Again we need to configure the incoming `quotes` channel inside `producer` project.
Add the following inside `application.properties` file:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Novamente, precisamos configurar o canal de entrada `quotes` dentro do projeto `producer` . Adicione o seguinte no arquivo `application.properties` :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>All BuildItems</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Todos os BuildItems</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>All Configuration Properties</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Todas as propriedades de configuração</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>All documentation should be generated and validated before being committed.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Toda a documentação deve ser gerada e validada antes de ser aceita.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>All other beans can inject such a bean:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Todos os outros beans podem injetar esse bean:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>All right, so far so good, but wouldn't it be better with a few tests, just in case.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Até agora, tudo bem, mas não seria melhor adicionar alguns testes, apenas por precaução?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>All the IO involved in streaming the SSE results is done in a non-blocking manner.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Toda a E/S envolvida no streaming dos resultados do SSE é feita de forma não blocante.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>All the techniques allowing reducing the memory usage and provide faster startup times are not only advantageous in containers. Even on bare metal, it would reduce your memory pressure, and it’s always pleasant to not have to wait 10 seconds to see your application running.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Todas as técnicas que permitem reduzir o uso de memória e proporcionar tempos de inicialização mais rápidos não são vantajosas apenas em contêineres. Mesmo em bare metal, isso reduziria sua pressão de memória, e é sempre agradável não ter que esperar 10 segundos para ver seu aplicativo em execução.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>All we need to specify is the `smallrye-rabbitmq` connector.
By default, reactive messaging maps the channel name `quote-requests` to the same RabbitMQ exchange name.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Tudo o que precisamos especificar é o conector `smallrye-rabbitmq` . Por padrão, as mensagens reativas mapeiam o nome do canal `quote-requests` para o mesmo nome de troca do RabbitMQ.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Allocation benefit: heavy objects are only allocated once per thread, but because the number of these threads was intended to be limited, it would not use too much memory.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Vantagem da alocação: objetos pesados só são atribuídos uma vez por thread, mas como o número destas threads seria limitado, não consumiria memória excessivamente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Also, there is a reactive flavor of `ClientHeadersFactory` that allows doing blocking operations. For example:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Além disso, existe uma variante reativa de `ClientHeadersFactory` que permite realizar operações blocantes. Por exemplo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Alter the client to make calls with the `extraHeaders` attached</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Alterar o cliente para fazer chamadas com os `extraHeaders` anexados</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Alternative Languages</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Idiomas Alternativos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Alternatively, continuous testing and publication can be handled manually.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Alternativamente, os testes contínuos e a publicação podem ser efetuados manualmente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Alternatively, you can also provide a custom redirect handler for all your REST Clients via CDI:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Alternativamente, você também pode fornecer um manipulador de redirecionamento personalizado para todos os seus Clientes REST através de CDI:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Alternatively, you can declare your template parameters in the template file itself.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Em alternativa, pode declarar os seus parâmetros de modelo no próprio arquivo de modelo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Alternatively, you can enable the Application-Layer Protocol Negotiation (alpn) TLS extension and the client will negotiate which HTTP version to use over the ones compatible by the server. By default, it will try to use HTTP/2 first and if it's not enabled, it will use HTTP/1.1. If you want to enable it, you can set:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Alternativamente, você pode habilitar a extensão TLS de Negociação de Protocolo de Camada de Aplicação (alpn) e o cliente irá determinar qual versão HTTP utilizar, dentre as que são compatíveis com o servidor. Por padrão, ele tentará usar o HTTP/2 primeiro e, se não estiver habilitado, usará o HTTP/1.1. Se você quiser habilitá-lo, você pode definir:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Alternatively, you can implement the `ResteasyReactiveClientRequestFilter` interface instead of the `ClientRequestFilter` interface that will directly provide the `ResteasyReactiveClientRequestContext` context:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Alternativamente, pode implementar a interface `ResteasyReactiveClientRequestFilter` em vez da interface `ClientRequestFilter`, que fornecerá diretamente o contexto `ResteasyReactiveClientRequestContext`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Although `@DefaultBean` is the recommended approach, it is also possible for application code to override beans provided by an extension by marking beans as a CDI `@Alternative` and including `@Priority` annotation.
Let's show a simple example.
Suppose we work on an imaginary "quarkus-parser" extension and we have a default bean implementation:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Embora `@DefaultBean` seja a abordagem recomendada, também é possível que o código da aplicação substitua os beans fornecidos por uma extensão marcando-os como um CDI `@Alternative` e incluindo a anotação `@Priority` . Vamos mostrar um exemplo simples. Suponha que trabalhamos em uma extensão imaginária "quarkus-parser" e que temos uma implementação de bean padrão:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Amazon Alexa Integration</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Integração com o Amazon Alexa</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Amazon Lambda with Vert.x Web, Servlet, or RESTEasy</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Amazon Lambda com Vert.x Web, Servlet ou RESTEasy</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>An IDE</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Um IDE</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>An `UnsatisfiedResolutionException` indicates a problem during xref:cdi.adoc#typesafe_resolution[typesafe resolution].
Sometimes an injection point cannot be satisfied even if there is a class on the classpath that appears to be eligible for injection.
There are several reasons why a class is not recognized and also several ways to fix it.
In the first step we should identify the _reason_.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Uma `UnsatisfiedResolutionException` indica um problema durante a xref:cdi.adoc#typesafe_resolution[resolução de tipagem segura] . Às vezes, um ponto de injeção não pode ser satisfeito, mesmo que haja uma classe no classpath que pareça ser elegível para injeção. Há vários motivos pelos quais uma classe não é reconhecida e também várias maneiras de corrigi-los. Na primeira etapa, devemos identificar o _motivo_ .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>An additional Quickstart</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Um Quickstart adicional</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>An example configuration for setting proxy:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Um exemplo de configuração para definir o proxy:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>An example logging configuration:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Um exemplo de configuração de registro:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>An example looks like the following:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Um exemplo é o seguinte:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>An example of a conditional build step</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Um exemplo de um passo de construção condicional</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>An example of parsing an XML config file using JAXB is shown in the `TestProcessor#parseServiceXmlConfig` method:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Um exemplo de análise de um arquivo de configuração XML usando JAXB é mostrado no método `TestProcessor#parseServiceXmlConfig` :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>An example test class may look like:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Um exemplo de classe de teste pode ter o seguinte aspecto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>An extension can produce an xref:cdi-integration.adoc#additional_bean_build_item[`AdditionalBeanBuildItem`] to instruct the container to read a bean definition from a class as if it was part of the original application:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Uma extensão pode produzir um xref:cdi-integration.adoc#additional_bean_build_item[`AdditionalBeanBuildItem`] para instruir o contêiner a ler uma definição de bean de uma classe como se esta fizesse parte da aplicação original:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>An extension hosts Substrate VM code substitution so that libraries can run on GraalVM</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Uma extensão hospeda a substituição de código da Substrate VM para que as bibliotecas possam ser executadas no GraalVM</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>An extension registers this substitution by producing an `ObjectSubstitutionBuildItem` as shown in this `TestProcessor#loadDSAPublicKey` fragment:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Uma extensão registra esta substituição produzindo um `ObjectSubstitutionBuildItem`, como mostra este fragmento de `TestProcessor#loadDSAPublicKey`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>An underlying library does not provide metrics (or there is no library at all) and you want to add instrumentation.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Uma biblioteca subjacente não fornece métricas (ou não existe qualquer biblioteca) e você pretende adicionar instrumentação.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>An underlying library used by the extension is using a specific Metrics API directly (either MP Metrics, Micrometer, or some other).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Uma biblioteca subjacente utilizada pela extensão está usando diretamente uma API de métricas específica (MP Metrics, Micrometer ou outra).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>An underlying library uses its own mechanism for collecting metrics and makes them available at runtime using its own API, e.g. Hibernate's `Statistics` class, or Vert.x `MetricsOptions`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Uma biblioteca subjacente usa o seu próprio mecanismo de coleta de métricas e as disponibiliza em tempo de execução utilizando a sua própria API, por exemplo, a classe `Statistics` do Hibernate ou a Vert.x `MetricsOptions`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Analogously, you can use the `quarkus.debug.transformed-classes-dir` and `quarkus.debug.generated-sources-dir` properties to dump the relevant output.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>De forma análoga, você pode usar as propriedades `quarkus.debug.transformed-classes-dir` e `quarkus.debug.generated-sources-dir` para despejar a saída relevante.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Analyze the update command output for potential instructions and perform the suggested tasks if necessary.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Analise a saída do comando de atualização para obter possíveis instruções e execute as tarefas sugeridas, se necessário.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>And at the end of the guide, the extensive configuration documentation:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>E no final do guia, a extensa documentação de configuração:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>And executed using `java -jar target/quarkus-app/quarkus-run.jar`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>E executada com `java -jar target/quarkus-app/quarkus-run.jar`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>And executed with `java -jar target/quarkus-app/quarkus-run.jar`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>E executado com `java -jar target/quarkus-app/quarkus-run.jar`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>And finally, run it with:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>E, finalmente, execute-o com:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>And our extension also consumes this parser:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>E a nossa extensão também consome este parser:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>And the service as follows:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>E o serviço é o seguinte:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>And then create a build step that uses this recorder:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>E, em seguida, criaríamos um passo de construção que utilize este gravador:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>And update the `GreetingResource` and its test `GreetingResourceTest`:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>E atualize a classe `GreetingResource` e o seu respetivo teste `GreetingResourceTest`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>And vice versa - the extension bean can inject application beans and beans provided by other extensions:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>E vice-versa - o bean de extensão pode injetar beans de aplicação e beans fornecidos por outras extensões:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>And we'd like to render a simple HTML page that contains the item name and price.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>E gostaríamos de renderizar uma página HTML simples que contenha o nome e o preço do item.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>And, finally, run it with:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>E, finalmente, execute-o com:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>And, in a separate terminal:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>E, em um terminal separado:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>AnnotationsTransformer</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>AnnotationsTransformer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Another approach is to provide it programmatically when creating the client:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Outra abordagem consiste em fornecê-lo programaticamente na criação do cliente:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Another approach is to provide the custom HTTP Client options when creating the client programmatically:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Outra abordagem é fornecer as opções do Cliente HTTP personalizadas ao criar o cliente programaticamente:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Another benefit with native executable mode is that Substrate can more easily eliminate features that are not used. If features are directly initialized via bytecode, Substrate can detect that a method is never called and eliminate
that method. If config is read at runtime, Substrate cannot reason about the contents of the config and so needs to keep all features in case they are required.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Outra vantagem do modo executável nativo é que o Substrate pode eliminar mais facilmente os recursos que não são usados. Se os recursos forem inicializados diretamente via bytecode, o Substrate pode detectar que um método nunca é chamado e eliminar esse método. Se a configuração for lida em tempo de execução, o Substrate não pode raciocinar sobre o conteúdo da configuração e, portanto, precisa manter todos os recursos, caso sejam necessários.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Another possibility is to include the `quarkus.native.additional-build-args` configuration property in your `application.properties`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Outra possibilidade é incluir a propriedade de configuração `quarkus.native.additional-build-args` no seu `application.properties`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Another solution is to write a script to do this for you:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Outra solução é escrever um script para fazer isso para você:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Another thing to take note as well is that Quarkus' gRPC support currently includes 3 different types of gRPC usage:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Outra coisa importante a se notar é que o suporte do Quarkus para gRPC atualmente inclui 3 diferentes tipos de uso do gRPC:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Another way to add query parameters to a request is to use `@io.quarkus.rest.client.reactive.ClientQueryParam` on either the REST client interface or a specific method of the interface.
The annotation can specify the query parameter name while the value can either be a constant, a configuration property or it can be determined by invoking a method.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Outra forma de adicionar parâmetros de consulta a uma requisição é usar `@io.quarkus.rest.client.reactive.ClientQueryParam` na interface do cliente REST ou em um método específico da interface. A anotação pode especificar o nome do parâmetro de consulta, enquanto o valor pode ser uma constante, uma propriedade de configuração ou pode ser determinado pela chamada de um método.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Any `@RestForm` parameter of the type `File`, `Path`, `byte[]` or `Buffer`, as well as any
annotated with `@PartType` automatically imply a `@Consumes(MediaType.MULTIPART_FORM_DATA)`
on the method if there is no `@Consumes` present.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Qualquer parâmetro `@RestForm` do tipo `File` , `Path` , `byte[]` ou `Buffer` , bem como qualquer parâmetro anotado com `@PartType` implica automaticamente em um `@Consumes(MediaType.MULTIPART_FORM_DATA)` no método se não houver um `@Consumes` presente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Any arbitrary object via the `io.quarkus.deployment.recording.RecorderContext#registerSubstitution(Class, Class, Class)` mechanism</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Qualquer objeto arbitrário através do mecanismo `io.quarkus.deployment.recording.RecorderContext#registerSubstitution(Class, Class, Class)`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Any of the above extensions that operates with `BuildExtension.BuildContext` can leverage certain build time metadata that are generated during build.
The built-in keys located in `io.quarkus.arc.processor.BuildExtension.Key` are:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Qualquer uma das extensões acima que opere com `BuildExtension.BuildContext` pode aproveitar determinados metadados de tempo de construção gerados durante a construção. As chaves integradas, localizadas em `io.quarkus.arc.processor.BuildExtension.Key` são:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Any you files and directories you create under your zip directory will be included within `function.zip`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Todos os ficheiros e diretórios que criar no seu diretório zip serão incluídos no `function.zip`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Apache Camel on Quarkus</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Apache Camel no Quarkus</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Apache Cassandra Client</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Cliente Apache Cassandra</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Apache Kafka Dev Services</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Dev Services Apache Kafka</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Apache Kafka Reference Guide</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Guia de referência do Apache Kafka</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Apicurio Registry Dev Services</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Dev Services Apicurio</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Application Archives</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Arquivos de Aplicações</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Application Configuration</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Configuração da aplicação</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Application Health &amp; Metrics</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Métricas de integridade do aplicativo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Application Initialization and Termination</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Inicialização e encerramento da aplicação</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Application class list</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Lista de classes da aplicação</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Application requirements have changed drastically over the last few years.  For any application to succeed in the era of cloud computing, Big Data, or IoT, going reactive is increasingly becoming the architecture style to follow.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os requisitos das aplicações mudaram drasticamente nos últimos anos. Para que qualquer aplicação tenha sucesso na era da computação em nuvem, Big Data ou IoT, tornar-se reativo está se tornando cada vez mais o estilo de arquitetura a ser seguido.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Appropriate for things which affect build and must be visible for run time code.  Not read from config at run time.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Apropriado para coisas que afetam a construção e devem ser visíveis para o código em tempo de execução. Não lido da configuração em tempo de execução.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Appropriate for things which affect build.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Adequado para coisas que afetam a construção.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>ArC comes as a dependency of `quarkus-resteasy-reactive` so you already have it handy.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O ArC vem como uma dependência do `quarkus-resteasy-reactive`, então você já o tem à disposição.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>ArC, the CDI container in Quarkus, is bootstrapped at build time.
To integrate with the container, https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html#spi_lite[CDI Build Compatible Extensions, window="_blank"] can be used, as well as a Quarkus-specific extension API.
CDI Portable Extensions are not and cannot be supported.
This guide focuses on the Quarkus-specific extensions API.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O ArC, o contêiner CDI no Quarkus, é inicializado no momento da construção. Para integrar-se ao contêiner, podem ser usadas https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html#spi_lite[Extensões Compatíveis com o CDI Build, window="_blank"] , bem como uma API de extensão específica do Quarkus. As extensões portáteis CDI não são e não podem ser suportadas. Este guia foca na API de extensões específicas do Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Arc, the dependency injection framework used by Quarkus, eliminates all the reflection calls and deduces the injection graph at build time. So, when the application starts, no expensive lookups; it’s done already!</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Arc, a estrutura de injeção de dependência usada pelo Quarkus, elimina todas as chamadas de reflexão e deduz o gráfico de injeção em tempo de compilação. Assim, quando o aplicativo é iniciado, não há pesquisas caras; já está feito!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Architecture</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Arquitetura</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Arrays, Lists and Maps of the above</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Vetores, Listas e Mapas dos elementos acima</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Artifact Result build items</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Itens de construção de Resultado de Artefato</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>As HTTP messages can have large bodies, we limit the amount of body characters logged. The default limit is `100`, you can change it by specifying `quarkus.rest-client.logging.body-limit`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Como as mensagens HTTP podem ter corpos grandes, limitamos a quantidade de caracteres do corpo registrado. O limite padrão é `100`, pode alterá-lo especificando `quarkus.rest-client.logging.body-limit`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>As a CDI based runtime, Quarkus extensions often make CDI beans available as part of the extension behavior.
However, Quarkus DI solution does not support CDI Portable Extensions.
Instead, Quarkus extensions can make use of various xref:cdi-reference.adoc[Build Time Extension Points].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Como um tempo de execução baseado em CDI, as extensões do Quarkus geralmente disponibilizam beans CDI como parte do comportamento da extensão. No entanto, a solução de DI do Quarkus não suporta Extensões Portáteis CDI. Em vez disso, as extensões do Quarkus podem fazer uso de vários xref:cdi-reference.adoc[Pontos de Extensão de Tempo de Construção].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>As a Quarkus developer, you configure the Quarkus OpenID Connect (OIDC) extension by setting the following properties in the `src/main/resources/application.properties` file.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Como programador do Quarkus, você configura a extensão Quarkus OpenID Connect (OIDC) definindo as seguintes propriedades no diretório `src/main/resources/application.properties`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>As a result:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Como resultado:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>As above, commands can be stacked.  The only requirement is that `native` be the first parameter should you wish
to work with native image builds.  The script will take care of the rest of the details necessary to manage your native
image function deployments.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Como acima, os comandos podem ser empilhados. A única exigência é que `native` seja o primeiro parâmetro, caso deseje trabalhar com compilações de imagens nativas. O script cuidará dos detalhes necessários para gerenciar suas implementações de funções de imagem nativa.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>As an example, if you export the metrics to Prometheus, you will get:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Como exemplo, se você exportar as métricas para o Prometheus, obterá:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>As an example, the only reason that a Quarkus application should load an XML parser is if the user is using XML in their
application. Any XML parsing of configuration should be done in the Augmentation phase.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Por exemplo, o único motivo pelo qual uma aplicação Quarkus deve carregar um analisador XML é se o usuário estiver usando XML em sua aplicação. Qualquer análise de XML da configuração deve ser feita na fase de ampliação.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>As and example, let's add a new extension called `my-ext` to the Quarkus source tree:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Como exemplo, vamos adicionar uma nova extensão chamada `my-ext` à árvore de origem do Quarkus:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>As before, the UI is exposed on http://localhost:8080/quotes.html</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Tal como anteriormente, a interface do usuário será exibida em  http://localhost:8080/quotes.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>As for the reactive APIs exposed by Quarkus, stream manipulation uses the Mutiny API.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Quanto às APIs reativas expostas pelo Quarkus, a manipulação de fluxo usa a API Mutiny .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>As mentioned above, in this guide, we are going to implement a reactive CRUD application.
But you may wonder what the differences and benefits are in comparison to the traditional and imperative model.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Conforme mencionado acima, neste guia, vamos implementar um aplicativo CRUD reativo. Mas você pode se perguntar quais são as diferenças e os benefícios em comparação com o modelo tradicional e imperativo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>As mentioned above, the JVM schedules the virtual threads. These virtual threads are mounted on carrier threads. The scheduling comes with a pinch of magic. When the virtual thread attempts to use blocking I/O, the JVM _transforms_ this call into a non-blocking one, unmounts the virtual thread, and mounts another virtual thread on the carrier thread. When the I/O completes, the _waiting_ virtual thread becomes eligible again and will be re-mounted on a carrier thread to continue its execution. For the user, all this dance is invisible. Your synchronous code is executed asynchronously.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Como mencionado acima, a JVM agenda as threads virtuais. Essas threads virtuais são montadas em carrier threads. O agendamento vem com uma pitada de magia. Quando a thread virtual tenta utilizar E/S bloqueante, a JVM _transforma_ esta chamada numa chamada não bloqueante, desmonta a thread virtual e monta outra thread virtual na carrier thread. Quando a E/S é concluída, a thread virtual _em espera_ torna-se novamente elegível e será montada novamente numa carrier thread para continuar a sua execução. Para o usuário, todo esse processo é invisível. O seu código síncrono é executado de forma assíncrona.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>As much as possible Quarkus tries to avoid reflection, reducing startup time and memory usage. During the built-time processing, extensions can analyze the application code and the classes available on the classpath and replace reflection calls with regular invocations. The usage of dynamic proxies is also prevented by using generating custom proxy at build time.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Tanto quanto possível, o Quarkus tenta evitar a reflexão, reduzindo o tempo de inicialização e o uso de memória. Durante o processamento em tempo de compilação, as extensões podem analisar o código do aplicativo e as classes disponíveis no classpath e substituir chamadas de reflexão por chamadas regulares. O uso de proxies dinâmicos também é impedido usando a geração de proxy personalizado em tempo de compilação.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>As much as possible favor doing work at build time (deployment part of the extension) as opposed to let the framework do work at startup time (runtime).
The more is done there, the smaller Quarkus applications using that extension will be and the faster they will load.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Na medida do possível, prefira fazer o trabalho no momento da construção(parte de implantação da extensão) em vez de deixar que o framework faça o trabalho no momento da inicialização (tempo de execução). Quanto mais trabalho for feito ali, menores serão as aplicações Quarkus que usam essa extensão e mais rápido elas serão carregadas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>As much processing as possible is done at build time; thus, your application only contains the classes used at runtime. In traditional frameworks, all the classes required to perform the initial application deployment hang around for the application’s life, even though they are only used once. With Quarkus, they are not even loaded into the production JVM! Quarkus does not stop here. During the build-time processing, it prepares the initialization of all components used by your application. It results in less memory usage and faster startup time as all metadata processing has already been done.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O máximo de processamento possível é feito em tempo de compilação; assim, seu aplicativo contém apenas as classes usadas em tempo de execução. Em estruturas tradicionais, todas as classes necessárias para executar a implantação inicial do aplicativo permanecem durante a vida útil do aplicativo, mesmo que sejam usadas apenas uma vez. Com o Quarkus, eles nem são carregados na JVM de produção! O Quarkus não para por aqui. Durante o processamento em tempo de compilação, ele prepara a inicialização de todos os componentes usados pelo seu aplicativo. Isso resulta em menos uso de memória e tempo de inicialização mais rápido, pois todo o processamento de metadados já foi feito.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>As previously mentioned, the body parameter needs to be properly crafted by the application code to conform to the service's requirements.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Tal como referido anteriormente, o parâmetro do corpo tem de ser corretamente elaborado pelo código da aplicação para estar em conformidade com os requisitos do serviço.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>As they cannot be instantiated, they cannot be injected by any means, nor be returned by a build step (or via a `BuildProducer`).
To produce an empty build item you must annotate the build step with `@Produce(MyEmptyBuildItem.class)` and to consume it by `@Consume(MyEmptyBuildItem.class)`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Como não podem ser instanciados, não podem ser injetados por nenhum meio nem retornados por uma etapa de construção (ou por meio de um `BuildProducer` ). Para produzir um item de construção vazio, você deve anotar a etapa de construção com `@Produce(MyEmptyBuildItem.class)` e consumi-la com `@Consume(MyEmptyBuildItem.class)` .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>As usual, the application can be packaged using:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Como de costume, a aplicação pode ser empacotada utilizando:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>As we have seen above, the API exposes five Rest endpoints.
In this section we are going to see how to initialise an increment, see the list of current increments,
incrementing a value given its key, retrieving the current value of an increment, and finally deleting
a key.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Como vimos acima, a API expõe cinco endpoints Rest. Nesta seção, veremos como inicializar um incremento, ver a lista de incrementos atuais, incrementar um valor com sua chave, recuperar o valor atual de um incremento e, por fim, excluir uma chave.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>As with the previous example we need to configure the connectors in the `application.properties` file.
Open the `src/main/resources/application.properties` file and add:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Como no exemplo anterior, precisamos configurar os conectores no arquivo `application.properties` . Abra o arquivo `src/main/resources/application.properties` e adicione:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>As writing bytecode directly is complex, this is instead done via bytecode recorders. At deployment time,
invocations are made on recorder objects that contain the actual runtime logic, but instead of these invocations
proceeding as normal they are intercepted and recorded (hence the name). This recording is then used to generate bytecode
that performs the same sequence of invocations at runtime. This is essentially a form of deferred execution where invocations
made at deployment time get deferred until runtime.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Como escrever bytecode diretamente é complexo, isso é feito por meio de gravadores de bytecode. No momento da implantação, as invocações são feitas em objetos gravadores que contêm a lógica real do tempo de execução, mas, em vez de essas invocações prosseguirem normalmente, elas são interceptadas e gravadas (daí o nome). Essa gravação é então usada para gerar bytecode que executa a mesma sequência de invocações no tempo de execução. Essencialmente, essa é uma forma de execução diferida em que as invocações feitas no momento da implantação são adiadas até o tempo de execução.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>As you see in the example above, you can make your `ClientHeadersFactory` implementation a CDI bean by
annotating it with a scope-defining annotation, such as `@Singleton`, `@ApplicationScoped`, etc.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Como você vê no exemplo acima, é possível tornar a implementação do `ClientHeadersFactory` um bean CDI anotando-o com uma anotação de definição de escopo, como `@Singleton` , `@ApplicationScoped` , etc.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Ask on &lt;a href="https://stackoverflow.com/questions/tagged/quarkus"&gt;Stack Overflow with the &lt;code&gt;quarkus&lt;/code&gt; tag&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Pergunte no &lt;a href="https://stackoverflow.com/questions/tagged/quarkus"&gt;Stack Overflow com a tag &lt;code&gt;quarkus&lt;/code&gt;&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Ask your questions on &lt;a href="https://stackoverflow.com/questions/tagged/quarkus"&gt;Stack Overflow&lt;/a&gt;. After the documentation, it’s probably the best place to look for answers. We actively monitor the &lt;a href="https://stackoverflow.com/questions/tagged/quarkus"&gt;Quarkus tag&lt;/a&gt;.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Faça suas perguntas sobre &lt;a href="https://stackoverflow.com/questions/tagged/quarkus"&gt;Stack Overflow&lt;/a&gt;. Depois da documentação, é provavelmente o melhor lugar para procurar respostas. Monitoramos ativamente a &lt;a href="https://stackoverflow.com/questions/tagged/quarkus"&gt;tag Quarkus&lt;/a&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Async Support</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Suporte Assíncrono</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>At runtime the bytecode will be invoked in the order it is generated. This means that build step dependencies implicitly
control the order that generated bytecode is run. In the example above we know that the bytecode that produces a
`ServletExtensionBuildItem` will be run before the bytecode that consumes it.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>No tempo de execução, o bytecode será chamado na ordem em que foi gerado. Isso significa que as dependências da etapa de construção controlam implicitamente a ordem em que o bytecode gerado é executado. No exemplo acima, sabemos que o bytecode que produz um `ServletExtensionBuildItem` será executado antes do bytecode que o consome.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>At that point you should have the following structure:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Nesse momento, você deverá ter a seguinte estrutura:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>At the moment, multipart response support is subject to the following limitations:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Atualmente, o suporte de respostas multi-partes está sujeito às seguintes limitações:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>At this point, Quarkus uses the Redis Dev Service to run a Redis server and configure the application.
However, in production, you will run your own Redis (or used a Cloud offering).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Neste ponto, o Quarkus usa o Redis Dev Service para executar um servidor Redis e configurar a aplicação. No entanto, em produção, você executará seu próprio Redis (ou usará uma oferta de nuvem).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>At times, it can be useful to know how the exact time each startup task (which is the result of each bytecode recording) takes when the application is run.
The simplest way to determine this information is to launch the Quarkus application with the `-Dquarkus.debug.print-startup-times=true` system property.
The output will look something like:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Às vezes, pode ser útil saber o tempo exato que cada tarefa de inicialização (que é o resultado de cada gravação de bytecode) leva quando a aplicação é executada. A maneira mais simples de determinar essas informações é iniciar o aplicativo Quarkus com a propriedade de sistema `-Dquarkus.debug.print-startup-times=true`. O resultado será algo parecido com:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Attribute</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Atributo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Attribute (_alias_)</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Atributo (_alias_)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Augmentation</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Ampliação</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Auth Type</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Auth Type</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Authentication</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Autenticação</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Authentication map of the client.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Mapa de autenticação do cliente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Authentication parameter of the client.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Parâmetro de autenticação do cliente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Authentication settings of the client.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Configurações de autenticação do cliente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Authorization of Web Endpoints</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Autorização de Web Endpoints</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Automatic Service Setup with Dev Services</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Configuração automática de serviços com Dev Services</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Automatic command completion is available for Bash and Zsh:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Automatic command completion is available for Bash and Zsh:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Automatic provisioning and application wiring of supporting services such as databases, identity servers, and more.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Provisionamento automático e conexão de aplicações de serviços de suporte, como bancos de dados, servidores de identidade e muito mais.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Automatically add newline with `curl -w "\n"`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Adicione automaticamente uma quebra de linha com `curl -w “\n”`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Automatically start database containers with Dev Services.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Inicie automaticamente contêineres de banco de dados com Dev Services.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Avail. at run time</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Disponível em tempo de execução</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Availability As Of</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Disponibilidade a partir de</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Available Build Time Metadata</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Metadados de Tempo de Construção Disponíveis</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Azure Functions (Serverless) with Vert.x Web, Servlet, or RESTEasy</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Azure Functions (Serverless) com Vert.x Web, Servlet ou RESTEasy</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>BEANS</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>BEANS</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>BOOTSTRAP</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>BOOTSTRAP</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>BUILD_AND_RUN_TIME_FIXED</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>BUILD_AND_RUN_TIME_FIXED</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>BUILD_TIME</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>BUILD_TIME</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Back to our `producer` project.
Let's modify the `QuotesResource` to consume quotes, bind it to an HTTP endpoint to send events to clients:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Voltemos ao nosso projeto `producer` . Vamos modificar o `QuotesResource` para consumir cotações e vinculá-lo a um endpoint HTTP para enviar eventos aos clientes:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Background</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Background</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Bare library running</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Biblioteca nua em funcionamento</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Base Runtime Image for Native Executables</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Imagem de tempo de execução base para executáveis nativos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Batching time period of sending messages.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Período de tempo de envio de mensagens em lote.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Be Guided Through First Application</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Ser guiado na primeira aplicação</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Be aware that it increases the compilation time... a lot (&gt;10 minutes).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Fique ciente de que isso aumenta significativamente o tempo de compilação... bastante (&gt;10 minutos).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Be sure to read the xref:cdi-reference.adoc#bean_discovery[Bean Discovery] section of the CDI guide for more information.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para mais informações, leia a seção  link:cdi-reference.html#bean_discovery[Bean Discovery] do guia CDI.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Bean Class Registered by `AdditionalBeanBuildItem`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Classe de Bean Registrada por `AdditionalBeanBuildItem`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Bean Defining Annotations</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Anotações de Definição de Bean</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Bean Injecting a Bean Produced by an `AdditionalBeanBuildItem`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Bean Injetando um Bean Produzido por um `AdditionalBeanBuildItem`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Bean classes added via `AdditionalBeanBuildItem` are _removable_ by default.
If the container considers them xref:cdi-reference.adoc#remove_unused_beans[unused], they are just ignored.
However, you can use `AdditionalBeanBuildItem.Builder.setUnremovable()` method to instruct the container to never remove bean classes registered via this build item.
See also xref:cdi-reference.adoc#remove_unused_beans[Removing Unused Beans] and xref:unremovable_builditem[_Reason 3_: Class Was Discovered and Has a Bean Defining Annotation but Was Removed] for more details.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>As classes de bean adicionadas por meio do `AdditionalBeanBuildItem` são _removíveis_ por padrão. Se o contêiner as considerar xref:cdi-reference.adoc#remove_unused_beans[não utilizadas] , elas serão simplesmente ignoradas. No entanto, é possível usar o método `AdditionalBeanBuildItem.Builder.setUnremovable()` para instruir o contêiner a nunca remover as classes de bean registradas por meio desse item de construção. Consulte também xref:cdi-reference.adoc#remove_unused_beans[Removendo Beans Não Usados] e xref:unremovable_builditem[Razão 3: A Classe Foi Descoberta e Tem uma Anotação que Define o Bean, mas Foi Removida] para obter mais detalhes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Bean classes added via `BeanDefiningAnnotationBuildItem` are _not removable_ by default, i.e. the resulting beans must not be removed even if they are considered unused.
However, you can change the default behavior.
See also xref:cdi-reference.adoc#remove_unused_beans[Removing Unused Beans] and xref:unremovable_builditem[_Reason 3_: Class Was Discovered and Has a Bean Defining Annotation but Was Removed] for more details.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>As classes de beans adicionadas por meio do `BeanDefiningAnnotationBuildItem` são _não removíveis_ por padrão, ou seja, os beans resultantes não devem ser removidos, mesmo que sejam considerados não utilizados. Entretanto, você pode alterar o comportamento padrão. Consulte também xref:cdi-reference.adoc#remove_unused_beans[Removendo Beans Não Utilizados] e xref:unremovable_builditem[Razão 3: A Classe Foi Descoberta e Tem uma Anotação que Define o Bean, mas Foi Removida] para mais detalhes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Bean discovery</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Descoberta do Bean</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Bean initialization</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Inicialização do bean</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>BeanDeploymentValidator</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>BeanDeploymentValidator</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>BeanRegistrar</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>BeanRegistrar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Beans backed by classes</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Beans apoiados por classes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Because of the additional class, our property names have changed.
Let's update the properties file and the `GreetingResource` class.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Devido à classe adicional, o nome das propriedades foram alterados. Vamos atualizar o arquivo de propriedades e a classe `GreetingResource` .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Because of this, in the case of Maven, the version of the https://maven.apache.org/surefire/maven-surefire-plugin/[Surefire Maven Plugin] must be set, as the default version does not support JUnit 5:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Por isso, no caso do Maven, a versão do  link:https://maven.apache.org/surefire/maven-surefire-plugin/[plug-in Surefire Maven] deve ser definida, pois a versão padrão não suporta o JUnit 5:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Because starting a Kafka broker can be long, Dev Services for Kafka uses https://vectorized.io/redpanda[Redpanda], a Kafka compatible broker which starts in ~1 second.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Como a inicialização de um broker Kafka pode ser demorada, o Dev Services para o Kafka usa o  link:https://vectorized.io/redpanda[Redpanda], um broker compatível com o Kafka que inicia em aproximadamente 1 segundo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Because the interaction with the database is non-blocking and asynchronous, we need to use asynchronous constructs to implement our HTTP resource.
Quarkus uses Mutiny as its central reactive programming model.
So, it supports returning Mutiny types (`Uni` and `Multi`) from HTTP endpoints.
Also, our Fruit Panache entity exposes methods using these types, so we only need to implement the _glue_.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Como a interação com o banco de dados é assíncrona e sem bloqueio, precisamos usar construções assíncronas para implementar nosso recurso HTTP. O Quarkus usa o Mutiny como seu modelo central de programação reativa. Portanto, ele suporta o retorno de tipos Mutiny ( `Uni` e `Multi` ) a partir de endpoints HTTP. Além disso, nossa entidade Fruit Panache expõe métodos que usam esses tipos, portanto, só precisamos implementar a _cola_ .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Before building a container image from the Dockerfiles shown below, you need to update the default `.dockerignore` file, as it filters everything except the `target` directory. In order to build inside a container, you need to copy the `src` directory. Thus, edit your `.dockerignore` and remove the `*` line.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Antes de construir uma imagem de contêiner a partir dos Dockerfiles mostrados abaixo, é necessário atualizar o arquivo `.dockerignore`, uma vez que este filtra tudo exceto o diretório `target`. Para fazer o build dentro de um contêiner, é necessário copiar o diretório `src`. Portanto, edite seu `.dockerignore` e remova a linha `*`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Before coding, we need to generate the classes used to implement and consume gRPC services.
In a terminal, run:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Antes de começar a programar, precisamos gerar as classes usadas para implementar e consumir os serviços gRPC. Em um terminal, execute:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Before going further, open the `src/main/resources/application.properties` file and add:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Antes de prosseguir, abra o arquivo `src/main/resources/application.properties` e adicione:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Before publishing your extension to the xref:tooling.adoc[Quarkus tooling], make sure that the following requirements are met:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Antes de publicar a sua extensão nas xref:tooling.html[ferramentas Quarkus], certifique-se de que os seguintes requisitos são cumpridos:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Before running the application, don't forget to stop the hot reload mode (hit `CTRL+C`), or you will have a port conflict.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Antes de executar a aplicação, não se esqueça de parar o modo de recarregamento automático (hot reload) (pressione `CTRL+C`), ou terá um conflito de portas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Being _deprecated_ means that this extension is likely to be replaced or removed in a future version of Quarkus.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Ser _deprecated_ significa que essa extensão provavelmente será substituída ou removida em uma versão futura do Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Below is an example of (required) additional configuration when using xDS gRPC with the Istio Service Mesh in Kubernetes.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Abaixo está um exemplo de configuração adicional (obrigatória) ao usar xDS gRPC com o Istio Service Mesh no Kubernetes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Below, you can see how the container images created above can be built and deployed to AWS using the `docker` and `aws` command line tools. These instructions work for both native and jvm container images and assume that the `aws` command line tool has been logged in.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Abaixo, você pode ver como as imagens de contêiner criadas acima podem ser criadas e implantadas na AWS usando as ferramentas de linha de comando `docker` e `aws`. Essas instruções funcionam para imagens de contêineres nativas e jvm e pressupõem que a ferramenta de linha de comando `aws` tenha sido conectada.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Best of Breed Libraries and Standards</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>As melhores Bibliotecas e Padrões disponíveis</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Beyond simply working, we’re aiming for Joy.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Além de simplesmente funcionar, estamos buscando alegria.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Binder pattern: An extension can opt to use completely different gathering implementations depending on the metrics system. An `Optional&lt;MetricsCapabilityBuildItem&gt; metricsCapability` build step parameter can be used to declare or otherwise initialize API-specific metrics based on the active metrics extension (e.g. "smallrye-metrics" or "micrometer"). This pattern can be combined with the consumer pattern by using `MetricsFactory::metricsSystemSupported()` to test the active metrics extension within the recorder.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Padrão Binder: Uma extensão pode optar por usar implementações de coleta completamente diferentes, dependendo do sistema de métricas. Um parâmetro da etapa de construção `Optional&lt;MetricsCapabilityBuildItem&gt; metricsCapability` pode ser usado para declarar ou inicializar métricas específicas da API com base na extensão de métricas ativa (por exemplo, "smallrye-metrics" ou "micrometer"). Este padrão pode ser combinado com o padrão Consumidor utilizando `MetricsFactory::metricsSystemSupported()` para testar a extensão de métrica ativa dentro do gravador.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Blocking Stub</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Stub Bloqueante</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Books</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Livros</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Bootstrapping a reactive CRUD application with Quarkus</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Criar uma aplicação CRUD reativa com o Quarkus</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Bootstrapping an application</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Iniciando uma aplicação</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Bootstrapping the Reactive Fruits application</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Criando a aplicação Reactive Fruits</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Bootstrapping the project</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Iniciando uma aplicação</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Both `quarkus create` and `quarkus extension list` allow you to explicitly specify a version of Quarkus in one of two ways:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Both `quarkus create` and `quarkus extension list` allow you to explicitly specify a version of Quarkus in one of two ways:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Browse through these selections of new Quarkus related books and resources to expand your knowledge and hone your coding skills to step up your Quarkus game.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Navegue por essas seleções de novos livros e recursos relacionados ao Quarkus para expandir seus conhecimentos e aprimorar suas habilidades de codificação para intensificar seu conhecimento em Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Build Container Images</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Criar imagens de contêiner</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Build Step Processors</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Processadores de Etapas de Construção</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Build Time Processing</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Processamento de tempo de compilação</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Build a container image from scratch</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Criar uma imagem scratch</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Build and Deploy</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Build e Deploy</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Build and deploy a native Quarkus application to Kubernetes.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Crie e implante um aplicativo nativo do Quarkus no Kubernetes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Build and send the response.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Construir e enviar a resposta.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Build containers for application using virtual threads</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Construir contêineres para aplicação que utiliza threads virtuais</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Build fully static native executables</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Buildando executáveis nativos totalmente estáticos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Build items</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Itens de Construção</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Build items are concrete, final subclasses of the abstract `io.quarkus.builder.item.BuildItem` class.  Each build item represents
some unit of information that must be passed from one stage to another.  The base `BuildItem` class may not itself be directly
subclassed; rather, there are abstract subclasses for each of the kinds of build item subclasses that _may_ be created:
xref:simple-build-items[simple], xref:multi-build-items[multi], and xref:empty-build-items[empty].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os itens de construção são subclasses concretas e finais da classe abstrata `io.quarkus.builder.item.BuildItem`. Cada item de construção representa alguma unidade de informação que deve ser passada de um estágio para outro. A classe base `BuildItem` não pode ser diretamente subclasse; em vez disso, há subclasses abstratas para cada um dos tipos de subclasses de itens de construção que _podem_ ser criados: xref:simple-build-items[simples] , xref:multi-build-items[múltiplo] e xref:empty-build-items[vazio].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Build native executables with GraalVM or Mandrel.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Crie executáveis nativos com GraalVM ou Mandrel.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Build step classes are instantiated and injected for each build step invocation, and are discarded afterwards.  State
should only be communicated between build steps by way of build items, even if the steps are on the same class.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>As classes de etapa de construção são instanciadas e injetadas para cada invocação de etapa de construção e são descartadas posteriormente. O estado só deve ser comunicado entre as etapas de construção por meio de itens de construção, mesmo que as etapas estejam na mesma classe.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Build steps</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Etapas de Construção</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Build steps are executed if and only if they produce build items that are (transitively) needed by other build steps. Make sure your build step produces a build item, otherwise you should probably produce either `ValidationErrorBuildItem` for build validations, or `ArtifactResultBuildItem` for generated artifacts.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os passos de construção são executados se e somente se eles produzem itens de construção que são (transitivamente) necessários para outros passos de construção. Certifique-se de que sua etapa de construção produz um item de construção, caso contrário, você provavelmente deve produzir `ValidationErrorBuildItem` para validações de construção, ou `ArtifactResultBuildItem` para artefatos gerados.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Build steps are normally placed on plain classes within an extension's deployment module.  The classes are automatically
instantiated during the augment process and utilize xref:injection[injection].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>As etapas de construção são normalmente colocadas em classes simples dentro do módulo de implantação de uma extensão. As classes são instanciadas automaticamente durante o processo de ampliação e utilizam xref:injection[injeção].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Build steps can query the transformed annotations for a given annotation target via the `TransformedAnnotationsBuildItem`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>As etapas de construção podem consultar as anotações transformadas para um determinado alvo de anotação através do `TransformedAnnotationsBuildItem`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Build the Docker image</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Criar a imagem do Docker</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Build the project:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Compile o projeto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Build, Sign and Encrypt JSON Web Tokens (JWT)</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Criar, assinar e encriptar tokens Web JSON (JWT)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Builder Example</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de Builder</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Building Applications with Gradle</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Construindo aplicativos com o Gradle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Building Applications with Maven</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Criando aplicativos com o Maven</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Building My First Extension</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Construindo minha primeira extensão</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Building Native Executables</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Criando executáveis nativos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Building a Native Executable</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Criando um executável nativo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Building fully statically linked binaries enables the usage of a https://hub.docker.com/_/scratch[scratch image] containing solely the resulting native executable.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O build de binários totalmente linkados estaticamente permite a utilização de uma link:https://hub.docker.com/_/scratch[imagem de rascunho] contendo apenas o executável nativo resultante.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Building with GraalVM instead of Mandrel requires a custom builder image parameter to be passed additionally:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Fazer o build com o GraalVM ao invés do Mandrel requer que seja passado um parâmetro adicional ao construtor da imagem:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Built-In Authentication Support</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Suporte de autenticação integrado</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Business Automation</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Automação comercial</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>But you may be wondering where the URL is configured as it’s not in the code. Remember, it must not be hard-coded because the URL likely depends on the environment. The URL is configured in the application configuration:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Mas você pode estar se perguntando onde a URL está configurada, pois não está no código. Lembre-se, ele não deve ser embutido em código porque a URL provavelmente depende do ambiente. A URL é configurada na configuração do aplicativo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>But, there is a catch.
We need a way to write continuation-passing code.
There are many ways of doing this.
In Quarkus, we propose:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Mas há um problema. Precisamos de uma maneira de escrever código de passagem de continuação. Há muitas maneiras de fazer isso. No Quarkus, nós propomos:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>But, what about streams? Generating a &lt;em&gt;server-sent event&lt;/em&gt; response with Quarkus is just as simple:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Mas, e os streamings? Gerar uma resposta &lt;em&gt;server-sent event&lt;/em&gt; com o Quarkus é igualmente simples:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>By annotating the method with `@io.quarkus.deployment.annotations.Consume`, giving the class name of an
xref:empty-build-items[empty build item]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Anotando o método com `@io.quarkus.deployment.annotations.Consume`, fornecendo o nome da classe de um xref:empty-build-items[item de construção vazio]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>By annotating the method with `@io.quarkus.deployment.annotations.Produce`, giving the class name of an
xref:empty-build-items[empty build item]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Anotando o método com `@io.quarkus.deployment.annotations.Produce`, fornecendo o nome da classe de um xref:empty-build-items[item de construção vazio]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>By convention the deployment time artifact has the `-deployment` suffix, and the runtime artifact
has no suffix (and is what the end user adds to their project).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Por convenção, o artefato de tempo de implantação tem o sufixo `-deployment` e o artefato de tempo de execução não tem sufixo (e é o que o usuário final adiciona ao seu projeto).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>By default, a synthetic bean is initialized during `STATIC_INIT`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Por padrão, um bean sintético é inicializado durante `STATIC_INIT`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>By default, all files located in the `src/main/resources/templates` directory and its subdirectories are registered as templates. Templates are validated during startup and watched for changes in the development mode.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Por padrão, todos os arquivos localizados no diretório `src/main/resources/templates` e seus subdiretórios são registrados como modelos. Os modelos são validados durante o início da aplicação e monitorados para alterações no modo de desenvolvimento.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>By default, integration tests both *build* and *run* the native executable using the `prod` profile.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Por padrão, os testes de integração *build* e *run* são feitos usando o profile `prod`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>By default, tests will run on port `8081` so as not to conflict with the running application. We automatically
configure RestAssured to use this port. If you want to use a different client you should use the `@TestHTTPResource`
annotation to directly inject the URL of the tested application into a field on the test class. This field can be of the type
`String`, `URL` or `URI`. This annotation can also be given a value for the test path. For example, if I want to test
a Servlet mapped to `/myservlet` I would just add the following to my test:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Por padrão, os testes serão executados na porta `8081` para não entrar em conflito com o aplicativo em execução. Configuramos automaticamente
o RestAssured para usar essa porta. Se quiser usar um cliente diferente, use a anotação `@TestHTTPResource`
para injetar diretamente o URL do aplicativo testado em um campo da classe de teste. Esse campo pode ser do tipo
`String` , `URL` ou `URI` . Essa anotação também pode receber um valor para o caminho do teste. Por exemplo, se eu quiser testar
um Servlet mapeado para `/myservlet` , basta adicionar o seguinte no meu teste:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>By default, the Kubernetes resources do not contain readiness and liveness probes. To add them, import the Smallrye Health extension to your build file:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Por padrão, os recursos do Kubernetes não contêm sondas de prontidão (readiness) e vivacidade (liveness). Para adicioná-las, importe a extensão Smallrye Health para seu arquivo de construção:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>By default, the `groupId`, `version`, `quarkusVersion`, `namespaceId`, and `namespaceName` will be consistent with other Quarkus core extensions.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Por padrão, `groupId`, `version`, `quarkusVersion`, `namespaceId`, e `namespaceName` serão consistentes com outras extensões do núcleo do Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>By default, the `quarkus-grpc` extension relies on the reactive programming model.
In this guide we will follow a reactive approach.
Under the `dependencies` section of your `pom.xml` file, make sure you have the RESTEasy Reactive dependency:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Por padrão, a extensão `quarkus-grpc` se baseia no modelo de programação reativa. Neste guia, seguiremos uma abordagem reativa. Na seção `dependencies` do seu arquivo `pom.xml`, certifique-se de ter a dependência RESTEasy Reactive:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>By default, the documentation generator will use the hyphenated field name as the key of a `java.util.Map`. Use the
`io.quarkus.runtime.annotations.ConfigDocMapKey` annotation to override the behaviour.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Por padrão, o gerador de documentação usará o nome do campo hifenizado como a chave de um `java.util.Map` . Use a anotação `io.quarkus.runtime.annotations.ConfigDocMapKey` para substituir o comportamento.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>By default, the metrics are exposed on the main HTTP server.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>By default, the metrics are exposed on the main HTTP server.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>By default, the server is exposed on `localhost:9000`, and uses _plain-text_ (so no TLS) when
running normally, and `localhost:9001` for tests.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Por padrão, o servidor é exposto em `localhost:9000` e utiliza _texto simples_ (sem TLS) quando executado normalmente, e `localhost:9001` para testes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>By default, when a Quarkus application starts (in regular or dev mode), it will display an ASCII art banner. The banner can be disabled by setting `quarkus.banner.enabled=false` in `application.properties`,
by setting the `-Dquarkus.banner.enabled=false` Java System Property, or by setting the `QUARKUS_BANNER_ENABLED` environment variable to `false`.
Furthermore, users can supply a custom banner by placing the banner file in `src/main/resources` and configuring `quarkus.banner.path=name-of-file` in `application.properties`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Por padrão, quando um aplicativo Quarkus é iniciado (no modo normal ou de desenvolvimento), ele exibe um banner de arte ASCII. O banner pode ser desativado definindo `quarkus.banner.enabled=false` em `application.properties` , definindo a propriedade do sistema Java `-Dquarkus.banner.enabled=false` ou definindo a variável de ambiente `QUARKUS_BANNER_ENABLED` como `false` . Além disso, os usuários podem fornecer um banner personalizado colocando o arquivo de banner em `src/main/resources` e configurando `quarkus.banner.path=name-of-file` em `application.properties` .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>By default, when starting the application in dev mode, a gRPC server is started, even if no services are configured.
You can configure the gRPC extension's dev mode behavior using the following properties.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Por padrão, ao iniciar a aplicação no modo de desenvolvimento, um servidor gRPC é iniciado, mesmo que nenhum serviço esteja configurado. Você pode configurar o comportamento do modo de desenvolvimento da extensão gRPC usando as seguintes propriedades.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>By far the easiest way to create a container-image from your Quarkus application is to leverage one of the container-image extensions.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A maneira mais fácil de criar uma container-image a partir da sua aplicação Quarkus é utilizar uma das extensões de imagem de contêiner.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>By injecting a `BuildProducer` of a simple or multi build item class</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Ao injetar um `BuildProducer` de uma classe de item simples ou de construção múltipla</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>By injecting a `List` of a xref:multi-build-items[multi build item] class</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Ao injetar um `List` de uma classe de xref:multi-build-items[item de construção múltipla]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>By injecting a xref:simple-build-items[simple build item]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Ao injetar um xref:simple-build-items[item de construção simples]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>By injecting an `Optional` of a simple build item class</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Ao injetar um `Optional` de uma classe de item de construção simples</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>By placing `@ClientQueryParam` on the interface, we ensure that `my-param` will be added to all requests of the client.
Because we used the `${...}` syntax, the actual value of the parameter will be obtained using the `my.property-value` configuration property.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Ao colocar `@ClientQueryParam` na interface, garantimos que `my-param` será adicionado a todas as requisições do cliente. Como usamos a sintaxe `${...}`, o valor real do parâmetro será obtido usando a propriedade de configuração `my.property-value` .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>By returning a `List` of a multi build item class</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Ao devolver um `List` de uma classe de item de construção múltipla</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>By returning a xref:simple-build-items[simple build item] or xref:multi-build-items[multi build item] instance</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Ao devolver um xref:simple-build-items[item de construção simples] ou uma instância de xref:multi-build-items[item de construção múltipla]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>By the default, this extension will configure the probes to use the HTTP server (which is provided by some extensions like the Quarkus RESTEasy reactive extension). Internally, this probe will also use xref:grpc-service-implementation.adoc#health[the generated gRPC Health services].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Por padrão, esta extensão configurará as sondas (probes) para utilizarem o servidor HTTP (fornecido por algumas extensões, como a extensão Quarkus RESTEasy reactive). Internamente, esta sonda também utilizará  link:grpc-service-implementation.html#health[os serviços gRPC Health gerados].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>By using the `QuarkusTest` runner, you instruct JUnit to start the application before the tests.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Ao utilizar o runner `QuarkusTest`, você informa ao JUnit para iniciar a aplicação antes dos testes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Bytecode Recording</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Gravação de Bytecode</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>CDI Integration</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Integração CDI</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>CDI Integration Guide</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Guia de Integração CDI</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>CDI Reference</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Referência CDI</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>CDI alternatives are only considered during injection and type-safe resolution. For example the default implementation would still receive observer notifications.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>As alternativas CDI só são consideradas durante a injeção e a resolução da tipagem segura. Por exemplo, a implementação padrão continuaria a receber notificações do observador.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>CLI</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>CLI</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Cache your application data</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Armazenar em cache os dados da aplicação</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Call `native-image` with the content of file `native-image.args` as arguments. We also supply an additional argument to limit the process's maximum memory to 4 Gigabytes (this may vary depending on the project being built and the machine building it).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Chamar `native-image` com o conteúdo do arquivo `native-image.args` como argumentos. Também fornecemos um argumento adicional para limitar a memória máxima do processo a 4 Gigabytes (isto pode variar dependendo do projeto que está sendo construído e da máquina que está sendo usada).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Call into the runtime recorder to record the creation of the service.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Chame gravador de tempo de execução para registrar a criação do serviço.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Call the runtime recorder to record the bean interactions.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Chame o gravador de tempo de execução para registrar as interações do bean.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Call the runtime recorder to record the service start invocation.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Chame o gravador de tempo de execução para gravar a invocação do início do serviço.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Calling `classProxy` with a given fully-qualified class name will create a `Class` instance that can be passed into a recorder
method, and at runtime will be substituted with the class whose name was passed in to `classProxy()`.
However, this method should not be needed in most use cases because directly loading deployment/application classes at processing time in build steps is safe.
Therefore, this method is deprecated.
Nonetheless, there are some use cases where this method comes in handy, such as referring to classes that were generated in previous build steps using `GeneratedClassBuildItem`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Chamar `classProxy` com um determinado nome de classe totalmente qualificado criará uma instância de `Class` que pode ser passada para um método de gravador e, no tempo de execução, será substituída pela classe cujo nome foi passado para `classProxy()` . No entanto, esse método não deve ser necessário na maioria dos casos de uso, pois é seguro carregar diretamente as classes de implantação/aplicação no tempo de processamento nas etapas de construção. Portanto, esse método está obsoleto. No entanto, há alguns casos de uso em que esse método é útil, como a referência a classes que foram geradas em etapas de construção anteriores usando `GeneratedClassBuildItem` .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Can I write an extension?</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Posso escrever uma extensão?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Can be executed globally or in a specific extension directory (e.g. `extensions/mailer`).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Pode ser executado globalmente ou num diretório de extensão específico (por exemplo, `extensions/mailer`).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Capabilities</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Capacidades</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Capabilities can be registered in a xref:build-step-processors[Build Step Processors] method that produces a `CapabilityBuildItem`:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>As capacidades podem ser registradas num método xref:build-step-processors[Build Step Processors] que produz um `CapabilityBuildItem`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Capabilities should follow the naming conventions of Java packages; e.g. `io.quarkus.security.jpa`.
Capabilities provided by core extensions should be listed in the `io.quarkus.deployment.Capability` enum and their name should always start with the `io.quarkus` prefix.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>As capacidades devem seguir as convenções de nomenclatura dos pacotes Java; por exemplo, `io.quarkus.security.jpa` . As capacidades fornecidas pelas extensões principais devem ser listados no enum `io.quarkus.deployment.Capability` e seu nome deve sempre começar com o prefixo `io.quarkus` .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>CardPageBuildItem pageBuildItem = new CardPageBuildItem();
pageBuildItem.addBuildTimeData("someKey", getSomeValueObject());
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>CardPageBuildItem pageBuildItem = new CardPageBuildItem();
pageBuildItem.addBuildTimeData("someKey", getSomeValueObject());
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Carrier thread</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Carrier thread</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Case 1: The library uses a metrics library directly</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Caso 1: A biblioteca utiliza diretamente uma biblioteca de métricas</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Case 2: The library provides its own metric API</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Caso 2: A biblioteca fornece a sua própria API métrica</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Case 3: It is necessary to collect metrics within the extension code</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Caso 3: É necessário coletar métricas no código da extensão</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Centralized Log Management</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Gerenciamento centralizado de logs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Certain types of build items are generally always consumed, such as generated classes or resources.
An extension might produce a build item along with a generated class to facilitate the usage
of that build item.  Such a build step would use the `@Weak` annotation on the generated class build item, while normally
producing the other build item.  If the other build item is ultimately consumed by something, then the step would run
and the class would be generated.  If nothing consumes the other build item, the step would not be included in the build
process.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Certos tipos de itens de construção geralmente são sempre consumidos, como classes ou recursos gerados. Uma extensão pode produzir um item de construção junto com uma classe gerada para facilitar o uso desse item de construção. Essa etapa de construção usaria a anotação `@Weak` no item de construção da classe gerada, enquanto produziria normalmente o outro item de construção. Se o outro item de construção for consumido por algo, a etapa será executada e a classe será gerada. Se nada consumir o outro item de construção, a etapa não será incluída no processo de construção.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Changing the configuration file is immediately reflected.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A alteração do arquivo de configuração é imediatamente refletida.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Chat using &lt;a href="https://quarkusio.zulipchat.com" target="_blank"&gt;Zulip&lt;/a&gt; (&lt;code&gt;#dev&lt;/code&gt; stream)</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Bate-papo usando &lt;a href="https://quarkusio.zulipchat.com" target="_blank"&gt;Zulip&lt;/a&gt; (&lt;code&gt;#dev&lt;/code&gt; stream)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Chat using &lt;a href="https://quarkusio.zulipchat.com/#narrow/stream/187038-dev" target="_blank"&gt;Zulip&lt;/a&gt; (&lt;code&gt;#dev&lt;/code&gt; stream)</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Bate-papo usando &lt;a href="https://quarkusio.zulipchat.com/#narrow/stream/187038-dev" target="_blank"&gt;Zulip&lt;/a&gt; (&lt;code&gt;#dev&lt;/code&gt; stream)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Cheap to block</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Barato para bloquear</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Cheap to create</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Barato para criar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Check out our &lt;a href="https://github.com/quarkusio/quarkus" target="_blank"&gt;GitHub&lt;/a&gt; for details on reporting issues and the process for submitting pull requests.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Confira nosso &lt;a href="https://github.com/quarkusio/quarkus" target="_blank"&gt;GitHub&lt;/a&gt; para obter detalhes sobre como relatar problemas e o processo de envio de pull requests.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Check out our &lt;a href="https://github.com/quarkusio/quarkus/discussions"&gt;GitHub Discussions&lt;/a&gt; collaboration area to interact with other Quarkus users and developers.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Confira nossa área de colaboração &lt;a href="https://github.com/quarkusio/quarkus/discussions"&gt;GitHub Discussions&lt;/a&gt; para interagir com outros usuários e desenvolvedores do Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Check the HTTP response status code and content</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Verificar o código de status e o conteúdo da resposta HTTP</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Check the https://grpc.github.io/grpc-java/javadoc/io/grpc/ClientInterceptor.html[ClientInterceptor JavaDoc] to properly implement your interceptor.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Consulte o  link:https://grpc.github.io/grpc-java/javadoc/io/grpc/ClientInterceptor.html[JavaDoc do ClientInterceptor] para implementar corretamente o seu interceptor.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Choose Your Lambda</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Escolha o seu Lambda</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Choosing your build tool</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Escolhendo sua ferramenta de construção</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Class Loading Reference</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Referência de carregamento de classe</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Class Preloading</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Pré-carregamento de classes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Class name of authentication plugin of the client.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Nome da classe do plugin de autenticação do cliente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Class-wide condition for build step with @BuildSteps</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Condição em toda a classe para o passo de construção com @BuildSteps</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Class&lt;?&gt; objects</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Objetos Class&lt;?&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Classes and annotations are the primary source of bean-level metadata.
The initial metadata are read from the _bean archive index_, an immutable https://github.com/wildfly/jandex[Jandex index, window="_blank"] which is built from various sources during xref:cdi-reference.adoc#bean_discovery[bean discovery].
However, extensions can add, remove or transform the metadata at certain stages of the bootstrap.
Moreover, extensions can also register xref:synthetic_beans[synthetic components].
This is an important aspect to realize when integrating CDI components in Quarkus.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>As classes e as anotações são a principal fonte de metadados no nível do bean. Os metadados iniciais são lidos do _índice do arquivo do bean_ , um https://github.com/wildfly/jandex[índice Jandex, window="_blank"] imutável que é criado a partir de várias fontes durante a xref:cdi-reference.adoc#bean_discovery[descoberta de bean] . No entanto, as extensões podem adicionar, remover ou transformar os metadados em determinados estágios do bootstrap. Além disso, as extensões também podem registrar xref:synthetic_beans[componentes sintéticos] . Esse é um aspecto importante a ser percebido ao integrar componentes CDI no Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Classes which contain build steps support the following types of injection:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>As classes que contêm etapas de construção suportam os seguintes tipos de injeção:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Client Interceptors</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Interceptores de clientes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Client Priming</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Preparando o client</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Client Stub Deadlines</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Prazos (Deadlines) para o Stub do Cliente</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Client _priming_ is a technique that allows initializing a client during the snapshotting process, so it's already fully functional during the application runtime.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Client _priming_ é uma técnica que permite inicializar um client durante o processo de _snapshotting,_ para que já esteja totalmente funcional durante o tempo de execução da aplicação.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Client configuration</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Configuração do cliente</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Client configuration example</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de configuração do cliente</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Client lookup timeout (in milliseconds).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Tempo limite de pesquisa do cliente (em milissegundos).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Client operation timeout (in milliseconds).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Tempo limite da operação do cliente (em milissegundos).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Clock</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Relógio</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an
{quickstarts-archive-url}[archive].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Clone o repositório Git: `git clone {quickstarts-clone-url}`, ou baixe um {quickstarts-archive-url}[arquivo].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Clone o repositório Git: `git clone {quickstarts-clone-url}`, ou baixe um {quickstarts-archive-url}[arquivo].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Close the response.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Fechar a resposta.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Cognito</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Cognito</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Cognito JWT</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Cognito JWT</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Collecting Metrics with Micrometer</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Coletando métricas com Micrometer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Collecting Metrics with SmallRye Metrics</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Coletando métricas com o SmallRye Metrics</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Combine both the familiar imperative code and the reactive style when developing applications.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Combine o código imperativo que você já conhece e o estilo reativo ao desenvolver aplicações.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Combine both the familiar imperative code and the reactive style when developing applications.  &lt;a href="/continuum"&gt;Learn more&lt;/a&gt;.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Combine o código imperativo familiar e o estilo reativo ao desenvolver aplicativos.  &lt;a href="/continuum"&gt;Saiba mais&lt;/a&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Comma separated values for configuring ack timeout MultiplierRedeliveryBackoff, min delay, max delay, multiplier.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Valores separados por vírgulas para configurar o tempo limite do ack MultiplierRedeliveryBackoff, min delay, max delay, multiplicador.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Comma separated values for configuring negative ack MultiplierRedeliveryBackoff, min delay, max delay, multiplier.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Valores separados por vírgulas para configurar o ack negativo MultiplierRedeliveryBackoff, min delay, max delay, multiplicador.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Command Line Applications</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Aplicativos de linha de comando</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Command Line Interface</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Interface da linha de comandos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Command Mode Reference</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Referência do modo de comando</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Commands may also be stacked:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os comandos também podem ser empilhados:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Community and Standards</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Comunidade e Padrões</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Compatibility</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Compatibilidade</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Compiling Quarkus application using virtual threads into native executable</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Compilando a aplicação Quarkus utilizando threads virtuais num executável nativo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Compiling a native executable takes a bit longer, as GraalVM performs additional
steps to remove unnecessary codepaths. Use the  `native` profile to compile a
native executable:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A compilação de um executável nativo demora um pouco mais, pois o GraalVM executa etapas adicionais para remover caminhos de código desnecessários. Use o perfil `native` para compilar um executável nativo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Compiling fully static binaries is done by statically linking https://musl.libc.org/[musl] instead of `glibc` and should not be used in production without rigorous testing.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A compilação de binários totalmente estáticos é feita através de um link estático com o link:https://musl.libc.org/[musl] em vez de `glibc` e não deve ser usada em produção sem testes rigorosos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Compiling the application to a native executable</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Compilar a aplicação para um executável nativo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Components</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Componentes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Compress Native Executables with UPX</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Compactar executáveis nativos com UPX</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Compress native images</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Compactar imagens nativas</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Compressing native executables using UPX</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Compactação de executáveis nativos com UPX</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Compression level</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Nível de compactação</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Computing the class list</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Calculando a lista de classes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Concept guides (Explanation)</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Guias conceptuais (Explicação)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Conditional Extension Dependencies</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Dependências de extensão condicional</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Conditional Step Inclusion</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Inclusão Condicional de Etapas</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Config Phases</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Fases de Configuração</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Config file</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Arquivo de configuração</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Configuration</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Configuração</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Configuration Example</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de Configuração</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Configuration Reference</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Referência de configuração</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Configuration Reference Documentation</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Documentação de Referência de Configuração</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Configuration in Quarkus is based on https://smallrye.io/smallrye-config/Main/[SmallRye Config]. All features provided
by https://smallrye.io/smallrye-config/Main/[SmallRye Config] are also available in Quarkus.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A configuração no Quarkus é baseada no https://smallrye.io/smallrye-config/Main/[SmallRye Config]. Todos os recursos fornecidos pelo https://smallrye.io/smallrye-config/Main/[SmallRye Config] também estão disponíveis no Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Configuration mappings are strictly bound by configuration phase, and attempting to access a configuration mapping from
outside its corresponding phase will result in an error. They dictate when its contained keys are read from the
configuration, and when they are available to applications. The phases defined by
`io.quarkus.runtime.annotations.ConfigPhase` are as follows:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os mapeamentos de configuração são estritamente vinculados à fase de configuração, e a tentativa de acessar um mapeamento de configuração fora da fase correspondente resultará em um erro. Eles determinam quando as chaves contidas são lidas da configuração e quando estão disponíveis para as aplicações. As fases definidas pelo `io.quarkus.runtime.annotations.ConfigPhase` são as seguintes:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Configuration objects with phase `RUNTIME` or `BUILD_AND_RUNTIME_FIXED` can be injected into recorders via constructor
injection. Just create a constructor that takes the configuration objects the recorder needs. If the recorder has multiple
constructors you can annotate the one you want Quarkus to use with `@Inject`. If the recorder wants to inject runtime config
but is also used at static init time then it needs to inject a `RuntimeValue&lt;ConfigObject&gt;`, this value will only be set
when the runtime methods are being invoked.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os objetos de configuração com a fase `RUNTIME` ou `BUILD_AND_RUNTIME_FIXED` podem ser injetados nos gravadores por meio da injeção de construtor. Basta criar um construtor que receba os objetos de configuração de que o gravador precisa. Se o gravador tiver vários construtores, o usuário poderá anotar aquele que deseja que o Quarkus use com `@Inject` . Se o gravador quiser injetar a configuração de tempo de execução, mas também for usado no momento da inicialização estática, será necessário injetar um `RuntimeValue&lt;ConfigObject&gt;`. Esse valor só será definido quando os métodos de tempo de execução estiverem sendo invocados.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Configure storing of Quarkus transaction logs in a database</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Configurar o armazenamento dos registos de transacções do Quarkus numa base de dados</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Configure the Redis backend</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Configurar o Redis para uso no backend do cache</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Configure the Redis key</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Configurar a chave Redis</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Configure the default `datacontenttype` attribute of the outgoing Cloud Event. Requires `cloud-events` to be set to `true`. This value is used if the message does not configure the `datacontenttype` attribute itself

Type: _string_</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Configura o atributo 'datacontenttype' padrão do evento de nuvem de saída. Requer que 'cloud-events' seja definido como 'true'. Esse valor será usado se a mensagem não configurar o próprio atributo 'datacontenttype'

Tipo: _string_</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Configure the default `dataschema` attribute of the outgoing Cloud Event. Requires `cloud-events` to be set to `true`. This value is used if the message does not configure the `dataschema` attribute itself

Type: _string_</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Configura o atributo 'dataschema' padrão do evento de nuvem de saída. Requer que 'cloud-events' seja definido como 'true'. Esse valor será usado se a mensagem não configurar o próprio atributo 'dataschema'

Tipo: _string_</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Configure the default `source` attribute of the outgoing Cloud Event. Requires `cloud-events` to be set to `true`. This value is used if the message does not configure the `source` attribute itself

Type: _string_</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Configure o atributo 'source' padrão do evento de nuvem de saída. Requer que 'cloud-events' seja definido como 'true'. Esse valor será usado se a mensagem não configurar o próprio atributo 'source'

Tipo: _string_</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Configure the default `subject` attribute of the outgoing Cloud Event. Requires `cloud-events` to be set to `true`. This value is used if the message does not configure the `subject` attribute itself

Type: _string_</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Configure o atributo 'subject' padrão do evento de nuvem de saída. Requer que 'cloud-events' seja definido como 'true'. Esse valor será usado se a mensagem não configurar o próprio atributo 'subject'

Tipo: _string_</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Configure the default `type` attribute of the outgoing Cloud Event. Requires `cloud-events` to be set to `true`. This value is used if the message does not configure the `type` attribute itself

Type: _string_</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Configure o atributo 'type' padrão do evento de nuvem de saída. Requer que 'cloud-events' seja definido como 'true'. Esse valor será usado se a mensagem não configurar o próprio atributo 'type'

Tipo: _string_</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Configure the runtime environment. Set `GRAALVM_HOME` environment variable to the GraalVM installation directory, for example:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Configurar o runtime environment. Defina a variável de ambiente `GRAALVM_HOME` para o diretório de instalação do GraalVM, por exemplo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Configuring GraalVM</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Configurando a GraalVM</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Configuring Kafka topics</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Configurando os tópicos no Kafka</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Configuring Logging</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Configurando o registro em log</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Configuring Well-Known OpenID Connect (OIDC) Providers</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Configurando provedores conhecidos do OpenID Connect (OIDC)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Configuring Your Application</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Configurar a sua aplicação</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Configuring for production</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Configuração para produção</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Configuring the Native Executable</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Configuração do executável nativo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Configuring the Pulsar broker</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Configurar o broker Pulsar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Configuring the UPX compression</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Configuração da compactação UPX</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Configuring the banner</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Configurando o banner</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Configuring the cluster</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Configurando o cluster</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Configuring the image</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Configurando a imagem</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Configuring the transaction timeout</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Configurando o tempo limite da transação</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Configuring transaction node name identifier</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Configurando o identificador de nome do nó de transação</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Configuring your datasources</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Configurando suas fontes de dados</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Configuring your project</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Configurando seu projeto</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Configuring your project to use the Quarkus Kubernetes extension</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Configurando o seu projeto para utilizar a extensão Kubernetes no Quarkus</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Connect with us on social media</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Conecte-se conosco nas redes sociais</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Cons</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Contras</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Constructor parameter injection</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Injeção de parâmetros do construtor</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Consume Configuration from Consul</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Consumindo configuração do Consul</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Consume Configuration from Google Cloud Secret Manager</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Consumindo configuração do Google Cloud Secret Manager</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Consume the `BeanContainerBuildItem` to order this build step to run after the CDI bean container has been created.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Consume o `BeanContainerBuildItem` para ordenar que este passo de construção seja executado depois que o contêiner de beans CDI tenha sido criado.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Consume the `TestBeanBuildItem`s produced from the scanning build step.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Consome o `TestBeanBuildItem` produzido a partir da etapa de construção de varredura.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Consumer name</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Nome do consumidor</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Consumer pattern: An extension declares a `MetricsFactoryConsumerBuildItem` and uses that to provide a bytecode recorder to the metrics extension. When the metrics extension has initialized, it will iterate over registered consumers to initialize them with a `MetricsFactory`. This factory can be used to declare API-agnostic metrics, which can be a good fit for extensions that provide an instrumentable object for gathering statistics (e.g. Hibernate's `Statistics` class).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Padrão Consumidor: Uma extensão declara um `MetricsFactoryConsumerBuildItem` e usa-o para fornecer um gravador de bytecode para a extensão de métricas. Quando a extensão de métricas for inicializada, ela irá iterar sobre os consumidores registrados para inicializá-los com um `MetricsFactory`. Essa fábrica pode ser usada para declarar métricas agnósticas à API, o que pode ser uma boa opção para extensões que fornecem um objeto instrumentável para coletar estatísticas (por exemplo, a classe `Statistics` do Hibernate).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Consumer should take action when it receives a message that can not be decrypted. +
* **FAIL**: this is the default option to fail messages until crypto succeeds. +
* **DISCARD**:silently acknowledge and not deliver message to an application. +
* **CONSUME**: deliver encrypted messages to applications. It is the application's responsibility to decrypt the message.

The decompression of message fails.

If messages contain batch messages, a client is not be able to retrieve individual messages in batch.

Delivered encrypted message contains `EncryptionContext` which contains encryption and compression information in it using which application can decrypt consumed message payload.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O consumidor deve agir quando receber uma mensagem que não pode ser descriptografada. +
* **FAIL**: esta é a opção padrão para falhar mensagens até que a criptografia seja bem-sucedida. +
* **DESCARTAR**:reconhecer silenciosamente e não entregar mensagem a um aplicativo. +
* **CONSUME**: entregar mensagens criptografadas para aplicativos. É responsabilidade do aplicativo descriptografar a mensagem.

A descompactação da mensagem falha.

Se as mensagens contiverem mensagens em lote, um cliente não poderá recuperar mensagens individuais em lote.

A mensagem criptografada entregue contém 'EncryptionContext' que contém informações de criptografia e compactação usando qual aplicativo pode descriptografar a carga útil da mensagem consumida.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Consumers of `BeanDiscoveryFinishedBuildItem` can easily inspect all class-based beans, observers and injection points registered in the application.
However, synthetic beans and observers are _not included_ because this build item is produced _before_ the synthetic components are registered.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os consumidores do `BeanDiscoveryFinishedBuildItem` podem inspecionar facilmente todos os beans, observadores e pontos de injeção baseados em classe registrados na aplicação. No entanto, os beans e observadores sintéticos _não são incluídos_ porque esse item de construção é produzido _antes_ que os componentes sintéticos sejam registrados.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Consumers of `SynthesisFinishedBuildItem` can easily inspect all beans, observers and injection points registered in the application. Synthetic beans and observers are included because this build item is produced _after_ the synthetic components are registered.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os consumidores de `SynthesisFinishedBuildItem` podem inspecionar facilmente todos os beans, observadores e pontos de injeção registrados na aplicação. Os beans e observadores sintéticos estão incluídos porque este item de construção é produzido _depois_ dos componentes sintéticos serem registrados.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Consuming GraphQL Services</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Consumindo serviços GraphQL</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Consuming Kubernetes ConfigMaps</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Consumindo o Kubernetes ConfigMaps</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Consuming SSE events is possible simply by declaring the result type as a `io.smallrye.mutiny.Multi`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O consumo de eventos SSE é possível simplesmente declarando o tipo de resultado como um `io.smallrye.mutiny.Multi` .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Consuming a gRPC Service</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Consumindo um serviço gRPC</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Consuming a gRPC service</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Consumindo um serviço gRPC</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Consuming gRPC Services</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Consumindo serviços gRPC</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Consuming gRPC services requires the gRPC classes to be generated.
Place your `proto` files in `src/main/proto` and run `mvn compile`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Consumir serviços gRPC requer que as classes gRPC sejam geradas. Coloque seus arquivos `proto` em `src/main/proto` e execute `mvn compile` .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Consuming values</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Consumindo valores</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Container First</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Contêiner em primeiro lugar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Containerize native applications using virtual threads</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Conteinerização de aplicações nativas usando threads virtuais</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Contains an `AnnotationStore` that keeps information about all `AnnotationTarget` annotations after application of annotation transformers</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Contém um `AnnotationStore` que mantém informações sobre todas as anotações `AnnotationTarget` após a aplicação de transformadores de anotações</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Context Propagation</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Propagação de contexto</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>ContextRegistrar</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>ContextRegistrar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Contexts and Dependency Injection</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Contextos e Injeção de Dependência</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Continuous Testing</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Testes contínuos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Continuous testing of your extension</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Testes contínuos da sua extensão</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Contributing</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Contribuindo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Contributing to Dev UI</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Contribuindo para a interface do usuário do desenvolvedor</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Contributing to the Quarkus.io website</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Contribuindo para o website Quarkus.io</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Contributions are welcome, please submit pull requests for the `develop` branch.
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Contribuições são bem-vindas, por favor, envie pull-requests para a branch `develop`.
</seg>
      </tuv>
    </tu>
  <tu>
      <tuv xml:lang="en">
        <seg>Copy the build.gradle, gradle.properties and settings.gradle into the above-generated Maven archetype project, to follow along with this guide.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Copie o build.gradle, gradle.properties e settings.gradle para o projeto de arquétipo Maven gerado acima, para seguir este guia.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Core</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Núcleo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Create a `src/main/java/org/acme/rest/client/Extension.java` file and set the following content:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Crie um arquivo `src/main/java/org/acme/rest/client/Extension.java` e defina o seguinte conteúdo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Create a microservice using your favorite Spring API.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Crie um microsserviço usando sua API favorita do Spring.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Create a native executable using:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Criar um executável nativo utilizando:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Create a new class `src/main/java/org/acme/spring/boot/properties/GreetingProperties.java` with a message field:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Crie uma nova classe `src/main/java/org/acme/spring/boot/properties/GreetingProperties.java` com um atributo `text`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Create a portable Java API to write serverless functions deployable to AWS Lambda, Azure Functions, Knative, and more.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Crie uma API Java portátil para escrever funções sem servidor implantáveis no AWS Lambda, Azure Functions, Knative e muito mais.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Create a separate build step that consumes a `MetricsFactory`, and use the `MetricsFactory::metricsSystemSupported()` method within the bytecode recorder to initialize required resources if the desired metrics API is supported (e.g. "smallrye-metrics" or "micrometer").</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Crie uma etapa de construção separada que consuma um `MetricsFactory` e utilize o método `MetricsFactory::metricsSystemSupported()` no gravador de bytecode para inicializar os recursos necessários se a API de métricas pretendida for suportada (por exemplo, "smallrye-metrics" ou "micrometer").</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Create a working branch for your project by using your version control system.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Crie uma `branch` para o seu projeto utilizando o seu sistema de controle de versão.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Create an ECR repository in the users AWS account</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Criar um repositório ECR na conta AWS do usuário</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Create an Execution Role</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Criar uma função de execução</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Create and debug applications in the same environment where applications run. Live coding in development mode where any changes made locally will be immediately visible in a clustered Kubernetes environment. &lt;a href="https://developers.redhat.com/blog/2021/02/11/enhancing-the-development-loop-with-quarkus-remote-development"&gt;Read this blog post for greater insight.&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Crie e depure aplicativos no mesmo ambiente em que as aplicações são executadas. Codificação ao vivo no modo de desenvolvimento, onde quaisquer alterações feitas localmente serão imediatamente visíveis em um ambiente Kubernetes em cluster. &lt;a href="https://developers.redhat.com/blog/2021/02/11/enhancing-the-development-loop-with-quarkus-remote-development"&gt;Leia esta postagem do blog para obter mais informações.&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Create inside the `producer` project `src/main/resources/META-INF/resources/quotes.html` file, with the following content:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Criar no projeto `producer` o ficheiro `src/main/resources/META-INF/resources/quotes.html`, com o seguinte conteúdo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Create new Quarkus Core extension modules using Maven</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Criar novos módulos de extensão do Quarkus Core utilizando o Maven</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Create projects, manage extensions, and execute essential build and dev commands.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Crie projetos, gerencie extensões e execute comandos essenciais de compilação e desenvolvimento.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Create the AWS lambda function with the AWS CLI tool</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Criar a função lambda da AWS com a ferramenta CLI do AWS</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Create the Jakarta REST resource</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Crie o recurso Jakarta REST</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Create the Quarkus AWS Lambda Maven project using our Maven Archetype.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Crie o projeto Quarkus AWS Lambda Maven utilizando o nosso Arquétipo Maven.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Create the Quarkus AWS Lambda maven project using our Maven Archetype.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Crie o projeto maven do Quarkus AWS Lambda utilizando o nosso Arquétipo Maven.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Create the `src/main/java/org/acme/HelloService.java` file with the following content:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Crie o arquivo `src/main/java/org/acme/HelloService.java` com o seguinte conteúdo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Create the `src/main/java/org/acme/hibernate/orm/panache/FruitResource.java` file with the following content:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Crie o arquivo `src/main/java/org/acme/hibernate/orm/panache/FruitResource.java` com o seguinte conteúdo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Create the `src/main/java/org/acme/redis/IncrementResource.java` file, with the following content:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Criar o arquivo `src/main/java/org/acme/redis/IncrementResource.java`, com o seguinte conteúdo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Create the `src/main/java/org/acme/redis/IncrementService.java` file, with the following content:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Criar o arquivo `src/main/java/org/acme/redis/IncrementService.java`, com o seguinte conteúdo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Create the `src/main/java/org/acme/rest/client/ExtensionsResource.java` file with the following content:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Crie o arquivo `src/main/java/org/acme/rest/client/ExtensionsResource.java` com o seguinte conteúdo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Create the `src/test/java/org/acme/redis/IncrementResourceTest.java` file with the following content:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Crie o arquivo `src/test/java/org/acme/redis/IncrementoResourceTest.java` com o seguinte conteúdo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Create the configuration</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Crie a configuração</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Create the function</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Criar a função</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Create the interface</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Crie a interface</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Create your Alexa handler, as normal, by sub-classing the abstract `com.amazon.ask.SkillStreamHandler`, and add your request handler implementation.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Crie o seu manipulador Alexa, como habitualmente, sub-classificando o abstrato `com.amazon.ask.SkillStreamHandler`, e adicione a implementação do seu manipulador de pedidos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Create your health check following the xref:smallrye-health.adoc[SmallRye Health] guide. We advise providing only
readiness check for an extension (liveness check is designed to express the fact that an application is up and needs to be lightweight).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Crie sua verificação de integridade seguindo o guia xref:smallrye-health.adoc[SmallRye Health]. Recomendamos que você forneça apenas uma verificação de prontidão para uma extensão (a verificação de vivacidade foi criada para expressar o fato de que um aplicativo está ativo e precisa ser leve).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Creates four new Maven modules:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Cria quatro novos módulos Maven:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Creating Your First Application</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Criando sua primeira aplicação</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Creating a Jakarta REST endpoint</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Criando um endpoint REST em Jakarta</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Creating a Linux executable without GraalVM installed</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Criando um executável Linux sem o GraalVM instalado</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Creating a Non-CDI Service</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Criando um Serviço Não CDI</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Creating a container</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Criando um contêiner</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Creating a new increment</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Criando um novo incremento</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Creating the Increment POJO</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Criando o POJO Incremento</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Creating the Increment Resource</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Criando o recurso de incremento `IncrementoResource`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Creating the Increment Service</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Criando o Serviço de Incremento `IncrementoService`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Creating the Maven Deployment Project</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Criando o Maven Deployment Project</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Creating the Maven Project</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Criando o projeto Maven</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Creating the Maven project</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Criar o projeto Maven</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Creating the test class</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Criando a classe de teste</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Credentials Provider</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Provedor de credenciais</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Cross Site Request Forgery (CSRF) prevention</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Prevenção de falsificação de solicitação entre sites (CSRF)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Custom Lambda</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Lambda personalizado</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Custom Security Integration</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Integração de segurança personalizada</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Custom `bootstrap` script</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Script personalizado `bootstrap`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Custom exception handling</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Tratamento personalizado de excepções</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Custom headers support</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Suporte para cabeçalhos personalizados</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Customize Quarkus' security layer behavior.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Personalize o comportamento da camada de segurança do Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Customizing JSON handling from an extension</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Personalizando tratamento JSON a partir de uma extensão</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Customizing JSON-B</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Personalizando JSON-B</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Customizing Jackson</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Personalizando Jackson</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Customizing the ObjectMapper in REST Client Reactive Jackson</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Personalizando o ObjectMapper no Cliente REST Reativo Jackson</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Customizing the request</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Personalização da requisição</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>DSAPublicKey Serialization Error</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Erro de Serialização de DSAPublicKey</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>DSAPublicKeyObjectSubstitution Example</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de DSAPublicKeyObjectSubstitution</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Data</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Dados</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Database Dev Services</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Dev Services de banco de dados</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Dead letter policy for consumers.

By default, some messages are probably redelivered many times, even to the extent that it never stops.

By using the dead letter mechanism, messages have the max redelivery count. **When exceeding the maximum number of redeliveries, messages are sent to the Dead Letter Topic and acknowledged automatically**.

You can enable the dead letter mechanism by setting `deadLetterPolicy`.

When specifying the dead letter policy while not specifying `ackTimeoutMillis`, you can set the ack timeout to 30000 millisecond.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Política de dead letter para os consumidores.

Por padrão, algumas mensagens provavelmente são reentregues muitas vezes, até mesmo na medida em que nunca param.

Usando o mecanismo de dead letter, as mensagens têm a contagem máxima de reentrega. **Ao exceder o número máximo de reentregas, as mensagens são enviadas para o Tópico de Dead Letter e reconhecidas automaticamente**.

Você pode ativar o mecanismo de letra morta definindo 'deadLetterPolicy'.

Ao especificar a política de dead letter enquanto não especifica 'ackTimeoutMillis', você pode definir o tempo limite de ack para 30000 milissegundos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Debugging native executable</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Debugando um executável nativo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>December 6, 2019</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>6 de dezembro de 2019</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Declarative approach</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Abordagem declarativa</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Declare a method that gives us a `TemplateInstance` for `templates/ItemResource/item.html` and declare its `Item item` parameter so we can validate the template.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Declare um método que nos dê um `TemplateInstance` para `templates/ItemResource/item.html` e declare o seu parâmetro `Item item` para podermos validar o modelo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Declare one `public static native TemplateInstance method();` per template file for your resource.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Declare um `public static native TemplateInstance method();` por arquivo modelo para o seu recurso.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Default</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Padrão</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Default beans</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Beans padrões</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Default delay for reconsume failure-strategy, in seconds</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Atraso padrão para estratégia de falha de reconsumo, em segundos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Default header factory</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Fábrica de cabeçalhos padrão</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Default values</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Valores padrão</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Define a `BuildStep` that produces a `MetricsFactoryConsumerBuildItem` that uses a `RUNTIME_INIT` or `STATIC_INIT` Recorder to define a `MetricsFactory` consumer. For example, the following creates a `MetricsFactoryConsumerBuildItem` if and only if metrics are enabled both for Agroal generally, and for a datasource specifically:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Defina um `BuildStep` que produz um `MetricsFactoryConsumerBuildItem` que usa um Gravador `RUNTIME_INIT` ou `STATIC_INIT` para definir um consumidor `MetricsFactory`. Por exemplo, o seguinte cria um `MetricsFactoryConsumerBuildItem` se e apenas se as métricas estiverem ativadas para o Agroal em geral e para uma fonte de dados especificamente:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Define the latest version of the extension in your POM file.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Defina a versão mais recente da extensão no seu arquivo POM.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Define this property in your `pom.xml`: `&lt;m2e.apt.activation&gt;jdt_apt&lt;/m2e.apt.activation&gt;`, although if you rely on `io.quarkus:quarkus-build-parent` you will get it for free.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Defina esta propriedade em `pom.xml`: `&lt;m2e.apt.activation&gt;jdt_apt&lt;/m2e.apt.activation&gt;`, no entando se você recorrer a `io.quarkus:quarkus-build-parent` a obterá gratuitamente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Delay to wait before redelivering messages that failed to be processed. +
When an application uses `Consumer#negativeAcknowledge(Message)`, failed messages are redelivered after a fixed timeout.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Atraso para aguardar antes de entregar novamente as mensagens que não puderam ser processadas. +
Quando um aplicativo usa 'Consumer#negativeAcknowledge(Message)', as mensagens com falha são entregues novamente após um tempo limite fixo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Delete a key (and its associated value)</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exclui uma chave (e o respetivo valor associado)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Delete the `first` increment.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Excluir o incremento `first`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Deleting a key</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Excluindo uma chave</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Depend on a `BeanArchiveIndexBuildItem` to have the build step be run after the deployment has been indexed.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Depende de um `BeanArchiveIndexBuildItem` para que o passo de construção seja executado depois da implantação ter sido indexada.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Dependency injection in Quarkus is based on ArC which is a CDI-based dependency injection solution tailored for Quarkus' architecture.
If you're new to CDI then we recommend you to read the xref:cdi.adoc[Introduction to CDI] guide.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A injeção de dependência no Quarkus é baseada no ArC, que é uma solução de injeção de dependência baseada em CDI adaptada à arquitetura do Quarkus.
Se você não conhece CDI, recomendamos que leia o guia xref:cdi.adoc[Introdução ao CDI] .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Depending on what the final desired output of the CI/CD pipeline is, the generated binary might then be used to create a container image.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Dependendo do resultado final desejado do pipeline CI/CD, o binário gerado pode então ser utilizado para criar uma imagem de contêiner.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Deploy to AWS</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Deploy na AWS</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Deploy to AWS Lambda Custom (native) Runtime</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Implantar no runtime personalizado (nativo) do AWS Lambda</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Deploy to AWS Lambda Java Runtime</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Implantar no runtime Java da AWS Lambda</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Deploy to AWS Lambda using a Container Image</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Implantar no AWS Lambda usando uma imagem de contêiner</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Deploy your Quarkus applications on Heroku.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Implante seus aplicativos Quarkus na Heroku.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Deploying Quarkus Applications on Kubernetes</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Implantando Aplicações Quarkus no Kubernetes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Deploying Quarkus Applications on OpenShift</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Implantando Aplicações Quarkus no OpenShift</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Deploying a container image lambda</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Implementar uma imagem de contêiner lambda</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Deploying a native executable</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Deploy de um executável nativo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Deploying to Google Cloud</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Implantação no Google Cloud</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Deploying to Heroku</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Implantando na Heroku</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Deploying to Microsoft Azure Cloud</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Implantando na nuvem do Microsoft Azure</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Deploying your gRPC Service in Kubernetes</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Implantando seu serviço gRPC no Kubernetes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Description</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Descrição</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Detect pinned thread in tests</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Detectar thread fixada em testes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Determine which of these beans also has the `IConfigConsumer` interface.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Determina qual destes beans também tem a interface `IConfigConsumer`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Dev Mode</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Modo de desenvolvimento</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Dev Mode Differences</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Diferenças no modo de desenvolvimento</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Dev Services</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Serviços de Desenvolvimento</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Dev Services for AMQP</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Dev Services para AMQP</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Dev Services for AMQP is automatically enabled unless:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Dev Services para AMQP é  ativado automaticamente, a menos que:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Dev Services for AMQP starts the container with the `quarkus-dev-service-amqp` label which is used to identify the container.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Dev Services para AMQP inicia o container com a etiqueta `quarkus-dev-service-amqp` que é utilizada para identificar o container.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Dev Services for Kafka</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Dev Services para o Kafka</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Dev Services for Kafka is automatically enabled unless:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os Dev Services para o Kafka é ativado automaticamente, a menos que:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Dev Services for Kafka starts the container with the `quarkus-dev-service-kafka` label which is used to identify the container.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Dev Services para o Kafka inicia o broker com a etiqueta `quarkus-dev-service-kafka` que é utilizada para identificar o container.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Dev Services for Kubernetes</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Dev Services para Kubernetes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Dev Services for Kubernetes is automatically enabled unless:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Dev Services para Kubernetes é ativado automaticamente, a menos que:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Dev Services for Kubernetes starts the container with the `quarkus-dev-service-kubernetes` label which is used to identify the container.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Dev Services para Kubernetes inicia o container com a etiqueta `quarkus-dev-service-kubernetes` que é utilizada para identificar o container.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Dev Services for Pulsar</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Dev Services para Pulsar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Dev Services for Pulsar is automatically enabled unless:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os Dev services para Pulsar são ativados automaticamente, a menos que:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Dev Services for Pulsar starts the container with the `quarkus-dev-service-pulsar` label which is used to identify the container.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Dev Services para Pulsar inicia o contêiner com a etiqueta `quarkus-dev-service-pulsar` que é utilizada para identificar o contêiner.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Dev Services for Pulsar supports the https://hub.docker.com/r/apachepulsar/pulsar[official Apache Pulsar image].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Dev Services para Pulsar suporta a  link:https://hub.docker.com/r/apachepulsar/pulsar[imagem oficial do Apache Pulsar].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Dev UI</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Interface do usuário do desenvolvedor</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Developer Joy</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Alegria em desenvolver</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Developers are critical to the success of almost every organization and they need the tools to build cloud-native applications quickly and efficiently. Quarkus provides a frictionless development experience through a combination of tools, libraries, extensions, and more. Quarkus makes developers more efficient with tools to improve the inner loop development cycle while in dev mode.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os desenvolvedores são fundamentais para o sucesso de quase todas as organizações e precisam das ferramentas para criar aplicativos nativos da nuvem de forma rápida e eficiente. O Quarkus fornece uma experiência de desenvolvimento sem atrito por meio de uma combinação de ferramentas, bibliotecas, extensões e muito mais. O Quarkus torna os desenvolvedores mais eficientes com ferramentas para melhorar o ciclo de desenvolvimento de loop interno enquanto estiver no modo de desenvolvimento.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Developing REST Services with RESTEasy Classic</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Desenvolvimento de serviços REST com o RESTEasy Classic</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Development Mode</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Modo de desenvolvimento</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Differences between virtual threads and platform threads</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Diferenças entre threads virtuais e threads de plataforma</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Differences with vanilla Jakarta REST</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Diferenças em relação ao Jakarta REST puro</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Different gRPC implementations / types</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Diferentes implementações / tipos de gRPC</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Disable preloading</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Desativar o pré-carregamento</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Disabling Hostname Verification</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Desabilitando a Verificação do Nome do Host</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Disabling metrics collection</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Desativar a coleta de métricas</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Discover Maven goals</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Descubra os objetivos do Maven</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Discover how to create your first Quarkus application.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Descubra como criar sua primeira aplicação Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Discover how to develop highly scalable REST services with JAX-RS and RESTEasy Reactive.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Descubra como desenvolver serviços REST altamente escaláveis com JAX-RS e RESTEasy Reactive.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Discover how you can streamline the release process of your Quarkus applications with JReleaser.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Descubra como você pode agilizar o processo de release de suas aplicações Quarkus com o JReleaser.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Discuss the development of Quarkus with the team in the &lt;a href="mailto:quarkus-dev+subscribe@googlegroups.com"&gt;development mailing list &lt;/a&gt; or by &lt;a href="https://quarkusio.zulipchat.com/"&gt;Zulip Chat&lt;/a&gt;.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Discuta o desenvolvimento do Quarkus com a equipe na &lt;a href="mailto:quarkus-dev+subscribe@googlegroups.com"&gt;lista de discussão de desenvolvimento &lt;/a&gt; ou pelo &lt;a href="https://quarkusio.zulipchat.com/"&gt;Zulip Chat&lt;/a&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Discussion about Quarkus</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Discussão sobre o Quarkus</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Discussions and Collaboration</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Discussões e Colaboração</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Distroless image support is experimental.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O suporte de imagens sem distribuição é experimental.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Distroless images should not be used in production without rigorous testing.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>As imagens sem distribuição não devem ser utilizadas em produção sem um teste rigoroso.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Diátaxis documentation framework</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Estrutura de documentação da Diátaxis</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Do not change the handler switch.  This must be hardcoded to `io.quarkus.amazon.lambda.runtime.QuarkusStreamHandler::handleRequest`.  This
handler bootstraps Quarkus and wraps your actual handler so that injection can be performed.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Não altere a chave do manipulador. Isso deve ser codificado para `io.quarkus.amazon.lambda.runtime.QuarkusStreamHandler::handleRequest`. Esse manipulador inicializa o Quarkus e envolve o seu manipulador real para que a injeção possa ser executada.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Do not use this feature to implement an RPC timeout.
To implement an RPC timeout, either use Mutiny `call.ifNoItem().after(...)` or Fault Tolerance `@Timeout`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Não utilize esse recurso para implementar um tempo limite (timeout) de RPC. Para implementar um timeout de RPC, use Mutiny `call.ifNoItem().after(…​)` ou Fault Tolerance `@Timeout` .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Do these results show that Quarkus is quick? Well kinda, they hint at it, but there are still issues with the methodology that need resolving.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Do these results show that Quarkus is quick? Well kinda, they hint at it, but there are still issues with the methodology that need resolving.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Docker and Docker Compose or xref:podman.adoc[Podman], and Docker Compose</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Docker e Docker Compose ou xref:podman.adoc[Podman] e Docker Compose</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Documentation</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Documentação</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Does it do 2 Phase Commit and slow down my app?</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Fazer 2 Phase Commit e torna a minha aplicação mais lenta?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Does it work everywhere I want to?</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Funciona em todos os lugares que eu quiser?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Don't forget to make sure the bean state guarantees the visibility, e.g. via the `volatile` keyword.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Não se esqueça de se certificar de que o estado do bean garante a visibilidade, por exemplo, através da palavra-chave `volatile`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Download an {quickstarts-archive-url}[archive] or clone the git repository:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Baixe o {quickstarts-archive-url}[arquivo] ou clone o repositório git:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Download the appropriate archive from &lt;https://github.com/graalvm/mandrel/releases&gt; or &lt;https://github.com/graalvm/graalvm-ce-builds/releases&gt;, and unpack it like you would any other JDK.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Download do arquivo apropriado de  https://github.com/graalvm/mandrel/releases  ou  https://github.com/graalvm/graalvm-ce-builds/releases  e descompacte-o como faria com qualquer outro JDK.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Duration of waiting for a connection to a broker to be established.If the duration passes without a response from a broker, the connection attempt is dropped.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Duração da espera para que uma conexão com um broker seja estabelecida. Se a duração passar sem uma resposta de um broker, a tentativa de conexão será descartada.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>During the project creation, the `src/main/java/org/acme/GreetingResource.java` file has been created with the following content:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Durante a criação do projeto, o arquivo `src/main/java/org/acme/GreetingResource.java` foi criado com o seguinte conteúdo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>During the startup and readiness health check, the connector connects to the broker and retrieves the list of topics. This attribute specifies the maximum duration (in ms) for the retrieval. If exceeded, the channel is considered not-ready.

Type: _long_</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Durante a verificação de integridade de inicialização e preparação, o conector se conecta ao agente e recupera a lista de tópicos. Esse atributo especifica a duração máxima (em ms) para a recuperação. Se excedido, o canal é considerado não pronto.

Tipo: _long_</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Each `Map` entry represents exactly one query parameter</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Cada entrada `Map` representa exatamente um parâmetro de consulta</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Each configuration property, requires a Javadoc explaining its purpose.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Cada propriedade de configuração requer um Javadoc que explique o seu objetivo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Easy Quarkus-based scripting with jbang.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Script fácil baseado em Quarkus com jbang.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Ecosystem integration</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Integração do ecossistema</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Edit the `GreetingResource` class to inject the `GreetingService` and create a new endpoint using it:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Edite a classe `GreetingResource` para injetar o `GreetingService` e crie um novo endpoint utilizando-o:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Edit the `pom.xml` file to add the following dependency:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Edite o arquivo `pom.xml` para adicionar a seguinte dependência:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Either of these commands will compile and create a native executable image.  It also generates a zip file `target/function.zip`.
This zip file contains your native executable image renamed to `bootstrap`.  This is a requirement of the AWS Lambda
Custom (Provided) Runtime.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Qualquer um desses comandos compilará e criará uma imagem executável nativa. Ele também gera um arquivo zip `target/function.zip`. Esse arquivo zip contém sua imagem executável nativa renomeada para `bootstrap`. Esse é um requisito do runtime personalizado (fornecido) do AWS Lambda.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Elasticsearch Clients</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Clientes Elasticsearch</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Elasticsearch Dev Services</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Dev Services Elasticsearch</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Empty build items</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Itens de construção vazios</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Empty build items are final (usually empty) classes which extend `io.quarkus.builder.item.EmptyBuildItem`.
They represent build items that don't actually carry any data, and allow such items to be produced and consumed
without having to instantiate empty classes.  They cannot themselves be instantiated.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os itens de construção vazios são classes finais (geralmente vazias) que estendem `io.quarkus.builder.item.EmptyBuildItem`. Eles representam itens de construção que, na verdade, não contêm dados e permitem que esses itens sejam produzidos e consumidos sem a necessidade de instanciar classes vazias. Eles não podem ser instanciados.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Empty build items can represent "barriers" which can impose ordering between steps.  They can also be used in
the same way that popular build systems use "pseudo-targets", which is to say that the build item can represent a
conceptual goal that does not have a concrete representation.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os itens de construção vazios podem representar "barreiras" que podem impor a ordem entre as etapas. Eles também podem ser usados da mesma forma que os sistemas de construção populares usam "pseudo-alvos", ou seja, o item de construção pode representar um objetivo conceitual que não tem uma representação concreta.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Enable Basic authentication</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Ativar a autenticação básica</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Enable batching of messages.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Habilite o envio em lote de mensagens.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Enable chunking of messages.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Habilite o fragmento de mensagens.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Enable optimistic locking</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Ativar o bloqueio otimista (`Optimistic locking`)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Enable xref:security-basic-authentication.adoc[Basic authentication] for your Quarkus project and allow users to authenticate with a username and password.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Ative link:security-basic-authentication.html[a autenticação básica] para o seu projeto Quarkus e permita que os usuários se autentiquem com um username e um password.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Enables (default) or disables the Cloud Event support. If enabled on an _incoming_ channel, the connector analyzes the incoming records and try to create Cloud Event metadata. If enabled on an _outgoing_, the connector sends the outgoing messages as Cloud Event if the message includes Cloud Event Metadata.

Type: _boolean_</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Habilita (padrão) ou desabilita o suporte a Cloud Event. Se habilitado em um canal _incoming_, o conector analisará os registros de entrada e tentará criar metadados do Cloud Event. Se habilitado em um _outgoing_, o conector enviará as mensagens de saída como Cloud Event se a mensagem incluir Metadados de Evento de Nuvem.

Tipo: _boolean_</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Enables the alternative. The priority could be any number to override the default bean but if there are multiple alternatives the highest priority wins.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Habilita a alternativa. A prioridade pode ser qualquer número para substituir o bean padrão, mas se existirem várias alternativas, a prioridade mais elevada ganha.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Enables the in-container build</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Permite a compilação no contêiner</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Enabling / Disabling Dev Services for AMQP</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Ativação/desativação do Dev Services para AMQP</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Enabling / Disabling Dev Services for Kafka</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Ativar/desativar Dev Services para o Kafka</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Enabling / Disabling Dev Services for Kubernetes</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Ativar/desativar Dev Services  para Kubernetes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Enabling / Disabling Dev Services for Pulsar</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Ativando / Desativando Dev Services para o Pulsar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Enabling / Disabling SnapStart Optimizations</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Ativar / Desativar as otimizações do SnapStart</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Enabling TLS</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Habilitando o TLS</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Enabling metrics collection</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Habilitando a coleta de métricas</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Enforce opinionated and sensible defaults based on the close world view of the application (e.g. an application with no `@Entity` does not need to start Hibernate ORM)</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Aplicar padrões sensatos e opinativos com base na visão global próxima da aplicação (por exemplo, uma aplicação sem `@Entity` não precisa iniciar o Hibernate ORM)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Ensure the project builds without errors, all tests pass, and the application functions as required before deploying to production.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Garanta que o projeto é construído sem erros, que todos os testes são aprovados e que a aplicação funciona conforme esperado antes de ser implantado em produção.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Enterprise support provided by Red Hat for the product.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Suporte corporativo fornecido pela Red Hat para o produto.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Entry point for everything gRPC.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Ponto de entrada para tudo o que é gRPC.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Error 404</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Erro 404</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Events</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Eventos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Every contribution is valuable. It can be a bug report, an example application, a feature request, a fix in the documentation or just feedback.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Todas as contribuições são valiosas. Pode ser um relatório de bug, um exemplo de aplicação, uma melhoria, uma correção na documentação ou apenas um feedback.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Every developer has their favorite IDE. Learn how to use Quarkus in yours.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Cada desenvolvedor tem seu IDE favorito. Saiba como usar o Quarkus no seu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Every now and then it is handy to be able to change the qualifiers of an injection point programmatically.
You can do just that with `InjectionPointTransformerBuildItem`.
The following sample shows how to apply transformation to injection points with type `Foo` that contain qualifier `MyQualifier`:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>De vez em quando, é útil poder alterar os qualificadores de um ponto de injeção de forma programática. Você pode fazer exatamente isso com `InjectionPointTransformerBuildItem` . O exemplo a seguir mostra como aplicar a transformação a pontos de injeção com o tipo `Foo` que contém o qualificador `MyQualifier` :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Examine sam.yaml</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Examinando o sam.yaml</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Examine the POM</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Examinando o POM</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Examine the POM and Gradle build</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Examinar o POM e a compilação do Gradle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Examine the output of the `manage.sh` script if you want to learn what aws commands are executed
to create, delete, and update your lambdas.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Examine a saída do script `manage.sh` se quiser saber quais comandos da aws são executados para criar, excluir e atualizar seus lambdas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Example Gradle dependencies:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de dependências do Gradle:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Example Jandex Usage</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de Uso do Jandex</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Example Startup Lines</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Linhas de Inicialização de Exemplo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Example of Producing a ServiceStartBuildItem</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de Produção de um ServiceStartBuildItem</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Example of a multiple build item</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de um item de construção múltipla</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Example of a single build item</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de um item de construção individual</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Example of an empty build item</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de um item de construção vazio</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Example of build step that is always executed in a "pseudo-target" style</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de passo de construção que é sempre executado num estilo "pseudo-alvo"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Example of multiple build item usage</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de utilização de vários itens de construção</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Example of producing a build item weakly</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de produção de um item de construção de forma fraca</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Example of signature</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de assinatura</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Example of usage of an empty build item in a "barrier" style</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de utilização de um item de construção vazio num estilo "barreira"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Example of usage of an empty build item in a "pseudo-target" style</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de utilização de um item de construção vazio num estilo "pseudo-alvo"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Example of usage of an validation error build item in a "pseudo-target" style</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de utilização de um item de construção de erro de validação num estilo "pseudo-alvo"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Example of using a bytecode recorder where the generated class is weakly produced</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de utilização de um gravador de bytecode em que a classe gerada é fracamente produzida</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Examples</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Exception handling</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Tratamento de exceções</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Excluding tests when running as a native executable</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Excluindo testes ao executar como um executável nativo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Execute `./mvnw -DquicklyDocs`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Execute `./mvnw -DquicklyDocs`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Execute: gradle wrapper to set up the gradle wrapper (recommended).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Execute: gradle wrapper para configurar o gradle wrapper (recomendado).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Explanation is _discussion_ that clarifies and illuminates a particular topic. Explanation is _understanding-oriented_.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A explicação é uma _discussão_ que clarifica e esclarece um determinado tópico. A explicação é _orientada para a compreensão_.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Explore all the BuildItems you can consume/produce in your extensions.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Explore todos os BuildItems que você pode consumir/produzir em suas extensões.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Explore in more details how to debug native executables.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Explore com mais detalhes como depurar executáveis nativos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Explore the Quarkus developer toolchain which makes Quarkus development so fast and enjoyable.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Explore a cadeia de ferramentas para desenvolvedores do Quarkus, que torna o desenvolvimento do Quarkus tão rápido e agradável.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Explore the wide breadth of technologies Quarkus with which applications can be made.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Explore a ampla gama de tecnologias Quarkus com as quais as aplicações podem ser feitas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Expose your components via CDI</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exponha os seus componentes através de CDI</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Expose your implementation as a bean.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exponha a sua implementação como um bean.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Extend and customize the Configuration.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Estenda e personalize a Configuração.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Extending Configuration Support</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Estendendo o suporte à configuração</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Extends the `ImplBase` class. This is a generated class.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Estende a classe `ImplBase`. Esta é uma classe gerada.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Extension Bean Injection Example</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de Injeção de Bean de Extensão</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Extension Health Check</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Verificação de Integridade da Extensão</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Extension Metrics</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Métricas de Extensão</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Extension Points</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Pontos de Extensão</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Extension metadata</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Metadados de extensão</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Extension philosophy</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Filosofia da extensão</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Extension-defined endpoints</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Endpoints definidos pela extensão</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Extensions can consume registered capabilities using the `Capabilities` build item:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>As extensões podem consumir capacidades registradas usando o item de construção `Capabilities`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Extensions have a various degree of maturity when they enter the Quarkus ecosystem. A status offers the expectations you can rely on.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>As extensões têm um grau de maturidade variado quando entram no ecossistema Quarkus. Um status oferece as expectativas nas quais você pode confiar.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Extensions may need to provide a fallback if there is no active metrics extension or the extension doesn't support the API required by the library.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>As extensões podem precisar fornecer uma alternativa se não existir uma extensão de métricas ativa ou se a extensão não suportar a API exigida pela biblioteca.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Extensions must use https://smallrye.io/smallrye-config/Main/config/mappings/[SmallRye Config @ConfigMapping] to map
the configuration required by the Extension. This will allow Quarkus to automatically expose an instance of the mapping
to each configuration phase and generate the configuration documentation.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>As extensões devem usar o https://smallrye.io/smallrye-config/Main/config/mappings/[@ConfigMapping do SmallRye Config] para mapear a configuração exigida pela extensão. Isso permitirá que o Quarkus exponha automaticamente uma instância do mapeamento para cada fase de configuração e gere a documentação da configuração.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Extensions often need a way to determine whether a given class is part of the application's runtime classpath.
The proper way for an extension to perform this check is to use `io.quarkus.bootstrap.classloading.QuarkusClassLoader.isClassPresentAtRuntime`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>As extensões geralmente precisam de uma maneira de determinar se uma classe faz parte do classpath de tempo de execução da aplicação. A maneira correta de uma extensão realizar essa verificação é usar `io.quarkus.bootstrap.classloading.QuarkusClassLoader.isClassPresentAtRuntime` .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Extensions often need to register serializers and/or deserializers for types the extension provides.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>As extensões necessitam frequentemente de registrar serializadores e/ou desserializadores para os tipos que a extensão fornece.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Extensions should see the configuration holistically as a Quarkus application instead of focusing on the library experience.
For example `quarkus.database.url` and friends are shared between extensions as defining a database access is a shared task (instead of a `hibernate.` property for example).
The most useful configuration options should be exposed as `quarkus.[extension].` instead of the natural namespace of the library.
Less common properties can live in the library namespace.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>As extensões devem ver a configuração de forma holística como uma aplicação Quarkus em vez de se concentrarem na experiência da biblioteca. Por exemplo, `quarkus.database.url` e amigos são compartilhados entre as extensões, pois a definição de um acesso ao banco de dados é uma tarefa compartilhada (em vez de uma propriedade `hibernate.` , por exemplo). As opções de configuração mais úteis devem ser expostas como `quarkus.[extension].` em vez do namespace natural da biblioteca. As propriedades menos comuns podem residir no namespace da biblioteca.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Extra Build Generated Files</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Arquivos extras gerados pela compilação</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Extra parameters</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Parâmetros adicionais</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Extracting Content with Apache Tika</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Extraindo conteúdo com o Apache Tika</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Favor build time work over runtime work</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Favorecer o trabalho em tempo de construção em detrimento do trabalho em tempo de execução</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Features</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Características</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Features and Capabilities</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Funcionalidades e Capacidades</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Feedback and Help</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Feedback e ajuda</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Field injection</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Injeção de campo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Filtering out events</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Filtrando eventos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Final fields are not considered for injection, but can be populated by way of constructor parameter injection
if desired.  Static fields are never considered for injection.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os campos finais não são considerados para injeção, mas podem ser preenchidos por meio da injeção de parâmetros do construtor, se desejado. Os campos estáticos nunca são considerados para injeção.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Final touch, the HTML page reading the converted prices using SSE.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Toque final, a página HTML que lê os preços convertidos utilizando SSE.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Finally, if port 8080 or port 8081 is not available on your computer, you can modify the dev
and test mode ports with application.properties</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Por fim, se a porta 8080 ou a porta 8081 não estiver disponível em seu computador, você poderá modificar as portas dos modos dev e test com application.properties</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Finally, let's create a class where we put all our extension methods:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Finalmente, vamos criar uma classe onde colocamos todos os nossos métodos de extensão:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Finally, let's create a resource class with type-safe templates:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Finalmente, vamos criar uma classe de recurso com modelos type-safe:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Finally, let's create a resource class.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Finalmente, vamos criar uma classe de recurso.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Finally, we need to generate the Kubernetes manifests by running the command in a terminal:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Por fim, precisamos gerar os manifestos do Kubernetes executando o comando em um terminal:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Find all beans annotated with `@TestAnnotation`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Encontra todos os beans anotados com `@TestAnnotation`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Find all classes annotated with `@Scheduled`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Encontrar todas as classes anotadas com `@Scheduled`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>First declare your service as follows:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Primeiro declare seu serviço da seguinte maneira:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>First, `libsunec.so`, the C library used for the SSL implementation:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Em primeiro lugar, `libsunec.so`, a biblioteca C utilizada para a implementação do SSL:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>First, add an *optional* dependency to `quarkus-jackson` on your extension's runtime module.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Primeiro, adicione uma dependência *opcional* a `quarkus-jackson` no módulo de tempo de execução da sua extensão.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>First, add an *optional* dependency to `quarkus-jsonb` on your extension's runtime module.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Primeiro, adicione uma dependência *opcional* a `quarkus-jsonb` no módulo de tempo de execução da sua extensão.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>First, add the following dependency to your application:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Primeiro, adicione a seguinte dependência à sua aplicação:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>First, add the following imports to the `src/main/java/org/acme/VertxResource.java` file:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>First, add the following imports to the `src/main/java/org/acme/VertxResource.java` file:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>First, create a `GreetingResource` Jakarta REST resource in the
`src/main/java/org/acme/spring/boot/properties/GreetingResource.java` file that looks like:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Primeiro, crie um recurso Jakarta REST com o nome `GreetingResource` no arquivo `src/main/java/org/acme/spring/boot/properties/GreetingResource.java` da seguinte forma:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>First, go to https://code.quarkus.io[code.quarkus.io] and select the following extensions:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Primeiro, vá para link:https://code.quarkus.io[code.quarkus.io] e selecione as seguintes extensões:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>First, let's start the GraalVM container, noting the container id output.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Primeiro, vamos iniciar o contêiner GraalVM, observando a saída do id do contêiner.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>First, make sure you stopped the applications, and build both applications in JVM mode with:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Primeiro, certifique-se de que parou as aplicações e construa ambas as aplicações no modo JVM com:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>First, we need a new project.
Create a new project with the following command:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Primeiro, precisamos de um novo projeto. Crie um novo projeto com o seguinte comando:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>First, we need a new project. Create a new project with the following command:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Primeiro, precisamos de um novo projeto. Crie um novo projeto com o seguinte comando:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>First, we need to create two projects: the _producer_ and the _processor_.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Em primeiro lugar, temos de criar dois projetos: o _producer_ e o _processor_.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>First, we will need to package it:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Em primeiro lugar, temos que empacotar a aplicação:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>First, you can consume messages from various brokers such as AMQP or Apache Kafka, and process these messages smoothly:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Primeiro, você pode consumir mensagens de vários brokers, como AMQP ou Apache Kafka, e processar essas mensagens sem problemas:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>First, you need to add the `quarkus-redis-cache` extension to your project:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Em primeiro lugar, é necessário adicionar a extensão `quarkus-redis-cache` ao seu projeto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>First-Class Support for GraalVM Native Images</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Suporte de primeira classe para imagens nativas do GraalVM</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Follow us and get updates delivered to your favorite social media channel.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Siga-nos e receba atualizações em seu canal de mídia social favorito.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Following is an example from the Agroal extension that provides a `DataSourceHealthCheck` to validate the readiness of a datasource.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Segue um exemplo da extensão Agroal que fornece um `DataSourceHealthCheck` para validar a prontidão de uma fonte de dados.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Following the same ideas, you can implement the other CRUD methods.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Seguindo as mesmas ideias, pode implementar os outros métodos CRUD.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>FooterPageBuildItem footerPageBuildItem = new FooterPageBuildItem();
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>FooterPageBuildItem footerPageBuildItem = new FooterPageBuildItem();
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For Docker:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para o Docker:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For Gradle projects please xref:gradle[see below], or for further reference consult the guide in the xref:gradle-tooling.adoc[Gradle setup page].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para projetos Gradle link:#gradle[veja abaixo], ou para mais referências consulte o guia na link:gradle-tooling.html[página de configuração do Gradle].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For Linux hosts, execute:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para sistemas Linux, execute:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For Maven, add the following to your `pom.xml`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para o Maven, adicione o seguinte ao seu `pom.xml`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For Strimzi, you can select any image with a Kafka version which has Kraft support (2.8.1 and higher) from https://quay.io/repository/strimzi-test-container/test-container?tab=tags</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para  o Strimzi, você pode selecionar qualquer imagem com uma versão Kafka que tenha suporte para o Kraft (2.8.1 e superior) em  https://quay.io/repository/strimzi-test-container/test-container?tab=tags</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For Windows users:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para usuários do Windows:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For a full list of possible statuses, check our https://quarkus.io/faq/#what-are-the-extension-statuses[FAQ entry].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para obter uma lista completa de possíveis status, consulte nosso https://quarkus.io/faq/#what-are-the-extension-statuses[FAQ].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For a more detailed guide about debugging native images please refer to the xref:native-reference.adoc[Native Reference Guide].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para obter um guia mais detalhado sobre o debug de imagens nativas, consulte o link:native-reference.html[Guia de Referência Nativo].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For a more detailed walk-through that shows you how to configure Basic authentication together with Jakarta Persistence for storing user credentials in a database, see the xref:security-basic-authentication-tutorial.adoc[Secure a Quarkus application with Basic authentication and Jakarta Persistence] guide.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para obter um guia mais detalhado que mostra como configurar a autenticação básica juntamente com o Jakarta Persistence para armazenar credenciais de usuário numa base de dados, consulte o guia  link:security-basic-authentication-tutorial.html[Proteger uma aplicação Quarkus com autenticação básica e o Jakarta Persistence].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For a regular JVM distribution you need to base your image off the official AWS Java base images. Below is an example of a Dockerfile that would create a container image from your Quarkus Lambda project. It assumes that `mvn package` has been executed and binaries are available in the `target/` directory:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para uma distribuição regular da JVM, é necessário basear sua imagem nas imagens base oficiais do AWS Java. Abaixo está um exemplo de um Dockerfile que criaria uma imagem de contêiner a partir do seu projeto Quarkus Lambda. Ele assume que `mvn package` foi executado e que os binários estão disponíveis no diretório `target/`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For all cases other than the `BUILD_TIME` case, the configuration mapping interface and all the configuration groups and types contained therein must be located in, or reachable from, the extension's run time artifact. Configuration mappings of phase `BUILD_TIME` may be located in or reachable from either of the extension's run time or deployment artifacts.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para todos os casos, com exceção do caso `BUILD_TIME`, a interface de mapeamento da configuração e todos os grupos e tipos de configuração nela contidos devem estar localizados ou ser acessíveis a partir do artefato de tempo de execução da extensão. Os mapeamentos de configuração da fase `BUILD_TIME` podem estar localizados ou acessíveis a partir de qualquer um dos artefatos de tempo de execução ou de implantação da extensão.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For cases where this is not desired behavior, the `@io.quarkus.deployment.annotations.Weak` annotation may be used.  This
annotation indicates that the build step should not automatically be included solely on the basis of producing the annotated value.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Nos casos em que esse não é o comportamento desejado, a anotação `@io.quarkus.deployment.annotations.Weak` pode ser usada. Essa anotação indica que a etapa de construção não deve ser incluída automaticamente apenas com base na produção do valor anotado.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For each call you are intending to do, add a method and use annotations to describe the behavior.  You can combine the REST Client with the &lt;a href="https://quarkus.io/guides/smallrye-fault-tolerance"&gt;fault tolerance extension&lt;/a&gt; to handle failure gracefully.  Then, in your resource, just use the &lt;code&gt;ElementService&lt;/code&gt; interface:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para cada chamada que você pretende fazer, adicione um método e use anotações para descrever o comportamento.  Você pode combinar o cliente REST com a &lt;a href="https://quarkus.io/guides/smallrye-fault-tolerance"&gt;extensão de tolerância a falhas&lt;/a&gt; para lidar com falhas normalmente.  Depois, no seu recurso, basta utilizar a &lt;code&gt;ElementService&lt;/code&gt; interface:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For each gRPC service you inject in your application, you can configure the following attributes:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para cada serviço gRPC que você injeta em sua aplicação, você pode configurar os seguintes atributos:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For example by default reflection in GraalVM will not work, unless a class/member has been explicitly registered for reflection. This is normally achieved by listing every class, method, field and constructor in a JSON file, and passing this as a parameter into the native image build. This obviously gets quite cumbersome for all but the most trivial projects. Quarkus provides a framework that makes it easy to work around these annotations, and programmatically determine what should be registered.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Por exemplo, por padrão, o uso de reflexão de classes no GraalVM não funcionará, a menos que uma classe/membro tenha sido explicitamente registrada para reflexão. Isso normalmente é obtido listando cada classe, método, campo e construtor em um arquivo JSON, e passando isso como um parâmetro para a compilação de imagem nativa. Isso obviamente fica bastante complicado para todos, exceto para os projetos mais triviais. O Quarkus fornece uma estrutura que facilita a solução dessas anotações e determina programaticamente o que deve ser registrado.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For example, Quarkus optimizes the Hibernate code because it knows it only needs a specific connection pool and cache provider</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Por exemplo, o Quarkus otimiza o código do Hibernate porque sabe que só precisa de um conjunto de conexões e de um fornecedor de cache específicos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For example, the `Jackson` extension uses code like below to search for annotations used in JSON deserialization,
and add them to the reflective hierarchy for `BUILD_TIME` analysis.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Por exemplo, a extensão `Jackson` usa um código como o abaixo para pesquisar anotações usadas na desserialização de JSON e adicioná-las à hierarquia reflexiva para análise `BUILD_TIME` .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For example, the `io.quarkus.vertx.http.runtime.FormAuthConfig` configuration group will be generated in a file named
`quarkus-vertx-http-config-group-form-auth-config.adoc`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Por exemplo, o grupo de configuração `io.quarkus.vertx.http.runtime.FormAuthConfig` será gerado em um arquivo chamado `quarkus-vertx-http-config-group-form-auth-config.adoc`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For example, you can specify the `quarkus.debug.generated-classes-dir` system property to have these classes written out to disk for inspection in the development mode:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Por exemplo, você pode especificar a propriedade de sistema `quarkus.debug.generated-classes-dir` para que estas classes sejam gravadas no disco para inspeção no modo de desenvolvimento:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For example, you can use Docker to run your database:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Por exemplo, pode utilizar o Docker para executar a sua base de dados:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For example, you might want to add an interceptor binding to a specific bean class.
You can use a convenient builder-like API to create a transformer instance:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Por exemplo, você pode querer adicionar uma vinculação de interceptador a uma classe de bean específica. Você pode usar uma API conveniente, semelhante a um builder, para criar uma instância de transformador:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For full Gradle details, see the xref:gradle[Gradle build] section below.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para obter detalhes completos sobre o Gradle, consulte a secção de  xref:#gradle[construção do Gradle] abaixo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For indentation to be respected in the Javadoc comment (list items spread on multiple lines or indented
source code), the automatic Eclipse formatter must be disabled (the formatter is automatically included in the build),
with the markers `// @formatter:off`/`// @formatter:on`. These require separate comments and a mandatory space after the
`//` marker.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para que a identação seja respeitada no comentário do Javadoc (itens de lista espalhados em várias linhas ou código-fonte recuado), o formatador automático do Eclipse deve ser desativado (o formatador é incluído automaticamente na construção), com os marcadores `// @formatter:off` / `// @formatter:on` . Isso exige comentários separados e um espaço obrigatório após o marcador `//` .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For information about other methods that you can use to configure the required user credentials, see the xref:security-testing.adoc#configuring-user-information[Configuring User Information] section of the Quarkus "Security Testing" guide.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para obter informações sobre outros métodos que você pode utilizar para configurar as credenciais de usuário necessárias, consulte a seção  link:security-testing.html#configuring-user-information[Configurar as informações do usuario] do guia "Teste de segurança" do Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For instance, in order to make arbitrary changes to a Servlet deployment Undertow has a `ServletExtensionBuildItem`,
which is a `MultiBuildItem` that wraps a `ServletExtension` instance. I can return a `ServletExtension` from a recorder
in another module, and Undertow will consume it and pass it into the recorder method that starts Undertow.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Por exemplo, para fazer alterações arbitrárias em uma implantação de Servlet, o Undertow tem um `ServletExtensionBuildItem` , que é um `MultiBuildItem` que envolve uma instância de `ServletExtension` . Posso retornar um `ServletExtension` de um gravador em outro módulo, e o Undertow o consumirá e o passará para o método do gravador que inicia o Undertow.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For more information about Basic authentication, its mechanisms, and related identity providers, see the following resources:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para obter mais informações sobre a autenticação básica, os seus mecanismos e os identity providers relacionados, consulte os seguintes recursos:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For more information about how to install and use the Quarkus CLI, see the xref:cli-tooling.adoc[Quarkus CLI] guide.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para obter mais informações sobre como instalar e usar a CLI do Quarkus, consulte o guia xref:cli-tooling.adoc[Quarkus CLI].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For most extensions this will just work 'out of the box', however it is still a good idea to have a smoke test to
verify that this functionality is working as expected. To test this we use `QuarkusDevModeTest`:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para a maioria das extensões, isso funcionará sem ajustes, mas ainda assim é uma boa ideia fazer um teste de fumaça para verificar se essa funcionalidade está funcionando conforme o esperado. Para testar isso, usamos o site `QuarkusDevModeTest` :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For native image, however, the URL Connection client must be preferred over the Apache HTTP Client
when using synchronous mode, due to issues in the GraalVM compilation (at present).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para a imagem nativa, no entanto, o cliente de conexão de URL deve ser preferido ao cliente HTTP Apache ao usar o modo síncrono, devido a problemas na compilação do GraalVM (no momento).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For podman:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para o podman:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For questions related to the development of Quarkus:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para questões relacionadas ao desenvolvimento do Quarkus:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For the `ExtensionsService` REST Client interface defined above, an example use of `@ClientExceptionMapper` would be:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para a interface de Cliente REST `ExtensionsService` definida acima, um exemplo de utilização de `@ClientExceptionMapper` seria:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For the last 25 years, Java has performed for organizations across the world but you've never seen anything like this. We'll cover all the classics like "Start Me Up" and "Living' on a VM" and some new jams like "Stairway to Native" and "Sweet JPA of Mine" and more.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Nos últimos 25 anos, o Java tem atuado para organizações em todo o mundo, mas você nunca viu nada assim. Vamos cobrir todos os clássicos como "Start Me Up" e "Living' on a VM" e algumas novas jams como "Stairway to Native" e "Sweet JPA of Mine" e muito mais.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For the sam template files, add the following to the YAML function Properties.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para os arquivos de modelo SAM, adicione o seguinte às propriedades da função YAML.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For this type of application, Quarkus relies on well-known standards such as JAX-RS, JPA and MicroProfile Rest Client, but also Hibernate with Panache to simplify interactions with databases.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para esse tipo de aplicação, o Quarkus conta com padrões bem conhecidos, como JAX-RS, JPA e MicroProfile Rest Client, mas também Hibernate com Panache para simplificar as interações com bancos de dados.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For this, both Jackson and JSON-B extensions provide a way to register serializer/deserializer from within an
extension deployment module.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para isso, as extensões Jackson e JSON-B oferecem uma maneira de registrar o serializador/desserializador de dentro de um módulo de implantação de extensão.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For usage questions, we recommend to:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para perguntas de uso, recomendamos:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For years, the client-server architecture has been the de-facto standard to build applications. But a significant shift happened. The &lt;em&gt;one model rules them all&lt;/em&gt; age is over. A new range of applications and architectural styles have emerged and transformed how code is written and how applications are deployed and executed. HTTP microservices, reactive applications, event-driven architecture, and serverless are now central players in modern systems.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Por anos, a arquitetura cliente-servidor tem sido o padrão de fato para criar aplicativos. Mas uma mudança significativa aconteceu. A era do &lt;em&gt;único modelo que rege todos eles&lt;/em&gt; acabou. Uma nova gama de aplicativos e estilos de arquitetura surgiram e transformaram a forma como o código é escrito e como as aplicações são implantadas e executadas. Microsserviços HTTP, aplicações reativas, arquitetura orientada a eventos e sem servidor agora são atores centrais em sistemas modernos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>For your unit tests, you can also invoke on the mock event server using any HTTP client you want.  Here's an example
using rest-assured.  Quarkus starts up a separate Mock Event server under port 8081.
The default port for Rest Assured is automatically set to 8081 by Quarkus, so you can invoke
on this endpoint.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para seus testes de unidade, você também pode invocar o servidor de eventos simulado usando qualquer cliente HTTP que desejar. Aqui está um exemplo usando o rest-assured. O Quarkus inicia um servidor de evento simulado separado na porta 8081. A porta padrão do Rest Assured é automaticamente definida como 8081 pelo Quarkus, portanto, pode invocar esse endpoint.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Forbidden
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Forbidden
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Form Parameters</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Parâmetros do Formulário</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Form parameters can also be specified using `@ClientFormParam`, similar to `@ClientQueryParam`:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os parâmetros do formulário também podem ser especificados utilizando `@ClientFormParam`, semelhante a `@ClientQueryParam`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Form parameters can be specified using `@RestForm` (or `@FormParam`) annotations:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os parâmetros do formulário podem ser especificados utilizando as anotações `@RestForm` (ou `@FormParam`):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>From ARM/64 to AMD/64</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>De ARM/64 para AMD/64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>From sequential to continuation style</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Do estilo sequencial ao estilo de continuação</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>From the outset, Quarkus has been designed around a container-first philosophy. What this means in concrete terms is that Quarkus applications are optimised for low memory usage and fast startup times in the following ways:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Desde o início, o Quarkus foi projetado em torno de uma filosofia de contêiner em primeiro lugar. O que isso significa em termos concretos é que as aplicações Quarkus são otimizadas para baixo uso de memória e tempos de inicialização rápidos das seguintes maneiras:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Fully static native executables support is experimental.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O suporte a executáveis nativos totalmente estáticos é experimental.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Functional tests</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Testes funcionais</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Funqy HTTP Binding with Google Cloud Functions</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Integração HTTP do Funqy com o Google Cloud Functions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Further docs explain how to enable and use each of them.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Documentações adicionais explicam como habilitar e usar cada um deles.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Further investigation showed that Quarkus is not running with TLS enabled between the application and database, so database network traffic is running un-encrypted. Let's fix that;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Further investigation showed that Quarkus is not running with TLS enabled between the application and database, so database network traffic is running un-encrypted. Let's fix that;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Further reading</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Leitura adicional</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Gather build time metadata and generate code</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Recolher metadados de tempo de construção e gerar código</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Generate X.509 certificates with Vault’s PKI Secret Engine.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Gere certificados X.509 com o PKI Secret Engine do Vault.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Generate the bytecode of the `Contextual#create(CreationalContext&lt;T&gt;)` method directly via `ExtendedBeanConfigurator.creator(Consumer&lt;MethodCreator&gt;)`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Gerar o bytecode do método `Contextual#create(CreationalContext&lt;T&gt;)` diretamente através do `ExtendedBeanConfigurator.creator(Consumer&lt;MethodCreator&gt;)`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Generate the bytecode of the `jakarta.enterprise.context.spi.Contextual#create(CreationalContext&lt;T&gt;)` implementation.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Gerar o bytecode da implementação `jakarta.enterprise.context.spi.Contextual#create(CreationalContext&lt;T&gt;)`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Generating the documentation</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Gerando a documentação</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Get a CDI portable extension running</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Colocar uma extensão portátil CDI em funcionamento</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Get a framework running</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Colocar um framework em funcionamento</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Get answers to some of your common Quarkus questions.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Obtenha respostas para algumas de suas perguntas comuns sobre o Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Get early test feedback with Continuous Testing.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Obtenha feedback antecipado sobre os testes com o Teste Contínuo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Get instant feedback on code changes as tests run in the background on impacted code.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Obtenha feedback instantâneo sobre alterações de código à medida que os testes são executados em segundo plano no código afetado.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Get it running</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Executando a aplicação</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Get started with virtual threads with RESTEasy Reactive</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Comece a usar threads virtuais com o RESTEasy Reactive</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Getting Help from the Community</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Obter ajuda da comunidade</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Getting Started</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Primeiros passos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Getting Started With Reactive</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Introdução ao Reativo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Getting Started to SmallRye Reactive Messaging with Apache Kafka</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Introdução ao SmallRye Reactive Messaging com o Apache Kafka</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Getting Started to SmallRye Reactive Messaging with RabbitMQ</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Primeiros passos para o envio de mensagens reativas SmallRye com RabbitMQ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Getting Started with Reactive</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Introdução ao Reativo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Getting Started with gRPC</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Introdução ao gRPC</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Given a default non-application endpoint root of `/q`, this will create an endpoint at `/q/custom-endpoint/deep`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Dada uma raiz padrão de endpoint não relacionado a aplicação de `/q`, isto criará um endpoint em `/q/custom-endpoint/deep`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Global Client Interceptor Example</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de Interceptor Global de Cliente</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Go ahead and add the new field to the `GreetingProperties` class:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Vá em frente e adicione o novo campo `suffix` à classe `GreetingProperties`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Go more in depth into the Quarkus implementation of CDI.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Aprofunde-se na implementação do CDI no Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Go to the project directory and update the project to the latest stream:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Vá para o diretório do projeto e atualize o projeto para a última versão disponível:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Going further</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Indo mais longe</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Gone are the days of a thousand configuration files and formats. A single configuration file is all it takes for Quarkus applications to configure every single extension.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Foi-se o tempo de mil arquivos de configuração e formatos. Basta um único arquivo de configuração para que os aplicativos do Quarkus configurem cada extensão.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Good concept guides:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Bons guias conceituais:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Good how-to guides:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Bons guias de instruções:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Good reference guides:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Bons guias de referência:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Good tutorials:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Bons tutoriais:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Google Cloud Functions with Vert.x Web, Servlet, or RESTEasy</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Google Cloud Functions com Vert.x Web, Servlet ou RESTEasy</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>GraalVM 22.3, GraalVM CE 17.0.7 Mandrel 22.3 Mandrel 23.0 (17.0.7)</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>GraalVM 22.3, GraalVM CE 17.0.7 Mandrel 22.3 Mandrel 23.0 (17.0.7)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>GraalVM CE 21.3 Mandrel 21.3</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>GraalVM CE 21.3 Mandril 21.3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>GraalVM Native Executable support has been an essential part of the design for Quarkus from the beginning. When an application is compiled down to a native executable, it starts much faster and can run with a much smaller heap than a standard JVM. The native compiler uses aggressive dead-code elimination techniques to only embed the parts of the JVM and classes that are absolutely required by your application. Quarkus makes building optimized native executables plain easy. The build-time approach allows Quarkus to collect enough metadata on your application to fine-tune the compilation. No &lt;code&gt;-H:+ReportUnsupportedElementsAtRuntime&lt;/code&gt; flag, no fallback, no compromise!</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O suporte ao GraalVM Native Executable tem sido uma parte essencial do design do Quarkus desde o início. Quando um aplicativo é compilado em um executável nativo, ele é iniciado muito mais rápido e pode ser executado com um heap muito menor do que uma JVM padrão. O compilador nativo usa técnicas agressivas de eliminação de código morto para incorporar apenas as partes da JVM e as classes que são absolutamente exigidas pelo seu aplicativo. O Quarkus facilita a criação de executáveis nativos otimizados. A abordagem de tempo de compilação permite que o Quarkus colete metadados suficientes em seu aplicativo para ajustar a compilação. Acabou-se a necessidade de adicionar a flag &lt;code&gt;-H:+ReportUnsupportedElementsAtRuntime&lt;/code&gt; e outras gambiarras!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>GraalVM binaries are not (yet) notarized for macOS as reported in this https://github.com/oracle/graal/issues/1724[GraalVM issue]. This means that you may see the following error when using `native-image`:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os binários do GraalVM não estão (ainda) certificados para macOS, conforme relatado nesta  link:https://github.com/oracle/graal/issues/1724[issue do GraalVM]. Isso significa que pode ocorrer o seguinte erro ao usar `native-image`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>GraalVM for JDK 17/20 Mandrel 23.0</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>GraalVM para JDK 17/20 Mandrel 23.0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>GraalVM for JDK 17/20 Mandrel 23.0 (17.0.7)</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>GraalVM para JDK 17/20 Mandrel 23.0 (17.0.7)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>GraalVM versions can have different paths for these files whether you are using the Java 8 or 11 version. Adjust accordingly.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>As versões do GraalVM podem ter caminhos diferentes para estes arquivos, quer esteja a utilizar a versão Java 8 ou 11. Ajuste em conformidade.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Gradle</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Gradle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Gradle build</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Construção Gradle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Granularity of the ack-timeout redelivery. +
Using an higher `tickDurationMillis` reduces the memory overhead to track messages when setting ack-timeout to a bigger value (for example, 1 hour).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Granularidade da reentrega do tempo limite de ack. +
Usar um 'tickDurationMillis' mais alto reduz a sobrecarga de memória para rastrear mensagens ao definir o tempo limite de ack-para um valor maior (por exemplo, 1 hora).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>GreetingController</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>GreetingController</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Group a consumer acknowledgment for a specified time. +
By default, a consumer uses 100ms grouping time to send out acknowledgments to a broker. +
Setting a group time of 0 sends out acknowledgments immediately. +
A longer ack group time is more efficient at the expense of a slight increase in message re-deliveries after a failure.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Agrupe uma confirmação de consumidor por um tempo especificado. +
Por padrão, um consumidor usa o tempo de agrupamento de 100ms para enviar confirmações a um corretor. +
Definir um tempo de grupo de 0 envia confirmações imediatamente. +
Um tempo de grupo mais longo é mais eficiente às custas de um ligeiro aumento nas reentregas de mensagens após uma falha.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Group a consumer acknowledgment for the number of messages.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Agrupe uma confirmação de consumidor para o número de mensagens.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Group multiple configuration properties into an object.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Agrupa várias propriedades de configuração num objeto.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Grouping properties</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Agrupando propriedades</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Guides</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Guias</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Guides - Latest</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Guias - Mais recentes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>HTTP Reference Documentation</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Documentação de referência HTTP</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>HTTP `quarkus-amazon-lambda-http`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>HTTP `quarkus-amazon-lambda-http`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>HTTP/1.1 200
Content-Type: application/json
...
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>HTTP/1.1 200
Content-Type: application/json
...
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>HTTP/2 Support</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Suporte HTTP/2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>HTTP/2 is disabled by default in REST Client. If you want to enable it, you can set:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O HTTP/2 está desabilitado por padrão no Cliente REST. Se pretende habilitar, pode definir:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Handling restarts</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Lidando com reinicializações</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Handling streams</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Lidando com fluxos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Hardcoded values in your code is a no go (even if we all did it at some point ;-)). In this guide, we learn how to configure your application.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os valores codificados no seu código não são permitidos (mesmo que todos nós o tenhamos feito em algum momento ;-)). Neste guia, vamos aprender a configurar a sua aplicação.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Has access to `ANNOTATION_STORE`, `QUALIFIERS`, `INTERCEPTOR_BINDINGS`, `STEREOTYPES`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Tem acesso a `ANNOTATION_STORE`, `QUALIFIERS`, `INTERCEPTOR_BINDINGS`, `STEREOTYPES`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Has access to `ANNOTATION_STORE`, `QUALIFIERS`, `INTERCEPTOR_BINDINGS`, `STEREOTYPES`, `BEANS` (class-based beans only), `OBSERVERS` (class-based observers only), `INJECTION_POINTS`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Tem acesso a `ANNOTATION_STORE`, `QUALIFIERS`, `INTERCEPTOR_BINDINGS`, `STEREOTYPES`, `BEANS` (apenas beans baseados em classes), `OBSERVERS` (apenas observadores baseados em classes), `INJECTION_POINTS`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Has access to `ANNOTATION_STORE`, `QUALIFIERS`, `INTERCEPTOR_BINDINGS`, `STEREOTYPES`, `BEANS`, `OBSERVERS` (class-based observers only), `INJECTION_POINTS`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Tem acesso a `ANNOTATION_STORE`, `QUALIFIERS`, `INTERCEPTOR_BINDINGS`, `STEREOTYPES`, `BEANS`, `OBSERVERS` (apenas observadores baseados em classes), `INJECTION_POINTS`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Has access to all build metadata</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Tem acesso a todos os metadados de construção</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Hashing function determining the partition where you publish a particular message (partitioned topics only). +
Available options are as follows: +
* `pulsar.JavastringHash`: the equivalent of `string.hashCode()` in Java +
* `pulsar.Murmur3_32Hash`: applies the https://en.wikipedia.org/wiki/MurmurHash[Murmur3] hashing function +
* `pulsar.BoostHash`: applies the hashing function from C++'s https://www.boost.org/doc/libs/1_62_0/doc/html/hash.html[Boost] library</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Função de hash que determina a partição onde você publica uma mensagem específica (somente tópicos particionados). +
As opções disponíveis são as seguintes: +
* 'pulsar. JavastringHash': o equivalente a 'string.hashCode()' em Java +
* 'pulsar. Murmur3_32Hash': aplica a função de hash https://en.wikipedia.org/wiki/MurmurHash[Murmur3] +
* 'pulsar. BoostHash': aplica a função de hash da biblioteca https://www.boost.org/doc/libs/1_62_0/doc/html/hash.html[Boost] do C++</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Have a more in-depth look at how SmallRye Stork can be configured and used.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Veja mais detalhadamente como o SmallRye Stork pode ser configurado e usado.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Having such property groups brings more structure to your configuration.
This is especially useful when then number of properties grows.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Ter esses grupos de propriedades traz mais estrutura à sua configuração. Isso é especialmente útil quando o número de propriedades aumenta.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Having this configuration means that all requests performed using `org.acme.rest.client.ExtensionsService` will use `https://stage.code.quarkus.io/api` as the base URL.
Using the configuration above, calling the `getById` method of `ExtensionsService` with a value of `io.quarkus:quarkus-rest-client-reactive` would result in an HTTP GET request being made to `https://stage.code.quarkus.io/api/extensions?id=io.quarkus:quarkus-rest-client-reactive`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Essa configuração significa que todas as requisições realizadas usando `org.acme.rest.client.ExtensionsService` usarão o `https://stage.code.quarkus.io/api` como URL base. Usando a configuração acima, chamar o método `getById` de `ExtensionsService` com um valor de `io.quarkus:quarkus-rest-client-reactive` resultaria em uma requisição HTTP GET feita para `https://stage.code.quarkus.io/api/extensions?id=io.quarkus:quarkus-rest-client-reactive`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Health checks are provided via the `quarkus-smallrye-health` extension. It provides both liveness and readiness checks capabilities.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>As verificações de integridade são fornecidas através da extensão `quarkus-smallrye-health`. Ela fornece capacidades de verificação de vivacidade e prontidão.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Hello World with Jakarta REST</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Hello World com Jakarta REST</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Here `Message` properties class is defined as an inner class, but it could also be a top level class.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Aqui, a classe de propriedades `Message` é definida como uma classe interna, mas também pode ser uma classe de nível superior.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Here `text` field is public, but it could also be a private field with getter and setter or just a public getter in an interface.
Because `text` does not have a default value it is considered required and unless it is defined in a configuration file (`application.properties` by default)  your application will fail to start.
Define this property in your `src/main/resources/application.properties` file:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Aqui, o atributo `text` é público, mas também poderia ser um atributo privado com getter e setter ou apenas um getter público em uma interface. Como o `text` não tem um valor padrão, ele é considerado obrigatório e, a menos que seja definido em um arquivo de configuração ( `application.properties` por padrão), a aplicação não será iniciada. Defina essa propriedade no seu arquivo `src/main/resources/application.properties` :</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Here is an example of filtering out heartbeat events:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Aqui está um exemplo de filtragem de eventos de batimento cardíaco:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Here is the list of all the Quarkus Maven Plugin goals:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Aqui está a lista de todos os objetivos do Plugin Maven do Quarkus:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Here the `LoggingProcessor` injects a `LogConfiguration` instance automatically by detecting the `@ConfigRoot`
annotation.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Aqui, o `LoggingProcessor` injeta uma instância `LogConfiguration` automaticamente ao detectar a anotação `@ConfigRoot` .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Here's how its mapped:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Eis o seu mapa:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Here's the previous example, rewritten using this style:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Aqui está o exemplo anterior, reescrito com este estilo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Here's the same example, but with the AWS Gateway REST API:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Aqui está o mesmo exemplo, mas com a API REST do AWS Gateway:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Hibernate ORM REST Data with Panache simplifies the creation of CRUD applications based on JAX-RS and Hibernate ORM.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Hibernate ORM REST Data with Panache simplifica a criação de aplicativos CRUD baseados em JAX-RS e Hibernate ORM.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Hibernate ORM is the de facto JPA implementation and offers you the full breadth of an Object Relational Mapper.
It makes complex mappings possible, but it does not make simple and common mappings trivial.
Panache focuses on making your entities trivial and fun to write.
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Hibernate ORM é a implementação JPA de fato e oferece toda a amplitude de um Mapeador Relacional de Objetos.
Ele possibilita mapeamentos complexos, mas não torna triviais mapeamentos simples e comuns.
Panache se concentra em tornar suas entidades triviais e divertidas de escrever.
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Hibernate ORM is the de facto JPA implementation and offers you the full breath of an Object Relational Mapper. It works beautifully in Quarkus.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Hibernate ORM é a implementação JPA de facto e oferece a você o fôlego completo de um Mapeador Relacional de Objetos. Ele funciona muito bem no Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Hibernate Reactive with Panache</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Hibernate Reactive with Panache</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Hibernate Search allows you to index your entities in an Elasticsearch cluster and easily offer full text search in all your Hibernate ORM-based applications.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Hibernate Search permite indexar suas entidades em um cluster do Elasticsearch e oferecer facilmente pesquisa de texto completo em todos os aplicativos baseados no Hibernate ORM.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>High concurrency and low resource usage</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Alta concorrência e baixo uso de recursos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Hit `CTRL+C` to stop the application, or keep it running and enjoy the blazing fast hot-reload.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Pressione `CTRL+C` para parar a aplicação, ou mantenha-a em execução e aproveite o fast hot-reload (reload automático incrivelmente rápido).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Host Substrate VM code substitution to help dead code elimination based on the application needs</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Hospedar a substituição de código da Substrate VM para ajudar a eliminar o código morto com base nas necessidades da aplicação</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>How capabilities are implemented and used in Quarkus.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Como as capacidades são implementadas e utilizadas no Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>How dev mode differs from a production application</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Como é que o modo de desenvolvimento difere de uma aplicação de produção</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>How to Enable Trace Logging for Annotation Transformers</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Como Ativar o Log de Trace para Transformadores de Anotações</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>How to Override a Bean Defined by a Library/Quarkus Extension that doesn't use @DefaultBean</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Como Substituir um Bean Definido por uma Biblioteca/Extensão Quarkus que não utiliza @DefaultBean</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>How to expose configuration</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Como expor a configuração</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>How-to guides</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Guias de instruções</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>How-to guides are _directions_ that take the reader through the steps required to solve a real-world problem. How-to guides are _goal-oriented_.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os guias "como fazer" são _instruções_ que conduzem o leitor através dos passos necessários para resolver um problema do mundo real. Os guias de instruções são _orientados para objetivos_.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>However, HTTP characteristics prohibit implementing &lt;a href="https://www.reactivemanifesto.org/"&gt;reactive systems&lt;/a&gt;, where all the components interact using asynchronous messages passing.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>No entanto, as características HTTP proíbem a implementação de &lt;a href="https://www.reactivemanifesto.org/"&gt;sistemas reativos&lt;/a&gt;, onde todos os componentes interagem usando a passagem assíncrona de mensagens.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>However, there are many more options within the Vert.x HTTP Client to configure the connections. See all the options in the Vert.x HTTP Client Options API in https://vertx.io/docs/apidocs/io/vertx/core/http/HttpClientOptions.html[this link].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>No entanto, existem muitas outras opções no Cliente HTTP Vert.x para configurar as conexões. Veja todas as opções na API de Opções do Cliente HTTP Vert.x https://vertx.io/docs/apidocs/io/vertx/core/http/HttpClientOptions.html[neste link].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>However, thread locals are not propagated.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>No entanto, as thread locals não são propagadas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>However, when faced with a benchmark result, especially one that does not appear to make sense, there are a number of steps you can take to validate the result;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>However, when faced with a benchmark result, especially one that does not appear to make sense, there are a number of steps you can take to validate the result;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>However, when working with a multi-module project, be sure to read the `Working with multi-module projects` section of the
xref:maven-tooling.adoc#multi-module-maven[Maven] or xref:gradle-tooling.adoc#multi-module-maven[Gradle] guides.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>No entanto, ao trabalhar com um projeto de vários módulos (multi-module), não deixe de ler a seção `Working with multi-module projects` 
dos guias xref:maven-tooling.adoc#multi-module-maven[do Maven] ou do xref:gradle-tooling.adoc#multi-module-maven[Gradle] .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>However, you can go right to the completed example.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>No entanto, pode ir diretamente para o exemplo completo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>I don't need transaction when I do read only operations, it's faster.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Não preciso de transação quando faço operações somente leitura, é mais rápido.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>IAM</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>IAM</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>IDE support tips</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Sugestões de suporte à IDE</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>INJECTION_POINTS</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>INJECTION_POINTS</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>INTERCEPTOR_BINDINGS</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>INTERCEPTOR_BINDINGS</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Identifier of a CDI bean that provides the default Kafka consumer/producer configuration for this channel. The channel configuration can still override any attribute. The bean must have a type of Map&lt;String, Object&gt; and must use the @io.smallrye.common.annotation.Identifier qualifier to set the identifier.

Type: _string_</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Identificador de um bean CDI que fornece a configuração padrão do consumidor/produtor Kafka para esse canal. A configuração do canal ainda pode substituir qualquer atributo. O bean deve ter um tipo de Map&lt;String, Object&gt; e deve usar o qualificador @io.smallrye.common.annotation.Identifier para definir o identificador.

Tipo: _string_</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Identifier of a CDI bean that provides the default Pulsar client configuration for this channel. The channel configuration can still override any attribute. The bean must have a type of Map&lt;String, Object&gt; and must use the @io.smallrye.common.annotation.Identifier qualifier to set the identifier.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Identificador de um bean CDI que fornece a configuração padrão do cliente Pulsar para esse canal. A configuração do canal ainda pode substituir qualquer atributo. O bean deve ter um tipo de Map&lt;String, Object&gt; e deve usar o qualificador @io.smallrye.common.annotation.Identifier para definir o identificador.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Identifier of a CDI bean that provides the default Pulsar consumer configuration for this channel. The channel configuration can still override any attribute. The bean must have a type of Map&lt;String, Object&gt; and must use the @io.smallrye.common.annotation.Identifier qualifier to set the identifier.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Identificador de um bean CDI que fornece a configuração padrão do consumidor Pulsar para esse canal. A configuração do canal ainda pode substituir qualquer atributo. O bean deve ter um tipo de Map&lt;String, Object&gt; e deve usar o qualificador @io.smallrye.common.annotation.Identifier para definir o identificador.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Identifier of a CDI bean that provides the default Pulsar producer configuration for this channel. The channel configuration can still override any attribute. The bean must have a type of Map&lt;String, Object&gt; and must use the @io.smallrye.common.annotation.Identifier qualifier to set the identifier.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Identificador de um bean CDI que fornece a configuração padrão do produtor Pulsar para esse canal. A configuração do canal ainda pode substituir qualquer atributo. O bean deve ter um tipo de Map&lt;String, Object&gt; e deve usar o qualificador @io.smallrye.common.annotation.Identifier para definir o identificador.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Identity providers</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Identity providers</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If Mockito doesn't meet your needs, you can create a mock programmatically using `QuarkusMock`, e.g.:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se o Mockito não satisfizer as suas necessidades, você pode criar uma simulação programaticamente utilizando `QuarkusMock`, e.g.:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If `api-version` is not set, the latest version for the given flavor will be used. Otherwise, the version must match a https://github.com/dajudge/kindcontainer/blob/master/k8s-versions.json[version supported by the given flavor].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se a api-version não estiver definida, a versão mais recente para a variante fornecido será usada. Caso contrário, a versão deve corresponder a uma https://github.com/dajudge/kindcontainer/blob/master/k8s-versions.json[versão suportada pela variante fornecida].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If `proxy-address` is not set for the client but is set on the global level, the client uses the global settings.
Otherwise, the client uses the JVM settings.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se `proxy-address` não estiver definido para o cliente, mas estiver definido no nível global, o cliente usará as configurações globais. Caso contrário, o cliente usará as configurações da JVM.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If `proxy-address` is set on the client level, the client uses its specific proxy settings. No proxy settings are propagated from the global configuration or JVM properties.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se `proxy-address` estiver definido no nível do cliente, o cliente utiliza as suas definições de proxy específicas. Nenhuma definição de proxy é propagada a partir da configuração global ou das propriedades da JVM.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If `replicateSubscriptionState` is enabled, a subscription state is replicated to geo-replicated clusters.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se 'replicateSubscriptionState' estiver habilitado, um estado de assinatura será replicado para clusters replicados geograficamente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If a bean registered by an `AdditionalBeanBuildItem` does not specify a scope then `@Dependent` is assumed.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se um bean registrado por um `AdditionalBeanBuildItem` não especificar um escopo, assume-se `@Dependent`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If a simple build item is declared on a build step, it _must_ be produced during that build step, otherwise an error
will result.  Build producers, which are injected into steps, _must not_ be used outside that step.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se um item de construção simples for declarado em uma etapa de construção, ele _deverá_ ser produzido durante essa etapa de construção, caso contrário, ocorrerá um erro. Os produtores de construção, que são injetados nas etapas, _não devem_ ser usados fora dessa etapa.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If an extension intends to provide JSON related customization,
it is strongly advised to provide customization for both Jackson and JSON-B.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se uma extensão pretende fornecer personalização relacionada a JSON, é altamente recomendável fornecer personalização para Jackson e JSON-B.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If an extension needs nested non-application endpoints:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se uma extensão precisar de endpoints não relacionados com a aplicação aninhados:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If any of the gRPC services or server interceptors throw an (custom) exception, you can add your own https://github.com/quarkusio/quarkus/extensions/grpc/api/src/main/java/io/quarkus/grpc/ExceptionHandlerProvider.java[ExceptionHandlerProvider]
as a CDI bean in your application, to provide a custom handling of those exceptions.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se algum dos serviços gRPC ou interceptadores de servidor lançar uma exceção (personalizada), você poderá adicionar seu próprio link:https://github.com/quarkusio/quarkus/extensions/grpc/api/src/main/java/io/quarkus/grpc/ExceptionHandlerProvider.java[ExceptionHandlerProvider] como um bean CDI em sua aplicação, para fornecer um tratamento personalizado dessas exceções.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If bytecode is recorded with `@Record(RUNTIME_INIT)` then it is executed from the application's main method. This code
will be run on native executable boot. In general as little code as possible should be executed in this phase, and should
be restricted to code that needs to open ports etc.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se o bytecode for gravado com `@Record(RUNTIME_INIT)`, ele será executado a partir do método principal do aplicativo. Esse código será executado na inicialização do executável nativo. Em geral, o mínimo possível de código deve ser executado nessa fase e deve ser restrito ao código que precisa abrir portas etc.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If bytecode is recorded with `@Record(STATIC_INIT)` then it will be executed from a static init method on the main
class. For a native executable build, this code is executed in a normal JVM as part of the native build
process, and any retained objects that are produced in this stage will be directly serialized into the native executable via an image mapped file.
This means that if a framework can boot in this phase then it will have its booted state directly written to the
image, and so the boot code does not need to be executed when the image is started.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se o bytecode for gravado com `@Record(STATIC_INIT)` , ele será executado a partir de um método de inicialização estático na classe principal. Para uma construção executável nativa, esse código é executado em uma JVM normal como parte do processo de construção nativa, e quaisquer objetos retidos que forem produzidos nesse estágio serão serializados diretamente no executável nativo por meio de um arquivo mapeado de imagem. Isso significa que, se um framework puder inicializar nessa fase, ela terá seu estado inicializado gravado diretamente na imagem e, portanto, o código de inicialização não precisará ser executado quando a imagem for iniciada.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If enabling `readCompacted`, a consumer reads messages from a compacted topic rather than reading a full message backlog of a topic.

A consumer only sees the latest value for each key in the compacted topic, up until reaching the point in the topic message when compacting backlog. Beyond that point, send messages as normal.

Only enabling `readCompacted` on subscriptions to persistent topics, which have a single active consumer (like failure or exclusive subscriptions).

Attempting to enable it on subscriptions to non-persistent topics or on shared subscriptions leads to a subscription call throwing a `PulsarClientException`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se habilitar 'readCompacted', um consumidor lerá mensagens de um tópico compactado em vez de ler uma lista de pendências de mensagens completa de um tópico.

Um consumidor só vê o valor mais recente para cada chave no tópico compactado, até chegar ao ponto na mensagem de tópico ao compactar a lista de pendências. Além desse ponto, envie mensagens normalmente.

Habilitar apenas 'readCompacted' em assinaturas de tópicos persistentes, que tenham um único consumidor ativo (como falha ou assinaturas exclusivas).

A tentativa de habilitá-lo em assinaturas de tópicos não persistentes ou em assinaturas compartilhadas leva a uma chamada de assinatura lançando um 'PulsarClientException'.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If for example application code wants to use `Tracer`, but also needs to use a custom `Reporter` bean, such a requirement could easily be done using something like:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se, por exemplo, o código da aplicação quiser utilizar `Tracer`, mas também precisar utilizar um bean `Reporter` personalizado, esse requisito pode ser facilmente cumprido utilizando algo do gênero:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If for some reason you need to parse the config and use it in other build steps in an extension processor, you would need to create an `XmlConfigBuildItem` to pass the parsed XmlConfig instance around.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se, por algum motivo, for necessário analisar a configuração e utilizá-la em outros passos de construção num processador de extensão, será necessário criar um `XmlConfigBuildItem` para transmitir a instância XmlConfig analisada.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If found, parse using JAXB context for `XmlConfig.class`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se for encontrado, analisa utilizando o contexto JAXB para `XmlConfig.class`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If it is set to `true`, when the outgoing message queue is full, the `Send` and `SendAsync` methods of producer block, rather than failing and throwing errors. +
If it is set to `false`, when the outgoing message queue is full, the `Send` and `SendAsync` methods of producer fail and `ProducerQueueIsFullError` exceptions occur.

The `MaxPendingMessages` parameter determines the size of the outgoing message queue.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se estiver definido como 'true', quando a fila de mensagens de saída estiver cheia, os métodos 'Send' e 'SendAsync' do produtor bloqueiam, em vez de falhar e lançar erros. +
Se ele estiver definido como 'false', quando a fila de mensagens de saída estiver cheia, os métodos 'Send' e 'SendAsync' do produtor falham e as exceções 'ProducerQueueIsFullError' ocorrem.

O parâmetro 'MaxPendingMessages' determina o tamanho da fila de mensagens de saída.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If no default scope is specified the `@Dependent` pseudo-scope is used.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se não for especificado um escopo padrão, é utilizado o pseudo escopo `@Dependent`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If one of those extensions is present, then creating a container image for the native executable is essentially a matter of executing a single command:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se uma dessas extensões estiverem presente, então a criação de uma imagem de contêiner para o executável nativo é executar um único comando:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If running `gdb` from a different directory than `target`, then the sources can be loaded by running:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se executar `gdb` a partir de um diretório diferente do `target`, então as fontes podem ser carregadas ao executar:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If set to a positive number, the connector will try to resend any record that was not delivered successfully (with a potentially transient error) until the number of retries is reached. If set to 0, retries are disabled. If not set, the connector tries to resend any record that failed to be delivered (because of a potentially transient error) during an amount of time configured by `delivery.timeout.ms`.

Type: _long_</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se definido como um número positivo, o conector tentará reenviar qualquer registro que não tenha sido entregue com êxito (com um erro potencialmente transitório) até que o número de tentativas seja atingido. Se definido como 0, as novas tentativas serão desabilitadas. Se não estiver definido, o conector tentará reenviar qualquer registro que não tenha sido entregue (devido a um erro potencialmente transitório) durante um período de tempo configurado por 'delivery.timeout.ms'.

Tipo: _long_</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If the GET request requires path parameters you can leverage the `@PathParam("parameter-name")` annotation instead of
(or in addition to) the `@QueryParam`. Path and query parameters can be combined, as required, as illustrated in the example below.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se a requisição GET exigir parâmetros de caminho, você poderá utilizar a anotação `@PathParam("parameter-name")` em vez de (ou além de) `@QueryParam` . Os parâmetros de caminho e de consulta podem ser combinados, conforme necessário, como ilustrado no exemplo abaixo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If the application contains the `quarkus-info` extension, then Quarkus will by default expose the `/q/info` endpoint which provides information about the build, java version, version control, and operating system. The level of detail of the exposed information is configurable.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se a aplicação tiver a extensão `quarkus-info`, o Quarkus irá, por predefinição, expor o endpoint `/q/info`, que fornece informações sobre a compilação, a versão java, o controlo de versão e o sistema operacional. O nível de detalhes das informações expostas é configurável.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If the class cannot depend on Quarkus, then Quarkus can use any custom annotation, as long as the extension implements the `io.quarkus.deployment.recording.RecordingAnnotationsProvider` SPI.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se a classe não puder depender do Quarkus, o Quarkus pode utilizar qualquer anotação personalizada, desde que a extensão implemente o SPI `io.quarkus.deployment.recording.RecordingAnnotationsProvider`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If the class name equals to `org.acme.Bar` then add `@MyInterceptorBinding`. Don't forget to invoke `Transformation#done()`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se o nome da classe for igual a `org.acme.Bar`, adicione `@MyInterceptorBinding`. Não se esqueça de invocar `Transformation#done()`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If the compression level is not set, the compression is disabled.
The compression will happen once the native executable is built and will replace the executable.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se o nível de compactação não for definido, a compactação será desativada. A compactação ocorrerá quando o executável nativo for criado e substituirá o executável.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If the extension provides additional Config Sources and if these are required during Static Init, these must be registered with `StaticInitConfigBuilderBuildItem`. Configuration in Static Init does not scan for additional sources to avoid double initialization at application startup time.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se a extensão fornecer Fontes de Configuração adicionais e se estas forem necessárias durante a Inicialização Estática, devem ser registradas em `StaticInitConfigBuilderBuildItem`. A configuração na Inicialização Estática não procura fontes adicionais para evitar a dupla inicialização no momento da inicialização da aplicação.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If the guide includes an `application.properties` example, a tip must be included just below the code snippet:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se o guia incluir um exemplo de `application.properties`, uma dica deve ser incluída logo abaixo do trecho de código:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If the library directly uses a metrics API, there are two options:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se a biblioteca utilizar diretamente uma API de métricas, existem duas opções:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If the name is not specified via the `GrpcClient#value()` then the field name is used instead, e.g. `helloService` in this particular case.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se o nome não for especificado através do endereço `GrpcClient#value()`, então o nome do campo é usado em seu lugar, por exemplo, `helloService` neste caso específico.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If the newly registered stereotype annotation doesn't have the appropriate meta-annotations, such as scope or interceptor bindings, use an xref:annotations_transformer_build_item[annotation transformation] to add them.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se a anotação de estereótipo recém registrada não tiver as meta-anotações apropriadas, como as vinculações de escopo ou de interceptador, utilize uma xref:annotations_transformer_build_item[transformação de anotação] para as adicionar.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If the project catalog is available, it will always be preferred, unless explicitly specified with the `--user` flag.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>If the project catalog is available, it will always be preferred, unless explicitly specified with the `--user` flag.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If the value is a number followed by `d`, it is prefixed with `P`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se o valor for um número seguido de 'd', ele é prefixado com 'P'.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If the value is a number followed by `h`, `m`, or `s`, it is prefixed with `PT`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se o valor for um número seguido de 'h', 'm' ou 's', ele é prefixado com 'PT'.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If the value is a number followed by `ms`, it represents time in milliseconds.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se o valor for um número seguido de 'ms', ele representa o tempo em milissegundos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If the value is only a number, it represents time in seconds.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se o valor for apenas um número, ele representará o tempo em segundos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If there are `@RestForm` parameters that are not multipart-implying, then
`@Consumes(MediaType.APPLICATION_FORM_URLENCODED)` is implied.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se houver parâmetros @RestForm que não implicam em multi-parte, então @Consumes(MediaType.APPLICATION_FORM_URLENCODED) estará implícito.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If there are any problems creating the function, you must delete it with the `delete` function before re-running
the `create` command.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se houver algum problema na criação da função, você deverá excluí-la com a função `delete` antes de executar novamente o comando `create`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If there is no `@Location` qualifier provided, the field name is used to locate the template.
In this particular case, we're injecting a template with path `templates/hello.txt`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se não for fornecido um qualificador `@Location`, o nome do campo é utilizado para localizar o modelo/template. Neste caso específico, vamos injetar um modelo com o caminho `templates/hello.txt`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If there is no `@Location` qualifier provided, the field name is used to locate the template. In this particular case, we're injecting a template with path `templates/hello.txt`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se não for fornecido um qualificador `@Location`, o nome do campo é utilizado para localizar o modelo/template. Neste caso específico, vamos injetar um modelo com o caminho `templates/hello.txt`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If there was no /config.xml resource available in the build environment, then a null `RuntimeServiceBuildItem` would be returned and no subsequent logic based on a `RuntimeServiceBuildItem` being produced would execute.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se não houvesse nenhum recurso /config.xml disponível no ambiente de construção, seria devolvido um `RuntimeServiceBuildItem` nulo e não seria executada qualquer lógica subsequente baseada num `RuntimeServiceBuildItem` produzido.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If this is a live reload which changed files / classes triggered the reload</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se se tratar de um recarregamento ao vivo onde arquivos/classes alterados ativaram o recarregamento</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If this property is true, then REST Client will perform a new request that it receives a redirection response from the HTTP server.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se esta propriedade for verdadeira, então o Cliente REST efetuará uma nova requisição quando receber uma resposta de redirecionamento do servidor HTTP.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If using Gradle, the path to the binaries in the YAML templates must be changed from `target` to `build`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se estiver a utilizar o Gradle, o caminho para os binários nos modelos YAML deve ser alterado de `target` para `build`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If using Gradle, the path to the binaries in the `manage.sh` must be changed from `target` to `build`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se estiver utilizando o Gradle, o caminho para os binários em `manage.sh` deve ser alterado de `target` para `build`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If using Powershell, wrap `-D` parameters in double quotes e.g. `"-DprojectArtifactId={create-app-artifact-id}"`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se estiver usando o Powershell, envolva os parâmetros '-D' entre aspas duplas, por exemplo, '"-DprojectArtifactId={create-app-artifact-id}"'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If using cmd, (don't use backward slash `\` and put everything on the same line)</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se estiver usando cmd, (não use barra invertida '\' e coloque tudo na mesma linha)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If we focus on the dependencies section, you can see the extension allowing the development of REST applications:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se nos concentrarmos na seção das dependências, podemos ver que a extensão permite o desenvolvimento de aplicações REST:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you already have your Quarkus project configured, you can add the `redis-client` extension
to your project by running the following command in your project base directory:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se já tiver o projeto Quarkus configurado, você pode adicionar a extensão `redis-client` ao projeto executando o seguinte comando no diretório base do projeto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you already have your Quarkus project configured, you can add the `rest-client-reactive-jackson` extension
to your project by running the following command in your project base directory:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se já tiver o projeto Quarkus configurado, você pode adicionar a extensão `rest-client-reactive-jackson` ao projeto executando o seguinte comando no diretório base do projeto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you already have your Quarkus project configured, you can add the `smallrye-reactive-messaging-rabbitmq` extension
to your project by running the following command in your project base directory:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se já tiver o projeto Quarkus configurado, você pode adicionar a extensão `smallrye-reactive-messaging-rabbitmq` ao projeto executando o seguinte comando no diretório base do projeto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you already have your Quarkus project configured, you can add the `spring-boot-properties` extension
to your project by running the following command in your project base directory:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se já tiver o projeto Quarkus configurado, você pode adicionar a extensão `spring-boot-properties` ao projeto executando o seguinte comando no diretório base do projeto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you are a Java EE or Spring user, this development model should look familiar.  You expose a resource containing methods annotated with &lt;code&gt;@GET&lt;/code&gt;, &lt;code&gt;@POST&lt;/code&gt;…&amp;ZeroWidthSpace;&amp;ZeroWidthSpace; to handle the different requests.  The path is specified using the &lt;code&gt;@Path&lt;/code&gt; annotation.  Quarkus also supports &lt;a href="https://quarkus.io/guides/spring-web"&gt;Spring controller&lt;/a&gt; annotations such as &lt;code&gt;@GetMapping&lt;/code&gt; or &lt;code&gt;@RestController&lt;/code&gt;.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se você é um usuário Java EE ou Spring, esse modelo de desenvolvimento deve parecer familiar.  Você expõe um recurso que contém métodos anotados com &lt;code&gt;@GET&lt;/code&gt;, &lt;code&gt;@POST&lt;/code&gt;... para lidar com as diferentes solicitações.  O caminho é especificado usando a &lt;code&gt;@Path&lt;/code&gt; anotação.  O Quarkus também oferece suporte a anotações do &lt;a href="https://quarkus.io/guides/spring-web"&gt;controlador Spring&lt;/a&gt; , como &lt;code&gt;@GetMapping&lt;/code&gt; ou &lt;code&gt;@RestController&lt;/code&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you are building native images, and want to use https://aws.amazon.com/xray[AWS X-Ray Tracing] with your lambda
you will need to include `quarkus-amazon-lambda-xray` as a dependency in your pom.  The AWS X-Ray
library is not fully compatible with GraalVM, so we had to do some integration work to make this work.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se estiver criando imagens nativas e quiser usar o link:https://aws.amazon.com/xray[AWS X-Ray Tracing] com seu lambda, será necessário incluir `quarkus-amazon-lambda-xray` como uma dependência no seu pom. A biblioteca do AWS X-Ray não é totalmente compatível com o GraalVM, portanto, tivemos que fazer algum trabalho de integração para que isso funcionasse.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you are building on a non-Linux system, you will need to also pass in a property instructing Quarkus to use a docker build as Amazon
Lambda requires linux binaries.  You can do this by passing this property to your build:
`-Dquarkus.native.container-build=true`. This requires you to have Docker installed locally, however.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se estiver construindo em um sistema que não seja Linux, também precisará passar uma propriedade instruindo o Quarkus a usar uma construção do docker, pois o Amazon Lambda exige binários Linux. Você pode fazer isso passando esta propriedade para sua compilação: `-Dquarkus.native.container-build=true`. No entanto, isso exige que o Docker esteja instalado localmente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you are not in one of these cases, the compression fails.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se você não estiver em num destes casos, a compactação falha.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you are using Gradle in your project, you can use this sample Dockerfile.  Save it in `src/main/docker/Dockerfile.multistage`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se estiver utilizando o Gradle no seu projeto, pode utilizar este exemplo de Dockerfile. Salve-o em `src/main/docker/Dockerfile.multistage`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you are using Maven, make sure you have the `generate-code` goal of `quarkus-maven-plugin` enabled in your `pom.xml`.
If you wish to generate code from different `proto` files for tests, also add the `generate-code-tests` goal.
Please note that no additional task/goal is required for the Gradle plugin.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se você estiver usando o Maven, certifique-se de que a meta `generate-code` do `quarkus-maven-plugin` esteja habilitado no seu `pom.xml` . Se quiser gerar código a partir de diferentes arquivos `proto` para testes, adicione também a meta `generate-code-tests` . Observe que nenhuma tarefa/meta adicional é necessária para o plug-in do Gradle.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you are using `META-INF/services` files you need to register the files as resources so that your native image can find them,
but you also need to register each listed class for reflection so they can be instantiated or inspected at run-time:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se você estiver usando arquivos `META-INF/services` , será necessário registrar os arquivos como recursos para que a imagem nativa possa encontrá-los, mas também será necessário registrar cada classe listada para reflexão, para que possam ser instanciadas ou inspecionadas em tempo de execução:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you are using a Docker image to build, then you must extract these files from this image.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se estiver a utilizar uma imagem Docker para construir, então deve extrair estes arquivos desta imagem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you are working with your native image build, simply replace the template name with the native version:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se estiver a trabalhar com a sua compilação de imagem nativa, basta substituir o nome do modelo pela versão nativa:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you configure Quarkus to use the same port for both HTTP and gRPC servers with the property `quarkus.grpc.server.use-separate-server=false`, then you don't need to change the default `target-port`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se você configurar o Quarkus para usar a mesma porta para os servidores HTTP e gRPC com a propriedade `quarkus.grpc.server.use-separate-server=false`, então você não precisa alterar a propriedade `target-port`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you declare a *parameter declaration* in a template then Qute attempts to validate all expressions that reference this parameter and if an incorrect expression is found the build fails.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se você declarar uma *declaração de parâmetro* em um modelo, o Qute tentará validar todas as expressões que fazem referência a esse parâmetro e, se uma expressão incorreta for encontrada, a compilação falhará.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you did the Kafka, you have realized that it's the same code.
The only difference is the connector configuration and the JSON mapping.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se você já utilizou o Kafka, percebeu que o código é o mesmo. A única diferença é a configuração do conector e o mapeamento JSON.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you do not want to use the mock event server, you can test your lambdas with SAM CLI.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se não pretende utilizar o servidor de eventos simulado, pode testar os seus lambdas com o SAM CLI.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you don't rely on the JSON default, it is heavily recommended to annotate your endpoints with the `@Produces` and `@Consumes` annotations to define precisely the expected content-types.
It will allow to narrow down the number of Jakarta REST providers (which can be seen as converters) included in the native executable.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se você não conta com JSON padrão, é altamente recomendável anotar seus endpoints com as anotações `@Produces` e `@Consumes` para definir com precisão os tipos de conteúdo esperados. Isso permitirá reduzir o número de provedores Jakarta REST (que podem ser vistos como conversores) incluídos no executável nativo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you enable the management interface without customizing the management network interface and port, the metrics are exposed under: `http://0.0.0.0:9000/q/metrics`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>If you enable the management interface without customizing the management network interface and port, the metrics are exposed under: `http://0.0.0.0:9000/q/metrics`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you ever want to build a native container image and already have an existing native image you can set `-Dquarkus.native.reuse-existing=true` and the native image build will not be re-run.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se você quiser construir uma imagem de contêiner nativa e já tiver uma imagem nativa existente, você pode definir `-Dquarkus.native.reuse-existing=true`. Isso evitará que a imagem nativa seja construída novamente</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you followed the instructions, you should have the Redis server running.
Then, you just need to run the application using:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se você seguiu as instruções, deverá ter o servidor Redis em execução. Em seguida, você só precisa executar a aplicação usando:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you have generated the application from the previous tutorial, you can find in the `pom.xml` the following _profile_:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se gerou a aplicação do tutorial anterior, pode encontrar no `pom.xml` o seguinte profile:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you have https://curl.se/[curl] on your machine, you can try the endpoint using:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se tiver https://curl.se/[curl] na sua máquina, você pode testar o endpoint utilizando:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you have multiple JDK's installed, it is not certain Maven will pick up the expected java
and you could end up with unexpected results.
You can verify which JDK Maven uses by running `mvn --version`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se você tiver várias instalações do JDK, pode ser que o Maven não use o Java 
esperado e você pode acabar obtendo resultados inesperados.
 Você pode verificar qual JDK o Maven está usando executando o comando `mvn —version`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you have the `io.quarkus:quarkus-extension-processor` project open at the same time in your IDE (for example, if you have the Quarkus sources checked out and open in your IDE) you will need to close that project. Otherwise, Eclipse will not invoke the APT plugin that it contains.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se tiver o projeto `io.quarkus:quarkus-extension-processor` aberto ao mesmo tempo no seu IDE (por exemplo, se tiver as fontes Quarkus verificadas e abertas no seu IDE), terá de fechar esse projeto. Caso contrário, o Eclipse não invocará o plug-in APT que ele contém.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you have the `upx` command available on your path, Quarkus uses it.
Otherwise, if you built the native image using an in-container build (using `quarkus.native.container-build=true`) and if the builder image provides the `upx` command, Quarkus compresses the executable from inside the container.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se você tiver o comando `upx` disponível seu path, o Quarkus o utilizará. Caso contrário, se você construiu a imagem nativa usando uma construção no container (usando `quarkus.native.container-build=true` ) e se a imagem do builder fornecer o comando `upx` , o Quarkus comprime o executável de dentro do container.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you invoke the Quarkus CLI from outside of a project, Quarkus will list all of the extensions available for the Quarkus release used by the CLI itself.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>If you invoke the Quarkus CLI from outside of a project, Quarkus will list all of the extensions available for the Quarkus release used by the CLI itself.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you invoke the Quarkus CLI from outside of a project, Quarkus will list all the extensions available for the Quarkus release used by the CLI itself.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>If you invoke the Quarkus CLI from outside of a project, Quarkus will list all the extensions available for the Quarkus release used by the CLI itself.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you just closed the extension processor project, be sure to do `Maven &gt; Update Project` on the other projects in order for Eclipse to pick up the extension processor from the Maven repository.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se acabou de fechar o projeto do processador de extensões, certifique-se de fazer `Maven &gt; Update Project` nos outros projetos para que o Eclipse vá buscar o processador de extensões no repositório Maven.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you look at the XmlConfig code you will see that it does carry around the JAXB annotations. If you don't want these in the runtime image, you could clone the XmlConfig instance into some POJO object graph and then replace XmlConfig with the POJO class.
We will do this in xref:replacing-classes-in-native-image[Replacing Classes in the Native Image].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se você observar o código do XmlConfig, verá que ele carrega as anotações JAXB. Se você não quiser que elas estejam na imagem de tempo de execução, poderá clonar a instância XmlConfig em algum gráfico de objeto POJO e, em seguida, substituir XmlConfig pela classe POJO. Faremos isso em xref:replacing-classes-in-native-image[Substituindo Classes na Imagem Nativa].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you look at the three generated handler classes in the project, you'll see that they are `@Named` differently.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se olhar para as três classes de manipuladores geradas no projeto, verá que são `@Named` diferentes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you need SSL support in your native executable, you can easily include the necessary libraries in your Docker image.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se precisar de suporte SSL no seu executável nativo, pode facilmente incluir as bibliotecas necessárias na sua imagem Docker.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you need more customization capabilities than registering a module,
you can produce a CDI bean that implements `io.quarkus.jackson.ObjectMapperCustomizer` via an `AdditionalBeanBuildItem`.
More info about customizing Jackson can be found on the JSON guide xref:rest-json.adoc#json[Configuring JSON support]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se precisar de mais recursos de personalização do que o registro de um módulo, você pode produzir um bean CDI que implemente o `io.quarkus.jackson.ObjectMapperCustomizer` por meio de um `AdditionalBeanBuildItem`. Mais informações sobre a personalização da Jackson podem ser encontradas no guia JSON xref:rest-json.adoc#json[Configurando Suporte a JSON]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you need more customization capabilities than registering a serializer or a deserializer,
you can produce a CDI bean that implements `io.quarkus.jsonb.JsonbConfigCustomizer` via an `AdditionalBeanBuildItem`.
More info about customizing JSON-B can be found on the JSON guide xref:rest-json.adoc#configuring-json-support[Configuring JSON support]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se você precisar de mais recursos de personalização do que o registro de um serializador ou desserializador, poderá produzir um bean CDI que implemente o `io.quarkus.jsonb.JsonbConfigCustomizer` por meio de um `AdditionalBeanBuildItem` . Mais informações sobre a personalização do JSON-B podem ser encontradas no guia JSON xref:rest-json.adoc#configuring-json-support[Configurando Suporte a JSON]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you need to configure a deadline for a gRPC stub, i.e. to specify a duration of time after which the stub will always return the status error `DEADLINE_EXCEEDED`.
You can specify the deadline via the `quarkus.grpc.clients."service-name".deadline` configuration property, e.g.:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se o senhor precisar configurar um prazo (deadline) para um stub de gRPC, ou seja, para especificar uma duração de tempo após o qual o stub sempre retornará o erro de status `DEADLINE_EXCEEDED` . Você pode especificar o prazo através da propriedade de configuração `quarkus.grpc.clients."service-name".deadline` , por exemplo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you need to make your build step conditional on the presence or absence of another extension, you can
use xref:capabilities[Capabilities] for that.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se você precisar condicionar a etapa de construção à presença ou ausência de outra extensão, poderá usar xref:capabilities[Capacidades] para isso.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you plan to use external modules (for example, an external library for all your domain objects),
you will need to make these modules known to the indexing process either by adding the Jandex plugin (if you can modify them)
or via the `quarkus.index-dependency` property inside your `application.properties` (useful in cases where you can't modify the module).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se você planeja usar módulos externos (por exemplo, uma biblioteca externa para todos os objetos do seu domínio),
será necessário tornar esses módulos conhecidos pelo processo de indexação adicionando o plug-in Jandex (se puder modificá-los)
ou por meio da propriedade `quarkus.index-dependency` dentro do seu `application.properties` (útil nos casos em que não é possível modificar o módulo).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you prefer to use Gradle, you can quickly and easily generate a Gradle project via https://code.quarkus.io/[code.quarkus.io]
adding the `quarkus-amazon-lambda` extension as a dependency.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se preferir usar o Gradle, você pode gerar um projeto Gradle de forma rápida e fácil em link:https://code.quarkus.io/[code.quarkus.io] , adicionando a extensão `quarkus-amazon-lambda` como uma dependência.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you prefer to use Spring Boot `@ConfigurationProperties` annotated class to access application properties instead of
xref:config-mappings.adoc#config-mappings[`@ConfigMapping`] or a MicroProfile `@ConfigProperty` approach, you can do that with this extension.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se você preferir utilizar a classe anotada com `@ConfigurationProperties` do Spring Boot para acessar as propriedades da aplicação ao invés de utilizar a abordagem xref:config-mappings.adoc#config-mappings[`@ConfigMapping`] ou `@ConfigProperty` do MicroProfile, você pode fazer isso com essa extensão.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you require a higher level of support, you have options.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se você precisar de um nível mais alto de suporte, você tem opções.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you see the following invalid path error for your application JAR when trying to create a native executable using a container build, even though your JAR was built successfully, you're most likely using a remote daemon for your container runtime.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se vir o seguinte erro de caminho inválido para o JAR da sua aplicação ao tentar criar um executável nativo utilizando uma build em contêiner, mesmo o JAR ter sido compilado com sucesso, é muito provável que esteja utilizando um daemon remoto para o tempo de execução do contêiner.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you set the `quarkus.package.vineflower.enabled` property to `true` then Quarkus will download and invoke the https://github.com/Vineflower/vineflower[Vineflower decompiler] and dump the result in the `decompiled` directory of the build tool output (`target/decompiled` for Maven for example).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se definir a propriedade `quarkus.package.vineflower.enabled` para `true`, o Quarkus irá baixar e invocar o https://github.com/Vineflower/vineflower[Vineflower decompiler] e despejará o resultado no diretório `decompiled` da saída da ferramenta de construção (`target/decompiled` para Maven, por exemplo).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you stopped the application
(keep in mind you don't have to do it, changes will be automatically deployed by our live reload feature),
restart the application with:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se você parou a aplicação
(lembre-se de que não é necessário fazer isso, pois as alterações serão implantadas automaticamente pelo nosso recurso de reload automático),
reinicie o aplicativo com:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you use Basic or form-based authentication, you must add an `IdentityProvider` instance to convert a username and password to a `SecurityIdentity` instance.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se você utilizar a Basic ou form-based, você precisará adicionar uma instãncia `IdentityProvider` para converter um username e um password em uma instância `SecurityIdentity`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you use a `CompletionStage`, you would need to call the service's method to retry.
This difference comes from the laziness aspect of Mutiny and its subscription protocol.
More details about this can be found in https://smallrye.io/smallrye-mutiny/latest/reference/uni-and-multi/[the Mutiny documentation].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se você usar um `CompletionStage` , precisará chamar o método do serviço para tentar novamente. Essa diferença vem do aspecto preguiçoso do Mutiny e de seu protocolo de assinatura. Mais detalhes sobre isso podem ser encontrados na https://smallrye.io/smallrye-mutiny/latest/reference/uni-and-multi/[documentação do Mutiny] .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you use a client injected with the `@RestClient` annotation, you can easily mock it for tests.
You can do it with Mockito's `@InjectMock` or with `QuarkusMock`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se você usar um cliente injetado com a anotação `@RestClient`, poderá facilmente simulá-lo para testes. Você pode fazer isso com `@InjectMock` do Mockito ou com `QuarkusMock` .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you use a https://smallrye.io/smallrye-mutiny-vertx-bindings/latest/[Vert.x client using the Mutiny bindings], use the `andAwait()` methods which block until you get the result without pinning the carrier thread. It includes all the reactive SQL drivers.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se você estiver utilizando um link:https://smallrye.io/smallrye-mutiny-vertx-bindings/latest/[cliente Vert.x que utilize as ligações Mutiny], use os métodos `andAwait()` que bloqueiam até obter o resultado sem fixar a carrier thread. Isso inclui todos os drivers SQL reativos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you want a lower memory footprint and faster initialization times for your lambda, you can compile your Java
code to a native executable.  Just make sure to rebuild your project with the `-Dnative` switch.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se quiser um espaço de memória menor e tempos de inicialização mais rápidos para seu lambda, você compilar o código Java em um executável nativo. Apenas certifique-se de reconstruir seu projeto com a opção `-Dnative`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you want to continue on this topic check:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se quiser continuar neste tema, consulte:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you want to deploy your application somewhere (typically in a container), you need to deploy the whole `quarkus-app` directory.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se você quiser implantar seu aplicativo em algum lugar (normalmente em um contêiner), você precisará implantar todo o diretório `quarkus-app`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you want to test that an extension properly fails at build time, use the `setExpectedException` method:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se você pretende testar se uma extensão falha corretamente em tempo de construção, use o método `setExpectedException`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you want to use Qute in your Jakarta REST application, you need to add an extension first:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se quiser utilizar o Qute na sua aplicação Jakarta REST, tem de adicionar primeiro uma extensão:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you want to use another Redis for your cache, configure the `client-name` as follows:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se você pretende utilizar outro Redis para a sua cache, configure o `client-name` da seguinte forma:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you want to use the AWS Gateway HTTP API, generate your project with this script:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se você quiser utilizar a API HTTP do AWS Gateway, gere o seu projeto com este script:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you want to use the AWS Gateway REST API, generate your project with this script:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se você quiser utilizar a API REST do AWS Gateway, gere o seu projeto com este script:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If you're running a remote Docker daemon, you need to replace `quarkus.native.container-build=true` with `quarkus.native.remote-container-build=true`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se estiver executando um daemon Docker remoto, você terá que substituir `quarkus.native.container-build=true` por `quarkus.native.remote-container-build=true`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If your `@Transactional`-annotated method returns a reactive value, such as:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se o método anotado '@Transactional' retornar um valor reativo, como:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If your application does not use any Quarkus extension that exposes an HTTP server, you can still configure the probes to directly use the gRPC Health service by adding the property `quarkus.kubernetes.readiness-probe.grpc-action-enabled=true` into your configuration:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se sua aplicação não usar nenhuma extensão do Quarkus que exponha um servidor HTTP, você ainda pode configurar as sondas para usar diretamente o serviço gRPC Health, adicionando a propriedade `quarkus.kubernetes.readiness-probe.grpc-action-enabled=true` à sua configuração:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If your application is running, you can request the endpoint:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se sua aplicação estiver rodando, você pode fazer uma requisição ao endpoint:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If your application uses a client and exposes REST endpoints, please use xref:resteasy-reactive.adoc[RESTEasy Reactive]
for the server part.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se o seu aplicativo usa um cliente e expõe endpoints REST, use o xref:resteasy-reactive.adoc[RESTEasy Reativo] para a parte do servidor.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If your code makes HTTPS calls (e.g. to a microservice, to an AWS service), you will need to add configuration to the native image,
as GraalVM will only include the dependencies when explicitly declared.  Quarkus, by default enables this functionality on extensions that implicitly require it.
For further information, please consult the xref:native-and-ssl.adoc[Quarkus SSL guide]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se o seu código fizer chamadas HTTPS (por exemplo, para um microsserviço, para um serviço AWS), precisará adicionar a configuração à imagem nativa, pois o GraalVM só incluirá as dependências quando declaradas explicitamente. O Quarkus, por padrão, habilita essa funcionalidade em extensões que implicitamente a exigem. Para obter mais informações, consulte o xref:native-and-ssl.adoc[guia SSL do Quarkus]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If your extension defines annotations or interfaces that mark beans needing to be processed, you can locate these beans using the Jandex API, a Java annotation indexer and offline reflection library. The following `TestProcessor#scanForBeans` method shows how to find the beans annotated with our `@TestAnnotation` that also implement the `IConfigConsumer` interface:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se a sua extensão definir anotações ou interfaces que marcam os beans que precisam ser processados, você pode localizar esses beans utilizando a API Jandex, um indexador de anotações Java e uma biblioteca de reflexão offline. O método `TestProcessor#scanForBeans` a seguir mostra como localizar os beans anotados com nosso `@TestAnnotation` que também implementam a interface `IConfigConsumer`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>If your service implementation logic is blocking (use blocking I/O for example), annotate your method with
`@Blocking`.
The `io.smallrye.common.annotation.Blocking` annotation instructs the framework to invoke the
annotated method on a worker thread instead of the I/O thread (event-loop).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se a lógica de implementação do seu serviço for bloqueante (usando E/S bloqueante, por exemplo), anote seu método com `@Blocking`. A anotação `io.smallrye.common.annotation.Blocking` instrui o framework a invocar o método anotado em uma thread de trabalho em vez da thread de E/S (event-loop).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Image type can be configured using</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O tipo da imagem pode ser configurado utilizando</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Imperative</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Imperativo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Imperative and reactive code</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Código imperativo e reativo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Imperative vs. Reactive: a question of threads</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Imperativo vs. Reativo: uma questão de threads</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Implement the generated service interface.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Implementar a interface de serviço gerada.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Implement the methods defined in the service definition (here we have a single method).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Implementar os métodos definidos na definição do serviço (neste caso, temos um único método).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Implementing GraphQL Services</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Implementando serviços GraphQL</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Implementing a gRPC service</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Implementação de um serviço gRPC</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Implementing a service</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Implementação de um serviço</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Implementing gRPC Services</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Implementando serviços gRPC</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Import the `quarkus-smallrye-health-spi` library in your deployment module.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Importe a biblioteca `quarkus-smallrye-health-spi` no seu módulo de implantação.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Import the `quarkus-smallrye-health` extension as an **optional** dependency in your runtime module so it will not impact the size of the application if
health check is not included.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Importe a extensão `quarkus-smallrye-health` como uma dependência **opcional** em seu módulo de tempo de execução para que ela não afete o tamanho da aplicação se a verificação de integridade não for incluída.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Improve and expedite the inner loop development process with live coding where code changes are automatically reflected in your running application. code -&gt; refresh browser -&gt; repeat</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Melhore e agilize o processo de desenvolvimento de loop interno com codificação em tempo real, onde as alterações de código são refletidas automaticamente em sua aplicação em execução. código -&gt; atualizar navegador -&gt; repetir</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In Quarkus, the application is represented by a single bean archive with the https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html#default_bean_discovery[bean discovery mode `annotated`, window="_blank"].
Therefore, bean classes that don't have a https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html#bean_defining_annotations[bean defining annotation, window="_blank"] are ignored.
Bean defining annotations are declared on the class-level and include scopes, stereotypes and `@Interceptor`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>No Quarkus, a aplicação é representada por um único bean archive com o https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html#default_bean_discovery[modo de descoberta de bean `anotado`, window="_blank"]. Portanto, as classes de bean que não têm uma https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html#bean_defining_annotations[anotação de definição de bean, window="_blank"] são ignoradas. As anotações de definição de bean são declaradas no nível da classe e incluem escopos, estereótipos e `@Interceptor` .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In a Gradle project, you would find a similar setup:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>No projeto Gradle, você encontrará uma configuração semelhante:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In a terminal, launch the application in dev mode using: `./mvnw quarkus:dev`.
Quarkus automatically starts a database instance for you and configure the application. Now we only need to implement the HTTP endpoint.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Em um terminal, inicie a aplicação no modo de desenvolvimento usando: `./mvnw quarkus:dev` . O Quarkus inicia automaticamente uma instância de banco de dados para você e configura a aplicação. Agora só precisamos implementar o endpoint HTTP.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In addition, remember to enable the AWS X-Ray tracing parameter in `manage.sh`, in the `cmd_create()` function.  This can also be set in the AWS Management Console.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Além disso, lembre-se de ativar o parâmetro de rastreamento do AWS X-Ray em `manage.sh`, na função `cmd_create()`. Isso também pode ser definido no Console de gerenciamento da AWS.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In addition, the xref:tooling.adoc[tooling guide] document explains how to:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Além disso, o documento  link:tooling.html[do guia de ferramentas] explica como:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In both native executable and pure JVM mode this allows the app to start as fast as possible since processing was done during build time. This also minimizes the classes/native code needed in the application to pure runtime related behaviors.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Tanto no modo executável nativo quanto no modo JVM puro, isso permite que a aplicação seja iniciada o mais rápido possível, pois o processamento foi feito durante o tempo de construção. Isto também minimiza as classes/código nativo necessário na aplicação para comportamentos puramente relacionados com o tempo de execução.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In cases that warrant using `InputStream` as the return type of REST Client method (such as when large amounts of data need to be read):</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Em casos que justifiquem a utilização de `InputStream` como tipo de retorno do método do Cliente REST (por exemplo, quando é necessário ler grandes quantidades de dados):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In cases where some fields of an object to be recorded should be ignored (i.e. the value that being at build time should not be reflected at runtime), the `@IgnoreProperty` can be placed on the field.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Nos casos em que alguns campos de um objeto a ser gravado devam ser ignorados (ou seja, o valor que será construído não deve ser refletido em tempo de execução), o `@IgnoreProperty` pode ser colocado no campo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In dev mode, you can use the xref:redis-dev-services.adoc[Redis Dev Service].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>No modo de desenvolvimento `dev mode`, você pode utilizar o xref:redis-dev-services.adoc[Redis Dev Service].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In each of your resource class, declare a `@CheckedTemplate static class Template {}` class within your resource class.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Em cada uma das suas classes de recursos, declare uma classe `@CheckedTemplate static class Template {}` dentro da sua classe de recursos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In general, gRPC uses HTTP/2, TLS, and https://developers.google.com/protocol-buffers[Protobuf (Protocol Buffers)].
In a microservice architecture, gRPC is an efficient, type-safe alternative to HTTP.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Em geral, o gRPC utiliza HTTP/2, TLS e link:https://developers.google.com/protocol-buffers[Protobuf (buffers de protocolo)] . Em uma arquitetura de microserviços, o gRPC é uma alternativa eficiente e segura ao HTTP.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In https://github.com/quarkusio/quarkus-quickstarts/blob/main/hibernate-reactive-panache-quickstart/src/test/java/org/acme/hibernate/orm/panache/FruitsEndpointTest.java[FruitsEndpointTest.java] you can see how the test for the fruit application can be implemented.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Em https://github.com/quarkusio/quarkus-quickstarts/blob/main/hibernate-reactive-panache-quickstart/src/test/java/org/acme/hibernate/orm/panache/FruitsEndpointTest.java[FruitsEndpointTest.java] você pode ver como o teste da aplicação da fruta pode ser implementado.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In non-native pure JVM mode, there is no real difference between Static and Runtime Init, except that Static Init is always executed first. This mode benefits from the same build phase augmentation as native mode as the descriptor parsing and annotation scanning are done
at build time and any associated class/framework dependencies can be removed from the build output jar. In servers like
WildFly, deployment related classes such as XML parsers hang around for the life of the application, using up valuable
memory. Quarkus aims to eliminate this, so that the only classes loaded at runtime are actually used at runtime.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>No modo JVM puro não nativo, não há diferença real entre Inicialização Estática e Inicialização Em Tempo de Execução, exceto pelo fato de que a inicialização estática é sempre executada primeiro. Esse modo se beneficia da mesma ampliação da fase de construção que o modo nativo, pois a análise do descritor e a varredura de anotações são feitas no momento da construção e quaisquer dependências de classe/framework associadas podem ser removidas do jar de saída da construção. Em servidores como o WildFly, as classes relacionadas à implantação, como os analisadores XML, permanecem durante todo o tempo de vida da aplicação, utilizando uma memória valiosa. O objetivo do Quarkus é eliminar isso, de modo que as únicas classes carregadas em tempo de execução sejam realmente usadas em tempo de execução.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In order to determine the base URL to which REST calls will be made, the REST Client uses configuration from `application.properties`.
The name of the property needs to follow a certain convention which is best displayed in the following code:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para determinar o URL de base para o qual as chamadas REST serão feitas, o Cliente REST usa a configuração de `application.properties`. O nome da propriedade precisa seguir uma determinada convenção que é melhor exibida no código a seguir:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In order to have a meaningful understanding of behavior under load, the following issues with methodology need to be addressed;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>In order to have a meaningful understanding of behavior under load, the following issues with methodology need to be addressed;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In order to make it easy for extension authors to test their extensions daily against the latest snapshot of Quarkus, Quarkus has introduced
the notion of Ecosystem CI. The Ecosystem CI link:https://github.com/quarkusio/quarkus-ecosystem-ci/blob/main/README.adoc[README]
has all the details on how to set up a GitHub Actions job to take advantage of this capability, while this link:https://www.youtube.com/watch?v=VpbRA1n0hHQ[video] provides an overview
of what the process looks like.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para facilitar que os autores de extensões testem suas extensões diariamente em relação ao último snapshot do Quarkus, o Quarkus introduziu a noção de Ecosystem CI. O link:https://github.com/quarkusio/quarkus-ecosystem-ci/blob/main/README.adoc[README] do Ecosystem CI tem todos os detalhes sobre como configurar um job do GitHub Actions para aproveitar esse recurso, enquanto este link:https://www.youtube.com/watch?v=VpbRA1n0hHQ[vídeo] fornece uma visão geral de como é o processo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In order to provide a health check, you should do the following:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para prover uma verificação de integridade, você deve fazer o seguinte:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In other cases, the simplified format is translated to the `java.time.Duration` format for parsing:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Em outros casos, o formato simplificado é traduzido para o formato 'java.time.Duration' para análise:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In previous versions of this extension, you had to set up your pom or gradle
to zip up your executable for native deployments, but this is not the case anymore.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Nas versões anteriores dessa extensão, era necessário configurar o pom ou gradle para compactar o executável para implantações nativas, mas esse não é mais o caso.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In rare cases it might be handy to programmatically register an existing annotation that is not annotated with `@jakarta.interceptor.InterceptorBinding` as an interceptor binding.
This is similar to what CDI achieves through `BeforeBeanDiscovery#addInterceptorBinding()`.
We are going to use `InterceptorBindingRegistrarBuildItem` to get it done.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Em casos raros, pode ser útil registrar programaticamente uma anotação existente que não esteja anotada com `@jakarta.interceptor.InterceptorBinding` como uma vinculação de interceptador. Isso é semelhante ao que o CDI consegue fazer por meio de `BeforeBeanDiscovery#addInterceptorBinding()` . Vamos usar o `InterceptorBindingRegistrarBuildItem` para fazer isso.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In some cases you may want to mock the remote endpoint - the HTTP server - instead of mocking the client itself.
This may be especially useful for native tests, or for programmatically created clients.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Em alguns casos, você pode querer simular o endpoint remoto - o servidor HTTP - em vez de simular o próprio cliente. Isso pode ser especialmente útil para testes nativos ou para clientes criados programaticamente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In some cases, it's useful to be able to modify the annotation metadata.
Quarkus provides a powerful alternative to https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html#process_annotated_type[`jakarta.enterprise.inject.spi.ProcessAnnotatedType`, window="_blank"] and https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html#bce_enhancement[`jakarta.enterprise.inject.build.compatible.spi.Enhancement`, window="_blank"].
With an `AnnotationsTransformerBuildItem` it's possible to override the annotations that exist on bean classes.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Em alguns casos, é útil poder modificar os metadados da anotação. O Quarkus oferece uma alternativa eficiente para https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html#process_annotated_type[`jakarta.enterprise.inject.spi.ProcessAnnotatedType`, window="_blank"] and https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html#bce_enhancement[`jakarta.enterprise.inject.build.compatible.spi.Enhancement`, window="_blank"]. Com um `AnnotationsTransformerBuildItem` , é possível substituir as anotações existentes nas classes de bean.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In the _initialization_ phase the preparatory work is being carried out and custom contexts are registered.
_Bean discovery_ is then the process where the container analyzes all application classes, identifies beans and wires them all together based on the provided metadata.
Subsequently, the extensions can register _synthetic components_.
Attributes of these components are fully controlled by the extensions, i.e. are not derived from an existing class.
Finally, the _deployment is validated_.
For example, the container validates every injection point in the application and fails the build if there is no bean that satisfies the given required type and qualifiers.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Na fase de _inicialização_ , o trabalho preparatório está sendo realizado e os contextos personalizados são registrados. A _descoberta de beans_ é o processo em que o contêiner analisa todas as classes da aplicação, identifica os beans e os conecta com base nos metadados fornecidos. Posteriormente, as extensões podem registrar _componentes sintéticos_ . Os atributos desses componentes são totalmente controlados pelas extensões, ou seja, não são derivados de uma classe existente. Por fim, a _implementação é validada_ . Por exemplo, o contêiner valida cada ponto de injeção na aplicação e falha a construção se não houver nenhum bean que satisfaça o tipo e os qualificadores exigidos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In the example above, `GeneratedClassBuildItem` would only be produced if `ExecutorClassBuildItem` is consumed by
some other build step.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>No exemplo acima, `GeneratedClassBuildItem` só seria produzido se `ExecutorClassBuildItem` fosse consumido por alguma outra etapa de construção.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In the generated build file, you can see 2 test dependencies:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>No arquivo compilado gerado, é possível ver 2 dependências de teste:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In the same directory, create an `import.sql` file, which inserts a few fruits, so we don't start with an empty database in dev mode:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>No mesmo diretório, crie um arquivo `import.sql`, que insere algumas frutas, para não começarmos com uma base de dados vazia no modo de desenvolvimento:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In the spirit of the times, the Quarkus Team virtually presents a big, loud, and bold, rock &amp; roll mega-stadium tour.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>No espírito dos tempos, o Quarkus Team apresenta virtualmente uma grande, barulhenta e ousada turnê de mega-estádio de rock and roll.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In the traditional and imperative approach, frameworks assign a thread to handle the request.
So, the whole processing of the request runs on this worker thread.
This model does not scale very well.
Indeed, to handle multiple concurrent requests, you need multiple threads; and so your application concurrency is constrained by the number of threads.
In addition, these threads are blocked as soon as your code interacts with remote services.
So, it leads to inefficient usage of the resources, as you may need more threads, and each thread, as they are mapped to OS threads, has a cost in terms of memory and CPU.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Na abordagem tradicional e imperativa, os frameworks atribuem um thread para tratar a requisição. Assim, todo o processamento da requisição é executado nesse thread de trabalho. Esse modelo não escala muito bem. De fato, para lidar com várias requisições concorrentes, são necessários vários threads e, portanto, a concorrência da aplicação é limitada pelo número de threads. Além disso, esses threads são bloqueados assim que o código interage com os serviços remotos. Portanto, isso leva ao uso ineficiente dos recursos, pois você pode precisar de mais threads, e cada thread, como são mapeados para threads do sistema operacional, tem um custo em termos de memória e CPU.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In theory, you can use xref:annotations_transformer_build_item[an `AnnotationsTransformer`] to achieve the same goal. However, there are few differences that make `InjectionPointsTransformer` more suitable for this particular task: (1) annotation transformers are applied to all classes during bean discovery, whereas `InjectionPointsTransformer` is only applied to discovered injection points after bean discovery; (2) with `InjectionPointsTransformer` you don't need to handle various types of injection points (field, parameters of initializer methods, etc.).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Em teoria, é possível utilizar xref:annotations_transformer_build_item[um `AnnotationsTransformer`] para alcançar o mesmo objetivo. No entanto, existem algumas diferenças que tornam o `InjectionPointsTransformer` mais adequado para esta tarefa específica: (1) os transformadores de anotação são aplicados a todas as classes durante a descoberta de bean, enquanto o `InjectionPointsTransformer` só é aplicado aos pontos de injeção descobertos após a descoberta de bean; (2) com `InjectionPointsTransformer` você não precisa tratar vários tipos de pontos de injeção (campo, parâmetros de métodos inicializadores, etc.).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In these cases, you can find all the keys managed by the default cache using `KEYS my-cache:*`, and all the keys managed by the `expensiveResourceCache` cache using: `KEYS my-expensive-cache:*`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Nestes casos, você pode encontrar todas as chaves gereciadas pela cache padrão utilizando `KEYS my-cache:*`, e todas as chaves gerenciadas pela cache `expensiveResourceCache` utilizando: `KEYS my-expensive-cache:*`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In this case, use the parameter `-Dquarkus.native.remote-container-build=true` instead of `-Dquarkus.native.container-build=true`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Neste caso, utilize o parâmetro `-Dquarkus.native.remote-container-build=true` ao invés de `-Dquarkus.native.container-build=true`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In this case, we use `Fruit.findById` to retrieve the fruit.
It returns a `Uni`, which will complete when the database has retrieved the row.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Nesse caso, usamos `Fruit.findById` para recuperar a fruta. Ele retorna um `Uni` , que será concluído quando o banco de dados tiver recuperado a linha.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In this case, we use the `@Location` qualifier to specify the template path: `templates/reports/v1/report_01.html`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Neste caso, utilizamos o qualificador `@Location` para especificar o caminho do modelo: `templates/reports/v1/report_01.html`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In this example, we're creating a copy of the default object mapper. You should *NEVER* modify the default object mapper, but create a copy instead.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Neste exemplo, estamos criando uma cópia do mapeador de objetos padrão. Você *NUNCA* deve modificar o mapeador de objetos padrão, mas sim criar uma cópia.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In this guide we will be demonstrating how to consume part of the REST API supplied by the link:https://stage.code.quarkus.io[stage.code.quarkus.io] service.
Our first order of business is to set up the model we will be using, in the form of a `Extension` POJO.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Neste guia, demonstraremos como consumir parte da API REST fornecida pelo serviço link:https://stage.code.quarkus.io[stage.code.quarkus.io] . Nosso primeiro passo é configurar o modelo que usaremos, na forma de um POJO `Extension` .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In this guide, we are going to develop two applications communicating with a RabbitMQ broker.
The first application sends a _quote request_ to the RabbitMQ _quote requests_ exchange and consumes messages from the _quote_ queue.
The second application receives the _quote request_ and sends a _quote_ back.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Neste guia, vamos desenvolver duas aplicações que se comunicam com o RabbitMQ. A primeira aplicação envia uma _solicitação de cotação_ para a fila _ _quote requests_ do RabbitMQ e consome mensagens da fila _quote_ . A segunda aplicação recebe a mensagem da fila _quote request_ e envia para a fila _quote_ de volta.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In this guide, we are going to expose a simple Rest API to increment numbers by using the https://redis.io/commands/incrby[`INCRBY`] command.
Along the way, we'll see how to use other Redis commands like `GET`, `SET` (from the string group), `DEL` and `KEYS` (from the key group).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Neste guia, vamos expor uma API Rest simples para incrementar números usando o comando link:https://redis.io/commands/incrby[INCRBY] . Ao longo do caminho, veremos como usar outros comandos do Redis, como `GET` , `SET` (do grupo de strings), `DEL` e `KEYS` (do grupo de chaves).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In this guide, we create a straightforward application serving a `hello` endpoint. To demonstrate
dependency injection, this endpoint uses a `greeting` bean.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Neste guia, criamos um aplicativo simples que atende a um endpoint `hello` . Para demonstrar
a injeção de dependência, esse endpoint usa um bean `greeting` .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In this guide, we will discuss how you can get your native executables to support SSL,
as native executables don't support it out of the box.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Neste guia, discutiremos como você pode obter seus executáveis nativos para oferecer suporte a SSL, já que os executáveis nativos não oferecem suporte imediato a ele.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In this guide, we will discuss how you can get your native executables to support SSL, as native executables don't support it out of the box.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Neste guia, discutiremos como você pode obter seus executáveis nativos para oferecer suporte a SSL, já que os executáveis nativos não oferecem suporte imediato a ele.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In this guide, we will explore:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Neste guia, iremos explorar:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In this guide, we will get you started with some reactive features of Quarkus.
We are going to implement a simple CRUD application.
Yet, unlike in the xref:hibernate-orm-panache.adoc[Hibernate with Panache guide], it uses the reactive features of Quarkus.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Neste guia, vamos te introduzir a alguns recursos reativos do Quarkus. Vamos implementar um aplicativo CRUD simples. No entanto, diferentemente do xref:hibernate-orm-panache.adoc[guia do Hibernate com Panache] , ele usa os recursos reativos do Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In this guide, we will use Mutiny.
To know more about Mutiny, check the xref:mutiny-primer.adoc[Mutiny documentation].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Neste guia, usaremos o Mutiny. Para saber mais sobre o Mutiny, consulte a xref:mutiny-primer.adoc[documentação do Mutiny] .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In this section, we are going to consume the service we expose.
To simplify, we are going to consume the service from the same application, which in the real world, does not make sense.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Nesta seção, vamos consumir o serviço que expomos. Para simplificar, vamos consumir o serviço a partir da mesma aplicação, o que no mundo real não faz sentido.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In this session the Quarkus Team will give you a unique, hands-on experience: An introduction to Quarkus, a follow-along hands-on demo or two and then a Q&amp;A with some of the band, umm, developers involved.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Nesta sessão, a Equipe do Quarkus lhe dará uma experiência prática única: uma introdução ao Quarkus, uma demonstração prática subsequente ou duas e, em seguida, uma sessão de perguntas e respostas com alguns dos desenvolvedores envolvidos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In your `@QuarkusTest`, you can use `@InjectMock` to inject the Mutiny client of a gRPC service:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>No seu `@QuarkusTest`, você pode utilizar `@InjectMock` para injetar o cliente Mutiny de um serviço gRPC:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In-Person and online events which feature Quarkus tracks, discussion and topics.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Eventos presenciais e online que apresentam trilhas, discussões e tópicos do Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Include JDK Flight Recorder support</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Incluir suporte para o JDK Flight Recorder</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Includes a resource bundle in the native executable.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Inclui um pacote de recursos no executável nativo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Includes directory's static resources into the native executable.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Inclui os recursos estáticos do diretório no executável nativo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Includes static resources into the native executable.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Inclui recursos estáticos no executável nativo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Including the documentation in the extension guide</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Incluindo a documentação no guia de extensão</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Incoming Attributes of the 'smallrye-kafka' connector</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Atributos de entrada do conector 'smallrye-kafka'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Incoming Attributes of the 'smallrye-pulsar' connector</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Atributos de entrada do conector 'smallrye-pulsar'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Increment a value given its key</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Incrementa um valor dada a sua chave</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Increment the `first` value by 27.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Incrementa o valor `primeira` em 27.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Increment the value associated with the given key</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Incrementa o valor associado à chave indicada</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Indexer does not include your external dependency</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O indexador não inclui a sua dependência externa</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Indicate that the "jakarta.xml.bind.Messages" resource bundle should be copied into native image.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Indica que o pacote de recursos "jakarta.xml.bind.Messages" deve ser copiado para a imagem nativa.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Indicate that the /security/runtime.keys classpath resource should be copied into native image.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Indica que o recurso de classpath /security/runtime.keys deve ser copiado para a imagem nativa.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Indicate that the `META-INF/my-descriptor.xml` resource should be copied into native image</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Indica que o recurso `META-INF/my-descriptor.xml` deve ser copiado para a imagem nativa</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Indicates that all charsets should be enabled in native image.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Indica que todos os conjuntos de caracteres devem ser ativados na imagem nativa.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Indicates that the content is sent using `Server Sent Events`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Indica que o conteúdo é enviado utilizando `Server Sent Events`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Indicates that the method consumes the items from the `requests` channel</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Indica que o método consome os itens do canal `quote-requests`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Indicates that the objects returned by the method are sent to the `quotes` channel</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Indica que os objetos devolvidos pelo método são enviados para o canal `quotes`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Indicates that the processing is _blocking_ and cannot be run on the caller thread.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Indica que o processamento está a _bloquear_ e não pode ser executado na thread do chamador.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Infinispan is an in memory data grid that allows running in a server outside of application processes. This extension provides functionality to allow the client that can connect to said server when running in Quarkus.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Infinispan é uma malha de dados em memória que permite a execução em um servidor externo aos processos de uma aplicação. Essa extensão fornece funcionalidade para permitir que o cliente que pode se conectar ao referido servidor ao executar no Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Info endpoint</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Endpoint de informação</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Initial backoff interval (in nanosecond).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Intervalo de recuo inicial (em nanossegundos).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Initial position at which to set cursor when subscribing to a topic at first time.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Posição inicial na qual definir o cursor ao se inscrever em um tópico pela primeira vez.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Initialization</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Inicialização</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Inject a Reactive Messaging `Emitter` to send messages to the `quote-requests` channel.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Injete um serviço de mensagens reativas `Emitter` para enviar mensagens para o canal  `quote-requests`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Inject a bean provided by other extension.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Injetar um bean fornecido por outra extensão.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Inject a preconfigured Keycloak Admin Client.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Injete um Keycloak Admin Client pré-configurado.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Inject all beans matching the type `List&lt;String&gt;`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Injetar todos os beans que correspondam ao tipo `List&lt;String&gt;`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Inject both the imperative and reactive data sources</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Injeta os datasources imperativo e reativo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Inject mock clients</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Injetar clientes falsos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Inject the `TransactionManager` to be able to activate `setRollbackOnly` semantic.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Injete o `TransactionManager` para poder ativar a semântica `setRollbackOnly`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Inject the service and configure its name. The name is used in the application configuration. If not specified then the field name is used instead: `hello` in this particular case.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Injete o serviço e configure seu nome. O nome é utilizado na configuração da aplicação. Se não for especificado, é utilizado o nome do campo: `hello` neste caso específico.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Inject the template with path `templates/item.html`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Injetar o modelo com o caminho `templates/item.html`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Injectable AWS Context Variables</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Variáveis de contexto AWS injetáveis</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Injecting Configuration into Recorders</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Injetando Configuração nos Gravadores</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Injecting beans</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Injetando os `beans`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Injecting properties</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Injetando propriedades</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Injecting the `jakarta.ws.rs.ext.Providers` instance in filters</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Injetando a instância `jakarta.ws.rs.ext.Providers` em filtros</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Injection</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Injeção</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Injection is resolved at compile time via an annotation processor,
and the resulting code does not have permission to inject private fields or invoke private methods.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A injeção é resolvida no momento da compilação por meio de um processador de anotações, e o código resultante não tem permissão para injetar campos privados ou invocar métodos privados.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>InjectionPointsTransformer</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>InjectionPointsTransformer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Injects the `quotes` channel using the `@Channel` qualifier</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Injecta o canal `quotes` utilizando o qualificador `@Channel`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Inside the `producer` project locate the generated  `src/main/java/org/acme/rabbitmq/producer/QuotesResource.java` file, and update the content to be:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Dentro do projeto `producer` , localize o arquivo `src/main/java/org/acme/rabbitmq/producer/QuotesResource.java` gerado e atualize o conteúdo para que fique assim:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Inspecting the Generated/Transformed Classes</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Inspecionando as Classes Geradas/Transformadas</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Inspecting the list of consumer groups and their consumption lag</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Inspeção da lista de grupos de consumidores e do respetivo desfasamento de consumo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Install GraalVM if you haven't already. You have a few options for this:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Instale o GraalVM se ainda não o fez. Existem algumas opções para isso:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Install `m2e-apt` from https://marketplace.eclipse.org/content/m2e-apt</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Instalar `m2e-apt` a partir de https://marketplace.eclipse.org/content/m2e-apt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Installing AWS bits</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Instalando os componentes AWS</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Installing all the AWS bits is probably the most difficult thing about this guide.  Make sure that you follow all the steps
for installing AWS CLI.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A instalação de todos os bits da AWS é provavelmente a parte mais difícil deste guia. Certifique-se de seguir todas as etapas para instalar a AWS CLI.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Installing via scoop will do this for you.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A instalação através do scoop irá fazer tudo por você.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Instance Produced Through Recorder</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Instância Produzida Através do Gravador</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Instead of annotating the client with `@RegisterRestClient`, and injecting
a client with `@RestClient`, you can also create REST Client programmatically.
You do that with the `QuarkusRestClientBuilder`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Em vez de anotar o cliente com `@RegisterRestClient` e injetar um cliente com `@RestClient`, você também pode criar um cliente REST de forma programática. Você faz isso com o `QuarkusRestClientBuilder` .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Integrating with Development Mode</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Integração com o Modo de Desenvolvimento</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Integration</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Integração</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Interacting With Extension Beans</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Interagindo Com os Beans de Extensão</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Interacting with the application</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Interagindo com a aplicação</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Interceptors with the highest priority are called first.
The default priority, used if the interceptor does not implement the `Prioritized` interface, is `0`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os interceptadores com a maior prioridade são chamados primeiro. A prioridade padrão, usada se o interceptador não implementar a interface `Prioritized` , é `0` .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Interface for custom message is ackTimeout policy. You can specify `RedeliveryBackoff` for a consumer.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Interface para mensagem personalizada é a política ackTimeout. Você pode especificar 'RedeliveryBackoff' para um consumidor.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Interface for custom message is negativeAcked policy. You can specify `RedeliveryBackoff` for a consumer.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Interface para mensagem personalizada é política negativeAcked. Você pode especificar 'RedeliveryBackoff' para um consumidor.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Interval to print client stats (in seconds).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Intervalo para imprimir estatísticas do cliente (em segundos).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Introduction to CDI</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Introdução à CDI</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Introduction to writing REST JSON Services</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Introdução à escrita de serviços REST JSON</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Invoke the Lambda</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Invocar o Lambda</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Invoke the service.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Invocar o serviço.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Is Quarkus really 600x times slower than Framework X/Y/Z? *Of course not!*</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Is Quarkus really 600x times slower than Framework X/Y/Z? *Of course not!*</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Is this a clean start or a live reload</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>É uma inicialização limpa ou um recarregamento ao vivo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Issues using GraalVM with macOS</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Problemas ao usar o GraalVM com o macOS</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Issues with packaging on Windows</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Problemas com o empacotamento no Windows</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>It also provides a global context map you can use to store information between restarts, without needing to resort to
static fields.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Ele também fornece um mapa de contexto global que pode ser usado para armazenar informações entre reinicializações, sem a necessidade de recorrer a campos estáticos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>It can occasionally be useful to see a visual representation of the interactions between the various build steps. For such cases, adding `-Dquarkus.builder.graph-output=build.dot` when building an application
will result in the creation of the `build.dot` file in the project's root directory. See link:https://graphviz.org/resources/[this] for a list of software that can open the file and show the actual visual representation.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Ocasionalmente, pode ser útil ver uma representação visual das interações entre as várias etapas de construção. Nesses casos, adicionar `-Dquarkus.builder.graph-output=build.dot` ao compilar um aplicativo resultará na criação do arquivo `build.dot` no diretório raiz do projeto. Consulte link:https://graphviz.org/resources/[isto] para obter uma lista de softwares que podem abrir o arquivo e mostrar a representação visual real.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>It does not enable/disable SnapStart for your function, only the Quarkus optimizations.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Isso não ativa/desactiva o SnapStart para a sua função, apenas as otimizações do Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>It generates the following in  `./getting-started`:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Isso gera o seguinte em `./getting-started:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>It generates the following in `./getting-started`:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Isso gera o seguinte em `./getting-started:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>It instructs the application to use PostgreSQL for the database and to handle the database schema generation.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Ele instrui a aplicação a utilizar o PostgreSQL para a base de dados e para tratar da geração do esquema da base de dados.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>It is also possible to specify the default scope.
The default scope is only used if there is no scope declared on the bean class.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Também é possível especificar o escopo padrão. O escopo padrão é usado somente se não houver escopo declarado na classe do bean.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>It is also possible to use the `BeanRegistrationPhaseBuildItem` to register a synthetic bean. However, we recommend extension authors to stick with `SyntheticBeanBuildItem` which is more idiomatic for Quarkus.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Também é possível utilizar o `BeanRegistrationPhaseBuildItem` para registrar um bean sintético. No entanto, recomendamos aos autores de extensões que utilizem `SyntheticBeanBuildItem`, que é mais idiomático para o Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>It is also possible to write tests that verify an extension works correctly in development mode and can correctly
handle updates.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Também é possível escrever testes que verifiquem se uma extensão funciona corretamente no modo de desenvolvimento e se consegue lidar corretamente com as atualizações.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>It is aso possible to set the default scope via `AdditionalBeanBuildItem.Builder#setDefaultScope()`.
The default scope is only used if there is no scope declared on the bean class.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Também é possível definir o escopo padrão por meio de `AdditionalBeanBuildItem.Builder#setDefaultScope()` . O escopo padrão só é usado se não houver um escopo declarado na classe do bean.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>It is essential to understand that these issues are not Quarkus limitations or bugs but are due to the current state of the Java ecosystem which needs to evolve to become virtual thread friendly.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>É essencial compreender que estes problemas não são limitações ou bugs do Quarkus, mas sim devidos ao estado atual do ecossistema Java, que precisa evoluir para se tornar compatível com as threads virtuais.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>It is important to specify all the required artifacts to be added to the indexer. No artifacts are implicitly added transitively.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>É importante especificar todos os artefatos necessários a serem adicionados ao indexador. Nenhum artefato é adicionado implicitamente de forma transitória.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>It is likely that the annotation class is not part of the application index.
For example, classes from the _runtime module_ of a Quarkus extension are not indexed automatically.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>É provável que a classe de anotação não faça parte do índice da aplicação. Por exemplo, as classes do _módulo de tempo de execução_ de uma extensão do Quarkus não são indexadas automaticamente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>It is not possible to conditionally enable/disable additional beans via the `@IfBuildProfile`, `@UnlessBuildProfile`, `@IfBuildProperty` and `@UnlessBuildProperty` annotations as described in xref:cdi-reference.adoc#enable_build_profile[Enabling Beans for Quarkus Build Profile] and xref:cdi-reference.adoc#enable_build_properties[Enabling Beans for Quarkus Build Properties]. Extensions should inspect the configuration or the current profile and only produce an `AdditionalBeanBuildItem` if really needed.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Não é possível ativar/desativar condicionalmente beans adicionais através das anotações `@IfBuildProfile`, `@UnlessBuildProfile`, `@IfBuildProperty` e `@UnlessBuildProperty`, conforme descrito em xref:cdi-reference.adoc#enable_build_profile[Ativando Beans para o Perfil de Construção Quarkus] e xref:cdi-reference.adoc#enable_build_properties[Ativando Beans para as Propriedades de Construção Quarkus]. As extensões devem inspecionar a configuração ou o perfil atual e apenas produzir um `AdditionalBeanBuildItem` se for realmente necessário.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>It is not uncommon that an application has to interact with enterprise systems (like CRM systems) using a special protocol called https://www.odata.org/documentation/odata-version-3-0/batch-processing/[OData].
This protocol essentially uses a custom HTTP `Content-Type` which needs some glue code to work with the REST Client (creating the body is entirely up to the application - the REST Client can't do much to help).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Não é incomum que um aplicativo precise interagir com sistemas corporativos (como sistemas de CRM) usando um protocolo especial chamado https://www.odata.org/documentation/odata-version-3-0/batch-processing/[OData] . Esse protocolo usa essencialmente um `Content-Type` HTTP personalizado que precisa de algum código de cola para funcionar com o Cliente REST (a criação do corpo depende inteiramente da aplicação - o Cliente REST não pode fazer muito para ajudar).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>It is possible to inject beans from our test deployment directly into the test case</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>É possível injetar beans da nossa implantação de teste diretamente no caso de teste</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>It is possible to invoke a bean method from a xref:bytecode-recording[recorder method] though.
If you need to access a bean in a `@Record(STATIC_INIT)` build step then is must either depend on the `BeanContainerBuildItem` or wrap the logic in a `BeanContainerListenerBuildItem`.
The reason is simple - we need to make sure the CDI container is fully initialized and started.
However, it is safe to expect that the CDI container is fully initialized and running in a `@Record(RUNTIME_INIT)` build step.
You can obtain a reference to the container via `CDI.current()` or Quarkus-specific `Arc.container()`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>No entanto, é possível invocar um método de bean a partir de um xref:bytecode-recording[método gravador]. Se precisar acessar um bean em uma etapa de construção `@Record(STATIC_INIT)`, ele deverá depender do `BeanContainerBuildItem` ou envolver a lógica em um `BeanContainerListenerBuildItem`. O motivo é simples: precisamos garantir que o contêiner de CDI esteja totalmente inicializado e iniciado. No entanto, é seguro esperar que o contêiner de CDI esteja totalmente inicializado e em execução em uma etapa de construção `@Record(RUNTIME_INIT)`. Você pode obter uma referência ao contêiner em `CDI.current()` ou em `Arc.container()`, que é específico do Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>It is possible to mark a synthetic bean to be initialized during `RUNTIME_INIT`.
See the xref:writing-extensions.adoc#bootstrap-three-phases[Three Phases of Bootstrap and Quarkus Philosophy] for more information about the difference between `STATIC_INIT` and `RUNTIME_INIT`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>É possível marcar um bean sintético para ser inicializado durante `RUNTIME_INIT`. Consulte as xref:writing-extensions.adoc#bootstrap-three-phases[Três Fases do Bootstrap e a Filosofia do Quarkus] para obter mais informações sobre a diferença entre `STATIC_INIT` e `RUNTIME_INIT` .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>It is possible to only include a given `@BuildStep` under certain conditions.  The `@BuildStep` annotation
has two optional parameters: `onlyIf` and `onlyIfNot`.  These parameters can be set to one or more classes
which implement `BooleanSupplier`.  The build step will only be included when the method returns
`true` (for `onlyIf`) or `false` (for `onlyIfNot`).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>É possível incluir um determinado `@BuildStep` somente em determinadas condições. A anotação `@BuildStep` tem dois parâmetros opcionais: `onlyIf` e `onlyIfNot` . Esses parâmetros podem ser definidos para uma ou mais classes que implementam `BooleanSupplier` . A etapa de construção só será incluída quando o método retornar `true` (para `onlyIf` ) ou `false` (para `onlyIfNot` ).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>It is possible to write a textual explanation for the documentation default value, this is useful when it is generated: `@ConfigDocDefault("explain how this is generated")`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>É possível escrever uma explicação textual para o valor padrão da documentação, o que é útil quando ela é gerada: `@ConfigDocDefault("explain how this is generated")`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>It is sometimes useful to register an existing annotation that is not annotated with `@jakarta.enterprise.inject.Stereotype` as a CDI stereotype.
This is similar to what CDI achieves through `BeforeBeanDiscovery#addStereotype()`.
We are going to use `StereotypeRegistrarBuildItem` to get it done.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Às vezes, é útil registrar uma anotação existente que não esteja anotada com `@jakarta.enterprise.inject.Stereotype` como um estereótipo CDI. Isso é semelhante ao que a CDI faz por meio do `BeforeBeanDiscovery#addStereotype()` . Vamos usar o `StereotypeRegistrarBuildItem` para fazer isso.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>It produces several outputs in `/target`:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Gera diversos resultados no diretório `/target`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>It will try to auto-detect its options:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Ele tentará detectar automaticamente as suas opções:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>It's a mess because I don't know if my Jakarta Persistence persistence unit is using `JTA` or `Resource-level` Transaction</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>É uma bagunça porque não sei se minha unidade de persistência Jakarta Persistence está usando a transação 'JTA' ou 'Resource-level'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>It's a very simple REST endpoint, returning "Hello from RESTEasy Reactive" to requests on "/hello".</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>É um endpoint REST muito simples, retornando "Hello from RESTEasy Reactive" para requests em "/hello".</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>It's also possible to annotate a producer method as a global interceptor:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Também é possível anotar um método produtor como um interceptor global:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>It's must be a static method. Also, the parameter `defaultObjectMapper` will be resolved via CDI. If not found, it will throw an exception at runtime.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Tem que ser um método estático. Além disso, o parâmetro `defaultObjectMapper` será resolvido através do CDI. Se não for encontrado, será lançada uma exceção em tempo de execução.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>It's not uncommon to develop an extension in a multi-module Maven project that also contains an "example" module.
However, if you want to run the example in the development mode then the `-DnoDeps` system property must be used in order to exclude the local project dependencies.
Otherwise, Quarkus attempts to monitor the extension classes and this may result in weird class loading issues.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Não é incomum desenvolver uma extensão em um projeto Maven de múltiplos módulos que também contém um módulo de "exemplo". No entanto, se você quiser executar o exemplo no modo de desenvolvimento, a propriedade do sistema `-DnoDeps` deverá ser usada para excluir as dependências do projeto local. Caso contrário, o Quarkus tentará monitorar as classes de extensão e isso pode resultar em problemas estranhos de carregamento de classes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>It’s going to be a blast.  90 odd minutes of technical discussion, some live coding and a Q&amp;A.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Vai ser uma explosão.  90 minutos ímpares de discussão técnica, alguns códigos ao vivo e um Q&amp;A.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>JDBC datasources and ActiveMQ Artemis allow the enlistment and automatically register the `XAResourceRecovery`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os recursos de dados JDBC e o ActiveMQ Artemis permitem a inscrição e registram automaticamente o `XAResourceRecovery`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>JDBC datasources is part of `quarkus-agroal`, and it needs to use `quarkus.datasource.jdbc.transactions=XA`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os recursos de dados JDBC fazem parte de `quarkus-agroal` e precisam ser usados em `quarkus.datasource.jdbc.transactions=XA`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>JDK 11+ installed with `JAVA_HOME` configured appropriately</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>JDK 11+ instalado com 'JAVA_HOME' configurado adequadamente</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>JSON is now the lingua franca between microservices. In this guide, we see how you can get your REST services to consume and produce JSON payloads.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O JSON é agora a língua franca entre os microsserviços. Neste guia, veremos como você pode fazer com que seus serviços REST consumam e produzam JSON.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>JSON is now the lingua franca between microservices. See how you can get your REST services to consume and produce JSON payloads.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>JSON é agora a língua franca entre microsserviços. Veja como você pode fazer com que seus serviços REST consumam e produzam cargas JSON úteis.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>JSON representation of `Quote` objects will be used in messages sent to the RabbitMQ queues
and also in the server-sent events sent to browser clients.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A representação JSON dos objetos `Quote` será usada nas mensagens enviadas para as filas do RabbitMQ e também nos eventos enviados pelo servidor para os clientes do navegador.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>JVM container image</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Imagem do contêiner JVM</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Java preview features</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Java preview features</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Join the Quarkus Community</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Junte-se à Comunidade Quarkus</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Join us as we explore how Quarkus helps Java developers everywhere to be more productive, create modern masterpieces and, have a little bit more fun.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Junte-se a nós enquanto exploramos como o Quarkus ajuda desenvolvedores Java em todos os lugares a serem mais produtivos, criarem obras-primas modernas e se divertirem um pouco mais.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Json path of Principal Name</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Caminho Json do nome principal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Just assign the transaction xref:cdi.adoc#bean-scope[scope] to such beans using the `@TransactionScoped` annotation:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Basta atribuir o  link:cdi.html#bean-scope[âmbito] da transação a esses beans utilizando a anotação `@TransactionScoped`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Kafka</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Kafka</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Kafka Dev UI</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Kafka Dev UI</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Kafka Dev UI is part of the Quarkus Dev UI and is only available in development mode.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A Kafka Dev UI faz parte da interface de desenvolvimento do Quarkus e só está disponível no modo de desenvolvimento.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Kafka Streams with Quarkus</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Kafka Streams com Quarkus</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Keep confidential your database credentials by storing them in Vault.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Mantenha confidenciais suas credenciais de banco de dados armazenando-as no Vault.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Keep in mind that annotation transformers must be produced _before_ the bean discovery starts.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Tenha em mente que os transformadores de anotação devem ser produzidos _antes_ do início da descoberta de bean.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Keep in mind that not everybody will need JSON, so you need to make it optional.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Lembre-se que nem todo mundo vai precisar de JSON, por isso deve torná-lo opcional.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Keep in mind this style of declaration allows you to reference templates declared in other resources too:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Não se esqueça de que este estilo de declaração também permite fazer referência a modelos declarados em outros recursos:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Keycloak Admin Client</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Cliente de administração Keycloak</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Known limitations</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Limitações conhecidas</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Kogito Dev Services</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Dev Services Kogito</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Kotlin co-routines - a way to write asynchronous code in a sequential manner</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Corrotinas Kotlin - uma forma de escrever código assíncrono de forma sequencial</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Kube-Native</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Kube-Nativo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Kubernetes Native</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Kubernetes nativo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Kubernetes configuration example</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de configuração do Kubernetes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Kubernetes, but also bare metal</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Kubernetes, mas também bare metal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Kubernetes-native Spring Apps on Quarkus</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Aplicativos Spring nativos do Kubernetes no Quarkus</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Lastly, the `producer` will read the quotes and send them to the browser using server-sent events.
The user will therefore see the quote price updated from _pending_ to the received price in real-time.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Por fim, o site `producer` lerá as cotações e as enviará ao navegador usando eventos enviados pelo servidor. Portanto, o usuário verá o preço da cotação _pendente_ para o preço recebido em tempo real.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Lead Developer on the Adoptium Technical Steering Committee</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Desenvolvedor Líder no Comitê de Direção Técnica da Adoptium</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Learn Quarkus basics by standing up a straightforward application serving a hello endpoint.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Aprenda os conceitos básicos do Quarkus levantando um aplicativo direto que atende a um ponto de extremidade de saudação.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Learn everything you need to know about the Qute template engine.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Saiba tudo o que você precisa saber sobre o mecanismo de modelo do Qute.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Learn how to benefit from Java 19 virtual threads when writing REST services in Quarkus.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Saiba como se beneficiar dos threads virtuais Java 19 ao escrever serviços REST no Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Learn how to build and push container images with Jib, S2I or Docker as part of the Quarkus build.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Saiba como criar e enviar imagens de contêiner com Jib, S2I ou Docker como parte da compilação do Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Learn how to create a Hello World Quarkus app.
This guide covers:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Saiba como criar um aplicativo Hello World Quarkus.
Este guia abrange:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Learn how to create a reactive application with Quarkus and explore the different features offered by Quarkus.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Saiba como criar um aplicativo reativo com o Quarkus e explore os diferentes recursos oferecidos pelo Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Learn how to create, package, and deploy a Hello World Quarkus application including a JAX-RS endpoint and functional tests.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Saiba como criar, empacotar e implantar um aplicativo Hello World Quarkus, incluindo um endpoint JAX-RS e testes funcionais.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Learn how to customize the Redis client to your needs.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Saiba como personalizar o cliente Redis de acordo com suas necessidades.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Learn how to get your extension contribute features to the Dev UI.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Saiba como fazer com que a sua extensão contribua com funcionalidades para a interface do usuário do desenvolvedor.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Learn how to implement highly performant, low-overhead database applications on Quarkus with the xref:reactive-sql-clients.adoc[Reactive SQL Clients].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Learn how to implement highly performant, low-overhead database applications on Quarkus with the xref:reactive-sql-clients.adoc[Reactive SQL Clients].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Learn how to integrate your extension with Quarkus' CDI container.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Saiba como integrar sua extensão com o contêiner CDI do Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Learn how to use SmallRye Stork for service discovery and load balancing.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Saiba como usar o SmallRye Stork para descoberta de serviços e balanceamento de carga.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Learn how to use SmallRye Stork in a Kubernetes environment.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Saiba como usar o SmallRye Stork em um ambiente Kubernetes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Learn how to use continuous testing in your Quarkus Application.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Saiba como usar o teste contínuo em sua aplicação Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Learn how you can reduce the size of your native executables with UPX.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Saiba como você pode reduzir o tamanho de seus executáveis nativos com UPX.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Learn more about Quarkus class loading infrastructure.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Saiba mais sobre a infraestrutura de carregamento de classes do Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Learn more about Quarkus extensions metadata</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Saiba mais sobre os metadados das extensões do Quarkus</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Learn more about Quarkus integrations in IDEs.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Saiba mais sobre as integrações do Quarkus em IDEs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Learn more about Quarkus reactive architecture.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Saiba mais sobre a arquitetura reativa do Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Learn more about configuring Quarkus' Vert.x based HTTP layer - and Undertow if you are using servlets.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Saiba mais sobre como configurar a camada HTTP baseada em Vert.x do Quarkus - e Undertow se você estiver usando servlets.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Learn more about developing reactive applications with Quarkus.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Saiba mais sobre como desenvolver aplicações reativas com o Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Learn more about how Quarkus handles authentication.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Saiba mais sobre como o Quarkus lida com a autenticação.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Learn more about how to configure your Quarkus applications.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Saiba mais sobre como configurar as suas aplicações Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Learn more about how to develop reactive applications with Quarkus.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Saiba mais sobre como desenvolver aplicações reactivas com o Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Learn more about how you can pass contextual information with SmallRye Context Propagation.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Saiba mais sobre como você pode passar informações contextuais com o SmallRye Context Propagation.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Learn more about how you can send email from a Quarkus application with our reactive email client.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Saiba mais sobre como você pode enviar e-mails de uma aplicação Quarkus com nosso cliente de e-mail reativo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Learn more about how you can use templating in your applications with the Qute template engine.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Saiba mais sobre como você pode usar o modelo de modelagem em seus aplicativos com o mecanismo de modelo do Qute.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Learn more about how you extract content from documents using the Apache Tika toolkit.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Saiba mais sobre como extrair conteúdo de documentos usando o kit de ferramentas Apache Tika.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Learn more about the Scheduler extension.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Saiba mais sobre a extensão Scheduler.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Learn more about the base runtime image used by Quarkus for native executables and how you can tweak it.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Saiba mais sobre a imagem de tempo de execução base usada pelo Quarkus para executáveis nativos e como você pode ajustá-la.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Learn more about the notion of extension registry and how you can use your own.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Saiba mais sobre a noção de registro de extensão e como você pode usar o seu próprio.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Learn more about what we call a Platform in the Quarkus world.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Saiba mais sobre o que chamamos de Plataforma no mundo Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Learn step by step how to build a simple extension.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Aprenda passo a passo como construir uma extensão simples.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Legacy API approach</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Abordagem API legada</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Let us assume that the Quarkus extension needs to provide a `Tracer` bean which application code is meant to inject into its own beans.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Suponhamos que a extensão Quarkus precisa fornecer um `Tracer` bean que o código da aplicação deve injetar nos seus próprios beans.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Let's assume you have the following client:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Vamos supor que você tem o seguinte cliente:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Let's continue our API with `getSingle`:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Vamos continuar a nossa API com `getSingle`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Let's imagine you have a regular Quarkus project, generated from the https://code.quarkus.io[Quarkus project generator].
The default configuration is enough, but you can also select some extensions if you want.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Vamos imaginar que o você tenha um projeto Quarkus normal, gerado a partir do link:https://code.quarkus.io[gerador de projetos Quarkus] . A configuração padrão é suficiente, mas você também pode selecionar algumas extensões, se desejar.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Let's keep extending on our simple HTML page that contains the item name, price and add a discounted price.
The discounted price is sometimes called a "computed property".
We will implement a template extension method to render this property easily.
Let's update our template:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Vamos continuar a estender a nossa página HTML simples que contém o nome do item, o preço e adicionar um preço com desconto. O preço com desconto é por vezes designado por “propriedade computada”. Vamos implementar um método de extensão de modelo para processar esta propriedade facilmente. Vamos atualizar o nosso modelo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Let's look at the classic 'Hello World' type example. To do this the Quarkus way we would create a recorder as follows:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Vejamos o exemplo clássico do tipo 'Olá Mundo'. Para fazer isto à maneira do Quarkus, criaríamos um gravador como se segue:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Let's modify the application and add a companion bean.
Create the `src/main/java/org/acme/GreetingService.java` file with the following content:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Vamos modificar a aplicação e adicionar um companion bean.
Crie o arquivo `src/main/java/org/acme/GreetingService.java` com o seguinte conteúdo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Let's move the database files to a faster disk;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Let's move the database files to a faster disk;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Let's see an example about how to provide the HTTP Client Options via CDI:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Vejamos um exemplo de como fornecer as Opções de Cliente HTTP através de CDI:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Let's see an example about how to register your own custom redirect handler using the `@ClientRedirectHandler` annotation:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Vejamos um exemplo sobre como registrar o seu próprio manipulador de redirecionamento personalizado utilizando a anotação `@ClientRedirectHandler`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Let's start a Redis server on the port 6379 using:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Vamos iniciar um servidor Redis na porta 6379 usando:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Let's start again with the template:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Vamos começar de novo com o modelo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Let's start with a simple _Hello_ service.
Create the `src/main/proto/helloworld.proto` file with the following content:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Vamos começar com um simples _Hello_ service. Crie o arquivo `src/main/proto/helloworld.proto` com o seguinte conteúdo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Let's start with the `Fruit` entity.Create the `src/main/java/org/acme/hibernate/orm/panache/Fruit.java` file with the following content:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Vamos começar com a entidade `Fruit`. Crie o arquivo `src/main/java/org/acme/hibernate/orm/panache/Fruit.java` com o seguinte conteúdo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Let's start with the `getAll` method. The `getAll` method returns all the fruits stored in the database.
In the `FruitResource`, add the following code:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Vamos começar com o método `getAll` . O método `getAll` retorna todas as frutas armazenadas no banco de dados. Em `FruitResource` , adicione o seguinte código:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Let's suppose we have a `SampleService` bean whose `get()` method returns a list of samples.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Vamos supor que temos um bean `SampleService` cujo método `get()` devolve uma lista de amostras.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Let's suppose we have a simple class like this:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Vamos supor que temos uma classe simples como esta:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Let's take the instrumentable object (`io.agroal.api.AgroalDataSourceMetrics`) case first. In this case, you can do the following:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Vejamos primeiro o caso do objeto instrumentável ( `io.agroal.api.AgroalDataSourceMetrics`). Neste caso, você pode fazer o seguinte:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Let’s go to the quark of things.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Vamos ao quark das coisas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Let’s start with the basics: HTTP microservices. In this context, you need to develop an HTTP endpoint, often called REST or CRUD. You process incoming HTTP requests, and to do so you often need to rely on other services, such as databases, or another HTTP service.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Vamos começar com o básico: microsserviços HTTP. Nesse contexto, você precisa desenvolver um endpoint HTTP, geralmente chamado de REST ou CRUD. Você processa solicitações HTTP de entrada e, para isso, geralmente precisa confiar em outros serviços, como bancos de dados ou outro serviço HTTP.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Let’s take a very simple application handling &lt;em&gt;elements&lt;/em&gt; from the periodic table. The code would be something like:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Vamos pegar uma aplicação muito simples manipulando &lt;em&gt;elementos&lt;/em&gt; da tabela periódica. O código seria algo como:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>License</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Licença</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Lightweight </seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Leve</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Like any other Quarkus applications, you can package it with: `mvn package`.
You can also package the application into a native executable with: `mvn package -Dnative`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Como qualquer outra aplicação Quarkus, você pode empacotá-la com: `mvn package`. Você também pode empacotar a aplicação em um executável nativo com: `mvn package -Dnative`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Like most Maven plugins, the Quarkus Maven Plugin has a `help` goal that prints the description of the plugin, listing all available goals as well as their description.
It is also possible to print out detailed information about a goal, all its parameters and their default values. For instance, to see the help for the `create` goal, run:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Como a maioria dos plugins Maven, o Plugin Maven do Quarkus tem um objetivo `help` que imprime a descrição do plugin, listando todos objetivos disponíveis, bem como sua descrição. Também é possível imprimir informações detalhadas sobre um objetivo, todos os seus parâmetros e seus valores padrão. Por exemplo, para ver a ajuda do objetivo `create` , execute:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Like most Quarkus extensions, the Quarkus AWS Lambda HTTP/REST extensions support Live Coding.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Tal como a maioria das extensões Quarkus, as extensões Quarkus AWS Lambda HTTP/REST suportam Live Coding.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Limit of client memory usage (in byte). The 64M default can guarantee a high producer throughput.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Limite de uso de memória do cliente (em byte). O padrão de 64 milhões pode garantir uma alta taxa de transferência do produtor.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Links these three modules where necessary:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Liga estes três módulos onde necessário:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Liquibase MongoDB</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Liquibase MongoDB</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>List all the configuration properties per extensions</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Listar todas as propriedades de configuração por extensões</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>List all the keys</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Lista todas as chaves</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Listener name for lookup. Clients can use listenerName to choose one of the listeners as the service URL to create a connection to the broker as long as the network is accessible."advertisedListeners" must enabled in broker side.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Nome do ouvinte para pesquisa. Os clientes podem usar listenerName para escolher um dos ouvintes como a URL do serviço para criar uma conexão com o broker, desde que a rede esteja acessível." advertisedListeners" deve ser habilitado no lado do corretor.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Listing and creating topics</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Listar e criar tópicos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Live Coding</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Codificação ao vivo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Live Coding and Simulating AWS Lambda Environment Locally</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Live Coding e simulação local do ambiente AWS Lambda</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Live Coding and Unit/Integration Testing</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Live Coding e testes unitários/integração</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Live reload is generally triggered by an HTTP request, however not all applications are HTTP applications and some extensions
may want to trigger live reload based on other events. To do this you need to implement `io.quarkus.dev.spi.HotReplacementSetup`
in your runtime module, and add a `META-INF/services/io.quarkus.dev.spi.HotReplacementSetup` that lists your implementation.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O recarregamento ao vivo geralmente é acionado por uma requisição HTTP, mas nem todas as aplicações são aplicações HTTP e algumas extensões podem querer acionar o recarregamento ao vivo com base em outros eventos. Para isso, você precisa implementar o `io.quarkus.dev.spi.HotReplacementSetup` no seu módulo de tempo de execução e adicionar um `META-INF/services/io.quarkus.dev.spi.HotReplacementSetup` que liste a sua implementação.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Log Docker into your ECR registry and push the Docker image to it</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Registar o Docker no seu registo ECR e enviar a imagem Docker para o mesmo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Logging traffic</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Registrando tráfego</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Look at the return type; it returns a `Uni` of `List&lt;Fruit&gt;`.
`Uni` is an asynchronous type.
It's a bit like a future.
It's a placeholder that will get its value (item) later.
When it receives the item (Mutiny says it _emits_ its item), you can attach some behavior.
That's how we express the continuation: get a uni, and when the uni emits its item, execute the rest of the processing.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Observe o tipo de retorno; ele retorna um `Uni` de `List&lt;Fruit&gt;` . `Uni` é um tipo assíncrono. É um pouco como um future. É um espaço reservado que obterá seu valor (item) mais tarde. Quando ele recebe o item (o Mutiny diz que ele _emite_ seu item), você pode anexar algum comportamento. É assim que expressamos a continuação: obter um uni e, quando o uni emitir seu item, executar o restante do processamento.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Look for a config.xml classpath resource</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Procura por um recurso classpath config.xml</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>MAVEN_OPTS='--enable-preview' ./mvnw install
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>MAVEN_OPTS='--enable-preview' ./mvnw install
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>MAVEN_OPTS='--enable-preview' quarkus build
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>MAVEN_OPTS='--enable-preview' quarkus build
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Mailer Reference Guide</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Guia de Referência do Mailer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Make all classes annotated with `@Startup` unremovable.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Tornar todas as classes anotadas com `@Startup` não removíveis.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Make sure you import the reactive variant of `PanacheEntity`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Certifique-se de importar a variante reativa de `PanacheEntity`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Make sure you reference the image you uploaded previously (assumes that a role exists that can be used to run the lambda). Please note that it is not unlikely that for the JVM lambda function, the default memory limit of `128Mb` will not be enough to run the function. In that case, you can increase the memory limit when creating the function by providing the `--memory-size 256` parameter to your `aws lambda create-function` command. You can also adjust the function in the AWS console after you've created it.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Certifique-se de que faz referência à imagem que carregou anteriormente (pressupõe que existe uma função que pode ser utilizada para executar o lambda). Observe que não é improvável que, para a função lambda da JVM, o limite de memória padrão de `128Mb` não seja suficiente para executar a mesma. Nesse caso, pode aumentar o limite de memória ao criar a função, fornecendo o parâmetro `--memory-size 256` ao seu comando `aws lambda create-function`. Também pode ajustar a função no console AWS depois de a ter criado.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Make sure your `application.properties` contains the configuration explained in xref:native[the native compilation section].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Certifique-se de que o seu `application.properties` contém a configuração explicada na xref:native[seção de compilação nativa].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Make the `Item` object accessible in the template.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Tornar o objeto `Item` acessível no modelo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Manage Non-CDI Service</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Gerenciar Serviço Não CDI</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Manage your MongoDB schema migrations with Liquibase.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Gerencie suas migrações de esquema do MongoDB com o Liquibase.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Mandatory</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Obrigatório</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Mandrel or GraalVM installed and xref:building-native-image.adoc#configuring-graalvm[configured appropriately]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Mandrel ou GraalVM instalado e xref:building-native-image.adoc#configuring-graalvm[configurado adequadamente]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Manually using the micro base image</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Utilizando a micro imagem base manualmente</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Manually using the minimal base image</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Utilizando manualmente a imagem base mínima</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Mapping Configuration to Objects</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Mapeando a configuração para objetos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Maven</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Maven</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Maven goals reference</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Referência dos objetivos do Maven</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Max backoff interval (in nanosecond).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Intervalo máximo de recuo (em nanossegundos).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Maximum duration for completing a request.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Duração máxima para concluir uma solicitação.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Maximum number of lookup requests allowed on each broker connection to prevent overloading a broker.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Número máximo de solicitações de pesquisa permitidas em cada conexão do broker para evitar a sobrecarga de um broker.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Maximum number of rejected requests of a broker in a certain time frame (60 seconds) after the current connection is closed and the client creating a new connection to connect to a different broker.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Número máximo de solicitações rejeitadas de um broker em um determinado período de tempo (60 segundos) após a conexão atual ser fechada e o cliente criar uma nova conexão para se conectar a um broker diferente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Maximum number of times that a message will be redelivered before being sent to the dead letter topic</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Número máximo de vezes que uma mensagem será entregue novamente antes de ser enviada para o tópico de letra morta</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Maximum read time of a request.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Tempo máximo de leitura de uma solicitação.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Maximum times of redirected lookup requests.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Tempos máximos de solicitações de pesquisa redirecionadas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>May 2, 2019</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>maio 2, 2019</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Measuring Performance</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Medindo o desempenho</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Measuring the coverage of your tests</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Medindo a cobertura de seus testes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>MenuPageBuildItem menuPageBuildItem = new MenuPageBuildItem();
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>MenuPageBuildItem menuPageBuildItem = new MenuPageBuildItem();
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Message data compression type used by a producer. +
Available options: +
* https://github.com/lz4/lz4[LZ4] +
* https://zlib.net/[ZLIB] +
* https://facebook.github.io/zstd/[ZSTD] +
* https://google.github.io/snappy/[SNAPPY]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Tipo de compactação de dados de mensagem usado por um produtor. +
Opções disponíveis: +
* https://github.com/lz4/lz4[LZ4] +
* https://zlib.net/[ZLIB] +
* https://facebook.github.io/zstd/[ZSTD] +
* https://google.github.io/snappy/[SNAPPY]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Message routing logic for producers on https://pulsar.apache.org/docs/concepts-architecture-overview#partitioned-topics[partitioned topics]. +
Apply the logic only when setting no key on messages. +
Available options are as follows: +
* `pulsar.RoundRobinDistribution`: round robin +
* `pulsar.UseSinglePartition`: publish all messages to a single partition +
* `pulsar.CustomPartition`: a custom partitioning scheme</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Lógica de roteamento de mensagens para produtores em https://pulsar.apache.org/docs/concepts-architecture-overview#partitioned-topics[partitioned topics]. +
Aplique a lógica somente ao definir nenhuma tecla nas mensagens. +
As opções disponíveis são as seguintes: +
* 'pulsar. RoundRobinDistribution': round robin +
* 'pulsar. UseSinglePartition': publicar todas as mensagens em uma única partição +
* 'pulsar. CustomPartition': um esquema de particionamento personalizado</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Message send timeout in ms. +
If a message is not acknowledged by a server before the `sendTimeout` expires, an error occurs.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Tempo limite de envio de mensagem em ms. +
Se uma mensagem não for reconhecida por um servidor antes que o 'sendTimeout' expire, ocorrerá um erro.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Messaging</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Mensagens</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Metadata Sources</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Fontes de metadados</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Method parameter injection (for build step methods only)</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Injeção de parâmetros de métodos (apenas para métodos de etapas de construção)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Methods annotated with `@ClientExceptionMapper` can also take a `java.lang.reflect.Method` parameter which is useful if the exception mapping code needs to know the REST Client method that was invoked and caused the exception mapping code to engage.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os métodos anotados com `@ClientExceptionMapper` também podem receber um parâmetro `java.lang.reflect.Method`, o que é útil se o código de mapeamento de exceções precisar conhecer o método do Cliente REST que foi invocado e causou a ativação do código de mapeamento de exceções.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Methods on a recorder can return a value, which must be proxiable (if you want to return a non-proxiable item wrap it
in `io.quarkus.runtime.RuntimeValue`). These proxies may not be invoked directly, however they can be passed
into other recorder methods. This can be any recorder method, including from other `@BuildStep` methods, so a common pattern
is to produce `BuildItem` instances that wrap the results of these recorder invocations.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os métodos em um gravador podem retornar um valor, que deve ser proxiable (se você quiser retornar um item não proxiable, envolva-o em `io.quarkus.runtime.RuntimeValue` ). Esses proxies não podem ser invocados diretamente, mas podem ser passados para outros métodos do gravador. Esse pode ser qualquer método de gravador, inclusive de outros métodos `@BuildStep`, portanto, um padrão comum é produzir instâncias `BuildItem` que envolvam os resultados dessas invocações de gravadores.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>MicroProfile REST Client specification does not allow setting proxy credentials. In order to specify proxy user and proxy password programmatically, you need to cast your `RestClientBuilder` to `RestClientBuilderImpl`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A especificação do Cliente REST MicroProfile não permite a definição de credenciais de proxy. Para especificar o usuário e a senha do proxy de forma programática, é necessário enviar o seu `RestClientBuilder` para `RestClientBuilderImpl`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Micrometer provides the following convenience mechanisms for recording durations.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Micrometer provides the following convenience mechanisms for recording durations.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Microservices tend to come in systems.  Let’s now imagine you need to access another HTTP endpoint.  You can use an HTTP client directly; this is nothing more than repeating boilerplate code.  Quarkus provides a way to call HTTP endpoints easily using the &lt;a href="https://quarkus.io/guides/rest-client"&gt;MicroProfile Rest Client API&lt;/a&gt;.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os microsserviços tendem a vir em sistemas.  Agora vamos imaginar que você precise acessar outro endpoint HTTP.  Você pode usar um cliente HTTP diretamente; isso nada mais é do que repetir código clichê.  O Quarkus fornece uma maneira de chamar endpoints HTTP facilmente usando a &lt;a href="https://quarkus.io/guides/rest-client"&gt;MicroProfile Rest Client API&lt;/a&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Migrating from RESTEasy Classic to RESTEasy Reactive</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Migrando do RESTEasy Classic para o RESTEasy Reactive</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Miscellaneous</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Diversos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Mocking does not work when using `@QuarkusIntegrationTest`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A simulação não funciona quando se utiliza `@QuarkusIntegrationTest`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Mocking the client for tests</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Simulação do cliente para testes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Mocking with InjectMock</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Simulando com InjectMock</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Mocking with QuarkusMock</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Simulando com o QuarkusMock</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Model</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Modelo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Modern applications often need to run specific tasks periodically.
In this guide, you learn how to schedule periodic tasks.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Aplicações modernas geralmente precisam executar tarefas específicas periodicamente. Neste guia, você aprenderá a agendar tarefas periódicas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Modern applications often need to run specific tasks periodically. In this guide, you learn how to schedule periodic tasks.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Aplicações modernas geralmente precisam executar tarefas específicas periodicamente. Neste guia, você aprenderá a agendar tarefas periódicas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Modifying `function.zip`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Modificar `function.zip`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>MongoDB Client</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Cliente MongoDB</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>MongoDB with Panache</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>MongoDB com Panache</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>MongoDB with Panache and Kotlin</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>MongoDB com Panache e Kotlin</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Monitoring Option</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Opção de monitoração</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Monopolization cases</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Casos de monopolização</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>More Spring guides</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Mais guias de Spring</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>More complex code</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Código mais complexo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>More information about the health extension can be found in xref:microprofile-health.adoc[the Microprofile Health guide].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Mais informações sobre a extensão health podem ser encontradas no link:microprofile-health.html[guia Microprofile Health].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>More information about this annotation can be found on the javadoc of link:https://javadoc.io/doc/io.quarkus/quarkus-rest-client-reactive/latest/io/quarkus/rest/client/reactive/ClientFormParam.html[`@ClientFormParam`].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Mais informações sobre esta anotação podem ser encontradas no javadoc do link:https://javadoc.io/doc/io.quarkus/quarkus-rest-client-reactive/latest/io/quarkus/rest/client/reactive/ClientFormParam.html[`@ClientFormParam`].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>More information about this annotation can be found on the javadoc of link:https://javadoc.io/doc/io.quarkus/quarkus-rest-client-reactive/latest/io/quarkus/rest/client/reactive/ClientQueryParam.html[`@ClientQueryParam`].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Mais informações sobre esta anotação podem ser encontradas no javadoc do link:https://javadoc.io/doc/io.quarkus/quarkus-rest-client-reactive/latest/io/quarkus/rest/client/reactive/ClientQueryParam.html[`@ClientQueryParam`].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Most changes are pushed upstream to help the underlying library run on GraalVM</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A maioria das alterações são encaminhadas para a versão original do código para ajudar a biblioteca subjacente a rodar no GraalVM</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Mount the host's directory `target/native-image` to the container's `/work`. Thus, the generated binary will also be written to this directory.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Monte o diretório raiz `target/native-image` no diretório do contêiner `/work`. Assim, o binário gerado também será escrito neste diretório.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Multi build items</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Itens de construção múltipla</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Multi build values are always considered _optional_.  If not present, an empty list will be injected.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os valores de construção múltipla são sempre considerados _opcionais_. Se não estiverem presentes, será injetada uma lista vazia.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Multi-module Maven Projects and the Development Mode</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Projetos Maven de Múltiplos Módulos e o Modo de Desenvolvimento</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Multipart Form support</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Suporte a Formulários Multi-partes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Multipart mixed / OData usage</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Utilização de multi-partes mistas / OData</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Multiple or "multi" build items are final classes which extend `io.quarkus.builder.item.MultiBuildItem`.  Any number of
multi build items of a given class may be produced by any number of steps, but any steps which consume multi build items
will only run _after_ every step which can produce them has run.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Itens de construção múltipla ou "multi" são classes finais que estendem `io.quarkus.builder.item.MultiBuildItem`. Qualquer número de itens de construção múltipla de uma determinada classe pode ser produzido por qualquer número de etapas, mas qualquer etapa que consuma itens de construção múltipla só será executada _após a_ execução de todas as etapas que podem produzi-los.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Multiple ways to connect with others via forum, stack, chat, or email groups.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Várias maneiras de se conectar com outras pessoas por meio de fóruns, Stack Overflow, bate-papo ou grupos de e-mail.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Mutiny</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Mutiny</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Mutiny - an intuitive and event-driven reactive programming library</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Mutiny - uma biblioteca de programação reativa intuitiva e orientada a eventos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Mutiny, Reactive for Bare Mortals</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Mutiny, reativo para simples mortais</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Name of the dead letter topic where the failing messages will be sent</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Nome do tópico de dead letter para onde as mensagens com falha serão enviadas</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Name of the initial subscription name of the dead letter topic</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Nome do nome da assinatura inicial do tópico de dead letter</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Name of the retry topic where the failing messages will be sent</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Nome do tópico de repetição para onde as mensagens com falha serão enviadas</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Native Executable Support</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Suporte a Executáveis Nativos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Native Image Pre-Boot</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Pré-inicialização da imagem nativa</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Native Reference</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Referência nativa</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Native executable container image</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Imagem de contêiner com executável nativo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Naturally this handling is per REST Client. `@ClientExceptionMapper` uses the default priority if the `priority` attribute is not set and the normal rules of invoking all handlers in turn apply.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Naturalmente, este tratamento é efetuado por Cliente REST. `@ClientExceptionMapper` utiliza a prioridade predefinida se o atributo `priority` não estiver definido e aplicam-se as regras normais de invocação de todos os manipuladores sucessivamente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Naturally, if you want to declare templates at the top-level, directly in `/src/main/resources/templates/hello.txt`, for example,
you can declare them in a top-level (non-nested) `Templates` class:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Naturalmente, se quiser declarar os modelos ao nível superior, diretamente em `/src/main/resources/templates/hello.txt`, por exemplo, pode declará-los numa classe `Templates` de nível superior (não aninhada):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Naturally, you can also group these parameters into a containing class:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Naturalmente, também é possível agrupar estes parâmetros numa classe que os contenha:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Need More Than Community Support?</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Precisa de mais do que apoio da comunidade?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Neo4j Client</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Cliente Neo4j</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Next Steps</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Próximos Passos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Next steps</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Próximas etapas</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Next you must copy some files from your GraalVM distribution into `src/main/zip.native/`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Em seguida, deve copiar alguns arquivos da sua distribuição GraalVM para `src/main/zip.native/`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Next, we need to update the functional test to reflect the changes made to the endpoint.
Edit the `src/test/java/org/acme/rest/client/ExtensionsResourceTest.java` file and change the content of the test to:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Em seguida, precisamos atualizar o teste funcional para refletir as alterações feitas no endpoint. Edite o arquivo `src/test/java/org/acme/rest/client/ExtensionsResourceTest.java` e altere o conteúdo do teste para:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Next, we want to expose our application using the Kubernetes Ingress resource:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A seguir, queremos expor nossa aplicação usando o recurso Kubernetes Ingress:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Next, you can register your filter using the `@RegisterProvider` annotation:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Em seguida, pode registrar o seu filtro utilizando a anotação `@RegisterProvider`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>No hassle native executable generation</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Geração de executável nativo sem complicações</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>No problem.
You can generate the bytecode of a bean class manually and then all you need to do is to produce a `GeneratedBeanBuildItem` instead of `GeneratedClassBuildItem`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Sem problemas. Você pode gerar o bytecode de uma classe de bean manualmente e, então, tudo o que precisa fazer é produzir um `GeneratedBeanBuildItem` em vez de `GeneratedClassBuildItem` .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Non Application endpoints</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Endpoints não Relacionados à Aplicação</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Normally a build step is included whenever it produces any build item which is in turn consumed by any other build step.  In this way,
only the steps necessary to produce the final artifact(s) are included, and steps which pertain to extensions which are
not installed or which only produce build items which are not relevant for the given artifact type are excluded.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Normalmente, uma etapa de construção é incluída sempre que produz qualquer item de construção que, por sua vez, é consumido por qualquer outra etapa de construção. Dessa forma, apenas as etapas necessárias para produzir o(s) artefato(s) final(is) são incluídas, e as etapas relacionadas a extensões que não estão instaladas ou que produzem apenas itens de construção que não são relevantes para o tipo de artefato em questão são excluídas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Normally it is an error for a step which is included to consume a simple build item that is not produced by any other
step.  In this way, it is guaranteed that all the declared values will be present and non-`null` when a step is run.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Normalmente, é um erro uma etapa incluída consumir um item de construção simples que não é produzido por nenhuma outra etapa. Dessa forma, é garantido que todos os valores declarados estarão presentes e não `null` quando uma etapa for executada.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Not all changes can be pushed upstream, extensions host Substrate VM substitutions - which is a form of code patching - so that libraries can run</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Nem todas as alterações podem ser encaminhadas para a versão original do código, as extensões hospedam substituições da Substrate VM - que é uma forma de correção de código - para que as bibliotecas possam ser executadas</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Not all configuration or resources can be consumed at build time. If you have classpath resources that the runtime needs to access, you need to inform the build phase that these resources need to be copied into the native image. This is done by producing one or more `NativeImageResourceBuildItem` or `NativeImageResourceBundleBuildItem` in the case of resource bundles. Examples of this are shown in this sample `registerNativeImageResources` build step:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Nem todas as configurações ou recursos podem ser consumidos no momento da construção. Se você tiver recursos do classpath que o tempo de execução precisa acessar, é necessário informar à fase de construção que esses recursos precisam ser copiados para a imagem nativa. Isso é feito produzindo um ou mais `NativeImageResourceBuildItem` ou `NativeImageResourceBundleBuildItem` no caso de pacotes de recursos. Exemplos disso são mostrados neste exemplo de etapa de construção `registerNativeImageResources`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Not authorized
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Not authorized
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Not available at build, read at start in all modes.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Não disponível na construção, lido no início em todos os modos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Note how the RabbitMQ broker location is configured.
The `rabbitmq-host` and `rabbitmq-port` (`AMQP_HOST` and `AMQP_PORT` environment variables) properties configure location.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Observe como o local do broker RabbitMQ está configurado. As propriedades `rabbitmq-host` e `rabbitmq-port` (variáveis de ambiente `AMQP_HOST` e `AMQP_PORT` ) configuram o local.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Note that UPX compression:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Note que a compactação UPX:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Note that `QuarkusUnitTest` is in the `quarkus-junit5-internal` module.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Note que `QuarkusUnitTest` está no módulo `quarkus-junit5-internal`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Note that `org.acme.rest.client.ExtensionsService` _must_ match the fully qualified name of the `ExtensionsService` interface we created in the previous section.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Note que `org.acme.rest.client.ExtensionsService` _deve_ corresponder ao nome totalmente qualificado da interface `ExtensionsService` que criamos na seção anterior.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Note that a `@BuildStep` method will only be called if it produces something that another consumer or the final output
requires. If there is no consumer for a particular item then it will not be produced. What is required will depend on
the final target that is being produced.  For example, when running in developer mode the final output will not ask
for GraalVM-specific build items such as `ReflectiveClassBuildItem`, so methods that only produce these
items will not be invoked.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Observe que um método `@BuildStep` só será chamado se produzir algo que outro consumidor ou o resultado final exija. Se não houver um consumidor para um determinado item, ele não será produzido. O que é necessário dependerá do destino final que está sendo produzido. Por exemplo, ao executar no modo de desenvolvedor, a saída final não solicitará itens de construção específicos do GraalVM, como `ReflectiveClassBuildItem`, portanto, os métodos que produzem apenas esses itens não serão chamados.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Note that all three models can be used in a single application.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Note-se que os três modelos podem ser utilizados numa única aplicação.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Note that if an interface method contains an argument annotated with `@QueryParam`, that argument will take
priority over anything specified in any `@ClientQueryParam` annotation.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Observe que, se um método de interface contiver um argumento anotado com `@QueryParam` , esse argumento terá prioridade sobre qualquer coisa especificada em qualquer anotação `@ClientQueryParam` .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Note that in this case we have one incoming and one outgoing connector configuration, each one distinctly named.
The configuration keys are structured as follows:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Observe que, nesse caso, temos uma configuração de conector de entrada e outra de saída, cada uma com um nome distinto. As chaves de configuração são estruturadas da seguinte forma:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Note that the Kafka advertised address is automatically configured with the chosen port.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Note que o endereço anunciado do Kafka é automaticamente configurado com a porta escolhida.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Note that the Pulsar advertised address is automatically configured with the chosen port.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Note que o endereço anunciado pelo Pulsar é automaticamente configurado com a porta escolhida.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Note that the path above does not start with a '/', indicating it is a relative path. The above
endpoint will be served relative to the configured non-application endpoint root. The non-application
endpoint root is `/q` by default, which means the resulting endpoint will be found at `/q/custom-endpoint`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Observe que o caminho acima não começa com um '/', o que indica que é um caminho relativo. O endpoint acima será servido em relação à raiz configurada do endpoint sem aplicação. A raiz do endpoint que não é de aplicação é `/q` por padrão, o que significa que o endpoint resultante será encontrado em `/q/custom-endpoint`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Note that the virtual thread may not be re-mounted on the same carrier thread.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Note-se que a thread virtual pode não ser montada novamente na mesma carrier thread.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Note that we don't trigger the rendering - this is done automatically by a special `ContainerResponseFilter` implementation.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Note-se que não acionamos a renderização - isto é feito automaticamente por uma implementação especial do `ContainerResponseFilter`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Note that when using xref:bytecode-recording[bytecode recording], the implicitly generated class can be declared to be weak by
using the `optional` attribute of the `@io.quarkus.deployment.annotations.Record` annotation.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Observe que, ao usar a xref:bytecode-recording[gravação de bytecode] , a classe gerada implicitamente pode ser declarada como fraca usando o atributo `optional` da anotação `@io.quarkus.deployment.annotations.Record` .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Note that you can also use the `@Blocking` annotation when using @ClientExceptionMapper:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Note que também pode utilizar a anotação `@Blocking` quando utilizar @ClientExceptionMapper:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Note the `optional` attribute.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Note o atributo `optional`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Notes</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Notas</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Nothing spectacular here.
On each received quote, it updates the page.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Nada de espetacular aqui. A cada citação recebida, a página é atualizada.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>November 19, 2019</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>19 de novembro de 2019</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Now Available</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Agora disponível</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Now let's add a suffix for a greeting for which we'll set a default value.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Agora vamos adicionar um sufixo em greeting, no qual definiremos um valor padrão.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Now let's consume the quote request and give out a price.
Inside the `processor` project, locate the `src/main/java/org/acme/rabbitmq/processor/QuoteProcessor.java` file and add the following:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Agora vamos consumir a solicitação de cotação e fornecer um preço. Dentro do projeto `processor` , localize o arquivo `src/main/java/org/acme/rabbitmq/processor/QuoteProcessor.java` e adicione o seguinte:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Now let's declare and use those templates in the resource class.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Agora vamos declarar e utilizar esses modelos na classe de recurso.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Now let's inject the "compiled" template in the resource class.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Agora vamos injetar o modelo "compilado" na classe de recurso.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Now modify `GreetingResource` to start using the `GreetingProperties`:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Agora modifique `GreetingResource` para começar a usar o `GreetingProperties`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Now that we have the generated classes let's implement our _hello_ service.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Agora que temos as classes geradas, vamos implementar o nosso serviço _hello_.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Now that you have recorded the creation of a service during the build phase, you need to record how to start the service at runtime during booting.
You do this with a RUNTIME_INIT build step as shown in the `TestProcessor#startRuntimeService` method.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Agora que você gravou a criação de um serviço durante a fase de construção, precisa gravar como iniciar o serviço em tempo de execução durante a inicialização. Você faz isso com uma etapa de construção RUNTIME_INIT, conforme mostrado no método `TestProcessor#startRuntimeService` .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Now we are ready to run our application:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Agora estamos prontos para executar a nossa aplicação:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Now we have three properties in our `GreetingProperties` class.
While `name` could be considered more of a runtime property (and maybe could be passed as an HTTP query parameter in the future), `text` and `suffix` are used to define a message template.
Let's group these two properties in a separate inner class:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Agora temos três propriedades em nossa classe `GreetingProperties` . Embora `name` possa ser considerada mais uma propriedade de tempo de execução (e talvez possa ser passada como um parâmetro de consulta HTTP no futuro), `text` e `suffix` são usadas para definir um modelo de mensagem. Vamos agrupar essas duas propriedades em uma classe interna separada:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Now when you run the native build all these files will be included within `function.zip`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Agora, quando executar a compilação nativa, todos estes ficheiros serão incluídos no `function.zip`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Now you can use the AWS console to view and test your new lambda function.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Agora pode utilizar o console AWS para ver e testar a sua nova função lambda.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Now, all the REST Clients will be using your custom HTTP Client Options.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Agora, todos os Clientes REST usarão suas Opções de Cliente HTTP personalizadas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Now, all the REST Clients will be using your custom redirect handler.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Agora, todos os Clientes REST usarão seu manipulador de redirecionamento personalizado.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Now, if a user or even some other extension needs to override the default implementation of the `Parser` the simplest solution is to use CDI `@Alternative` + `@Priority`:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Agora, se um usuário ou mesmo outra extensão precisa substituir a implementação padrão do `Parser`, a solução mais simples é utilizar CDI `@Alternative` + `@Priority`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Now, running the command `curl http://localhost:8080/increments/first` should return the following result:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Agora, ao executar o comando `curl http://localhost:8080/incrementos/primeira` deve retornar o seguinte resultado:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Now, running the command `curl http://localhost:8080/increments` should return an empty list `[]`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Agora, ao executar o comando `curl http://localhost:8080/incrementos` deve retornar uma lista vazia `[]`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Number of IO threads.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Número de threads de E/S.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Number of connections established between the client and each Broker. A value of 0 means to disable connection pooling.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Número de conexões estabelecidas entre o cliente e cada Broker. Um valor 0 significa desabilitar o pool de conexões.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Number of consumer listener threads.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Número de threads de consumer listeners.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>OBSERVERS</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>OBSERVERS</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>OS thread</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Thread do SO</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Object Substitution</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Substituição de Objetos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Objects created during the build phase that are passed into the runtime need to have a default constructor in order for them to be created and configured at startup of the runtime from the build time state. If an object does not have a default constructor you will see an error similar to the following during generation of the augmented artifacts:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os objetos criados durante a fase de construção que são passados para o tempo de execução têm de ter um construtor padrão para que sejam criados e configurados na inicialização do tempo de execução a partir do estado do tempo de construção. Se um objeto não tiver um construtor padrão, verá um erro semelhante ao seguinte durante a geração dos artefatos ampliados:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Objects returned from a previous recorder invocation</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Objetos retornados de uma invocação anterior do gravador</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Objects which are injected into a build step method or its class _must not_ be used outside that method's
execution.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os objetos que são injetados em um método de etapa de construção ou em sua classe _não devem_ ser usados fora da execução desse método.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Objects with a constructor annotated with `@RecordableConstructor` with parameter names that match field names</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Objetos com um construtor anotado com `@RecordableConstructor` com nomes de parâmetros que correspondem a nomes de campos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Objects with a no-arg constructor and getter/setters for all properties (or public fields)</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Objetos com um construtor sem argumentos e getter/setters para todas as propriedades (ou campos públicos)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Observability</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Observabilidade</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Observe a `ShutdownEvent` to be notified when the runtime is going to shut down.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Observe um `ShutdownEvent` para ser notificado quando o tempo de execução for encerrado.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Observe a `StartupEvent` to be notified the runtime has started.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Observe um `StartupEvent` para ser notificado de que o tempo de execução foi iniciado.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>ObserverRegistrar</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>ObserverRegistrar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>ObserverTransformer</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>ObserverTransformer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Observing Container Startup</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Observando a Inicialização do Contêiner</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Observing instrumentable objects</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Observação de objetos instrumentáveis</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Oh yeah! We had quite a few extensions written outside the Quarkus "initial" team.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Oh sim! Tivemos algumas extensões escritas fora da equipe "inicial" do Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>On Linux, you will need GCC, and the glibc and zlib headers. Examples for common distributions:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>No Linux, é necessário o GCC e os headers glibc e zlib. Exemplos de distribuições comuns:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>On Windows, you will have to go through the Control Panel to set your environment variables.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>No Windows, você terá que ir até o Painel de Controle para definir as suas variáveis de ambiente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>On Windows, you will need to install the https://aka.ms/vs/15/release/vs_buildtools.exe[Visual Studio 2017 Visual C++ Build Tools]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>No Windows, terá de instalar  link:https://aka.ms/vs/15/release/vs_buildtools.exe[Visual Studio 2017 Visual C++ Build Tools]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>On a post request, generate a random UUID and send it to the RabbitMQ queue using the emitter.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Em uma solicitação de postagem, gere um UUID aleatório e envie-o para a fila do RabbitMQ usando o emissor.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>On macOS (not supported by Mandrel), point the variable to the `Home` sub-directory:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>No macOS (não suportado pelo Mandrel), aponte a variável para o subdiretório `Home`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>On my machine;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>On my machine;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>On occasion, the stream of SSE events may contain some events that should not be returned by the client - an example of this is having the server send heartbeat events in order to keep the underlying TCP connection open.
The REST Client supports filtering out such events by providing the `@org.jboss.resteasy.reactive.client.SseEventFilter`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Ocasionalmente, o fluxo de eventos SSE pode conter alguns eventos que não devem ser retornados pelo cliente - um exemplo disso é fazer com que o servidor envie eventos de batimento cardíaco para manter aberta a conexão TCP subjacente. O Cliente REST oferece suporte à filtragem desses eventos, fornecendo o `@org.jboss.resteasy.reactive.client.SseEventFilter` .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>On startup the `setupHotDeployment` method will be called, and you can use the provided `io.quarkus.dev.spi.HotReplacementContext`
to initiate a scan for changed files.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Na inicialização, o método `setupHotDeployment` será chamado, e você pode usar o `io.quarkus.dev.spi.HotReplacementContext` fornecido para iniciar uma varredura de arquivos alterados.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>On the other side, the reactive model relies on non-blocking I/Os and a different execution model.
Non-blocking I/O provides an efficient way to deal with concurrent I/O.
A minimal amount of threads called I/O threads, can handle many concurrent I/O.
With such a model, request processing is not delegated to a worker thread but uses these I/O threads directly.It saves memory and CPU as there is no need to create worker threads to handle the requests.
It also improves the concurrency as it removes the constraint on the number of threads.
Finally, it also improves response time as it reduces the number of thread switches.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Por outro lado, o modelo reativo se baseia em E/S sem bloqueio e em um modelo de execução diferente. A E/S sem bloqueio oferece uma maneira eficiente de lidar com E/S concorrente. Um número mínimo de threads, chamados threads de E/S, pode lidar com muitas E/S concorrentes. Com esse modelo, o processamento de solicitações não é delegado a um thread de trabalho, mas usa esses threads de E/S diretamente, o que economiza memória e CPU, pois não há necessidade de criar threads de trabalho para lidar com as requisições. Ele também melhora a concorrência, pois remove a restrição do número de threads. Por fim, ele também melhora o tempo de resposta, pois reduz o número de trocas de thread.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Once generated, look at the `pom.xml`.
You will find the import of the Quarkus BOM, allowing you to omit the version of the different Quarkus dependencies.
In addition, you can see the `quarkus-maven-plugin` responsible of the packaging of the application and also providing the development mode.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Depois de gerado, consulte `pom.xml` .
Você encontrará a importação do Quarkus BOM, que permite omitir a versão das diferentes dependências do Quarkus.
Além disso, você pode ver o `quarkus-maven-plugin` responsável pelo empacotamento da aplicação e que também fornece o modo de desenvolvimento.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Once generated, you can look at the `target/generated-sources/grpc` directory:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Uma vez gerado, pode consultar o diretório `target/generated-sources/grpc`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Once generated, you can look at the `target/kubernetes` directory:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Depois de gerados, você pode verificar o diretório `target/kubernetes`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Once packaged, run `docker compose up --build`.
The UI is exposed on http://localhost:8080/quotes.html</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Depois de empacotado, execute `docker compose up --build` . A interface do usuário será exibida em http://localhost:8080/quotes.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Once selected, click on "Generate your application", download the zip file, unzip it and open the code in your favorite IDE.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Uma vez selecionadas, clique em "Generate your application", baixe o ficheiro zip, descompacte-o e abra o código no seu IDE favorito.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Once started, you can request the provided endpoint:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Uma vez iniciado, você pode fazer o request no endpoint fornecido:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Once the build is finished, you can run the executable with:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Quando a compilação estiver concluída, pode rodar o executável com:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Once you have declared a `@CheckedTemplate` class, we will check that all its methods point to existing templates, so if you try to use a template from your Java code and you forgot to add it, we will let you know at build time :)</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Depois de declarar uma classe `@CheckedTemplate`, verificaremos se todos os seus métodos apontam para modelos existentes, por isso, informaremos no tempo de compilação, caso tenha esquecido de adicionar um modelo no seu projeto :)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>One important note is that according to the https://www.rfc-editor.org/rfc/rfc2616#section-10.3.8[RFC2616] specs, by default the redirection will only happen for GET or HEAD methods. However, in REST Client, you can provide your custom redirect handler to enable redirection on POST or PUT methods, or to follow a more complex logic, via either using the `@ClientRedirectHandler` annotation, CDI or programmatically when creating your client.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Uma nota importante é que, de acordo com as especificações https://www.rfc-editor.org/rfc/rfc2616#section-10.3.8[RFC2616], por padrão o redirecionamento só ocorrerá para os métodos GET ou HEAD. No entanto, no Cliente REST, você pode fornecer o seu manipulador de redirecionamento personalizado para permitir o redirecionamento nos métodos POST ou PUT, ou para seguir uma lógica mais complexa, utilizando a anotação `@ClientRedirectHandler`, CDI ou programaticamente ao criar o seu cliente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>One of the main goals of Quarkus is ease of extensibility and to build a vibrant ecosystem.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Um dos principais objetivos do Quarkus é a facilidade de extensibilidade e a construção de um ecossistema vibrante.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>One of the main outputs of the build process is recorded bytecode. This bytecode actually sets up the runtime environment. For example, in order to start Undertow, the resulting application will have some bytecode that directly registers all
Servlet instances and then starts Undertow.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Um dos principais resultados do processo de construção é o bytecode gravado. Na verdade, esse bytecode configura o ambiente de tempo de execução. Por exemplo, para iniciar o Undertow, a aplicação resultante terá algum bytecode que registra diretamente todas as instâncias de Servlet e, em seguida, inicia o Undertow.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>One of the main things an extension is likely to do is completely separate the configuration phase of behavior from the runtime phase.
Frameworks often do parsing/load of configuration on startup that can be done during build time to both reduce the runtime dependencies on frameworks like xml parsers as well as reducing the startup time the parsing incurs.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Uma das principais coisas que uma extensão provavelmente fará é separar completamente a fase de configuração do comportamento da fase de tempo de execução. Os frameworks geralmente fazem a análise/carregamento da configuração na inicialização que pode ser feita durante o tempo de construção para reduzir as dependências de tempo de execução em frameworks como analisadores xml bem como reduzir o tempo de inicialização que a análise incorre.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>One thing to note about the create command for native is that the `aws lambda create-function`
call must set a specific environment variable:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Um aspecto a ser observado sobre o comando create para nativo é que a chamada `aws lambda create-function` deve definir uma variável de ambiente específica:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Only apply the transformation if the class name equals to `org.acme.Bar`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Aplicar a transformação apenas se o nome da classe for igual a `org.acme.Bar`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Only the Mutiny client can be _mocked_, channels, and other stubs cannot be mocked.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Apenas o cliente Mutiny pode ser _mocked_ (simulado), canais e outros stubs não podem ser simulados.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Open Source Utterly and Absolutely</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Código aberto total e absolutamente</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Open `http://localhost:8080/quotes.html` in your browser and request some quotes by clicking the button.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Abra `http://localhost:8080/quotes.html`  no seu browser e peça algumas cotações clicando no botão.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Open another terminal and run the `curl http://localhost:8080/increments` command.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Abra outro terminal e execute o comando `curl http://localhost:8080/increments.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Open blocks (`--`) are not supported in the AsciiDoc documentation. All the other types of blocks
(source, admonitions...) are supported.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os blocos abertos ( `--` ) não são compatíveis com a documentação do AsciiDoc. Todos os outros tipos de blocos (fonte, advertências...) são compatíveis.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Open http://localhost:8080/fruits to invoke this method:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Abra http://localhost:8080/fruits para invocar este método:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Open src/main/resources/application.properties and add the following line to enable SSL in your native image.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Abra src/main/resources/application.properties e adicione a seguinte linha para ativar o SSL na sua imagem nativa.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Open the `src/main/java/org/acme/rest/client/ExtensionsResource.java` file and update it with the following content:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Abra o arquivo `src/main/java/org/acme/rest/client/ExtensionsResource.java` e atualize-o com o seguinte conteúdo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Open the existing `org.acme.ExampleResource` class, and edit the content to become:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Abra a classe `org.acme.ExampleResource` e edite o conteúdo para ficar:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Open the two projects in your favorite IDE.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Abra os dois projetos no seu IDE preferido.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Open your browser to http://localhost:8080/extension/id/io.quarkus:quarkus-rest-client-reactive.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Abra o seu browser em http://localhost:8080/extension/id/io.quarkus:quarkus-rest-client-reactive.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Open your browser to http://localhost:8080/greeting.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Abra o seu navegador em  http://localhost:8080/greeting .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>OpenID Connect (OIDC) and OAuth2 Client and Filters Reference</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Referência de clientes e filtros OpenID Connect (OIDC) e OAuth2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>OpenID Connect (OIDC) configuration properties</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Propriedades de configuração do OpenID Connect (OIDC)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Opinionated</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Dogmático</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Optional parameter declaration. Qute attempts to validate all expressions that reference the parameter `item`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Declaração de parâmetro opcional. O Qute tenta validar todas as expressões que fazem referência ao parâmetro `item`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Optional values</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Valores opcionais</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Optional: To specify a particular stream, use the `Dstream` option; for example: `-Dstream=3.0`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Opcional: Para especificar uma versão, utilize a opção `Dstream`; por exemplo: `-Dstream=3.0`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Optional: To specify a particular stream, use the `stream` option; for example: `--stream=3.0`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Opcional: Para especificar uma versão, utilize a opção `stream`; por exemplo: `--stream=3.0`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Optionally Mandrel or GraalVM installed and xref:building-native-image.adoc#configuring-graalvm[configured appropriately] if you want to build a native executable (or Docker if you use a native container build)</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Opcionalmente, Mandrel ou GraalVM instalado e xref:building-native-image.adoc#configuring-graalvm[configurado apropriadamente] se você quiser criar um executável nativo (ou Docker se você usar uma compilação de contêiner nativo)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Optionally the xref:cli-tooling.adoc[Quarkus CLI] if you want to use it</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Opcionalmente, o xref:cli-tooling.adoc[Quarkus CLI] se você quiser usá-lo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Or programmatically using the `.register()` method:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Ou programaticamente, utilizando o método `.register()`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Or start `gdb` with:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Ou começar `gdb` com:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Or, if you packaged your application as native executable, use:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Ou, se tiver empacotado a sua aplicação como executável nativo, utilize:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Organise your template files in the `/src/main/resources/templates` directory, by grouping them into one directory per resource class. So, if
your `ItemResource` class references two templates `hello` and `goodbye`, place them at `/src/main/resources/templates/ItemResource/hello.txt`
and `/src/main/resources/templates/ItemResource/goodbye.txt`. Grouping templates per resource class makes it easier to navigate to them.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Organize os seus arquivos de modelos no diretório `/src/main/resources/templates`, agrupando-os em um diretório por classe de recurso. Assim, se a sua classe `ItemResource` faz referência a dois modelos `hello` e `goodbye`, coloque-os em `/src/main/resources/templates/ItemResource/hello.txt` e `/src/main/resources/templates/ItemResource/goodbye.txt`. O agrupamento de modelos por classe de recurso facilita a navegação até eles.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Our dependency injection solution is based on CDI. You can use JAX-RS annotations to define the REST endpoints. You can use JPA annotations to map your persistent entities and JTA annotations to declare the transaction boundaries. You can use Eclipse MicroProfile to configure and monitor your application. You can use Vert.x, Apache Camel and we support much more.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Nossa solução de injeção de dependência é baseada em CDI. Você pode usar anotações JAX-RS para definir os endpoints REST. Você pode usar anotações JPA para mapear suas entidades persistentes e anotações JTA para declarar os limites da transação. Você pode usar o Eclipse MicroProfile para configurar e monitorar seu aplicativo. Você pode usar Vert.x, Apache Camel e nós suportamos muito mais.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Our monthly newsletters bring together articles, videos and perspectives from across the Quarkus community.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Nosso boletim informativo mensal reúne artigos, vídeos e perspectivas de toda a comunidade Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Outgoing Attributes of the 'smallrye-kafka' connector</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Atributos de saída do conector 'smallrye-kafka'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Outgoing Attributes of the 'smallrye-pulsar' connector</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Atributos de saída do conector 'smallrye-pulsar'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Package and run the application</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Empacote e execute a aplicação</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Packaging and Running the application</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Empacotar e Executar a aplicação</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Packaging and run the application</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Empacotando e executando a aplicação</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Packaging and running in JVM mode</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Empacotando e execução no modo JVM</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Packaging and running the application does not change either.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O empacotamento e a execução da aplicação também não mudam.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Packaging of the application</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Empacotamento da aplicação</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Packaging the application</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Empacotando a aplicação</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Packaging the native executable in a container</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Empacotar o executável nativo em um container</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Parameters specified as `File`, `Path`, `byte[]` or `Buffer` are sent as files and default to the
`application/octet-stream` MIME type. Other `@RestForm` parameter types default to the `text/plain`
MIME type. You can override these defaults with the `@PartType` annotation.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os parâmetros especificados como `File` , `Path` , `byte[]` ou `Buffer` são enviados como arquivos e têm como padrão o tipo MIME `application/octet-stream` . Outros tipos de parâmetros `@RestForm` têm como padrão o tipo MIME `text/plain` . Você pode substituir esses padrões com a anotação `@PartType` .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Parsing Config to Objects</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Analisando Configurações para Objetos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Parsing an XML Configuration into Runtime XmlConfig Instance</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Analisando uma Configuração XML em uma Instância XmlConfig em Tempo de Execução</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Pass a contextual reference of `Bar` to the constructor of `Foo`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Passa uma referência contextual de `Bar` ao construtor de `Foo`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Pass a subclass of `io.quarkus.arc.BeanCreator` via `ExtendedBeanConfigurator#creator(Class&lt;? extends BeanCreator&lt;U&gt;&gt;)`, and possibly specify some build-time parameters via `ExtendedBeanConfigurator#param()` and synthetic injection points via `ExtendedBeanConfigurator#addInjectionPoint()`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Passar uma subclasse de `io.quarkus.arc.BeanCreator` através do `ExtendedBeanConfigurator#creator(Class&lt;? extends BeanCreator&lt;U&gt;&gt;)`, e possivelmente especificar alguns parâmetros de tempo de construção através do `ExtendedBeanConfigurator#param()` e pontos de injeção sintéticos através do `ExtendedBeanConfigurator#addInjectionPoint()`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Password of SOCKS5 proxy.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Senha do proxy SOCKS5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Password of TLS KeyStore.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Senha do TLS KeyStore.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Password of TLS TrustStore.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Senha do TLS TrustStore.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Path Parameters</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Parâmetros do Caminho</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Path of TLS KeyStore.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Caminho do TLS KeyStore.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Path of TLS TrustStore.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Caminho do TLS TrustStore.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Path to the TLS certificate file.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Caminho para o arquivo de certificado TLS.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Path to the TLS key file.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Caminho para o arquivo de chave TLS.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Path to the trusted TLS certificate file.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Caminho para o arquivo de certificado TLS confiável.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Pattern</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Padrão</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Perform the call with the altered client. The original client remains unmodified</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Realize a chamada com o cliente alterado. O cliente original permanece inalterado.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Phase name</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Nome da fase</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Pinning cases</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Casos de fixação (pinning)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Platform thread</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Thread de plataforma</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Please note that since the invocation is now non-blocking, the `idAsync` method will be invoked on the event loop,
i.e. will not get offloaded to a worker pool thread and thus reducing hardware resource utilization.
See xref:resteasy-reactive.adoc#execution-model[Resteasy reactive execution model] for more details.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Observe que, como a invocação agora é não blocante, o método `idAsync` será invocado no loop de eventos, ou seja, não será transferido para um thread de pool de trabalho, reduzindo assim a utilização de recursos de hardware. Para obter mais detalhes, consulte o xref:resteasy-reactive.adoc#execution-model[modelo de execução reativa Resteasy] .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Please refer to https://github.com/quarkusio/quarkus/blob/{quarkus-version}/devtools/maven/src/main/java/io/quarkus/maven/CreateExtensionMojo.java[CreateExtensionMojo JavaDoc] for all the available options of the mojo.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Consulte o https://github.com/quarkusio/quarkus/blob/{quarkus-version}/devtools/maven/src/main/java/io/quarkus/maven/CreateExtensionMojo.java[JavaDoc do CreateExtensionMojo] para conhecer todas as opções disponíveis do mojo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Please see the Quarkus Native Reference Guide for more detailed information on these monitoring options.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Consulte o Guia de Referência do Quarkus Native para obter informações mais detalhadas sobre estas opções de monitoração.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Please see xref:native-and-ssl.adoc#working-with-containers[our Using SSL With Native Executables guide] for more information.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Consulte o link:native-and-ssl.html#working-with-containers[nosso guia Usando SSL com executáveis nativos] para obter mais informações.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Plugins are added in the plugin catalog that lives at: `&lt;user home&gt;/.quarkus/cli/plugins/quarkus-cli-catalog.json`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Plugins are added in the plugin catalog that lives at: `&lt;user home&gt;/.quarkus/cli/plugins/quarkus-cli-catalog.json`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Plugins are classified as follows:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Plugins are classified as follows:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Plugins are managed using the following commands.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Plugins are managed using the following commands.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Plugins are removed using `quarkus plugin remove &lt;plugin name&gt;`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Plugins are removed using `quarkus plugin remove &lt;plugin name&gt;`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Plugins can be found via multiple sources that are described below.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Plugins can be found via multiple sources that are described below.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Post-update, if expected updates are missing, consider the following reasons:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se as atualizações esperadas estiverem faltando, considere os seguintes motivos:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Prefix for Kafka client `client.id` attribute. If defined configured or generated `client.id` will be prefixed with the given value, otherwise `kafka-producer-` is the prefix.

Type: _string_</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Prefixo para o atributo 'client.id' do cliente Kafka. Se definido configurado ou gerado 'client.id' será prefixado com o valor dado, caso contrário 'kafka-producer-' é o prefixo.

Tipo: _string_</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Prerequisites</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Pré-requisitos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Primitives</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Primitivos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Principal Class</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Classe principal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Printing step execution time</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Imprimindo o tempo de execução da etapa</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Priority level for a consumer to which a broker gives more priority while dispatching messages in Shared subscription type. +
The broker follows descending priorities. For example, 0=max-priority, 1, 2,... +
In Shared subscription type, the broker **first dispatches messages to the max priority level consumers if they have permits**. Otherwise, the broker considers next priority level consumers. +
**Example 1** +
If a subscription has consumerA with `priorityLevel` 0 and consumerB with `priorityLevel` 1, then the broker **only dispatches messages to consumerA until it runs out permits** and then starts dispatching messages to consumerB. +
**Example 2** +
Consumer Priority, Level, Permits +
C1, 0, 2 +
C2, 0, 1 +
C3, 0, 1 +
C4, 1, 2 +
C5, 1, 1 +

Order in which a broker dispatches messages to consumers is: C1, C2, C3, C1, C4, C5, C4.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Nível de prioridade para um consumidor ao qual um corretor dá mais prioridade ao enviar mensagens no tipo de assinatura compartilhada. +
O corretor segue prioridades decrescentes. Por exemplo, 0=max-priority, 1, 2,... +
No tipo de assinatura compartilhada, o corretor **primeiro envia mensagens para os consumidores de nível máximo de prioridade se eles tiverem permissões**. Caso contrário, o corretor considera os consumidores de nível de prioridade seguinte. +
**Exemplo 1** +
Se uma assinatura tiver consumerA com 'priorityLevel' 0 e consumerB com 'priorityLevel' 1, o corretor **somente despachará mensagens para consumerA até que ele esgote as permissões** e, em seguida, começará a enviar mensagens para consumerB. +
**Exemplo 2** +
Prioridade do Consumidor, Nível, Licenças +
C1, 0, 2 +
C2, 0, 1 +
C3, 0, 1 +
C4, 1, 2 +
C5, 1, 1 +

A ordem em que um corretor envia mensagens para os consumidores é: C1, C2, C3, C1, C4, C5, C4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Procedure</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Procedimento</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Processing quote requests</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Processamento de pedidos de cotação</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Produce a `ServiceStartBuildItem` to indicate that this is a service starting step that needs to run before the `StartupEvent` is sent.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Produza um `ServiceStartBuildItem` para indicar que se trata de uma etapa de inicialização do serviço que tem de ser executada antes de o `StartupEvent` ser enviado.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Produce a `ServiceStartBuildItem` to indicate the startup of a service. See xref:startup-shutdown-events[Startup and Shutdown Events] for details.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Produza um `ServiceStartBuildItem` para indicar a inicialização de um serviço. Para obter detalhes, consulte xref:startup-shutdown-events[Eventos de Inicialização e Encerramento].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Produce the runtime instance through a proxy returned from a xref:writing-extensions.adoc#bytecode-recording[`@Recorder` method] and set it via `ExtendedBeanConfigurator#runtimeValue(RuntimeValue&lt;?&gt;)`, `ExtendedBeanConfigurator#runtimeProxy(Object)`,  `ExtendedBeanConfigurator#supplier(Supplier&lt;?&gt;)` or `ExtendedBeanConfigurator#createWith(Function&lt;SyntheticCreationalContext&lt;?&gt;, &lt;?&gt;)`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Produzir a instância de tempo de execução por meio de um proxy retornado de um xref:writing-extensions.adoc#bytecode-recording[método `@Recorder`] e defini-la por meio de `ExtendedBeanConfigurator#runtimeValue(RuntimeValue&lt;?&gt;)` , `ExtendedBeanConfigurator#runtimeProxy(Object)` , `ExtendedBeanConfigurator#supplier(Supplier&lt;?&gt;)` ou `ExtendedBeanConfigurator#createWith(Function&lt;SyntheticCreationalContext&lt;?&gt;, &lt;?&gt;)` .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Producer name</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Nome do produtor</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Producer should take action when encryption fails. +
* **FAIL**: if encryption fails, unencrypted messages fail to send. +
* **SEND**: if encryption fails, unencrypted messages are sent.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O produtor deve tomar medidas quando a criptografia falhar. +
* **FAIL**: se a criptografia falhar, as mensagens não criptografadas não serão enviadas. +
* **SEND**: se a criptografia falhar, mensagens não criptografadas serão enviadas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Producing a native executable</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Desenvolvendo um executável nativo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Producing a native executable can lead to a few issues, and so it's also a good idea to run some tests against the application running in the native file. The reasoning is explained in the link:getting-started-testing#quarkus-integration-test[Testing Guide].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Produzir um executável nativo pode gerar alguns problemas e, por isso, também é uma boa ideia executar alguns testes na aplicação em execução no arquivo nativo. O raciocínio é explicado no link:getting-started-testing#quarkus-integration-test[Guia de testes].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Producing values</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Produzindo valores</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Profiles</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Profiles</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Programmatic client creation with QuarkusRestClientBuilder</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Criação programática de clientes com o QuarkusRestClientBuilder</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Programmatically decide to set the transaction for rollback.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Decida programaticamente definir a transação para reversão.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Project Loom is coming to the JDK soon and proposes a virtual thread-based model.
The Quarkus architecture is ready to support Loom as soon as it's become globally available.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Projeto Loom chegará ao JDK em breve e propõe um modelo virtual baseado em thread. A arquitetura Quarkus está pronta para suportar o Loom assim que ele estiver disponível globalmente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Project setup</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Configuração do projeto</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Propagate incoming record key to the outgoing record

Type: _boolean_</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Propagar a chave de registro de entrada para o registro de saída

Tipo: _boolean_</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Properties with default values can be configured in a configuration file just like any other property.
However, the default value will be used if the property was not defined in a configuration file.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>As propriedades com valores padrão podem ser configuradas em um arquivo de configuração como qualquer outra propriedade. No entanto, o valor padrão será usado se a propriedade não tiver sido definida em um arquivo de configuração.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Properties with optional values are the middle-ground between standard and properties with default values.
While a missing property in a configuration file will not cause your application to fail, it will nevertheless not have a value set.
We use `java.util.Optional` type to define such properties.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>As propriedades com valores opcionais são o meio-termo entre as propriedades padrão e as propriedades com valores padrão. Embora uma propriedade ausente em um arquivo de configuração não cause falha na aplicação, ela não terá um valor definido. Usamos o tipo `java.util.Optional` para definir esse tipo de propriedade.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Pros</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Prós</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Protocol of proxy service. proxyServiceUrl and proxyProtocol must be mutually inclusive.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Protocolo do serviço de proxy. proxyServiceUrl e proxyProtocol devem ser mutuamente inclusivos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Protocols of TLS.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Protocolos de TLS.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Provide users with initial code for extensions when generating Quarkus applications on code.quarkus.io and all the Quarkus tooling. This guide explains how to create and configure a Codestart for an extension.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Forneça aos usuários o código inicial para extensões ao gerar aplicativos Quarkus no code.quarkus.io e todas as ferramentas do Quarkus. Este guia explica como criar e configurar um Codestart para uma extensão.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Proxy support</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Suporte de proxy</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Publish your extension in registry.quarkus.io</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Publique a sua extensão em registry.quarkus.io</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Publishing new records</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Publicação de novos registros</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Pulsar client Attributes</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Atributos do cliente Pulsar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Pulsar cluster HTTP URL to connect to a broker.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>URL HTTP do cluster pulsar para se conectar a um broker.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Pulsar consumer Attributes</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Atributos do consumidor Pulsar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Pulsar producer Attributes</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Atributos do produtor Pulsar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Pushing as much as possible into the `@Record(STATIC_INIT)` phase allows for two different optimizations:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Empurrar o máximo possível para a fase `@Record(STATIC_INIT)` permite duas otimizações diferentes:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>QUALIFIERS</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>QUALIFIERS</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus Build Time Principle</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Princípio do tempo de compilação do Quarkus</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus Chat Options</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Opções de bate-papo do Quarkus</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus DI solution is based on the [Contexts and Dependency Injection for Java 2.0](https://docs.jboss.org/cdi/spec/2.0/cdi-spec) specification. This guide explains the basics of CDI.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A solução Quarkus DI é baseada na especificação [Contexts and Dependency Injection for Java 2.0] https://docs.jboss.org/cdi/spec/2.0/cdi-spec . Este guia explica os princípios básicos do CDI.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus Dev UI</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Quarkus Dev UI</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus Development</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Desenvolvimento de Quarkus</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus Extension Registry</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Catálogo de Extensões do Quarkus</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus Features</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Recursos do Quarkus</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus Maven Plugin</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Plugin Maven do Quarkus</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus Micro Image?</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Quarkus Micro Image?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus Newsletter</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Boletim informativo Quarkus</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus Reactive Architecture</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Arquitetura Reativa do Quarkus</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus Tools in Your Favorite IDE</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Ferramentas do Quarkus em seu IDE favorito</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus Tools in your favorite IDE</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Ferramentas do Quarkus no seu IDE favorito</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus aids you on your journey to reactive.  Quarkus is based on a &lt;a href="https://quarkus.io/version/main/guides/quarkus-reactive-architecture"&gt;reactive core&lt;/a&gt; allowing your application to mix reactive and imperative components.  As an example, you can implement reactive HTTP endpoint using the &lt;a href="https://quarkus.io/guides/resteasy-reactive"&gt;RESTEasy Reactive extension&lt;/a&gt; as follows:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Quarkus ajuda você em sua jornada para reativo.  O Quarkus é baseado em um &lt;a href="https://quarkus.io/version/main/guides/quarkus-reactive-architecture"&gt;núcleo reativo&lt;/a&gt; , permitindo que sua aplicação misture componentes reativos e imperativos.  Como exemplo, você pode implementar o endpoint HTTP reativo usando a &lt;a href="https://quarkus.io/guides/resteasy-reactive"&gt;extensão RESTEasy Reactive&lt;/a&gt; da seguinte maneira:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus applications are designed to run in containers.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Aplicações Quarkus são projetadas para serem executadas em contêineres.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus applications are optimised for low memory usage and fast startup times.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Aplicações Quarkus são otimizadas para baixo uso de memória e tempos de inicialização rápidos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus build steps can produce and consume various build items and hook into each phase.
In the following sections we will describe all the relevant build items and common scenarios.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>As etapas de construção do Quarkus podem produzir e consumir vários itens de construção e se conectar a cada fase. Nas seções a seguir, descreveremos todos os itens de construção relevantes e cenários comuns.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus comes with a Transaction Manager and uses it to coordinate and expose transactions to your applications.
Each extension dealing with persistence will integrate with it for you.
And you will explicitly interact with transactions via CDI.
This guide will walk you through all that.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Quarkus vem com um Gerenciador de Transações e o usa para coordenar e expor transações para suas aplicações.
Cada extensão que lida com persistência irá se integrar com ele para você.
E você interagirá explicitamente com as transações via CDI.
Este guia irá guiá-lo através de tudo isso.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus comes with a Transaction Manager and uses it to coordinate and expose transactions to your applications.
Each extension dealing with persistence will integrate with it for you.
And you will explicitly interact with transactions via CDI.
This guide will walk you through all that.
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Quarkus vem com um Gerenciador de Transações e o usa para coordenar e expor transações para suas aplicações.
Cada extensão que lida com persistência irá se integrar com ele para você.
E você interagirá explicitamente com as transações via CDI.
Este guia irá guiá-lo através de tudo isso.
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus comes with a toolchain enabling developers from live reload all the way down to deploying a Kubernetes application. In addition, there are plugins and extensions to all major IDEs.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Quarkus vem com uma conjunto de ferramentas que auxilia os desenvolvedores desde o _live reload_ até a implantação de um aplicativo Kubernetes. Além disso, existem plug-ins e extensões para todos os principais IDEs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus documentation content types</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Tipos de conteúdo da documentação Quarkus</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus documentation is structured into four distinct content types: concepts, how-tos, tutorials, and references.
The composition and structure of Quarkus docs follow the Diátaxis systematic documentation framework for technical documentation authoring.
Each content type resolves a different user need, fulfills a different purpose, and requires a different approach to its creation.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A documentação do Quarkus está estruturada em quatro tipos de conteúdo distintos: conceitos, instruções, tutoriais e referências. A composição e a estrutura dos documentos do Quarkus seguem a estrutura de documentação sistemática da Diátaxis para a criação de documentação técnica. Cada tipo de conteúdo atende a uma necessidade diferente do usuário, cumpre uma finalidade diferente e exige uma abordagem diferente para sua criação.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus extensions add a new developer focused behavior to the core offering, and consist of two distinct parts, buildtime augmentation and runtime container. The augmentation part is responsible for all metadata processing, such as reading annotations, XML descriptors etc. The output of this augmentation phase is recorded bytecode which is responsible for directly instantiating the relevant runtime services.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>As extensões Quarkus acrescentam um novo comportamento focado no programador na oferta principal e consistem em duas partes distintas, o aumento do tempo de construção e o contêiner de tempo de execução. A parte de aumento é responsável por todo o processamento de metadados, como a leitura de anotações, descritores XML, etc. O resultado desta fase de aumento é um bytecode registrado que é responsável por instanciar diretamente os serviços de tempo de execução relevantes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus extensions optimize your applications by pushing as much work as possible to the build operation. This guide explains the rationale of Quarkus extensions and guides you through authoring your own extensions.
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>As extensões do Quarkus otimizam suas aplicações enviando o máximo de trabalho possível para a operação de compilação. Este guia explica a lógica das extensões do Quarkus e orienta você através da criação de suas próprias extensões.
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus focuses on the simplest and most useful way to use a given feature, trimming it to its most useful essence. This includes upfront analysis on how to best use a feature and guiding you in what we think is the best way to do things.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Quarkus se concentra na maneira mais simples e útil de usar um determinado recurso, cortando-o para sua essência mais útil. Isso inclui uma análise inicial sobre como usar melhor um recurso e orientá-lo no que achamos ser a melhor maneira de fazer as coisas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus gRPC is based on https://vertx.io/docs/vertx-grpc/java/[Vert.x gRPC].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Quarkus gRPC é baseado no  link:https://vertx.io/docs/vertx-grpc/java/[Vert.x gRPC].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus generates a lot of classes during the build phase and in many cases also transforms existing classes.
It is often extremely useful to see the generated bytecode and transformed classes during the development of an extension.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Quarkus gera muitas classes durante a fase de construção e, em muitos casos, também transforma as classes existentes. Muitas vezes, é extremamente útil ver o bytecode gerado e as classes transformadas durante o desenvolvimento de uma extensão.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus has a xref:cdi-reference.adoc#bean_discovery[simplified discovery].
It might happen that the class is not part of the application index.
For example, classes from the _runtime module_ of a Quarkus extension are not indexed automatically.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Quarkus tem uma xref:cdi-reference.adoc#bean_discovery[descoberta simplificada] . Pode acontecer que a classe não faça parte do índice da aplicação. Por exemplo, as classes do _módulo de tempo de execução_ de uma extensão do Quarkus não são indexadas automaticamente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus has been designed with this new world in mind and provides first-class support for these different paradigms. That does not mean you cannot build monoliths with Quarkus; you can do it smoothly. On the contrary, it means that the Quarkus development model morphs to adapt itself to the type of application you are developing, monolith, microservice, reactive, event-driven, functions…</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Quarkus foi projetado com esse novo mundo em mente e fornece suporte de primeira classe para esses diferentes paradigmas. Isso não significa que você não possa construir monólitos com Quarkus; você pode fazê-lo sem problemas. Pelo contrário, isso significa que o modelo de desenvolvimento do Quarkus se transforma para se adaptar ao tipo de aplicação que você está desenvolvendo, monólito, microsserviço, reativo, orientado a eventos, funções...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus has built-in capabilities to deal with JSON RabbitMQ messages.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Quarkus tem capacidades incorporadas para lidar com mensagens JSON do RabbitMQ.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus has more Spring compatibility features. See the following guides for more details:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Quarkus possui mais funcionalidades compatíveis com o Spring. Para mais informações, consulte os seguintes guias:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus heavily utilizes https://github.com/wildfly/jandex[Jandex] at build time, to discover various classes or annotations. One immediately recognizable application of this, is CDI bean discovery.
As a result, most of the Quarkus extensions will not work properly if this build time discovery isn't properly setup.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Quarkus faz um uso intensivo do link:https://github.com/wildfly/jandex[o Jandex] durante o processo de compilação para descobrir várias classes ou anotações. Uma aplicação imediatamente reconhecível disso é a descoberta de bean CDI. Como resultado, a maioria das extensões do Quarkus não funcionará adequadamente se essa descoberta em tempo de compilação não estiver configurada corretamente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus implements the following Specifications:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Quarkus implementa as seguintes especificações:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus includes an extension that allows developers to use Kubernetes ConfigMaps and Secrets as a configuration source, without having to mount them into the Pod running the Quarkus application or make any other modifications to their Kubernetes Deployment (or Openshift DeploymentConfig) &lt;a href="{{site.baseurl}}/guides/kubernetes-config"&gt;Read the guide for more details.&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Quarkus inclui uma extensão que permite aos desenvolvedores usar o Kubernetes ConfigMaps e Secrets como uma fonte de configuração, sem ter que montá-los no Pod executando a aplicação Quarkus ou fazer quaisquer outras modificações em sua implantação do Kubernetes (ou Openshift DeploymentConfig) &lt;a href="{{site.baseurl}}/guides/kubernetes-config"&gt;Leia o guia para obter mais detalhes.&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus is a _Reactive_ framework.
Since the beginning, _Reactive_ has been an essential tenet of the Quarkus architecture.
It includes many reactive features and offers a broad ecosystem.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Quarkus é um framework _Reativo_ . Desde o início, a _Reatividade_ tem sido um princípio essencial da arquitetura do Quarkus. Ela inclui muitos recursos reativos e oferece um amplo ecossistema.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus is an Open Source project licensed under the &lt;a href="https://www.apache.org/licenses/LICENSE-2.0"&gt;Apache License version 2.0&lt;/a&gt;. First and foremost, it is an open community where contributions, ideas and discussions are done in the open and contributors are welcome. Let’s join forces in building the future of Java applications.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Quarkus é um projeto Open Source licenciado sob a &lt;a href="https://www.apache.org/licenses/LICENSE-2.0"&gt;Licença Apache versão 2.0.&lt;/a&gt; Em primeiro lugar, é uma comunidade aberta, onde contribuições, ideias e discussões são feitas ao ar livre e os colaboradores são bem-vindos. Vamos unir forças na construção do futuro das aplicações Java.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus is an Open Source project licensed under the https://www.apache.org/licenses/LICENSE-2.0[Apache License version 2.0].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Quarkus é um projeto Open Source licenciado sob o https://www.apache.org/licenses/LICENSE-2.0 [Apache License versão 2.0].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus is an open ecosystem and we hope to see all the extensions people need to write their apps. We are working as we speak to allow an extension to be published in separate repos and separate GAVs and thus published in Maven repos independently of Quarkus core. This will greatly simplify the publication process. Expect news soon.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Quarkus é um ecossistema aberto e esperamos ver todas as extensões que as pessoas precisam para escrever suas aplicações. Estamos trabalhando enquanto falamos para permitir que uma extensão seja publicada em repositórios separados e GAVs separados e, portanto, publicada em repositórios Maven independentemente do núcleo do Quarkus. Isso simplificará muito o processo de publicação. Aguarde novidades em breve.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus is designed to seamlessly combine the familiar imperative style code and the non-blocking, reactive style when developing applications.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Quarkus foi projetado para combinar perfeitamente o código de estilo imperativo que você já conhece e o estilo reativo sem bloqueio ao desenvolver aplicações.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus is not just about being great for writing Web Applications or Micro-Services. We’re focusing on more than the feature set: we make sure that every feature works well, simply, with little to no configuration, in the most intuitive way possible. It should be trivial to develop simple things, and easy to develop the more complex ones.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Quarkus não é apenas sobre ser ótimo para escrever Aplicações Web ou Micro-Serviços. Estamos nos concentrando em mais do que o conjunto de recursos: garantimos que todos os recursos funcionem bem, de forma simples, com pouca ou nenhuma configuração, da maneira mais intuitiva possível. Deve ser trivial desenvolver coisas simples, e fácil desenvolver as mais complexas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus is not limited to HTTP.  You can use &lt;a href="https://quarkus.io/guides/grpc-getting-started"&gt;gRPC&lt;/a&gt; or &lt;a href="https://quarkus.io/guides/smallrye-graphql"&gt;GraphQL&lt;/a&gt;, two prominent alternatives in the microservice space.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Quarkus não está limitado a HTTP.  Você pode usar &lt;a href="https://quarkus.io/guides/grpc-getting-started"&gt;gRPC&lt;/a&gt; ou &lt;a href="https://quarkus.io/guides/smallrye-graphql"&gt;GraphQL&lt;/a&gt;, duas alternativas proeminentes no espaço de microsserviços.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus is published in Maven Central, check out link:/extensions[which extensions] you need and just import them in your `pom.xml` to get Quarkus. We recommend you start your Quarkus experience via our link:/get-started[Getting Started guides].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Quarkus é publicado no Maven Central, confira link:/extensions[quais extensões] você precisa e basta importá-los em seu 'pom.xml' para obter o Quarkus. Recomendamos que você comece sua experiência com o Quarkus através do nosso link:/get-started[Guias de introdução].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus is stable?</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Quarkus é estável?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus is the rising star for Kube Native Java as it re-imagines the Java stack to give you the performance characteristics and developer experience you need to create modern, high performing applications. Quarkus helps you use your existing skills and code in new ways and greatly reduces the technical burden when moving to a Kubernetes-centric environment.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Quarkus é a estrela em ascensão do Kube Native Java, pois reimagina a stack Java para fornecer as características de desempenho e a experiência de desenvolvedor necessárias para criar aplicativos modernos e de alto desempenho. O Quarkus ajuda você a usar suas habilidades e código existentes de novas maneiras e reduz consideravelmente a carga técnica ao migrar para um ambiente centrado no Kubernetes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus lambdas can be deployed using the Amazon Java Runtime, or you can build a native executable and use
Amazon's Custom Runtime if you want a smaller memory footprint and faster cold boot startup time.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os lambdas do Quarkus podem ser implantados usando o runtime Java do AWS Lambda, ou você pode criar um executável nativo e usar o runtime personalizado da Amazon, se quiser um espaço de memória menor e um tempo de inicialização mais rápido no cold boot.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus leverages SmallRye Health, an implementation of the MicroProfile Health specification. This allows applications to provide information about their state to external viewers in a Kubernetes environment where automated processes must be able to determine whether the application should be discarded or restarted. &lt;a href="{{site.baseurl}}/guides/microprofile-health"&gt;Read the guide for more details.&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Quarkus aproveita o SmallRye Health, uma implementação da especificação MicroProfile Health. Isso permite que as aplicações forneçam informações sobre seu estado para visualizadores externos em um ambiente Kubernetes onde os processos automatizados devem ser capazes de determinar se o aplicativo deve ser descartado ou reiniciado. &lt;a href="{{site.baseurl}}/guides/microprofile-health"&gt;Leia o guia para obter mais detalhes.&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus makes it easy to deploy microservice applications to Kubernetes without having to understand the intricacies of the underlying Kubernetes framework. Extensions are available for Kubernetes, and Kubernetes distributions, to facilitate this process with only a minimal amount of configuration variables needed.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Quarkus facilita a implantação de aplicações de microsserviço no Kubernetes sem precisar entender as complexidades da estrutura subjacente do Kubernetes. Extensões estão disponíveis para Kubernetes e distribuições Kubernetes, para facilitar esse processo com apenas uma quantidade mínima de variáveis de configuração necessárias.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus now has extensions for DynamoDB, S3, SNS and SQS (more coming).
Please check link:{amazon-services-guide}[those guides] on how to use the various AWS Services with Quarkus, as opposed to wiring manually like below.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Quarkus agora tem extensões para DynamoDB, S3, SNS e SQS (mais em breve). Consulte xref:{amazon-services-guide}[esses guias] sobre como usar os vários serviços da AWS com o Quarkus, em vez de fazer a conexão manualmente, como abaixo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus offers unequaled performance</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Quarkus oferece um desempenho inigualável</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus on Kubernetes</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Quarkus no Kubernetes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus only implements a subset of the CDI features and comes with non-standard features and specific APIS, you can learn more about it in the xref:cdi-reference.adoc[Contexts and Dependency Injection guide].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Quarkus apenas implementa um subconjunto das funcionalidades CDI e inclui funcionalidades não normalizadas e APIS específicos. Você pode obter mais informações sobre este assunto no  link:cdi-reference.html[guia Contexts and Dependency Injection].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus provides `create-extension` Maven Mojo to initialize your extension project.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Quarkus fornece o Mojo `create-extension` do Maven para inicializar o seu projeto de extensão.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus provides a cohesive, fun to use, full-stack framework by leveraging a growing list of hundreds of best-of-breed libraries that you love and use. All wired on a standard backbone.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Quarkus fornece um framework coeso, divertido de usar e full-stack, aproveitando uma lista crescente de centenas de bibliotecas disponíveis que você ama e usa. Tudo conectado em um backbone padrão.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus provides a cohesive, fun to use, full-stack framework by leveraging a growing list of hundreds of best-of-breed libraries that you love and use. All wired on a standard backbone. &lt;a href="/standards"&gt;Learn more about Quarkus Extensions&lt;/a&gt;.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Quarkus fornece uma estrutura coesa, divertida de usar e full-stack, aproveitando uma lista crescente de centenas de bibliotecas disponíveis que você ama e usa. Tudo conectado em um backbone padrão. &lt;a href="/standards"&gt;Saiba mais sobre as extensões do Quarkus&lt;/a&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus provides a cohesive, fun to use, full-stack framework by leveraging a growing list of over fifty best-of-breed libraries that you love and use. All wired on a standard backbone.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Quarkus fornece uma estrutura full-stack coesa e divertida de usar, aproveitando uma lista crescente de mais de cinquenta bibliotecas de primeira linha que você adora e usa. Tudo conectado a um backbone padrão.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus provides a compatibility layer for Spring Cloud Config in the form of the spring-cloud-config-client extension.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Quarkus fornece uma camada de compatibilidade para o Spring Cloud Config na forma da extensão spring-cloud-config-client.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus provides developers the tools and capabilities to troubleshoot distributed microservices applications in Kubernetes including tracing and debugging.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Quarkus fornece aos desenvolvedores as ferramentas e os recursos para solucionar problemas de aplicações de microsserviços distribuídos no Kubernetes, incluindo rastreamento e depuração.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus simplifies the most common usages.
This means that its defaults might be different from the library it integrates.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Quarkus simplifica os usos mais comuns. Isso significa que seus padrões podem ser diferentes da biblioteca que ele integra.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus starts a RabbitMQ broker automatically, configures the application and shares the broker instance between different applications.
See xref:rabbitmq-dev-services.adoc[Dev Services for RabbitMQ] for more details.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Quarkus inicia um broker RabbitMQ automaticamente, configura o aplicativo e compartilha a instância do broker entre diferentes aplicativos. Consulte xref:rabbitmq-dev-services.adoc[Dev Services for RabbitMQ]] para obter mais detalhes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus supports https://junit.org/junit5/[JUnit 5] tests.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Quarkus suporta testes link:https://junit.org/junit5/[JUnit 5].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus tailors your application for GraalVM and HotSpot. Amazingly fast boot time, incredibly low RSS memory (not just heap size!) offering near instant scale up and high density memory utilization in container orchestration platforms like Kubernetes. We use a technique we call compile time boot.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Quarkus adapta seu aplicativo para GraalVM e HotSpot. Tempo de inicialização incrivelmente rápido, memória RSS incrivelmente baixa (não apenas tamanho de heap!) oferecendo aumento de escala quase instantâneo e utilização de memória de alta densidade em plataformas de orquestração de contêineres como o Kubernetes. Usamos uma técnica que chamamos de inicialização de tempo de compilação.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus tailors your application for GraalVM and HotSpot. Amazingly fast boot time, incredibly low RSS memory (not just heap size!) offering near instant scale up and high density memory utilization in container orchestration platforms like Kubernetes. We use a technique we call compile time boot. &lt;a href="/container-first"&gt;Learn more.&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Quarkus adapta seu aplicativo para GraalVM e HotSpot. Tempo de inicialização incrivelmente rápido, memória RSS incrivelmente baixa (não apenas tamanho de heap!) oferecendo aumento de escala quase instantâneo e utilização de memória de alta densidade em plataformas de orquestração de contêineres como o Kubernetes. Usamos uma técnica que chamamos de inicialização de tempo de compilação. &lt;a href="/container-first"&gt;Saiba Mais.&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus utilizes &lt;a href="https://opentracing.io/" target="_blank"&gt;OpenTracing&lt;/a&gt; which is a vendor-agnostic API to help developers easily instrument tracing into their codebase. Distributed tracing helps pinpoint where failures occur and what causes poor performance. &lt;a href="{{site.baseurl}}/guides/opentracing"&gt;Read the guide for more details.&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Quarkus utiliza o &lt;a href="https://opentracing.io/" target="_blank"&gt;OpenTracing&lt;/a&gt; , que é uma API independente de fornecedor para ajudar os desenvolvedores a instrumentar facilmente o rastreamento em sua base de código. O rastreamento distribuído ajuda a identificar onde ocorrem falhas e o que causa o baixo desempenho. &lt;a href="{{site.baseurl}}/guides/opentracing"&gt;Leia o guia para obter mais detalhes.&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus utilizes the &lt;a href="https://micrometer.io/" target="_blank"&gt;Micrometer&lt;/a&gt; metrics library for runtime and application metrics. It provides a simple facade for the most popular monitoring systems to instrument your JVM-based application code without vendor lock-in. Application-specific and built-in metrics can be exposed using Micrometer. &lt;a href="{{site.baseurl}}/guides/micrometer#support-for-the-microprofile-metrics-api"&gt;Read the guide for more details.&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Quarkus utiliza a biblioteca de métricas &lt;a href="https://micrometer.io/" target="_blank"&gt;Micrometer&lt;/a&gt; para métricas de tempo de execução e de aplicativos. Ele fornece uma fachada simples para os sistemas de monitoramento mais populares para instrumentar seu código de aplicativo baseado em JVM sem ficar preso a um fornecedor específico. Métricas internas e específicas do aplicativo podem ser expostas usando o Micrometer. &lt;a href="{{site.baseurl}}/guides/micrometer#support-for-the-microprofile-metrics-api"&gt;Leia o guia para obter mais detalhes.&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus was built from the ground up for Kubernetes making it easy to deploy applications without having to understand all of the complexities of the platform. Quarkus allows developers to automatically generate Kubernetes resources including building and deploying container images without having to manually create YAML files.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Quarkus foi criado do zero para o Kubernetes, facilitando a implantação de aplicativos sem precisar entender todas as complexidades da plataforma. O Quarkus permite que os desenvolvedores gerem automaticamente recursos do Kubernetes, incluindo a criação e implantação de imagens de contêiner sem a necessidade de criar manualmente arquivos YAML.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus was created to enable Java developers to create applications for a modern, cloud-native world. Quarkus is a Kubernetes-native Java framework tailored for GraalVM and HotSpot, crafted from best-of-breed Java libraries and standards. The goal is to make Java the leading platform in Kubernetes and serverless environments while offering developers a framework to address a wider range of distributed application architectures.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Quarkus foi criado para permitir que os desenvolvedores Java criem aplicativos para um mundo moderno e nativo da nuvem. O Quarkus é uma estrutura Java nativa do Kubernetes adaptada para GraalVM e HotSpot, criada a partir das melhores bibliotecas e padrões Java. O objetivo é tornar o Java a plataforma líder em Kubernetes e ambientes sem servidor, oferecendo aos desenvolvedores uma estrutura para abordar uma ampla gama de arquiteturas de aplicações distribuídas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus's Collaborative Community Forum</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Fórum da Comunidade Colaborativa do Quarkus</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus's integration with lambdas also supports Quarkus's Live Coding development cycle.  You can
bring up your Quarkus lambda project in dev or test mode and code on your project live.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A integração do Quarkus com lambdas também suporta o ciclo de desenvolvimento Quarkus's Live Coding. Você pode abrir seu projeto lambda do Quarkus no modo de desenvolvimento ou teste e codificar seu projeto ao vivo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quarkus’s mission is to transform your entire application including the libraries it uses, into an artifact that uses significantly less resources than traditional approaches. These can then be used to build native applications using GraalVM.
To do this you need to analyze and understand the full "closed world" of the application.
Without the full and complete context, the best that can be achieved is partial and limited generic support.
By using the Quarkus extension approach, we can bring Java applications in line with memory footprint constrained environments like Kubernetes or cloud platforms.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A missão do Quarkus é transformar toda a sua aplicação, inclusive as bibliotecas que ele usa, em um artefato que utiliza significativamente menos recursos do que as abordagens tradicionais. Esses recursos podem então ser usados para criar aplicações nativos usando GraalVM. Para fazer isso, você precisa analisar e entender o "mundo fechado" completo da aplicação. Sem o contexto total e completo, o melhor que se pode conseguir é um suporte genérico parcial e limitado. Ao usar a abordagem de extensão Quarkus, podemos alinhar as aplicações Java com ambientes com restrições de espaço de memória, como Kubernetes ou plataformas de nuvem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Query Parameters</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Parâmetros de Consulta</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Quickly Bootstrap Your Application</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Inicialize rapidamente sua aplicação</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Qute Configuration Reference</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Referência de configuração do Qute</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Qute Reference Guide</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Guia de Referência do Qute</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Qute Templating Engine</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Motor de template Qute</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Qute is a templating engine designed specifically to meet the Quarkus needs.
The usage of reflection is minimized to reduce the size of native images.
The API combines both the imperative and the non-blocking reactive style of coding.
In the development mode, all files located in `src/main/resources/templates` are watched for changes and modifications are immediately visible.
Furthermore, we try to detect most of the template problems at build time.
In this guide, you will learn how to easily render templates in your application.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Qute é um mecanismo de modelagem projetado especificamente para atender às necessidades do Quarkus. O uso de reflexão é minimizado para reduzir o tamanho das imagens nativas. A API combina tanto o estilo imperativo quanto o estilo de codificação reativo e não bloqueante. No modo de desenvolvimento, todos os arquivos localizados em `src/main/resources/templates` são monitorados para alterações, e as modificações são imediatamente visíveis. Além disso, tentamos detectar a maioria dos problemas de modelo durante o tempo de compilação. Neste guia, você aprenderá como renderizar facilmente modelos em sua aplicação.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>REMOVED_BEANS</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>REMOVED_BEANS</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>REST Client Reactive allows sending data as multipart forms. This way you can for example
send files efficiently.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Cliente REST Reativo permite o envio de dados como formulários multi-partes. Dessa forma, você pode, por exemplo, enviar arquivos de forma eficiente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>REST Client Reactive also supports receiving compressed messages using GZIP. You can enable the HTTP compression support by adding the property `quarkus.http.enable-compression=true`.
When this feature is enabled and a server returns a response that includes the header `Content-Encoding: gzip`, REST Client Reactive will automatically decode the content and proceed with the message handling.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Cliente REST Reativo também suporta o recebimento de mensagens compactadas usando GZIP. Você pode ativar o suporte à compactação HTTP adicionando a propriedade `quarkus.http.enable-compression=true` . Quando esse recurso está ativado e um servidor retorna uma resposta que inclui o cabeçalho `Content-Encoding: gzip` , o Cliente REST Reativo decodifica automaticamente o conteúdo e prossegue com o tratamento da mensagem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>REST Client Reactive also supports receiving multipart messages.
As with sending, to parse a multipart response, you need to create a class that describes the response data, e.g.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Cliente REST Reativo também oferece suporte ao recebimento de mensagens multi-partes. Assim como no envio, para analisar uma resposta multi-parte, você precisa criar uma classe que descreva os dados da resposta, por exemplo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>REST Client Reactive can log the requests it sends and the responses it receives.
To enable logging, add the `quarkus.rest-client.logging.scope` property to your `application.properties` and set it to:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Cliente REST Reativo pode registrar as requisições que envia e as respostas que recebe. Para ativar o registro, adicione a propriedade `quarkus.rest-client.logging.scope` ao seu `application.properties` e defina-a como:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>REST Client Reactive is logging the traffic with level DEBUG and does not alter logger properties. You may need to adjust your logger configuration to use this feature.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Cliente REST Reativo está registrando o tráfego com o nível DEBUG e não altera as propriedades do registrador. Poderá ser necessário ajustar a configuração do registrador para utilizar esta funcionalidade.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>REST Client Reactive needs to know the classes used as multipart return types upfront. If you have an interface method that produces `multipart/form-data`, the return type will be discovered automatically. However, if you intend to use the `ClientBuilder` API to parse a response as multipart, you need to annotate your DTO class with `@MultipartForm`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Cliente REST Reativo precisa de conhecer antecipadamente as classes utilizadas como tipos de retorno multi-partes. Se tiver um método de interface que produz `multipart/form-data`, o tipo de retorno será descoberto automaticamente. No entanto, se pretender utilizar a API `ClientBuilder` para analisar uma resposta como multi-parte, tem de anotar a sua classe DTO com `@MultipartForm`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>REST Client Reactive support multipart messages.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Cliente REST Reativo suporta mensagens com multi-parte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>REST Client Reactive supports sending requests through a proxy.
It honors the JVM settings for it but also allows to specify both:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Cliente REST Reativo suporta o envio de requisições por meio de um proxy. Ele respeita as configurações da JVM para isso, mas também permite especificar ambos:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>REST Client Reactive uses a default `ClientLogger` implementation. You can change it by providing a custom `ClientLogger` instance through CDI or when programmatically creating your client.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Cliente REST Reativo utiliza uma implementação padrão de `ClientLogger`. Você pode alterá-la fornecendo uma instância `ClientLogger` personalizada através do CDI ou ao criar programaticamente o seu cliente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>REST `quarkus-amazon-lambda-rest`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>REST `quarkus-amazon-lambda-rest`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>RESTEasy Reactive Jackson</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>RESTEasy Reactive Jackson</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>RESTEasy Reactive and its Jackson support to handle JSON payloads</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>RESTEasy Reactive e o suporte a Jackson para lidar com as requisições JSON</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>RUN_TIME</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>RUN_TIME</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>RabbitMQ Dev Services</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Dev Services RabbitMQ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>RabbitMQ Reference</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Referência do RabbitMQ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Re-augment a Quarkus Application</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Reajustar uma aplicação Quarkus</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Re-read during startup (native executable)</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Relido durante a inicialização (executável nativo)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Reactive</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Reativo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Reactive API for Hibernate ORM</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>API reativa para Hibernate ORM</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Reactive Panache Entity</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Entidade Panache Reativa</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Reactive PostgreSQL client</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Reactive PostgreSQL client</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Reactive Resource</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Recurso Reativo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Reactive SQL Clients</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Clientes SQL reativos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Reactive code on event loop</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Código reativo no event loop</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Reactive developers may wonder why we can't return a stream of fruits directly.
It tends to be a bad idea when dealing with a database.
Relational databases do not handle streaming well.
It’s a problem of protocols not designed for this use case.
So, to stream rows from the database, you need to keep a connection (and sometimes a transaction) open until all the rows are consumed.
If you have slow consumers, you break the golden rule of databases: don’t hold connections for too long.
Indeed, the number of connections is rather low, and having consumers keeping them for too long will dramatically reduce the concurrency of your application.
So, when possible, use a `Uni&lt;List&lt;T&gt;&gt;` and load the content.
If you have a large set of results, implement pagination.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os desenvolvedores reativos podem se perguntar por que não podemos retornar um fluxo de frutas diretamente. Isso tende a ser uma má ideia quando se lida com um banco de dados. Os bancos de dados relacionais não lidam bem com o streaming. É um problema de protocolos não projetados para esse caso de uso. Portanto, para transmitir linhas do banco de dados, você precisa manter uma conexão (e, às vezes, uma transação) aberta até que todas as linhas sejam consumidas. Se os consumidores forem lentos, você quebra a regra de ouro dos bancos de dados: não mantenha as conexões por muito tempo. Na verdade, o número de conexões é bastante baixo, e ter consumidores mantendo-as por muito tempo reduzirá drasticamente a concorrência da sua aplicação. Portanto, quando possível, use um `Uni&lt;List&lt;T&gt;&gt;` e carregue o conteúdo. Se você tiver um grande conjunto de resultados, implemente a paginação.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Reactive extensions</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Extensões reativas</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Read &amp; avail. at build time</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Lido e disponível em tempo de construção</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Read during static init</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Lido durante a inicialização estática</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Read the Guide</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Leia o Guia</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Reading the entity is now allowed because we're executing the mapper on the worker thread pool.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A leitura da entidade é agora permitida porque estamos executando o mapeador no pool de threads de trabalho.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Receiving Multipart Messages</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Recebendo Mensagens Multi-partes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Receiving compressed messages</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Recebendo mensagens comprimidas</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Receiving quotes</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Recebendo cotações</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>RecorderContext</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>RecorderContext</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Red Hat Build of Quarkus</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Red Hat Build do Quarkus</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Redirection</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Redirecionamento</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Redis Cache</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Cache Redis</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Redis Client</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Cliente Redis</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Redis Dev Services</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Dev Services Redis</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Redis Reference</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Referência do Redis</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Redis as cache backend</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Redis como backend cache</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Redpanda transactions does not support exactly-once processing.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>As transações Redpanda não suportam um processamento exatamente único.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Reduction in Reflection Usage</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Redução no uso de reflexão</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Refer to the xref:all-config.adoc#quarkus-vertx-http_quarkus.http.non-application-root-path[Quarkus Vertx HTTP configuration reference]
for details on how the non-application root path is configured.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Consulte a xref:all-config.adoc#quarkus-vertx-http_quarkus.http.non-application-root-path[referência de configuração HTTP do Quarkus Vertx] para obter detalhes sobre como o caminho raiz que não é da aplicação é configurado.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Reference guide for OpenID Connect and OAuth2 Client and Filters.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Guia de referência para clientes e filtros OpenID Connect e OAuth2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Reference guide for SmallRye Reactive Messaging and AMQP.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Guia de referência para SmallRye Reactive Messaging e AMQP.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Reference guide for SmallRye Reactive Messaging and RabbitMQ.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Guia de referência para SmallRye Reactive Messaging e RabbitMQ.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Reference guides</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Guias de referência</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Reference guides are _technical descriptions_ of the machinery and how to operate it. Reference material is _information-oriented_.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os guias de referência são _descrições técnicas_ da máquina e do seu funcionamento. O material de referência é _orientado para a informação_.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>References</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Referências</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Register Resources for Use in Native Image</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Registre Recursos para Uso na Imagem Nativa</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Register a Bean Defining Annotation</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Registrando uma Anotação de Definição de Bean</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Register the annotation class and CDI default scope using the Jandex `DotName` class.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Registre a classe de anotação e o escopo padrão CDI usando a classe Jandex `DotName`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Register the output of the step executing `./mvnw ...` command (i.e. directory `target/native-image`) as a build artifact,</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Registar a saída da etapa que executa o comando `./mvnw …​` (ou seja, o diretório `target/native-image`) como um artefacto de construção,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Register the output of the step executing the `native-image ...` command (i.e. files matching `target/*runner`) as build artifact.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Registar a saída do passo que executa o comando `native-image …​` (ou seja, arquivos que correspondem a `target/*runner`) como artefacto de build.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Registering Resources and ResourceBundles</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Registrando Recursos e Pacotes de Recursos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Registering an Object Substitution</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Registrando uma Substituição de Objeto</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Registers a class for reflection in Substrate. Constructors are always registered, while methods and fields are optional.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Registra uma classe para reflexão no Substrate. Os construtores são sempre registrados, enquanto os métodos e campos são opcionais.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Registers the `MySpecialInterceptor` for this particular client.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Regista o `MySpecialInterceptor` para este cliente específico.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Registration of synthetic components</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Registo de componentes sintéticos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Release the connection if it is not used for more than [connectionMaxIdleSeconds] seconds. If  [connectionMaxIdleSeconds] &lt; 0, disabled the feature that auto release the idle connections</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Solte a conexão se ela não for usada por mais de [connectionMaxIdleSeconds] segundos. Se [connectionMaxIdleSeconds] &lt; 0, desabilitado o recurso que libera automaticamente as conexões ociosas</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Releasing your Quarkus applications with JReleaser</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Liberando seus aplicativos Quarkus com o JReleaser</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Remember that metrics extensions are optional. Keep metrics-related initialization isolated from other setup for your extension, and structure your code to avoid eager imports of metrics APIs. Gathering metrics can also be expensive. Consider using additional extension-specific configuration to control behavior of metrics if the presence/absence of metrics support isn't sufficient.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Lembre-se de que as extensões de métricas são opcionais. Mantenha a inicialização relacionada a métricas isolada de outras configurações para sua extensão e estruture seu código para evitar importações antecipadas de APIs de métricas. A coleta de métricas também pode ser cara. Considere o uso de configuração adicional específica da extensão para controlar o comportamento das métricas se a presença/ausência de suporte a métricas não for suficiente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Remember that support for metrics is optional. Extensions can use an `Optional&lt;MetricsCapabilityBuildItem&gt; metricsCapability` parameter in their build step to test for the presence of an enabled metrics extension. Consider using additional configuration to control behavior of metrics. Datasource metrics can be expensive, for example, so additional configuration flags are used enable metrics collection on individual datasources.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Lembre-se de que o suporte para métricas é opcional. As extensões podem usar um parâmetro `Optional&lt;MetricsCapabilityBuildItem&gt; metricsCapability` em sua etapa de construção para testar a presença de uma extensão de métricas habilitada. Considere o uso de configuração adicional para controlar o comportamento das métricas. As métricas de fontes de dados podem ser caras, por exemplo, portanto, sinalizadores de configuração adicionais são usados para habilitar a coleta de métricas em fontes de dados individuais.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Remember to add `IndexDependencyBuildItem` artifacts to your `@BuildStep`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Não se esqueça de adicionar os artefatos `IndexDependencyBuildItem` ao seu `@BuildStep`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Remote Development</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Desenvolvimento remoto</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Rendering Periodic Reports</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Renderização de relatórios periódicos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Replacing Classes in the Native Image</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Substituindo Classes na Imagem Nativa</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Request query will include parameter with key `name`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A consulta da requisição incluirá um parâmetro com a chave `name`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Require this artifact in the step executing the `native-image ...` command, and</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exigir este artefacto no passo que executa o comando `native-image …​`, e</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Resource registration</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Registo de recursos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Restoration is limited to 2 seconds.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A restauração é limitada a 2 segundos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Results are not limited to strings - for example when the server returns JSON payload for each event, Quarkus automatically deserializes it into the generic type used in the `Multi`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os resultados não se limitam a strings - por exemplo, quando o servidor retorna um payload JSON para cada evento, o Quarkus a desserializa automaticamente para o tipo genérico usado no `Multi` .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Retrieve a new increment</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Recuperar um novo incremento</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Retrieve the commands to manipulate the counters</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Recuperar os comandos para manipular os contadores</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Retrieve the commands to manipulate the keys</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Recuperar os comandos para manipular as chaves</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Retrieve the index.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Recupera o índice.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Retrieve the value associated with the given key. It `null`, returns 0.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Recupera o valor associado à chave indicada. Se `null`, retorna 0.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Returns the stream (_Reactive Stream_)</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Devolve o fluxo _(Reactive Stream_)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Risk of pinning, monopolization and under-efficient object pooling</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Risco de fixação (pinning), monopolização e agrupamento de objetos pouco eficiente</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Roughly 15 minutes</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Cerca de 15 minutos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Roughly {prerequisites-time}</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Mais ou menos {prerequisites-time}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Run &lt;a href="{{site.baseurl}}/guides/maven-tooling#dev-mode"&gt;dev mode&lt;/a&gt; remotely with changes to local files immediately available in a containerize environment.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Execute o &lt;a href="{{site.baseurl}}/guides/maven-tooling#dev-mode"&gt;modo de desenvolvimento&lt;/a&gt; remotamente com alterações em arquivos locais imediatamente disponíveis em um ambiente de conteinerização.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Run application using virtual threads</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Executar a aplicação utilizando threads virtuais</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Run code on virtual threads using @RunOnVirtualThread</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Execute código em threads virtuais usando @RunOnVirtualThread</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Run the application in dev mode with:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Execute a aplicação em modo de desenvolvimento com:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Run the application using: `mvn quarkus:dev`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Executar a aplicação utilizando: `mvn quarkus:dev`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Run the application with:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Execute a aplicação com:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Run the following SAM CLI command to locally test your lambda function, passing the appropriate SAM `template`.
The `event` parameter takes any JSON file, in this case the sample `payload.json`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Execute o seguinte comando SAM CLI para testar localmente sua função lambda, passando o `template` SAM apropriado. O parâmetro `event` usa qualquer arquivo JSON, neste caso o exemplo `payload.json`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Run the tests to verify that application still functions correctly.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Execute os testes para verificar se a aplicação continua funcionando corretamente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Run the tests to verify the change.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Execute os testes para verificar a alteração.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Running Native</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Executando em modo nativo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Running in JVM or Native mode</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Execução em modo JVM ou nativo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Running the above command should return the result below:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A execução do comando acima deve retornar o resultado abaixo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Running the application</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Executando a aplicação</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Running the build process in a container is also possible:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Também é possível executar o processo de compilação num contêiner:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Running this command, should return the following result:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Ao executar este comando, deverá obter o seguinte resultado:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Runtime Classpath check</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Verificação do Classpath de Tempo de Execução</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Runtime Init</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Inicialização em Tempo de Execução</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Runtime recorder invokes the `IConfigConsumer#loadConfig(...)` method passing in the configuration objects with runtime information.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O gravador de tempo de execução invoca o método `IConfigConsumer#loadConfig(…​)`, passando os objetos de configuração com informações de tempo de execução.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Runtime recorder registers an invocation of the service instance `stopService` method with the Quarkus `ShutdownContext`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O registrador de tempo de execução registra uma invocação do método `stopService` da instância do serviço com o Quarkus `ShutdownContext`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Runtime recorder retrieves the bean using its type.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O gravador de tempo de execução recupera o bean usando o seu tipo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Runtime recorder retrieves the service instance reference and calls its `startService` method.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O gravador de tempo de execução recupera a referência da instância do serviço e chama o seu método `startService`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>SCOPES</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>SCOPES</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>STEREOTYPES</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>STEREOTYPES</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>SUBATOMIC&lt;span class="light-blue"&gt;/&lt;/span&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>&lt;span class="light-blue"&gt;SUBATÔMICO&lt;/span&gt;/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>SUPERSONIC&lt;span class="light-blue"&gt;/&lt;/span&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>SUPERSÔNICO&lt;span class=“light-blue”&gt;/&lt;/span&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Sample Dockerfile for building with Gradle:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de Dockerfile para build com o Gradle:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Sample Dockerfile for building with Maven:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de Dockerfile para fazer o build com o Maven:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Sample Test Extension</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de Extensão de Teste</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Sample multistage Dockerfile for building an image from `scratch`:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de Dockerfile de vários estágios para criar uma imagem a partir de `scratch`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Save the bean class in a `TestBeanBuildItem` for use in a latter RUNTIME_INIT build step that will interact with the bean instances.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Salva a classe do bean em `TestBeanBuildItem` para utilizar num passo de construção RUNTIME_INIT posterior que irá interagir com as instâncias do bean.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Save this file in `src/main/docker/Dockerfile.multistage` as it is not included in the getting started quickstart.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Salve esse arquivo em `src/main/docker/Dockerfile.multistage`, uma vez que não está incluído no startup rápido.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Scan the `quarkusio` catalog for aliases prefixed with `quarkus-`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Scan the `quarkusio` catalog for aliases prefixed with `quarkus-`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Scan the local or project jbang catalog for aliases prefixed with `quarkus-`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Scan the local or project jbang catalog for aliases prefixed with `quarkus-`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Scan the path elements for executable files prefixed with `quarkus-`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Scan the path elements for executable files prefixed with `quarkus-`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Scanning Deployments Using Jandex</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Verificando Implantações Usando Jandex</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Scheduler Reference</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Referência do Scheduler</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Scheduling Clustered Tasks with Quartz</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Agendando tarefas clusterizadas com o Quartz</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Scheduling Periodic Tasks</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Agendamento de Tarefas Periódicas</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Schema Migration with Flyway</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Migração de esquemas com o Flyway</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Schema Migration with Liquibase</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Migração de esquemas com o Liquibase</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Scratch image support is experimental.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O suporte de imagens scratch é experimental.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Scratch images should not be used in production without rigorous testing.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>As imagens Scratch não devem ser utilizadas em produção sem um teste rigoroso.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Second, `cacerts`, the certificate store.  You may need to periodically obtain an updated copy, also.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Em segundo lugar, `cacerts`, o repositório de certificados. Poderá também ser necessário obter periodicamente uma cópia atualizada.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Seconds of auto refreshing certificate.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Segundos de atualização automática do certificado.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Seconds of keeping alive interval for each client broker connection.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Segundos de intervalo de manutenção ativa para cada conexão do broker do cliente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Secure your web endpoints with authorizations.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Proteja os seus Web Endpoints com autorizações.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Security</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Segurança</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Security Customization</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Personalização de segurança</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Security Integration</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Integração da segurança</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Security Overview</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Visão geral de segurança</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Security Testing</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Testes de segurança</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Security with Basic authentication and JPA</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Segurança com autenticação básica e JPA</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>See `quarkus plugin add` below</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>See `quarkus plugin add` below</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>See current increments keys</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Ver as chaves atuais de incrementos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>See the xref:container-image.adoc[Container Image guide] for more details.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Consulte o link:container-image.html[Guia do container-image] para obter mais informações.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>See xref:tip-quarkus-native-remote-container-build[Creating a Linux executable without GraalVM installed] for more details.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Veja link:#tip-quarkus-native-remote-container-build[Criando um executável Linux sem o GraalVM instalado] para mais detalhes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Select the target architecture. You can select more than one to build multi-archs images.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Selecione a arquitetura de destino. Você pode selecionar mais do que uma para criar imagens multiarquitetura.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Send metadata to GraalVM for example classes in need of reflection</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Enviar metadados ao GraalVM para classes de exemplo que precisam de reflexão</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Sending Emails using SMTP</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Enviando e-mails usando SMTP</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Sending Multipart messages</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Enviando Mensagens Multi-partes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Sending quote request</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Enviando pedido de cotação</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Separating Java and native image compilation</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Separando a compilação de imagens nativas e Java</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>September 24, 2019</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>24 de setembro de 2019</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Serialization</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Serialização</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Server configuration</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Configurando servidor</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Server configuration example</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de configuração do servidor</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Server-Sent Event (SSE) support</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Suporte a Eventos Enviados pelo Servidor (SSE)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Service Interface</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Interface de serviço</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Service discovery and load balancing with Stork</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Descoberta de serviços e balanceamento de carga com o Stork</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Service files</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Arquivos de serviço</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Session Abstracts</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Resumos das Sessões</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Set</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Conjunto</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Set TLS using KeyStore way.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Defina o TLS usando o modo KeyStore.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Set of TLS Ciphers.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Conjunto de cifras TLS.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Set the  deadline for all injected stubs.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Defina o prazo (deadline) para todos os stubs injetados.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Set the value associated with the given key</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Define o valor associado a uma determinada chave</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Setting it up</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Configuração</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Setting the port</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Definindo a porta</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Setting up the model</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Configurando o modelo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Shared broker</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>broker compartilhado</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Shared cluster</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Cluster compartilhado</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Shouldn't rely on any metadata as it could be used at any time in any phase of the bootstrap</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Não deve depender de quaisquer metadados, uma vez que pode ser utilizado em qualquer momento de qualquer fase do bootstrap</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Similar to xref:synthetic_beans[synthetic beans], the attributes of a synthetic observer method are not derived from a Java method. Instead, all the attributes are defined by an extension.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>À semelhança dos xref:synthetic_beans[beans sintéticos], os atributos de um método de observador sintético não são derivados de um método Java. Em vez disso, todos os atributos são definidos por uma extensão.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Similarly to HTTP, alongside the message, gRPC calls can carry headers.
Headers can be useful e.g. for authentication.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Da mesma forma que no HTTP, chamadas gRPC podem transportar cabeçalhos junto com a mensagem. Cabeçalhos podem ser úteis, por exemplo, para autenticação.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Similarly, for Gradle projects, you also just have to add the `quarkus-amazon-lambda` dependency.  The extension automatically generates everything you might need
for your lambda deployment.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Da mesma forma, para projetos Gradle, você também só precisa adicionar a dependência `quarkus-amazon-lambda`. A extensão gera automaticamente tudo o que pode precisar para a implantação do lambda.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Simple SAM Local Principal</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Principal local SAM simples</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Simple build items</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Itens de construção simples</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Simple build items are final classes which extend `io.quarkus.builder.item.SimpleBuildItem`.  Simple build items may only
be produced by one step in a given build; if multiple steps in a build declare that they produce the same simple build item,
an error is raised.  Any number of build steps may consume a simple build item.  A build step which consumes a simple
build item will always run _after_ the build step which produced that item.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os itens de construção simples são classes finais que estendem `io.quarkus.builder.item.SimpleBuildItem`. Os itens de construção simples só podem ser produzidos por uma etapa em uma determinada construção; se várias etapas em uma construção declararem que produzem o mesmo item de construção simples, será gerado um erro. Qualquer número de etapas de construção pode consumir um item de construção simples. Uma etapa de construção que consome um item de construção simples sempre será executada _após_ a etapa de construção que produziu esse item.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Simple code</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Código simples</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Simplified Hibernate ORM with Panache</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Hibernate ORM simplificado com Panache</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Simplified Hibernate ORM with Panache and Kotlin</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Hibernate ORM simplificado com Panache e Kotlin</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Simplified Hibernate Reactive with Panache</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Hibernate Reativo Simplificado com Panache</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Simplified reactive ORM layer based on Hibernate Reactive.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Camada ORM reativa simplificada baseada no Hibernate Reactive.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Simplify command line applications creation with the Picocli extension.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Simplifique a criação de aplicativos de linha de comando com a extensão Picocli.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Simulate AWS Lambda Deployment with SAM CLI</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Simular o AWS Lambda Deployment com a CLI do SAM</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Since CDI is the central programming model when it comes to component composition, frameworks and extensions should expose their components as beans that are easily consumable by user applications.
For example, Hibernate ORM exposes `EntityManagerFactory` and `EntityManager` beans, the connection pool exposes `DataSource` beans etc.
Extensions must register these bean definitions at build time.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Como a CDI é o modelo de programação central no que se refere à composição de componentes, os frameworks e as extensões devem expor seus componentes como beans facilmente consumíveis pelas aplicações do usuário. Por exemplo, o Hibernate ORM expõe os beans `EntityManagerFactory` e `EntityManager` , o pool de conexões expõe os beans `DataSource` etc. As extensões devem registrar essas definições de beans no momento da construção.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Since `format` is not defined in these properties, the default value from `@WithDefault` will be used instead.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Uma vez que `format` não está definido nestas propriedades, será utilizado o valor padrão de `@WithDefault`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Since the CDI container does not control the instantiation of a synthetic bean the dependency injection and other services (such as interceptors) are not supported.
In other words, it's up to the extension to provide all required services to a synthetic bean instance.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Como o contêiner CDI não controla a instanciação de um bean sintético, não há suporte para injeção de dependência e outros serviços (como interceptadores). Em outras palavras, cabe à extensão fornecer todos os serviços necessários a uma instância de bean sintético.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Since virtual threads are disposable entities, the fundamental idea of `@RunOnVirtualThread` is to offload the execution of an endpoint handler on a new virtual thread instead of running it on an event-loop or worker thread (in the case of RESTEasy Reactive).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Como as threads virtuais são entidades descartáveis, a ideia fundamental do `@RunOnVirtualThread` é descarregar a execução de uma requisição para um determinado endpoint em uma nova thread virtual em vez de executá-la em um loop de eventos ou em uma worker thread (no caso do RESTEasy Reactive).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Since we’re not limited to standards we can go beyond and extend your possibilities. Of course, Quarkus is not a passive consumer. Our goal is to improve and innovate the technologies we use and contribute back to the open source projects and standards we rely on.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Como não estamos limitados a padrões, podemos ir além e ampliar suas possibilidades. É claro que o Quarkus não é um consumidor passivo. Nosso objetivo é melhorar e inovar as tecnologias que usamos e contribuir de volta para os projetos e padrões de código aberto nos quais confiamos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Single-step Deployments</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Implantações de etapa única</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Size of a consumer's receiver queue. +
For example, the number of messages accumulated by a consumer before an application calls `Receive`. +
A value higher than the default value increases consumer throughput, though at the expense of more memory utilization.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Tamanho da fila de destinatários de um consumidor. +
Por exemplo, o número de mensagens acumuladas por um consumidor antes de um aplicativo chamar 'Receber'. +
Um valor maior que o valor padrão aumenta a taxa de transferência do consumidor, embora às custas de mais utilização de memória.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Skipping class initialization</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Pulando a inicialização da classe</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>SnapStart</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>SnapStart</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>SnapStart uses the CRaC API to allow the application to execute custom code before the snapshotting or during the restoration.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O SnapStart utiliza a API CRaC para permitir que a aplicação execute código personalizado antes do _snapshotting_ ou durante a restauração.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>So join us as we explore how Quarkus helps Java developers everywhere to be more productive, create modern masterpieces and, well, have more fun: 90 odd minutes of technical discussion, some live coding and a Q&amp;A - it’s going to be a blast.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Então junte-se a nós enquanto exploramos como o Quarkus ajuda desenvolvedores Java em todos os lugares a serem mais produtivos, criar obras-primas modernas e, bem, se divertir mais: 90 minutos ímpares de discussão técnica, alguma codificação ao vivo e uma sessão de perguntas e respostas - vai ser uma explosão.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>So, first, add the following imports to the `src/main/java/org/acme/VertxResource.java` file:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>So, first, add the following imports to the `src/main/java/org/acme/VertxResource.java` file:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>So, first, let's extend our `VertxResource` class with the following code:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>So, first, let's extend our `VertxResource` class with the following code:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>So, unlike the imperative model, where I/O blocks the execution, reactive switches to a continuation-based design, where the I/O threads are released, and continuation invoked when the I/Os complete.
As a result, the I/O thread can handle multiple concurrent requests, improving the overall concurrency of the application.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Portanto, ao contrário do modelo imperativo, em que a E/S bloqueia a execução, o reativo muda para um design baseado em continuação, em que os threads de E/S são liberados e a continuação é invocada quando as E/S são concluídas. Como resultado, o thread de E/S pode lidar com várias requisições concorrentes, melhorando a concorrência geral da aplicação.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>So, with the reactive execution model, the requests are processed using I/O threads.
But that's not all.
An I/O thread can handle multiple concurrent requests.
How? Here is the trick and one of the most significant differences between reactive and imperative.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Portanto, com o modelo de execução reativa, as requisições são processadas usando threads de E/S. Mas isso não é tudo. Um thread de E/S pode lidar com várias solicitações concorrentes. Como? Aqui está o truque e uma das diferenças mais significativas entre o reativo e o imperativo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Solution</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Solução</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Some components may require additional initialization based on information collected during augmentation.
The most straightforward solution is to obtain a bean instance and call a method directly from a build step.
However, it is _illegal_ to obtain a bean instance during the augmentation phase.
The reason is that the CDI container is not started yet.
It's started during the xref:bootstrap-three-phases[Static init bootstrap phase].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Alguns componentes podem exigir inicialização adicional com base nas informações coletadas durante a ampliação. A solução mais direta é obter uma instância de bean e chamar um método diretamente de uma etapa de construção. No entanto, é _ilegal_ obter uma instância de bean durante a fase de ampliação. O motivo é que o contêiner CDI ainda não foi iniciado. Ele é iniciado durante a xref:bootstrap-three-phases[Fase de inicialização estática do bootstrap].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Some extensions may be private, and some may wish to be part of the
broader Quarkus ecosystem, and available for community re-use.
Inclusion in the Quarkiverse Hub is a convenient mechanism for handling
continuous testing and publication.
The link:https://github.com/quarkiverse/quarkiverse/wiki#getting-an-extension-onboarded[Quarkiverse Hub wiki] has instructions
for on-boarding your extension.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Algumas extensões podem ser privadas e outras podem desejar fazer parte do ecossistema mais amplo do Quarkus e estar disponíveis para reutilização pela comunidade. A inclusão no Quarkiverse Hub é um mecanismo conveniente para lidar com testes e publicações contínuos. O link:https://github.com/quarkiverse/quarkiverse/wiki#getting-an-extension-onboarded[wiki do Quarkiverse Hub] tem instruções para integrar sua extensão.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Some types of extensions</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Alguns tipos de extensões</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Sometimes a value isn't necessary for the build to complete, but might inform some behavior of the build step if it is
present.  In this case, the value can be optionally injected.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Às vezes, um valor não é necessário para que a construção seja concluída, mas pode informar algum comportamento da etapa de construção se estiver presente. Nesse caso, o valor pode ser injetado opcionalmente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Sometimes extensions need to extend the set of built-in CDI contexts.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Às vezes, as extensões precisam estender o conjunto de contextos CDI integrados.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Sometimes extensions need to inspect the beans, observers and injection points, then perform additional validations and fail the build if something is wrong.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Por vezes, as extensões precisam de inspecionar os beans, os observadores e os pontos de injeção e, em seguida, efetuar validações adicionais e falhar a construção se algo estiver errado.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Sometimes it is practical to be able to register a _synthetic bean_.
Bean attributes of a synthetic bean are not derived from a Java class, method or field.
Instead, all the attributes are defined by an extension.
In regular CDI, this could be achieved using the https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html#after_bean_discovery[`AfterBeanDiscovery.addBean()`, window="_blank"] and https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html#bce_synthesis[`SyntheticComponents.addBean()`] methods.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Às vezes, é prático poder registrar um _bean sintético_ . Os atributos de bean de um bean sintético não são derivados de uma classe, método ou campo Java. Em vez disso, todos os atributos são definidos por uma extensão. No CDI regular, isso poderia ser feito usando os métodos https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html#after_bean_discovery[`AfterBeanDiscovery.addBean()`, window="_blank"] e https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html#bce_synthesis[`SyntheticComponents.addBean()`].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Sometimes it is very useful to be able to register a synthetic bean.
Bean attributes of a synthetic bean are not derived from a java class, method or field.
Instead, the attributes are specified by an extension.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Às vezes, é muito útil poder registrar um bean sintético. Os atributos de bean de um bean sintético não são derivados de uma classe, método ou campo Java. Em vez disso, os atributos são especificados por uma extensão.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Sometimes it might be useful to register an existing annotation that is not annotated with `@jakarta.inject.Qualifier` as a CDI qualifier.
This is similar to what CDI achieves through `BeforeBeanDiscovery#addQualifier()`.
We are going to use `QualifierRegistrarBuildItem` to get it done.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Às vezes, pode ser útil registrar uma anotação existente que não esteja anotada com `@jakarta.inject.Qualifier` como um qualificador CDI. Isso é semelhante ao que a CDI faz por meio do `BeforeBeanDiscovery#addQualifier()` . Vamos usar o `QualifierRegistrarBuildItem` para fazer isso.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Sometimes you need more than just handling messages one by one.  You can also express your message processing logic using reactive programming as illustrated in the following snippet:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Às vezes, você precisa de mais do que apenas lidar com mensagens uma a uma.  Você também pode expressar sua lógica de processamento de mensagens usando programação reativa, conforme ilustrado no trecho a seguir:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Sometimes, though, you might have a few related lambdas that share code and creating multiple maven modules is just
an overhead you don't want to do.  The `quarkus-amazon-lambda` extension allows you to bundle multiple lambdas in one
project and use configuration or an environment variable to pick the handler you want to deploy.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Às vezes, porém, você pode ter alguns lambdas relacionados que compartilham código e a criação de vários módulos maven é apenas uma sobrecarga que não se deseja fazer. A extensão `quarkus-amazon-lambda` permite agrupar vários lambdas em um projeto e usar a configuração ou uma variável de ambiente para escolher o manipulador que deseja implantar.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Sometimes, you're not in control of the classes that you want to use in your template, and you cannot add methods
to them. Template extension methods allows you to declare new method for those classes that will be available
from your templates just as if they belonged to the target class.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Por vezes, você não tem controle sobre as classes que deseja usar em seu modelo e não pode adicionar métodos às mesmas. Os métodos de extensão de modelos permitem-lhe declarar novos métodos para essas classes que estarão disponíveis a partir dos seus modelos, tal como se pertencessem à classe de destino.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Specify the commit strategy to apply when a message produced from a record is acknowledged. Values can be `ack`, `cumulative`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Especifique a estratégia de confirmação a ser aplicada quando uma mensagem produzida a partir de um registro for reconhecida. Os valores podem ser 'ack', 'cumulativos'.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Specify the failure strategy to apply when a message produced from a record is acknowledged negatively (nack). Values can be `nack` (default), `fail`, `ignore` or `reconsume-later</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Especifique a estratégia de falha a ser aplicada quando uma mensagem produzida a partir de um registro for reconhecida negativamente (nack). Os valores podem ser 'nack' (padrão), 'fail', 'ignore' ou 'reconsume-later</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Spring Boot `@ConfigurationProperties` has a few limitations. For instance, `Map` injection is not
supported. Consider using xref:config-mappings.adoc[Mapping configuration to objects].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A anotação `@ConfigurationProperties` do Spring Boot tem algumas limitações. Por exemplo, não há suporte para a injeção de `Map` . Considere a possibilidade de usar a xref:config-mappings.adoc[configuração de mapeamento para objetos] .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Spring Data REST simplifies the creation of CRUD applications based on our Spring Data compatibility layer.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Spring Data REST simplifica a criação de aplicativos CRUD com base em nossa camada de compatibilidade Spring Data.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Standards</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Padrões</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Start AMQP automatically in dev and test modes.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Iniciar o AMQP automaticamente nos modos de desenvolvimento e teste.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Start Apache Kafka automatically in dev and test modes.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Iniciar o Apache Kafka automaticamente nos modos de desenvolvimento e teste.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Start Apicurio Registry automatically in dev and test modes.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Iniciar o Apicurio Registry automaticamente nos modos de desenvolvimento e teste.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Start Elasticsearch automatically in dev and test modes.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Inicie o Elasticsearch automaticamente nos modos de desenvolvimento e teste.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Start Keycloak or other providers automatically in dev and test modes.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Inicie o Keycloak ou outros provedores automaticamente nos modos de desenvolvimento e teste.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Start Kogito automatically in dev and test modes.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Inicie o Kogito automaticamente nos modos de desenvolvimento e teste.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Start RabbitMQ automatically in dev and test modes.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Iniciar o RabbitMQ automaticamente nos modos de desenvolvimento e teste.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Start Redis automatically in dev and test modes.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Iniciar o Redis automaticamente nos modos de desenvolvimento e teste.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Start with Serverless</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Comece com Serverless</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Starting a Service</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Iniciando um Serviço</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Starting and stopping transactions: defining your boundaries</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Iniciando e interrompendo transações: definindo seus limites</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Starting/Stopping a Non-CDI Service</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Iniciando/Parando um Serviço Não CDI</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Startup and Shutdown Events</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Eventos de Inicialização e Encerramento</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Static Init</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Inicialização Estática</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Static Init Config</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Configuração de Inicialização Estática</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Stork Reference</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Referência do Stork</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Streamlined code for the 80% common usages, flexible for the 20%</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Código simplificado para 80% das utilizações comuns, flexível para 20%</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>String</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Stubs and Injection</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Stubs e Injeção</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Subscription name</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Nome da assinatura</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Subscription type. +
Four subscription types are available: +
* Exclusive +
* Failover +
* Shared +
* Key_Shared</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Tipo de assinatura. +
Quatro tipos de assinatura estão disponíveis: +
* Exclusive +
* Failover +
* Shared +
* Key_Shared</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Substitution of XmlConfig/XmlData Classes Example</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de Substituição das Classes XmlConfig/XmlData</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Such a multi-stage build can be achieved as follows:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Esta construção em vários estágios pode ser realizada da seguinte forma:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Supersonic Subatomic Java</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Java Subatômico Supersônico</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Supporting native compilation in C</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Suporte à compilação nativa em C</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Switch the working directory to `/work`, which we have mounted in &lt;1&gt;.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Mude o diretório de trabalho para `/work`, que foi montado em &lt;1&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Synchronous code on virtual thread</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Código síncrono em thread virtual</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Synchronous code on worker thread</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Código síncrono na worker thread</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Synthetic Injection Point - Build Step Example</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Ponto de Injeção Sintético - Exemplo de Etapa de Construção</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Synthetic Injection Point - Recorder Example</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Ponto de Injeção Sintético - Exemplo de Gravador</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Synthetic Injection Points</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Pontos de Injeção Sintéticos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Synthetic beans</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Beans sintéticos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Synthetic beans initialized during `RUNTIME_INIT` must not be accessed during `STATIC_INIT`. `RUNTIME_INIT` build steps that access a runtime-init synthetic bean should consume the `SyntheticBeansRuntimeInitBuildItem`:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os beans sintéticos inicializados durante `RUNTIME_INIT` não devem ser acessados durante `STATIC_INIT`. As etapas de construção de `RUNTIME_INIT` que acessam um bean sintético inicializado em tempo de execução devem consumir o `SyntheticBeansRuntimeInitBuildItem`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>System vs. Container</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Sistema vs. Container</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>TLS KeyStore type configuration.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Configuração do tipo TLS KeyStore.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>TLS TrustStore type configuration. You need to set this configuration when client authentication is required.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Configuração do tipo TLS TrustStore. Você precisa definir essa configuração quando a autenticação do cliente é necessária.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>TLS with Mutual Auth</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>TLS com autenticação mútua</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Tag the image using your ECR registry information</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Marque a imagem utilizando as suas informações de registro ECR</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Technical aspect</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Aspecto técnico</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Template Extension Methods</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Métodos de extensão de modelos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Template Parameter Declarations</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Declarações de parâmetros de modelo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Template objects for xref:bytecode-recording[bytecode recording]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Objetos de modelo para xref:bytecode-recording[gravação de bytecode]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Template parameter declaration inside the template itself</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Declaração do parâmetro do modelo dentro do próprio modelo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Templating engine could be also very useful when rendering periodic reports.
You'll need to add the `quarkus-scheduler` and `quarkus-qute` extensions first.
In your `pom.xml` file, add:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O mecanismo de criação de modelos também pode ser muito útil na apresentação de relatórios periódicos. Primeiro, é necessário adicionar as extensões `quarkus-scheduler` e `quarkus-qute`. No seu arquivo `pom.xml`, adicione:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Templating with Qute</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Modelagem com Qute</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Terminology</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Terminologia</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Test the security of your Quarkus applications.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Teste a segurança das suas aplicações Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>TestProcessor#capability()</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>TestProcessor#capability()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>TestProcessor#doSomeCoolStuff()</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>TestProcessor#doSomeCoolStuff()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>TestProcessor#feature()</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>TestProcessor#feature()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Testing</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Testando</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Testing Extensions</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Testando Extensões</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Testing Your Application</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Testando a sua aplicação</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Testing a reactive application is similar to testing a non-reactive one: use the HTTP endpoint and verify the HTTP responses.
The fact that the application is reactive does not change anything.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O teste de uma aplicação reativa é semelhante ao teste de uma aplicação não reativa: use o endpoint HTTP e verifique as respostas HTTP. O fato de a aplicação ser reativa não muda nada.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Testing an existing native executable</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Testar um executável nativo existente</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Testing and Running</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Testando e Executando</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Testing hot reload</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Testando recarga em tempo real</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Testing of Quarkus extensions should be done with the `io.quarkus.test.QuarkusUnitTest` JUnit 5 extension.
This extension allows for Arquillian-style tests that test specific functionalities.
It is not intended for testing user applications, as this should be done via `io.quarkus.test.junit.QuarkusTest`.
The main difference is that `QuarkusTest` simply boots the application once at the start of the run, while `QuarkusUnitTest` deploys a custom
Quarkus application for each test class.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O teste das extensões do Quarkus deve ser feito com a extensão `io.quarkus.test.QuarkusUnitTest` JUnit 5. Essa extensão permite a realização de testes no estilo Arquillian que testam funcionalidades específicas. Ela não se destina a testar aplicações de usuário, pois isso deve ser feito por meio de `io.quarkus.test.junit.QuarkusTest`. A principal diferença é que `QuarkusTest` simplesmente inicializa o aplicativo uma vez no início da execução, enquanto `QuarkusUnitTest` implanta uma aplicação Quarkus personalizada para cada classe de teste.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Testing the native executable</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Testando o executável nativo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Testing with the SAM CLI</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Testes com a SAM CLI</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Thanks to the &lt;a href="https://quarkus.io/version/main/guides/mutiny-primer"&gt;Mutiny Reactive API&lt;/a&gt; , you can compose asynchronous operations and complete the result when everything is done without blocking the I/O threads.  This greatly improves resource consumption and elasticity.  Most Quarkus APIs are available in both imperative and reactive.  As example, you can use the reactive version of the REST Client:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Graças à &lt;a href="https://quarkus.io/version/main/guides/mutiny-primer"&gt;Mutiny Reactive API&lt;/a&gt; , você pode compor operações assíncronas e concluir o resultado quando tudo for feito sem bloquear os threads de E/S.  Isso melhora muito o consumo de recursos e a elasticidade.  A maioria das APIs do Quarkus está disponível em imperativa e reativa.  Como exemplo, você pode usar a versão reativa do cliente REST:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Thanks to their stellar startup time and low memory usage, you can implement functions using Quarkus to be used in serverless environments.  Quarkus provides Funqy, an approach to writing functions that are deployable to various FaaS environments like AWS Lambda, Azure Functions, Knative, and Knative Events (Cloud Events). It is also usable as a standalone service.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Graças ao seu excelente tempo de inicialização e baixo uso de memória, você pode implementar funções usando o Quarkus para serem usadas em ambientes sem servidor.  O Quarkus fornece o Funqy, uma abordagem para escrever funções que podem ser implantadas em vários ambientes FaaS, como AWS Lambda, Azure Functions, Knative, e Knative Events (Cloud Events). Também é utilizável como um serviço independente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>That step is particularly not user-friendly. We plan to improve it.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Esta etapa é particularmente não é tão fácil de usar. Iremos melhorar este processo em um futuro próximo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>That's all there is to it!</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>É tudo o que há para fazer!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>That's all. Once the pull request is merged, a scheduled job will check Maven Central for new versions and update the xref:extension-registry-user.adoc[Quarkus Extension Registry].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Isso é tudo. Assim que o pull request for integrado, um job agendado irá verificar o Maven Central para novas versões e atualizar o xref:extension-registry-user.adoc[Registro de Extensões Quarkus].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The "alwaysRedirect" redirect handler will only be used by the specified REST Client which in this example is the "ExtensionsService" client.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O manipulador de redirecionamento "alwaysRedirect" só será utilizado pelo Cliente REST especificado que, neste exemplo, é o cliente "ExtensionsService".</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The "real" components can inject the `TestContext` directly.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os componentes "reais" podem injetar diretamente o `TestContext`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The &lt;a href="https://groups.google.com/d/forum/quarkus-dev" target="_blank"&gt;quarkus-dev Google Groups&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O &lt;a href="https://groups.google.com/d/forum/quarkus-dev" target="_blank"&gt;quarkus-dev Google Groups&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The &lt;a href="https://quarkus.io"&gt;English version of quarkus.io&lt;/a&gt; is the official project site. Translated sites are community supported on a best-effort basis.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A &lt;a href="https://quarkus.io"&gt;versão em inglês do quarkus.io&lt;/a&gt; é o site oficial do projeto. Os sites traduzidos são suportados pela comunidade com base no melhor esforço.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The &lt;code&gt;@Incoming&lt;/code&gt; and &lt;code&gt;@Outgoing&lt;/code&gt; annotations are part of &lt;a href="https://www.smallrye.io/smallrye-reactive-messaging"&gt;Reactive Messaging&lt;/a&gt;.  They are used to express from which &lt;em&gt;channel&lt;/em&gt; you are consuming and to which &lt;em&gt;channel&lt;/em&gt; you are sending.  Thanks to Reactive Messaging you can consume and send messages from and to different brokers and transports such as HTTP, Kafka, or &lt;a href="http://camel.apache.org"&gt;Apache Camel&lt;/a&gt;.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>As anotações&lt;code&gt;@Incoming&lt;/code&gt; e &lt;code&gt;@Outgoing&lt;/code&gt; fazem parte do &lt;a href="https://www.smallrye.io/smallrye-reactive-messaging"&gt;Reactive Messaging&lt;/a&gt;.  Eles são usados para expressar de qual &lt;em&gt;channel&lt;/em&gt; você está consumindo e para qual &lt;em&gt;channel&lt;/em&gt; você está enviando.  Graças ao Reactive Messaging, você pode consumir e enviar mensagens de e para diferentes brokers e transportes, como HTTP, Kafka ou &lt;a href="http://camel.apache.org"&gt;Apache Camel&lt;/a&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The CDI layer processes CDI beans that are either explicitly registered or that it discovers based on bean defining annotations as defined in https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html#bean_defining_annotations[2.5.1. Bean defining annotations]. You can expand this set of annotations to include annotations your extension processes using a `BeanDefiningAnnotationBuildItem` as shown in this `TestProcessor#registerBeanDefinningAnnotations` example:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A camada CDI processa beans CDI que são explicitamente registrados ou que descobre com base em anotações de definição de beans, tal como definido em https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html#bean_defining_annotations[2.5.1. Bean defining annotations]. Você pode expandir este conjunto de anotações para incluir anotações que a sua extensão processa utilizando um `BeanDefiningAnnotationBuildItem`, tal como mostrado neste exemplo `TestProcessor#registrerBeanDefinningAnnotations`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The CDI name of the handler class must match the value specified within the `quarkus.lambda.handler` property.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O nome CDI da classe do manipulador deve corresponder ao valor especificado na propriedade `quarkus.lambda.handler`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The CDI portable extension model is very flexible.
Too flexible to benefit from the build time boot promoted by Quarkus.
Most extension we have seen do not make use of these extreme flexibility capabilities.
The way to port a CDI extension to Quarkus is to rewrite it as a Quarkus extension which will define the various beans at build time (deployment time in extension parlance).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O modelo de extensão portátil do CDI é muito flexível. Flexível demais para se beneficiar da inicialização do tempo de construção promovida pelo Quarkus. A maioria das extensões que vimos não faz uso desses recursos de extrema flexibilidade. A maneira de portar uma extensão CDI para o Quarkus é reescrevê-la como uma extensão Quarkus que definirá os vários beans no momento da construção (tempo de implantação no jargão da extensão).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The Cloud Event mode (`structured` or `binary` (default)). Indicates how are written the cloud events in the outgoing record

Type: _string_</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O modo Cloud Event ('estruturado' ou 'binário' (padrão)). Indica como são gravados os eventos de nuvem no registro de saída

Tipo: _string_</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The Code</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Código</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The Continuation Dance</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Processo de Continuação</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The Graal SDK supports substitutions of classes in the native image.
An example of how one could replace the `XmlConfig/XmlData` classes with versions that have no JAXB annotation dependencies is shown in these example classes:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Graal SDK oferece suporte a substituições de classes na imagem nativa. Um exemplo de como é possível substituir as classes `XmlConfig/XmlData` por versões que não têm dependências de anotação JAXB é mostrado nestas classes de exemplo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The HTML page</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A página HTML</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The JSON-B extension will then use the produced build item to register your serializer/deserializer automatically.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A extensão JSON-B utilizará então o item de construção produzido para registrar automaticamente o seu serializador/desserializador.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The Jackson extension will then use the produced build item to register a module within Jackson automatically.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A extensão Jackson utilizará então o item de construção produzido para registrar automaticamente um módulo no Jackson.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The Jakarta REST resources</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os recursos Jakarta REST</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The MicroProfile REST Client specification introduces the `org.eclipse.microprofile.rest.client.ext.ResponseExceptionMapper` whose purpose is to convert an HTTP response to an exception.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A especificação do Cliente REST MicroProfile introduz o `org.eclipse.microprofile.rest.client.ext.ResponseExceptionMapper`, cujo objetivo é converter uma resposta HTTP numa exceção.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The Pulsar client dns lookup bind address, default behavior is bind on 0.0.0.0</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O endereço de ligação de pesquisa dns do cliente Pulsar, o comportamento padrão é vincular em 0.0.0.0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The Pulsar client dns lookup bind port, takes effect when dnsLookupBindAddress is configured, default value is 0.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A porta de ligação de pesquisa dns do cliente Pulsar, entra em vigor quando dnsLookupBindAddress é configurado, o valor padrão é 0.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The Pulsar schema type of this channel. When configured a schema is built with the given SchemaType and used for the channel. When absent, the schema is resolved searching for a CDI bean typed `Schema` qualified with `@Identifier` and the channel name. As a fallback AUTO_CONSUME or AUTO_PRODUCE are used.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O tipo de esquema Pulsar deste canal. Quando configurado, um esquema é criado com o SchemaType fornecido e usado para o canal. Quando ausente, o esquema é resolvido procurando um bean CDI digitado 'Esquema' qualificado com '@Identifier' e o nome do canal. Como fallback AUTO_CONSUME ou AUTO_PRODUCE são usados.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The Quarkus CLI can be used to list Quarkus extensions.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>The Quarkus CLI can be used to list Quarkus extensions.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The Quarkus CLI embeds a plugin system that can be used to dynamically add commands and subcommands to the CLI.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>The Quarkus CLI embeds a plugin system that can be used to dynamically add commands and subcommands to the CLI.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The Quarkus Kubernetes will bind the HTTP server using the port name `http` and the gRPC server using the port name `grpc`. By default, the Quarkus application will only expose the port name `http`, so only the HTTP server will be publicly accessible. To expose the gRPC server instead, set the `quarkus.kubernetes.ingress.target-port=grpc` property in your application.properties:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Quarkus Kubernetes vai vincular o servidor HTTP usando o nome da porta `http` e o servidor gRPC usando o nome da porta `grpc`. Por padrão, a aplicação Quarkus só expõe o nome da porta `http`, então, apenas o servidor HTTP estará publicamente acessível. Para expor o servidor gRPC, defina a propriedade `quarkus.kubernetes.ingress.target-port=grpc` no seu arquivo application.properties:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The Quarkus Maven Plugin builds the Quarkus applications, and provides helpers to launch dev mode or build native executables.
For more information about how to use the Quarkus Maven Plugin, please refer to the xref:maven-tooling.adoc[Maven Tooling guide].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Plugin Maven do Quarkus constrói as aplicações Quarkus e fornece helpers para iniciar o modo dev ou construir executáveis nativos. Para mais informações sobre como usar o Plugin Maven do Quarkus, consulte o xref:maven-tooling.adoc[guia de Ferramentas Maven] .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The Quarkus container supports startup and shutdown lifecycle events to notify components of the container startup
and shutdown. There are CDI events fired that components can observe are illustrated in this example:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O contêiner Quarkus suporta eventos de ciclo de vida de inicialização e encerramento para notificar os componentes sobre a inicialização e o encerramento do contêiner. Há eventos CDI disparados que os componentes podem observar, conforme ilustrado neste exemplo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The Quarkus extension framework results in significantly improved resource utilization even when GraalVM is not used (e.g. in HotSpot).
Let’s list the actions an extension performs:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O framework de extensão do Quarkus resulta em uma utilização de recursos significativamente melhor, mesmo quando o GraalVM não é usado (por exemplo, no HotSpot). Vamos listar as ações que uma extensão executa:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The Quarkus gRPC extension integrate gRPC in Quarkus application.
It:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A extensão gRPC do Quarkus integra o gRPC em uma aplicação Quarkus. Ela:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The Quote object</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O objeto Quote</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The REST Client Reactive internally uses https://vertx.io/docs/apidocs/io/vertx/core/http/HttpClient.html[the Vert.x HTTP Client] to make the network connections. The REST Client Reactive extensions allows configuring some settings via properties, for example:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Cliente REST Reativo utiliza internamente https://vertx.io/docs/apidocs/io/vertx/core/http/HttpClient.html[o Cliente HTTP Vert.x] para efetuar as conexões de rede. As extensões do Cliente REST Reativo permitem configurar algumas definições através de propriedades, por exemplo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The REST Client Reactive supports adding a custom ObjectMapper to be used only the Client using the annotation `@ClientObjectMapper`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Cliente REST Reativo suporta a adição de um ObjectMapper personalizado para ser utilizado apenas pelo Cliente utilizando a anotação `@ClientObjectMapper`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The REST Client Reactive supports further customization of the final request to be sent to the server via filters. The filters must implement either the interface `ClientRequestFilter` or `ResteasyReactiveClientRequestFilter`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Cliente REST Reativo suporta uma maior personalização da requisição final que será enviada para o servidor através de filtros. Os filtros devem implementar a interface `ClientRequestFilter` ou `ResteasyReactiveClientRequestFilter`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The Reactive Messaging RabbitMQ connector</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O conector RabbitMQ de mensagens reactivas</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The TLS provider used by an internal client to authenticate with other Pulsar brokers.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O provedor TLS usado por um cliente interno para autenticar com outros brokers Pulsar.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The UPX compression requires:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A compressão UPX requer:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The URL can now be updated during the deployment or at launch time using system properties or environment variables.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A URL agora pode ser atualizada durante a implantação ou no momento da inicialização usando propriedades do sistema ou variáveis de ambiente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The `-Dquarkus.native.container-build=true` instructs Quarkus to build Linux 64bits native executables, who can run inside containers.
Then, run the system using:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O site `-Dquarkus.native.container-build=true` instrui o Quarkus a criar executáveis nativos do Linux de 64 bits, que podem ser executados dentro de contêineres. Em seguida, execute o sistema usando:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The `@BuildStep` annotation can also register marker files that determine which archives on the class path are considered
to be 'Application Archives', and will therefore get indexed. This is done via the `applicationArchiveMarkers`. For
example the ArC extension registers `META-INF/beans.xml`, which means that all archives on the class path with a `beans.xml`
file will be indexed.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A anotação `@BuildStep` também pode registrar arquivos de marcadores que determinam quais arquivos no caminho da classe são considerados "Arquivos de Aplicações" e, portanto, serão indexados. Isso é feito por meio do `applicationArchiveMarkers` . Por exemplo, a extensão ArC registra `META-INF/beans.xml` , o que significa que todos os arquivos no caminho da classe com um arquivo `beans.xml` serão indexados.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The `@ConfigMapping` annotation indicates that the interface is a configuration mapping, in this case one which
corresponds to a `quarkus.log` segment.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A anotação `@ConfigMapping` indica que a interface é um mapeamento de configuração, nesse caso, um que corresponde a um segmento `quarkus.log` .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The `@ConfigRoot` annotation indicated to which Config phase, the configuration applies to.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A anotação `@ConfigRoot` indica qual fase de configuração a configuração se aplica.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The `@RegisterClientHeaders` annotation can also be used without any custom factory specified. In that case the `DefaultClientHeadersFactoryImpl` factory will be used.
If you make a REST client call from a REST resource, this factory will propagate all the headers listed in `org.eclipse.microprofile.rest.client.propagateHeaders` configuration property from the resource request to the client request. Individual header names are comma-separated.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A anotação `@RegisterClientHeaders` também pode ser usada sem nenhuma fábrica personalizada especificada. Nesse caso, será usada a fábrica `DefaultClientHeadersFactoryImpl` . Se você fizer uma chamada de cliente REST a partir de um recurso REST, essa fábrica propagará todos os cabeçalhos listados na propriedade de configuração `org.eclipse.microprofile.rest.client.propagateHeaders` da requisição do recurso para a requisição do cliente. Os nomes dos cabeçalhos individuais são separados por vírgulas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The `@RegisterForReflection` annotation instructs Quarkus to include the class (including fields and methods) when building the native executable.
This will be useful later when we run the applications as native executables inside containers.
Without, the native compilation would remove the fields and methods during the dead-code elimination phase.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A anotação `@RegisterForReflection` instrui o Quarkus a incluir a classe (incluindo campos e métodos) ao criar o executável nativo. Isso será útil mais tarde, quando executarmos os aplicativos como executáveis nativos dentro de contêineres. Sem isso, a compilação nativa removeria os campos e métodos durante a fase de eliminação de código morto.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The `@TransactionConfiguration` annotation allows to set a timeout property, in seconds, that applies to transactions created within the annotated method.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A anotação '@TransactionConfiguration' permite definir uma propriedade de tempo limite, em segundos, que se aplica a transações criadas dentro do método anotado.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The `Amazon Alexa` extension adds dependent libraries from the Alexa SDK that are used in Jackson JSON transformations, in order for the reflective classes to identified and included at `BUILD_TIME`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A extensão `Amazon Alexa` adiciona bibliotecas dependentes do Alexa SDK que são utilizadas nas transformações Jackson JSON, para que as classes reflexivas sejam identificadas e incluídas em `BUILD_TIME`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The `ExtensionsResource` becomes:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O `ExtensionsResource` torna-se:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The `MetricsFactory` provides a fluid builder for registration of metrics, with the final step constructing gauges or counters based on a `Supplier` or `ToDoubleFunction`. Timers can either wrap `Callable`, `Runnable`, or `Supplier` implementations, or can use a `TimeRecorder` to accumulate chunks of time. The underlying metrics extension will create appropriate artifacts to observe or measure the defined functions.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O `MetricsFactory` fornece um construtor fluido para o registro de métricas, com o passo final para construir medidores ou contadores com base num `Supplier` ou `ToDoubleFunction`. Os temporizadores podem envolver implementações `Callable`, `Runnable` ou `Supplier`, ou podem utilizar um `TimeRecorder` para acumular pedaços de tempo. A extensão de métrica subjacente criará artefatos apropriados para observar ou medir as funções definidas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The `QuarkusRestClientBuilder` interface is a Quarkus-specific API to programmatically create clients with additional configuration options. Otherwise, you can also use the `RestClientBuilder` interface from the Microprofile API:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A interface `QuarkusRestClientBuilder` é uma API específica do Quarkus para criar programaticamente clientes com opções de configuração adicionais. Caso contrário, você também pode utilizar a interface `RestClientBuilder` da API Microprofile:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The `QuarkusUnitTest` extension must be used with a static field. If used with a non-static field, the test application is not started.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A extensão `QuarkusUnitTest` deve ser usada com um campo estático. Se for utilizada com um campo não estático, a aplicação de teste não é iniciada.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The `Quote` class will be used in both `producer` and `processor` projects.
For the sake of simplicity we will duplicate the class.
In both projects, create the `src/main/java/org/acme/rabbitmq/model/Quote.java` file, with the following content:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A classe `Quote` será usada nos projetos `producer` e `processor` . Para simplificar, vamos duplicar a classe. Em ambos os projetos, crie o arquivo `src/main/java/org/acme/rabbitmq/model/Quote.java` , com o seguinte conteúdo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The `ResourceAnnotationBuildItem` can be used to specify resource annotations that make it possible to resolve non-CDI injection points, such as Jakarta EE resources.
An integrator must also provide a corresponding `io.quarkus.arc.ResourceReferenceProvider` service provider implementation.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O `ResourceAnnotationBuildItem` pode ser usado para especificar anotações de recursos que possibilitam a resolução de pontos de injeção não CDI, como os recursos do Jakarta EE. Um integrador também deve fornecer uma implementação correspondente do provedor de serviços `io.quarkus.arc.ResourceReferenceProvider`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The `SyntheticBeanBuildItem` can be used to register a synthetic bean:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O `SyntheticBeanBuildItem` pode ser utilizado para registrar um bean sintético:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The `TemplateInstance.render()` method triggers rendering. Note that this method blocks the current thread.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O método `TemplateInstance.render()` aciona a renderização. Note-se que este método bloqueia a thread atual.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The `Uni` version is very similar:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A versão `Uni` é muito semelhante:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The `Value` attribute is the root URL for your lambda. Copy it to your browser and add `hello` at the end.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O atributo `Value` é o URL raiz do seu lambda. Copie-o para o seu navegador e adicione `hello` no final.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The `cache:$cache-name:` segment can be configured using the `prefix` property:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O `cache:$cache-name:` segmento pode ser configurado utilizando a propriedade `prefix`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The `channel-name` segment must match the value set in the `@Incoming` and `@Outgoing` annotation:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O segmento `channel-name` deve corresponder ao valor definido na anotação `@Incoming` e `@Outgoing`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The `client-name` is the name set in the `@GrpcClient` or derived from the injection point if not explicitly defined.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O `client-name` é o nome definido no `@GrpcClient` ou derivado do ponto de injeção, se não for explicitamente definido.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The `create` method allows adding a new fruit to the database:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O método `create` permite acrescentar uma nova fruta na base de dados:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The `event` object represents the transaction ID, and defines `toString()`/`equals()`/`hashCode()` accordingly.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O objeto `event` representa o ID da transação e define `toString()`/ `equals()`/ `hashCode()` em conformidade.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The `getById` method above is a blocking call. It should not be invoked on the event loop.
The xref:async-support[Async Support] section describes how to make non-blocking calls.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O método `getById` acima é uma chamada blocante. Ele não deve ser invocado no loop de eventos. A seção xref:async-support[Suporte Assíncrono] descreve como fazer chamadas não blocantes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The `getById` method gives our code the ability to get an extension by id from the Code Quarkus API. The client will handle all the networking and marshalling leaving our code clean of such technical details.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O método `getById` dá ao nosso código a capacidade de obter uma extensão por id a partir da API do Code Quarkus. O cliente tratará de toda a ligação em rede e da organização, deixando o nosso código livre desses pormenores técnicos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The `image push` command is similar to `image build`, and surfaces some basic options required to push images to a target container registry.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>The `image push` command is similar to `image build`, and surfaces some basic options required to push images to a target container registry.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The `invoke` and `call` methods are handy when you need to observe a stream without changing the transiting events.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>The `invoke` and `call` methods are handy when you need to observe a stream without changing the transiting events.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The `jakarta.ws.rs.ext.Providers` is useful when we need to lookup the provider instances of the current client.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O `jakarta.ws.rs.ext.Providers` é útil quando precisamos procurar as instâncias do fornecedor do cliente atual.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The `name` parameter of the mojo is optional.
If you do not specify it on the command line, the plugin will derive it from `extensionId` by replacing dashes with spaces and uppercasing each token.
So you may consider omitting explicit `name` in some cases.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O parâmetro `name` do mojo é opcional. Se você não o especificar na linha de comando, o plug-in o derivará de `extensionId` substituindo os traços por espaços e colocando cada token em caixa alta. Portanto, você pode considerar omitir explicitamente `name` em alguns casos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The `process` method is called for every RabbitMQ message from the `quote-requests` queue, and will send a `Quote` object to the `quotes` exchange.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O método `process` é chamado para cada mensagem RabbitMQ da fila `quote-requests`, e enviará um objeto `Quote` para a fila `quotes`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The `quarkus-amazon-lambda` extension allows you to use Quarkus to build your AWS Lambdas.
Your lambdas can use injection annotations from CDI or Spring and other Quarkus facilities as you need them.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A extensão `quarkus-amazon-lambda` permite que você use o Quarkus para criar seus Lambdas da AWS. Seus lambdas podem usar anotações de injeção do CDI ou do Spring e outros recursos do Quarkus, conforme a necessidade.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The `quarkus-amazon-lambda` extension scans your project for a class that directly implements the Amazon `RequestHandler&lt;?, ?&gt;` or `RequestStreamHandler` interface.
It must find a class in your project that implements this interface, or it will throw a build time failure.
If it finds more than one handler class, a build time exception will also be thrown.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A extensão `quarkus-amazon-lambda` verifica seu projeto em busca de uma classe que implemente diretamente a interface Amazon `RequestHandler&lt;?, ?&gt;` ou `RequestStreamHandler`. Ela deve encontrar uma classe em seu projeto que implemente essa interface, caso contrário, lançará uma falha no tempo de compilação. Se encontrar mais de uma classe de manipulador, uma exceção de tempo de compilação também será lançada.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The `quarkus-micrometer` extension and the `quarkus-smallrye-metrics` extension provide support for collecting metrics.
As a compatibility note, the `quarkus-micrometer` extension adapts the MP Metrics API to Micrometer library primitives, so the `quarkus-micrometer` extension can be enabled without breaking code that relies on the MP Metrics API.
Note that the metrics emitted by Micrometer are different, see the `quarkus-micrometer` extension documentation for more information.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A extensão `quarkus-micrometer` e a extensão `quarkus-smallrye-metrics` oferecem suporte à coleta de métricas. Como uma nota de compatibilidade, a extensão `quarkus-micrometer` adapta a API MP Metrics aos primitivos da biblioteca Micrometer, de modo que a extensão `quarkus-micrometer` pode ser ativada sem quebrar o código que depende da API MP Metrics. Observe que as métricas emitidas pelo Micrometer são diferentes; consulte a documentação da extensão `quarkus-micrometer` para obter mais informações.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The `quarkus.grpc.clients.hello.host` property must be set.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A propriedade `quarkus.grpc.clients.hello.host` deve ser configurada.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The `quarkus.lambda.handler` property tells Quarkus which lambda handler to deploy. This can be overridden
with an environment variable too.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A propriedade `quarkus.lambda.handler` informa ao Quarkus qual manipulador de lambda deve ser implantado. Isso também pode ser substituído por uma variável de ambiente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The `target/manage.sh` script is for managing your lambda using the AWS Lambda Java runtime.  This script is provided only for
your convenience. Examine the output of the `manage.sh` script if you want to learn what aws commands are executed
to create, delete, and update your lambdas.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O script `target/manage.sh` serve para gerenciar seu lambda usando o tempo de execução Java do AWS Lambda. Esse script é fornecido apenas para sua conveniência. Examine a saída do script `manage.sh` se quiser saber quais comandos do AWS são executados para criar, excluir e atualizar seus lambdas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The above `maven-compiler-plugin` configuration requires version 3.5+.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A configuração `maven-compiler-plugin` acima requer a versão 3.5+.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The above command should return  `["first"]` indicating that we have only one increment thus far.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O comando acima deve retornar `["first"]` indicando que temos apenas um incremento até o momento.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The above example shows a few different ways the API can be used.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O exemplo acima mostra algumas maneiras diferentes de usar a API.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The above example simulates sending a Cognito principal with an HTTP request to your HTTP Lambda.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O exemplo acima simula o envio de uma entidade Cognito com um pedido HTTP para o seu HTTP Lambda.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The above sequence of commands does the following:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A sequência de comandos acima faz o seguinte:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The aforementioned parameter needs to be annotated with `@NotBody` because it is only used to aid the construction of HTTP headers.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O parâmetro acima mencionado precisa de ser anotado com `@NotBody` porque só é utilizado para ajudar na construção de cabeçalhos HTTP.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The amount of milliseconds waiting for a graceful shutdown of the Kafka producer

Type: _int_</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A quantidade de milissegundos à espera de um desligamento gracioso do produtor de Kafka

Tipo: _int_</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The application is packaged using:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A aplicação é empacotada utilizando:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The associated recorder should use the provided `MetricsFactory` to register metrics. For Agroal, this means using the `MetricFactory` API to observe `io.agroal.api.AgroalDataSourceMetrics` methods. For example:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O gravador associado deve usar o `MetricsFactory` fornecido para registrar métricas. Para o Agroal, isto significa usar a API `MetricFactory` para observar os métodos `io.agroal.api.AgroalDataSourceMetrics`. Por exemplo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The backend uses the _&lt;default&gt;_ Redis client (if not configured otherwise), so make sure it's configured (or use the xref:redis-dev-services.adoc[redis dev service])</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O backend utiliza o cliente Redis por padrão (se não estiver configurado de outra forma), por isso certifique-se de que está configurado (ou utilize o xref:redis-dev-services.adoc[redis dev service])</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The bean instance is created with a function returned from a recorder method.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A instância do bean é criada com uma função retornada de um método de gravação.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The bean instance is initialized during `RUNTIME_INIT`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A instância do bean é inicializada durante `RUNTIME_INIT`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The bean instance is supplied by a value returned from a recorder method.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A instância do bean é fornecida por um valor retornado por um método de gravação.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The build step will be run with a TCCL that can load user classes from the deployment in a transformer-safe way.
This class loader only lasts for the life of the augmentation, and is discarded afterwards.
The classes will be loaded again in a different class loader at runtime.
This means that loading a class during augmentation does not stop it from being transformed when running in the development/test mode.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A etapa de construção será executada com um TCCL que pode carregar classes de usuário da implantação de forma segura para o transformador. Esse carregador de classes dura apenas a vida útil da ampliação e é descartado depois. As classes serão carregadas novamente em um carregador de classes diferente no tempo de execução. Isso significa que carregar uma classe durante a ampliação não impede que ela seja transformada ao ser executada no modo de desenvolvimento/teste.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The central idea behind Quarkus is to do at build-time what traditional frameworks do at runtime: configuration parsing, classpath scanning, feature toggle based on classloading, and so on.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A ideia central por trás do Quarkus é fazer em tempo de compilação o que as estruturas tradicionais fazem em tempo de execução: análise de configuração, varredura de classpath, alternância de recursos com base no carregamento de classes e assim por diante.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The class as written above, would not be automatically be used by any REST Client. To make it available to every REST Client of the application, the class needs to be annotated with `@Provider` (as long as `quarkus.rest-client-reactive.provider-autodiscovery` is not set to `false`).
Alternatively, if the exception handling class should only apply to specific REST Client interfaces, you can either annotate the interfaces with `@RegisterProvider(MyResponseExceptionMapper.class)`, or register it using configuration using the `providers` property of the proper `quarkus.rest-client` configuration group.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A classe, conforme escrito acima, não seria usada automaticamente por nenhum Cliente REST. Para torná-la disponível para todos os Clientes REST da aplicação, a classe precisa ser anotada com `@Provider` (desde que `quarkus.rest-client-reactive.provider-autodiscovery` não esteja definido como `false` ). Como alternativa, se a classe de tratamento de exceções se aplicar apenas a interfaces específicas do Cliente REST, você poderá anotar as interfaces com `@RegisterProvider(MyResponseExceptionMapper.class)` ou registrá-la usando a configuração com a propriedade `providers` do grupo de configuração `quarkus.rest-client` adequado.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The classes to preload are listed in two places:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>As classes que serão pré-carregadas estão listadas em dois lugares:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The code above uses link:https://rest-assured.io/[REST Assured]'s link:https://github.com/rest-assured/rest-assured/wiki/GettingStarted#jsonpath[json-path] capabilities.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O código acima utiliza as capacidades link:https://github.com/rest-assured/rest-assured/wiki/GettingStarted#jsonpath[json-path] do link:https://rest-assured.io/[REST Assured].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The code below demonstrates how to use each of these techniques:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O código abaixo demonstra como utilizar cada uma destas técnicas:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The code for the `RuntimeXmlConfigService` can be viewed here:
{quarkus-blob-url}/integration-tests/test-extension/extension/runtime/src/main/java/io/quarkus/extest/runtime/RuntimeXmlConfigService.java[RuntimeXmlConfigService.java]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O código para o `RuntimeXmlConfigService` pode ser visualizado aqui: {quarkus-blob-url}/integration-tests/test-extension/extension/runtime/src/main/java/io/quarkus/extest/runtime/RuntimeXmlConfigService.java[RuntimeXmlConfigService.java]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The code is a bit more involved.
To write to a database, we need a transaction, therefore we use `Panache.withTransaction` to obtain one (asynchronously) and proceed to call the `persist` method.
The `persist` method returns a `Uni` that emits the result of the insertion of the fruit in the database.
Once the insertion completes (which plays the role of the continuation), we create a `201 CREATED` HTTP response.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O código é um pouco mais complexo. Para gravar em um banco de dados, precisamos de uma transação; portanto, usamos `Panache.withTransaction` para obter uma transação (de forma assíncrona) e chamamos o método `persist` . O método `persist` retorna um `Uni` que emite o resultado da inserção da fruta no banco de dados. Após a conclusão da inserção (que desempenha o papel da continuação), criamos uma resposta HTTP `201 CREATED` .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The code of the application developed in the xref:getting-started.adoc[Getting Started Guide].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O código da aplicação desenvolvida no  link:getting-started.html[Guia de Iniciação].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The code uses the following pieces:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O código utiliza os seguintes elementos:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The column `scope` of the plugins table indicates where the plugin is/will be added.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>The column `scope` of the plugins table indicates where the plugin is/will be added.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The combination of Quarkus and Kubernetes provides an ideal environment for creating scalable, fast, and lightweight applications. Quarkus significantly increases developer productivity with tooling, pre-built integrations, application services, and more.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A combinação de Quarkus e Kubernetes fornece um ambiente ideal para criar aplicativos escaláveis, rápidos e leves. O Quarkus aumenta significativamente a produtividade do desenvolvedor com ferramentas, integrações pré-criadas, serviços de aplicativos e muito mais.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The command is also executed implicitly through any of the CLI commands:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>The command is also executed implicitly through any of the CLI commands:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The compatibility layer for MP Metrics APIs will move to a different extension in the future.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A camada de compatibilidade para as APIs de Métricas MP será transferida para uma extensão diferente no futuro.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The compression level goes from 1 to 10:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O nível de compactação vai de 1 a 10:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The condition class can inject xref:configuration[configuration mappings] as long as they belong to
a build-time phase.  Run time configuration is not available for condition classes.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A classe de condição pode injetar xref:configuration[mapeamentos de configuração] , desde que pertençam a uma fase do tempo de construção. A configuração de tempo de execução não está disponível para classes de condição.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The condition class may also inject a value of type `io.quarkus.runtime.LaunchMode`.
Constructor parameter and field injection is supported.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A classe de condição também pode injetar um valor do tipo `io.quarkus.runtime.LaunchMode` . Há suporte para injeção de campo e parâmetro de construtor.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The configuration is an important part of each extension and therefore needs to be properly documented. Each
configuration property should have a proper Javadoc comment.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A configuração é uma parte importante de cada extensão e, portanto, precisa ser documentada adequadamente. Cada propriedade de configuração deve ter um comentário Javadoc adequado.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The consumed / populated Kafka topic. If neither this property nor the `topics` properties are set, the channel name is used

Type: _string_</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O tema Kafka consumido/populado. Se nem essa propriedade nem as propriedades 'topics' estiverem definidas, o nome do canal será usado

Tipo: _string_</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The consumed / populated Pulsar topic. If not set, the channel name is used</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O tópico Pulsar consumido/povoado. Se não estiver definido, o nome do canal será usado</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The container attempts to xref:cdi-reference.adoc#remove_unused_beans[remove all unused beans] during the build by default.
This optimization allows for _framework-level dead code elimination_.
In few special cases, it's not possible to correctly identify an unused bean.
In particular, Quarkus is not able to detect the usage of the `CDI.current()` static method yet.
Extensions can eliminate possible false positives by producing an `UnremovableBeanBuildItem`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Por padrão, o contêiner tenta xref:cdi-reference.adoc#remove_unused_beans[remover todos os beans não utilizados] durante a construção. Essa otimização permite a _eliminação de código morto no nível do framework_ . Em alguns casos especiais, não é possível identificar corretamente um bean não utilizado. Em particular, o Quarkus ainda não é capaz de detectar o uso do método estático `CDI.current()` . As extensões podem eliminar possíveis falsos positivos produzindo um `UnremovableBeanBuildItem` .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The container is bootstrapped in multiple phases.
From a high level perspective these phases go as follows:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O contêiner é inicializado em várias fases. De uma perspectiva de alto nível, essas fases são as seguintes:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The core foundation of every good open source project is open discussion and collaboration. Quarkus is committed to this belief. We've enabled GitHub Discussions so the community can have open communication. This gives a focal point for the community to ask and answer questions regarding the project. This means all of that great knowledge can be shared and is discoverable. Additionally, other conversations about the Quarkus Community can be had there as well. Come collaborate with us.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A base central de todo bom projeto de código aberto é a discussão aberta e a colaboração. O Quarkus está comprometido com essa crença. Ativamos as Discussões do GitHub para que a comunidade possa ter uma comunicação aberta. Isso dá um ponto focal para a comunidade fazer e responder perguntas sobre o projeto. Isso significa que todo esse grande conhecimento pode ser compartilhado e pode ser descoberto. Além disso, outras conversas sobre a Comunidade Quarkus também podem ser feitas lá. Venha colaborar conosco.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The default value is 60 seconds.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O valor padrão é 60 segundos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The deserialize method uses the `KeyProxy` to recreate the `DSAPublicKey` from its encoded form using the key factory.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O método deserialize utiliza o `KeyProxy` para recriar o `DSAPublicKey` a partir da sua forma codificada, utilizando a fábrica de chaves.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The documentation is generated in the global `target/asciidoc/generated/config/` located at the root of the project.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A documentação é gerada na `target/asciidoc/generated/config/` global localizada na raiz do projeto.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The documentation is generated with a title level of 2 (i.e. `==`). It may need an adjustment with `leveloffset=+N`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A documentação é gerada com um nível de título de 2 (ou seja, `==`). Pode ser necessário um ajuste com `leveloffset=+N`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The easiest way to create a new Quarkus project is to open a terminal and run the following command:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A forma mais fácil de criar um novo projeto Quarkus é abrir um terminal e executar o seguinte comando:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The easiest way to define your transaction boundaries is to use the `@Transactional` annotation on your entry method (`jakarta.transaction.Transactional`).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A forma mais fácil de definir os limites da sua transação é utilizar a anotação `@Transactional` no seu método de entrada ( `jakarta.transaction.Transactional`).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The easiest way to specify a query parameter is to annotate a client method parameter with the `@QueryParam` or the `@RestQuery`.
The `@RestQuery` is equivalent of the `@QueryParam`, but with optional name. Additionally, it can be also used to pass query parameters
as a `Map`, which is convenient if parameters are not known in advance.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A maneira mais fácil de especificar um parâmetro de consulta é anotar um parâmetro de método do cliente com `@QueryParam` ou `@RestQuery` . O `@RestQuery` é equivalente ao `@QueryParam` , mas com nome opcional. Além disso, ele também pode ser usado para passar parâmetros de consulta como `Map` , o que é conveniente se os parâmetros não forem conhecidos antecipadamente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The effective catalog is the combination of both the `user` and `project` catalogs with the latter being able to override entries of the former (e.g. use a different version or location for a plugin).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>The effective catalog is the combination of both the `user` and `project` catalogs with the latter being able to override entries of the former (e.g. use a different version or location for a plugin).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The environment executing step `1` only needs Java and Maven (or Gradle) installed, while the environment executing step `3` only needs a GraalVM installation (including the `native-image` feature).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O ambiente que executa o passo `1` apenas necessita do Java e Maven (ou Gradle) instalados, enquanto o ambiente que executa o passo `3` apenas necessita de uma instalação GraalVM (incluindo a funcionalidade `native-image` ).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The example above can be rewritten with an anonymous class:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O exemplo acima pode ser reescrito com uma classe anônima:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The example lambda takes input passed in via the `--payload` switch which points to a json file
in the root directory of the project.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O exemplo de lambda recebe a entrada passada por meio da opção `--payload` que aponta para um arquivo json no diretório raiz do projeto.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The exhaustive list of parameters can be found in https://github.com/upx/upx/blob/devel/doc/upx.pod[the UPX documentation].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A lista exaustiva de parâmetros pode ser consultada na  link:https://github.com/upx/upx/blob/devel/doc/upx.pod[documentação UPX].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The extension defines an instrumentable object as Agroal does with `io.agroal.api.AgroalDataSourceMetrics`, or</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A extensão define um objeto instrumentável como faz o Agroal com `io.agroal.api.AgroalDataSourceMetrics`, ou</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The extension description is important as it is displayed on https://code.quarkus.io/, when listing extensions with the Quarkus CLI, etc.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A descrição da extensão é importante, uma vez que é apresentada em https://code.quarkus.io/, ao listar extensões com o Quarkus CLI, etc.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The extension framework facilitates reading metadata, scanning classes as well as generating classes as needed</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O framework de extensão facilita a leitura de metadados, a pesquisa de classes e a geração de classes conforme necessário</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The extension generates an example script within `target/bootstrap-example.sh`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A extensão gera um script de exemplo em `target/bootstrap-example.sh`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The extension provides its own abstraction of metrics, as Jaeger does with `io.jaegertracing.spi.MetricsFactory`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A extensão fornece a sua própria abstração de métricas, tal como Jaeger faz com `io.jaegertracing.spi.MetricsFactory`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The extra description of the client version. The length cannot exceed 64.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A descrição extra da versão do cliente. O comprimento não pode exceder 64.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The feature name should also map to a label in the extension's `devtools/common/src/main/filtered/extensions.json` entry so that
the feature name displayed by the startup line matches a label that one can use to select the extension when creating a project
using the Quarkus maven plugin as shown in this example taken from the xref:rest-json.adoc[Writing JSON REST Services] guide where the `resteasy-reactive-jackson` feature is referenced:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O nome da funcionalidade também deve ser mapeado para um rótulo na entrada `devtools/common/src/main/filtered/extensions.json` da extensão, de modo que o nome da funcionalidade exibido pela linha de inicialização corresponda a um rótulo que possa ser usado para selecionar a extensão ao criar um projeto usando o plug-in maven do Quarkus, conforme mostrado neste exemplo retirado do guia xref:rest-json.adoc[Escrevendo Serviços REST JSON] , no qual a funcionalidade `resteasy-reactive-jackson` é referenciada:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The field use to manipulate keys</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O campo utilizado para manipular chaves</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The field use to manipulate the counter</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O campo utilizado para manipular o contador</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The files you download are not automatically removed and can take up a lot of disk space. Consider removing the files when you are done working with them.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os arquivos que você baixa não são removidos automaticamente e podem ocupar muito espaço no disco. Considere a remoção dos arquivos quando terminar de trabalhar com eles.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The first application, the `producer`, will let the user request some quotes over an HTTP endpoint.
For each quote request, a random identifier is generated and returned to the user, to put the quote request on _pending_.
At the same time the generated request id is sent to the `quote-requests` exchange.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A primeira aplicação, o `producer` , permitirá que o usuário solicite algumas cotações por meio de um endpoint HTTP. Para cada solicitação de cotação, um identificador aleatório é gerado e retornado ao usuário, para colocar a solicitação de cotação em _espera_ . Ao mesmo tempo, o ID da solicitação gerada é enviado para a fila `quote-requests` .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The first sentence should be meaningful and self-contained as it is included in the summary table.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A primeira frase deve ser significativa e autônoma, uma vez que está incluída no sumário.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The first stage builds the native executable using Maven or Gradle</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O primeiro estágio faz o build do executável nativo utilizando o Maven ou o Gradle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The following command lists the installed plugins:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>The following command lists the installed plugins:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The following example enables transaction support:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O exemplo seguinte ativa o suporte de transação:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The following example shows the various possible usages:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O exemplo a seguir mostra as várias utilizações possíveis:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The following examples uses _hello_ as the client name.
Don't forget to replace it with the name you used in the `@GrpcClient` annotation.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os exemplos a seguir usam _hello_ como o nome do cliente. Não se esqueça de substituí-lo pelo nome que você usou na anotação `@GrpcClient` .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The following objects can be passed to recorders:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os seguintes objetos podem ser passados aos gravadores:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The following semantics are supported:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A seguinte semântica é suportada:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The following table highlights the key differences:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>The following table highlights the key differences:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The following table lists the supported properties:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A tabela seguinte lista as propriedades suportadas:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The following table summarizes the options:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A tabela seguinte resume as opções:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The following will build all modules in the Quarkus repository (except test modules) and install them in your local maven repository with the `999-SNAPSHOT` version:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O seguinte comando irá construir todos os módulos no repositório do Quarkus (exceto módulos de teste) e instalá-los em seu repositório maven local com a versão '999-SNAPSHOT':</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The following will build all modules in the Quarkus repository except docs and test modules and install them in your local maven repository with the `999-SNAPSHOT` version:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O seguinte comando irá construir todos os módulos no repositório Quarkus, exceto os módulos docs e de teste, e instalá-los no seu repositório Maven local com a versão `999-SNAPSHOT`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The format is simple: one class per line.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O formato é simples: uma classe por linha.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The gRPC server</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O servidor gRPC</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The generated project contains a simple test.
Edit the `src/test/java/org/acme/GreetingResourceTest.java` to match the following content:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O projeto gerado contém um teste simples.
Edite `src/test/java/org/acme/GreetingResourceTest.java` para corresponder ao conteúdo a seguir:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The generated project has three lambdas within it.  Two that implement the `RequestHandler&lt;?, ?&gt;` interface, and one that implements the `RequestStreamHandler` interface. One that is used and two that are unused.  If you open up
`src/main/resources/application.properties` you'll see this:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O projeto gerado tem três lambdas dentro dele. Dois que implementam a interface `RequestHandler&lt;?, ?&gt;` e um que implementa a interface `RequestStreamHandler`. Um que é usado e dois que não são usados. Se você abrir o arquivo `src/main/resources/application.properties` , verá o seguinte:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI]
allows you to run your lambdas locally on your laptop in a simulated Lambda environment.  This requires
https://www.docker.com/products/docker-desktop[docker] to be installed.  This is an optional approach should you choose
to take advantage of it.  Otherwise, the Quarkus JUnit integration should be sufficient for most of your needs.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O link:https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI] permite que execute seus lambdas localmente no seu laptop em um ambiente Lambda simulado. Isso requer a instalação do link:https://www.docker.com/products/docker-desktop[docker] . Essa é uma abordagem opcional, caso opte por aproveitá-la. Caso contrário, a integração do Quarkus JUnit deve ser suficiente para a maioria das suas necessidades.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The implementation class of ServiceUrlProvider used to generate ServiceUrl.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A classe de implementação de ServiceUrlProvider usada para gerar ServiceUrl.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The index of scanned classes will not automatically include your external class dependencies.
To add dependencies, create a `@BuildStep` that produces `IndexDependencyBuildItem` objects, for a `groupId` and `artifactId`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O índice de classes verificadas não incluirá automaticamente suas dependências de classe externas. Para adicionar dependências, crie um `@BuildStep` que produza objetos `IndexDependencyBuildItem` , para um `groupId` e `artifactId` .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The instructions here are exactly as above with one change:  you'll need to add `native` as the first parameter to the
`manage.sh` script:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>As instruções aqui são exatamente como acima, com uma alteração: você precisará adicionar `native` como o primeiro parâmetro do script `manage.sh`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The key that will be used as the Redis key</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A variável `chave` que será utilizada como chave do Redis</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The lambda can also be invoked locally with the SAM CLI like this:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O lambda também pode ser invocado localmente com o SAM CLI da seguinte forma:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The last extension is the reactive database driver for PostgreSQL.
Hibernate Reactive uses that driver to interact with the database without blocking the caller thread.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A última extensão é o driver de banco de dados reativo para o PostgreSQL. O Hibernate Reativo usa esse driver para interagir com o banco de dados sem bloquear o thread do chamador.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The less easy way is to inject a `UserTransaction` and use the various transaction demarcation methods.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A forma menos fácil é injetar um `UserTransaction` e utilizar os vários métodos de demarcação de transacções.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The live coding fast feedback loop was very useful when developing with Quarkus. Although fast startup was nice, it wasn’t critical since our apps are long-running, but during development, as we tweaked our APIs, being able to immediately re-test saved us a ton of development time.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O loop de feedback rápido de codificação ao vivo foi muito útil ao desenvolver com o Quarkus. Embora a inicialização rápida tenha sido boa, não foi crítica, já que nossos aplicativos são de longa duração, mas durante o desenvolvimento, à medida que ajustamos nossas APIs, ser capaz de testar novamente imediatamente nos economizou muito tempo de desenvolvimento.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The loop section makes it possible to iterate over iterables, maps and streams.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A instrução de repetição permite iterar sobre iteráveis, mapas e fluxos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The main build step will only be executed in dev mode.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A etapa principal de construção só será executada no modo de desenvolvimento.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The max total receiver queue size across partitions. +
This setting reduces the receiver queue size for individual partitions if the total receiver queue size exceeds this value.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O tamanho máximo total da fila do receptor nas partições. +
Essa configuração reduz o tamanho da fila do receptor para partições individuais se o tamanho total da fila do receptor exceder esse valor.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The maximum number of messages permitted in a batch.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O número máximo de mensagens permitidas em um lote.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The maximum number of messages to be written to Kafka concurrently. It limits the number of messages waiting to be written and acknowledged by the broker. You can set this attribute to `0` remove the limit

Type: _long_</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O número máximo de mensagens a serem gravadas em Kafka simultaneamente. Ele limita o número de mensagens aguardando para serem escritas e reconhecidas pelo corretor. Você pode definir esse atributo como '0' remover o limite

Tipo: _long_</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The maximum number of pending messages across partitions.

Use the setting to lower the max pending messages for each partition (`#setMaxPendingMessages(int)`) if the total number exceeds the configured value.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O número máximo de mensagens pendentes entre partições.

Use a configuração para diminuir o máximo de mensagens pendentes para cada partição ('#setMaxPendingMessages(int)') se o número total exceder o valor configurado.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The maximum size of a queue holding pending chunked messages. When the threshold is reached, the consumer drops pending messages to optimize memory utilization.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O tamanho máximo de uma fila que contém mensagens em partes pendentes. Quando o limite é atingido, o consumidor descarta mensagens pendentes para otimizar a utilização da memória.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The maximum size of a queue holding pending messages, i.e messages waiting to receive an acknowledgment from a broker</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O tamanho máximo de uma fila que contém mensagens pendentes, ou seja, mensagens aguardando para receber uma confirmação de um broker</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The maximum size of a queue holding pending messages.

For example, a message waiting to receive an acknowledgment from a https://pulsar.apache.org/docs/reference-terminology#broker[broker].

By default, when the queue is full, all calls to the `Send` and `SendAsync` methods fail **unless** you set `BlockIfQueueFull` to `true`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O tamanho máximo de uma fila que contém mensagens pendentes.

Por exemplo, uma mensagem aguardando para receber uma confirmação de um https://pulsar.apache.org/docs/reference-terminologia#broker[broker].

Por padrão, quando a fila está cheia, todas as chamadas para os métodos 'Send' e 'SendAsync' falham **a menos que você defina 'BlockIfQueueFull' como 'true'.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The method must be annotated with `@ClientObjectMapper`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O método deve ser anotado com `@ClientObjectMapper`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The mock event server is also started for `@QuarkusIntegrationTest` tests so will work
with native binaries too.  All this provides similar functionality to the SAM CLI local testing, without the overhead of Docker.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O servidor de eventos simulado também é iniciado para os testes do `@QuarkusIntegrationTest` , portanto, também funcionará com binários nativos. Tudo isso oferece funcionalidade semelhante ao teste local da SAM CLI, sem a sobrecarga do Docker.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The model above is only a subset of the fields provided by the service, but it suffices for the purposes of this guide.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O modelo acima é apenas um subconjunto dos campos fornecidos pelo serviço, mas é suficiente para os objetivos deste guia.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The name of the feature should only contain lowercase characters, words are separated by dash; e.g. `security-jpa`.
An extension should provide at most one feature and the name must be unique.
If multiple extensions register a feature of the same name the build fails.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O nome da funcionalidade deve conter apenas caracteres minúsculos, as palavras são separadas por traço; por exemplo, `security-jpa`. Uma extensão deve fornecer no máximo uma funcionalidade e o nome deve ser exclusivo. Se várias extensões registrarem uma funcionalidade com o mesmo nome, a construção falhará.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The name set in `@Identifier` of a bean that implements `io.smallrye.reactive.messaging.kafka.SerializationFailureHandler`. If set, serialization failure happening when serializing keys are delegated to this handler which may provide a fallback value.

Type: _string_</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O nome definido em '@Identifier' de um bean que implementa 'io.smallrye.reactive.messaging.kafka.SerializationFailureHandler'. Se definido, a falha de serialização que ocorre quando as chaves de serialização são delegadas a esse manipulador, que pode fornecer um valor de fallback.

Tipo: _string_</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The name set in `@Identifier` of a bean that implements `io.smallrye.reactive.messaging.kafka.SerializationFailureHandler`. If set, serialization failure happening when serializing values are delegated to this handler which may provide a fallback value.

Type: _string_</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O nome definido em '@Identifier' de um bean que implementa 'io.smallrye.reactive.messaging.kafka.SerializationFailureHandler'. Se definido, a falha de serialização que ocorre quando os valores de serialização são delegados a esse manipulador, que pode fornecer um valor de fallback.

Tipo: _string_</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The native executable for our application will contain the application code, required libraries, Java APIs, and a reduced version of a VM. The smaller VM base improves the startup time of the application and produces a minimal disk footprint.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O executável nativo da nossa aplicação conterá o código da aplicação, as bibliotecas necessárias, as APIs Java e uma versão reduzida de uma VM. A base menor da VM melhora o tempo de inicialização da aplicação e cria um espaço menor em disco.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The native executable must be referenced as `runner` if you include a custom `bootstrap` script.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O executável nativo tem de ser referenciado como `runner` se incluir um script `bootstrap` personalizado.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The native executable requires some additional steps to enable client SSL that S3 and other AWS libraries need.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O executável nativo requer algumas etapas adicionais para habilitar o SSL do cliente que o S3 e outras bibliotecas da AWS precisam.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The native image can also be locally tested using the `sam.native.yaml` template:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A imagem nativa também pode ser testada localmente utilizando o modelo `sam.native.yaml`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The next section covers (2).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A próxima seção aborda o tópico(2).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The node name identifier may be configured via the property `quarkus.transaction-manager.node-name`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O identificador do nome do nó pode ser configurado através da propriedade `quarkus.transaction-manager.node-name`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The number of acknowledgments the producer requires the leader to have received before considering a request complete. This controls the durability of records that are sent. Accepted values are: 0, 1, all

Type: _string_</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O número de reconhecimentos que o produtor exige que o líder tenha recebido antes de considerar um pedido completo. Isso controla a durabilidade dos registros que são enviados. Os valores aceitos são: 0, 1, todos

Tipo: _string_</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The number of concurrent lookup requests that can be sent on each broker connection. Setting a maximum prevents overloading a broker.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O número de solicitações de pesquisa simultâneas que podem ser enviadas em cada conexão do broker. Definir um máximo evita sobrecarregar um broker.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The one current restriction is that extensions should work in both OpenJDK and GraalVM native executables. That is the guarantee we give Quarkus users (a cross compilation for their app). We have a maturity model to improve an extension to be fully "Quarked" and benefit from Quarkus, all done in incremental steps. Just hop on our https://quarkus.io/community/#discussions[mailing list] to discuss your ideas and get help. And you can start reading our https://quarkus.io/guides/writing-extensions[Writing extensions guide] as well or more simply get inspiration from the https://github.com/quarkusio/quarkus/tree/main/extensions[existing ones].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A única restrição atual é que as extensões devem funcionar em executáveis nativos OpenJDK e GraalVM. Essa é a garantia que damos aos usuários do Quarkus (uma compilação cruzada para seu aplicativo). Temos um modelo de maturidade para melhorar uma extensão para ser totalmente "Quarked" e se beneficiar do Quarkus, tudo feito em etapas incrementais. Basta entrar em nossa https://quarkus.io/community/#discussions[lista de discussão] para discutir suas ideias e obter ajuda. E você pode começar a ler nossas https://quarkus.io/guides/writing-extensions[Guia para escrever extensões] também ou, mais simplesmente, se inspirar nas https://github.com/quarkusio/quarkus/tree/main/extensions[existentes].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The only particular aspect of writing Quarkus extensions in Eclipse is that APT (Annotation Processing Tool) is required as part of extension builds, which means you need to:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O único aspecto particular da escrita de extensões Quarkus no Eclipse é o fato de a APT (Annotation Processing Tool - Ferramenta de Processamento de Anotação) ser necessária como parte das compilações de extensões, o que significa que é necessário:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The other build step will only be executed in dev mode.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A outra etapa de construção só será executada no modo de desenvolvimento.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The output of a `ObserverConfigurator` is recorded as bytecode.
Therefore, there are some limitations in how a synthetic observer is invoked at runtime.
Currently, you must generate the bytecode of the method body directly.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A saída de um `ObserverConfigurator` é gravada como bytecode. Portanto, há algumas limitações na forma como um observador sintético é chamado no tempo de execução. Atualmente, você deve gerar o bytecode do corpo do método diretamente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The output of a bean configurator is recorded as bytecode.
Therefore, there are some limitations in how a synthetic bean instance is created at runtime.
You can:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A saída de um configurador de bean é gravada como bytecode. Portanto, há algumas limitações na forma como uma instância de bean sintético é criada em tempo de execução. Você pode:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The parameters passed to the application are described in the datasource guide.
There are other ways to configure the application - please check the xref:config-reference.adoc#configuration-sources[configuration guide] to have an overview of the possibilities (such as env variable, .env files and so on).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os parâmetros passados para a aplicação estão descritos no guia de fontes de dados. Há outras maneiras de configurar a aplicação - consulte o xref:config-reference.adoc#configuration-sources[guia de configuração] para ter uma visão geral das possibilidades (como variável de ambiente, arquivos .env e assim por diante).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The pooling case</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O caso do agrupamento (pooling)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The previous snippet uses Mutiny reactive types.
If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O código anterior usa tipos reativos do Mutiny. Se você não estiver familiarizado com o Mutiny, consulte xref:mutiny-primer.adoc[Mutiny - uma biblioteca de programação reativa intuitiva] .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The process for Gradle is analogous.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O processo para o Gradle é análogo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The project generation has also provided a `Dockerfile.native` in the `src/main/docker` directory with the following content:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A geração do projeto também forneceu um `Dockerfile.native` na pasta `src/main/docker` com o seguinte conteúdo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The properties are shown below:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>As propriedades são apresentadas abaixo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The property is also honored when running tests:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A propriedade também é honrada durante a execução de testes:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The property value could be either an absolute path, such as `/home/foo/dump` on a Linux machine, or a path relative to the user working directory, i.e. `dump` corresponds to the `{user.dir}/target/dump` in the dev mode and `{user.dir}/dump` when running the tests.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O valor da propriedade pode ser um caminho absoluto, como `/home/foo/dump` numa máquina Linux, ou um caminho relativo ao diretório de trabalho do usuário, ou seja, `dump` corresponde a `{user.dir}/target/dump` no modo de desenvolvimento e `{user.dir}/dump` quando se executam os testes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The purpose of the annotations in the code above is the following:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O objetivo das anotações no código acima é o seguinte:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The reason for this is that the local build driver invoked through `-Dquarkus.native.container-build=true` uses volume mounts to make the JAR available in the build container, but volume mounts do not work with remote daemons. The remote container build driver copies the necessary files instead of mounting them. Note that even though the remote driver also works with local daemons, the local driver should be preferred in the local case because mounting is usually more performant than copying.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O motivo para isso é que o driver do build local é executado através do `-Dquarkus.native.container-build=true` que utiliza irá montar volumes para tornar o JAR disponível na build do contêiner, mas os volumes montados não funcionam com daemons remotos. O driver que faz a build do contêiner remoto copia apenas os arquivos necessários para montar ele. Observe que, embora o driver remoto também funcione com daemons locais, o driver local deve ser preferido no caso local porque a montagem é geralmente mais eficiente do que a cópia.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The recipe might not include a specific item in your project.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A receita OpenRewrite pode não incluir um item específico do seu projeto.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The recorder must be executed in the `ExecutionTime.RUNTIME_INIT` phase.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O gravador deve ser executado na fase `ExecutionTime.RUNTIME_INIT`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The resulting bean class is something like `public class @Singleton MyBean { }`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A classe de bean resultante é algo como `public class @Singleton MyBean { }`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The resulting list will contain `@Named` synthetic beans.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A lista resultante conterá beans sintéticos `@Named`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The resulting list will not contain `@Named` synthetic beans.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A lista resultante não conterá beans sintéticos `@Named`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The second application, the `processor`, in turn, will read from the `quote-requests` queue put a random price to the quote, and send it to an exchange named `quotes`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A segunda aplicação, a `processor`, por sua vez, lê a partir da fila  `quote-requests`  coloca um preço aleatório na cotação e envia-o para uma fila chamada  `quotes`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The second stage is a minimal image copying the produced native executable</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O segundo estágio é uma imagem mínima que copia o executável nativo produzido</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The serialize method takes the object without a default constructor and creates a `KeyProxy` that contains the information necessary to recreate the `DSAPublicKey`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O método serialize pega o objeto sem um construtor padrão e cria um `KeyProxy` que contém as informações necessárias para recriar o `DSAPublicKey`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The serializer classname used to serialize the payload

Type: _string_</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O nome da classe do serializador usado para serializar a carga útil

Tipo: _string_</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The serializer classname used to serialize the record's key

Type: _string_</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O nome da classe do serializador usado para serializar a chave do registro

Tipo: _string_</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The service URL for the Pulsar service</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A URL do serviço Pulsar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The service name is derived from the injection point - the field name is used. The `quarkus.grpc.clients.hello.host` property must be set.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O nome do serviço é derivado do ponto de injeção - o nome do campo é usado. A propriedade `quarkus.grpc.clients.hello.host` deve ser definida.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The service name, method and type can be found in the _tags_.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O nome do serviço, o método e o tipo podem ser encontrados nas _tags_.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The services are _served_ by a _server_.
Available services (_CDI beans_) are automatically registered and exposed.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os serviços são _served_ by a _server_ . Os serviços disponíveis (_beans CDI_ ) são automaticamente registrados e expostos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The simplest approach to mock a client for tests is to use Mockito and `@InjectMock`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A abordagem mais simples para simular um cliente para testes é usar Mockito e `@InjectMock`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The simplest example is:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O exemplo mais simples é:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The solution is located in the `funqy-google-cloud-functions-http-quickstart` link:{quickstarts-tree-url}/funqy-quickstarts/funqy-google-cloud-functions-http-quickstart[directory].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A solução está localizada no  link:{quickstarts-tree-url}/funqy-quickstarts/funqy-google-cloud-functions-http-quickstart[diretório] `funqy-google-cloud-functions-http-quickstart`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The solution is located in the `getting-started` directory.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A solução está localizada no diretório `getting-started`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The solution is located in the `getting-started` link:{quickstarts-tree-url}/getting-started[directory].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A solução está localizada no link:{quickstarts-tree-url}/getting-started[diretório] `getting-started`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The solution is located in the `grpc-plain-text-quickstart` link:{quickstarts-tree-url}/grpc-plain-text-quickstart[directory].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A solução está localizada no  link:{quickstarts-tree-url}/grpc-plain-text-quickstart[diretório] `grpc-plain-text-quickstart`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The solution is located in the `qute-quickstart` link:{quickstarts-tree-url}/qute-quickstart[directory].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A solução está localizada no  link:{quickstarts-tree-url}/qute-quickstart[diretório] `qute-quickstart`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The solution is located in the `rabbitmq-quickstart` link:{quickstarts-tree-url}/rabbitmq-quickstart[directory].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A solução  `rabbitmq-quickstart` está localizada no link:{quickstarts-tree-url}/rabbitmq-quickstart[directory].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The solution is located in the `redis-quickstart` link:{quickstarts-tree-url}/redis-quickstart[directory].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A solução está localizada no link:{quickstarts-tree-url}/redis-quickstart[diretório] `redis-quickstart` .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The solution is located in the `rest-client-reactive-quickstart` link:{quickstarts-tree-url}/rest-client-reactive-quickstart[directory].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A solução está localizada no link:{quickstarts-tree-url}/rest-client-reactive-quickstart[diretório] `rest-client-reactive-quickstart`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The solution is located in the `spring-boot-properties-quickstart` link:{quickstarts-tree-url}/spring-boot-properties-quickstart[directory].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A solução está localizada no: {quickstarts-tree-url}/spring-boot-properties-quickstart[diretório] `spring-boot-properties-quickstart`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The source cache is located in the `target/sources` folder.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A cache de fonte está localizado na pasta `target/sources`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The string value is recorded in the bytecode and used to initialize the instance of `Foo`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O valor da string é gravado no bytecode e utilizado para inicializar a instância de `Foo`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The stub class names are derived from the service name used in your `proto` file.
For example, if you use `Greeter` as a service name as in:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os nomes das classes stub são derivados do nome do serviço usado em seu arquivo `proto` . Por exemplo, se você usar `Greeter` como nome de serviço, como no seguinte caso:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The target partition id. -1 to let the client determine the partition

Type: _int_</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O id da partição de destino. -1 para permitir que o cliente determine a partição

Tipo: _int_</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The template is simple:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O modelo é simples:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The test port can be controlled via the `quarkus.http.test-port` config property. Quarkus also creates a system
property called `test.url` that is set to the base test URL for situations where you cannot use injection.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A porta de teste pode ser controlada por meio da propriedade de configuração `quarkus.http.test-port` .
O Quarkus também cria uma propriedade de sistema chamada `test.url` que é definida como o URL de teste básico para situações em que o usuário não pode usar injeção.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The testcase for validating that the `RuntimeXmlConfigService` has started can be found in the `testRuntimeXmlConfigService` test of `ConfiguredBeanTest` and `NativeImageIT`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O caso de teste para validar que o `RuntimeXmlConfigService` foi iniciado pode ser encontrado no teste `testRuntimeXmlConfigService` de `ConfiguredBeanTest` e `NativeImageIT`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The time interval to expire incomplete chunks if a consumer fails to receive all the chunks in the specified time period. The default value is 1 minute.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O intervalo de tempo para expirar blocos incompletos se um consumidor não receber todos os blocos no período de tempo especificado. O valor padrão é 1 minuto.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The total bytes of memory the producer can use to buffer records waiting to be sent to the server.

Type: _long_</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O total de bytes de memória que o produtor pode usar para armazenar em buffer registros aguardando para serem enviados ao servidor.

Tipo: _long_</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The transformer is only applied to classes.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O transformador só é aplicado às classes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The types of values that can be injected include:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os tipos de valores que podem ser injetados incluem:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The user, `alice`, has `alice` as their password and `admin` as their role.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O usuário, `alice`, tem `alice` como password e `admin` como role.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The user, `bob`, has `bob` as their password and `user` as their role.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O usuário, `bob`, tem `bob` como senha e `user` como role.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The value held by the Redis key</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A variável `valor` que será o valor mantido pela chave Redis</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The versions of musl and zlib may need to be updated to meet the native-image executable requirements (and UPX if you use native image compression).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>As versões de musl e zlib podem precisar serem atualizadas para atender os requisitos do executável de imagem nativa (e UPX se utilizar compressão de imagem nativa).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The whole configuration documentation should not be included in the middle of the guide.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A documentação completa de configuração não deve ser incluída no meio do guia.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The xref:extension-metadata.adoc#quarkus-extension-yaml[quarkus-extension.yaml] file (in the extension's `runtime/` module) has the minimum metadata set:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O arquivo xref:extension-metadata.adoc#quarkus-extension-yaml[quarkus-extension.yaml] (no módulo `runtime/` da extensão) tem o conjunto mínimo de metadados:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Then check that the endpoint returns `hello quarkus` as expected:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Em seguida, verifique se o endpoint retorna `hello quarkus` como esperado:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Then create a serializer and/or a deserializer for JSON-B, an example of which can be seen in the `mongodb-panache` extension.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Em seguida, crie um serializador e/ou desserializador para JSON-B, um exemplo do qual pode ser visto na extensão `mongodb-panache`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Then create a serializer or a deserializer (or both) for Jackson, an example of which can be seen in the `mongodb-panache` extension.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Em seguida, crie um serializador ou um desserializador (ou ambos) para a Jackson, um exemplo do qual pode ser visto na extensão `mongodb-panache`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Then run it:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Em seguida, execute:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Then the service interface name is: `hello.Greeter`, the Mutiny stub name is: `hello.MutinyGreeterGrpc.MutinyGreeterStub` and the blocking stub name is: `hello.GreeterGrpc.GreeterBlockingStub`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Nesse caso, o nome da interface do serviço é: `hello.Greeter`, o nome do stub Mutiny é: `hello.MutinyGreeterGrpc.MutinyGreeterStub` e o nome do stub bloqueante é: `hello.GreeterGrpc.GreeterBlockingStub`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Then you must create a pull request adding a `your-extension.yaml` file in the `extensions/` directory in the link:https://github.com/quarkusio/quarkus-extension-catalog[Quarkus Extension Catalog]. The YAML must have the following structure:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Em seguida, deve criar um pull request adicionando um arquivo `your-extension.yaml` no diretório `extensions/` no link:https://github.com/quarkusio/quarkus-extension-catalog[Catálogo de Extensões do Quarkus]. O YAML deve ter a seguinte estrutura:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Then, add to your `application.properties` file:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Em seguida, adicione ao seu arquivo `application.properties`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Then, create an interface method that corresponds to the call and make it return the `FormDto`:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Em seguida, crie um método de interface que corresponda à chamada e faça-o devolver o `FormDto`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Then, if you didn't delete the generated native executable, you can build the docker image with:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Depois, se não tiver deletado o executável nativo criado, pode construir a imagem docker com:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Then, in your application configuration, enable the compression by configuring the _compression level_ you want:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Em seguida, na configuração da aplicação, ative a compactação, configurando o _nível de compactação_ pretendido:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Then, in your test you can simply use `@InjectMock` to create and inject a mock:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Depois, no seu teste, pode simplesmente utilizar `@InjectMock` para criar e injetar uma simulação:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Then, launch the application using:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Em seguida, inicie a aplicação utilizando:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Then, open http://localhost:8080/hello/quarkus in a browser, and you should get `Hello quarkus`!</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Em seguida, abra  http://localhost:8080/hello/quarkus  em um navegador e deverá receber `Hello quarkus`!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Then, open the `src/main/resources/application.properties` file and add:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Em seguida, abra o arquivo `src/main/resources/application.properties` e adicione:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Then, use the `@CacheResult` and others cache annotations as explained in the xref:cache.adoc[Quarkus Cache guide]:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Em seguida, utilize `@CacheResult` e outras anotações de cache do Quarkus, como explicado em xref:cache.adoc[Guia de cache Quarkus]:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>There Quarkus provides a lot of build items that control aspects of the native executable build. This allows for extensions
to programmatically perform tasks such as registering classes for reflection or adding static resources to the native
executable. Some of these build items are listed below:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O Quarkus fornece vários itens de construção que controlam aspectos da construção do executável nativo. Isso permite que as extensões executem tarefas de forma programática, como o registro de classes para reflexão ou a adição de recursos estáticos ao executável nativo. Alguns desses itens de construção estão listados abaixo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>There are a few modes in which the form data can be encoded. By default,
Rest Client Reactive uses RFC1738.
You can override it by specifying the mode either on the client level,
by setting `io.quarkus.rest.client.multipart-post-encoder-mode` RestBuilder property
to the selected value of `HttpPostRequestEncoder.EncoderMode` or
by specifying `quarkus.rest-client.multipart-post-encoder-mode` in your
`application.properties`. Please note that the latter works only for
clients created with the `@RegisterRestClient` annotation.
All the available modes are described in the link:https://netty.io/4.1/api/io/netty/handler/codec/http/multipart/HttpPostRequestEncoder.EncoderMode.html[Netty documentation]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Há alguns modos pelos quais os dados do formulário podem ser codificados. Por padrão, o Cliente REST Reativo usa RFC1738. Você pode substituí-la especificando o modo no nível do cliente, definindo a propriedade `io.quarkus.rest.client.multipart-post-encoder-mode` RESTBuilder como o valor selecionado de `HttpPostRequestEncoder.EncoderMode` ou especificando `quarkus.rest-client.multipart-post-encoder-mode` em seu `application.properties` . Observe que a última opção funciona somente para clientes criados com a anotação `@RegisterRESTClient` . Todos os modos disponíveis estão descritos na link:https://netty.io/4.1/api/io/netty/handler/codec/http/multipart/HttpPostRequestEncoder.EncoderMode.html[documentação do Netty]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>There are a few steps to get your lambda running on AWS.  The generated maven project contains a helpful script to
create, update, delete, and invoke your lambdas for pure Java and native deployments.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Há algumas etapas para que seu lambda seja executado na AWS. O projeto maven gerado contém um script útil para criar, atualizar, excluir e invocar seus lambdas para implantações puramente Java e nativas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>There are a few ways in which you can specify custom headers for your REST calls:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Existem algumas formas de especificar cabeçalhos personalizados para as suas chamadas REST:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>There are also three system properties that allow you to dump the generated/transformed classes to the filesystem and inspect them later, for example via a decompiler in your IDE.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Existem também três propriedades do sistema que lhe permitem despejar as classes geradas/transformadas para o sistema de arquivos e inspecioná-las mais tarde, por exemplo, através de um descompilador no seu IDE.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>There are other build items specialized in transformation: xref:additional_interceptor_bindings[Use Case - Additional Interceptor Bindings] and xref:injection_point_transformation[Use Case - Injection Point Transformation].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Existem outros itens de construção especializados em transformação: xref:additional_interceptor_bindings[Caso de Uso - Ligações de Interceptores Adicionais] e xref:injection_point_transformation[Caso de Uso - Transformação de Pontos de Injeção].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>There are several ways to register a xref:cdi-reference.adoc#synthetic_beans[synthetic bean] in Quarkus.
In this chapter, we will cover a use case that can be used to initialize extension beans in a safe manner (compared to xref:bean_init[Bean initialization]).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Há várias maneiras de registrar um xref:cdi-reference.adoc#synthetic_beans[bean sintético] no Quarkus. Neste capítulo, abordaremos um caso de uso que pode ser usado para inicializar beans de extensão de forma segura (em comparação com a xref:bean_init[Inicialização do bean] ).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>There are some restrictions on what can be done in this stage as the Substrate VM disallows some objects in the native executable. For example you should not attempt to listen on a port or start threads in this phase. In addition, it is disallowed to read run time configuration during static initialization.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Existem algumas restrições sobre o que pode ser feito nesta fase, uma vez que a Substrate VM não permite alguns objetos no executável nativo. Por exemplo, não se deve tentar escutar numa porta ou iniciar threads nesta fase. Além disso, não é permitido ler a configuração em tempo de execução durante a inicialização estática.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>There are three distinct bootstrap phases of a Quarkus app:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Há três fases distintas de bootstrap de uma aplicação Quarkus:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>There are times when you may have to add some additions to the `function.zip` lambda deployment that is generated
by the build.  To do this, create a `zip.jvm` or `zip.native` directory within `src/main`.
Create `zip.jvm/` if you are doing a pure Java lambda.  `zip.native/` if you are doing a native deployment.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Há ocasiões em que você pode ter de adicionar alguns acréscimos à implementação do lambda `function.zip` gerada pela compilação. Para fazer isso, crie um diretório `zip.jvm` ou `zip.native` dentro de `src/main`. Crie `zip.jvm/` se estiver fazendo um lambda Java puro. `zip.native/` se estiver fazendo uma implementação nativa.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>There are times you may want to set a specific system properties or other arguments when lambda invokes
your native quarkus lambda deployment.  If you include a `bootstrap` script file within
`zip.native`, the quarkus extension will automatically rename the executable to `runner` within
`function.zip` and set the unix mode of the `bootstrap` script to executable.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Às vezes, você pode querer definir propriedades específicas do sistema ou outros argumentos quando o lambda invoca a implantação nativa do lambda do quarkus. Se incluir um arquivo de script `bootstrap` em `zip.native`, a extensão quarkus renomeará automaticamente o executável para `runner` em `function.zip` e definirá o modo unix do script `bootstrap` como executável.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>There are two broad patterns that extensions can use to interact with an optional metrics extension to add their own metrics:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Existem dois padrões gerais que as extensões podem utilizar para interagir com uma extensão de métricas opcional para adicionar as suas próprias métricas:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>There are two examples of a library providing its own metrics API:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Existem dois exemplos de uma biblioteca que fornece a sua própria API de métricas:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>There are two interesting parts in this listing:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Há duas partes interessantes nesta listagem:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>There are two ways to achieve _priming_:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Existem duas formas de obter _priming_:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>There are various APIS that you can use to integrate with development mode, and to get information about the current state.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Existem várias APIS que você pode usar para integrar com o modo de desenvolvimento e para obter informações sobre o estado atual.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>There can be only one `ClientHeadersFactory` per class. With it, you can not only add custom headers, but you can also transform existing ones. See the `RequestUUIDHeaderFactory` class below for an example of the factory.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Só pode haver um `ClientHeadersFactory` por classe. Com ela, é possível não só adicionar cabeçalhos personalizados, mas também transformar os existentes. Veja a classe `RequestUUIDHeaderFactory` abaixo para um exemplo da fábrica.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>There exist multiple stereotypes of extension, let's list a few.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Existem vários estereótipos de extensão, vamos enumerar alguns.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>There is a `io.quarkus.runtime.ObjectSubstitution` interface that can be implemented to tell Quarkus how to handle such classes. An example implementation for the `DSAPublicKey` is shown here:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Existe uma interface `io.quarkus.runtime.ObjectSubstitution` que pode ser implementada para dizer ao Quarkus como lidar com essas classes. Um exemplo de implementação para a interface `DSAPublicKey` é mostrado aqui:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>There is a second plugin catalog that is relative to the current project (if available): `&lt;project root&gt;/.quarkus/cli/plugins/quarkus-cli-catalog.json`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>There is a second plugin catalog that is relative to the current project (if available): `&lt;project root&gt;/.quarkus/cli/plugins/quarkus-cli-catalog.json`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>There is nothing special about the POM other than the inclusion of the `quarkus-amazon-lambda` extension
as a dependency.  The extension automatically generates everything you might need for your lambda deployment.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Não há nada de especial no POM além da inclusão da extensão `quarkus-amazon-lambda` como uma dependência. A extensão gera automaticamente tudo o que pode precisar para a implantação do lambda.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>There is one significant drawback of this "late initialization" approach.
An _uninitialized_ bean may be accessed by other extensions or application components that are instantiated during bootstrap.
We'll cover a more robust solution in the xref:synthetic_beans[Synthetic beans].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Há uma desvantagem significativa nessa abordagem de "inicialização tardia". Um bean _não inicializado_ pode ser acessado por outras extensões ou componentes de aplicações que são instanciados durante o bootstrap. Abordaremos uma solução mais robusta nos xref:synthetic_beans[Beans sintéticos] .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>There's an alternate way to declare your templates in your Java code, which relies on the following convention:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Existe uma forma alternativa de declarar os seus modelos no seu código Java, que se baseia na seguinte convenção:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>These are the classes we are going to use.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Estas são as classes que vamos utilizar.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>These materials are for JUGs who have tour dates booked and want access to promotional materials to use to create excitement and drum up attendance. We've written a couple versions of the session abstracts so you could find one that fits your JUGs personality, or go for it and create your own! We've also created some &lt;a href="{{site.baseurl}}/worldtour/graphics"&gt;graphic resources&lt;/a&gt; for social promotions a well.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Esses materiais são para JUGs que têm datas de turnê reservadas e querem acesso a materiais promocionais para usar para criar emoção e aumentar a participação. Nós escrevemos algumas versões dos resumos da sessão para que você possa encontrar um que se encaixe na sua personalidade JUGs, ou vá em frente e crie o seu próprio! Também criamos alguns &lt;a href="{{site.baseurl}}/worldtour/graphics"&gt;recursos gráficos&lt;/a&gt; para promoções sociais.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>These non application endpoints are normally accessible under the `/q` prefix like so:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Estes endpoints de aplicação não relacionados são normalmente acessíveis através do prefixo `/q`, da seguinte forma:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>These properties are especially useful in the development mode or when running the tests where the generated/transformed classes are only held in memory in a class loader.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Estas propriedades são especialmente úteis no modo de desenvolvimento ou durante a execução dos testes em que as classes geradas/transformadas são apenas mantidas em memória num carregador de classes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>These tests should be placed in the deployment module, if additional Quarkus modules are required for testing
their deployment modules should also be added as test scoped dependencies.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Esses testes devem ser colocados no módulo de implantação; se módulos adicionais do Quarkus forem necessários para o teste, seus módulos de implantação também deverão ser adicionados como dependências com escopo de teste.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>These tests use https://rest-assured.io/[RestAssured], but feel free to use your favorite library.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Estes testes utilizam  link:https://rest-assured.io/[o RestAssured], mas sinta-se à vontade para utilizar a sua biblioteca favorita.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>They represent build items containing the runnable artifact generated by the build, such as an uberjar or thin jar.
These build items can also be used to always execute a build step without needing to produce anything.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Eles representam itens de construção que contêm o artefato executável gerado pela construção, como um uberjar ou thin jar. Esses itens de construção também podem ser usados para sempre executar uma etapa de construção sem a necessidade de produzir nada.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>They represent build items with validation errors that make the build fail. These build items are consumed during the initialization of the CDI container.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Eles representam itens de construção com erros de validação que fazem a construção falhar. Estes itens de construção são consumidos durante a inicialização do contêiner CDI.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Think of Quarkus extensions as your project dependencies. Extensions configure, boot and integrate a framework or technology into your Quarkus application. They also do all of the heavy lifting of providing the right information to GraalVM for your application to compile natively. This will allow 3rd party projects to easily take advantage of the work we have done to make it easier to target GraalVM.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Pense nas extensões do Quarkus como suas dependências de projeto. As extensões configuram, inicializam e integram uma estrutura ou tecnologia em seu aplicativo Quarkus. Eles também fazem todo o trabalho pesado de fornecer as informações certas para GraalVM para sua aplicação compilar nativamente. Isso permitirá que os projetos de terceiros aproveitem facilmente o trabalho que fizemos para facilitar o direcionamento do GraalVM.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Think of build items as a way for different extensions to communicate with one another.  For example, a build item can:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Pense nos itens de construção como uma forma das diferentes extensões comunicarem umas com as outras. Por exemplo, um item de construção pode:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This `proto` file defines a simple service interface with a single method (`SayHello`), and the exchanged messages (`HelloRequest` containing the name and `HelloReply` containing the greeting message).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este arquivo `proto` define uma interface de serviço simples com um único método ( `SayHello`), e as mensagens trocadas ( `HelloRequest` contendo o nome `HelloReply` e contendo a mensagem de saudação).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This annotation defines your transaction boundaries and will wrap this call within a transaction.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Essa anotação define os limites da transação e encapsulará essa chamada em uma transação.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This build step must be executed after `syntheticBean()` completes.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este passo de construção deve ser executado após a conclusão de `syntheticBean()`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This channel is mapped to a RabbitMQ exchange using the configuration we will add to the `application.properties` file.
Open the `src/main/resource/application.properties` file and add:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Esse canal é mapeado para uma troca RabbitMQ usando a configuração que adicionaremos ao arquivo `application.properties` . Abra o arquivo `src/main/resource/application.properties` e adicione:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This class represents `Fruits`.
It's a straightforward entity with a single field (`name`).
Note that it uses `io.quarkus.hibernate.reactive.panache.PanacheEntity`, the reactive variant of `PanacheEntity`.
So, behind the scenes, Hibernate uses the execution model we described above.
It interacts with the database without blocking the thread.
In addition, this reactive `PanacheEntity` proposes a reactive API.
We will use this API to implement the REST endpoint.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Essa classe representa `Fruits` . É uma entidade simples com um único campo ( `name` ). Observe que ela usa `io.quarkus.hibernate.reactive.panache.PanacheEntity` , a variante reativa de `PanacheEntity` . Portanto, por debaixo dos panos, o Hibernate usa o modelo de execução que descrevemos acima. Ele interage com o banco de dados sem bloquear o thread. Além disso, esse `PanacheEntity` reativo propõe uma API reativa. Usaremos essa API para implementar o endpoint REST.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This command creates the project structure and select the two Quarkus extensions we will be using:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este comando cria a estrutura do projeto e seleciona as duas extensões Quarkus que vamos utilizar:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This command generates a new project, importing the Redis extension.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este comando gera um novo projeto, importando a extensão Redis.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This command generates a project and imports the `spring-boot-properties` extension.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este comando gera um projeto e importa a extensão `spring-boot-properties`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This command generates the Maven project with a REST endpoint and imports:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este comando gera o projeto Maven com um endpoint REST e com importações:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This command will start a Redis instance to execute the tests.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este comando iniciará uma instância Redis para executar os testes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This condition will apply to all methods defined in `MyDevModeProcessor`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Esta condição será aplicada a todos os métodos definidos em `MyDevModeProcessor`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This declares a template with path `templates/HelloResource/hello`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Isto declara um modelo com o caminho `templates/HelloResource/hello`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This declares a template with path `templates/hello`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Isto declara um modelo com o caminho `templates/hello`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This environment variable resolves some incompatibilities between Quarkus and the AWS Lambda Custom Runtime environment.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Esta variável de ambiente resolve algumas incompatibilidades entre o Quarkus e o ambiente AWS Lambda Custom Runtime.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This example is using recorder proxies; see the section on xref:bytecode-recording[bytecode recording] for more information.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este exemplo usa proxies de gravador; consulte a seção sobre xref:bytecode-recording[gravação de bytecode] para obter mais informações.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This example uses TX_LOG as the datasource name.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este exemplo utiliza TX_LOG como o nome da fonte de dados.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This explain the specifics of using Hibernate ORM with Panache in a Kotlin project.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Isso explica as especificidades do uso do Hibernate ORM com o Panache em um projeto Kotlin.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This expression is also validated against the `Item` class and obviously there is no such property declared. However, there is a template extension method declared on the `TemplateExtensions` class - see below.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Esta expressão é também validada em relação à classe `Item` e, obviamente, não existe tal propriedade declarada. No entanto, existe um método de extensão de modelo declarado na classe `TemplateExtensions` - veja abaixo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This expression is validated. Try to change the expression to `{item.nonSense}` and the build should fail.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Esta expressão é validada. Se tentar alterar a expressão para `{item.nonSense}`, a construção deverá falhar.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This extension is developed by a third party and is part of the Quarkus Platform.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Esta extensão é desenvolvida por terceiros e faz parte da Plataforma Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide also covers the testing of the endpoint.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia também abrange o teste do endpoint.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide covered the creation of an application using Quarkus.
However, there is much more.
We recommend continuing the journey by creating xref:getting-started-dev-services.adoc[your second Quarkus application], with dev services and persistence.
You can learn about creating a native executable and packaging it in a container with the xref:building-native-image.adoc[building a native executable guide].
If you are interested in reactive, we recommend the xref:getting-started-reactive.adoc[getting started with reactive guide], where you can see how to implement reactive applications with Quarkus.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia abordou a criação de um aplicativo usando o Quarkus. 
No entanto, há muito mais pela frente.
Recomendamos continuar a jornada criando sua segunda aplicação Quarkus, com serviços de desenvolvimento e persistência. xref:getting-started-dev-services.adoc[seu segundo aplicativo Quarkus],
Você pode aprender sobre a criação de um executável nativo e empacotá-lo em um contêiner com o guia de criação de um executável nativo xref:building-native-image.adoc[guia de criação de um executável nativo].
Se você estiver interessado em reatividade, sugerimos o xref:getting-started-reactive.adoc[guia de início com reatividade], onde você pode ver como implementar aplicações reativas com o Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide covers how to deploy a native application on Kubernetes.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia aborda como implantar um aplicativo nativo no Kubernetes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide covers how to deploy a native application on OpenShift.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia aborda como implantar um aplicativo nativo no OpenShift.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide covers how to use GCP BigQuery in Quarkus.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia aborda como usar o GCP BigQuery no Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide covers how to use GCP Bigtable in Quarkus.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia aborda como usar o GCP Bigtable no Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide covers how to use GCP Firestore in Quarkus.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia aborda como usar o GCP Firestore no Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide covers how to use GCP PubSub in Quarkus.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica como utilizar o GCP PubSub no Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide covers how to use GCP Secret Manager in Quarkus to consume configuration properties directly or via your `application.properties`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia aborda como usar o GCP Secret Manager no Quarkus para consumir propriedades de configuração diretamente ou por meio de seu 'application.properties'.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide covers how to use GCP Spanner in Quarkus.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica como utilizar o GCP Spanner no Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide covers how to use GCP Storage in Quarkus.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia aborda como usar o armazenamento GCP no Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide covers how to use Hibernate Validator/Bean Validation in your REST services.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia aborda a forma de utilizar o validador Hibernate/Bean Validation nos seus serviços REST.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide covers how to use MongoDB in Quarkus.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia aborda como usar o MongoDB no Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide covers how to use a Redis datastore in Quarkus.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia aborda como usar um datastore Redis no Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide covers how to use an Elasticsearch cluster using the low level or high level REST clients.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia aborda como usar um cluster do Elasticsearch usando os clientes REST de baixo ou alto nível.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide covers how to use multiple GCP services.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia aborda como usar vários serviços GCP.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide covers how to use the AWS Systems Manager in Quarkus.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia aborda como usar o AWS Systems Manager no Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide covers how to use the Amazon DynamoDB database in Quarkus.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia aborda como usar o banco de dados do Amazon DynamoDB no Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide covers how to use the Amazon Identity and Access Management in Quarkus.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia aborda como usar o Amazon Identity and Access Management no Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide covers how to use the Amazon Key Management Service in Quarkus.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia aborda como usar o Amazon Key Management Service no Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide covers how to use the Amazon S3 cloud storage in Quarkus.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia aborda como usar o armazenamento em nuvem do Amazon S3 no Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide covers how to use the Amazon Simple Email Service in Quarkus.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia aborda como usar o Amazon Simple Email Service no Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide covers how to use the Amazon Simple Notification Service in Quarkus.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia aborda como usar o Amazon Simple Notification Service no Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide covers how to use the Amazon Simple Queue Service in Quarkus.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia aborda como usar o Amazon Simple Queue Service no Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide covers how to use the Apache Cassandra NoSQL database in Quarkus.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia aborda como usar o banco de dados Apache Cassandra NoSQL no Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide covers how to use the Flyway extension to manage your schema migrations.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia aborda como usar a extensão Flyway para gerenciar suas migrações de esquema de banco de dados.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide covers how to use the Liquibase extension to manage your schema migrations.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia aborda como usar a extensão Liquibase para gerenciar suas migrações de esquema.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide covers how to use the Neo4j graph database in Quarkus.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia aborda como usar o banco de dados baseado em grafos Neo4j no Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide covers how to use the Reactive SQL Clients in Quarkus.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia aborda como usar os clientes SQL reativos no Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide covers the systems integration with Apache Camel</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia aborda a integração de sistemas com o Apache Camel</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide covers the usage of MongoDB using active records and repositories in a Kotlin project.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia aborda o uso do MongoDB usando &lt;i&gt;active records&lt;/i&gt; e repositórios em um projeto Kotlin.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide covers the usage of MongoDB using active records and repositories.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia aborda o uso do MongoDB usando &lt;i&gt;active records&lt;/i&gt; e repositórios.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide covers:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia inclui:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide covers:
* Gradle configuration
* Creating a new project
* Dealing with extensions
* Development mode
* Debugging
* Import in your IDE
* Building a native executable
* Build a container friendly executable
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia abrange:
* Configuração Gradle
* Criação de um novo projeto
* Lidar com extensões
* Modo de desenvolvimento
*Depuração
* Importar em seu IDE
* Construção de um executável nativo
* Construa um executável amigável para contêineres
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide covers:
* Maven configuration
* Creating a new project
* Dealing with extensions
* Development mode
* Debugging
* Import in your IDE
* Building a native executable
* Build a container friendly executable
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia abrange:
* Configuração do Maven
* Criação de um novo projeto
* Lidar com extensões
* Modo de desenvolvimento
*Depuração
* Importar em seu IDE
* Construção de um executável nativo
* Construa um executável amigável para contêineres
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide covers:
* Testing in JVM mode
* Testing in native mode
* Injection of resources into tests
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia aborda: 
* Testes no modo JVM 
* Testes no modo nativo 
* Injeção de recursos nos testes
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide demonstrates how to add a RESTEasy Reactive filter to help prevent CSRF attacks.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia demonstra como adicionar um filtro RESTEasy Reactive para ajudar a evitar ataques CSRF.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide demonstrates how to get started with Quarkus security using Basic authentication and a database to store your user identities with Hibernate ORM.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia demonstra como começar a usar a segurança do Quarkus usando a autenticação básica e um banco de dados para armazenar suas identidades de usuário com o Hibernate ORM.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide demonstrates how to use reactive routes.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia demonstra como usar rotas reativas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide demonstrates how to use the Fabric8 Kubernetes client to interact with your Kubernetes cluster.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia demonstra como usar o Fabric8 Kubernetes Client para interagir com seu cluster Kubernetes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide demonstrates how to use the OpenID Connect extension to protect your Quarkus JAX-RS service application using Bearer Token Authorization where the tokens are issued by OpenID Connect Providers such as Keycloak.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia demonstra como utilizar a extensão OpenID Connect para proteger a sua aplicação de serviço Quarkus JAX-RS utilizando a Autorização de Token de Portador em que os tokens são emitidos por Fornecedores OpenID Connect como o Keycloak.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide demonstrates how to use the OpenID Connect extension to protect your Quarkus JAX-RS web application using the Authorization Code Flow and OpenID Connect Providers such as Keycloak.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia demonstra como usar a extensão OpenID Connect para proteger sua aplicação Web Quarkus JAX-RS usando o Authorization Code Flow e OpenID Connect Providers, como Keycloak.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide demonstrates how your OpenID Connect application can support multi-tenancy so that you can serve multiple tenants from a single application.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia demonstra como seu aplicativo OpenID Connect pode oferecer suporte a multilocação para que você possa atender vários locatários de um único aplicativo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide demonstrates how your Quarkus application can authorize access to protected resources using Keycloak Authorization Services.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia demonstra como a sua aplicação Quarkus pode autorizar o acesso a recursos protegidos utilizando os Serviços de Autorização Keycloak.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide demonstrates how your Quarkus application can collect metrics using the Micrometer extension.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia demonstra como sua aplicação Quarkus pode coletar métricas usando a extensão Micrometer.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide demonstrates how your Quarkus application can connect to a Redis server using the Redis Client extension.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia demonstra como a sua aplicação Quarkus pode se conectar a um servidor Redis utilizando a extensão Redis Client.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide demonstrates how your Quarkus application can use JMS messaging with AMQP 1.0 using Apache Qpid JMS, or using Apache ActiveMQ Artemis JMS.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia demonstra como a sua aplicação Quarkus pode utilizar mensagens JMS com AMQP 1.0 utilizando o Apache Qpid JMS, ou utilizando o Apache ActiveMQ Artemis JMS.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide demonstrates how your Quarkus application can use Kogito to add business automation
to power it up with business processes and rules.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia demonstra como seu aplicativo Quarkus pode usar o Kogito para adicionar automação comercial para aprimorá-lo com processos e regras de negócios.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide demonstrates how your Quarkus application can use Kogito to add business automation to power it up with business processes and rules.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia demonstra como seu aplicativo Quarkus pode usar o Kogito para adicionar automação comercial para aprimorá-lo com processos e regras de negócios.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide demonstrates how your Quarkus application can use WebAuthn authentication instead of
passwords.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia demonstra como seu aplicativo Quarkus pode usar a autenticação WebAuthn em vez de senhas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide demonstrates how your Quarkus application can use WebAuthn authentication instead of passwords.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia demonstra como seu aplicativo Quarkus pode usar a autenticação WebAuthn em vez de senhas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide demonstrates how your Quarkus application can use a .properties file to store your user identities.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia demonstra como seu aplicativo Quarkus pode usar um arquivo .properties para armazenar suas identidades de usuário.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide demonstrates how your Quarkus application can use a LDAP directory to store your user identities.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia demonstra como sua aplicação Quarkus pode usar um diretório LDAP para armazenar suas identidades de usuário.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide demonstrates how your Quarkus application can use a database to store your user identities.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia demonstra como seu aplicativo Quarkus pode usar um banco de dados para armazenar suas identidades de usuário.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide demonstrates how your Quarkus application can utilize SmallRye Reactive Messaging to consume and produce HTTP messages.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia demonstra como a sua aplicação Quarkus pode utilizar o SmallRye Reactive Messaging para consumir e produzir mensagens HTTP.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide demonstrates how your Quarkus application can utilize SmallRye Reactive Messaging to consume and produce messages via WebSockets.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia demonstra como sua aplicação Quarkus pode utilizar o SmallRye Reactive Messaging para consumir e produzir mensagens via WebSockets.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide demonstrates how your Quarkus application can utilize SmallRye Reactive Messaging to interact with AMQP.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia demonstra como sua aplicação Quarkus pode utilizar o SmallRye Reactive Messaging para interagir com o AMQP.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide demonstrates how your Quarkus application can utilize SmallRye Reactive Messaging to interact with Apache Kafka.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia demonstra como sua aplicação Quarkus pode utilizar o SmallRye Reactive Messaging para interagir com o Apache Kafka.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide demonstrates how your Quarkus application can utilize SmallRye Reactive Messaging to interact with RabbitMQ.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia demonstra como sua aplicação Quarkus pode utilizar o SmallRye Reactive Messaging para interagir com o RabbitMQ.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide demonstrates how your Quarkus application can utilize the Apache Kafka Streams API to implement stream processing applications based on Apache Kafka.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia demonstra como a sua aplicação Quarkus pode utilizar a API Apache Kafka Streams para implementar aplicações de processamento de fluxo baseadas no Apache Kafka.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide demonstrates how your Quarkus application can utilize the SmallRye Fault Tolerance extension.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia demonstra como sua aplicação Quarkus pode utilizar a extensão SmallRye Fault Tolerance.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide demonstrates how your Quarkus application can utilize the SmallRye Fault Tolerance specification through the SmallRye Fault Tolerance extension.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia demonstra como a sua aplicação Quarkus pode utilizar a especificação SmallRye Fault Tolerance através da extensão SmallRye Fault Tolerance.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide demonstrates how your Quarkus application can utilize the SmallRye Health extension.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia demonstra como sua aplicação Quarkus pode utilizar a extensão SmallRye Health.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide demonstrates how your Quarkus application can utilize the SmallRye Metrics extension.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia demonstra como sua aplicação Quarkus pode utilizar a extensão SmallRye Metrics.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains Funqy's Amazon Lambda HTTP binding.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica a associação HTTP do Amazon Lambda do Funqy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains Funqy's Amazon Lambda binding.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica a associação do Amazon Lambda do Funqy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains Funqy's Azure Functions HTTP binding.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica a associação HTTP do Azure Functions do Funqy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains Funqy's Google Cloud Platform Functions HTTP binding.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica a vinculação HTTP do Google Cloud Platform Functions da Funqy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains Funqy's Google Cloud Platform Functions binding.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica a vinculação do Google Cloud Platform Functions da Funqy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains Funqy's HTTP binding.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica a associação HTTP do Funqy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains Funqy's Knative Events binding.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica a associação Knative Events do Funqy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains basics of the Funqy framework, a simple portable cross-provider cloud function API.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica os conceitos básicos da estrutura Funqy, uma API de função de nuvem portátil simples entre provedores.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains how different beans can interact using the event bus.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica como diferentes beans podem interagir usando o barramento de eventos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains how to best measure the footprint of a Quarkus application.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica como medir melhor o rastro de uma aplicação Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains how to cache expensive method calls of your CDI beans using simple annotations.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica como armazenar em cache chamadas de método custosas de seus beans CDI usando anotações simples.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains how to centralize your logs with Logstash or Fluentd using the Graylog Extended Log Format (GELF).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica como centralizar seus logs com Logstash ou Fluentd usando o Graylog Extended Log Format (GELF).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains how to configure Quarkus to authenticate against well-known OpenID Connect providers such as GitHub, Google, Microsoft, Apple...</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica como configurar o Quarkus para se autenticar em provedores OpenID Connect bem conhecidos, como GitHub, Google, Microsoft, Apple...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains how to consume gRPC services in your Quarkus application.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica como consumir serviços gRPC na sua aplicação Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains how to deploy a Quarkus application to Google Cloud.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica como implantar um aplicativo Quarkus no Google Cloud.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains how to deploy a Quarkus application to Microsoft Azure Cloud.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica como implantar um aplicativo Quarkus na Nuvem do Microsoft Azure.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains how to implement gRPC services in your Quarkus application.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica como implementar serviços gRPC na sua aplicação Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains how to leverage SmallRye GraphQL Client to consume GraphQL services.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica como aproveitar o Cliente SmallRye GraphQL para consumir serviços GraphQL.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains how to leverage SmallRye GraphQL to implement GraphQL services.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica como aproveitar o SmallRye GraphQL para implementar serviços GraphQL.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains how to measure the test coverage of your Quarkus application.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica como medir a cobertura de teste da sua aplicação Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains how to migrate an application from RESTEasy Classic to RESTEasy Reactive.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica como migrar um aplicativo do RESTEasy Classic para o RESTEasy Reactive.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains how to start using gRPC in your Quarkus application.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica como começar a utilizar o gRPC na sua aplicação Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains how to use Blaze-Persistence to simplify your data and DTO layers.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica como usar o Blaze-Persistence para simplificar suas camadas de dados e DTO.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains how to use Kotlin.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica como usar o Kotlin.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains how to use OpenID Connect and OAuth2 Client and Filters to acquire, refresh and propagate access tokens.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica como usar clientes e filtros OpenID Connect e o OAuth2 para adquirir, atualizar e propagar tokens de acesso.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains how to use Sentry to monitor your application and be notified when exceptions occur.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica como usar o Sentry para monitorar sua aplicação e ser notificado quando ocorrerem exceções.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains how to use Vert.x in Quarkus to build reactive applications.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica como usar o Vert.x no Quarkus para criar aplicativos reativos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains how to use the OpenAPI extension to generate an OpenAPI descriptor and get a Swagger UI frontend to test your REST endpoints.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica como usar a extensão OpenAPI para gerar um descritor OpenAPI e obter um front-end da interface do usuário do Swagger para testar seus endpoints REST.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains how to use the REST Client Reactive in order to interact with REST APIs.
REST Client Reactive is the REST Client implementation compatible with RESTEasy Reactive.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica como usar o Cliente REST Reativo para interagir com as APIs REST. O Cliente REST Reativo é a implementação do Cliente REST compatível com o RESTEasy Reativo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains how to use the RESTEasy REST Client in order to interact with REST APIs (JSON and other) with very little effort.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica como utilizar o RESTEasy REST Client para interagir com APIs REST (JSON e outras) com muito pouco esforço.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains how to use the RESTEasy REST Client to send multipart REST requests, typically to upload documents.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica como usar o RESTEasy REST Client para enviar solicitações REST multipart, normalmente para carregar documentos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains how to use the RESTEasy Reactive REST Client.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica como utilizar o cliente RESTEasy Reactive REST.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains how you can access Git repositories with JGit.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica como você pode acessar repositórios Git com o JGit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains how you can deploy Quarkus-based Amazon Lambdas.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica como você pode implantar o Amazon Lambdas baseado em Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains how you can deploy Quarkus-based Google Cloud Functions.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica como você pode implantar o Google Cloud Functions baseado em Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains how you can deploy Vert.x Web, Servlet, or RESTEasy microservices as a Google Cloud Function.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica como você pode implantar microsserviços Vert.x Web, Servlet ou RESTEasy como uma função do Google Cloud.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains how you can deploy Vert.x Web, Servlet, or RESTEasy microservices as an Amazon Lambda.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica como você pode implantar microsserviços Vert.x Web, Servlet ou RESTEasy como um Amazon Lambda.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains how you can deploy Vert.x Web, Servlet, or RESTEasy microservices as an Azure Function.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica como você pode implantar microsserviços Vert.x Web, Servlet ou RESTEasy como uma Função do Azure.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains how you can use HashiCorp Vault for "encryption as a service".</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica como você pode usar o HashiCorp Vault para "criptografia como serviço".</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains how you can use HashiCorp Vault to securely store your credentials in Quarkus.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica como pode utilizar o HashiCorp Vault para armazenar de forma segura as suas credenciais no Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains how your Quarkus application can read configuration properties at runtime from Consul.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica como seu aplicativo Quarkus pode ler propriedades de configuração em tempo de execução do Consul.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains how your Quarkus application can utilize OAuth2 tokens to provide secured access to the JAX-RS endpoints.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica como a sua aplicação Quarkus pode utilizar tokens OAuth2 para fornecer acesso seguro aos pontos de extremidade JAX-RS.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains how your Quarkus application can utilize OpenTelemetry to provide distributed tracing for interactive web applications.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica como sua aplicação Quarkus pode utilizar o OpenTelemetry para fornecer rastreamento distribuído para aplicativos Web interativos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains how your Quarkus application can utilize OpenTracing to provide distributed tracing for
interactive web applications.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica como sua aplicação Quarkus pode utilizar o OpenTracing para fornecer rastreamento distribuído para aplicativos Web interativos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains how your Quarkus application can utilize OpenTracing to provide distributed tracing for interactive web applications.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica como sua aplicação Quarkus pode utilizar o OpenTracing para fornecer rastreamento distribuído para aplicativos Web interativos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains how your Quarkus application can utilize web sockets to create interactive web applications. Because it’s the canonical web socket application, we are going to create a simple chat application.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica como seu aplicativo Quarkus pode utilizar Websockets para criar aplicações web interativos. Como é um aplicativo websocket canônico, vamos criar um aplicativo de bate-papo simples.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains how your application can build, sign and/or encrypt JWT tokens with a fluent and configurable SmallRye JWT Build API.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica como sua aplicação pode construir, assinar e/ou criptografar tokens JWT com uma API SmallRye JWT Build fluente e configurável.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains how your application can utilize SmallRye JWT to verify JWT tokens and provide secured access to the JAX-RS endpoints.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica como seu aplicativo pode utilizar o SmallRye JWT para verificar tokens JWT e fornecer acesso seguro aos endpoints JAX-RS.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains logging and how to configure it.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica o registro em log e como configurá-lo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide explains the various methods supported by Quarkus to authenticate to your Vault.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica os vários métodos suportados pelo Quarkus para autenticar no seu Vault.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide has shown how you can interact with RabbitMQ using Quarkus.
It utilizes https://smallrye.io/smallrye-reactive-messaging[SmallRye Reactive Messaging] to build data streaming applications.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia mostrou como você pode interagir com o RabbitMQ usando o Quarkus. Ele utiliza o link:https://smallrye.io/smallrye-reactive-messaging[SmallRye Reactive Messaging] para criar aplicativos de streaming de dados.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide is a brief introduction to some reactive features offered by Quarkus.
Quarkus is a reactive framework, and so offers a lot of reactive features.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia é uma breve introdução a alguns recursos reativos oferecidos pelo Quarkus. O Quarkus é um framework reativo e, portanto, oferece muitos recursos reativos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide is a collection of tips to help you solve the problems you encounter when compiling applications to native executable.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia é uma coleção de dicas para ajudá-lo a resolver os problemas encontrados ao compilar aplicativos para executável nativo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide is not an in-depth article about what _Reactive_ is and how Quarkus enables reactive architectures.
If you want to read more about these topics, refer to the xref:quarkus-reactive-architecture.adoc[Reactive Architecture guide], which provides an overview of the Quarkus reactive ecosystem.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia não é um artigo detalhado sobre o que é _Reativo_ e como o Quarkus permite arquiteturas reativas. Se quiser ler mais sobre esses tópicos, consulte o xref:quarkus-reactive-architecture.adoc[guia de Arquitetura Reativa] , que fornece uma visão geral do ecossistema reativo do Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide is the entry point for everything security in Quarkus.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia é o ponto de entrada para tudo o que diz respeito à segurança em Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide takes as input the application developed in the xref:getting-started.adoc[Getting Started Guide].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia utiliza como base a aplicação desenvolvida no  link:getting-started.html[Guia de Iniciação].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide walks you through generating an example Java project via a maven archetype and deploying it to AWS.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia orienta-o na geração de um projeto Java de exemplo através de um arquétipo maven e na sua implementação na AWS.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide walks you through the process of creating a Quarkus application with OptaPlanner's constraint solving Artificial Intelligence (AI).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia orienta você pelo processo de criação de um aplicativo Quarkus com a Inteligência Artificial (IA) de resolução de restrições do OptaPlanner.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guide will help you with:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia vai ajudá-lo a:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guides covers the usage of LRA to coordinate activities across services.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia abrange o uso do LRA para coordenar atividades entre serviços.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guides covers the usage of Software Transactional Memory (STM).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia aborda o uso da Memória Transacional de Software (STM).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This guides explains how to use the Vault credentials provider or implement your own custom one.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia explica como usar o provedor de credenciais do Vault ou implementar seu próprio provedor personalizado.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This handler is a bridge between the lambda runtime and the Quarkus HTTP framework you are using (Jakarta REST, Servlet, etc.)</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este handler é uma ponte entre o tempo de execução do lambda e a estrutura HTTP do Quarkus que está a utilizando (Jakarta REST, Servlet, etc.)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This index is created by default on the project on which Quarkus is configured for, thanks to our Maven and Gradle plugins.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este índice é criado por padrão no projeto para o qual o Quarkus está configurado, graças aos nossos queridos plugins Maven e Gradle.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This information is not static per library (e.g. Hibernate) but the framework has the semantic knowledge and knows which classes need to have reflection (for example @Entity classes)</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Esta informação não é estática por biblioteca (por exemplo, Hibernate), mas o framework tem o conhecimento semântico e sabe quais as classes que precisam ter reflexão (por exemplo, classes @Entity)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This interceptor is applied to all injected gRPC clients.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este interceptor é aplicado a todos os clientes gRPC injectados.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This is a very flexible mechanism.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Trata-se de um mecanismo muito flexível.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This is also validated.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Isto também é validado.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This is an in-depth documentation, see the xref:building-my-first-extension.adoc[building my first extension] if you need an introduction.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Esta é uma documentação aprofundada, consulte a seção xref:building-my-first-extension.adoc[construindo minha primeira extensão] se precisar de uma introdução.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This is application dependent and cannot really be shared in the library itself</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Isto depende da aplicação e não pode ser realmente compartilhado na própria biblioteca</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This is helpful for both Java developers who are used to working with the imperative model and don’t want to switch things up, and those working with a cloud-native/reactive approach. The Quarkus development model can adapt itself to whatever app you’re developing.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Isso é útil tanto para desenvolvedores Java que estão acostumados a trabalhar com o modelo imperativo e não querem mudar as coisas, quanto para aqueles que trabalham com uma abordagem nativa/reativa na nuvem. O modelo de desenvolvimento do Quarkus pode adaptar-se a qualquer aplicação que você esteja desenvolvendo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This is the `quarkus-extension.yaml` template of the `quarkus-agroal` extension, you can use it as an example:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este é o modelo `quarkus-extension.yaml` da extensão `quarkus-agroal`. Pode utilizá-lo como exemplo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This is the first phase, and is done by the xref:build-step-processors[Build Step Processors]. These processors have access to Jandex annotation
information and can parse any descriptors and read annotations, but should not attempt to load any application classes. The output of these
build steps is some recorded bytecode, using an extension of the ObjectWeb ASM project called Gizmo(ext/gizmo), that is used to actually bootstrap the application at runtime.
Depending on the `io.quarkus.deployment.annotations.ExecutionTime` value of the `@io.quarkus.deployment.annotations.Record` annotation associated with the build step,
the step may be run in a different JVM based on the following two modes.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Essa é a primeira fase e é realizada pelos xref:build-step-processors[Processadores da Etapa de Construção]. Esses processadores têm acesso às informações de anotação do Jandex e podem analisar qualquer descritor e ler anotações, mas não devem tentar carregar nenhuma classe de aplicação. O resultado dessas etapas de construção é um bytecode gravado, usando uma extensão do projeto ObjectWeb ASM chamado Gizmo(ext/gizmo), que é usado para inicializar o aplicativo em tempo de execução. Dependendo do valor `io.quarkus.deployment.annotations.ExecutionTime` da anotação `@io.quarkus.deployment.annotations.Record` associada à etapa de construção, a etapa pode ser executada em uma JVM diferente com base nos dois modos a seguir.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This is the less sophisticated extension.
It consists of a set of patches to make sure a library runs on GraalVM.
If possible, contribute these patches upstream, not in extensions.
Second best is to write Substrate VM substitutions, which are patches applied during native image compilation.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Essa é a extensão menos sofisticada. Ela consiste em um conjunto de patches para garantir que uma biblioteca seja executada no GraalVM. Se possível, contribua com esses patches na fonte original, não em extensões. A segunda melhor opção é escrever substituições de Substrate VM, que são patches aplicados durante a compilação da imagem nativa.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This means that metadata is only processed once at build time, which both saves on startup time, and also on memory
usage as the classes etc that are used for processing are not loaded (or even present) in the runtime JVM.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Isso significa que os metadados são processados apenas uma vez no momento da construção, o que economiza no tempo de inicialização e também no uso da memória, pois as classes etc usadas para o processamento não são carregadas (ou mesmo presentes) na JVM em tempo de execução.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This method (not provided in this example) would generate the class using the ASM API.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este método (não fornecido neste exemplo) geraria a classe utilizando a API ASM.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This method adds a new class file to the deployment. The source that is used will be the original source that is part
of the current project.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Esse método adiciona um novo arquivo de classe à implantação. A fonte usada será a fonte original que faz parte do projeto atual.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This method adds a new static resource</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este método adiciona um novo recurso estático</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This method allows you to modify the source of a class file. The old source is passed into the function, and the updated
source is returned.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Esse método permite que você modifique o código-fonte de um arquivo de classe. O código-fonte antigo é passado para a função e o código-fonte atualizado é retornado.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This method directly invokes the health check Servlet and verifies the response</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este método invoca diretamente o Servlet de verificação de integridade e verifica a resposta</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This method modifies a static resource</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este método modifica um recurso estático</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This method uses the injected health check bean to verify it is returning the expected result</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este método usa o bean de verificação de integridade injetado para verificar se está devolvendo o resultado esperado</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This mode uses the `--origins` format by default.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>This mode uses the `--origins` format by default.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This only registers the implementation classes for instantiation via reflection (you will not be able
to inspect its fields and methods). If you need to do that, you can do it this way:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Isso apenas registra as classes de implementação para instanciação por meio de reflexão (você não poderá inspecionar seus campos e métodos). Se você precisar fazer isso, pode fazê-lo dessa forma:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This page explains how to deploy your gRPC service in Quarkus in Kubernetes.
We'll continue with the example from xref:grpc-getting-started.adoc[the Getting Started gRPC guide].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Esta página explica como implantar seu serviço gRPC no Quarkus no Kubernetes. Continuaremos com o exemplo do xref:grpc-getting-started.adoc[guia Iniciando com gRPC] .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This page explains how to enable xDS gRPC usage in your Quarkus application.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Esta página explica como habilitar o uso do gRPC xDS em sua aplicação Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This page explains how to start using gRPC in your Quarkus application.
While this page describes how to configure it with Maven, it is also possible to use Gradle.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Esta página explica como começar a usar o gRPC na sua aplicação Quarkus. Embora esta página descreva como configurá-lo com o Maven, também é possível usar o Gradle.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This part has nothing to do with GraalVM, it is how Quarkus starts frameworks “at build time”</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Esta parte não tem nada a ver com o GraalVM, é a forma como o Quarkus inicia os frameworks "no momento da construção"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This pattern has multiple advantages, such as:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este padrão tem várias vantagens, tais como:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This plugin is still experimental, it does not validate the extension dependencies as the equivalent Maven plugin does.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este plugin ainda é experimental, não valida as dependências da extensão como faz o plugin Maven equivalente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This producer is used to build the application to be tested. It uses Shrinkwrap to create a JavaArchive to test</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este produtor é usado para construir a aplicação a ser testada. Ele usa o Shrinkwrap para criar um JavaArchive para testar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This property only works during a normal production build (i.e. not for dev mode/tests) and when `fast-jar` packaging type is used (the default behavior).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Esta propriedade só funciona durante uma construção de produção normal (ou seja, não para o modo de desenvolvimento/testes) e quando o tipo de empacotamento `fast-jar` é usado (o comportamento padrão).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This recorder method results in an invocation upon the `Foo` bean instance and thus we need to make sure that the build step is executed after all synthetic beans are initialized.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este método de gravação resulta numa invocação da instância do bean `Foo` e, por isso, temos de nos certificar de que a etapa de construção é executada depois de todos os beans sintéticos serem inicializados.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This reference guide explains how to develop command line applications with Quarkus.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia de referência explica como desenvolver aplicações de linha de comandos com o Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This reference guide explains in more details the configuration and usage of the Quarkus Mailer.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia de referência explica com mais detalhes a configuração e o uso do Quarkus Mailer.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This reference guide provides advanced details about the usage and the configuration of the Vert.x instance used by Quarkus.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia de referência fornece detalhes avançados sobre o uso e a configuração da instância Vert.x usada pelo Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This reference guide provides an in-depth look on Apache Kafka and Smallrye Reactive Messaging framework.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este guia de referência fornece uma visão detalhada da estrutura Apache Kafka e Smallrye Reactive Messaging.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This same SPI can also be used to provide a custom annotation that will substitute for `@RecordableConstructor`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este mesmo SPI também pode ser utilizado para fornecer uma anotação personalizada que substituirá `@RecordableConstructor`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This section is a work in progress and gathers the philosophy under which extensions should be designed and written.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Esta seção é um trabalho em curso e reúne a filosofia segundo a qual as extensões devem ser concebidas e escritas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This section shows how to replace your client with a mock. If you would like to get a more in-depth understanding of how mocking works in Quarkus, see the blog post on https://quarkus.io/blog/mocking/[Mocking CDI beans].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Esta seção mostra como substituir o seu cliente por uma simulação. Se pretender obter uma compreensão mais aprofundada de como funciona a simulação no Quarkus, consulte a publicação do blog sobre a https://quarkus.io/blog/mocking/[simulação de beans CDI].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This setting should not be used in production as it will disable the SSL hostname verification.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Esta definição não deve ser utilizada em produção, uma vez que irá desativar a verificação do nome do host SSL.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This starts the deployment, your test can modify it as part of the test suite. Quarkus will be restarted between
each test method so every method starts with a clean deployment.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Isso inicia a implantação, e seu teste pode modificá-la como parte do conjunto de testes. O Quarkus será reiniciado entre cada método de teste para que cada método comece com uma implantação limpa.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This technology is considered {extension-status}.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Essa tecnologia é considerada {extension-status}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This tells JUnit that the Quarkus deployment should fail with a specific exception</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Isto diz ao JUnit que a implantação do Quarkus deve falhar com uma exceção específica</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This transitively adds `io.quarkus:quarkus-grpc` extension dependency.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Isso adiciona de forma transitiva a dependência da extensão `io.quarkus:quarkus-grpc`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This value expression is using the https://en.wikipedia.org/wiki/Elvis_operator[elvis operator] - if the name is null the default value is used.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Esta expressão de valor está utilizando o  link:https://en.wikipedia.org/wiki/Elvis_operator[operador el] vis - se o nome for nulo, é utilizado o valor predefinido.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This way, extensions can turn classes, that would be otherwise ignored, into beans and vice versa.
For example, a class that declares a `@Scheduled` method is always registered as a bean even if it is not annotated with a bean defining annotation and would be normally ignored.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Dessa forma, as extensões podem transformar classes, que de outra forma seriam ignoradas, em beans e vice-versa. Por exemplo, uma classe que declara um método `@Scheduled` é sempre registrada como um bean, mesmo que não tenha sido anotada com uma anotação de definição de bean e, normalmente, seria ignorada.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This website is licensed under the [Creative Commons Attribution 3.0](https://creativecommons.org/licenses/by/3.0/).
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Este website é licenciado pela [Creative Commons Attribution 3.0](https://creativecommons.org/licenses/by/3.0/).
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This will add a section documentation for the `configGroup` config item in the generated documentation. The section
title and introduction will be derived from the javadoc of the configuration item. The first sentence from the javadoc
is considered as the section title and the remaining sentences used as section introduction.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Isso adicionará uma seção de documentação para o item de configuração `configGroup` na documentação gerada. O título e a introdução da seção serão derivados do javadoc do item de configuração. A primeira frase do javadoc é considerada como o título da seção e as frases restantes são usadas como a introdução da seção.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This will add the following to your `pom.xml`:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Isso adicionará o seguinte ao seu arquivo  `pom.xml`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This will add the following to your build file:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Isto irá adicionar o seguinte trecho no seu arquivo de build:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This will also listen for a debugger on port `5005`. If you want to wait for the debugger to attach before running you
can pass `-Dsuspend` on the command line. If you don't want the debugger at all you can use `-Ddebug=false`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Isso também escutará um depurador na porta `5005` . Se quiser aguardar a conexão do depurador antes de executá-lo, você pode passar `-Dsuspend` na linha de comando.
Se você não quiser o depurador, pode usar `-Ddebug=false` .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This will compile and package your code.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Isto irá compilar e empacotar o seu código.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This will generate a configuration map key named `quarkus.some."cache-name"` instead of `quarkus.some."namespace"`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Isto irá gerar uma chave de mapa de configuração com o nome `quarkus.some."cache-name"` em vez de `quarkus.some."namespace"`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This will work as expected, but if you try to read this InputStream object in a custom exception mapper, you will receive a `BlockingNotAllowedException` exception. This is because `ResponseExceptionMapper` classes are run on the Event Loop thread executor by default - which does not allow to perform IO operations.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Isso funcionará como esperado, mas se você tentar ler esse objeto InputStream em um mapeador de exceções personalizado, receberá uma exceção `BlockingNotAllowedException`. Isso ocorre porque as classes `ResponseExceptionMapper` são executadas no executor de thread do Loop de Eventos por padrão - o que não permite realizar operações de E/S.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Thread safety: only one thread can access the object stored in the thread local - preventing concurrent accesses.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Segurança da thread: apenas uma thread pode acessar o objeto armazenado na thread local - prevenindo acessos concorrentes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Three Phases of Bootstrap and Quarkus Philosophy</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Três Fases do Bootstrap e Filosofia do Quarkus</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Three development and execution models</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Três modelos de desenvolvimento e execução</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>TieredCompilation</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Compilação em camadas</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Timeout of unacked messages</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Tempo limite de mensagens não acked</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Timers measure short-duration latencies and how often they occur. Negative values are not supported, and longer durations could cause an overflow of the total time (Long.MAX_VALUE nanoseconds (292.3 years)).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Timers measure short-duration latencies and how often they occur. Negative values are not supported, and longer durations could cause an overflow of the total time (Long.MAX_VALUE nanoseconds (292.3 years)).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To add any of the installable plugins, use `quarkus plugin add &lt;name or location&gt;`:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>To add any of the installable plugins, use `quarkus plugin add &lt;name or location&gt;`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To better understand the contrast, we need to explain the difference between the reactive and imperative execution models.
It's essential to comprehend that _Reactive_ is not just a different execution model, but that distinction is necessary to understand this guide.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para entender melhor o contraste, precisamos explicar a diferença entre os modelos de execução reativo e imperativo. É essencial compreender que o _Reativo_ não é apenas um modelo de execução diferente, mas essa distinção é necessária para entender este guia.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To build your project using the Quarkus CLI (using the default configuration in this example):</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>To build your project using the Quarkus CLI (using the default configuration in this example):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To complete this guide, you need:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para concluir este guia, você precisa:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To containerize your Quarkus application that use `@RunOnVirtualThread`, add the following properties in your `application.properties`:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para conteinerizar a sua aplicação Quarkus que utiliza `@RunOnVirtualThread`, adicione as seguintes propriedades ao seu `application.properties`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To create a Gradle project, add the `--gradle` or `--gradle-kotlin-dsl` option.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para criar um projeto Gradle, adicione a opção `--gradle` ou `--gradle-kotlin-dsl`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To create a Gradle project, add the `-DbuildTool=gradle` or `-DbuildTool=gradle-kotlin-dsl` option.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para criar um projeto Gradle, adicione a opção '-DbuildTool=gradle' ou '-DbuildTool=gradle-kotlin-dsl'.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To create a lambda container image that uses the native executable we'll need to do things a little differently. In this case, we won't need to use the `java:11` base image from AWS, but instead we'll use a special image that assumes that the runtime environment for the lambda is provided. The example below creates such a container. It assumes that a Maven build has been executed (such as `mvn package -Dnative=true`) and has generated the native binary into the `target/` directory. The binary needs to be named `bootstrap` and be placed in `/var/runtime/`:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para criar uma imagem de contêiner lambda que use o executável nativo, precisaremos fazer as coisas de forma um pouco diferente. Nesse caso, não precisaremos usar a imagem base `java:11` da AWS, mas, em vez disso, usaremos uma imagem especial que assume que o ambiente runtime para o lambda é fornecido. O exemplo abaixo cria esse contêiner. Ele assume que uma compilação Maven foi executada (como `mvn package -Dnative=true`) e gerou o binário nativo no diretório `target/`. O binário precisa ser nomeado `bootstrap` e ser colocado em `/var/runtime/`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To create the _processor_ project, from the same directory, run:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para criar o projeto _do processor_, a partir do mesmo diretório, execute:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To create the _producer_ project, in a terminal run:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para criar o projeto _producer_, em um terminal, execute:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To define your own metrics from scratch, you have two basic options: Use the generic `MetricFactory` builders, or follow the binder pattern, and create instrumentation specific to the enabled metrics extension.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para definir suas próprias métricas do zero, você tem duas opções básicas: Usar os construtores genéricos do `MetricFactory` ou seguir o padrão binder e criar instrumentação específica para a extensão de métricas habilitada.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To deploy a native executable, you must build it with GraalVM.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para fazer o deploy de um executável nativo, é necessário compilá-lo com o GraalVM.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To deploy to AWS Lambda:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para fazer o deploy no AWS Lambda:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To disable the SSL hostname verification for a specific REST client, add the following property to your configuration:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para desabilitar a verificação do nome do host SSL para um cliente REST específico, adicione a seguinte propriedade à sua configuração:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To disable the gRPC client metrics when `quarkus-micrometer` is used, add the following property to the application configuration:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para desativar as métricas do cliente gRPC quando se utiliza `quarkus-micrometer`, adicione a seguinte propriedade à configuração da aplicação:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To do this, first create a directory `src/main/zip.native/` with your build.  Next create a shell script file called `bootstrap`
within `src/main/zip.native/`, like below. An example is created automatically in your build folder (target or build), called `bootstrap-example.sh`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para fazer isso, primeiro crie um diretório `src/main/zip.native/` com sua compilação. Em seguida, crie um arquivo de script de shell chamado `bootstrap` dentro de `src/main/zip.native/`, como abaixo. Um exemplo é criado automaticamente em sua pasta de compilação (target ou build), chamado `bootstrap-example.sh`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To enable TLS, use the following configuration.
Note that all paths in the configuration may either specify a resource on the classpath
(typically from `src/main/resources` or its subfolder) or an external file.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para habilitar o TLS, use a seguinte configuração. Lembre-se de que todos os caminhos na configuração podem especificar um recurso no classpath (geralmente em `src/main/resources` ou de sua subpasta) ou um arquivo externo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To enable client xDS, use the following configuration.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para ativar o xDS do cliente, utilize a seguinte configuração:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To enable server xDS, use the following configuration.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para habilitar o servidor xDS, utilize a seguinte configuração:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To enable this security feature, add this to your `application.properties` file:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para ativar esta funcionalidade de segurança, adicione isto ao seu arquivo `application.properties`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To enable this strategy, configure the channel with:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>To enable this strategy, configure the channel with:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To extract the required ssl, you must start up a Docker container in the background, and attach to that container to copy the artifacts.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para extrair o ssl necessário, você deve iniciar um contêiner Docker em segundo plano e anexar a esse contêiner para copiar os artefatos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To facilitate the configuration, you can use the `@RegisterRestClient` `configKey` property that allows to use different configuration root than the fully qualified name of your interface.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para facilitar a configuração, você pode utilizar a propriedade `configKey` de `@RegisterRestClient` que permite utilizar uma raiz de configuração diferente do nome totalmente qualificado da sua interface.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To fully customize the Vert.x HTTP Client instance that the REST Client Reactive is internally using, you can provide your custom HTTP Client Options instance via CDI or when programmatically creating your client.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para personalizar totalmente a instância do Cliente HTTP Vert.x que o Cliente REST Reativo está usando internamente, você pode fornecer a sua instância personalizada de Opções de Cliente HTTP através de CDI ou ao criar programaticamente o seu cliente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To fully enable the close world assumptions that Quarkus can optimize best, it is better to consider configuration options as build time settled vs overridable at runtime.
Of course properties like host, port, password should be overridable at runtime.
But many properties like enable caching or setting the JDBC driver can safely require a rebuild of the application.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para habilitar totalmente as suposições de mundo fechado que o Quarkus pode otimizar melhor, é melhor considerar as opções de configuração como estabelecidas no tempo de construção em vez de substituíveis no tempo de execução. É claro que propriedades como host, porta e senha devem ser substituíveis em tempo de execução. Mas muitas propriedades, como ativar o armazenamento em cache ou definir o driver JDBC, podem exigir com segurança uma reconstrução do aplicativo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To generate a configuration section of a given group, use the `@ConfigDocSection` annotation:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para gerar uma seção de configuração de um determinado grupo, use a anotação `@ConfigDocSection`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To generate the documentation:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para gerar a documentação:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To get hold of these, simply query the extension context object for given key.
Note that these metadata are made available as build proceeds which means that extensions can only leverage metadata that were built before the extensions are invoked.
If your extension attempts to retrieve metadata that wasn't yet produced, `null` will be returned.
Here is a summary of which extensions can access which metadata:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para obtê-los, basta consultar o objeto de contexto da extensão para uma determinada chave. Observe que esses metadados são disponibilizados à medida que a construção avança, o que significa que as extensões só podem aproveitar os metadados que foram criados antes das extensões serem invocadas. Se sua extensão tentar recuperar metadados que ainda não foram produzidos, será retornado `null` . Aqui está um resumo de quais extensões podem acessar quais metadados:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To get started with security in Quarkus, consider combining the Quarkus built-in Basic HTTP authentication with the Jakarta Persistence identity provider to enable role-based access control (RBAC).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para começar a utilizar o security no Quarkus, considere a possibilidade de combinar a autenticação HTTP básica integrada no Quarkus com o Jakarta Persistence identity provider para permitir o role-based access control(RBAC).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To get the full power of the reactive nature of the client, you can use the non-blocking flavor of REST Client Reactive extension,
which comes with support for `CompletionStage` and `Uni`.
Let's see it in action by adding a `getByIdAsync` method in our `ExtensionsService` REST interface. The code should look like:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para obter todo o poder da natureza reativa do cliente, você pode usar a variante não blocante da extensão Cliente REST Reativo, que vem com suporte para `CompletionStage` e `Uni` . Vamos ver isso em ação adicionando um método `getByIdAsync` em nossa interface REST `ExtensionsService` . O código deve ter a seguinte aparência:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To include only a specific config group:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para incluir apenas um grupo de configuração específico:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To include the generated configuration reference documentation in a guide, use:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para incluir a documentação de referência de configuração gerada num guia, use:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To increment a value, run the following command:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para incrementar um valor, execute o seguinte comando:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To learn more about Qute, please refer to the xref:qute-reference.adoc[Qute reference guide].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para saber mais sobre a Qute, consulte o  link:qute-reference.html[guia de referência da Qute].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To learn more about the Quarkus Redis extension, check xref:redis-reference.adoc[the Redis extension reference guide].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para saber mais sobre a extensão Quarkus Redis, consulte xref:redis-reference.adoc[o guia de referência da extensão Redis].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To learn more about the internal design and choices, check the https://dl.acm.org/doi/10.1145/3583678.3596895[Considerations for integrating virtual threads in a Java framework: a Quarkus example in a resource-constrained environment] paper.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para saber mais sobre o design interno e as escolhas, consulte o documento https://dl.acm.org/doi/10.1145/3583678.3596895[Considerações sobre a integração de threads virtuais numa estrutura Java: um exemplo Quarkus num ambiente com recursos limitados].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To make the simple experience easiest, unify the configuration in `application.properties` via SmallRye Config.
Avoid library specific configuration files, or at least make them optional: e.g. `persistence.xml` for Hibernate ORM is optional.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para tornar a experiência simples mais fácil, unifique a configuração em `application.properties` por meio do SmallRye Config. Evite arquivos de configuração específicos de bibliotecas ou, pelo menos, torne-os opcionais: por exemplo, `persistence.xml` para Hibernate ORM é opcional.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To make your exception mapper blocking, you can annotate the exception mapper with the `@Blocking` annotation:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para tornar o seu mapeador de exceções blocante, pode anotar o mapeador de exceções com a anotação `@Blocking`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To mirror the AWS Lambda environment as closely as possible in a dev environment,
the Quarkus AWS Lambda extension boots up a mock AWS Lambda event server in Quarkus Dev and Test mode.
This mock event server simulates a true AWS Lambda environment.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para espelhar o ambiente do AWS Lambda o mais próximo possível em um ambiente de desenvolvimento, a extensão do Quarkus AWS Lambda inicializa um servidor de eventos simulado do AWS Lambda no modo de desenvolvimento e teste do Quarkus. Esse servidor de eventos simulado simula um verdadeiro ambiente do AWS Lambda.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To optimize your application for Lambda SnapStart, check xref:amazon-snapstart.adoc[the SnapStart Configuration Documentation].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para otimizar a sua aplicação para o Lambda SnapStart, consulte  link:amazon-snapstart.html[a documentação de configuração do SnapStart].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To optimize your application for Lambda SnapStart, check xref:aws-lambda-snapstart.adoc[the SnapStart Configuration Documentation].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para otimizar a sua aplicação para o Lambda SnapStart, consulte a link:amazon-snapstart.html[documentação de configuração do SnapStart].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To retrieve an increment using its key, we will have to run the below command:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para recuperar um incremento utilizando a sua chave, teremos de executar o comando abaixo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To run the application, don’t forget to start a database and provide the configuration to your application.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para executar a aplicação, não se esqueça de iniciar uma base de dados e de fornecer a configuração à sua aplicação.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To run your applications as native, first we need to build the native executables:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para executar as suas aplicações como nativas, primeiro precisaremos construir os executáveis nativos:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To see the `GreetingResourceIT` run against the native executable, use `./mvnw verify -Dnative`:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para ver o `GreetingResourceIT` ser executado no executável nativo, utilize `./mvnw verify -Dnative`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To see the `usage` statement, and validate AWS configuration:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para ver a declaração `usage` e validar a configuração da AWS:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To see the list of current increments keys, run the following command:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para ver a lista de chaves de incrementos atuais, execute o seguinte comando:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To send data as a multipart form, you can just use the regular `@RestForm` (or `@FormParam`) annotations:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para enviar dados como um formulário multi-partes, você pode simplesmente utilizar as anotações normais `@RestForm` (ou `@FormParam`):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To set headers for a gRPC call, create a client with headers attached and then perform the call on this client:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para definir cabeçalhos para uma chamada gRPC, crie um cliente com cabeçalhos anexados e, em seguida, realize a chamada neste cliente:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To specify a value for `${header.value}`, simply put the following in your `application.properties`:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para especificar um valor para `${header.value}`, basta colocar o seguinte no seu `application.properties`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To start dev mode from the Quarkus CLI, use the `dev` command:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>To start dev mode from the Quarkus CLI, use the `dev` command:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To test asynchronous methods, add the test method below in `ExtensionsResourceTest`:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para testar métodos assíncronos, adicione o método de teste abaixo em `ExtensionsResourceTest`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To turn off the mock event server:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para desativar o mock event server:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To use Alexa with Quarkus native, you need to use the https://github.com/quarkiverse/quarkus-amazon-alexa[Quarkus Amazon Alexa extension hosted at the Quarkiverse Hub].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para utilizar a Alexa com o Quarkus nativo, é necessário utilizar a link:https://github.com/quarkiverse/quarkus-amazon-alexa[extensão Quarkus Amazon Alexa do Quarkiverse Hub].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To use AsciiDoc, the Javadoc comment must be annotated with `@asciidoclet` tag. This tag serves two purposes: it is
used as a marker for Quarkus generation tool, but it is also used by the `javadoc` process for the Javadoc generation.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para usar o AsciiDoc, o comentário do Javadoc deve ser anotado com a tag `@asciidoclet` . Essa tag tem duas finalidades: é usada como um marcador para a ferramenta de geração Quarkus, mas também é usada pelo processo `javadoc` para a geração do Javadoc.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To use GraalVM CE instead of Mandrel, update the `FROM` clause to: `FROM quay.io/quarkus/ubi-quarkus-graalvmce-builder-image:{graalvm-flavor} AS build`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para usar o GraalVM CE em vez do Mandrel, atualize o trecho `FROM` para: `FROM quay.io/quarkus/ubi-quarkus-graalvmce-builder-image:{graalvm-flavor} AS build`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To use TLS with mutual authentication, use the following configuration:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para utilizar o TLS com autenticação mútua, utilize a seguinte configuração:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To use the extension-agnostic `MetricFactory` API, your processor can define a `BuildStep` that produces a `MetricsFactoryConsumerBuildItem` that uses a `RUNTIME_INIT` or `STATIC_INIT` Recorder to define a `MetricsFactory` consumer.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para utilizar a API `MetricFactory` agnóstica em termos de extensão, o seu processador pode definir um `BuildStep` que produz um `MetricsFactoryConsumerBuildItem` que usa um Gravador `RUNTIME_INIT` ou `STATIC_INIT` para definir um consumidor `MetricsFactory`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To verify your setup, that you have the AWS CLI installed, executed aws configure for the AWS access keys,
and set up the `LAMBDA_ROLE_ARN` environment variable (as described above), please execute `manage.sh` without any parameters.
A usage statement will be printed to guide you accordingly.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para verificar a configuração, se você tem a AWS CLI instalada, se executou o aws configure para as chaves de acesso da AWS, e configurou a variável de ambiente `LAMBDA_ROLE_ARN` (conforme descrito acima), execute `manage.sh` sem nenhum parâmetro. Uma declaração de uso será impressa para orientá-lo adequadamente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To work around the current known issue of link:https://issues.redhat.com/browse/AG-209[Agroal having a different view on running transaction checks], set the datasource transaction type for the datasource responsible for writing the transaction logs to `disabled`:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para contornar o problema conhecido atual de link:https://issues.redhat.com/browse/AG-209[Agroal tendo uma exibição diferente sobre a execução de verificações de transação], defina o tipo de transação de fonte de dados para a fonte de dados responsável por gravar os logs de transação como 'disabled':</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To write duration values, use the standard `java.time.Duration` format.
See the link:https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/time/Duration.html#parse(java.lang.CharSequence)[Duration#parse() javadoc] for more information.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para valores de duração, use o formato padrão 'java.time.Duration'.  Consulte o link:https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/time/Duration.html#parse(java.lang.CharSequence)[Duration#parse() javadoc] para obter mais informações.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>To write duration values, use the standard `java.time.Duration` format.  See the link:https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/time/Duration.html#parse(java.lang.CharSequence)[Duration#parse() javadoc] for more information.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Para valores de duração, use o formato padrão 'java.time.Duration'.  Consulte o link:https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/time/Duration.html#parse(java.lang.CharSequence)[Duration#parse() javadoc] para obter mais informações.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Today’s users embrace applications with milliseconds of response time, 100% uptime, lower latency, push data instead of pull, higher throughput, and elasticity. However, these features are nearly impossible to achieve using yesterday’s software architecture without a considerable investment in resources, infrastructure, and tooling. The world changed, and having dozens of servers, long response times (&amp;gt; 500 ms), downtime due to maintenance or waterfalls of failures does not meet the expected user experience.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os usuários de hoje adotam aplicações com milissegundos de tempo de resposta, disponibilidade de 100%, menor latência, dados por push em vez de pull, maior taxa de transferência e elasticidade. No entanto, esses recursos são quase impossíveis de alcançar usando a arquitetura de software de ontem sem um investimento considerável em recursos, infraestrutura e ferramentas. O mundo mudou, e ter dezenas de servidores, longos tempos de resposta (&amp;gt; de 500 ms), tempo de inatividade devido a manutenção ou cascatas de falhas não atende à experiência esperada do usuário.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Tooling</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Ferramentas</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Topic auto discovery period when using a pattern for topic's consumer.

The default and minimum value is 1 minute.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Período de descoberta automática de tópicos ao usar um padrão para o consumidor do tópico.

O valor padrão e mínimo é 1 minuto.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Topic name</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Nome do tópico</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Topic pattern</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Padrão de tópico</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Tracing &amp; Debugging</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Rastreamento &amp; Depuração</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Tracing with AWS XRay and GraalVM</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Tracing com AWS XRay e GraalVM</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Traditional Java stacks were engineered for monolithic applications with long startup times and large memory requirements in a world where the cloud, containers, and Kubernetes did not exist. Java frameworks needed to evolve to meet the needs of this new world.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>As stacks Java tradicionais foram projetadas para aplicativos monolíticos com longos tempos de inicialização e grandes requisitos de memória em um mundo em que a nuvem, os contêineres e o Kubernetes não existiam. Os frameworks Java precisavam evoluir para atender às necessidades desse novo mundo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Transactional and Idempotent producers support</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Suporte aos producers transacionais e idempotentes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Trigger the inclusion on additional extensions based on certain conditions.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Acione a inclusão de extensões adicionais com base em determinadas condições.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Triggering Live Reload</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Ativando o Recarregamento ao Vivo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Troubleshooting / Debugging Tips</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Dicas de Resolução de Problemas / Depuração</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Tutorials</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Tutoriais</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Tutorials are _lessons_ that take the reader by the hand through a series of steps to complete a project of some kind. Tutorials are _learning-oriented_.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os tutoriais são _lições_ que levam o leitor pela mão através de uma série de passos para completar um projeto de algum tipo. Os tutoriais são _orientados para a aprendizagem_.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Type</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Tipo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Type-safe templates</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Type-safe templates(Templates com tipos seguros)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Typically, one is loading a configuration to create some runtime component/service as `parseServiceXmlConfig` is doing. We will come back to the rest of the behavior in `parseServiceXmlConfig` in the following xref:manage-non-cdi-service[Manage Non-CDI Service] section.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Normalmente, está se carregando uma configuração para criar algum componente/serviço de tempo de execução, como `parseServiceXmlConfig` está fazendo. Voltaremos ao restante do comportamento em `parseServiceXmlConfig` na seguinte seção xref:#manage-non-cdi-service[Gerenciar Serviço Não CDI].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>UBI images can be used without any limitations.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>As imagens UBI podem ser utilizadas sem qualquer limitações.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>URL of proxy service. proxyServiceUrl and proxyProtocol must be mutually inclusive.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>URL do serviço de proxy. proxyServiceUrl e proxyProtocol devem ser mutuamente inclusivos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Under no circumstances can the runtime module depend on a deployment artifact. This would result
in pulling all the deployment time code into runtime scope, which defeats the purpose of having the split.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Em nenhuma circunstância o módulo de tempo de execução pode depender de um artefato de implantação. Isso resultaria em puxar todo o código de tempo de implantação para o escopo de tempo de execução, o que anula o objetivo de ter a divisão.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Understanding the Platform concept</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Entendendo o conceito de Plataforma</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Unified Config</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Configuração unificada</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Unified configuration</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Configuração unificada</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Unifies Imperative and Reactive</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Unifica o imperativo e o reativo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Unifies imperative and reactive</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Unifica imperativo e reativo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Update projects to the latest Quarkus version</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Atualizando projetos para a versão mais recente do Quarkus</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Update the Lambda</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Atualizar o Lambda</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Update the test</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Atualize o teste</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use Apache Kafka, Avro serialized records, and connect to a schema registry.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Use o Apache Kafka, Avro serialized records e conecte-se a um Schema Registry.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use Case - Additional Interceptor Bindings</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Caso de Uso - Ligações de Interceptadores Adicionais</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use Case - Additional Qualifiers</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Caso de Uso - Qualificadores Adicionais</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use Case - Additional Stereotypes</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Caso de Uso - Estereótipos Adicionais</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use Case - I Have a Generated Bean Class</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Caso de Uso - Tenho uma Classe de Bean Gerada</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use Case - I Need To Transform Annotation Metadata</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Caso de Utilização - Preciso Transformar Metadados de Anotações</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use Case - I Need to Validate the Deployment</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Caso de Uso - Preciso Validar a Implantação</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use Case - Injection Point Transformation</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Caso de Uso - Transformação de Pontos de Injeção</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use Case - Inspect Beans, Observers and Injection Points</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Caso de Uso - Inspecionar Beans, Observadores e Pontos de Injeção</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use Case - My Annotation Is Not Recognized as a Qualifier or an Interceptor Binding</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Caso de uso - Minha Anotação não É Reconhecida Como Um Qualificador ou Uma Ligação de Interceptador</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use Case - My Class Is Not Recognized as a Bean</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Caso de uso - Minha classe não é reconhecida como um Bean</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use Case - Register a Custom CDI Context</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Caso de Uso - Registrar um Contexto CDI Personalizado</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use Case - Resource Annotations and Injection</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Caso de Uso - Anotações e Injeção de Recursos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use Case - Synthetic Observers</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Caso de Uso - Observadores Sintéticos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use Case - The Need for Synthetic Beans</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Caso de Uso - A Necessidade de Beans Sintéticos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use ConfigMaps as a configuration source for your Quarkus applications.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Use ConfigMaps como uma fonte de configuração para seus aplicativos Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use Custom HTTP Options</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usar Opções HTTP Personalizadas</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use Kogito to add DRL files with rules.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Use o Kogito para adicionar arquivos DRL com regras.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use Kogito to add business automation and power it up with DMN decision support.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Use o Kogito para adicionar automação comercial e aprimorá-la com o suporte a decisões DMN.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use Kogito to add business automation to power it up with predictions.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Use o Kogito para adicionar automação comercial para potencializá-lo com previsões.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use Podman instead of Docker for running containers.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Use o Podman em vez do Docker para executar contêineres.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use Quarkus to build a Kafka Streams Application.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Use o Quarkus para criar um aplicativo Kafka Streams.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use Spring Boot's `@ConfigurationProperties` in place of MicroProfile Config annotations</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Use o '@ConfigurationProperties' do Spring Boot no lugar das anotações do MicroProfile Config</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use a `MeterFilter` to remap names or tags according to your conventions.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Use a `MeterFilter` to remap names or tags according to your conventions.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use a `NonApplicationRootPathBuildItem` to define an endpoint:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Use um `NonApplicationRootPathBuildItem` para definir um endpoint:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use a diff tool to inspect all changes.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Utilize uma ferramenta de comparação para inspecionar todas as alterações.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use an `Optional&lt;MetricsCapabilityBuildItem&gt; metricsCapability` parameter to test which metrics API is supported (e.g. "smallrye-metrics" or "micrometer") in your build step, and use that to selectively declare or initialize API-specific beans or build items.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Use um parâmetro `Optional&lt;MetricsCapabilityBuildItem&gt; metricsCapability` para testar qual API de métricas é suportada (por exemplo, "smallrye-metrics" ou "micrometer") em sua etapa de construção e use isso para declarar ou inicializar seletivamente beans ou itens de construção específicos da API.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use mutable jars to rebuild your application with different build time configurations.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Use JARs mutáveis para reconstruir sua aplicação com diferentes configurações de tempo de compilação.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use one of the following methods to construct a timer.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Use one of the following methods to construct a timer.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use the &lt;a href="https://github.com/quarkusio/quarkus/discussions"&gt;Discussions&lt;/a&gt; section on our GitHub project.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Use a seção &lt;a href="https://github.com/quarkusio/quarkus/discussions"&gt;Discussões&lt;/a&gt; em nosso projeto GitHub.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use the Quarkus CLI to create, build, run, and manage extensions for Quarkus projects.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Use a CLI do Quarkus para criar, compilar, executar e gerenciar extensões para projetos Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use the Quarkus Spring Data REST compatibility layer to create a sample CRUD application.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Use a camada de compatibilidade REST do Quarkus Spring Data para criar um aplicativo CRUD de exemplo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use the Redis backend</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Utilizar o Redis como backend</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use the `--installable` or `-i` option to list extensions that can be installed from the Quarkus platform the project is using.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Use the `--installable` or `-i` option to list extensions that can be installed from the Quarkus platform the project is using.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use the `@Scheduled` annotation to instruct Quarkus to execute this method on the half hour. For more information see the xref:scheduler.adoc[Scheduler] guide.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Utilize a anotação `@Scheduled` para instruir o Quarkus a executar este método a cada meia hora. Para mais informações, consulte o guia  link:scheduler.html[Scheduler].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use the `invoke` command to invoke your function.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Utilize o comando `invoke` para invocar a sua função.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use the command below, to delete an increment given its key.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Utilize o comando abaixo, para excluir um incremento dada a sua chave.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use the docker image from the file `native-builder.image`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Utilize a imagem docker do arquivo `native-builder.image`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use the duplicated context in virtual threads</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Utilize o contexto duplicado em threads virtuais</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use the following command to recursively delete the `com.apple.quarantine` extended attribute on the GraalVM install directory as a workaround:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Use o seguinte comando para excluir recursivamente o atributo estendido `com.apple.quarantine` no diretório de instalação do GraalVM como uma solução alternativa:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use the generated service interface based on Mutiny API.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Use a interface de serviço gerada com base na API Mutiny.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use this configuration to automatically create an initial subscription when creating a topic. If this field is not set, the initial subscription is not created.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Use essa configuração para criar automaticamente uma assinatura inicial ao criar um tópico. Se esse campo não estiver definido, a assinatura inicial não será criada.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use those static methods to build your template instances.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Utilize esses métodos estáticos para criar as suas instâncias de modelo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use virtual thread friendly clients</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Utilize clientes compatíveis com threads virtuais</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Use worker thread (limit concurrency)</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Utiliza worker thread (limita a concorrência)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Used when runtime configuration needs to be obtained from an external system (like `Consul`), but details of that system need to be configurable (for example Consul's URL). The high level way this works is by using the standard Quarkus config sources (such as properties files, system properties, etc.) and producing `ConfigSourceProvider` objects which are subsequently taken into account by Quarkus when creating the final runtime `Config` object.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usado quando a configuração do tempo de execução precisa ser obtida de um sistema externo (como o `Consul`), mas os detalhes desse sistema precisam ser configuráveis (por exemplo, a URL do Consul). A maneira de alto nível como isso funciona é usando as fontes de configuração padrão do Quarkus (como arquivos de propriedades, propriedades do sistema, etc.) e produzindo objetos `ConfigSourceProvider` que são posteriormente levados em conta pelo Quarkus ao criar o objeto `Config` de tempo de execução final.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>User name of SOCKS5 proxy.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Nome de usuário do proxy SOCKS5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Users can also access the entire SSE event by using the `org.jboss.resteasy.reactive.client.SseEvent` type.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os usuários também podem acessar todo o evento SSE usando o tipo `org.jboss.resteasy.reactive.client.SseEvent` .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using @Blocking annotation in exception mappers</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando a anotação @Blocking em mapeadores de exceções</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using @ClientExceptionMapper</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando @ClientExceptionMapper</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using @ClientFormParam</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando @ClientFormParam</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using @ClientQueryParam</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando @ClientQueryParam</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using AI to optimize a schedule with OptaPlanner</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando IA para otimizar um cronograma com o OptaPlanner</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using AMQP with Reactive Messaging</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando AMQP com mensagens reativas</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using Apache Kafka Streams</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando Apache Kafka Streams</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using Apache Kafka with Schema Registry and Avro</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Utilização do Apache Kafka com o Schema Registry e o Avro</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using Blaze-Persistence</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando o Blaze-Persistence</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using CDI BeanContainer Interface</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando a Interface CDI BeanContainer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using Fault Tolerance</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando tolerância a falhas</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using Gradle</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando Gradle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using HTTP with Reactive Messaging</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando HTTP com mensagens reativas</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using HTTPS or SSL/TLS</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Utilizar HTTPS ou SSL/TLS</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using HashiCorp Vault with Databases</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando o HashiCorp Vault com bancos de dados</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using HashiCorp Vault’s PKI Secret Engine</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando o PKI Secret Engine do HashiCorp Vault</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using Health Check</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando Health Check</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using Hibernate ORM and JPA</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando Hibernate ORM e JPA</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using Hibernate Reactive</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando o Hibernate Reactive</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using Hibernate Reactive with Panache to interact with a database in a reactive fashion</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Utilizar o Hibernate Reactive com o Panache para interagir com uma base de dados de forma reativa</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using Infinispan Client</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando o cliente Infinispan</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using JMS</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando JMS</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using JWT RBAC</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando JWT RBAC</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using Kogito DMN support to add decision automation capabilities to an application</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando o suporte ao Kogito DMN para adicionar recursos de automação de decisões a um aplicativo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using Kogito to add business automation capabilities to an application</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando o Kogito para adicionar recursos de automação comercial a um aplicativo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using Kogito to add prediction capabilities to an application</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando o Kogito para adicionar recursos de previsão a um aplicativo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using Kogito to add rule engine capabilities to an application</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando o Kogito para adicionar recursos de mecanismo de regras a um aplicativo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using Kotlin</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando Kotlin</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using LRA (Long Running Actions)</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando LRA (Ações de Longa Duração)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using Maven</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Utilizando o Maven</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using Monitoring Options</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Utilizar as opções de monitoração</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using OAuth2 RBAC</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando OAuth2 RBAC</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using OpenAPI and Swagger UI</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Utilizar OpenAPI e Swagger UI</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using OpenID Connect (OIDC) Multi-Tenancy</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando o OpenID Connect (OIDC) Multi-Tenancy</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using OpenID Connect (OIDC) and Keycloak to Centralize Authorizations</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando OpenID Connect (OIDC) e Keycloak para centralizar autorizações</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using OpenID Connect (OIDC) and OAuth2 Client and Filters</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando clientes e filtros OpenID Connect (OIDC) e OAuth2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using OpenID Connect (OIDC) to Protect Service Applications</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Utilizar o OpenID Connect (OIDC) para proteger aplicações de serviço</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using OpenID Connect (OIDC) to Protect Web Applications</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando o OpenID Connect (OIDC) para proteger aplicativos Web</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using OpenTelemetry</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando OpenTelemetry</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using OpenTracing</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando o OpenTracing</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using Podman</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando o Podman</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using Quarkus CLI</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Utilizando o Quarkus CLI</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using RESTEasy Reactive to implement HTTP API while enforcing the reactive principle</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usar o RESTEasy Reactive para implementar a API HTTP, aplicando o princípio reativo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using RabbitMQ with Reactive Messaging</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando o RabbitMQ com mensagens reativas</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using Reactive Routes</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando rotas reativas</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using SSL With Native Executables</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando SSL com executáveis nativos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using Security with .properties File</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando a segurança com o arquivo .properties</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using Security with JDBC</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando a segurança com JDBC</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using Security with LDAP</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando a segurança com LDAP</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using Security with WebAuthn</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando a segurança com WebAuthn</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using Sentry to Monitor your Logs</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Utilizar o Sentry para monitorizar os seus registos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using Software Transactional Memory</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando a memória transacional de software</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using Spring Boot's ConfigurationProperties</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando ConfigurationProperties do Spring Boot</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using Stork with Kubernetes</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando o Stork com o Kubernetes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using Thread's Context Class Loader</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando o Carregador de Classe de Contexto da Thread</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using Transactions</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando transações</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using Vault</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando o Vault</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using Vault Transit Secret Engine</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando o Vault Transit Secret Engine</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using Vert.x</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando o Vert.x</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using WebSockets</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando WebSockets</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using WebSockets with Reactive Messaging</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando WebSockets com mensagens reativas</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using `@TransactionScoped` to bind CDI beans to the transaction lifecycle</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Utilizar `@TransactionScoped` para ligar beans CDI ao ciclo de vida da transação</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using a Distroless base image</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando uma imagem base sem distribuição</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using a Metrics API-specific implementation</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando uma implementação específica da API de Métricas</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using a Mock HTTP Server for tests</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando um Servidor HTTP Simulado para testes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using a local GraalVM installation</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando uma instalação local do GraalVM</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using a multi-stage Docker build</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Utilizar uma compilação do Docker multi-stage</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using an in-container build</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando uma compilação em contêiner</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using gRPC Health probes</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando gRPC Health probes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using injection</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Utilizando injeção</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using metrics-API specific implementations may be preferred in some cases. Jaeger, for example, defines its own metrics interface, `io.jaegertracing.spi.MetricsFactory`, that it uses to define counters and gauges. A direct mapping from that interface to the metrics system will be the most efficient. In this case, it is important to isolate these specialized implementations and to avoid eager classloading to ensure the metrics API remains an optional, compile-time dependency.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usar implementações específicas da API de Métricas pode ser preferível em alguns casos. O Jaeger, por exemplo, define a sua própria interface de métricas, `io.jaegertracing.spi.MetricsFactory`, que usa para definir contadores e medidores. Um mapeamento direto dessa interface para o sistema de métricas será o mais eficiente. Nesse caso, é importante isolar essas implementações especializadas e evitar o carregamento antecipado de classes para garantir que a API de métricas permaneça uma dependência opcional em tempo de compilação.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using our Tooling</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando nossas ferramentas</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using the AWS Java SDK v2</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Utilizar o AWS Java SDK v2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using the Kubernetes Client to Interact with a Kubernetes Cluster</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando o Kubernetes Client para interagir com um cluster Kubernetes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using the Mutiny stub, you can interact with these as follows:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Utilizando o stub Mutiny, você pode interagir com eles da seguinte forma:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using the Quarkus CLI</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando a CLI do Quarkus</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using the Quarkus Extension for Spring Cache</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando a extensão Quarkus para Spring Cache</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using the Quarkus Extension for Spring Cloud Config</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando a extensão Quarkus para o Spring Cloud Config</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using the Quarkus Extension for Spring DI API</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando a extensão Quarkus para a API do Spring DI</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using the Quarkus Extension for Spring Data JPA API</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando a extensão Quarkus para a API JPA do Spring Data</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using the Quarkus Extension for Spring Scheduled</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando a extensão Quarkus para Spring Scheduled</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using the Quarkus Extension for Spring Security API</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando a extensão Quarkus para a Spring Security API</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using the Quarkus Extension for Spring Web API</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando a extensão Quarkus para Spring Web API</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using the Quarkus Kubernetes extension, developers can perform or automate a single-step deployment using Jib, Docker, and Source-to-Image (S2i) including the creation of DeploymentConfig to trigger automatic redeployments. &lt;a href="{{site.baseurl}}/guides/deploying-to-kubernetes"&gt;Read the guide for more details.&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando a extensão Quarkus Kubernetes, os desenvolvedores podem executar ou automatizar uma implantação de etapa única usando Jib, Docker e Source-to-Image (S2i), incluindo a criação de DeploymentConfig para disparar reimplantações automáticas. &lt;a href="{{site.baseurl}}/guides/deploying-to-kubernetes"&gt;Leia o guia para obter mais detalhes.&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using the REST Client</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando o Cliente REST</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using the REST Client (including JSON)</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Utilizar o cliente REST (incluindo JSON)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using the REST Client Reactive is as simple as creating an interface using the proper Jakarta REST and MicroProfile annotations. In our case the interface should be created at `src/main/java/org/acme/rest/client/ExtensionsService.java` and have the following content:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usar o Cliente REST Reativo é tão simples quanto criar uma interface usando as anotações Jakarta REST e MicroProfile adequadas. No nosso caso, a interface deve ser criada em `src/main/java/org/acme/rest/client/ExtensionsService.java` e ter o seguinte conteúdo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using the REST Client with Multipart</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Utilizar o cliente REST com Multipart</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using the RESTEasy Classic REST Client (including JSON)</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando o cliente RESTEasy Classic REST (incluindo JSON)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using the Redis Client</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando o cliente Redis</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using the container-image extensions</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Utilizar as extensões dos container-image</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using the event bus</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Utilizar o barramento de eventos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using the parsed `XmlConfig` instance, create an instance of `RuntimeXmlConfigService` and wrap it in a `RuntimeValue`. Use a `RuntimeValue` wrapper for non-interface objects that are non-proxiable.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando a instância analisada de `XmlConfig`, crie uma instância de `RuntimeXmlConfigService` e envolva-a numa `RuntimeValue`. Use um invólucro `RuntimeValue` para objetos que não sejam de interface e que são não-proxyable.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Using xDS gRPC</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Usando o xDS gRPC</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Validation</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Validação</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Validation Error build items</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Itens de construção de Erro de Validação</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Validation with Hibernate Validator</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Validação com o Hibernate Validator</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Various Quarkus extensions contribute non-application endpoints that provide different kinds of information about the application.
Examples of such extensions are the xref:smallrye-health.adoc[health], xref:telemetry-micrometer.adoc[metrics], xref:openapi-swaggerui.adoc[OpenAPI] and info extensions.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Várias extensões do Quarkus contribuem com endpoints que não são do aplicativo e que fornecem diferentes tipos de informações sobre o aplicativo.
Exemplos dessas extensões são as extensões xref:smallrye-health.adoc[health] , xref:telemetry-micrometer.adoc[metrics] , xref:openapi-swaggerui.adoc[OpenAPI] e extensões de informação.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Verify Maven is using the Java you expect</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Certifique-se de que o Maven está usando a versão do Java que você espera</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Verify that Maven is using the Java version you expect.
If you have multiple JDKs installed, make sure Maven is using the expected one.
You can verify which JDK Maven uses by running `mvn --version.`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Verifique se o Maven está usando a versão do Java que você espera. Se você tiver vários JDKs instalados, certifique-se de que o Maven esteja usando a versão esperada. Você pode verificar qual JDK o Maven usa executando `mvn --version.`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Vert.x Reference Guide</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Guia de referência do Vert.x</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Videos</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Vídeos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>View the https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-awscli.html[Getting Started Guide] for deploying
a lambda with AWS CLI.  Specifically, make sure you have created an `Execution Role`.  You will need to define
a `LAMBDA_ROLE_ARN` environment variable in your profile or console window,  Alternatively, you can edit
the `manage.sh` script that is generated by the build and put the role value directly there:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Consulte o link:https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-awscli.html[Guia de Introdução] para implantar um lambda com a AWS CLI. Especificamente, certifique-se de ter criado um `Execution Role`. Será necessário definir uma variável de ambiente `LAMBDA_ROLE_ARN` no seu perfil ou na janela do console. Como alternativa, você pode editar o script `manage.sh` gerado pela compilação e colocar o valor da função diretamente lá:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Virtual Thread support reference</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Referência de apoio para Threads Virtuais</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Virtual Threads support</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Suporte a threads virtuais</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Virtual thread</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Thread virtual</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Virtual thread names</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Nomes de threads virtuais</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Virtual threads are useful for I/O-bound workloads only</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>As threads virtuais são úteis apenas para cargas de trabalho vinculadas a E/S</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Visual Studio Code Extension For Quarkus</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Visual Studio Code Extension para Quarkus</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Visualize and configure extensions as well as access to application logs and testing components</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Visualize e configure extensões, bem como acesso a logs de aplicativos e componentes de teste</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Visualizing build step dependencies</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Visualizando dependências de etapas de construção</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Visualizing records</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Visualização de registros</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Want to learn more? Check out the &lt;a href='/guides/'&gt;guides&lt;/a&gt; to continue your journey.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Quer saber mais? Confira os &lt;a href='/guides/'&gt;guias&lt;/a&gt; para continuar sua jornada.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Want to learn more? Check out the &lt;a href='https://quarkus.io/guides/'&gt;guides&lt;/a&gt; to continue your journey</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Quer saber mais? Confira os &lt;a href='https://quarkus.io/guides/'&gt;guias&lt;/a&gt; para continuar sua jornada</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>We also set the `java.util.logging` system property to make sure tests will use the correct log manager and `maven.home` to ensure that custom configuration
from `${maven.home}/conf/settings.xml` is applied (if any).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Também definimos a propriedade do sistema `java.util.logging` para garantir que os testes usarão o gerenciador de logs correto e `maven.home` para garantir que a configuração
personalizada de `${maven.home}/conf/settings.xml` seja aplicada (se houver).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>We are going to create an `IncrementService` class which will play the role of a Redis client.
With this class, we'll be able to perform the `SET`, `GET` , `DEL`, `KEYS` and `INCRBY` Redis commands.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Vamos criar uma classe `IncrementService` que desempenhará o papel de um cliente Redis. Com essa classe, poderemos executar os comandos Redis `SET` , `GET` , `DEL` , `KEYS` e `INCRBY` .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>We are going to model our increments using the `Increment` POJO.
Create the `src/main/java/org/acme/redis/Increment.java` file, with the following content:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Vamos modelar nossos incrementos usando o POJO `Increment`. Crie o arquivo `src/main/java/org/acme/redis/Increment.java` , com o seguinte conteúdo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>We are using `curl -w "\n"` in this example to avoid your terminal printing a '%' or put both result and next command prompt on the same line.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Estamos usando `curl -w “\n”` neste exemplo para evitar que seu terminal imprima um ‘%’ ou coloque tanto o resultado quanto o próximo prompt de comando na mesma linha.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>We can get the `Providers` instance in our filters from the request context as follows:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Podemos obter a instância `Providers` nos nossos filtros a partir do contexto do requisição da seguinte forma:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>We chose to align Quarkus docs with the Diátaxis documentation framework{fn-diataxis}, which defines a core content structure that addresses the different needs users have when consulting docs.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Optamos por alinhar os documentos do Quarkus com a estrutura de documentação Diátaxis{fn-diataxis}, que define uma estrutura central de conteúdo que atende às diferentes necessidades que os usuários têm ao consultar documentos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>We consume a ShutdownContextBuildItem to register the service shutdown.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Consumimos um ShutdownContextBuildItem para registrar o encerramento do serviço.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>We consume the previously initialized service captured in `RuntimeServiceBuildItem`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Consumimos o serviço previamente inicializado capturado em `RuntimeServiceBuildItem`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>We create the first increment, with the key `first` and an initial value of `10`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Criamos o primeiro incremento, com a chave `primeira` e um valor inicial de `10`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>We don’t want you to spend hours learning new technologies. Instead, the Quarkus programming model builds on top of proven standards. Be it official standards such as Eclipse MicroProfile or leading frameworks in a specific domain such as Eclipse Vert.x.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Não queremos que você passe horas aprendendo novas tecnologias. Em vez disso, o modelo de programação do Quarkus se baseia em padrões comprovados. Sejam padrões oficiais, como o Eclipse MicroProfile, ou estruturas líderes em um domínio específico, como o Eclipse Vert.x.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>We get the expected JSON array.
RESTEasy Reactive automatically maps the list into a JSON Array, except if instructed otherwise.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Obtemos o vetor JSON esperado. O RESTEasy Reactive mapeia automaticamente a lista em um vetor JSON, exceto se houver instruções em contrário.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>We have a lot of documentation. Be sure to check our &lt;a href="{{site.baseurl}}/get-started/"&gt;Getting started page&lt;/a&gt;, and all our &lt;a href="{{site.baseurl}}/guides/"&gt;guides&lt;/a&gt;. Also check out our &lt;a href="{{site.baseurl}}/faq/"&gt;FAQ section&lt;/a&gt; and &lt;a href="https://www.youtube.com/playlist?list=PLsM3ZE5tGAVbMz1LJqc8L5LpnfxPPKloO"&gt;Quarkus Tips Playlist&lt;/a&gt;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Temos muita documentação. Certifique-se de verificar nossa &lt;a href="{{site.baseurl}}/get-started/"&gt;página de Introdução&lt;/a&gt; e todos os nossos &lt;a href="{{site.baseurl}}/guides/"&gt;guias&lt;/a&gt;. Confira também nossa &lt;a href="{{site.baseurl}}/faq/"&gt;seção FAQ&lt;/a&gt; e &lt;a href="https://www.youtube.com/playlist?list=PLsM3ZE5tGAVbMz1LJqc8L5LpnfxPPKloO"&gt;Quarkus Tips Playlist&lt;/a&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>We have an extension that is used to test for regressions in the extension processing. It is located in {quarkus-tree-url}/integration-tests/test-extension/extension directory. In this section we touch on some tasks an extension
author will typically need to perform using the test-extension code to illustrate how the task could be done.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Temos uma extensão que é usada para testar regressões no processamento da extensão. Ela está localizada no diretório {quarkus-tree-url}/integration-tests/test-extension/extension. Nesta seção, abordaremos algumas tarefas que um autor de extensão normalmente precisará executar usando o código test-extension para ilustrar como a tarefa pode ser realizada.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>We need to configure the application to indicate where the `hello` service is found.
In the `src/main/resources/application.properties` file, add the following property:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Precisamos configurar a aplicação para indicar onde o serviço `hello` é encontrado. No arquivo `src/main/resources/application.properties` , adicione a seguinte propriedade:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>We pre-boot as many of the frameworks as possible during the native compilation of a Quarkus application. It means that the resulting native executable has already run most of the startup code and serialized the result into the executable: even faster startup!</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Nós pré-inicializamos o maior número possível de frameworks durante a compilação nativa de um aplicativo Quarkus. Isso significa que o executável nativo resultante já executou a maior parte do código de inicialização e serializou o resultado no executável: inicialização ainda mais rápida!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>We recommend continuing the journey with the xref:deploying-to-kubernetes.adoc[deployment to Kubernetes and OpenShift].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Recomendamos continuar a jornada com a  link:deploying-to-kubernetes.html[implantação no Kubernetes e no OpenShift].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>We recommend that you follow the instructions from xref:bootstrapping-the-project[Bootstrapping the project] and onwards to create the application step by step.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Recomendamos que siga as instruções a partir de "  link:#bootstrapping-the-project[Bootstrapping the project] " para criar a aplicação passo a passo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>We recommend that you follow the instructions in the next sections and create applications step by step.
However, you can go right to the completed example.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Recomendamos que siga as instruções nas próximas seções e crie aplicativos passo a passo. No entanto, você pode ir direto para o exemplo concluído.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>We recommend that you follow the instructions in the next sections and create the
application step by step. However, you can go right to the completed example.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Recomendamos que siga as instruções nas seções seguintes e crie a aplicação passo a passo. No entanto, você pode ir diretamente para o exemplo completo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>We recommend that you follow the instructions in the next sections and create the application step
by step. However, you can go right to the completed example.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Recomendamos que siga as instruções nas seções seguintes e crie a aplicação passo a passo. No entanto, você pode ir diretamente para o exemplo completo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>We recommend that you follow the instructions in the next sections and create the application step by step.
However, you can go right to the completed example.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Recomendamos que siga as instruções nas seções seguintes e crie a aplicação passo a passo. No entanto, você pode ir diretamente para o exemplo completo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Recomendamos que siga as instruções nas seções seguintes e crie a aplicação passo a passo. No entanto, você pode ir diretamente para o exemplo completo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>We recommend that you follow the instructions in the next sections and package the application step by step. However, you can go right to the completed example.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Recomendamos que siga as instruções nos passos seguintes e que prepare a aplicação passo a passo. No entanto, pode ir diretamente para o exemplo completo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>We see that the value of the `first` key is now `37` which is exactly the result of `10 + 27`, quick maths.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Vemos que o valor da chave `primeira` é agora `37` que é exatamente o resultado de `10 + 27`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>We will give a brief overview of the topic here; please refer to the link:{vthreadjep}[JEP 425] for more information.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Faremos aqui um breve resumo do tema; para mais informações, consulte o link:{vthreadjep}[JEP 425].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>We will remove the MySQL/System bottleneck by constraining the application to 4 CPU cores, therefore reducing the maximum load the application can drive to the database. We achieve this by running the application in docker;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>We will remove the MySQL/System bottleneck by constraining the application to 4 CPU cores, therefore reducing the maximum load the application can drive to the database. We achieve this by running the application in docker;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>We'll be using the Quarkus Redis extension to connect to interact with Redis.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Vamos utilizar a extensão Quarkus Redis para nos conectar e interagir com o Redis.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>We'll start with a very simple template:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Vamos começar com um modelo muito simples:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Weak value production</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Produção de valor fraco</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Welcome to the Quarkus World Tour.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Bem-vindo ao Quarkus World Tour.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>What Makes Quarkus Different?</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O que torna o Quarkus diferente?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>What are the extension statuses?</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Quais são os status de extensão?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>What are virtual threads?</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O que são threads virtuais?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>What does having a working C developer environment mean?</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O que significa ter um ambiente de desenvolvimento em C?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>What does it mean to be a Kubernetes-native framework?</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O que significa ser uma estrutura nativa do Kubernetes?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>What follows is a brief summary of the different document types, but their site is worth a read if you want to understand more of the reasoning behind this classification.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O que vem a seguir é um breve resumo dos diferentes tipos de documentos, mas vale a pena ler se você quiser entender mais sobre o raciocínio por trás dessa classificação.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>What if I Need to Know All the Scopes Used in the Application?</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>E Se Eu Precisar Conhecer Todos os Escopos Utilizados na Aplicação?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>What is Quarkus?</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O que é Quarkus?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>What is a Quarkus extension?</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O que é uma extensão do Quarkus?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>What is the relevance of startup and shutdown events for extension authors? We have already seen the use of a `ShutdownContext`
to register a callback to perform shutdown tasks in the xref:starting-service[Starting a Service] section.
These shutdown tasks would be called
after a `ShutdownEvent` had been sent.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Qual é a importância dos eventos de inicialização e encerramento para os autores de extensões? Já vimos o uso de um `ShutdownContext` para registrar um retorno de chamada para executar tarefas de encerramento na seção xref:starting-service[Iniciando um Serviço] . Essas tarefas de encerramento seriam chamadas depois que um `ShutdownEvent` fosse enviado.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>What is your license?</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Qual é a sua licença?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>What we mean by "Supersonic Subatomic Java".</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O que queremos dizer com "Java Subatômico Supersônico".</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>What's next?</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O que vem a seguir?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>When Quarkus is starting the `io.quarkus.deployment.builditem.LiveReloadBuildItem` is guaranteed to be present that gives
information about this start, in particular:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Quando o Quarkus está iniciando, é garantido que o site `io.quarkus.deployment.builditem.LiveReloadBuildItem` esteja presente e forneça informações sobre esse início, em particular:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>When Quarkus was designed, we didn’t focus only on containers but also on deploying Quarkus applications on container orchestrators such as Kubernetes. Quarkus build-time processing also generates the Kubernetes metadata, so your application is ready to be deployed on Kubernetes. Runtime capabilities such as health checks and metrics are exposed out of the box. Quarkus collects all the required metadata at build time to create the Kubernetes deployment descriptor and produce a container image. A single command line can deploy your application onto your Kubernetes cluster.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Quando o Quarkus foi projetado, não nos concentramos apenas em contêineres, mas também na implantação de aplicativos Quarkus em orquestradores de contêineres, como o Kubernetes. O processamento em tempo de compilação do Quarkus também gera os metadados do Kubernetes, para que sua aplicação esteja pronta para ser implantado no Kubernetes. Os recursos de tempo de execução, como verificações de integridade e métricas, são expostos imediatamente. O Quarkus coleta todos os metadados necessários em tempo de compilação para criar o descritor de deployment do Kubernetes e produzir uma imagem de contêiner. Uma única linha de comando pode implantar seu aplicativo no cluster do Kubernetes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>When SSL/TLS is configured, `plain-text` is automatically disabled.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Quando SSL/TLS é configurado, `plain-text` é automaticamente desativado.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>When `getWithOtherParam` is called, in addition to the `my-param` query parameter, `some-other-param` with the value of `other` will also be added.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Quando `getWithOtherParam` é chamado, além do parâmetro de consulta `my-param`, `some-other-param` com o valor de `other` também será adicionado.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>When `objcopy` is not available debug symbols are embedded in the executable.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Quando `objcopy` não está disponível, os símbolos de debug são incorporados no executável.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>When adding metrics for your extension, you may find yourself in one of the following situations:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Ao adicionar métricas para a sua extensão, você pode se encontrar em uma das seguintes situações:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>When not running in dev or test mode, you will need to start your RabbitMQ broker.
You can follow the instructions from the https://hub.docker.com/_/rabbitmq[RabbitMQ Docker website] or create a `docker-compose.yaml` file with the following content:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Quando não estiver em execução no modo de desenvolvimento ou teste, você precisará iniciar o corretor RabbitMQ. Você pode seguir as instruções do link:https://hub.docker.com/_/rabbitmq[RabbitMQ Docker website] ou criar um arquivo `docker-compose.yaml` com o seguinte conteúdo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>When processing a request requires interacting with a remote service, like an HTTP API or a database, it does not block the execution while waiting for the response.
Instead, it schedules the I/O operation and attaches a continuation, i.e., the request processing remaining code.
This continuation can be passed as a callback (a function invoked with the I/O outcome), or use more advanced constructs such as reactive programming or co-routines.
Regardless of how the continuation is expressed, the essential aspect is the release of the I/O thread and, as a consequence, the fact that this thread can be used to process another request.
When the scheduled I/O completes, the I/O thread executes the continuation, and the processing of the pending request continues.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Quando o processamento de uma requisição exige a interação com um serviço remoto, como uma API HTTP ou um banco de dados, ele não bloqueia a execução enquanto aguarda a resposta. Em vez disso, ele agenda a operação de E/S e anexa uma continuação, ou seja, o código restante do processamento da requisição. Essa continuação pode ser passada como um retorno de chamada (uma função invocada com o resultado de E/S) ou usar construções mais avançadas, como programação reativa ou corrotinas. Independentemente de como a continuação é expressa, o aspecto essencial é a liberação do thread de E/S e, como consequência, o fato de que esse thread pode ser usado para processar outra requisição. Quando a E/S programada é concluída, o thread de E/S executa a continuação e o processamento da requisição pendente continua.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>When returning a `Uni`, every _subscription_ invokes the remote service.
It means you can re-send the request by re-subscribing on the `Uni`, or use a `retry` as follows:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Ao retornar um `Uni` , cada _assinatura_ invoca o serviço remoto. Isso significa que você pode reenviar a requisição assinando novamente o `Uni` , ou usar um `retry` da seguinte forma:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>When running your application in JVM mode (so not compiled into native, for native check xref:native[the dedicated section]), you can follow the xref:./container-image.adoc[containerization guide] to build a container.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Ao executar a sua aplicação em modo JVM (portanto, não compilada em modo nativo, para nativo consulte xref:native[a seção dedicada]), pode seguir o xref:./container-image.html[guia de conteinerização] para construir um contêiner.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>When subscribing to a topic using a regular expression, you can pick a certain type of topics.

* **PersistentOnly**: only subscribe to persistent topics. +
* **NonPersistentOnly**: only subscribe to non-persistent topics. +
* **AllTopics**: subscribe to both persistent and non-persistent topics.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Ao assinar um tópico usando uma expressão regular, você pode escolher um determinado tipo de tópicos.

* **PersistentOnly**: inscreva-se apenas em tópicos persistentes. +
* **NonPersistentOnly**: inscreva-se apenas em tópicos não persistentes. +
* **AllTopics**: inscreva-se em tópicos persistentes e não persistentes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>When the `--parameters` compiler argument is enabled, RESTEasy Reactive may infer the parameter names from the method argument names, making the `@PathParam("id")` annotation optional in this case.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Quando o argumento do compilador `—parameters` está habilitado, o RESTEasy Reactive pode inferir os nomes dos parâmetros a partir dos nomes dos argumentos do método, tornando a anotação `@PathParam(“id”)` opcional neste caso.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>When the `quarkus-rest-client-reactive-jackson` extension is installed, Quarkus will use the `application/json` media type
by default for most return values, unless the media type is explicitly set via `@Produces` or `@Consumes` annotations.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Quando a extensão `quarkus-rest-client-reactive-jackson` estiver instalada, o Quarkus usará o tipo de mídia `application/json` por padrão para a maioria dos valores de retorno, a menos que o tipo de mídia seja explicitamente definido por meio das anotações `@Produces` ou `@Consumes` .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>When this build step is run nothing is printed to the console. This is because the `HelloRecorder` that is injected is
actually a proxy that records all invocations. Instead, if we run the resulting Quarkus program we will see 'Hello World'
printed to the console.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Quando essa etapa de construção é executada, nada é impresso no console. Isso ocorre porque o `HelloRecorder` que é injetado é, na verdade, um proxy que registra todas as invocações. Em vez disso, se executarmos o programa Quarkus resultante, veremos "Hello World" impresso no console.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>When used, the key is _watched_ and the _SET_ command is executed in a transaction (`MULTI/EXEC`).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Quando utilizado, a chave é _vigiada_ e o comando _SET_ é executado numa transação ( `MULTI/EXEC`).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>When using Kotlin, if default methods are going to be leveraged, then the Kotlin compiler needs to be configured to use Java's default interface capabilities.
See link:https://kotlinlang.org/docs/java-to-kotlin-interop.html#default-methods-in-interfaces[this] for more details.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Ao usar o Kotlin, se os métodos padrão forem aproveitados, o compilador do Kotlin precisará ser configurado para usar os recursos de interface padrão do Java. Veja link:https://kotlinlang.org/docs/java-to-kotlin-interop.html#default-methods-in-interfaces[isso] para obter mais detalhes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>When using Redis as the backend for Quarkus cache, each cached item will be stored in Redis:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Ao usar o Redis como backend para a cache do Quarkus, cada item armazenado em cache será armazenado no Redis:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>When working with a Quarkus project, the CLI will list the extensions the current project has installed, using the `--name` format by default.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>When working with a Quarkus project, the CLI will list the extensions the current project has installed, using the `--name` format by default.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>When writing an extension, it's beneficial to provide health checks for the extension, that can be automatically included without the developer needing to write their own.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Ao escrever uma extensão, é vantajoso fornecer verificações de integridade para a extensão, que podem ser automaticamente incluídas sem que o programador tenha de escrever os seus próprios controles.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>When xDS is configured, `plain-text` is automatically disabled.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Quando o xDS está configurado, o modo "plain-text" é automaticamente desabilitado.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>When xDS target property is used, name resolver, host, and port are not used</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Quando a propriedade de destino do xDS é utilizada, o resolvedor de nomes, host e porta não são utilizados.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>When you enable `quarkus.grpc.clients."client-name".use-quarkus-grpc-client`, you are then using the new Vert.x gRPC channel implementation, so not all configuration properties can still be applied. And currently there is no Stork support yet.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Quando você habilita `quarkus.grpc.clients."client-name".use-quarkus-grpc-client`, você está usando a nova implementação do canal gRPC Vert.x, portanto, nem todas as propriedades de configuração podem ser aplicadas. E, atualmente, ainda não existe suporte para o Stork.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>When you enable `quarkus.grpc.clients."client-name".xds.enabled`, it's the xDS that should handle most of the configuration above.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Quando você habilita `quarkus.grpc.clients."client-name".xds.enabled`, é o xDS que deve tratar da maior parte da configuração acima.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>When you have multiple client interceptors, you can order them by implementing the `jakarta.enterprise.inject.spi.Prioritized` interface:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Quando tem vários interceptadores de clientes, pode ordená-los implementando a interface `jakarta.enterprise.inject.spi.Prioritized`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>When your repository contains multiple extensions, you need to create a separate file for each individual extension, not just one file for the entire repository.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Quando o repositório contém várias extensões, você precisa criar um arquivo separado para cada extensão individual, e não apenas um arquivo para todo o repositório.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Where can I get it?</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Onde posso obtê-lo?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Whether Kafka client is created lazily or eagerly.

Type: _boolean_</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se o cliente Kafka é criado preguiçosamente ou ansiosamente.

Tipo: _boolean_</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Whether batch receive is used to consume messages</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se o recebimento em lote é usado para consumir mensagens</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Whether health reporting is enabled (default) or disabled</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se o relatório de integridade está habilitado (padrão) ou desabilitado</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Whether health reporting is enabled (default) or disabled

Type: _boolean_</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se o relatório de integridade está habilitado (padrão) ou desabilitado

Tipo: _boolean_</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Whether readiness health reporting is enabled (default) or disabled

Type: _boolean_</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se o relatório de integridade de prontidão está habilitado (padrão) ou desabilitado

Tipo: _boolean_</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Whether the client accepts untrusted TLS certificates from the broker.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se o cliente aceita certificados TLS não confiáveis do broker.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Whether the client waits for Kafka to acknowledge the written record before acknowledging the message

Type: _boolean_</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se o cliente espera que Kafka reconheça o registro escrito antes de reconhecer a mensagem

Tipo: _boolean_</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Whether the client waits for the broker to acknowledge the written record before acknowledging the message</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se o cliente espera que o broker reconheça o registro escrito antes de reconhecer a mensagem</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Whether the connector should allow multiple upstreams

Type: _boolean_</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se o conector deve permitir vários upstreams

Tipo: _boolean_</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Whether the connector should insert automatically the `time` attribute into the outgoing Cloud Event. Requires `cloud-events` to be set to `true`. This value is used if the message does not configure the `time` attribute itself

Type: _boolean_</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se o conector deve inserir automaticamente o atributo 'time' no evento de nuvem de saída. Requer que 'cloud-events' seja definido como 'true'. Esse valor será usado se a mensagem não configurar o próprio atributo 'time'

Tipo: _boolean_</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Whether the hostname is validated when the client creates a TLS connection with brokers.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se o nome do host é validado quando o cliente cria uma conexão TLS com brokers.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Whether the startup and readiness check should verify that topics exist on the broker. Default to false. Enabling it requires an admin client connection.

Type: _boolean_</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se a verificação de inicialização e prontidão deve verificar se os tópicos existem no broker. O padrão é false. Habilitá-lo requer uma conexão de cliente administrador.

Tipo: _boolean_</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Whether to automatically acknowledge pending chunked messages when the threshold of `maxPendingChunkedMessage` is reached. If set to `false`, these messages will be redelivered by their broker.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se as mensagens em bloco pendentes devem ser confirmadas automaticamente quando o limite de 'maxPendingChunkedMessage' for atingido. Se definido como 'false', essas mensagens serão reentregues pelo corretor.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Whether to enable BusyWait for EpollEventLoopGroup.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se deseja habilitar BusyWait para EpollEventLoopGroup.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Whether to enable transaction.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se deve habilitar a transação.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Whether to use TCP NoDelay option.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se deve usar a opção TCP NoDelay.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Whether to use TLS.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se deve usar TLS.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Whether tracing is enabled (default) or disabled</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se o rastreamento está habilitado (padrão) ou desabilitado</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Whether tracing is enabled (default) or disabled

Type: _boolean_</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se o rastreamento está habilitado (padrão) ou desabilitado

Tipo: _boolean_</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>While it is handy to have the documentation available when coding, the configuration documentation must also be
available in the extension guides. The Quarkus build automatically generates the configuration documentation based on
the Javadoc comments, but it needs to be explicitly included in each guide.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Embora seja útil ter a documentação disponível durante a codificação, a documentação de configuração também deve estar disponível nos guias de extensão. A construção do Quarkus gera automaticamente a documentação de configuração com base nos comentários do Javadoc, mas ela precisa ser incluída explicitamente em cada guia.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>While it's the CRaC API, SnapStart is not CRaC and can do _things_ that would not work with others CRaC implementations.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Embora seja a API CRaC, o SnapStart não é CRaC e pode fazer _coisas_ que não funcionariam com outras implementações CRaC.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>While running in Quarkus Dev Mode, you can feed events to it by doing an HTTP POST to `http://localhost:8080`.
The mock event server will receive the events and your lambda will be invoked.  You can perform live coding on your lambda
and changes will automatically be recompiled and available the next invocation you make.  Here's an example:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Durante a execução no modo de desenvolvimento do Quarkus, voê pode alimentar eventos para ele fazendo um HTTP POST para `http://localhost:8080`. O servidor de eventos simulado receberá os eventos e seu lambda será chamado. Você pode executar a codificação ao vivo no seu lambda e as alterações serão automaticamente recompiladas e estarão disponíveis na próxima invocação que fizer. Veja um exemplo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>While standard Javadoc comments are perfectly fine for simple documentation (recommended even), AsciiDoc is more
suitable for tips, source code extracts, lists and more:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Embora os comentários Javadoc padrão sejam perfeitamente adequados para documentação simples (até mesmo recomendados), o AsciiDoc é mais adequado para dicas, extratos de código-fonte, listas e muito mais:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>While the REST Client Reactive extension aims to be a drop-in replacement for the REST Client extension, there are some differences
and limitations:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Embora a extensão Cliente REST Reativo pretenda ser uma substituição imediata da extensão Cliente REST, existem algumas diferenças e limitações:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>While this is the easiest way to get your services running natively, it's less efficient than scanning the implementation
classes at build time and generating code that registers them at static-init time instead of relying on reflection.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Embora essa seja a maneira mais fácil de fazer com que seus serviços sejam executados nativamente, é menos eficiente do que verificar as classes de implementação em tempo de construção e gerar código que as registre no momento da inicialização estática, em vez de depender da reflexão.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>While we recommend you to follow the step-by-step instructions, you can find the final solution on https://github.com/quarkusio/quarkus-quickstarts/tree/main/hibernate-reactive-panache-quickstart.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Embora recomendemos que siga as instruções passo a passo, você pode encontrar a solução final em https://github.com/quarkusio/quarkus-quickstarts/tree/main/hibernate-reactive-panache-quickstart.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>While you are encouraged to use CDI annotations for injection, Quarkus provides a compatibility layer for Spring dependency injection in the form of the spring-di extension.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Embora você seja encorajado a usar anotações CDI para injeção, o Quarkus fornece uma camada de compatibilidade para injeção de dependência do Spring na forma da extensão spring-di.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>While you are encouraged to use Hibernate ORM with Panache for your data layer, Quarkus provides a compatibility layer for Spring Data JPA in the form of the spring-data-jpa extension.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Embora você seja encorajado a usar o Hibernate ORM com o Panache para sua camada de dados, o Quarkus fornece uma camada de compatibilidade para o Spring Data JPA na forma da extensão spring-data-jpa.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>While you are encouraged to use JAX-RS annotations for defining REST endpoints, Quarkus provides a compatibility layer for Spring Web in the form of the spring-web extension.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Embora você seja encorajado a usar anotações JAX-RS para definir pontos de extremidade REST, o Quarkus fornece uma camada de compatibilidade para o Spring Web na forma da extensão spring-web.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>While you are encouraged to use the Cache extension for your application-level caching, Quarkus provides a compatibility layer for Spring Cache in the form of the spring-cache extension.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Embora você seja encorajado a usar a extensão Cache para seu cache no nível do aplicativo, o Quarkus fornece uma camada de compatibilidade para o Spring Cache na forma da extensão spring-cache.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>While you are encouraged to use the Quarkus security layer to secure your applications, Quarkus provides a compatibility layer for Spring Security in the form of the spring-security extension.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Embora você seja encorajado a usar a camada de segurança do Quarkus para proteger seus aplicativos, o Quarkus fornece uma camada de compatibilidade para o Spring Security na forma da extensão spring-security.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>While you are encouraged to use the Scheduler or Quartz extensions to schedule tasks, Quarkus provides a compatibility layer for Spring Scheduled in the form of the spring-scheduled extension.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Embora você seja encorajado a usar as extensões Scheduler ou Quartz para agendar tarefas, o Quarkus fornece uma camada de compatibilidade para o Spring Scheduled na forma da extensão agendada para primavera.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Why always having a transaction manager?</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Por que sempre ter um gerenciador de transações?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Why an extension framework</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Por que um framework de extensão</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Why do you prefer JTA vs Hibernate's transaction management API</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Por que você prefere a API de gerenciamento de transações do JTA vs Hibernate</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Why not run everything on virtual threads?</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Por que não executar tudo em threads virtuais?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Will the Quarkus team accept my extension?</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A equipe do Quarkus aceitará minha extensão?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>With &lt;a href="https://code.quarkus.io/"&gt;code.quarkus.io&lt;/a&gt;, in a few clicks, you can bootstrap your Quarkus application and discover its extension ecosystem.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Com &lt;a href="https://code.quarkus.io/"&gt;code.quarkus.io&lt;/a&gt;, em poucos cliques, você pode inicializar seu aplicativo Quarkus e descobrir seu ecossistema de extensões.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>With Funqy, a function is just:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Com o Funqy, uma função é apenas:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>With Panache, the &lt;code&gt;Element&lt;/code&gt; class would be as simple as:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Com o Panache, a classe &lt;code&gt;Element&lt;/code&gt; seria tão simples quanto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>With Quarkus, implementing a service requires to implement the generated service interface based on Mutiny, a Reactive Programming API integrated in Quarkus, and expose it as a CDI bean.
Learn more about Mutiny on the xref:mutiny-primer.adoc[Mutiny guide].
The service class must be annotated with the `@io.quarkus.grpc.GrpcService` annotation.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Com o Quarkus, implementar um serviço requer a implementação da interface de serviço gerada com base no Mutiny, uma API de Programação Reativa integrada no Quarkus, e expô-la como um bean CDI. Saiba mais sobre o Mutiny no [guia Mutiny](xref:mutiny-primer.adoc). A classe de serviço deve ser anotada com a anotação `@io.quarkus.grpc.GrpcService`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>With Quarkus, there is no need to create an `Application` class. It's supported, but not required. In addition, only one instance
of the resource is created and not one per request. You can configure this using the different `*Scoped` annotations (`ApplicationScoped`, `RequestScoped`, etc).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Com o Quarkus, não há necessidade de criar uma classe `Application` . Ela é suportada, mas não é obrigatória. Além disso, apenas uma instância
do recurso é criada e não uma por request. Você pode configurar usando as diferentes anotações `*Scoped` ( `ApplicationScoped` , `RequestScoped` , etc).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>With Quarkus, you can easily configure a datasource, or several if need be.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Com o Quarkus, você pode configurar facilmente uma fonte de dados ou várias, se necessário.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>With minimal integration, it is possible to leverage the AWS Java SDK v2,
which can be used to invoke services such as SQS, SNS, S3 and DynamoDB.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Com uma integração mínima, é possível aproveitar o AWS Java SDK v2, que pode ser usado para invocar serviços como SQS, SNS, S3 e DynamoDB.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>With the *Kafka Dev UI*, you can directly manage your Kafka cluster and perform tasks, such as:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Com o *Kafka Dev UI*, pode gerenciar diretamente o seu cluster Kafka e executar tarefas, tais como:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>With the `@Blocking` annotation, the MyResponseExceptionMapper exception mapper will be executed in the worker thread pool.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Com a anotação `@Blocking`, o mapeador de exceções MyResponseExceptionMapper será executado no pool de threads de trabalho.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>With the artifacts added to the `Jandex` indexer, you can now search the index to identify classes implementing an interface, subclasses of a specific class, or classes with a target annotation.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Com os artefatos adicionados ao indexador `Jandex`, você pode agora pesquisar o índice para identificar classes que implementam uma interface, subclasses de uma classe específica ou classes com uma anotação de alvo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>With this approach the client interface could look as follows:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Com esta abordagem, a interface do cliente poderia ter o seguinte aspecto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>With this configuration, you can put your service and message definitions in the `src/main/proto` directory.
`quarkus-maven-plugin` will generate Java files from your `proto` files.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Com essa configuração, você pode colocar as definições do seu serviço e mensagens no diretório `src/main/proto`.
O `quarkus-maven-plugin` irá gerar arquivos Java a partir dos seus arquivos `proto`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>With this in mind, let's see how we can develop a CRUD application with Quarkus, which will use the I/O thread to handle the HTTP requests, interact with a database, process the result, and write the HTTP response; in other words: a reactive CRUD application.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Com isto em mente, vamos ver como podemos desenvolver uma aplicação CRUD com o Quarkus, que utilizará o thread de E/S para tratar as requisições HTTP, interagir com uma base de dados, processar o resultado e escrever a resposta HTTP; em outras palavras: uma aplicação CRUD reativa.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Work is done at augmentation time by _build steps_ which produce and consume _build items_.  The build steps found in
the deployment modules that correspond to the extensions in the project build are automatically wired together and executed
to produce the final build artifact(s).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O trabalho é feito no momento da ampliação por _etapas de construção_ que produzem e consomem _itens de construção_. As etapas de construção encontradas nos módulos de implantação que correspondem às extensões na construção do projeto são automaticamente conectadas e executadas para produzir o(s) artefato(s) de construção final.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Working with HashiCorp Vault’s Authentication</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Trabalhando com a autenticação do HashiCorp Vault</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Working with multi-module project or external modules</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Trabalhar com projectos multi-módulos (multi-module) ou módulos externos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Wrap the return service value in a `RuntimeServiceBuildItem` for use in a RUNTIME_INIT build step that will start the service.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Envolva o valor do serviço de retorno num `RuntimeServiceBuildItem` para utilização num passo de construção RUNTIME_INIT que iniciará o serviço.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Write Your First Application</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Escreva Seu Primeiro Aplicativo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Write a Spring Data Application</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Escrever uma aplicação Spring Data</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Writing Extensions</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Escrevendo extensões</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Writing JSON REST services</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Escrevendo serviços JSON REST</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Writing Native Applications</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Escrever aplicações nativas</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Writing Quarkus extensions in Eclipse</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Escrevendo extensões Quarkus no Eclipse</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Writing REST JSON Services</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Escrevendo serviços JSON REST</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Writing REST Services Reference</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Referência de escrita de serviços REST</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Writing Simple CRUD Applications with Spring Data</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Escrevendo aplicativos CRUD simples com Spring Data</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Writing Simple REST CRUD Services</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Escrevendo serviços REST CRUD simples</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Writing Your Own Extension</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Escrevendo sua própria extensão</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Writing a Codestart for an extension</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Escrevendo um Codestart para uma extensão</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Writing section documentation</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Escrevendo documentação de seção</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Writing the documentation</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Escrevendo a documentação</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>XCode provides the required dependencies on macOS:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O XCode fornece as dependências necessárias no macOS:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>YAML Configuration</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Configuração YAML</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>YAML as a Configuration Source.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>YAML como uma fonte de configuração.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Yes, we consider Quarkus stable. Remember 95% of the features Quarkus apps use are provided by the ecosystem like Hibernate ORM, Eclipse Vert.x, Netty, RESTEasy, etc. These libraries are rock solid :)</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Sim, consideramos o Quarkus estável. Lembre-se que 95% dos recursos que os aplicativos Quarkus usam são fornecidos pelo ecossistema como Hibernate ORM, Eclipse Vert.x, Netty, RESTEasy, etc. Essas bibliotecas são sólidas :)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You also have to fill the xref:extension-metadata.adoc#quarkus-extension-yaml[quarkus-extension.yaml] template file that describe your extension inside the runtime module `src/main/resources/META-INF` folder.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Você também precisa preencher o arquivo de modelo xref:extension-metadata.adoc#quarkus-extension-yaml[quarkus-extension.yaml] que descreve a sua extensão dentro da pasta `src/main/resources/META-INF` do módulo de tempo de execução.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You also need to adjust the minimum log level for the relevant category.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Também é necessário ajustar o nível mínimo de log para a categoria relevante.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can `create` your function using the following command:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Pode `create` a sua função utilizando o seguinte comando:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can achieve that by adapting the previous build step to use a static-init recorder instead of registering
classes for reflection:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Você pode conseguir isso adaptando a etapa de construção anterior para usar um gravador de inicialização estática em vez de registrar classes para reflexão:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can also apply a set of conditions to all build steps in a given class with `@BuildSteps`:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Também é possível aplicar um conjunto de condições a todos os passos de construção numa determinada classe com `@BuildSteps`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can also configure the time to live of the cached entries:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Também é possível configurar o tempo de vida das entradas em cache:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can also create a native executable from this application without making any
source code changes. A native executable removes the dependency on the JVM:
everything needed to run the application on the target platform is included in
the executable, allowing the application to run with minimal resource overhead.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Você também pode criar um executável nativo a partir dessa aplicação sem fazer nenhuma alteração no código-fonte. Um executável nativo elimina a dependência do JVM: tudo o que é necessário para executar o aplicativo na plataforma de destino está incluído no executável, permitindo que o aplicativo seja executado com o mínimo de sobrecarga de recursos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can also generate the native executable with:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Também é possível gerar o executável nativo com:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can also list extensions for a specific release of Quarkus using `-P` or `-S`, as described in &lt;&lt;specifying-quarkus-version,Specifying the Quarkus version&gt;&gt;.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>You can also list extensions for a specific release of Quarkus using `-P` or `-S`, as described in &lt;&lt;specifying-quarkus-version,Specifying the Quarkus version&gt;&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can also list extensions for a specific release of Quarkus using `-P` or `-S`, as described in xref:specifying-quarkus-version[Specifying the Quarkus version].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>You can also list extensions for a specific release of Quarkus using `-P` or `-S`, as described in xref:specifying-quarkus-version[Specifying the Quarkus version].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can also package the application in a container.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Também é possível empacotar a aplicação em um container.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can also run the test from your IDE directly (be sure you stopped the application first).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Você também pode executar o teste diretamente a partir do seu IDE (certifique-se de que parou primeiro a aplicação).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can also send JSON multiparts by specifying the `@PartType` annotation:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Você também pode enviar multi-partes JSON especificando a anotação `@PartType`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can also specify a different Cognito claim to extract roles from:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Você também pode especificar uma reivindicação do Cognito diferente para extrair funções:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can also use a simplified format, starting with a number:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Você também pode usar um formato simplificado, começando com um número:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can also use the default gRPC API instead of Mutiny:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Você também pode usar a API gRPC padrão em vez do Mutiny:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can configure the Dev Services for Pulsar with custom broker configuration.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>É possível configurar o Dev Services para a Pulsar com a configuração personalizada do broker.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can configure the default transaction timeout, the timeout that applies to all transactions managed by the transaction manager, via the property `quarkus.transaction-manager.default-transaction-timeout`, specified as a duration.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Pode configurar o tempo limite de transação predefinido, o tempo limite que se aplica a todas as transacções geridas pelo gestor de transacções, através da propriedade `quarkus.transaction-manager.default-transaction-timeout`, especificada como uma duração.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can configure timeout for Kafka admin client calls used in topic creation using `quarkus.kafka.devservices.topic-partitions-timeout`, it defaults to 2 seconds.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Você pode configurar o tempo limite para as chamadas do client admin do Kafka utilizadas na criação de tópicos utilizando `quarkus.kafka.devservices.topic-partitions-timeout`. A predefinição é de 2 segundos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can control whether and how the transaction is started with parameters on `@Transactional`:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Você pode controlar se e como a transação é iniciada com parâmetros em '@Transactional':</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can disable the preloading of classes using:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Você pode desativar o pré-carregamento de classes utilizando:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can disable this feature using:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Você pode desativar esta funcionalidade utilizando:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can easily filter all registered beans via the convenient `BeanStream` returned from the `ValidationPhaseBuildItem.getContext().beans()` method.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Você pode filtrar facilmente todos os beans registrados através do prático `BeanStream` retornado pelo método `ValidationPhaseBuildItem.getContext().beans()`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can easily mock an HTTP Server with Wiremock.
The xref:rest-client.adoc#using-a-mock-http-server-for-tests[Wiremock section of the Quarkus - Using the REST Client]
describes how to set it up in detail.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Você pode facilmente simular um servidor HTTP com o Wiremock. A xref:rest-client.adoc#using-a-mock-http-server-for-tests[seção Wiremock do Quarkus - Usando o Cliente REST] descreve detalhadamente como configurá-lo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can enable optimistic locking using:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>É possível ativar o bloqueio otimista utilizando:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can find more information about how to configure the native image building process in the xref:configuration-reference[Configuring the Native Executable] section below.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Você pode encontrar mais informações sobre como configurar o processo de construção de uma imagem nativa na secção  link:#configuration-reference[Configurando o executável nativo] abaixo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can find more information about how to deploy the application in Kubernetes in the xref:deploying-to-kubernetes.adoc#deployment[the Kubernetes guide].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Você pode encontrar mais informações sobre como implantar a aplicação no Kubernetes no link:deploying-to-kubernetes.html#deployment[guia Kubernetes].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can find the extension status on https://code.quarkus.io[code.quarkus.io] or in the extension link:/guides/[guides].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Você pode encontrar o status da extensão em https://code.quarkus.io[code.quarkus.io] ou no link da extensão:/guides/[guides].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can go to https://code.quarkus.io/[code.quarkus.io] to see if a particular extension is _stable_ (default) or _preview_.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Você pode ir para https://code.quarkus.io/[code.quarkus.io] para ver se uma determinada extensão é _stable_ (padrão) ou _preview_.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can make your extension support the xref:dev-ui-v2.adoc[Quarkus Dev UI] for a greater developer experience.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Você pode tornar a sua extensão compatível com a xref:dev-ui-v2.adoc[Quarkus Dev UI] para uma melhor experiência do desenvolvedor.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can narrow or filter the list using search (`--search` or `-s`).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>You can narrow or filter the list using search (`--search` or `-s`).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can pass extra parameter to upx, such as `--brute` or `--ultra-brute` using the `quarkus.native.compression.additional-args` parameter.
The value is a comma-separated list of arguments:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Você pode passar parâmetros adicionais para o upx, como `--brute` ou `--ultra-brute` , usando o parâmetro `quarkus.native.compression.additional-args` . O valor é uma lista de argumentos separados por vírgula:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can read more about UBI images on:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Você pode ler mais sobre as imagens UBI em:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can run the application as a conventional jar file.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Você pode executar a aplicação como um arquivo jar convencional.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can run the application using: `java -jar target/quarkus-app/quarkus-run.jar`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Você pode executar a aplicação utilizando: `java -jar target/quarkus-app/quarkus-run.jar`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can run these using Maven:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Você pode executá-los utilizando o Maven:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can see more information about the bootstrap by enabling additional logging. Simply run the Maven build with `-X` or `--debug` and grep the lines that contain `io.quarkus.arc`. In the xref:cdi-reference.adoc#dev-mode[development mode], you can use `quarkus.log.category."io.quarkus.arc.processor".level=DEBUG` and two special endpoints are also registered automatically to provide some basic debug info in the JSON format.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Você pode ver mais informações sobre o bootstrap ativando log adicional. Basta executar a construção do Maven com `-X` ou `--debug` e procurar as linhas que contêm `io.quarkus.arc`. No xref:cdi-reference.adoc#dev-mode[modo de desenvolvimento], você pode usar `quarkus.log.category."io.quarkus.arc.processor".level=DEBUG` e dois endpoints especiais também são registrados automaticamente para fornecer algumas informações básicas de depuração no formato JSON.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can set the `TRACE` level for the category `io.quarkus.arc.processor` and try to analyze the log output afterwards.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Pode definir o nível de `TRACE` para a categoria `io.quarkus.arc.processor` e tentar analisar a saída do log posteriormente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can then test the executable locally with sam local</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Você pode então testar o executável localmente com sam local</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can update or upgrade your {project-name} projects to the latest version of {project-name} by using an update command.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Você pode atualizar ou subir a versão dos seus projetos {project-name} para a versão mais recente de {project-name} utilizando um comando update.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can update the Java code as you see fit.  Once you've rebuilt, you can redeploy your lambda by executing the
`update` command.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Você pode atualizar o código Java conforme achar necessário. Após a reconstrução, você pode reimplantar o lambda executando o comando `update`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can use any of the Quarkus features in your function and benefit from the fast startup and low memory utilization. With Quarkus, you can embrace this new world without having to change your programming language.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Você pode usar qualquer um dos recursos do Quarkus em sua função e se beneficiar da inicialização rápida e da baixa utilização de memória. Com o Quarkus, você pode abraçar esse novo mundo sem ter que mudar sua linguagem de programação.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can use the JPA entity manager directly.  Panache proposes an alternative removing boilerplate and exposing an active record and repository models.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Você pode usar o gerenciador de entidade JPA diretamente.  Panache propõe uma alternativa removendo clichês e expondo uma solução active record e também modelado como um repositório.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can use the `io.quarkus.arc.runtime.BeanContainer` interface to interact with your extension beans. The following `configureBeans` methods illustrate interacting with the beans scanned for in the previous section:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Você pode utilizar a interface `io.quarkus.arc.runtime.BeanContainer` para interagir com os seus beans de extensão. Os seguintes métodos `configureBeans` ilustram a interação com os beans analisados na seção anterior:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You can use the following command as usual:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Você pode utilizar o seguinte comando como de costume:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You cannot use `UserTransaction` in a method having a transaction started by a `@Transactional` call.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Não é possível utilizar `UserTransaction` num método com uma transação iniciada por uma chamada `@Transactional`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You have found nowhere.&lt;br/&gt;The pathway to normal space&lt;br/&gt;is found in the nav.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Você não encontrou nenhum lugar.&lt;br/&gt;O caminho para o espaço normal&lt;br/&gt;é encontrado na navegação.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You have installed at least one extension that provides an `IdentityProvider` based on username and password, such as xref:security-jdbc.adoc[Elytron JDBC].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Você instalou pelo menos uma extensão que fornece um `IdentityProvider` baseado no usename e no password, como o  link:security-jdbc.html[Elytron JDBC].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You just need to run both applications using:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Você só precisa executar ambas as aplicações utilizando:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You may not specify any parameter to use the interactive mode: `mvn {quarkus-platform-groupid}:quarkus-maven-plugin:{quarkus-version}:create-extension -N`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Você não pode especificar qualquer parâmetro para utilizar o modo interativo: `mvn {quarkus-platform-groupid}:quarkus-maven-plugin:{quarkus-version}:create-extension -N`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You may want to use the `create-extension` mojo of `{quarkus-platform-groupid}:quarkus-maven-plugin` to create these Maven modules - see the next section.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Você pode querer utilizar o mojo `create-extension` de `{quarkus-platform-groupid}:quarkus-maven-plugin` para criar estes módulos Maven - ver a próxima seção.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You must also force your AWS service client for SQS, SNS, S3 et al., to use the URL Connection client,
which connects to AWS services over HTTPS, hence the inclusion of the SSL enabled property, as described in the xref:https[Using HTTPS or SSL/TLS] section above.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Você também deve forçar o seu cliente de serviço da AWS, para SQS, SNS, S3 e outros, a usar o cliente de conexão de URL, que se conecta aos serviços da AWS por HTTPS, daí a inclusão da propriedade SSL habilitada, conforme descrito na seção xref:[Usando HTTPS ou SSL/TLS] acima.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You need clustering support for your scheduled tasks? This guide explains how to use the Quartz extension for that.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Você precisa de suporte a clustering para suas tarefas agendadas? Este guia explica como usar a extensão Quartz para isso.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You often need to execute custom actions when the application starts and clean up everything when the application stops. This guide explains how to be notified when an application stops or starts.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Muitas vezes, você precisa executar ações personalizadas quando a aplicação é iniciada e limpar tudo quando o aplicativo para. Este guia explica como ser notificado quando um aplicativo para ou é iniciado.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You should see a JSON object containing some basic information about this extension.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Você deve ver um objeto JSON que contém algumas informações básicas sobre esta extensão.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You should see a line in the log for each class written to the directory:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Você deve ver uma linha no registro para cada classe escrita no diretório:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You will also need to configure the `maven-compiler-plugin` of the deployment module to detect the `quarkus-extension-processor` annotation processor.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Também será necessário configurar o `maven-compiler-plugin` do módulo de implantação para detectar o processador de anotações `quarkus-extension-processor`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You will need to apply the `io.quarkus.extension` plugin in the `runtime` module of your extension project.
The plugin includes the `extensionDescriptor` task that will generate `META-INF/quarkus-extension.properties` and `META-INF/quarkus-extension.yml` files.
The plugin also enables the `io.quarkus:quarkus-extension-processor` annotation processor in both `deployment` and `runtime` modules to collect and generate the rest of the xref:extension-metadata.adoc[Quarkus extension metadata].
The name of the deployment module can be configured in the plugin by setting the `deploymentModule` property. The property is set to `deployment` by default:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Você precisará aplicar o plug-in `io.quarkus.extension` no módulo `runtime` do seu projeto de extensão. O plug-in inclui a tarefa `extensionDescriptor` que gerará os arquivos `META-INF/quarkus-extension.properties` e `META-INF/quarkus-extension.yml`. O plug-in também habilita o processador de anotações `io.quarkus:quarkus-extension-processor` nos módulos `deployment` e `runtime` para coletar e gerar o restante dos xref:extension-metadata.adoc[metadados da extensão Quarkus]. O nome do módulo de implantação pode ser configurado no plug-in, definindo a propriedade `deploymentModule`. A propriedade é definida como `deployment` por padrão:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>You will need to include the `io.quarkus:quarkus-extension-maven-plugin` and configure the `maven-compiler-plugin` to detect the `quarkus-extension-processor` annotation processor to collect and generate the necessary xref:extension-metadata.adoc[Quarkus extension metadata] for the extension artifacts, if you are using the Quarkus parent pom it will automatically inherit the correct configuration.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Você precisa incluir o `io.quarkus:quarkus-extension-maven-plugin` e configurar o `maven-compiler-plugin` para detectar o processador de anotações `quarkus-extension-processor` para recolher e gerar os xref:extension-metadata.html[metadados de extensão Quarkus] necessários para os artefatos de extensão. Se estiver utilizando o pom principal do Quarkus, este herdará automaticamente a configuração correta.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Your `proto` file must not contain `option java_generic_services = true;`. https://developers.google.com/protocol-buffers/docs/reference/java-generated?hl=en#service[Generic services are deprecated] and are not compatible with Quarkus code generation plugins.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O seu arquivo `proto` não pode conter `option java_generic_services = true;`.  link:https://developers.google.com/protocol-buffers/docs/reference/java-generated?hl=en#service[Os serviços genéricos estão obsoletos] e não são compatíveis com os plugins de geração de código do Quarkus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Your extension can add additional, non-application endpoints to be served alongside endpoints
for Health, Metrics, OpenAPI, Swagger UI, etc.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Sua extensão pode adicionar endpoints adicionais que não sejam de aplicações para serem servidos juntamente com endpoints para Health, Metrics, OpenAPI, Swagger UI, etc.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Your extension is published in Maven Central</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A sua extensão é publicada no Maven Central</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Your extension project should be setup as a multi-module project with two submodules:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O seu projeto de extensão deve ser configurado como um projeto multi-módulo com dois submódulos:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Your extension repository is configured to use the xref:ecosystem-ci[Ecosystem CI].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O seu repositório de extensões está configurado para utilizar o xref:#ecosystem-ci[Ecosystem CI].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Your final archive will look like this:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O seu arquivo final terá o seguinte formato:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Your help is more than welcome! Don’t hesitate to join the crowd.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A sua ajuda é mais do que bem-vinda! Não hesite em juntar-se à multidão.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Your implemented provider must be a CDI bean.  Here's an example:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O seu provider implementado deve ser um bean CDI. Eis um exemplo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Your project might use an extension that is incompatible with the latest {project-name} version.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O seu projeto pode estar utilizando uma extensão que é incompatível com a versão mais recente do {project-name}.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Your runtime artifact should depend on `io.quarkus:quarkus-core`, and possibly the runtime artifacts of other Quarkus
modules if you want to use functionality provided by them.
Your deployment time module should depend on `io.quarkus:quarkus-core-deployment`, your runtime artifact,
and possibly the deployment artifacts of other Quarkus modules if you want to use functionality provided by them.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Seu artefato de tempo de execução deve depender de `io.quarkus:quarkus-core` e, possivelmente, dos artefatos de tempo de execução de outros módulos do Quarkus, se você quiser usar a funcionalidade fornecida por eles. Seu módulo de tempo de implantação deve depender de `io.quarkus:quarkus-core-deployment`, do seu artefato de tempo de execução e, possivelmente, dos artefatos de implantação de outros módulos do Quarkus, caso queira usar a funcionalidade fornecida por eles.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Zero config, live reload in the blink of an eye</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Configuração zero, recarga ao vivo em um piscar de olhos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>_Bootstrap_ configuration steps are executed during runtime-init *before* any of other runtime steps. This means that code executed as part of this step cannot access anything that gets initialized in runtime init steps (runtime synthetic CDI beans being one such example).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>As etapas de configuração _do bootstrap_ são executadas durante o runtime-init *antes de* qualquer outra etapa de tempo de execução. Isso significa que o código executado como parte dessa etapa não pode acessar nada que seja inicializado nas etapas de inicialização em tempo de execução (beans CDI sintéticos em tempo de execução são um exemplo disso).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>_Reactive_ is a set of principles to build robust, efficient, and concurrent applications and systems.
These principles let you handle more load than traditional approaches while using the resources (CPU and memory) more efficiently while also reacting to failures gracefully.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>_Reativo_ é um conjunto de princípios para criar aplicações e sistemas robustos, eficientes e concorrentes. Esses princípios permitem lidar com mais carga do que as abordagens tradicionais e, ao mesmo tempo, usar os recursos (CPU e memória) de forma mais eficiente e reagir a falhas com elegância.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>_Reason 1_: Class Is Not discovered</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>_Razão 1_: Classe Não Está Descoberta</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>_Reason 2_: Class Is Discovered but Has No Bean Defining Annotation</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>_Motivo 2_: A Classe É Descoberta mas Não Tem uma Anotação de Definição de Bean</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>_Reason 3_: Class Was Discovered and Has a Bean Defining Annotation but Was Removed</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>_Motivo 3_: A Classe Foi Descoberta e Tem uma Anotação que Define o Bean, mas Foi Removida</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>_Solution 1_: Use the `AutoAddScopeBuildItem`. This build item can be used to add a scope to a class that meets certain conditions.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>_Solução 1_: Utilizar o `AutoAddScopeBuildItem`. Este item de construção pode ser utilizado para adicionar um escopo a uma classe que satisfaça determinadas condições.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>_Solution 1_: `BeanDiscoveryFinishedBuildItem`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>_Solução 1_: `BeanDiscoveryFinishedBuildItem`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>_Solution 2_: If you need to process classes annotated with a specific annotation then it's possible to extend the set of bean defining annotations via the `BeanDefiningAnnotationBuildItem`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>_Solução 2_: Se precisar processar classes anotadas com uma anotação específica, é possível estender o conjunto de anotações que definem beans através do `BeanDefiningAnnotationBuildItem`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>_Solution 2_: `SynthesisFinishedBuildItem`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>_Solução 2_: `SynthesisFinishedBuildItem`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>_Solution_: If an extension needs to validate the deployment it should use the `ValidationPhaseBuildItem`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>_Solução_: Se uma extensão precisa validar a implantação, deve utilizar o `ValidationPhaseBuildItem`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>_Solution_: If you need to register a custom context, use the `ContextRegistrationPhaseBuildItem`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>_Solução_: Se for necessário registrar um contexto personalizado, utilize o `ContextRegistrationPhaseBuildItem`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>_Solution_: If you need to register a synthetic bean then use the `SyntheticBeanBuildItem`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>_Solução_: Se for necessário registrar um bean sintético, utilize o `SyntheticBeanBuildItem`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>_Solution_: If you need to register a synthetic observer, use the `ObserverRegistrationPhaseBuildItem`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>_Solução_: Se for necessário registrar um observador sintético, utilize o `ObserverRegistrationPhaseBuildItem`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>_Solution_: Use the `AdditionalBeanBuildItem` as described in xref:additional_bean_build_item[_Reason 1_: Class Is Not discovered].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>_Solução_: Utilize o `AdditionalBeanBuildItem` conforme descrito em xref:additional_bean_build_item[_Razão 1_: A Classe Não Foi Descoberta].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>_Solution_: Use the `AdditionalBeanBuildItem`.
This build item can be used to specify one or more additional classes to be analyzed during the discovery.
Additional bean classes are transparently added to the application index processed by the container.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>_Solução_ : Use o `AdditionalBeanBuildItem` . Esse item de construção pode ser usado para especificar uma ou mais classes adicionais a serem analisadas durante a descoberta. As classes de bean adicionais são adicionadas de forma transparente ao índice da aplicação processado pelo contêiner.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>_Solution_: You can inject the `CustomScopeAnnotationsBuildItem` in a build step and use the convenient methods such as `CustomScopeAnnotationsBuildItem.isScopeDeclaredOn()`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>_Solução_: Você pode injetar o `CustomScopeAnnotationsBuildItem` numa etapa de construção e utilizar os métodos convenientes, como `CustomScopeAnnotationsBuildItem.isScopeDeclaredOn()`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>_clear(name) {
    this.jsonRpc.clear({name: name}).then(jsonRpcResponse =&gt; { //&lt;1&gt;
        this._updateCache(jsonRpcResponse.result)
    });
}
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>_clear(name) {
    this.jsonRpc.clear({name: name}).then(jsonRpcResponse =&gt; { //&lt;1&gt;
        this._updateCache(jsonRpcResponse.result)
    });
}
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>_deprecated_ - During the readiness health check, the connector connects to the broker and retrieves the list of topics. This attribute specifies the maximum duration (in ms) for the retrieval. If exceeded, the channel is considered not-ready. Deprecated: Use 'health-topic-verification-timeout' instead.

Type: _long_</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>_deprecated_ - Durante a verificação de integridade de prontidão, o conector se conecta ao broker e recupera a lista de tópicos. Esse atributo especifica a duração máxima (em ms) para a recuperação. Se excedido, o canal é considerado não pronto. Preterido: use 'health-topic-verification-timeout' em vez disso.

Tipo: _long_</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>_deprecated_ - Whether the readiness check should verify that topics exist on the broker. Default to false. Enabling it requires an admin connection. Deprecated: Use 'health-topic-verification-enabled' instead.

Type: _boolean_</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>_deprecated_ - Se a verificação de prontidão deve verificar se os tópicos existem no broker. O padrão é false. Habilitá-lo requer uma conexão de administrador. Deprecated: use 'health-topic-verification-enabled' em vez disso.

Tipo: _boolean_</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>_info(position = null){
    notifier.showInfoMessage("This is an information message", position);
}
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>_info(position = null){
    notifier.showInfoMessage("This is an information message", position);
}
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`-Dquarkus.native.container-build=true` will produce an additional text file named `native-builder.image` holding the docker image name to be used to build the native image.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`-Dquarkus.native.container-build=true` produzirá um arquivo de texto adicional chamado `native-builder.image` com o nome da imagem docker a ser utilizada para construir a imagem nativa.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`/q/health`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`/q/health`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`/q/info`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`/q/info`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`/q/metrics`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`/q/metrics`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`/q/openapi`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`/q/openapi`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`10`: best compression (can be slow for big files)</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`10`: melhor compactação (pode ser lenta para pastas grandes)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`1`: faster compression</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`1`: compactação mais rápida</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`9`: better compression</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`9`: melhor compactação</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`@ClientHeaderParam(name = "Content-Type", value = "{calculateContentType}")` which ensures that the `Content-Type` header is created by calling the interface's `calculateContentType` default method.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`@ClientHeaderParam(name = "Content-Type", value = "{calculateContentType}")` que garante que o cabeçalho `Content-Type` é criado chamando o método padrão `calculateContentType` da interface.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`@ClientHeaderParam` can be used on the client interface and on methods. It can specify a constant header value...</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`@ClientHeaderParam` pode ser utilizado na interface do cliente e nos métodos. Pode especificar um valor de cabeçalho constante...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`@ConfigDocEnumValue` gives a way to explicitly customize the string displayed in the documentation when listing accepted values for an enum.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`@ConfigDocEnumValue` oferece uma maneira de personalizar explicitamente o texto exibido na documentação ao listar os valores aceitos para um enum.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`@Path`, `@GET` and `@QueryParam` are the standard Jakarta REST annotations used to define how to access the service</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`@Path`, `@GET` e `@QueryParam` são as anotações Jakarta REST padrão utilizadas para definir o modo de acesso ao serviço</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`@RegisterClientInterceptor` Example</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de `@RegisterClientInterceptor`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`@RegisterRestClient` allows Quarkus to know that this interface is meant to be available for
CDI injection as a REST Client</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`@RegisterRestClient` permite que o Quarkus saiba que essa interface deve estar disponível para injeção de CDI como um Cliente REST</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`@Transactional(MANDATORY)`: fails if no transaction was started ; works within the existing transaction otherwise.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`@Transactional(MANDATORY)`: falha se não tiver sido iniciada nenhuma transação; caso contrário, funciona dentro da transação existente.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`@Transactional(NEVER)`: if a transaction was started, raises an exception ; otherwise works with no transaction.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`@Transactional(NEVER)`: se foi iniciada uma transação, levanta uma exceção; caso contrário, funciona sem transação.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`@Transactional(NOT_SUPPORTED)`: if a transaction was started, suspends it and works with no transaction for the boundary of the method ; otherwise works with no transaction.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`@Transactional(NOT_SUPPORTED)`: Se uma transação foi iniciada, suspende-a e trabalha sem transação durante o limite do método; caso contrário, trabalha sem transação.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`@Transactional(REQUIRED)` (default): starts a transaction if none was started, stays with the existing one otherwise.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>'@Transactional(REQUIRED)' (padrão): inicia uma transação se nenhuma foi iniciada, permanece com a existente caso contrário.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`@Transactional(REQUIRES_NEW)`: starts a transaction if none was started ; if an existing one was started, suspends it and starts a new one for the boundary of that method.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>«@Transactional(REQUIRES_NEW)»: inicia uma transação se não tiver sido iniciada nenhuma; se um existente foi iniciado, suspende-o e inicia um novo para o limite desse método.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`@Transactional(SUPPORTS)`: if a transaction was started, joins it ; otherwise works with no transaction.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`@Transactional(SUPPORTS)`: se foi iniciada uma transação, junta-se a ela; caso contrário, não funciona com nenhuma transação.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`AdditionalBeanBuildItem.Builder` can be used for more complex use cases.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`AdditionalBeanBuildItem.Builder` pode ser utilizado para casos de uso mais complexos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`AdditionalBeanBuildItem` Example</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de `AdditionalBeanBuildItem`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`AnnotationsTransformerBuildItem` Example</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de `AnnotationsTransformerBuildItem`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`AutoAddScopeBuildItem` Example</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de `AutoAddScopeBuildItem`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`BUILD_AND_RUN_TIME_FIXED` and `RUN_TIME` config roots can be injected in any bean. `RUN_TIME` config roots should only be injected after the bootstrap though.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>As raízes de configuração `BUILD_AND_RUN_TIME_FIXED` e `RUN_TIME` podem ser injetadas em qualquer bean. No entanto, raízes de configuração `RUN_TIME` só devem ser injetadas após o bootstrap.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`BeanDefiningAnnotationBuildItem` Example</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de `BeanDefiningAnnotationBuildItem`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`BeanDiscoveryFinishedBuildItem` Example</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de `BeanDiscoveryFinishedBuildItem`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`BuildItem` instances should be immutable, as the producer/consumer model does not allow for mutation to be correctly
ordered. This is not enforced but failure to adhere to this rule can result in race conditions.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`BuildItem` devem ser imutáveis, pois o modelo produtor/consumidor não permite que a mutação seja ordenada corretamente. Isso não é imposto, mas a não observância dessa regra pode resultar em condições de corrida.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`Collection&lt;BeanInfo&gt;` containing all beans</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`Collection&lt;BeanInfo&gt;` contendo todos os beans</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`Collection&lt;BeanInfo&gt;` containing all the removed beans; see xref:cdi-reference.adoc#remove_unused_beans[Removing unused beans] for more information</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`Collection&lt;BeanInfo&gt;` contendo todos os beans removidos; para mais informações, ver xref:cdi-reference.adoc#remove_unused_beans[Removendo beans não utilizados]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`Collection&lt;InjectionPointInfo&gt;` containing all injection points</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`Collection&lt;InjectionPointInfo&gt;` contendo todos os pontos de injeção</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`Collection&lt;ObserverInfo&gt;` containing all observers</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`Collection&lt;ObserverInfo&gt;` contendo todos os observadores</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`Collection&lt;ScopeInfo&gt;` containing all scopes, including custom ones</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`Collection&lt;ScopeInfo&gt;` contendo todos os escopos, incluindo os personalizados</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`CompletionStage` (from the JDK)</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`CompletionStage` (do JDK)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`ConfiguredBean` will be processed by the CDI layer the same as a bean annotated with the CDI standard @ApplicationScoped.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`ConfiguredBean` será processado pela camada CDI da mesma forma que um bean anotado com a @ApplicationScoped padrão CDI.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`ContextRegistrationPhaseBuildItem` Example</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de `ContextRegistrationPhaseBuildItem`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`CustomScopeBuildItem` Example</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de `CustomScopeBuildItem`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`GeneratedBeanBuildItem` Example</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de `GeneratedBeanBuildItem`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`GrpcClientUtils` work with all flavors of clients.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`GrpcClientUtils` funciona com todas as variações de clientes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`IdentityProvider` converts the authentication credentials provided by `HttpAuthenticationMechanism` to a `SecurityIdentity` instance.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`IdentityProvider` converte as credenciais de autenticação fornecidas por `HttpAuthenticationMechanism` para uma instância `SecurityIdentity`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`InjectionPointTransformerBuildItem` Example</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de `InjectionPointTransformerBuildItem`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`InterceptorBindingRegistrarBuildItem` Example</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de `InterceptorBindingRegistrarBuildItem`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`Map&lt;DotName, ClassInfo&gt;` containing all interceptor bindings</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`Map&lt;DotName, ClassInfo&gt;` contendo todas os vínculos de interceptadores</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`Map&lt;DotName, ClassInfo&gt;` containing all qualifiers</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`Map&lt;DotName, ClassInfo&gt;` contendo todos os qualificadores</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`Map&lt;DotName, StereotypeInfo&gt;` containing all stereotypes</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`Map&lt;DotName, StereotypeInfo&gt;` contendo todos os estereótipos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`MultivaluedMap` allows you to send array values</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`MultivaluedMap` permite enviar valores de vetor</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`MyParser` is an alternative bean.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`MyParser` é um bean alternativo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`ObserverRegistrationPhaseBuildItem` Example</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de `ObserverRegistrationPhaseBuildItem`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`Optional&lt;MetricsCapabilityBuildItem&gt; metricsCapability` can be used in the build step to selectively control initialization of beans or the production of other build items. The Jaeger extension, for example, can use the following to control initialization of specialized Metrics API adapters:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`Optional&lt;MetricsCapabilityBuildItem&gt; metricsCapability` podem ser usados na etapa de construção para controlar seletivamente a inicialização de beans ou a produção de outros itens de construção. A extensão Jaeger, por exemplo, pode usar o seguinte para controlar a inicialização de adaptadores especializados da API de Métricas:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`QualifierRegistrarBuildItem` Example</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de `QualifierRegistrarBuildItem`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`QuarkusTransaction.disallowingExisting()`/`DISALLOW_EXISTING`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`QuarkusTransaction.disallowingExisting()`/ `DISALLOW_EXISTING`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`QuarkusTransaction.joiningExisting()`/`JOIN_EXISTING`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`QuarkusTransaction.joiningExisting()`/ `JOIN_EXISTING`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`QuarkusTransaction.requiringNew()`/`REQUIRE_NEW`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`QuarkusTransaction.requiringNew()`/ `REQUIRE_NEW`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`QuarkusTransaction.suspendingExisting()`/`SUSPEND_EXISTING`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`QuarkusTransaction.suspendingExisting()`/ `SUSPEND_EXISTING`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`RUNTIME_INIT` `SyntheticBeanBuildItem` Example</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de `RUNTIME_INIT` `SyntheticBeanBuildItem`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`ResourceAnnotationBuildItem` Example</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de `ResourceAnnotationBuildItem`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`ResponseExceptionMapper` also defines the `getPriority` method which is used in order to determine the priority with which `ResponseExceptionMapper` implementations will be called (implementations with a lower value for `getPriority` will be invoked first).
If `toThrowable` returns an exception, then that exception will be thrown. If `null` is returned, the next implementation of `ResponseExceptionMapper` in the chain will be called (if there is any).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`ResponseExceptionMapper` também define o método `getPriority` , que é usado para determinar a prioridade com que as implementações de `ResponseExceptionMapper` serão chamadas (as implementações com um valor menor para `getPriority` serão chamadas primeiro). Se `toThrowable` retornar uma exceção, essa exceção será lançada. Se `null` for retornado, a próxima implementação de `ResponseExceptionMapper` na cadeia será chamada (se houver alguma).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`ServiceProviderBuildItem` takes a list of service implementation classes as parameters: if
you are not reading them from the service file, make sure that they correspond to the service file contents
because the service file will still be read and used at run-time. This is not a substitute for writing a service
file.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`ServiceProviderBuildItem` recebe uma lista de classes de implementação de serviço como parâmetros: se você não as estiver lendo do arquivo de serviço, certifique-se de que elas correspondam ao conteúdo do arquivo de serviço, pois o arquivo de serviço ainda será lido e usado em tempo de execução. Isso não substitui a gravação de um arquivo de serviço.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`StereotypeRegistrarBuildItem` Example</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de `StereotypeRegistrarBuildItem`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`SynthesisFinishedBuildItem` Example</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de `SynthesisFinishedBuildItem`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`SyntheticBeanBuildItem` Example 1</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo 1 de `SyntheticBeanBuildItem`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`SyntheticBeanBuildItem` Example 2</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo 2 de `SyntheticBeanBuildItem`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`Template.data()` returns a new template instance that can be customized before the actual rendering is triggered.
In this case, we put the name value under the key `name`.
The data map is accessible during rendering.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O `Template.data()` retorna uma nova instância de modelo que pode ser configurado antes que a renderização. Neste caso, colocamos o valor do nome na chave `name`. O mapa de dados está acessível durante a renderização.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`Template.data()` returns a new template instance that can be customized before the actual rendering is triggered. In this case, we put the name value under the key `name`. The data map is accessible during rendering.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O `Template.data()` retorna uma nova instância de modelo que pode ser configurado antes que a renderização. Neste caso, colocamos o valor do nome na chave `name`. O mapa de dados está acessível durante a renderização.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`Templates.hello()` returns a new template instance that is returned from the resource method. Note that we don't trigger the rendering - this is done automatically by a special `ContainerResponseFilter` implementation.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`Templates.hello()` retorna uma nova instância de modelo que é gerada pelo método de recurso. Observe que não acionamos a renderização - isso é feito automaticamente por uma implementação especial de `ContainerResponseFilter`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`TieredCompilation` can also be interesting for regular Lambda functions.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`TieredCompilation` também pode ser interessante para funções Lambda regulares.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`TransformedAnnotationsBuildItem.getAnnotations()` will return a possibly transformed set of annotations.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`TransformedAnnotationsBuildItem.getAnnotations()` devolverá um conjunto de anotações possivelmente transformadas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`TransformedAnnotationsBuildItem` Example</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de `TransformedAnnotationsBuildItem`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`UnremovableBeanBuildItem` Example</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de `UnremovableBeanBuildItem`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`all` to also enable low level logging of the underlying libraries.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`all` para permitir também o registro de baixo nível das bibliotecas subjacentes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`api-only` only starts a Kubernetes API Server. If you need a fully-featured Kubernetes cluster that can spin up Pods, you can use `k3s` or `kind`. Note that they both requires to run in Docker privileged mode.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>'api-only' inicia apenas um Servidor de API Kubernetes. Se você precisa de um cluster Kubernetes totalmente funcional que possa criar Pods, você pode usar k3s ou kind. Observe que ambos requerem que sejam executados em modo privilegiado do Docker."</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`application.properties` Example</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Exemplo de `application.properties`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`bootstrap-example.sh` - example bootstrap script for native deployments</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`bootstrap-example.sh` - exemplo de script de inicialização para implementações nativas</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`cacerts` must be added to `function.zip`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`cacerts` deve ser adicionado a `function.zip`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`context.methodParameters().get(1).value()` which allows the `calculateContentType` method to obtain the proper method parameter passed to the REST Client method.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`context.methodParameters().get(1).value()` que permite que o método `calculateContentType` obtenha o parâmetro de método correto passado para o método do Cliente REST.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`description` (unless you have it already set in the ``runtime/pom.xml``'s `&lt;description&gt;` element, which is the recommended approach)</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`description` (a menos que já esteja definido no elemento `&lt;description&gt;` do `runtime/pom.xml`, que é a abordagem recomendada)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`enable` - a name segment which corresponds to `enable` field in `FileConfig`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`enable` - um segmento de nome que corresponde ao campo `enable` em `FileConfig`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`file` - a name segment which corresponds to the `file` field in this class,</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`file` - um segmento de nome que corresponde ao campo `file` desta classe,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`function.zip` - lambda deployment file</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`function.zip` - arquivo de deployment lambda</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`getting-started-1.0.0-SNAPSHOT.jar` - containing just the classes and resources of the projects, it's the regular
artifact produced by the Maven build - it is *not* the runnable jar;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`getting-started-1.0.0-SNAPSHOT.jar` - contendo apenas as classes e os recursos dos projetos, é o artefato regular
produzido pela compilação do Maven - *não* é o jar executável;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`hello` is the name used in the `@GrpcClient` annotation.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`hello` é o nome utilizado na anotação `@GrpcClient`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`host` configures the service host (here it's localhost).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`host` configura o host do serviço (aqui é localhost).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`if` is a basic control flow section.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`if` é uma instrução básica do fluxo de controle.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`io.quarkus.amazon.lambda.http.CognitoPrincipal`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`io.quarkus.amazon.lambda.http.CognitoPrincipal`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`io.quarkus.amazon.lambda.http.CustomPrincipal`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`io.quarkus.amazon.lambda.http.CustomPrincipal`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`io.quarkus.amazon.lambda.http.IAMPrincipal`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`io.quarkus.amazon.lambda.http.IAMPrincipal`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`io.quarkus.arc.deployment.GeneratedBeanGizmoAdaptor` makes it easy to produce ``GeneratedBeanBuildItem``s from Gizmo constructs.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`io.quarkus.arc.deployment.GeneratedBeanGizmoAdaptor` facilita a produção de ``GeneratedBeanBuildItem``s a partir de constructos Gizmo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`io.quarkus.deployment.builditem.ExtensionSslNativeSupportBuildItem`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`io.quarkus.deployment.builditem.ExtensionSslNativeSupportBuildItem`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`io.quarkus.deployment.builditem.NativeImageEnableAllCharsetsBuildItem`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`io.quarkus.deployment.builditem.NativeImageEnableAllCharsetsBuildItem`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`io.quarkus.deployment.builditem.nativeimage.NativeImageConfigBuildItem`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`io.quarkus.deployment.builditem.nativeimage.NativeImageConfigBuildItem`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`io.quarkus.deployment.builditem.nativeimage.NativeImageResourceBuildItem`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`io.quarkus.deployment.builditem.nativeimage.NativeImageResourceBuildItem`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`io.quarkus.deployment.builditem.nativeimage.NativeImageResourceBundleBuildItem`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`io.quarkus.deployment.builditem.nativeimage.NativeImageResourceBundleBuildItem`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`io.quarkus.deployment.builditem.nativeimage.NativeImageResourceDirectoryBuildItem`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`io.quarkus.deployment.builditem.nativeimage.NativeImageResourceDirectoryBuildItem`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`io.quarkus.deployment.builditem.nativeimage.NativeImageSystemPropertyBuildItem`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`io.quarkus.deployment.builditem.nativeimage.NativeImageSystemPropertyBuildItem`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`io.quarkus.deployment.builditem.nativeimage.RuntimeInitializedClassBuildItem`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`io.quarkus.deployment.builditem.nativeimage.RuntimeInitializedClassBuildItem`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`io.quarkus.deployment.builditem.nativeimage.RuntimeReinitializedClassBuildItem`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`io.quarkus.deployment.builditem.nativeimage.RuntimeReinitializedClassBuildItem`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`io.quarkus.deployment.recording.RecorderContext` provides some convenience methods to enhance bytecode recording,
this includes the ability to register creation functions for classes without no-arg constructors, to register an object
substitution (basically a transformer from a non-serializable object to a serializable one and vice versa), and to create
a class proxy. This interface can be directly injected as a method parameter into any `@Record` method.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`io.quarkus.deployment.recording.RecorderContext` fornece alguns métodos de conveniência para aprimorar a gravação de bytecode, o que inclui a capacidade de registrar funções de criação para classes sem construtores sem argumento, registrar uma substituição de objeto (basicamente um transformador de um objeto não serializável para um serializável e vice-versa) e criar um proxy de classe. Essa interface pode ser injetada diretamente como um parâmetro de método em qualquer método `@Record`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`libsunec.so` must be added to `function.zip`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`libsunec.so` deve ser adicionado a `function.zip`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`log` - a name segment which corresponds to the prefix set in the interface annotated with `@ConfigMapping`,</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`log` - um segmento de nome que corresponde ao prefixo definido na interface anotada com `@ConfigMapping`,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`manage.sh` - wrapper around aws lambda cli calls</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`manage.sh` - script para chamadas do lambda através da AWS CLI</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`manage.sh` supports four operation:  `create`, `delete`, `update`, and `invoke`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`manage.sh` suporta quatro operações: `create` , `delete` , `update` , e `invoke`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`mp.messaging.[outgoing|incoming].{channel-name}.property=value`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`mp.messaging.[outgoing|incoming].{channel-name}.property=value`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`name`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`name`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`opts=optional` is mandatory to not fail the build if only part of the configuration documentation has been generated.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`opts=optional` é obrigatório para não falhar a construção se apenas parte da documentação de configuração tiver sido gerada.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`quarkus-maven-plugin` retrieves a version of `protoc` (the protobuf compiler) from Maven repositories. The retrieved version matches your operating system and CPU architecture.
If this retrieved version does not work in your context, you can either force to use a different OS classifier with
`-Dquarkus.grpc.protoc-os-classifier=your-os-classifier` (e.g. `osx-x86_64`).
You can also download the suitable binary and specify the location via
`-Dquarkus.grpc.protoc-path=/path/to/protoc`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O `quarkus-maven-plugin` recupera uma versão do `protoc` (o compilador protobuf) dos repositórios Maven. A versão recuperada corresponde ao seu sistema operacional e arquitetura de CPU. Se essa versão recuperada não funcionar no seu contexto, você pode forçar o uso de um classificador de sistema operacional diferente com `-Dquarkus.grpc.protoc-os-classifier=seu-classificador-de-os` (por exemplo, `osx-x86_64`). Você também pode baixar o binário adequado e especificar a localização via `-Dquarkus.grpc.protoc-path=/caminho/para/protoc`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`quarkus-my-ext-deployment` in the `extensions/my-ext/deployment` directory; a basic `MyExtProcessor` class is generated in this module.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`quarkus-my-ext-deployment` no diretório `extensions/my-ext/deployment`; neste módulo é gerada uma classe básica `MyExtProcessor`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`quarkus-my-ext-deployment` is added to the `&lt;dependencyManagement&gt;` of the Quarkus BOM (Bill of Materials) `bom/application/pom.xml`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`quarkus-my-ext-deployment` é adicionado ao `&lt;dependencyManagement&gt;` do BOM (Bill of Materials) do Quarkus `bom/application/pom.xml`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`quarkus-my-ext-integration-test` in the `integration-tests/my-ext/deployment` directory; an empty Jakarta REST Resource class and two test classes (for JVM mode and native mode) are generated in this module.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`quarkus-my-ext-integration-test` no diretório `integration-tests/my-ext/deployment`; uma classe de recurso Jakarta REST vazia e duas classes de teste (para o modo JVM e o modo nativo) são geradas neste módulo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`quarkus-my-ext-integration-test` is added to the `&lt;modules&gt;` of `quarkus-integration-tests-parent`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`quarkus-my-ext-integration-test` é adicionado ao sítio `&lt;modules&gt;` de `quarkus-integration-tests-parent`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`quarkus-my-ext-parent` in the `extensions/my-ext` directory</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`quarkus-my-ext-parent` no diretório `extensions/my-ext`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`quarkus-my-ext-parent` is added to the `&lt;modules&gt;` of `quarkus-extensions-parent`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`quarkus-my-ext-parent` é adicionado ao `&lt;modules&gt;` do `quarkus-extensions-parent`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`quarkus-my-ext` in the `extensions/my-ext/runtime` directory</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`quarkus-my-ext` no diretório `extensions/my-ext/runtime`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`quarkus-my-ext` is added to the `&lt;dependencyManagement&gt;` of the Quarkus BOM (Bill of Materials) `bom/application/pom.xml`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`quarkus-my-ext` é adicionado ao `&lt;dependencyManagement&gt;` do BOM (Bill of Materials) do Quarkus `bom/application/pom.xml`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`quarkus.amqp.devservices.enabled` is set to `false`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`quarkus.amqp.devservices.enabled` é definido como `false`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`quarkus.container-image.build=true` instructs Quarkus to create a container-image using the final application artifact (which is the native executable in this case)</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`quarkus.container-image.build=true` instrui o Quarkus para criar um container-image utilizando o artefato final da aplicação (que, neste caso, é o executável nativo)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`quarkus.debug.generated-classes-dir` - to dump the generated classes, such as bean metadata</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`quarkus.debug.generated-classes-dir` - para despejar as classes geradas, tais como metadados de beans</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`quarkus.debug.generated-sources-dir` - to dump the ZIG files; ZIG file is a textual representation of the generated code that is referenced in the stack traces</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`quarkus.debug.generated-sources-dir` - para despejar os arquivos ZIG; o arquivo ZIG é uma representação textual do código gerado que é referenciado nos rastreamentos de pilha</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`quarkus.debug.transformed-classes-dir` - to dump the transformed classes, e.g. Panache entities</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`quarkus.debug.transformed-classes-dir` - para despejar as classes transformadas, por exemplo, entidades Panache</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`quarkus.kafka.devservices.enabled` is set to `false`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`quarkus.kafka.devservices.enabled` esteja definido como `false`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`quarkus.kubernetes-client.devservices.enabled` is set to `false`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`quarkus.kubernetes-client.devservices.enabled` esteja definido como `false`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`quarkus.native.container-build=true` allows for creating a Linux executable without GraalVM being installed (and is only necessary if you don't have GraalVM installed locally or your local operating system is not Linux)</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`quarkus.native.container-build=true` permite criar um executável Linux sem que o GraalVM esteja instalado (e só é necessário se não tiver o GraalVM instalado localmente ou se o seu sistema operacional local não for Linux)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`quarkus.pulsar.devservices.enabled` is set to `false`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`quarkus.pulsar.devservices.enabled` é definido como `false`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`quarkus.rest-client.&lt;client-prefix&gt;.follow-redirects` to enable redirection for a specific REST client.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`quarkus.rest-client.&lt;client-prefix&gt;.follow-redirects` para ativar o redirecionamento para um cliente REST específico.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`quarkus.rest-client.client-prefix.connect-timeout` to configure the connect timeout in milliseconds.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`quarkus.rest-client.client-prefix.connect-timeout` para configurar o tempo limite de conexão em milissegundos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`quarkus.rest-client.client-prefix.max-redirects` to limit the number of redirects.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`quarkus.rest-client.client-prefix.max-redirects` para limitar o número de redirecionamentos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`quarkus.rest-client.follow-redirects` to enable redirection for all REST clients.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`quarkus.rest-client.follow-redirects` para ativar o redirecionamento para todos os clientes REST.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`quarkus:dev` runs Quarkus in development mode. This enables live reload with background compilation, which means
that when you modify your Java files and/or your resource files and refresh your browser, these changes will automatically take effect.
This works too for resource files like the configuration property file.
Refreshing the browser triggers a scan of the workspace, and if any changes are detected, the Java files are recompiled
and the application is redeployed; your request is then serviced by the redeployed application. If there are any issues
with compilation or deployment an error page will let you know.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`quarkus:dev` executa o Quarkus no modo de desenvolvimento. Isso habilita recarregamento automático com compilação em segundo plano, o que significa que,
ao modificar seus arquivos Java e/ou seus arquivos de recursos e atualizar seu navegador, essas alterações entrarão automaticamente em vigor.
Isso também funciona para arquivos de recursos, como o arquivo de configuração (properties) .
Ao atualizar o navegador, é disparada uma verificação no espaço de trabalho e, se forem detectadas alterações, os arquivos Java são recompilados
e a aplicação é redeployada; seu request é então atendido pela aplicação redeployada. Se houver problemas
com a compilação ou o deployment, uma página de erro informará você.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`quarkus` - a namespace claimed by Quarkus which is a prefix for `@ConfigMapping` interfaces,</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`quarkus` - um namespace reivindicado pelo Quarkus que é um prefixo para as interfaces `@ConfigMapping`,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`quote-requests` -&gt; RabbitMQ queue from which we read the quote requests</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`quote-requests` → Fila RabbitMQ a partir da qual lemos os pedidos de cotação</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`quotes` -&gt; RabbitMQ exchange in which we write the quotes</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`quotes` → Bolsa RabbitMQ na qual escrevemos as cotações</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`request-response` to log the request and response contents, or</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`request-response` para registrar o conteúdo da requisição e da resposta, ou</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`requestContext.authorizer.claims.cognito:username`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`requestContext.authorizer.claims.cognito:username`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`requestContext.authorizer.iam.userId`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`requestContext.authorizer.iam.userId`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`requestContext.authorizer.jwt.claims.cognito:username`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`requestContext.authorizer.jwt.claims.cognito:username`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`requestContext.authorizer.lambda.principalId`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`requestContext.authorizer.lambda.principalId`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`sam.jvm.yaml` - (optional) for use with sam cli and local testing</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`sam.jvm.yaml` - (opcional) para utilização com SAM CLI e testes locais</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`sam.jvm.yaml` - sam cli deployment script</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`sam.jvm.yaml` - script de deployment do sam cli</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`sam.native.yaml` - (optional) for use with sam cli and native local testing</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`sam.native.yaml` - (opcional) para utilização com SAM CLI e testes locais nativos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`sam.native.yaml` - sam cli deployment script for native</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`sam.native.yaml` - script de deployment do sam cli para nativo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`upx` can compress executables using a different architecture and OS than your host machine. For example, `upx` on a macOS machine can compress a Linux 64-bits executables.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`upx` pode comprimir executáveis utilizando uma arquitetura e um sistema operacional diferentes dos da sua máquina anfitriã. Por exemplo, `upx` numa máquina macOS pode compactar um executável Linux de 64 bits.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`{name}` is a value expression that is evaluated when the template is rendered.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>`{name}` é uma expressão de valor que é avaliada quando o modelo é processado.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>a blocking stub using the gRPC API,</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>um stub bloqueante utilizando a API gRPC,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>a few things that don't make sense for a non-blocking implementations, such as setting the `ExecutorService`, don't work</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>algumas coisas que não fazem sentido para implementações não blocantes, como a definição do `ExecutorService`, não funcionam</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>a landing page that is accessible on `http://localhost:8080` after starting the application</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>uma landing page acessível em `http://localhost:8080` depois de iniciar a aplicação</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>a reactive stub based on Mutiny,</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>um stub reativo baseado no Mutiny,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>a service interface using the Mutiny API,</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>uma interface de serviço utilizando a API Mutiny,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>a valid Kube config file is found and `quarkus.kubernetes-client.devservices.override-kubeconfig` is not set to `true`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Um arquivo de configuração Kube válido seja encontrado e `quarkus.kubernetes-client.devservices.override-kubeconfig` não está definido como `true`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>admin
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>admin
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>all</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>todos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>all the Reactive Messaging AMQP channels have the `host` or `port` attributes set</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>todos os canais AMQP de mensagens reativas tenham os atributos `host` ou `port` definidos</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>all the Reactive Messaging Kafka channels have the `bootstrap.servers` attribute set</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>todos os canais Kafka de mensagens reativas tenham o atributo `bootstrap.servers` definido</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>all the Reactive Messaging Pulsar channels have the `serviceUrl` attribute set</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>todos os canais Pulsar de mensagens reativas têm o atributo `serviceUrl` definido</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>all-builditems.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>all-builditems.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>all-config.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>all-config.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>allows plain-text communication as well as TLS, and TLS with mutual authentication</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>permite comunicação em texto simples, bem como TLS, e TLS com autenticação mútua</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>alt-languages</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>alt-languages</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>alt-languages, data</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>alt-languages, data</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>alternative-languages</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>alternative-languages</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>amazon-lambda-http.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>amazon-lambda-http.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>amazon-lambda.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>amazon-lambda.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>amazon-snapstart.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>amazon-snapstart.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>amqp-dev-services.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>amqp-dev-services.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>amqp-reference.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>amqp-reference.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>amqp.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>amqp.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>an `enforcedPlatform` directive for the Quarkus BOM</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>uma diretiva `enforcedPlatform` para o Quarkus BOM</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>an `org.acme.GreetingResource` resource exposed on `/hello`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>um resource `org.acme.GreetingResource` exposto em `/hello`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>an associated unit test</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>um teste unitário associado</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>analyze the concept from multiple perspectives and draw comparisons with alternative concepts discuss if it is relevant and useful for the reader's understanding.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>analisar o conceito a partir de múltiplas perspectivas e estabelecer comparações com conceitos alternativos discutir se é relevante e útil para a compreensão do leitor.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>and more</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>e muito mais…</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>ansible.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>ansible.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>apicurio-registry-dev-services.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>apicurio-registry-dev-services.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>appcds.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>appcds.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>architecture</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>architecture</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>are adaptable to real-world use cases.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>são adaptáveis a casos de uso no mundo real.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>are concise and to the point. They state, describe, and inform.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>são concisos e diretos. Afirmam, descrevem e informam.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>are consistent (to the extent possible) with other reference guides.
Following the template helps here.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>são consistentes (na medida do possível) com outros guias de referência.
Seguir o modelo ajuda nesse caso.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>are kept up to date. While configuration reference material is generated,
extension references that describe how configuration should be applied must be accurate to be useful.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>são mantidos atualizados. Enquanto o material de referência de configuração é gerado,
as referências de extensão que descrevem como a configuração deve ser aplicada devem ser precisas para serem úteis.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>are practical (rather than complete).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>são práticas (e não completas).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>are reliable and consistent (they work for all users, every time).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>são fiáveis e coerentes (funcionam para todos os usuários, sempre).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>ask an extension to do work for another extension: e.g. an extension wanting to define a new CDI bean and asking the ArC extension
to do so</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>solicitar que uma extensão faça o trabalho para outra extensão: por exemplo, uma extensão que deseja definir um novo bean CDI e solicita que a extensão ArC o faça</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>assume you have enough context to begin the task.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>assumir que tem contexto suficiente para iniciar a tarefa.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>aws-lambda-http.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>aws-lambda-http.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>aws-lambda-snapstart.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>aws-lambda-snapstart.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>aws-lambda.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>aws-lambda.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>azure-functions-http.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>azure-functions-http.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>azure-functions.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>azure-functions.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>blaze-persistence.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>blaze-persistence.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>build-analytics.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>build-analytics.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>build.gradle</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>build.gradle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>building CLI tools, and you want to reduce the disk footprint,</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Criando ferramentas CLI, e se você pretende reduzir o espaço ocupado pelo disco,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>building small container images.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>construir pequenas imagens de containers.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>building-my-first-extension.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>building-my-first-extension.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>building-native-image.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>building-native-image.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>business-automation</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>business-automation</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>but users can also choose to expose one that might present a security risk under a different TCP port using a dedicated xref:management-interface-reference.adoc[management interface].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>mas os usuários também podem optar por expor um que possa representar um risco de segurança numa porta TCP diferente, utilizando uma  link:management-interface-reference.html[interface de gestão] dedicada.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>but... my hard disk on my machine was making a **lot** of noise during the test! The Quarkus result of *390.21 req/sec* is suspiciously similar to the comparison baseline of *336.86 req/sec*, and...</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>but... my hard disk on my machine was making a **lot** of noise during the test! The Quarkus result of *390.21 req/sec* is suspiciously similar to the comparison baseline of *336.86 req/sec*, and...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>by programmatically registering a `ClientHeadersFactory` or a `ReactiveClientHeadersFactory` with the `QuarkusRestClientBuilder.clientHeadersFactory(factory)` method</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>registrando programaticamente um `ClientHeadersFactory` ou um `ReactiveClientHeadersFactory` com o método `QuarkusRestClientBuilder.clientHeadersFactory(factory)`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>by registering a `ClientHeadersFactory` or a `ReactiveClientHeadersFactory` with the `@RegisterClientHeaders` annotation</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>registrando um `ClientHeadersFactory` ou um `ReactiveClientHeadersFactory` com a anotação `@RegisterClientHeaders`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>by specifying the value of the header by `@HeaderParam`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>especificando o valor do cabeçalho por `@HeaderParam`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>by specifying the value of the header with `@ClientHeaderParam`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>especificando o valor do cabeçalho com `@ClientHeaderParam`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>cache-redis-reference.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>cache-redis-reference.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>cache.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>cache.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>camel.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>camel.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>capabilities.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>capabilities.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>cardPageBuildItem.addBuildTimeData("somekey", somevalue);
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>cardPageBuildItem.addBuildTimeData("somekey", somevalue);
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>cardPageBuildItem.addPage(Page.quteDataPageBuilder("Qute data") // &lt;1&gt;
                .icon("font-awesome-solid:q")
                .templateLink("qute-jokes-template.html")); // &lt;2&gt;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>cardPageBuildItem.addPage(Page.quteDataPageBuilder("Qute data") // &lt;1&gt;
                .icon("font-awesome-solid:q")
                .templateLink("qute-jokes-template.html")); // &lt;2&gt;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>cardPageBuildItem.addPage(Page.rawDataPageBuilder("Raw data") // &lt;1&gt;
                .icon("font-awesome-brands:js")
                .buildTimeDataKey("someKey")); // &lt;2&gt;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>cardPageBuildItem.addPage(Page.rawDataPageBuilder("Raw data") // &lt;1&gt;
                .icon("font-awesome-brands:js")
                .buildTimeDataKey("someKey")); // &lt;2&gt;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>cardPageBuildItem.addPage(Page.tableDataPageBuilder("Table data") // &lt;1&gt;
                .icon("font-awesome-solid:table")
                .showColumn("timestamp") // &lt;2&gt;
                .showColumn("user") // &lt;2&gt;
                .showColumn("fullJoke") // &lt;2&gt;
                .buildTimeDataKey("someKey")); // &lt;3&gt;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>cardPageBuildItem.addPage(Page.tableDataPageBuilder("Table data") // &lt;1&gt;
                .icon("font-awesome-solid:table")
                .showColumn("timestamp") // &lt;2&gt;
                .showColumn("user") // &lt;2&gt;
                .showColumn("fullJoke") // &lt;2&gt;
                .buildTimeDataKey("someKey")); // &lt;3&gt;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>cardPageBuildItem.addPage(Page.webComponentPageBuilder() // &lt;1&gt;
                    .icon("font-awesome-solid:egg")
                    .componentLink("qwc-arc-beans.js") // &lt;2&gt;
                    .staticLabel(String.valueOf(beans.size())));
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>cardPageBuildItem.addPage(Page.webComponentPageBuilder() // &lt;1&gt;
                    .icon("font-awesome-solid:egg")
                    .componentLink("qwc-arc-beans.js") // &lt;2&gt;
                    .staticLabel(String.valueOf(beans.size())));
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>cardPageBuildItem.setCustomCard("qwc-mycustom-card.js");
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>cardPageBuildItem.setCustomCard("qwc-mycustom-card.js");
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>cassandra.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>cassandra.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>categories under which the extension should appear on https://code.quarkus.io[code.quarkus.io], could be omitted, in which case the extension will still be listed but not under any specific category</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>as categorias em que a extensão deve aparecer em https://code.quarkus.io[code.quarkus.io], podem ser omitidas, caso em que a extensão continuará a ser listada mas não numa categoria específica</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>cdi-integration.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>cdi-integration.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>cdi-reference.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>cdi-reference.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>cdi.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>cdi.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>centralized-log-management.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>centralized-log-management.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>class-loading-reference.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>class-loading-reference.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>cli-tooling.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>cli-tooling.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>cloud</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>cloud</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>cloud, core</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>cloud, core</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>cloud, native</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>cloud, native</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>command-line</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>command-line</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>command-line, core</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>command-line, core</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>command-mode-reference.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>command-mode-reference.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>compatibility</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>compatibility</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>concepts</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>concepts</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>conditional-extension-dependencies.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>conditional-extension-dependencies.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>config-extending-support.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>config-extending-support.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>config-mappings.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>config-mappings.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>config-reference.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>config-reference.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>config-yaml</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>config-yaml</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>config-yaml.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>config-yaml.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>config.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>config.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>const storedHeight = this.storageControl.get("height"); // Get some value
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>const storedHeight = this.storageControl.get("height"); // Get some value
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>consume that database configuration (e.g. a connection pool extension or an ORM extension)</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>consumir essa configuração de base de dados (por exemplo, uma extensão de pool de conexões ou uma extensão ORM)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>container-image.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>container-image.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>context-propagation.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>context-propagation.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>continuous-testing.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>continuous-testing.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>contributing</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>contributing</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>core</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>core</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>core, command-line</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>core, command-line</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>core, data, getting-started</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>core, data, getting-started</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>core, getting-started, observability</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>core, getting-started, observability</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>core, native, security</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>core, native, security</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>core, native, tooling</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>core, native, tooling</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>core, native, writing-extensions</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>core, native, writing-extensions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>core, writing-extensions</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>core, writing-extensions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>credentials-provider.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>credentials-provider.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>data</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>data</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>data, getting-started</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>data, getting-started</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>data, tooling</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>data, tooling</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>data, web</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>data, web</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>databases-dev-services.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>databases-dev-services.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>datasource.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>datasource.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>datasources</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>datasources</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>dependencies {
    implementation enforcedPlatform("{quarkus-platform-groupid}:quarkus-bom:{quarkus-version}")
    implementation enforcedPlatform("{quarkus-platform-groupid}:quarkus-optaplanner-bom:{quarkus-version}")
    implementation 'io.quarkus:quarkus-resteasy-reactive'
    implementation 'io.quarkus:quarkus-resteasy-reactive-jackson'
    implementation 'org.optaplanner:optaplanner-quarkus'
    implementation 'org.optaplanner:optaplanner-quarkus-jackson'
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>dependencies {
    implementation enforcedPlatform("{quarkus-platform-groupid}:quarkus-bom:{quarkus-version}")
    implementation enforcedPlatform("{quarkus-platform-groupid}:quarkus-optaplanner-bom:{quarkus-version}")
    implementation 'io.quarkus:quarkus-resteasy-reactive'
    implementation 'io.quarkus:quarkus-resteasy-reactive-jackson'
    implementation 'org.optaplanner:optaplanner-quarkus'
    implementation 'org.optaplanner:optaplanner-quarkus-jackson'
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>deploy-kubernetes</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>deploy-kubernetes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>deploy-openshift</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>deploy-openshift</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>deploying-to-azure-cloud.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>deploying-to-azure-cloud.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>deploying-to-google-cloud.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>deploying-to-google-cloud.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>deploying-to-heroku.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>deploying-to-heroku.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>deploying-to-kubernetes.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>deploying-to-kubernetes.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>deploying-to-openshift.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>deploying-to-openshift.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>describes the concrete steps necessary to complete a task, but these steps
could be in the middle of a larger task.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>descrever as etapas concretas necessárias para concluir uma tarefa, mas essas etapas
 podem estar no meio de uma tarefa maior.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>dev-mode-differences.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>dev-mode-differences.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>dev-services.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>dev-services.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>dev-ui-controller-notifier.gif</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>dev-ui-controller-notifier.gif</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>dev-ui-extension-card-label-v2.png</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>dev-ui-extension-card-label-v2.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>dev-ui-extension-card-v2.png</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>dev-ui-extension-card-v2.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>dev-ui-extension-openapi-embed-v2.png</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>dev-ui-extension-openapi-embed-v2.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>dev-ui-extension-openapi-v2.png</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>dev-ui-extension-openapi-v2.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>dev-ui-jsonrpc-log-v2.png</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>dev-ui-jsonrpc-log-v2.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>dev-ui-log-control-v2.png</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>dev-ui-log-control-v2.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>dev-ui-overview-v2.png</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>dev-ui-overview-v2.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>dev-ui-qui-alert-v2.png</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>dev-ui-qui-alert-v2.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>dev-ui-qui-badge-v2.png</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>dev-ui-qui-badge-v2.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>dev-ui-qui-code-block-v2.png</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>dev-ui-qui-code-block-v2.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>dev-ui-raw-page-v2.png</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>dev-ui-raw-page-v2.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>dev-ui-table-page-v2.png</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>dev-ui-table-page-v2.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>dev-ui-v2.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>dev-ui-v2.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>dev-ui.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>dev-ui.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>do not explain concepts, they rely on other documents (like concepts) to do that.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>não explicar conceitos, eles dependem de outros documentos (como conceitos) para fazer isso.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>do not teach, instruct or include reference information.
If you need to refer to a tutorial, how-to, or reference guide, point the reader to where they can find it, but do not replicate that information directly in your concept guide.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>não ensine, instrua ou inclua informações de referência. Se precisar fazer referência a um tutorial, guia de instruções ou de referência, indique ao leitor onde ele pode encontrá-lo, mas não replique essas informações diretamente no seu guia conceitual.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>doc-concept</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>doc-concept</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>doc-concept.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>doc-concept.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>doc-contribute-docs-howto.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>doc-contribute-docs-howto.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>doc-contribute-howto</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>doc-contribute-howto</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>doc-create-tutorial</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>doc-create-tutorial</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>doc-create-tutorial.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>doc-create-tutorial.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>doc-reference</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>doc-reference</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>doc-reference.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>doc-reference.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>docker run --rm=true --name security-getting-started -e POSTGRES_USER=quarkus \
           -e POSTGRES_PASSWORD=quarkus -e POSTGRES_DB=elytron_security_jpa \
           -p 5432:5432 postgres:14.1
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>docker run --rm=true --name security-getting-started -e POSTGRES_USER=quarkus \
           -e POSTGRES_PASSWORD=quarkus -e POSTGRES_DB=elytron_security_jpa \
           -p 5432:5432 postgres:14.1
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>duplicated-context</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>duplicated-context</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>duplicated-context.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>duplicated-context.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>e.g.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>por exemplo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>e.g.,</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>por exemplo,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>each field of the response type has to be annotated with `@PartType` - fields without this annotation are ignored</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>cada campo do tipo de resposta tem de ser anotado com `@PartType` - os campos sem esta anotação são ignorados</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>either `quarkus-resteasy-reactive-qute` if you are using RESTEasy Reactive:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>ou `quarkus-resteasy-reactive-qute` se estiver utilizando o RESTEasy Reactive:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>elasticsearch-dev-services.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>elasticsearch-dev-services.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>elasticsearch.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>elasticsearch.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>enable the _development mode_ (hot reload)</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>ativar o _modo de desenvolvimento_ (hot reload)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>example `Dockerfile` files for both `native` and `jvm` modes in `src/main/docker`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>exemplo de arquivos `Dockerfile` para os modos `native` e `jvm` em `src/main/docker`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>export class QwcJokesLog extends LitElement {
    jsonRpc = new JsonRpc(this);
    logControl = new LogController(this);
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>export class QwcJokesLog extends LitElement {
    jsonRpc = new JsonRpc(this);
    logControl = new LogController(this);
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>export class QwcMyExtensionPage extends QwcHotReloadElement {
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>export class QwcMyExtensionPage extends QwcHotReloadElement {
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>expose the fact that a database configuration exists</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>expor o fato de existir uma configuração da base de dados</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>extension-codestart.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>extension-codestart.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>extension-metadata.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>extension-metadata.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>extension-registry-user.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>extension-registry-user.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>extensions can produce a list of classes (using the `io.quarkus.deployment.builditem.PreloadClassBuildItem` build item)</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>as extensões podem produzir uma lista de classes (utilizando o item de compilação `io.quarkus.deployment.builditem.PreloadClassBuildItem` )</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>false</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>falso</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>files sent in multipart responses can only be parsed to `File`, `Path` and `FileDownload`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>os arquivos enviados em respostas multi-partes só podem ser analisados em `File`, `Path` e `FileDownload`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>flyway.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>flyway.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>focus on explaining a topic.
Their goal is to help the reader understand the concept.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>concentram-se na explicação de um tópico. Seu objetivo é ajudar o leitor a entender o conceito.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>focus on one way of doing the task.
Alternative approaches are explored in other document types (a how-to guide, for example).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>concentram-se em uma maneira de realizar a tarefa. Abordagens alternativas são exploradas em outros tipos
de documentos (um guia de instruções, por exemplo).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>focus on one way of doing the task. Alternative approaches are explored in other document types
(a how-to guide, for example).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>concentram-se em uma maneira de realizar a tarefa. Abordagens alternativas são exploradas em outros tipos
de documentos (um guia de instruções, por exemplo).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>footerPageBuildItem.addPage(Page.webComponentPageBuilder()
        .icon("font-awesome-regular:face-grin-tongue-wink")
        .title("Joke Log")
        .componentLink("qwc-jokes-log.js"));
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>footerPageBuildItem.addPage(Page.webComponentPageBuilder()
        .icon("font-awesome-regular:face-grin-tongue-wink")
        .title("Joke Log")
        .componentLink("qwc-jokes-log.js"));
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>footerProducer.produce(footerPageBuildItem);
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>footerProducer.produce(footerPageBuildItem);
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>from `quarkus` (Quarkus Core) or `quarkus/extensions` directory, it will use the 'Quarkus Core' extension layout and defaults.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>a partir do diretório `quarkus` (Quarkus Core) ou `quarkus/extensions`, ele utilizará a layout de extensão 'Quarkus Core' e os padrões.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>funqy-amazon-lambda-http.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>funqy-amazon-lambda-http.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>funqy-amazon-lambda.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>funqy-amazon-lambda.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>funqy-aws-lambda-http.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>funqy-aws-lambda-http.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>funqy-aws-lambda.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>funqy-aws-lambda.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>funqy-azure-functions-http.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>funqy-azure-functions-http.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>funqy-gcp-functions-http.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>funqy-gcp-functions-http.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>funqy-gcp-functions.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>funqy-gcp-functions.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>funqy-http.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>funqy-http.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>funqy-knative-events.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>funqy-knative-events.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>funqy.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>funqy.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>gRPC</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>gRPC</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>gRPC Client metrics</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Métricas de Cliente gRPC</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>gRPC Headers</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Cabeçalhos gRPC</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>gRPC allows sending and receiving streams:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O gRPC permite o envia e recebimento de fluxos:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>gRPC client metrics are automatically enabled when the application also uses the xref:telemetry-micrometer.adoc[`quarkus-micrometer`] extension.
Micrometer collects the metrics of all the gRPC clients used by the application.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>As métricas do cliente gRPC são habilitadas automaticamente quando a aplicação também utiliza a extensão xref:telemetry-micrometer.adoc[quarkus-micrometer]. O Micrometer coleta as métricas de todos os clientes gRPC usados pelo aplicação.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>gRPC clients can be injected in your application code.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Os clientes gRPC podem ser injectados no código da sua aplicação.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>gRPC generation provides several stubs, providing different ways to consume a gRPC service.
You can inject:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A geração do gRPC fornece vários stubs, oferecendo diferentes maneiras de consumir um serviço gRPC. Você pode injetar:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>gcp-functions-http.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>gcp-functions-http.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>gcp-functions.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>gcp-functions.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>get the reader started (they do not create an expert).</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>servem para iniciar o leitor (não criam um especialista).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>getting-started</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>getting-started</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>getting-started, data</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>getting-started, data</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>getting-started, native</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>getting-started, native</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>getting-started, security</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>getting-started, security</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>getting-started-dev-services-tutorial</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>getting-started-dev-services-tutorial</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>getting-started-dev-services.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>getting-started-dev-services.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>getting-started-reactive.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>getting-started-reactive.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>getting-started-testing.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>getting-started-testing.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>getting-started.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>getting-started.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>git clone {quickstarts-clone-url}
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>git clone {quickstarts-clone-url}
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>global client proxy settings, with `quarkus.rest-client.proxy-address`, `quarkus.rest-client.proxy-user`, `quarkus.rest-client.proxy-password`, `quarkus.rest-client.non-proxy-hosts`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>definições globais de proxy de cliente, com `quarkus.rest-client.proxy-address`, `quarkus.rest-client.proxy-user`, `quarkus.rest-client.proxy-password`, `quarkus.rest-client.non-proxy-hosts`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>gradle-tooling</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>gradle-tooling</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>gradle-tooling.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>gradle-tooling.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>grpc-generation-reference.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>grpc-generation-reference.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>grpc-getting-started.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>grpc-getting-started.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>grpc-kubernetes.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>grpc-kubernetes.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>grpc-service-consumption.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>grpc-service-consumption.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>grpc-service-implementation.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>grpc-service-implementation.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>grpc-virtual-threads.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>grpc-virtual-threads.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>grpc-xds.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>grpc-xds.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>grpc.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>grpc.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>guide</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>guide</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>guide (walk-through) or demonstrate how to complete a task.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>guiar (walk-through) ou demonstrar como completar uma tarefa.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>heapdump</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>heapdump</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>here we use a manually created implementation of the client interface to replace the actual Client</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>aqui utilizamos uma implementação criada manualmente da interface do cliente para substituir a interface do cliente atual</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>hibernate-orm-panache-kotlin.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>hibernate-orm-panache-kotlin.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>hibernate-orm-panache.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>hibernate-orm-panache.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>hibernate-orm.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>hibernate-orm.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>hibernate-reactive-panache.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>hibernate-reactive-panache.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>hibernate-reactive.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>hibernate-reactive.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>hibernate-search-orm-elasticsearch.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>hibernate-search-orm-elasticsearch.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>how to compile your application natively</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>como compilar a sua aplicação nativamente</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>how to create and scaffold a new project</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>como criar e pré-definir um novo projeto</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>how to deal with extensions</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>como lidar com as extensões</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>how to develop your application in your IDE</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>como desenvolver a sua aplicação no seu IDE</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>how to enable live reload</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>como ativar o _live reload_</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>how to set up Quarkus tools in xref:ide-tooling.adoc[Visual Studio Code, Eclipse IDE, Eclipse Che and IntelliJ IDEA]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>como configurar as ferramentas Quarkus no  link:ide-tooling.html[Visual Studio Code, Eclipse IDE, Eclipse Che e IntelliJ IDEA]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>how to use the xref:cli-tooling.adoc[CLI] for your toolchain</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>como utilizar o  link:cli-tooling.html[CLI] para o seu conjunto de ferramentas</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>how to use xref:gradle-tooling.adoc[Gradle] as a build tool</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>como utilizar  link:gradle-tooling.html[o Gradle] como uma ferramenta de construção</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>how to use xref:maven-tooling.adoc[Maven] as a build tool</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>como utilizar  link:maven-tooling.html[o Maven] como ferramenta de construção</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>howto</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>howto</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>http-reference.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>http-reference.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>http://127.0.0.1:3000/hello</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>http://127.0.0.1:3000/hello</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>https://aws.amazon.com[An Amazon AWS account]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>link:https://aws.amazon.com[Uma conta Amazon AWS]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>https://catalog.redhat.com/software/container-stacks/detail/5ec53f50ef29fd35586d9a56[Red Hat Universal Base Image 8]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>link:https://catalog.redhat.com/software/container-stacks/detail/5ec53f50ef29fd35586d9a56[Imagem Base Universal da Red Hat]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>https://dl.acm.org/doi/10.1145/3583678.3596895[Considerations for integrating virtual threads in a Java framework: a Quarkus example in a resource-constrained environment]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>https://dl.acm.org/doi/10.1145/3583678.3596895[Considerações sobre a integração de threads virtuais num framework Java: um exemplo do Quarkus num ambiente com recursos limitados]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html[AWS CLI]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>link:https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html[CLI da AWS]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>link:https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[CLI DO AWS SAM]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI], for local testing</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>link:https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI], para testes locais</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>https://grpc.github.io/grpc/core/md_doc_grpc_xds_features.html[xDS gRPC] wrapper over https://github.com/grpc/grpc-java[grpc-java] with a separate Netty based gRPC server</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>link:https://grpc.github.io/grpc/core/md_doc_grpc_xds_features.html[xDS gRPC] wrapper sobre  link:https://github.com/grpc/grpc-java[grpc-java] com um servidor gRPC separado baseado no Netty</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>https://grpc.io/[gRPC] is a high-performance RPC framework.
It can efficiently connect services implemented using various languages and frameworks.
It is also applicable in the last mile of distributed computing to connect devices, mobile applications, and browsers to backend services.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>link:https://grpc.io/[O gRPC] é um framework RPC de alto desempenho. Ele pode conectar de forma eficiente serviços implementados usando várias linguagens e frameworks. Além disso é aplicável na fase final da computação distribuída para conectar dispositivos, aplicativos móveis e navegadores a serviços de back-end.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-amazon-services/dev/amazon-dynamodb.html</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-amazon-services/dev/amazon-dynamodb.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-amazon-services/dev/amazon-iam.html</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-amazon-services/dev/amazon-iam.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-amazon-services/dev/amazon-kms.html</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-amazon-services/dev/amazon-kms.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-amazon-services/dev/amazon-s3.html</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-amazon-services/dev/amazon-s3.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-amazon-services/dev/amazon-ses.html</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-amazon-services/dev/amazon-ses.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-amazon-services/dev/amazon-sns.html</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-amazon-services/dev/amazon-sns.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-amazon-services/dev/amazon-sqs.html</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-amazon-services/dev/amazon-sqs.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-amazon-services/dev/amazon-ssm.html</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-amazon-services/dev/amazon-ssm.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-config-extensions/dev/consul.html</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-config-extensions/dev/consul.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-google-cloud-services/main/bigquery.html</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-google-cloud-services/main/bigquery.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-google-cloud-services/main/bigtable.html</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-google-cloud-services/main/bigtable.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-google-cloud-services/main/firestore.html</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-google-cloud-services/main/firestore.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-google-cloud-services/main/index.html</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-google-cloud-services/main/index.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-google-cloud-services/main/pubsub.html</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-google-cloud-services/main/pubsub.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-google-cloud-services/main/secretmanager.html</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-google-cloud-services/main/secretmanager.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-google-cloud-services/main/spanner.html</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-google-cloud-services/main/spanner.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-google-cloud-services/main/storage.html</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-google-cloud-services/main/storage.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-jgit/dev/index.html</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-jgit/dev/index.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-logging-sentry/dev/index.html</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-logging-sentry/dev/index.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-neo4j/dev/index.html</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-neo4j/dev/index.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-reactive-messaging-http/dev/reactive-messaging-http.html</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-reactive-messaging-http/dev/reactive-messaging-http.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-reactive-messaging-http/dev/reactive-messaging-websocket.html</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-reactive-messaging-http/dev/reactive-messaging-websocket.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-tika/dev/index.html</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-tika/dev/index.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-vault/dev/index.html</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-vault/dev/index.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-vault/dev/vault-auth.html</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-vault/dev/vault-auth.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-vault/dev/vault-datasource.html</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-vault/dev/vault-datasource.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-vault/dev/vault-pki.html</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-vault/dev/vault-pki.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-vault/dev/vault-transit.html</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>https://quarkiverse.github.io/quarkiverse-docs/quarkus-vault/dev/vault-transit.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>https://upx.github.io/[Ultimate Packer for eXecutables (UPX)] is a compression tool reducing the size of executables.
Quarkus can compress the produced native executable to reduce its size.
Such compression is interesting when:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O link:https://upx.github.io/[Ultimate Packer for eXecutables (UPX)] é uma ferramenta de compactação que reduz o tamanho dos executáveis. O Quarkus pode compactar o executável nativo produzido para reduzir seu tamanho. Essa compactação é interessante quando:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>https://www.graalvm.org[GraalVM] is a universal virtual machine for running applications written in various different languages, as well as providing the ability to compile JVM bytecode to a native executable (this native executable runs a special virtual machine called SubstrateVM). These native executables start much faster and can use a lot less memory than a traditional JVM, however not every JVM feature is supported, and some are more limited than normal.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>https://www.graalvm.org[GraalVM] é uma máquina virtual universal para executar aplicações escritas em várias linguagens diferentes, além de fornecer a capacidade de compilar bytecode JVM para um executável nativo (este executável nativo executa uma máquina virtual especial chamada SubstrateVM). Esses executáveis nativos iniciam muito mais rápido e podem usar muito menos memória do que uma JVM tradicional, no entanto, nem todos os recursos da JVM são suportados, e alguns são mais limitados do que o normal.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>https://www.redhat.com/en/blog/introducing-red-hat-universal-base-image[Introduction to Universal Base Image]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>link:https://www.redhat.com/en/blog/introducing-red-hat-universal-base-image[Introdução à imagem base universal]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>ide-tooling.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>ide-tooling.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>if you see `java.security.InvalidAlgorithmParameterException: the trustAnchors parameter must be non-empty` or similar SSL error, due to the current status of GraalVM,
there is some additional work to bundle the `function.zip`, as below.  For more information, please see the xref:native-and-ssl.adoc[Quarkus Native SSL Guide].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Se você vir `java.security.InvalidAlgorithmParameterException: the trustAnchors parameter must be non-empty` ou erro SSL semelhante, devido ao status atual do GraalVM, há algum trabalho adicional para agrupar o `function.zip` , conforme abaixo. Para obter mais informações, consulte o xref:native-and-ssl.adoc[Guia do Quarkus Native SSL].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>image:/assets/images/posts/kafka-failure-strategy/ignore.png[Ignore strategy]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>image:/assets/images/posts/kafka-failure-strategy/ignore.png[Ignore strategy]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>image:containerization-process.png[Containerization Process]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>image:containerization-process.png[alt=Processo de conteinerização]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>image:native-executable-process.png[Creating a native executable]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>image:native-executable-process.png[alt=Criando um executável nativo]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>implementation("io.quarkus:quarkus-security-jpa")
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>implementation("io.quarkus:quarkus-security-jpa")
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>implementation("io.quarkus:quarkus-security-jpa-reactive")
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>implementation("io.quarkus:quarkus-security-jpa-reactive")
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>import 'qui-alert';
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>import 'qui-alert';
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>import 'qui-badge';
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>import 'qui-badge';
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>import 'qui-card';
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>import 'qui-card';
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>import 'qui-code-block';
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>import 'qui-code-block';
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>import 'qui-ide-link';
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>import 'qui-ide-link';
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>import io.quarkus.hibernate.orm.panache.PanacheEntity;
import io.quarkus.elytron.security.common.BcryptUtil;
import io.quarkus.security.jpa.Password;
import io.quarkus.security.jpa.Roles;
import io.quarkus.security.jpa.UserDefinition;
import io.quarkus.security.jpa.Username;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>import io.quarkus.hibernate.orm.panache.PanacheEntity;
import io.quarkus.elytron.security.common.BcryptUtil;
import io.quarkus.security.jpa.Password;
import io.quarkus.security.jpa.Roles;
import io.quarkus.security.jpa.UserDefinition;
import io.quarkus.security.jpa.Username;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>import io.quarkus.panache.common.Sort;
import org.acme.optaplanner.domain.Lesson;
import org.acme.optaplanner.domain.Room;
import org.acme.optaplanner.domain.TimeTable;
import org.acme.optaplanner.domain.Timeslot;
import org.optaplanner.core.api.score.ScoreManager;
import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore;
import org.optaplanner.core.api.solver.SolverManager;
import org.optaplanner.core.api.solver.SolverStatus;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>import io.quarkus.panache.common.Sort;
import org.acme.optaplanner.domain.Lesson;
import org.acme.optaplanner.domain.Room;
import org.acme.optaplanner.domain.TimeTable;
import org.acme.optaplanner.domain.Timeslot;
import org.optaplanner.core.api.score.ScoreManager;
import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore;
import org.optaplanner.core.api.solver.SolverManager;
import org.optaplanner.core.api.solver.SolverStatus;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>import io.quarkus.runtime.StartupEvent;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>import io.quarkus.runtime.StartupEvent;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>import io.quarkus.test.junit.QuarkusTest;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>import io.quarkus.test.junit.QuarkusTest;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>import io.quarkus.test.junit.QuarkusTest;
import org.acme.optaplanner.domain.Lesson;
import org.acme.optaplanner.domain.Room;
import org.acme.optaplanner.domain.TimeTable;
import org.acme.optaplanner.domain.Timeslot;
import org.junit.jupiter.api.Test;
import org.optaplanner.test.api.score.stream.ConstraintVerifier;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>import io.quarkus.test.junit.QuarkusTest;
import org.acme.optaplanner.domain.Lesson;
import org.acme.optaplanner.domain.Room;
import org.acme.optaplanner.domain.TimeTable;
import org.acme.optaplanner.domain.Timeslot;
import org.junit.jupiter.api.Test;
import org.optaplanner.test.api.score.stream.ConstraintVerifier;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>import io.quarkus.test.junit.QuarkusTest;
import org.acme.optaplanner.domain.Lesson;
import org.acme.optaplanner.domain.TimeTable;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.optaplanner.core.api.solver.SolverStatus;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>import io.quarkus.test.junit.QuarkusTest;
import org.acme.optaplanner.domain.Lesson;
import org.acme.optaplanner.domain.TimeTable;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.optaplanner.core.api.solver.SolverStatus;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>import io.quarkus.test.junit.QuarkusTest;
import org.acme.optaplanner.domain.Room;
import org.acme.optaplanner.domain.Timeslot;
import org.acme.optaplanner.domain.Lesson;
import org.acme.optaplanner.domain.TimeTable;
import org.acme.optaplanner.rest.TimeTableResource;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>import io.quarkus.test.junit.QuarkusTest;
import org.acme.optaplanner.domain.Room;
import org.acme.optaplanner.domain.Timeslot;
import org.acme.optaplanner.domain.Lesson;
import org.acme.optaplanner.domain.TimeTable;
import org.acme.optaplanner.rest.TimeTableResource;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>import jakarta.annotation.security.PermitAll;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>import jakarta.annotation.security.PermitAll;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>import jakarta.annotation.security.RolesAllowed;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.core.Context;
import jakarta.ws.rs.core.SecurityContext;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>import jakarta.annotation.security.RolesAllowed;
import jakarta.inject.Inject;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.core.Context;
import jakarta.ws.rs.core.SecurityContext;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>import jakarta.annotation.security.RolesAllowed;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>import jakarta.annotation.security.RolesAllowed;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>import jakarta.enterprise.event.Observes;
import jakarta.inject.Singleton;
import jakarta.transaction.Transactional;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>import jakarta.enterprise.event.Observes;
import jakarta.inject.Singleton;
import jakarta.transaction.Transactional;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>import jakarta.inject.Inject;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>import jakarta.inject.Inject;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>import jakarta.inject.Inject;
import jakarta.transaction.Transactional;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.Path;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>import jakarta.inject.Inject;
import jakarta.transaction.Transactional;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.Path;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>import jakarta.persistence.Entity;
import jakarta.persistence.Table;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>import jakarta.persistence.Entity;
import jakarta.persistence.Table;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>import java.time.DayOfWeek;
import java.time.LocalTime;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>import java.time.DayOfWeek;
import java.time.LocalTime;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>import java.time.DayOfWeek;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.List;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>import java.time.DayOfWeek;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.List;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>import java.util.List;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>import java.util.List;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>import java.util.UUID;
import java.util.concurrent.ExecutionException;
import jakarta.inject.Inject;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.Path;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>import java.util.UUID;
import java.util.concurrent.ExecutionException;
import jakarta.inject.Inject;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.Path;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>import org.acme.optaplanner.domain.Lesson;
import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore;
import org.optaplanner.core.api.score.stream.Constraint;
import org.optaplanner.core.api.score.stream.ConstraintFactory;
import org.optaplanner.core.api.score.stream.ConstraintProvider;
import org.optaplanner.core.api.score.stream.Joiners;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>import org.acme.optaplanner.domain.Lesson;
import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore;
import org.optaplanner.core.api.score.stream.Constraint;
import org.optaplanner.core.api.score.stream.ConstraintFactory;
import org.optaplanner.core.api.score.stream.ConstraintProvider;
import org.optaplanner.core.api.score.stream.Joiners;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>import org.acme.optaplanner.domain.TimeTable;
import org.optaplanner.core.api.solver.SolverJob;
import org.optaplanner.core.api.solver.SolverManager;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>import org.acme.optaplanner.domain.TimeTable;
import org.optaplanner.core.api.solver.SolverJob;
import org.optaplanner.core.api.solver.SolverManager;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>import org.apache.http.HttpStatus;
import org.junit.jupiter.api.Test;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>import org.apache.http.HttpStatus;
import org.junit.jupiter.api.Test;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>import org.optaplanner.core.api.domain.entity.PlanningEntity;
import org.optaplanner.core.api.domain.lookup.PlanningId;
import org.optaplanner.core.api.domain.variable.PlanningVariable;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>import org.optaplanner.core.api.domain.entity.PlanningEntity;
import org.optaplanner.core.api.domain.lookup.PlanningId;
import org.optaplanner.core.api.domain.variable.PlanningVariable;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>import org.optaplanner.core.api.domain.solution.PlanningEntityCollectionProperty;
import org.optaplanner.core.api.domain.solution.PlanningScore;
import org.optaplanner.core.api.domain.solution.PlanningSolution;
import org.optaplanner.core.api.domain.solution.ProblemFactCollectionProperty;
import org.optaplanner.core.api.domain.valuerange.ValueRangeProvider;
import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>import org.optaplanner.core.api.domain.solution.PlanningEntityCollectionProperty;
import org.optaplanner.core.api.domain.solution.PlanningScore;
import org.optaplanner.core.api.domain.solution.PlanningSolution;
import org.optaplanner.core.api.domain.solution.ProblemFactCollectionProperty;
import org.optaplanner.core.api.domain.valuerange.ValueRangeProvider;
import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>import static io.restassured.RestAssured.get;
import static io.restassured.RestAssured.given;
import static org.hamcrest.core.Is.is;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>import static io.restassured.RestAssured.get;
import static io.restassured.RestAssured.given;
import static org.hamcrest.core.Is.is;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>import the project in your favorite IDE</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>importar o projeto no seu IDE favorito</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>import { JsonRpc } from 'jsonrpc';
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>import { JsonRpc } from 'jsonrpc';
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>import { LitElement, html, css} from 'lit';
import { beans } from 'build-time-data';
import '@vaadin/grid'; // &lt;1&gt;
import { columnBodyRenderer } from '@vaadin/grid/lit.js'; // &lt;2&gt;
import '@vaadin/vertical-layout';
import 'qui-badge'; // &lt;3&gt;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>import { LitElement, html, css} from 'lit';
import { beans } from 'build-time-data';
import '@vaadin/grid'; // &lt;1&gt;
import { columnBodyRenderer } from '@vaadin/grid/lit.js'; // &lt;2&gt;
import '@vaadin/vertical-layout';
import 'qui-badge'; // &lt;3&gt;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>import { LitElement, html, css} from 'lit'; // &lt;1&gt;
import { beans } from 'build-time-data'; // &lt;2&gt;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>import { LitElement, html, css} from 'lit'; // &lt;1&gt;
import { beans } from 'build-time-data'; // &lt;2&gt;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>import { LogController } from 'log-controller';
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>import { LogController } from 'log-controller';
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>import { QwcHotReloadElement, html, css} from 'qwc-hot-reload-element';
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>import { QwcHotReloadElement, html, css} from 'qwc-hot-reload-element';
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>import { StorageController } from 'storage-controller';
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>import { StorageController } from 'storage-controller';
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>import { notifier } from 'notifier';
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>import { notifier } from 'notifier';
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>import { pages } from 'build-time-data';
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>import { pages } from 'build-time-data';
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>in other cases it will use the 'Standalone' extension layout and defaults.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>em outros casos, utilizará o layout e os padrões da extensão "Standalone".</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>in the `gdb` prompt.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>no prompt `gdb`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>include only enough information to complete the task.
They delegate to other documentation types (concepts or reference) to provide additional context.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>incluem apenas informações suficientes para concluir a tarefa.
Eles delegam a outros tipos de documentação (conceitos ou referência) para fornecer contexto adicional.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>include specific examples to illustrate the explanation, but avoid making the explanation itself overly dependent on a specific technology or pattern of implementation.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>incluir exemplos específicos para ilustrar a explicação, mas evitar tornar a própria explicação muito dependente de uma tecnologia específica ou de um padrão de implementação.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>increases the startup RSS usage of the application</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>aumenta a utilização do RSS de startup da aplicação</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>increases your build time, mainly if you use high-compression levels</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>aumenta o tempo de build, principalmente se você utilizar níveis de compactação elevados</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>infinispan-client-reference.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>infinispan-client-reference.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>infinispan-client.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>infinispan-client.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>infinispan-dev-services.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>infinispan-dev-services.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>init-tasks.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>init-tasks.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>initialize the client in a `static` block, which, thanks to class preloading will be executed before the snapshot</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>inicializar o client num bloco `static`, que, graças ao pré-carregamento da classe, será executado antes do snapshot</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>integrates with the reactive engine from Quarkus as well as the reactive development model</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>integra-se com o motor reativo do Quarkus, bem como com o modelo de desenvolvimento reativo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>integration</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>integration</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>it is not possible to set `HostnameVerifier` or `SSLContext`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>não é possível definir `HostnameVerifier` ou `SSLContext`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>java -jar target/quarkus-app/quarkus-run.jar
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>java -jar target/quarkus-app/quarkus-run.jar
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>jbang Integration</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>integração jbang</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>jfr</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>jfr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>jms.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>jms.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>jmxclient</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>jmxclient</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>jmxserver</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>jmxserver</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>jreleaser.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>jreleaser.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>jsonRpc = new JsonRpc(this); // Passing in this will scope the rpc calls to your extension
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>jsonRpc = new JsonRpc(this); // Passing in this will scope the rpc calls to your extension
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>jvmstat</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>jvmstat</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>kafka-dev-services.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>kafka-dev-services.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>kafka-dev-ui.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>kafka-dev-ui.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>kafka-reactive-getting-started.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>kafka-reactive-getting-started.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>kafka-schema-registry-avro.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>kafka-schema-registry-avro.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>kafka-schema-registry-json-schema.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>kafka-schema-registry-json-schema.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>kafka-streams.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>kafka-streams.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>kafka.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>kafka.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>keywords that can be used to find the extension in the extension catalog</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>palavras-chave que podem ser usadas para encontrar a extensão no catálogo de extensões</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>kogito-dev-services.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>kogito-dev-services.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>kogito-dmn.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>kogito-dmn.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>kogito-drl.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>kogito-drl.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>kogito-pmml.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>kogito-pmml.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>kogito.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>kogito.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>kotlin.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>kotlin.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>kubernetes-client.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>kubernetes-client.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>kubernetes-config.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>kubernetes-config.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>kubernetes-dev-services.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>kubernetes-dev-services.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>lifecycle event</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>evento do ciclo de vida</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>lifecycle.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>lifecycle.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>link to the extension's guide or documentation</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>link para o guia ou documentação da extensão</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>link:/container-first[Learn more].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>link:/container-first[Saiba mais].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>link:/continuum[Learn more].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>link:/continuum[Saiba mais].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>link:/developer-joy[Learn more].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>link:/developer-joy[Saiba mais].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>link:/standards[Learn more].</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>link:/standards[Saiba mais].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>link:https://download.eclipse.org/microprofile/microprofile-rest-client-2.0/microprofile-rest-client-spec-2.0.html[MicroProfile Rest Client specification]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>link:https://download.eclipse.org/microprofile/microprofile-rest-client-2.0/microprofile-rest-client-spec-2.0.html[Especificação do Cliente Rest MicroProfile]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>liquibase-mongodb.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>liquibase-mongodb.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>liquibase.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>liquibase.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>logControl = new LogController(this); // Passing in this will scope the control to your extension
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>logControl = new LogController(this); // Passing in this will scope the control to your extension
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>logging</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>logging</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>logging.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>logging.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>lra.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>lra.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>mailer-reference.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>mailer-reference.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>mailer.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>mailer.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>management-interface-reference.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>management-interface-reference.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>maturity status, which could be `stable`, `preview` or `experimental`, evaluated by extension maintainers</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>estado de maturidade, que pode ser `stable`, `preview` ou `experimental`, avaliado pelos responsáveis pela extensão</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>maven-tooling</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>maven-tooling</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>maven-tooling.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>maven-tooling.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>may express opinions about advantages and drawbacks of the concept that you are explaining relative to different potential use cases or applications.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>pode expressar opiniões sobre as vantagens e desvantagens do conceito que está abordando em relação a diferentes casos de uso ou aplicações potenciais.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>menuPageBuildItem.addPage(Page.webComponentPageBuilder()
        .icon("font-awesome-regular:face-grin-tongue-wink")
        .title("One Joke")
        .componentLink("qwc-jokes-menu.js"));
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>menuPageBuildItem.addPage(Page.webComponentPageBuilder()
        .icon("font-awesome-regular:face-grin-tongue-wink")
        .title("One Joke")
        .componentLink("qwc-jokes-menu.js"));
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>menuProducer.produce(menuPageBuildItem);
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>menuProducer.produce(menuPageBuildItem);
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>messaging</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>messaging</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>messaging-virtual-threads.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>messaging-virtual-threads.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>micrometer.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>micrometer.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>miscellaneous</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>miscellaneous</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>mongodb-panache-kotlin.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>mongodb-panache-kotlin.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>mongodb-panache.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>mongodb-panache.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>mongodb.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>mongodb.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>mutiny-primer.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>mutiny-primer.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>native</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>native</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>native, tooling</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>native, tooling</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>native-and-ssl.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>native-and-ssl.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>native-reference</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>native-reference</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>native-reference.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>native-reference.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>new Vert.x gRPC implementation on top of the existing HTTP server</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>nova implementação Vert.x gRPC em cima do servidor HTTP existente</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>newsletter</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>boletim informativo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>note that `RestClient.LITERAL` has to be passed as the last argument of the `installMockForType` method</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>note-se que `RestClient.LITERAL` tem de ser passado como último argumento do método `installMockForType`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>observability</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>observability</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>observability, web</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>observability, web</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>old Vert.x gRPC implementation with a separate gRPC server (default)</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>implementação antiga do Vert.x gRPC com um servidor gRPC separado (padrão)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>openapi-swaggerui.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>openapi-swaggerui.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>opentelemetry.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>opentelemetry.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>optaplanner-time-table-app-screenshot.png</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>optaplanner-time-table-app-screenshot.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>optaplanner-time-table-class-diagram-annotated.png</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>optaplanner-time-table-class-diagram-annotated.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>optaplanner-time-table-class-diagram-pure.png</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>optaplanner-time-table-class-diagram-pure.png</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>optaplanner.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>optaplanner.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>or `quarkus-resteasy-qute` if you are using RESTEasy Classic:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>ou `quarkus-resteasy-qute` se estiver utilizando o RESTEasy Clássico:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>or if you do not have `LAMBDA_ROLE_ARN` already defined in this shell:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>ou se não tiver `LAMBDA_ROLE_ARN` já definido neste shell:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>or to build a native executable:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>ou para construir um executável nativo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>or to have built the native executable using an in-container build.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>ou ter construído o executável nativo usando uma compilação dentro de um container.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>package org.acme.elytron.security.jpa;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>package org.acme.elytron.security.jpa;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>package org.acme.optaplanner.domain;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>package org.acme.optaplanner.domain;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>package org.acme.optaplanner.rest;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>package org.acme.optaplanner.rest;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>package org.acme.optaplanner.solver;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>package org.acme.optaplanner.solver;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>package org.acme.security.jpa;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>package org.acme.security.jpa;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>per-client proxy settings, with `quarkus.rest-client.&lt;my-client&gt;.proxy-address`, etc. These are applied only to clients injected with CDI, that is the ones created with `@RegisterRestClient`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>definições de proxy por cliente, com `quarkus.rest-client.&lt;my-client&gt;.proxy-address`, etc. Estas são aplicadas apenas a clientes injetados com CDI, ou seja, os criados com `@RegisterRestClient`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>performance-measure.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>performance-measure.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>picocli.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>picocli.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>platform.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>platform.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>podman.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>podman.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>pom.xml</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>pom.xml</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>provide a learning experience, giving the reader something they can do.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>proporcionar uma experiência de aprendizagem, dando ao leitor algo que ele possa fazer.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>provide background information and context to explain _why_ things work the way they do, or why they are built the way they are.
You can cite design decisions, historical reasons, and technical constraints to reaffirm your points.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>fornecer informações básicas e contexto para explicar _por que_ as coisas funcionam da maneira que funcionam ou por que foram construídas da maneira que são. Você pode citar decisões de projeto, razões históricas e restrições técnicas para reafirmar seus argumentos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>provide examples or illustrations that help readers understand what is being described.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>fornecer exemplos ou ilustrações que ajudem os leitores a compreender o que está sendo descrito.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>provide the reader with concrete steps to follow that each have a comprehensible result.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>fornecer ao leitor passos concretos a seguir, cada um com um resultado compreensível.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>public
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>public
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>public Uni&lt;JsonObject&gt; clear(String name) { //&lt;1&gt;
    Optional&lt;Cache&gt; cache = manager.getCache(name);
    if (cache.isPresent()) {
        return cache.get().invalidateAll().map((t) -&gt; getJsonRepresentationForCache(cache.get()));
    } else {
        return Uni.createFrom().item(new JsonObject().put("name", name).put("size", -1));
    }
}
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>public Uni&lt;JsonObject&gt; clear(String name) { //&lt;1&gt;
    Optional&lt;Cache&gt; cache = manager.getCache(name);
    if (cache.isPresent()) {
        return cache.get().invalidateAll().map((t) -&gt; getJsonRepresentationForCache(cache.get()));
    } else {
        return Uni.createFrom().item(new JsonObject().put("name", name).put("size", -1));
    }
}
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>public boolean updateProperties(String content, String type) {
    // ...
}
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>public boolean updateProperties(String content, String type) {
    // ...
}
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>public class JokesJsonRPCService {
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>public class JokesJsonRPCService {
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>public class Room {
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>public class Room {
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>public class SomeTest extends DevUIBuildTimeDataTest {
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>public class SomeTest extends DevUIBuildTimeDataTest {
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>public class SomeTest extends DevUIJsonRPCTest {
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>public class SomeTest extends DevUIJsonRPCTest {
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>public class TimeTableConstraintProvider implements ConstraintProvider {
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>public class TimeTableConstraintProvider implements ConstraintProvider {
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>public class TimeTableEasyScoreCalculator implements EasyScoreCalculator&lt;TimeTable, HardSoftScore&gt; {
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>public class TimeTableEasyScoreCalculator implements EasyScoreCalculator&lt;TimeTable, HardSoftScore&gt; {
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>public class Timeslot {
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>public class Timeslot {
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>pulsar-dev-services.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>pulsar-dev-services.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>pulsar-getting-started.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>pulsar-getting-started.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>pulsar.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>pulsar.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>quarkus build --native -Dquarkus.native.container-build=true {build-additional-parameters}
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>quarkus build --native -Dquarkus.native.container-build=true {build-additional-parameters}
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>quarkus dev {dev-additional-parameters}
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>quarkus dev {dev-additional-parameters}
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>quarkus update</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>quarkus update
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>quarkus update
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>quarkus update
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>quarkus-maven-plugin.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>quarkus-maven-plugin.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>quarkus-reactive-architecture.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>quarkus-reactive-architecture.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>quarkus-runtime-base-image.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>quarkus-runtime-base-image.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=quarkus
quarkus.datasource.password=quarkus
quarkus.datasource.jdbc.url=jdbc:postgresql:security_jpa
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=quarkus
quarkus.datasource.password=quarkus
quarkus.datasource.jdbc.url=jdbc:postgresql:security_jpa
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>quarkus.hibernate-orm.database.generation=drop-and-create
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>quarkus.hibernate-orm.database.generation=drop-and-create
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>quarkus.http.auth.basic=true
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>quarkus.http.auth.basic=true
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>quarkus.log.category."org.optaplanner".level=debug
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>quarkus.log.category."org.optaplanner".level=debug
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>quarkus.optaplanner.solver.termination.spent-limit=5s
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>quarkus.optaplanner.solver.termination.spent-limit=5s
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>quartz.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>quartz.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>qute-reference.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>qute-reference.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>qute.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>qute.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>rabbitmq-dev-services.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>rabbitmq-dev-services.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>rabbitmq-reference.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>rabbitmq-reference.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>rabbitmq.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>rabbitmq.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>reactive</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>reactive</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>reactive-event-bus.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>reactive-event-bus.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>reactive-routes.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>reactive-routes.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>reactive-sql-clients.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>reactive-sql-clients.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>reaugmentation.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>reaugmentation.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>redis-dev-services.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>redis-dev-services.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>redis-reference.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>redis-reference.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>redis.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>redis.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>reference</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>reference</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>register a CRaC Resource doing the initialization</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>registar um recurso CRaC que efetua a inicialização</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>remain focused on describing their topic.
They don't explain or provide additional context from other sources.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>permanecem concentrados na descrição do tópico.
Eles não explicam nem fornecem contexto adicional de outras fontes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>rest-client-multipart.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>rest-client-multipart.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>rest-client-reactive.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>rest-client-reactive.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>rest-client.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>rest-client.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>rest-data-panache.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>rest-data-panache.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>rest-json.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>rest-json.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>resteasy-client-multipart.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>resteasy-client-multipart.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>resteasy-client.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>resteasy-client.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>resteasy-reactive-migration.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>resteasy-reactive-migration.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>resteasy-reactive-virtual-threads</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>resteasy-reactive-virtual-threads</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>resteasy-reactive-virtual-threads.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>resteasy-reactive-virtual-threads.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>resteasy-reactive.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>resteasy-reactive.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>resteasy.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>resteasy.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>scaffold a project in a single command line</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>montar um projeto com uma única linha de comando</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>scheduler-reference.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>scheduler-reference.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>scheduler.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>scheduler.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>scripting.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>scripting.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security, web</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security, web</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-architecture</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-architecture</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-architecture.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-architecture.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-authentication-mechanisms</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-authentication-mechanisms</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-authentication-mechanisms.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-authentication-mechanisms.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-authorize-web-endpoints-reference</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-authorize-web-endpoints-reference</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-authorize-web-endpoints-reference.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-authorize-web-endpoints-reference.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-basic-authentication</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-basic-authentication</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-basic-authentication-concept</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-basic-authentication-concept</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-basic-authentication-concept.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-basic-authentication-concept.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-basic-authentication-howto</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-basic-authentication-howto</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-basic-authentication-howto.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-basic-authentication-howto.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-basic-authentication.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-basic-authentication.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-built-in-authentication-support-concept</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-built-in-authentication-support-concept</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-built-in-authentication-support-concept.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-built-in-authentication-support-concept.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-cors</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-cors</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-cors.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-cors.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-csrf-prevention.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-csrf-prevention.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-customization.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-customization.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-getting-started-tutorial</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-getting-started-tutorial</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-getting-started-tutorial.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-getting-started-tutorial.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-identity-providers</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-identity-providers</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-identity-providers.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-identity-providers.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-jdbc.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-jdbc.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-jpa</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-jpa</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-jpa.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-jpa.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-jwt</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-jwt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-jwt-build.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-jwt-build.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-jwt.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-jwt.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-keycloak-admin-client.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-keycloak-admin-client.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-keycloak-authorization.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-keycloak-authorization.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-ldap.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-ldap.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-oauth2.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-oauth2.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-oidc-auth0-tutorial</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-oidc-auth0-tutorial</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-oidc-auth0-tutorial.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-oidc-auth0-tutorial.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-oidc-bearer-token-authentication</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-oidc-bearer-token-authentication</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-oidc-bearer-token-authentication-tutorial</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-oidc-bearer-token-authentication-tutorial</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-oidc-bearer-token-authentication-tutorial.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-oidc-bearer-token-authentication-tutorial.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-oidc-bearer-token-authentication.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-oidc-bearer-token-authentication.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-oidc-code-flow-authentication</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-oidc-code-flow-authentication</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-oidc-code-flow-authentication-tutorial</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-oidc-code-flow-authentication-tutorial</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-oidc-code-flow-authentication-tutorial.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-oidc-code-flow-authentication-tutorial.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-oidc-code-flow-authentication.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-oidc-code-flow-authentication.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-oidc-configuration-properties-reference</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-oidc-configuration-properties-reference</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-oidc-configuration-properties-reference.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-oidc-configuration-properties-reference.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-openid-connect-client-reference.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-openid-connect-client-reference.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-openid-connect-client.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-openid-connect-client.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-openid-connect-dev-services.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-openid-connect-dev-services.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-openid-connect-multitenancy.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-openid-connect-multitenancy.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-openid-connect-providers</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-openid-connect-providers</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-openid-connect-providers.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-openid-connect-providers.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-openid-connect-web-authentication.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-openid-connect-web-authentication.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-openid-connect.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-openid-connect.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-overview</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-overview</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-overview-concept</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-overview-concept</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-overview-concept.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-overview-concept.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-overview.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-overview.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-proactive-authentication</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-proactive-authentication</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-proactive-authentication.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-proactive-authentication.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-properties.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-properties.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-testing.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-testing.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-vulnerability-detection</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-vulnerability-detection</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-vulnerability-detection.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-vulnerability-detection.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-webauthn</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-webauthn</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>security-webauthn.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>security-webauthn.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>serialization</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>serialization</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>serialization, web</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>serialization, web</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>smallrye-fault-tolerance.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>smallrye-fault-tolerance.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>smallrye-graphql-client.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>smallrye-graphql-client.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>smallrye-graphql.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>smallrye-graphql.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>smallrye-health.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>smallrye-health.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>smallrye-metrics.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>smallrye-metrics.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>software-transactional-memory.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>software-transactional-memory.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>spring-boot-properties.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>spring-boot-properties.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>spring-cache.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>spring-cache.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>spring-cloud-config-client.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>spring-cloud-config-client.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>spring-data-jpa.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>spring-data-jpa.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>spring-data-rest.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>spring-data-rest.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>spring-di.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>spring-di.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>spring-scheduled.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>spring-scheduled.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>spring-security.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>spring-security.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>spring-web.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>spring-web.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>static properties = {
    extensionName: {type: String},
    description: {type: String},
    guide: {type: String},
    namespace: {type: String}    
}
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>static properties = {
    extensionName: {type: String},
    description: {type: String},
    guide: {type: String},
    namespace: {type: String}    
}
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>storageControl = new StorageController(this); // Passing in this will scope the storage to your extension
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>storageControl = new StorageController(this); // Passing in this will scope the storage to your extension
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>stork-kubernetes.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>stork-kubernetes.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>stork-reference.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>stork-reference.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>stork.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>stork.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>supports consuming gRPC services</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>suporta o consumo de serviços gRPC</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>supports https://grpc.github.io/grpc-java/javadoc/io/grpc/inprocess/InProcessServerBuilder.html[InProcess] gRPC development</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>suporta o desenvolvimento de gRPC  link:https://grpc.github.io/grpc-java/javadoc/io/grpc/inprocess/InProcessServerBuilder.html[InProcess]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>supports https://grpc.github.io/grpc/core/md_doc_grpc_xds_features.html[xDS gRPC] integration</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>suporta a integração  link:https://grpc.github.io/grpc/core/md_doc_grpc_xds_features.html[xDS gRPC]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>supports implementing gRPC services</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>suporta a implementação de serviços gRPC</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>telemetry-micrometer</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>telemetry-micrometer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>telemetry-micrometer-tutorial</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>telemetry-micrometer-tutorial</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>telemetry-micrometer-tutorial.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>telemetry-micrometer-tutorial.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>telemetry-micrometer.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>telemetry-micrometer.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>telemetry-opentracing-to-otel-tutorial</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>telemetry-opentracing-to-otel-tutorial</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>telemetry-opentracing-to-otel-tutorial.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>telemetry-opentracing-to-otel-tutorial.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>testImplementation("org.optaplanner:optaplanner-test")
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>testImplementation("org.optaplanner:optaplanner-test")
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>testing</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>testing</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>tests-with-coverage.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>tests-with-coverage.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>the Maven structure</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>a estrutura Maven</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>the Quarkus Gradle plugin</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>o plugin Quarkus Gradle</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>the Quarkus process is now using 4.5 cores...</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>the Quarkus process is now using 4.5 cores...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>the Redis key is built as follows: `cache:$cache-name:$cache-key`, where `cache-key` is the key the application uses.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>a chave Redis é construída da seguinte forma: `cache:$cache-name:$cache-key`, onde `cache-key` é a chave que a aplicação utiliza.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>the `amqp-host` or `amqp-port` is configured</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>o `amqp-host` ou `amqp-port` esteja configurado</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>the `api-server-url` is configured</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>A URL `api-server-url` esteja configurada.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>the `kafka.bootstrap.servers` is configured</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>o `kafka.bootstrap.servers` esteja configurado</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>the `pulsar.client.serviceUrl` is configured</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>o `pulsar.client.serviceUrl` está configurado</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>the `quarkus-app` directory which contains the `quarkus-run.jar` jar file - being an executable _jar_. Be aware that it's not an _über-jar_ as
the dependencies are copied into subdirectories of `quarkus-app/lib/`.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>o diretório `quarkus-app` que contém o arquivo jar `quarkus-run.jar` , que é um _jar_ executável. Esteja ciente de que não se trata de um _über-jar_ , 
pois as dependências são copiadas para subdiretórios em `quarkus-app/lib/` .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>the `rest-client-reactive-jackson` extension for the REST client support. Use `rest-client-reactive` instead if you do not wish to use Jackson</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>a extensão `rest-client-reactive-jackson` para o suporte do cliente REST. Use `rest-client-reactive` em vez disso se não pretender utilizar Jackson</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>the `resteasy-reactive-jackson` extension for the REST server support. Use `resteasy-reactive` instead if you do not wish to use Jackson;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>a extensão `resteasy-reactive-jackson` para o suporte do servidor REST. Use `resteasy-reactive` em vez disso se não pretender utilizar Jackson;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>the `upx` command to be available in the system `PATH`;</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>o comando `upx` deve estar disponível no `PATH`;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>the application configuration file</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>o arquivo de configuração da aplicação</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>the client stub is injected with the `@RestClient` annotation instead of the usual CDI `@Inject`</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>o stub do cliente é injetado com a anotação `@RestClient` em vez da habitual anotação CDI `@Inject`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>the client will use the registered HTTP Client options over the HTTP Client options provided via CDI if any.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>o cliente utilizará as opções de Cliente HTTP registradas em vez das opções de Cliente HTTP fornecidas via CDI, se existirem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>the client will use the registered redirect handler over the redirect handler provided via CDI if any.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>o cliente utilizará o manipulador de redirecionamento registrado em vez do manipulador de redirecionamento fornecido através do CDI, se existir.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>the default scope of the client for the new extension is `@ApplicationScoped` while the `quarkus-rest-client` defaults to `@Dependent`
To change this behavior, set the `quarkus.rest-client-reactive.scope` property to the fully qualified scope name.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>o escopo padrão do cliente para a nova extensão é `@ApplicationScoped` , enquanto o `quarkus-rest-client` tem como padrão `@Dependent` . Para alterar esse comportamento, defina a propriedade `quarkus.rest-client-reactive.scope` como o nome do escopo totalmente qualificado.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>the first one uses the traditional blocking style, it is considered blocking due to its signature.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>o primeiro utiliza o estilo de bloqueio tradicional, que é considerado bloqueante devido à sua assinatura.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>the gRPC `io.grpc.Channel`, that lets you create other types of stubs.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>o `io.grpc.Channel` do gRPC, que permite criar outros tipos de stubs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>the name of the extension that will be displayed to users</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>o nome da extensão que será apresentada aos usuários</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>the second one uses Mutiny, it is considered non-blocking due to its signature.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>o segundo utiliza o Mutiny, que é considerado não bloqueante devido à sua assinatura.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>the standard `@FormParam` can also be used. It allows to override the name of the multipart part.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>a norma `@FormParam` também pode ser utilizada. Permite substituir o nome da parte multi-partes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>the value is encoded to JSON if needed</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>o valor é codificado para JSON, se necessário</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>this._observer = this.jsonRpc.streamJokes().onNext(jsonRpcResponse =&gt; { //&lt;1&gt;
    this._addToJokes(jsonRpcResponse.result);
    this._numberOfJokes = this._numberOfJokes++;
});
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>this._observer = this.jsonRpc.streamJokes().onNext(jsonRpcResponse =&gt; { //&lt;1&gt;
    this._addToJokes(jsonRpcResponse.result);
    this._numberOfJokes = this._numberOfJokes++;
});
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>this._observer.cancel(); //&lt;2&gt;
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>this._observer.cancel(); //&lt;2&gt;
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>this.storageControl.set('height', 123); // Set some val
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>this.storageControl.set('height', 123); // Set some val
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>to provide a "context" bean that holds all the information collected during augmentation so that the real components do not need any "late initialization" because they can inject the context bean directly.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>para fornecer um bean de "contexto" que contém todas as informações recolhidas durante a ampliação, de modo a que os componentes reais não necessitem de qualquer "inicialização tardia" porque podem injetar diretamente o bean de contexto.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>tooling</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>tooling</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>tooling, data</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>tooling, data</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>tooling, native</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>tooling, native</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>tooling.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>tooling.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>transaction.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>transaction.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>tutorial</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>tutorial</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>tutorial-micrometer</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>tutorial-micrometer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>update-quarkus</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>update-quarkus</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>update-quarkus.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>update-quarkus.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>upx is cross-platform.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>O upx é multiplataforma.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>upx.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>upx.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>user
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>user
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>uses the shorthand `@RestForm` annotation to make a field as a part of a multipart form</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>utiliza a anotação abreviada `@RestForm` para criar um campo como parte de um formulário multi-partes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>validation.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>validation.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>vertx-reference.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>vertx-reference.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>vertx.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>vertx.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>virtual-threads.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>virtual-threads.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>we may introduce other layout types in the future.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>podemos introduzir outros tipos de layout no futuro.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>web</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>web</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>web, data</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>web, data</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>websockets.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>websockets.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>well... that is an exercise for the reader ;-)</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>well... that is an exercise for the reader ;-)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>when `getFromMethod` is called, in addition to the `my-param` query parameter, `param-from-method` with the value of `test` (because that's what the `withParam` method returns when invoked with `param-from-method`) will also be added.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>quando `getFromMethod` é chamado, além do parâmetro de consulta `my-param`, `param-from-method` com o valor de `test` (porque é isso que o método `withParam` devolve quando invocado com `param-from-method`) também será adicionado.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>when a virtual thread performs a blocking operation inside a `synchronized` block or method</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>quando uma thread virtual executa uma operação de bloqueio dentro de um bloco ou método `synchronized`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>when it executes a blocking operation inside a native method or a foreign function</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>quando executa uma operação bloqueante dentro de um método nativo ou de uma função externa</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>whose instance can be easily produced through a xref:bytecode-recording[recorder],</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>cuja instância pode ser facilmente produzida através de um xref:#bytecode-recording[gravador],</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>with `-DgroupId=io.quarkiverse.[extensionId]`, it will use the 'Quarkiverse' extension layout and defaults.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>com `-DgroupId=io.quarkiverse.[extensionId]`, ele utilizará o esquema e as predefinições da extensão 'Quarkiverse'.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>writing-extensions</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>writing-extensions</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>writing-extensions.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>writing-extensions.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>writing-native-applications-tips.adoc</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>writing-native-applications-tips.adoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>xref:build-items[Build items] produced by previous build steps</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>xref:build-items[Itens de construção] produzidos por etapas de construção anteriores</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>xref:configuration[Configuration Mapping] types</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Tipos de xref:configuration[Mapeamento de Configuração]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>xref:grpc-getting-started.adoc[Getting Started]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>link:grpc-getting-started.html[Iniciando]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>xref:grpc-kubernetes.adoc[Deploying your gRPC Service in Kubernetes]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>link:grpc-kubernetes.html[Implantando seu serviço gRPC no Kubernetes]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>xref:grpc-service-consumption.adoc[Consuming a gRPC Service]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>link:grpc-service-consumption.html[Consumindo um serviço gRPC]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>xref:grpc-service-implementation.adoc[Implementing a gRPC Service]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>link:grpc-service-implementation.html[Implementação de um serviço gRPC]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>xref:grpc-xds.adoc[Enabling xDS gRPC support]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>link:grpc-xds.html[Ativação do suporte xDS gRPC]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>xref:mutiny-primer.adoc[Mutiny - uma biblioteca de programação reativa intuitiva]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>xref:producing-values[Build producers] to produce items for subsequent build steps</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>xref:producing-values[Produtores de construção] para produzir itens para etapas de construção subsequentes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>xref:quarkus-reactive-architecture.adoc[The Quarkus Reactive Architecture]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>xref:quarkus-reactive-architecture.adoc[A Arquitetura Reativa Quarkus]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>xref:quarkus-runtime-base-image.adoc[This page] explains how to extend the `quarkus-micro` image when your application has specific requirements.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>link:quarkus-runtime-base-image.html[Esta página] explica como extender a imagem `quarkus-micro` quando a sua aplicação tem requisitos específicos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>xref:security-authentication-mechanisms.adoc#combining-authentication-mechanisms[Combining authentication mechanisms]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>link:security-authentication-mechanisms.html#combining-authentication-mechanisms[Combinando de mecanismos de autenticação]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>xref:security-authentication-mechanisms.adoc#form-auth[Form-based authentication]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>link:security-authentication-mechanisms.html#form-auth[Autenticação baseada em formulários]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>xref:security-authentication-mechanisms.adoc#oidc-jwt-oauth2-comparison[Choosing between OpenID Connect, SmallRye JWT, and OAuth2 authentication mechanisms]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>link:security-authentication-mechanisms.html#oidc-jwt-oauth2-comparison[Escolhendo entre os mecanismos de autenticação OpenID Connect, SmallRye JWT e OAuth2]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>xref:security-basic-authentication.adoc[Basic authentication]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>xref:security-basic-authentication.adoc[Autenticação básica]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>xref:security-identity-providers.adoc[Identity Providers]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>xref:security-identity-providers.adoc[Fornecedores de identidade]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>xref:security-jdbc.adoc[Using security with JDBC]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>link:security-jdbc.html[Utilizar o security com JDBC]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>xref:security-jpa.adoc[Quarkus Security with Jakarta Persistence]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>link:security-jpa.html[Quarkus Security com Jakarta Persistence]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>xref:security-ldap.adoc[Using security with an LDAP realm]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>link:security-ldap.html[Utilizar o security com um domínio LDAP]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>xref:security-oidc-bearer-token-authentication-tutorial.adoc[Protect a service application by using OpenID Connect (OIDC) Bearer token authentication]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>link:security-oidc-bearer-token-authentication-tutorial.html[Proteger uma aplicação de serviço usando a autenticação de token Bearer OpenID Connect (OIDC)]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>link:security-oidc-bearer-token-authentication.html[Autenticação de Token Bearer OIDC]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>xref:security-openid-connect-client-reference.adoc[OpenID Connect and OAuth2 Client and Filters Reference Guide]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>link:security-openid-connect-client-reference.html[Guia de referência para OpenID Connect e OAuth2: Client e Filters]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>xref:security-overview.adoc[Quarkus Security overview]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>xref:security-overview.adoc[Visão geral do Quarkus Security]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>xref:security-overview.adoc[Quarkus Security]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>link:security-overview.html[Quarkus Security]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>xref:security-testing.adoc#configuring-user-information[Configuring User Information in application.properties]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>xref:security-testing.adoc#configuring-user-information[Configurar as informações do usuário no application.properties]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>xref:spring-cache.adoc[Quarkus - Extension for Spring Cache]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>link:spring-cache.html[Quarkus - Extensão para o Spring Cache]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>xref:spring-cloud-config-client.adoc[Quarkus - Reading properties from Spring Cloud Config Server]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>link:spring-cloud-config-client.html[Quarkus - Lendo propriedades do Servidor de Configuração do Spring Cloud]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>xref:spring-data-jpa.adoc[Quarkus - Extension for Spring Data JPA]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>link:spring-data-jpa.html[Quarkus - Extensão para Spring Data JPA]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>xref:spring-data-rest.adoc[Quarkus - Extension for Spring Data REST]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>link:spring-data-rest.html[Quarkus - Extensão para Spring Data REST]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>xref:spring-di.adoc[Quarkus - Extension for Spring DI]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>link:spring-di.html[Quarkus - Extensão para Spring DI]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>xref:spring-scheduled.adoc[Quarkus - Extension for Spring Scheduled]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>link:spring-scheduled.html[Quarkus - Extensão para o Spring Scheduled]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>xref:spring-security.adoc[Quarkus - Extension for Spring Security]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>link:spring-security.html[Quarkus - Extensão para Spring Security]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>xref:spring-web.adoc[Quarkus - Extension for Spring Web]</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>link:spring-web.html[Quarkus - Extensão para Spring Web]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>you can add a `src/main/resources/META-INF/quarkus-preload-classes.txt` file listing the classes to preload, such as:</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>você pode adicionar um arquivo `src/main/resources/META-INF/quarkus-preload-classes.txt` que enumere as classes que serão pré-carregadas, como por exemplo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>you can place template extension methods in every class if you annotate them with `@TemplateExtension` but we advise to keep them either
grouped by target type, or in a single `TemplateExtensions` class by convention.</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>pode colocar métodos de extensão de modelos em todas as classes se os anotar com `@TemplateExtension`, mas aconselhamos a mantê-los agrupados por tipo de destino ou numa única classe `TemplateExtensions` por convenção.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>you include the `quarkus-test-kubernetes-client` dependency</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>Você inclua a dependência `quarkus-test-kubernetes-client`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>{"timeslotList":...,"roomList":...,"lessonList":[{"id":1,"subject":"Math","teacher":"A. Turing","studentGroup":"9th grade","timeslot":{"dayOfWeek":"MONDAY","startTime":"08:30:00","endTime":"09:30:00"},"room":{"name":"Room A"}},{"id":2,"subject":"Chemistry","teacher":"M. Curie","studentGroup":"9th grade","timeslot":{"dayOfWeek":"MONDAY","startTime":"09:30:00","endTime":"10:30:00"},"room":{"name":"Room A"}},{"id":3,"subject":"French","teacher":"M. Curie","studentGroup":"10th grade","timeslot":{"dayOfWeek":"MONDAY","startTime":"08:30:00","endTime":"09:30:00"},"room":{"name":"Room B"}},{"id":4,"subject":"History","teacher":"I. Jones","studentGroup":"10th grade","timeslot":{"dayOfWeek":"MONDAY","startTime":"09:30:00","endTime":"10:30:00"},"room":{"name":"Room B"}}],"score":"0hard/0soft"}
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>{"timeslotList":...,"roomList":...,"lessonList":[{"id":1,"subject":"Math","teacher":"A. Turing","studentGroup":"9th grade","timeslot":{"dayOfWeek":"MONDAY","startTime":"08:30:00","endTime":"09:30:00"},"room":{"name":"Room A"}},{"id":2,"subject":"Chemistry","teacher":"M. Curie","studentGroup":"9th grade","timeslot":{"dayOfWeek":"MONDAY","startTime":"09:30:00","endTime":"10:30:00"},"room":{"name":"Room A"}},{"id":3,"subject":"French","teacher":"M. Curie","studentGroup":"10th grade","timeslot":{"dayOfWeek":"MONDAY","startTime":"08:30:00","endTime":"09:30:00"},"room":{"name":"Room B"}},{"id":4,"subject":"History","teacher":"I. Jones","studentGroup":"10th grade","timeslot":{"dayOfWeek":"MONDAY","startTime":"09:30:00","endTime":"10:30:00"},"room":{"name":"Room B"}}],"score":"0hard/0soft"}
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>}
</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>}
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>✓</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>✓</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>✗</seg>
      </tuv>
      <tuv xml:lang="pt_BR">
        <seg>✗</seg>
      </tuv>
    </tu>
    </body>
</tmx>