# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:1
#, fuzzy, no-wrap
msgid "mkouba"
msgstr "mkouba"

#. type: YAML Front Matter: date
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:1
#, fuzzy, no-wrap
msgid "2019-07-25 00:00 +0100"
msgstr "2019-07-25 00:00 +0100"

#. type: YAML Front Matter: layout
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "posto"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:1
#, fuzzy, no-wrap
msgid "Quarkus ArC is a build-time oriented dependency injection based on CDI 2.0. But what does it actually mean and what benefits does a build-time processing DI bring?"
msgstr "O Quarkus ArC é uma injeção de dependências orientada para o tempo de construção baseada no CDI 2.0. Mas o que é que isso significa realmente e que benefícios traz uma injeção de dependências orientada para o tempo de construção?"

#. type: YAML Front Matter: tags
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:1
#, fuzzy, no-wrap
msgid "extension arc development-tips"
msgstr "dicas de desenvolvimento do arco de extensão"

#. type: Title =
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:9
#, fuzzy, no-wrap
msgid "Quarkus Dependency Injection"
msgstr "Injeção de dependência Quarkus"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:13
#, fuzzy
msgid "Quarkus ArC is a build-time oriented dependency injection based on http://cdi-spec.org/[CDI 2.0].  In this blogpost, we're going to explain the relationship to the specification and describe some of the benefits and drawbacks of the build-time processing design."
msgstr "O Quarkus ArC é uma injeção de dependências orientada para o tempo de construção baseada no  link:http://cdi-spec.org/[CDI 2.0]. Neste blogpost, vamos explicar a relação com a especificação e descrever alguns dos benefícios e desvantagens do design de processamento em tempo de construção."

#. type: Title ==
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:14
#, fuzzy, no-wrap
msgid "Compatibility"
msgstr "Compatibilidade"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:20
#, fuzzy
msgid "It does not make sense to reinvent the wheel, especially when it comes to dependency injection.  There are many frameworks that try to solve similar problems.  A year ago, we made a design decision to build Quarkus DI on top of CDI.  We had some very good reasons to choose CDI:"
msgstr "Não faz sentido reinventar a roda, especialmente quando se trata de injeção de dependências. Existem muitas estruturas que tentam resolver problemas semelhantes. Há um ano, tomámos a decisão de construir o Quarkus DI em cima do CDI. Tínhamos algumas boas razões para escolher o CDI:"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:22
#, fuzzy
msgid "CDI is a mature and proven component model"
msgstr "A CDI é um modelo de componentes maduro e comprovado"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:23
#, fuzzy
msgid "We at Red Hat have almost ten years of experience with developing http://weld.cdi-spec.org/[Weld - the CDI Reference Implementation]"
msgstr "Na Red Hat, temos quase dez anos de experiência no desenvolvimento do  link:http://weld.cdi-spec.org/[Weld - a implementação de referência do CDI]"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:24
#, fuzzy
msgid "The CDI API is built on top of `javax.inject` so that it should be easy to migrate from any DI framework compatible with `@Inject`"
msgstr "A API CDI é construída com base em `javax.inject`, de modo que deve ser fácil migrar de qualquer estrutura DI compatível com `@Inject`"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:28
#, fuzzy
msgid "Our primary goal was to implement a supersonic build-time oriented DI solution compatible with CDI.  This would allow users to continue using CDI in their applications but also leverage Quarkus build-time optimizations.  However, ArC is not a full CDI implementation verified by the TCK - see also the list of https://quarkus.io/guides/cdi-reference#supported_features[supported features] and the list of https://quarkus.io/guides/cdi-reference#limitations[limitations]."
msgstr "O nosso principal objetivo era implementar uma solução supersónica de DI orientada para o tempo de construção compatível com o CDI. Isto permitiria aos utilizadores continuar a utilizar o CDI nas suas aplicações, mas também aproveitar as optimizações de tempo de construção do Quarkus. No entanto, o ArC não é uma implementação completa do CDI verificada pelo TCK - veja também a lista de  link:https://quarkus.io/guides/cdi-reference#supported_features[recursos suportados] e a lista de  link:https://quarkus.io/guides/cdi-reference#limitations[limitações]."

#. type: Title ==
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:29
#, fuzzy, no-wrap
msgid "Build-time Processing Benefits and Drawbacks"
msgstr "Vantagens e desvantagens do processamento em tempo de construção"

#. type: Title ===
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:31
#, fuzzy, no-wrap
msgid "Fail Fast"
msgstr "Falhar rapidamente"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:34
#, fuzzy
msgid "Beans and dependencies are validated during the build so that your application can never fail in production with common problems such as `AmbiguousResolutionException` or `UnsatisfiedResolutionException`."
msgstr "Os beans e as dependências são validados durante a construção para que a sua aplicação nunca falhe na produção com problemas comuns, como `AmbiguousResolutionException` ou `UnsatisfiedResolutionException`."

#. type: Title ===
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:35
#, fuzzy, no-wrap
msgid "Instant Startup"
msgstr "Arranque imediato"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:40
#, fuzzy
msgid "When the app starts ArC just loads all the metadata and initializes some internal structures.  There is no need to analyze the application classes again.  This means negligible startup overhead."
msgstr "Quando a aplicação é iniciada, o ArC carrega apenas todos os metadados e inicializa algumas estruturas internas. Não há necessidade de analisar as classes da aplicação novamente. Isso significa uma sobrecarga de inicialização insignificante."

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:42
#, fuzzy
msgid "This applies to both the GraalVM and OpenJDK HotSpot runtimes."
msgstr "Isso se aplica aos tempos de execução do GraalVM e do OpenJDK HotSpot."

#. type: Title ===
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:43
#, fuzzy, no-wrap
msgid "Minimized Runtime"
msgstr "Tempo de execução minimizado"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:48
#, fuzzy
msgid "In Quarkus 0.19, ArC plus integration runtime consist of 72 classes and occupies ~ 140 KB in jars.  http://weld.cdi-spec.org/[Weld 3.1.1] (CDI Reference Implementation) core is roughly 1200 classes and approx. 2 MB jar.  In other words, ArC runtime takes approx. 7% of the Weld runtime in terms of number of classes and jar footprint."
msgstr "No Quarkus 0.19, o ArC mais o tempo de execução de integração consistem em 72 classes e ocupam ~ 140 KB em jars. O núcleo do  link:http://weld.cdi-spec.org/[Weld 3.1.1] (CDI Reference Implementation) tem cerca de 1200 classes e aproximadamente 2 MB de jar. Por outras palavras, o tempo de execução do ArC ocupa cerca de 7% do tempo de execução do Weld em termos de número de classes e de jar footprint."

#. type: Title ===
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:49
#, fuzzy, no-wrap
msgid "Optimized Code Paths and Metadata Structures"
msgstr "Caminhos de código optimizados e estruturas de metadados"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:53
#, fuzzy
msgid "When generating the metadata classes ArC can sometimes produce leaner and smarter logic because it has the whole application analyzed already.  This is one of the areas where we would like to develop and improve ArC."
msgstr "Ao gerar as classes de metadados, o ArC pode, por vezes, produzir uma lógica mais simples e inteligente, uma vez que já tem toda a aplicação analisada. Esta é uma das áreas em que gostaríamos de desenvolver e melhorar o ArC."

#. type: Title ===
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:54
#, fuzzy, no-wrap
msgid "Extension Points"
msgstr "Pontos de extensão"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:60
#, fuzzy
msgid "Unfortunately, CDI portable extensions are inherently runtime constructs and therefore cannot be fully supported in Quarkus.  In fact, all CDI extensions are ignored at the moment.  Nevertheless, most of the functionality can be achieved using https://quarkus.io/guides/cdi-reference#build-time-extension-points[Quarkus extensions].  The CDI extensions are encouraged to generalize the code, and if possible provide a Quarkus extension to make full use of build-time metadata processing."
msgstr "Infelizmente, as extensões portáteis CDI são inerentemente construções de tempo de execução e, por conseguinte, não podem ser totalmente suportadas no Quarkus. De facto, de momento, todas as extensões CDI são ignoradas. No entanto, a maior parte da funcionalidade pode ser obtida utilizando  link:https://quarkus.io/guides/cdi-reference#build-time-extension-points[as extensões do Quarkus]. As extensões CDI são encorajadas a generalizar o código e, se possível, a fornecer uma extensão Quarkus para utilizar plenamente o processamento de metadados em tempo de construção."

#. type: Title ==
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:61
#, fuzzy, no-wrap
msgid "Non-standard Features"
msgstr "Características não normalizadas"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:65
#, fuzzy
msgid "ArC is not limited to standards and we're constantly looking for ways to go beyond and extend the possibilities.  Following are some examples of non-standard features provided by Quarkus DI."
msgstr "O ArC não se limita às normas e estamos constantemente à procura de formas de ir mais além e alargar as possibilidades. Seguem-se alguns exemplos de funcionalidades não normalizadas fornecidas pelo Quarkus DI."

#. type: Title ===
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:66
#, fuzzy, no-wrap
msgid "Qualified Injected Fields"
msgstr "Campos Injectados Qualificados"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:69
#, fuzzy
msgid "Normally, if you declare an injected field you'll always need to use `@Inject` and optionally required qualifiers:"
msgstr "Normalmente, se declarar um campo injetado, terá sempre de utilizar `@Inject` e qualificadores opcionais obrigatórios:"

#. type: delimited block -
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:75
#, no-wrap
msgid ""
"  @Inject\n"
"  @ConfigProperty(name = \"cool\")\n"
"  String coolProperty;\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:78
#, fuzzy
msgid "In Quarkus, you can skip the `@Inject` annotation completely if an injected field declares at least one qualifier:"
msgstr "No Quarkus, é possível ignorar completamente a anotação `@Inject` se um campo injetado declarar pelo menos um qualificador:"

#. type: delimited block -
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:83
#, no-wrap
msgid ""
"  @ConfigProperty(name = \"cool\")\n"
"  String coolProperty;\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:86
#, fuzzy
msgid "`@Inject` is still required for constructor and method injection."
msgstr "`@Inject` ainda é necessário para a injeção de construtores e métodos."

#. type: Title ===
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:87
#, fuzzy, no-wrap
msgid "Simplified Constructor Injection"
msgstr "Injeção de Construtor Simplificada"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:91
#, fuzzy
msgid "In CDI, a normal scoped bean must always declare a no-args constructor (this constructor is normally generated by the compiler unless you declare any other constructor).  However, this requirement complicates constructor injection - you would need to provide a dummy no-args constructor to make things work in CDI."
msgstr "Em CDI, um bean com escopo normal deve sempre declarar um construtor no-args (este construtor é normalmente gerado pelo compilador, a menos que você declare qualquer outro construtor). No entanto, este requisito complica a injeção de construtores - teria de fornecer um construtor no-args fictício para que as coisas funcionassem em CDI."

#. type: delimited block -
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:96
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:116
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyCoolService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:98
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:118
#, no-wrap
msgid "  private SimpleProcessor processor;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:101
#, no-wrap
msgid ""
"  MyCoolService() { // dummy constructor needed\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:107
#, no-wrap
msgid ""
"  @Inject // constructor injection\n"
"  MyCoolService(SimpleProcessor processor) {\n"
"    this.processor = processor;\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:111
#, fuzzy
msgid "There is no need to declare dummy constructors for normal scoped bean in Quarkus - they are generated automatically.  Also if there's only one constructor there is no need for `@Inject`."
msgstr "No Quarkus, não é necessário declarar construtores fictícios para um feijão com escopo normal - eles são gerados automaticamente. Além disso, se houver apenas um construtor, não há necessidade de `@Inject`."

#. type: delimited block -
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:123
#, no-wrap
msgid ""
"  MyCoolService(SimpleProcessor processor) {\n"
"    this.processor = processor;\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:126
#, fuzzy
msgid "We don't generate a no-args constructor automatically if a bean class extends another class that does not declare a no-args constructor."
msgstr "Não geramos um construtor no-args automaticamente se uma classe bean estender outra classe que não declare um construtor no-args."

#. type: Title ===
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:127
#, fuzzy, no-wrap
msgid "Default Beans"
msgstr "Feijões por defeito"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:131
#, fuzzy
msgid "CDI has a feature called https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#alternatives[alternatives].  Simply said a bean annotated with `@Alternative` and `@Priority` takes precedence over the non-alternative beans during type-safe resolution."
msgstr "O CDI tem uma caraterística chamada  link:https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#alternatives[alternativas]. Dito de forma simples, um feijão anotado com `@Alternative` e `@Priority` tem precedência sobre os feijões não alternativos durante a resolução segura do tipo."

#. type: delimited block -
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:136
#, no-wrap
msgid ""
"class MyBean {\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:141
#, no-wrap
msgid ""
"@Alternative\n"
"@Priority(1)\n"
"class MyAlternativeBean extends MyBean {\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:144
#, no-wrap
msgid ""
"@Inject // MyAlternativeBean wins and is injected!\n"
"MyBean bean;\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:153
#, fuzzy
msgid "So, what if a user wants to override a bean defined by a library/extension? The bean would have to be marked as a CDI `@Alternative` that is enabled using the `@Priority` annotation.  Is there a simpler approach? Yes, there is.  You can use a non-standard feature called \"default beans\".  In this case, a bean that can be overridden should be annotated with `@io.quarkus.arc.DefaultBean`.  And that's it."
msgstr "Então, e se um utilizador quiser substituir um bean definido por uma biblioteca/extensão? O bean teria de ser marcado como um CDI `@Alternative` que é ativado utilizando a anotação `@Priority`. Existe uma abordagem mais simples? Sim, existe. Pode utilizar uma funcionalidade não normalizada chamada \"beans predefinidos\". Neste caso, um bean que pode ser substituído deve ser anotado com `@io.quarkus.arc.DefaultBean`. E é só isso."

#. type: delimited block -
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:159
#, no-wrap
msgid ""
"@DefaultBean\n"
"class MyBean {\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:162
#, no-wrap
msgid ""
"class MyOwnBean extends MyBean {\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:165
#, no-wrap
msgid ""
"@Inject // MyOwnBean wins and is injected!\n"
"MyBean bean;\n"
msgstr ""

#. type: Title ===
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:167
#, fuzzy, no-wrap
msgid "Removing Unused Beans"
msgstr "Remoção de beans não utilizados"

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:173
#, fuzzy
msgid "GraalVM native image does a pretty good job when removing all classes that are not reachable from your application.  However, sometimes checking reachability is not enough.  Sometimes the framework itself must decide whether a component is needed or not.  In standard CDI, all beans are retained by the container no matter whether they're needed or not."
msgstr "A imagem nativa do GraalVM faz um bom trabalho ao remover todas as classes que não são acessíveis da sua aplicação. No entanto, por vezes, verificar a acessibilidade não é suficiente. Por vezes, a própria estrutura deve decidir se um componente é necessário ou não. No CDI padrão, todos os beans são retidos pelo contentor, independentemente de serem necessários ou não."

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:180
#, fuzzy
msgid "Let's suppose we have a bean class `org.acme.Foo`.  This bean class imports and uses a lot of various classes.  It's annotated with `@ApplicationScoped` and so Quarkus needs to generate a bean metadata class and a client proxy and register this metadata when the application starts.  But what if nobody ever uses this bean? We would still hold a reference on the generated metadata, and the bean class itself, and its dependencies.  In other words, all these classes would be reachable."
msgstr "Vamos supor que temos uma classe de feijão `org.acme.Foo`. Esta classe de feijão importa e utiliza muitas classes diferentes. Está anotada com `@ApplicationScoped` e, por isso, o Quarkus precisa de gerar uma classe de metadados do bean e um proxy de cliente e registar estes metadados quando a aplicação é iniciada. Mas e se nunca ninguém usar este bean? Continuaremos a ter uma referência dos metadados gerados, da própria classe do bean e das suas dependências. Por outras palavras, todas estas classes estariam acessíveis."

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:187
#, fuzzy
msgid "Quarkus attempts to remove all *unused beans* during build by default.  This helps to reduce the number of generated classes and also the amount of memory needed at runtime.  But how do we actually detect an unused bean? The rules are described in the https://quarkus.io/guides/cdi-reference#remove_unused_beans[reference guide] but simply said: if a bean is not injected anywhere and cannot be reached in any other standard way (e.g. observer notification) it is removed.  Moreover, users can instruct the container to not remove a bean by annotating the bean class with `@io.quarkus.arc.Unremovable`.  Finally, this optimization can be disabled and fine tuned by using the `quarkus.arc.remove-unused-beans` property."
msgstr "Por defeito, o Quarkus tenta remover todos os *beans não utilizados* durante a construção. Isto ajuda a reduzir o número de classes geradas e também a quantidade de memória necessária em tempo de execução. Mas como é que detectamos um bean não utilizado? As regras estão descritas no  link:https://quarkus.io/guides/cdi-reference#remove_unused_beans[guia de referência], mas de forma simples: se um bean não for injetado em lado nenhum e não puder ser alcançado de outra forma padrão (por exemplo, notificação de observador), é removido. Além disso, os utilizadores podem dar instruções ao contentor para não remover um bean, anotando a classe do bean com `@io.quarkus.arc.Unremovable`. Finalmente, esta otimização pode ser desactivada e afinada utilizando a propriedade `quarkus.arc.remove-unused-beans`."

#. type: Plain text
#: upstream/_posts/2019-07-25-quarkus-dependency-injection.adoc:188
#, fuzzy
msgid "This feature applies to the JVM mode as well."
msgstr "Esta funcionalidade também se aplica ao modo JVM."
