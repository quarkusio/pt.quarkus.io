# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy, no-wrap
msgid "Quarkus Dependency Injection"
msgstr "Injeção de dependência Quarkus"

#. type: YAML Front Matter: synopsis
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy, no-wrap
msgid "Quarkus ArC is a build-time oriented dependency injection based on CDI 2.0. But what does it actually mean and what benefits does a build-time processing DI bring?"
msgstr "O Quarkus ArC é uma injeção de dependências orientada para o tempo de construção baseada no CDI 2.0. Mas o que é que isso significa realmente e que benefícios traz uma injeção de dependências orientada para o tempo de construção?"

#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid ""
"Quarkus ArC is a build-time oriented dependency injection based on http://cdi-spec.org/[CDI 2.0].\n"
"In this blogpost, we're going to explain the relationship to the specification and describe some of the benefits and drawbacks of the build-time processing design."
msgstr "O Quarkus ArC é uma injeção de dependência orientada ao tempo de construção baseada no link:http://cdi-spec.org/[CDI 2.0] . Neste blogpost, explicaremos a relação com a especificação e descreveremos algumas das vantagens e desvantagens do design de processamento de tempo de compilação."

#. type: Title ==
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, no-wrap
msgid "Compatibility"
msgstr "Compatibilidade"

#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid ""
"It does not make sense to reinvent the wheel, especially when it comes to dependency injection.\n"
"There are many frameworks that try to solve similar problems.\n"
"A year ago, we made a design decision to build Quarkus DI on top of CDI.\n"
"We had some very good reasons to choose CDI:"
msgstr "Não faz sentido reinventar a roda, especialmente quando se trata de injeção de dependência. Há muitas estruturas que tentam resolver problemas semelhantes. Há um ano, tomamos a decisão de criar o Quarkus DI com base no CDI. Tínhamos alguns motivos muito bons para escolher o CDI:"

#. type: Plain text
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid "CDI is a mature and proven component model"
msgstr "A CDI é um modelo de componentes maduro e comprovado"

#. type: Plain text
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid "We at Red Hat have almost ten years of experience with developing http://weld.cdi-spec.org/[Weld - the CDI Reference Implementation]"
msgstr "Na Red Hat, temos quase dez anos de experiência no desenvolvimento do  link:http://weld.cdi-spec.org/[Weld - a implementação de referência do CDI]"

#. type: Plain text
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid "The CDI API is built on top of `javax.inject` so that it should be easy to migrate from any DI framework compatible with `@Inject`"
msgstr "A API CDI é construída com base em `javax.inject`, de modo que deve ser fácil migrar de qualquer estrutura DI compatível com `@Inject`"

#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid ""
"Our primary goal was to implement a supersonic build-time oriented DI solution compatible with CDI.\n"
"This would allow users to continue using CDI in their applications but also leverage Quarkus build-time optimizations.\n"
"However, ArC is not a full CDI implementation verified by the TCK - see also the list of https://quarkus.io/guides/cdi-reference#supported_features[supported features] and the list of https://quarkus.io/guides/cdi-reference#limitations[limitations]."
msgstr "Nosso principal objetivo era implementar uma solução supersônica de DI orientada ao tempo de compilação compatível com o CDI. Isso permitiria que os usuários continuassem a usar o CDI em seus aplicativos, mas também aproveitassem as otimizações de tempo de compilação do Quarkus. No entanto, o ArC não é uma implementação completa do CDI verificada pelo TCK - consulte também a lista de link:https://quarkus.io/guides/cdi-reference#supported_features[recursos compatíveis] e a lista de link:https://quarkus.io/guides/cdi-reference#limitations[limitações] ."

#. type: Title ==
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy, no-wrap
msgid "Build-time Processing Benefits and Drawbacks"
msgstr "Vantagens e desvantagens do processamento em tempo de construção"

#. type: Title ===
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy, no-wrap
msgid "Fail Fast"
msgstr "Falhar rapidamente"

#. type: Plain text
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid "Beans and dependencies are validated during the build so that your application can never fail in production with common problems such as `AmbiguousResolutionException` or `UnsatisfiedResolutionException`."
msgstr "Os beans e as dependências são validados durante a construção para que a sua aplicação nunca falhe na produção com problemas comuns, como `AmbiguousResolutionException` ou `UnsatisfiedResolutionException`."

#. type: Title ===
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy, no-wrap
msgid "Instant Startup"
msgstr "Arranque imediato"

#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid ""
"When the app starts ArC just loads all the metadata and initializes some internal structures.\n"
"There is no need to analyze the application classes again.\n"
"This means negligible startup overhead."
msgstr "Quando o aplicativo é iniciado, o ArC apenas carrega todos os metadados e inicializa algumas estruturas internas. Não há necessidade de analisar as classes do aplicativo novamente. Isso significa uma sobrecarga de inicialização insignificante."

#. type: Plain text
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid "This applies to both the GraalVM and OpenJDK HotSpot runtimes."
msgstr "Isso se aplica aos tempos de execução do GraalVM e do OpenJDK HotSpot."

#. type: Title ===
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy, no-wrap
msgid "Minimized Runtime"
msgstr "Tempo de execução minimizado"

#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid ""
"In Quarkus 0.19, ArC plus integration runtime consist of 72 classes and occupies ~ 140 KB in jars.\n"
"http://weld.cdi-spec.org/[Weld 3.1.1] (CDI Reference Implementation) core is roughly 1200 classes and approx. 2 MB jar.\n"
"In other words, ArC runtime takes approx. 7% of the Weld runtime in terms of number of classes and jar footprint."
msgstr "No Quarkus 0.19, o ArC mais o tempo de execução de integração consistem em 72 classes e ocupam ~ 140 KB em jars. O núcleo do link:http://weld.cdi-spec.org/[Weld 3.1.1] (Implementação de referência do CDI) tem cerca de 1.200 classes e aproximadamente 2 MB de jar. Em outras palavras, o tempo de execução do ArC ocupa cerca de 7% do tempo de execução do Weld em termos de número de classes e espaço ocupado pelo jar."

#. type: Title ===
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy, no-wrap
msgid "Optimized Code Paths and Metadata Structures"
msgstr "Caminhos de código optimizados e estruturas de metadados"

#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid ""
"When generating the metadata classes ArC can sometimes produce leaner and smarter logic because it has the whole application analyzed already.\n"
"This is one of the areas where we would like to develop and improve ArC."
msgstr "Ao gerar as classes de metadados, o ArC pode, às vezes, produzir uma lógica mais enxuta e inteligente porque já tem todo o aplicativo analisado. Essa é uma das áreas em que gostaríamos de desenvolver e aprimorar o ArC."

#. type: Title ===
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, no-wrap
msgid "Extension Points"
msgstr "Pontos de Extensão"

#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid ""
"Unfortunately, CDI portable extensions are inherently runtime constructs and therefore cannot be fully supported in Quarkus.\n"
"In fact, all CDI extensions are ignored at the moment.\n"
"Nevertheless, most of the functionality can be achieved using https://quarkus.io/guides/cdi-reference#build-time-extension-points[Quarkus extensions].\n"
"The CDI extensions are encouraged to generalize the code, and if possible provide a Quarkus extension to make full use of build-time metadata processing."
msgstr "Infelizmente, as extensões portáteis CDI são inerentemente construções de tempo de execução e, portanto, não podem ser totalmente compatíveis com o Quarkus. Na verdade, todas as extensões CDI são ignoradas no momento. No entanto, a maior parte da funcionalidade pode ser obtida usando link:https://quarkus.io/guides/cdi-reference#build-time-extension-points[as extensões do Quarkus] . As extensões CDI são incentivadas a generalizar o código e, se possível, fornecer uma extensão Quarkus para fazer uso total do processamento de metadados em tempo de construção."

#. type: Title ==
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy, no-wrap
msgid "Non-standard Features"
msgstr "Características não normalizadas"

#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid ""
"ArC is not limited to standards and we're constantly looking for ways to go beyond and extend the possibilities.\n"
"Following are some examples of non-standard features provided by Quarkus DI."
msgstr "O ArC não se limita aos padrões e estamos constantemente procurando maneiras de ir além e ampliar as possibilidades. A seguir, alguns exemplos de recursos não padronizados fornecidos pelo Quarkus DI."

#. type: Title ===
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy, no-wrap
msgid "Qualified Injected Fields"
msgstr "Campos Injectados Qualificados"

#. type: Plain text
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid "Normally, if you declare an injected field you'll always need to use `@Inject` and optionally required qualifiers:"
msgstr "Normalmente, se declarar um campo injetado, terá sempre de utilizar `@Inject` e qualificadores opcionais obrigatórios:"

#. type: Plain text
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid "In Quarkus, you can skip the `@Inject` annotation completely if an injected field declares at least one qualifier:"
msgstr "No Quarkus, é possível ignorar completamente a anotação `@Inject` se um campo injetado declarar pelo menos um qualificador:"

#. type: Plain text
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid "`@Inject` is still required for constructor and method injection."
msgstr "`@Inject` ainda é necessário para a injeção de construtores e métodos."

#. type: Title ===
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy, no-wrap
msgid "Simplified Constructor Injection"
msgstr "Injeção de Construtor Simplificada"

#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid ""
"In CDI, a normal scoped bean must always declare a no-args constructor (this constructor is normally generated by the compiler unless you declare any other constructor).\n"
"However, this requirement complicates constructor injection - you would need to provide a dummy no-args constructor to make things work in CDI."
msgstr "No CDI, um bean com escopo normal deve sempre declarar um construtor no-args (esse construtor é normalmente gerado pelo compilador, a menos que o usuário declare qualquer outro construtor). No entanto, esse requisito complica a injeção de construtor - o senhor precisaria fornecer um construtor no-args fictício para que as coisas funcionassem no CDI."

#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid ""
"There is no need to declare dummy constructors for normal scoped bean in Quarkus - they are generated automatically.\n"
"Also if there's only one constructor there is no need for `@Inject`."
msgstr "Não há necessidade de declarar construtores fictícios para o bean com escopo normal no Quarkus - eles são gerados automaticamente. Além disso, se houver apenas um construtor, não há necessidade de `@Inject` ."

#. type: Plain text
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid "We don't generate a no-args constructor automatically if a bean class extends another class that does not declare a no-args constructor."
msgstr "Não geramos um construtor no-args automaticamente se uma classe bean estender outra classe que não declare um construtor no-args."

#. type: Title ===
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy, no-wrap
msgid "Default Beans"
msgstr "Feijões por defeito"

#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid ""
"CDI has a feature called https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#alternatives[alternatives].\n"
"Simply said a bean annotated with `@Alternative` and `@Priority` takes precedence over the non-alternative beans during type-safe resolution."
msgstr "O CDI tem um recurso chamado link:https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#alternatives[alternativas] . Em termos simples, um bean anotado com `@Alternative` e `@Priority` tem precedência sobre os beans não alternativos durante a resolução segura de tipos."

#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid ""
"So, what if a user wants to override a bean defined by a library/extension?\n"
"The bean would have to be marked as a CDI `@Alternative` that is enabled using the `@Priority` annotation.\n"
"Is there a simpler approach?\n"
"Yes, there is.\n"
"You can use a non-standard feature called \"default beans\".\n"
"In this case, a bean that can be overridden should be annotated with `@io.quarkus.arc.DefaultBean`.\n"
"And that's it."
msgstr "Então, e se um usuário quiser substituir um bean definido por uma biblioteca/extensão? O bean teria de ser marcado como um CDI `@Alternative` que é ativado usando a anotação `@Priority` . Existe uma abordagem mais simples? Sim, existe. O senhor pode usar um recurso não padrão chamado \"beans padrão\". Nesse caso, um bean que pode ser substituído deve ser anotado com `@io.quarkus.arc.DefaultBean` . E é isso."

#. type: Title ===
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy, no-wrap
msgid "Removing Unused Beans"
msgstr "Remoção de beans não utilizados"

#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid ""
"GraalVM native image does a pretty good job when removing all classes that are not reachable from your application.\n"
"However, sometimes checking reachability is not enough.\n"
"Sometimes the framework itself must decide whether a component is needed or not.\n"
"In standard CDI, all beans are retained by the container no matter whether they're needed or not."
msgstr "A imagem nativa do GraalVM faz um bom trabalho ao remover todas as classes que não são acessíveis do seu aplicativo. No entanto, às vezes, verificar a acessibilidade não é suficiente. Às vezes, a própria estrutura precisa decidir se um componente é necessário ou não. No CDI padrão, todos os beans são mantidos pelo contêiner, independentemente de serem necessários ou não."

#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid ""
"Let's suppose we have a bean class `org.acme.Foo`.\n"
"This bean class imports and uses a lot of various classes.\n"
"It's annotated with `@ApplicationScoped` and so Quarkus needs to generate a bean metadata class and a client proxy and register this metadata when the application starts.\n"
"But what if nobody ever uses this bean?\n"
"We would still hold a reference on the generated metadata, and the bean class itself, and its dependencies.\n"
"In other words, all these classes would be reachable."
msgstr "Vamos supor que temos uma classe de bean `org.acme.Foo` . Essa classe bean importa e usa muitas classes diferentes. Ela é anotada com `@ApplicationScoped` e, portanto, o Quarkus precisa gerar uma classe de metadados de bean e um proxy de cliente e registrar esses metadados quando o aplicativo for iniciado. Mas e se ninguém nunca usar esse bean? Ainda teríamos uma referência sobre os metadados gerados, a própria classe do bean e suas dependências. Em outras palavras, todas essas classes estariam acessíveis."

#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid ""
"Quarkus attempts to remove all *unused beans* during build by default.\n"
"This helps to reduce the number of generated classes and also the amount of memory needed at runtime.\n"
"But how do we actually detect an unused bean?\n"
"The rules are described in the https://quarkus.io/guides/cdi-reference#remove_unused_beans[reference guide] but simply said: if a bean is not injected anywhere and cannot be reached in any other standard way (e.g. observer notification) it is removed.\n"
"Moreover, users can instruct the container to not remove a bean by annotating the bean class with `@io.quarkus.arc.Unremovable`.\n"
"Finally, this optimization can be disabled and fine tuned by using the `quarkus.arc.remove-unused-beans` property."
msgstr "Por padrão, o Quarkus tenta remover todos os *beans não utilizados* durante a compilação. Isso ajuda a reduzir o número de classes geradas e também a quantidade de memória necessária em tempo de execução. Mas como realmente detectamos um bean não utilizado? As regras estão descritas no link:https://quarkus.io/guides/cdi-reference#remove_unused_beans[guia de referência] , mas de forma simples: se um bean não for injetado em nenhum lugar e não puder ser acessado de nenhuma outra forma padrão (por exemplo, notificação de observador), ele será removido. Além disso, os usuários podem instruir o contêiner a não remover um bean anotando a classe do bean com `@io.quarkus.arc.Unremovable` . Por fim, essa otimização pode ser desativada e ajustada com o uso da propriedade `quarkus.arc.remove-unused-beans` ."

#. type: Plain text
#: _posts/2019-07-25-quarkus-dependency-injection.adoc
#, fuzzy
msgid "This feature applies to the JVM mode as well."
msgstr "Esta funcionalidade também se aplica ao modo JVM."
