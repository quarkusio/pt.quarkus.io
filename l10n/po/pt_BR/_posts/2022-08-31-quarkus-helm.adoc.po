# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:1
#, no-wrap
msgid "jcarvaja"
msgstr ""

#. type: YAML Front Matter: date
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:1
#, no-wrap
msgid "2022-08-30"
msgstr ""

#. type: YAML Front Matter: layout
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:1
#, no-wrap
msgid "post"
msgstr ""

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:1
#, no-wrap
msgid "How to use the Quarkus Helm extension to generate the Helm chart manifests"
msgstr ""

#. type: YAML Front Matter: tags
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:1
#, no-wrap
msgid "extension"
msgstr ""

#. type: YAML Front Matter: title
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:1
#, no-wrap
msgid "Generate Helm charts manifests with Quarkus Helm"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:11
msgid "https://helm.sh/[Helm] is the most popular package manager that finds, shares, and deploys software built for Kubernetes. To configure Java applications for distribution through Helm, you need to package them as Helm charts containing all the necessary metadata and resource definitions and this can be a very tedious task. The good news is that Quarkus has recently released the new https://github.com/quarkiverse/quarkus-helm[Quarkus Helm] extension that will automatically generate all these Helm chart manifests and resources!"
msgstr ""

#. type: Title ==
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:12
#, no-wrap
msgid "Introduction to Helm charts"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:15
msgid "First of all, let's introduce how a Helm chart looks like. A Helm chart is a collection of files inside a directory. The following files are mandatory:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:17
msgid "`Chart.yaml`: Chart metadata, such as name, version, and developers."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:18
msgid "`values.yaml`: Default configuration values for the chart in YAML."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:19
msgid "`templates`: A directory containing the list of resources that, in combination with `values.yaml`, generate the application when the chart is installed. The resources are also specified in YAML."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:21
msgid "Find more information about Helm charts in the https://helm.sh/docs/topics/charts/[official Helm documentation]."
msgstr ""

#. type: Title ==
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:22
#, no-wrap
msgid "Getting started with the Quarkus Helm extension"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:25
msgid "Let's now see how we can generate the Helm chart of a Quarkus application."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:27
msgid "In this example, weâ€™ll create a Quarkus application with the Quarkus Helm and the Quarkus Kubernetes extensions by running the following command:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:37
#, no-wrap
msgid ""
"mvn io.quarkus.platform:quarkus-maven-plugin:2.12.0.Final:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=helm-quickstart \\\n"
"    -DclassName=\"org.acme.quickstart.GreetingResource\" \\\n"
"    -Dpath=\"/hello\" \\\n"
"    -Dextensions=\"resteasy-reactive,kubernetes,helm\"\n"
"cd helm-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:40
msgid "If you already have your Quarkus project configured, you can add the Helm extension to your project by running the following command in your project base directory:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:44
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"helm\"\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:47
msgid "This command will add the following dependency to your `pom.xml` file:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:54
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkiverse.helm</groupId>\n"
"    <artifactId>quarkus-helm</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:57
msgid "And now you can generate the Helm resources using the Maven build command:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:61
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:89
#, no-wrap
msgid "./mvnw clean package\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:64
msgid "Depending on the Quarkus Kubernetes extensions that you are using in your project, the Helm resources will include some resources or others. Since we have used the Quarkus Kubernetes extension, the Helm chart resources will be generated in the `target/helm/kubernetes/<chart name>/` directory."
msgstr ""

#. type: delimited block =
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:68
msgid "The `<chart name>` is set from either the property `quarkus.helm.name` or the Quarkus application name."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:71
msgid "Moreover, the Helm resources include the following files in the `target/helm/kubernetes/<chart name>/templates` directory:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:73
msgid "`deployment.yaml`"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:74
msgid "`ingress.yaml`"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:75
msgid "`service.yaml`"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:77
msgid "Instead, if we were using the Quarkus OpenShift extension, the Helm chart sources would be generated in the `target/helm/openshift/<chart name>/` directory and it would include the files `buildconfig.yaml`, `deploymentconfig.yaml`, `service.yaml` and `imagestream.yaml`."
msgstr ""

#. type: Title ==
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:78
#, no-wrap
msgid "Helm use"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:81
msgid "Let's see next how to use the previously generated Helm chart."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:83
msgid "First, make sure you have installed the https://helm.sh/docs/intro/install/[Helm command-line interface] (CLI) and logged into a Kubernetes cluster."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:85
msgid "Then run the following Maven command to generate the Helm artifacts:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:92
msgid "And install the generated Helm chart into the cluster:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:96
#, no-wrap
msgid "helm install helm-example ./target/helm/kubernetes/<chart name>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:99
msgid "The `helm` command waits until the chart is fully installed and the application is up and running."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:101
msgid "You can update your deployment in a couple of ways. The first is via the `upgrade` command of the Helm CLI. After having made changes to your project and regenerated the resources, you can upgrade your deployment using the following command:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:105
#, no-wrap
msgid "helm upgrade helm-example ./target/helm/kubernetes/<chart name>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:108
msgid "The second way to update a deployment is through the `--set` option of the helm upgrade command:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:112
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:142
#, no-wrap
msgid "helm upgrade helm-example ./target/helm/kubernetes/<chart name> --set app.replicas=1\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:115
msgid "The `app.replicas` option is a parameterized property that is mapped by the `values.yaml` file. We'll explore this function more in the next section."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:117
msgid "Finally, to delete a deployment, enter:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:121
#, no-wrap
msgid "helm uninstall helm-example\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:123
#, no-wrap
msgid "Mapping values"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:126
msgid "Helm allows _mapping_ to set properties of your resources when installing your chart or after your chart has been installed. For example, suppose your deployment template in the `templates/deployment.yaml` file looks like this:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:135
#, no-wrap
msgid ""
"apiVersion: apps/v1\n"
"kind: Deployment\n"
"metadata:\n"
"  name: example\n"
"spec:\n"
"  replicas: {{ .Values.app.replicas }}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:138
msgid "You can set the number of replicas to use when installing the chart using the `helm` command, as shown in the previous section:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:145
msgid "Alternatively, you can set the number of replicas to use in the generated `values.yaml` file, located in the chart's directory at `target/helm/kubernetes/<chart name>/values.yaml`:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:150
#, no-wrap
msgid ""
"app:\n"
"  replicas: 1\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:153
msgid "So, do I need to manually update the `values.yaml` and the template resources to map these properties? No! The Quarkus Helm extension will automatically map some preconfigured properties, such as the Kubernetes replicas or the ingress host. The complete list of preconfigured properties is in the https://quarkiverse.github.io/quarkiverse-docs/quarkus-helm/dev/index.html#_mapping_values[official Quarkus Helm site] documentation."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:155
msgid "Let's try out an example of configuring the replicas using the Quarkus Kubernetes `quarkus.kubernetes.replicas` property. We'll see how the Quarkus Helm extension automatically maps it into the generated Helm chart."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:157
msgid "First, set 3 replicas in your `application.properties` file:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:161
#, no-wrap
msgid "quarkus.kubernetes.replicas=3\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:164
msgid "Now, the generated Helm values file at `target/helm/kubernetes/<chart name>/values.yaml` will contain the replicas value:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:169
#, no-wrap
msgid ""
"app:\n"
"  replicas: 3\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:172
msgid "Also, the deployment template file at `target/helm/kubernetes/<chart name>/templates/deployment.yaml` will have a reference to this value."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:174
msgid "But what if we want to map other properties that are not preconfigured? For example, given the following deployment template file, I want to map the value `example` that appears in the `metadata.name` property:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:182
#, no-wrap
msgid ""
"apiVersion: apps/v1\n"
"kind: Deployment\n"
"metadata:\n"
"  name: example ## let's map this value!\n"
"# ...\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:185
msgid "You can configure the Quarkus Helm extension to map any properties that are present in your resources using https://github.com/yaml-path/YamlPath[YAMLPath expressions]. To continue with the preceding example, you only need to add the following configuration to your properties:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:190
#, no-wrap
msgid ""
"quarkus.helm.values[0].property=resource <1>\n"
"quarkus.helm.values[0].paths=metadata.name <2>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:192
msgid "`property` is the property name to be set in the generated `values.yaml`"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:193
msgid "`paths` is a list of YAMLPath expressions that identify the properties you want to use"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:195
msgid "Using the properties just defined, the resulting Helm values file at `target/helm/kubernetes/<chart name>/values.yaml` will now include:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:203
#, no-wrap
msgid ""
"apiVersion: apps/v1\n"
"kind: Deployment\n"
"metadata:\n"
"  name: {{ .Values.app.resource }} # `resource` comes from the property `quarkus.helm.values[0].property`\n"
"# ...\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:206
msgid "YAMLPath expressions also support more complex scenarios. You can use the expressions to replace properties for a certain resource type, or properties described as a key-value map. You can find all the supported features in https://quarkiverse.github.io/quarkiverse-docs/quarkus-helm/dev/index.html#_mapping_user_properties_using_yamlpath_expressions[here]."
msgstr ""

#. type: Title ==
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:207
#, no-wrap
msgid "Helm profiles"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:210
msgid "By default, all properties are mapped to the same Helm `values.yaml` file. However, the Quarkus Helm extension also supports the generation of other Helm values files."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:212
msgid "For example, let's say you have two environments: one for testing and another for production. Each environment has a different ingress host that exposes your Kubernetes application. You can configure your application as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:217
#, no-wrap
msgid ""
"# Mapped to `values.yaml` by the preconfigured Ingress decorator\n"
"quarkus.kubernetes.ingress.host=my-host\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:224
#, no-wrap
msgid ""
"# Overwrite the value of `quarkus.kubernetes.ingress.host` to `values-<profile-name>.yaml`:\n"
"quarkus.helm.values[0].property=host\n"
"quarkus.helm.values[0].paths=(kind == Ingress).spec.rules.host\n"
"quarkus.helm.values[0].value=my-test-host\n"
"## `test` is the profile name.\n"
"quarkus.helm.values[0].profile=test\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:227
msgid "The ingress host property is preconfigured by the Quarkus Helm extension. So you will find the `my-host` value in the `target/helm/kubernetes/<chart name>/values.yaml` file:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:232
#, no-wrap
msgid ""
"app:\n"
"  host: my-host\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:235
msgid "But because you are also using a profile named `test` in one of your properties, the Quarkus Helm extension also generates a `target/helm/kubernetes/<chart name>/values-test.yaml` file with the content:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:240
#, no-wrap
msgid ""
"app:\n"
"  host: my-test-host\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:243
msgid "When installing your chart in the test environment, you can make use of this values file as shown in the following command:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:247
#, no-wrap
msgid "helm install -f ./target/helm/kubernetes/<chart name>/values-test.yaml helm-example ./target/helm/kubernetes/<chart name>\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:249
#, no-wrap
msgid "Summary"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-31-quarkus-helm.adoc:251
msgid "In this article, we learned how to easily generate Helm charts using the Quarkus Helm extension, how to map properties to be set when installing or updating your charts, and how to use Helm profiles."
msgstr ""
