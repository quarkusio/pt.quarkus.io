# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:1
#, fuzzy, no-wrap
msgid "galderz"
msgstr "galderz"

#. type: YAML Front Matter: date
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:1
#, fuzzy, no-wrap
msgid "2021-11-30"
msgstr "2021-11-30"

#. type: YAML Front Matter: layout
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "posto"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:1
#, fuzzy, no-wrap
msgid "Inspect the call paths that get included into a Quarkus Native app with Neo4j"
msgstr "Inspecionar os caminhos de chamada que são incluídos em um aplicativo Quarkus Native com o Neo4j"

#. type: YAML Front Matter: tags
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:1
#, fuzzy, no-wrap
msgid "development-tips native neo4j"
msgstr "dicas de desenvolvimento neo4j nativo"

#. type: YAML Front Matter: title
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:1
#, fuzzy, no-wrap
msgid "Inspecting the Quarkus Native call path universe with Neo4j"
msgstr "Inspecionar o universo do percurso de chamada do Quarkus Native com o Neo4j"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:17
#, fuzzy
msgid "This blog post is the culmination of an idea that Sanne (Grinovero) floated to me during some lunch, back at a time when we, remote engineers, would occasionally meet face to face and have the opportunity to share ideas spontaneously.  I'm unsure if the lunch was in Neuchâtel or Barcelona, but essentially Sanne was diagnosing an issue and he struggled with GraalVM's native image analysis call tree text output.  He wondered whether that data could instead be formatted differently and imported into a graph database for easier inspection.  I'm happy to announce that the GraalVM and Mandrel 21.3.0 releases include improvements to address this particular issue."
msgstr "Este post do blogue é o culminar de uma ideia que Sanne (Grinovero) me apresentou durante um almoço, numa altura em que nós, engenheiros remotos, nos encontrávamos ocasionalmente cara a cara e tínhamos a oportunidade de partilhar ideias espontaneamente. Não tenho a certeza se o almoço foi em Neuchâtel ou Barcelona, mas essencialmente Sanne estava a diagnosticar um problema e teve dificuldades com a análise de imagem nativa do GraalVM, chamando a saída de texto da árvore. Ele queria saber se esses dados poderiam ser formatados de forma diferente e importados para uma base de dados gráfica para facilitar a inspeção. Tenho o prazer de anunciar que as versões 21.3.0 do GraalVM e do Mandrel incluem melhorias para resolver esse problema específico."

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:20
#, fuzzy
msgid "Essentially, they bring much needed improvements for analysing code paths that get included in the native binary.  Debugging these code paths aims to answer questions such as:"
msgstr "Essencialmente, eles trazem melhorias muito necessárias para a análise de caminhos de código que são incluídos no binário nativo. A depuração desses caminhos de código visa responder a perguntas como:"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:23
#, fuzzy
msgid "why does this code path get included in the native binary?"
msgstr "porque é que este caminho de código é incluído no binário nativo?"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:26
#, fuzzy
msgid "These code paths can be optionally reported when enabling printing of the analysis call tree.  With Quarkus, this is achieved by passing in the `-Dquarkus.native.enable-reports` option."
msgstr "Estes caminhos de código podem ser reportados opcionalmente quando se ativa a impressão da árvore de chamadas da análise. Com o Quarkus, isto é conseguido passando a opção `-Dquarkus.native.enable-reports`."

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:30
#, fuzzy
msgid "Before 21.3.0, when Quarkus instructed a GraalVM distribution to print out the call tree, the resulting output would be a single text file representing the call tree in a https://www.graalvm.org/reference-manual/native-image/Reports[custom tree format].  This text file would contain a lot of duplicated information and could be as big as several gigabytes in size."
msgstr "Antes da versão 21.3.0, quando o Quarkus instruía uma distribuição GraalVM a imprimir a árvore de chamadas, a saída resultante era um único ficheiro de texto que representava a árvore de chamadas num  link:https://www.graalvm.org/reference-manual/native-image/Reports[formato de árvore personalizado]. Este ficheiro de texto conteria muita informação duplicada e poderia ter vários gigabytes de tamanho."

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:42
#, fuzzy
msgid "GraalVM 21.3.0 introduces the possibility of representing call trees as CSV files instead of a single text file.  These CSV files contain method information and different connections between them (e.g. direct calls, virtual calls, overrides, etc).  One immediate benefit is that there's no information duplication, so the CSV files can be several times smaller in size compared to the corresponding text file.  In some situations, they can be as much as several thousands times smaller.  However, the main reason why this feature was implemented was to make it easier to feed the call tree to other tools, like graph databases such as https://neo4j.com/[Neo4j].  Once imported, a user can execute graph queries over the call tree, which makes it easier to extract relevant information and answer questions like the one above."
msgstr "O GraalVM 21.3.0 introduz a possibilidade de representar árvores de chamadas como ficheiros CSV em vez de um único ficheiro de texto. Estes ficheiros CSV contêm informações sobre os métodos e as diferentes ligações entre eles (por exemplo, chamadas directas, chamadas virtuais, substituições, etc.). Uma vantagem imediata é que não há duplicação de informação, pelo que os ficheiros CSV podem ser várias vezes mais pequenos em comparação com o ficheiro de texto correspondente. Em algumas situações, podem ser milhares de vezes mais pequenos. No entanto, a principal razão pela qual este recurso foi implementado foi para facilitar a alimentação da árvore de chamadas para outras ferramentas, como bases de dados de gráficos como o  link:https://neo4j.com/[Neo4j]. Uma vez importada, um utilizador pode executar consultas de grafos sobre a árvore de chamadas, o que facilita a extração de informações relevantes e a resposta a perguntas como a anterior."

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:44
#, fuzzy
msgid "In this blog post, you will learn how to:"
msgstr "Nesta publicação do blogue, aprenderá a:"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:46
#, fuzzy
msgid "Instruct a Quarkus application to generate call tree CSV files."
msgstr "Instruir uma aplicação Quarkus para gerar ficheiros CSV de árvores de chamadas."

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:47
#, fuzzy
msgid "Run a Neo4j graph database within a container"
msgstr "Executar uma base de dados de gráficos Neo4j num contentor"

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:48
#, fuzzy
msgid "Import those CSV files into a Neo4j graph database."
msgstr "Importe esses ficheiros CSV para uma base de dados de gráficos Neo4j."

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:49
#, fuzzy
msgid "Run Neo4j cypher queries against the graph database to understand the call paths in the Quarkus application."
msgstr "Executar consultas de cifragem Neo4j na base de dados de grafos para compreender os percursos de chamada na aplicação Quarkus."

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:54
#, fuzzy
msgid "This blog post uses the https://github.com/quarkusio/quarkus-quickstarts/tree/main/hibernate-orm-quickstart[Quarkus Hibernate ORM quickstart] as a sample Quarkus application.  Download the application and execute:"
msgstr "Esta publicação do blogue utiliza o  link:https://github.com/quarkusio/quarkus-quickstarts/tree/main/hibernate-orm-quickstart[Quarkus Hibernate ORM quickstart] como uma aplicação Quarkus de amostra. Descarregue a aplicação e execute-a:"

#. type: delimited block -
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:60
#, no-wrap
msgid ""
"./mvnw package -DskipTests -Pnative \\\n"
"    -Dquarkus.native.container-build=true \\\n"
"    -Dquarkus.native.builder-image=quay.io/quarkus/ubi-quarkus-mandrel:21.3-java11 \\\n"
"    -Dquarkus.native.enable-reports\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:63
#, fuzzy
msgid "The above command will generate a native binary and the CSV files mentioned above."
msgstr "O comando acima irá gerar um binário nativo e os ficheiros CSV mencionados acima."

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:65
#, fuzzy
msgid "Next, start Neo4j in a container:"
msgstr "Em seguida, inicie o Neo4j em um contêiner:"

#. type: delimited block -
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:75
#, no-wrap
msgid ""
"$ export NEO_PASS=...\n"
"$ podman run \\\n"
"    --detach \\\n"
"    --rm \\\n"
"    --name testneo4j \\\n"
"    -p7474:7474 -p7687:7687 \\\n"
"    --env NEO4J_AUTH=neo4j/${NEO_PASS} \\\n"
"    neo4j:latest\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:80
#, fuzzy
msgid "Once the container is running, you can access the Neo4j browser via http://localhost:7474[http://localhost:7474].  Use `neo4j` as the username and the value of `NEO_PASS` as the password to log in."
msgstr "Quando o contêiner estiver em execução, você poderá acessar o navegador Neo4j via  link:http://localhost:7474[http://localhost:7474.] Utilize `neo4j` como nome de utilizador e o valor de `NEO_PASS` como palavra-passe para iniciar sessão."

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:82
#, fuzzy
msgid "To import the CSV files, we need the following cypher script which will import the data within the CSV files and create graph database nodes and edges:"
msgstr "Para importar os ficheiros CSV, precisamos do seguinte script cypher que importará os dados dos ficheiros CSV e criará nós e arestas da base de dados gráfica:"

#. type: delimited block -
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:86
#, no-wrap
msgid "include::../assets/examples/posts/quarkus-native-neo4j-call-tree/import.cypher[]\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:91
#, fuzzy
msgid "You can download the cypher script from link:/assets/examples/posts/quarkus-native-neo4j-call-tree/import.cypher[this link] or copy and paste it in a file called `import.cypher`."
msgstr "Pode descarregar o script cypher a partir  link:/assets/examples/posts/quarkus-native-neo4j-call-tree/import.cypher[desta ligação] ou copiá-lo e colá-lo num ficheiro chamado `import.cypher`."

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:96
#, fuzzy
msgid "The script above is generic enough to work with any Quarkus application, but it will only work with Mandrel 21.3.0.Final.  GraalVM CE 21.3.0.Final lacks the symbolic links to make the `csv` file references work, so if you're on this GraalVM CE, you'll have to modify the CSV file names with project specific, timestamped, file names."
msgstr "O script acima é genérico o suficiente para funcionar com qualquer aplicativo Quarkus, mas só funcionará com o Mandrel 21.3.0.Final. O GraalVM CE 21.3.0.Final não possui os links simbólicos para que as referências do arquivo `csv` funcionem, portanto, se você estiver neste GraalVM CE, terá que modificar os nomes dos arquivos CSV com nomes de arquivos específicos do projeto, com registro de data e hora."

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:98
#, fuzzy
msgid "Next, copy the import cypher script and CSV files into Neo4j's import folder:"
msgstr "Em seguida, copie o script de importação de cifras e os ficheiros CSV para a pasta de importação do Neo4j:"

#. type: delimited block -
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:102
#, no-wrap
msgid ""
"$ podman cp target/*-native-image-source-jar/reports testneo4j:/var/lib/neo4j/import\n"
"$ podman cp import.cypher testneo4j:/var/lib/neo4j\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:105
#, fuzzy
msgid "After copying all the files, invoke the import script:"
msgstr "Depois de copiar todos os ficheiros, invoque o script de importação:"

#. type: delimited block -
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:108
#, no-wrap
msgid "$ podman exec testneo4j bin/cypher-shell -u neo4j -p ${NEO_PASS} -f import.cypher\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:114
#, fuzzy
msgid "If you need to reimport the data, you'll need to clear the previously imported data, otherwise you'll get errors.  You can clear the previously imported data by executing:"
msgstr "Se necessitar de reimportar os dados, terá de limpar os dados importados anteriormente, caso contrário, obterá erros. Pode limpar os dados previamente importados executando:"

#. type: delimited block -
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:118
#, no-wrap
msgid ""
"$ podman exec testneo4j bin/cypher-shell -u neo4j -p ${NEO_PASS} \"MATCH(n) DETACH DELETE n\"\n"
"$ podman exec testneo4j bin/cypher-shell -u neo4j -p ${NEO_PASS} \"DROP CONSTRAINT unique_vm_id\"\n"
"$ podman exec testneo4j bin/cypher-shell -u neo4j -p ${NEO_PASS} \"DROP CONSTRAINT unique_method_id\"\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:122
#, fuzzy
msgid "Once the import completes (shouldn't take more than a couple of minutes), go to the Neo4j browser and you'll be able to observe a small summary of the data in the graph:"
msgstr "Quando a importação estiver concluída (não deve demorar mais do que alguns minutos), aceda ao navegador Neo4j e poderá observar um pequeno resumo dos dados no gráfico:"

#. type: Target for macro image
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:123
#, no-wrap
msgid "data-loaded-side.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:127
#, fuzzy
msgid "The data above shows that there are ~100000 methods, and just over ~300000 edges between them."
msgstr "Os dados acima mostram que existem ~100000 métodos e pouco mais de ~300000 arestas entre eles."

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:133
#, fuzzy
msgid "Next, let's try out some cypher queries to explore the call graph.  I don't know anything about the Quarkus application itself, but given it's a Hibernate ORM application, I can assume that some sort of `persist` method will be called.  Go into the browser and type a query for this:"
msgstr "De seguida, vamos experimentar algumas consultas de cifra para explorar o gráfico de chamadas. Não sei nada sobre a aplicação Quarkus em si, mas como se trata de uma aplicação ORM do Hibernate, posso assumir que algum tipo de método `persist` será chamado. Vá para o navegador e digite uma consulta para isso:"

#. type: delimited block -
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:137
#, no-wrap
msgid "match (m:Method) where m.name = \"persist\" return *\n"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:139
#, no-wrap
msgid "persist-query.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:147
#, fuzzy
msgid "We got some hits, but the default style for the nodes presented is not very readable.  We can however tweak the stylesheet as shown by https://neo4j.com/developer/neo4j-browser/#browser-styling-adv[this guide].  Two useful modifications for this use case is to increase the default `node` `diameter` value to say, `150px`.  The other modification is to switch `node.Method` `caption` value to `\"{display}\"`."
msgstr "Obtivemos alguns resultados, mas o estilo predefinido para os nós apresentados não é muito legível. No entanto, podemos ajustar a folha de estilo conforme mostrado neste  link:https://neo4j.com/developer/neo4j-browser/#browser-styling-adv[guia]. Duas modificações úteis para este caso de uso é aumentar o valor padrão `node` `diameter` para, digamos, `150px`. A outra modificação é mudar o valor de `node.Method` `caption` para `\"{display}\"`."

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:152
#, fuzzy
msgid "`display` is a field within each method that shows a shortened id of the method, that includes package and classname (only the first letter of each), and the method name in camel case with single letters.  E.g. `j.p.EM.persist` would be the `display` for the `persist` method in `javax.persistence.EntityManager`."
msgstr "`display` é um campo dentro de cada método que mostra uma identificação abreviada do método, que inclui o pacote e o nome da classe (apenas a primeira letra de cada um), e o nome do método em maiúsculas e minúsculas com letras simples. Por exemplo, `j.p.EM.persist` seria o `display` para o método `persist` em `javax.persistence.EntityManager`."

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:154
#, fuzzy
msgid "Let's repeat the query after modifying the browser style and moving the nodes to clearly view them:"
msgstr "Vamos repetir a consulta depois de modificar o estilo do browser e mover os nós para os visualizar claramente:"

#. type: Target for macro image
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:155
#, no-wrap
msgid "persist-query-big-nodes.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:160
#, fuzzy
msgid "We can see above that one of the `persist` is to `javax.persistence.EntityManager`.  This is the JPA method for persisting entities and the one we'll be exploring further.  Let's narrow the query down to that one to have a clearer view:"
msgstr "Podemos ver acima que um dos `persist` é `javax.persistence.EntityManager`. Esse é o método JPA para persistir entidades e é o que exploraremos mais adiante. Vamos restringir a consulta a esse método para ter uma visão mais clara:"

#. type: delimited block -
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:164
#, no-wrap
msgid "match (m:Method) where m.name = \"persist\" and m.type =~ \".*EntityManager\" return *\n"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:166
#, no-wrap
msgid "entitymanager-persist-query.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:169
#, fuzzy
msgid "Note that if we hover over the node we get information about the method itself."
msgstr "Note-se que, se passarmos o rato por cima do nó, obtemos informações sobre o próprio método."

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:177
#, fuzzy
msgid "Going back to the original question, we wanted to find out why a given code path gets included.  One way to do it is to start by the method itself, and then walk backwards to find what links (e.g. direct calls, virtual calls, overrides...etc)  exist to that method within a certain depth.  For example, let's try to find what other methods have a direct link to the `persist` method:"
msgstr "Voltando à pergunta original, queríamos descobrir porque é que um determinado caminho de código é incluído. Uma forma de o fazer é começar pelo próprio método e, depois, andar para trás para descobrir que ligações (por exemplo, chamadas directas, chamadas virtuais, sobreposições... etc) existem a esse método dentro de uma determinada profundidade. Por exemplo, vamos tentar descobrir que outros métodos têm uma ligação direta ao método `persist`:"

#. type: delimited block -
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:181
#, no-wrap
msgid "match (m:Method) <- [*1..1] - (o) where m.name = \"persist\" and m.type =~ \".*EntityManager\" return *\n"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:183
#, no-wrap
msgid "entitymanager-persist-depth-1-query.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:187
#, fuzzy
msgid "Aha, so there's only one path and that's a virtual call (i.e., an interface call) that comes from the `create` method in the `org.acme.hibernate.orm.FruitResource` class, which takes a `org.acme.hibernate.orm.Fruit` parameter and returns a `javax.ws.rs.core.Response`."
msgstr "Aha, então só há um caminho e esse é uma chamada virtual (ou seja, uma chamada de interface) que vem do método `create` na classe `org.acme.hibernate.orm.FruitResource`, que recebe um parâmetro `org.acme.hibernate.orm.Fruit` e devolve um `javax.ws.rs.core.Response`."

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:189
#, fuzzy
msgid "Next, let's expand the query further and try to find all links with a depth of 2 to the `persist` method:"
msgstr "De seguida, vamos expandir a consulta e tentar encontrar todas as ligações com uma profundidade de 2 para o método `persist`:"

#. type: delimited block -
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:193
#, no-wrap
msgid "match (m:Method) <- [*1..2] - (o) where m.name = \"persist\" and m.type =~ \".*EntityManager\" return *\n"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:195
#, no-wrap
msgid "entitymanager-persist-depth-2-query.png"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:197
#, no-wrap
msgid "subclass.png"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:199
#, no-wrap
msgid "reflection-access-holder.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:206
#, fuzzy
msgid "As we peel further back, we start to see some generated classes that invoke the `create` method in `org.acme.hibernate.orm.FruitResource`.  `org.acme.hibernate.orm.FruitResource_ClientProxy` and `org.acme.hibernate.orm.FruitResource_Subclass` both directly call the method.  One more interesting call comes from the `FruitResource_create_d0...` method in `com.oracle.svm.core.reflect.ReflectionAccessorHolder`.  This essentially means that the `create` method has been registered in GraalVM for access via reflection."
msgstr "À medida que recuamos mais, começamos a ver algumas classes geradas que invocam o método `create` em `org.acme.hibernate.orm.FruitResource`. `org.acme.hibernate.orm.FruitResource_ClientProxy` e `org.acme.hibernate.orm.FruitResource_Subclass` chamam diretamente o método. Mais uma chamada interessante vem do método `FruitResource_create_d0…​` em `com.oracle.svm.core.reflect.ReflectionAccessorHolder`. Isto significa essencialmente que o método `create` foi registado no GraalVM para acesso através de reflexão."

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:210
#, fuzzy
msgid "If we query for a depth of 3, we'll find that the reflection access is an entry point.  So, we've found the shortest path to the `persist` method, but that's not necessarily the only path:"
msgstr "Se consultarmos uma profundidade de 3, descobriremos que o acesso à reflexão é um ponto de entrada. Assim, encontrámos o caminho mais curto para o método `persist`, mas esse não é necessariamente o único caminho:"

#. type: Target for macro image
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:211
#, no-wrap
msgid "entitymanager-persist-depth-3-query.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:217
#, fuzzy
msgid "You can continue going up layers, but unfortunately if you reach a depth with too many nodes, the Neo4j browser will be unable to visualize them all.  When that happens, you can alternatively run the queries directly against the cypher shell. E.g."
msgstr "Pode continuar a subir camadas, mas infelizmente se atingir uma profundidade com demasiados nós, o navegador Neo4j não conseguirá visualizá-los a todos. Quando isso acontecer, pode, em alternativa, executar as consultas diretamente na shell do cypher. Por exemplo."

#. type: delimited block -
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:221
#, no-wrap
msgid ""
"$ podman exec testneo4j bin/cypher-shell -u neo4j -p ${NEO_PASS} \\\n"
"    \"match (m:Method) <- [*1..10] - (o) where m.name = 'persist' and m.type =~ '.*EntityManager' return *\"\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:224
#, fuzzy
msgid "After you are done with the exploration don't forget to shut down (`kill`) the `testneo4j` container:"
msgstr "Depois de terminar a exploração, não se esqueça de fechar ( `kill`) o contentor `testneo4j`:"

#. type: delimited block -
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:226
#, no-wrap
msgid "$ podman kill testneo4j\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:228
#, fuzzy
msgid "Note that this will also remove the container (since we used `--rm` when we created it)."
msgstr "Note que isto também removerá o contentor (uma vez que utilizámos `--rm` quando o criámos)."

#. type: Plain text
#: upstream/_posts/2021-11-30-quarkus-native-neo4j-call-tree.adoc:231
#, fuzzy
msgid "We've only just started exploring the possibilities of Neo4j for this use case, and so we still have to learn all the tips and tricks to make the most out of it.  As we learn more we'll share any tips or query templates with the community."
msgstr "Só agora começámos a explorar as possibilidades do Neo4j para este caso de utilização e, por isso, ainda temos de aprender todas as dicas e truques para tirar o máximo partido dele. À medida que aprendermos mais, partilharemos quaisquer dicas ou modelos de consulta com a comunidade."
