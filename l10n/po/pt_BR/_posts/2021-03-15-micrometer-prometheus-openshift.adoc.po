# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:1
#, fuzzy, no-wrap
msgid "jcarvaja"
msgstr "jcarvaja"

#. type: YAML Front Matter: date
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:1
#, fuzzy, no-wrap
msgid "2021-03-15"
msgstr "2021-03-15"

#. type: YAML Front Matter: layout
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "posto"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:1
#, fuzzy, no-wrap
msgid "Expose Quarkus Apps metrics into OpenShift using Micrometer and Prometheus"
msgstr "Expor as métricas do Quarkus Apps no OpenShift usando o Micrometer e o Prometheus"

#. type: YAML Front Matter: tags
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:1
#, fuzzy, no-wrap
msgid "extension"
msgstr "extensão"

#. type: YAML Front Matter: title
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:1
#, fuzzy, no-wrap
msgid "Monitoring Quarkus apps using Micrometer and Prometheus into OpenShift"
msgstr "Monitoramento de aplicativos Quarkus usando o Micrometer e o Prometheus no OpenShift"

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:11
#, fuzzy
msgid "Metrics are the measurements of any aspect of an application such as resource usage or behaviors. We can expose these metrics from our Quarkus applications by using the https://quarkus.io/guides/micrometer[Micrometer] extension via the `/q/metrics` endpoint."
msgstr "As métricas são as medidas de qualquer aspeto de uma aplicação, como a utilização de recursos ou comportamentos. Podemos expor estas métricas a partir das nossas aplicações Quarkus, utilizando a extensão  link:https://quarkus.io/guides/micrometer[Micrometer] através do ponto de extremidade `/q/metrics`."

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:13
#, fuzzy
msgid "What metrics will be exposed? Only by adding the Micrometer extension, a lot of metrics are exposed by default for example metrics about the JVM engine like the number of current live threads `jvm_threads_live_threads` or metrics about the system itself like the current CPU usage `system_cpu_usage`. Additionally, more metrics will automatically be exposed depending on other Quarkus extensions we might be using. For example, if we are using a Quarkus REST extension such as Resteasy, it will automatically expose metrics about your running services:"
msgstr "Que métricas serão expostas? Apenas adicionando a extensão Micrometer, muitas métricas são expostas por defeito, por exemplo, métricas sobre o motor JVM como o número de threads actuais `jvm_threads_live_threads` ou métricas sobre o próprio sistema como a utilização atual da CPU `system_cpu_usage`. Adicionalmente, mais métricas serão automaticamente expostas dependendo de outras extensões Quarkus que possamos estar a utilizar. Por exemplo, se estivermos a utilizar uma extensão REST do Quarkus, como o Resteasy, esta irá expor automaticamente métricas sobre os serviços em execução:"

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:18
#, fuzzy
msgid "``` http_server_requests_seconds_count{method=\"GET\",outcome=\"SUCCESS\",status=\"200\",uri=\"/hello\",} 1.0 http_server_requests_seconds_sum{method=\"GET\",outcome=\"SUCCESS\",status=\"200\",uri=\"/hello\",} 0.018198043 ```"
msgstr "<pre class=\"highlight\"> ``</pre>"

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:20
#, fuzzy
msgid "The same will happen if we're using the Kafka extension. All this configuration is well documented in https://quarkus.io/guides/micrometer[the Quarkus Micrometer guide]."
msgstr "O mesmo acontecerá se estivermos a utilizar a extensão Kafka. Toda esta configuração está bem documentada no  link:https://quarkus.io/guides/micrometer[guia do Quarkus Micrometer]."

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:22
#, fuzzy
msgid "__How are these metrics consumed?__ As said, Micrometer exposes the metrics on the `/q/metrics` endpoint in order to be consumed by third parties like https://prometheus.io/[Prometheus]. OpenShift provides an embedded Prometheus instance that we can use. So, let's see what we need to do to integrate our Quarkus Applications metrics and the Prometheus embedded instance provided in OpenShift."
msgstr "_Como é que estas métricas são consumidas?_ Como já foi dito, o Micrometer expõe as métricas no ponto de extremidade `/q/metrics` para serem consumidas por terceiros, como o  link:https://prometheus.io/[Prometheus]. O OpenShift fornece uma instância incorporada do Prometheus que podemos usar. Portanto, vamos ver o que precisamos fazer para integrar nossas métricas de aplicativos Quarkus e a instância incorporada do Prometheus fornecida no OpenShift."

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:24
#, fuzzy
msgid "Basically, we need to complete the next following steps:"
msgstr "Basicamente, precisamos de completar os passos seguintes:"

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:26
#, fuzzy
msgid "Enable Monitoring for user-defined projects in OpenShift"
msgstr "Ativar a monitorização para projectos definidos pelo utilizador no OpenShift"

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:27
#, fuzzy
msgid "Deploy our Quarkus application"
msgstr "Implementar a nossa aplicação Quarkus"

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:28
#, fuzzy
msgid "Create a Service monitor in our project"
msgstr "Criar um monitor de serviço no nosso projeto"

#. type: Title ==
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:29
#, fuzzy, no-wrap
msgid "Requirements"
msgstr "Requisitos"

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:32
#, fuzzy
msgid "https://docs.openshift.com/container-platform/4.7/cli_reference/openshift_cli/getting-started-cli.html[Openshift CLI]"
msgstr "link:https://docs.openshift.com/container-platform/4.7/cli_reference/openshift_cli/getting-started-cli.html[CLI do Openshift]"

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:33
#, fuzzy
msgid "An Openshift instance"
msgstr "Uma instância do Openshift"

#. type: Title ==
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:34
#, fuzzy, no-wrap
msgid "Step 1 - Enable Monitoring for user-defined projects in OpenShift"
msgstr "Passo 1 - Ativar a monitorização para projectos definidos pelo utilizador no OpenShift"

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:37
#, fuzzy
msgid "In order to enable the Monitoring for user-defined projects, we need to follow the instructions https://docs.openshift.com/container-platform/4.7/monitoring/enabling-monitoring-for-user-defined-projects.html[from OpenShift documentation]."
msgstr "Para ativar a monitorização de projectos definidos pelo utilizador, temos de seguir as instruções  link:https://docs.openshift.com/container-platform/4.7/monitoring/enabling-monitoring-for-user-defined-projects.html[da documentação do OpenShift]."

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:39
#, fuzzy
msgid "In essence, we need to create a ConfigMap in the namespace `openshift-monitoring`."
msgstr "Essencialmente, precisamos de criar um ConfigMap no espaço de nomes `openshift-monitoring`."

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:41
#, fuzzy
msgid "`cluster-monitoring-config.yaml`:"
msgstr "`cluster-monitoring-config.yaml`:"

#. type: delimited block -
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:51
#, no-wrap
msgid ""
"apiVersion: v1\n"
"kind: ConfigMap\n"
"metadata:\n"
"    name: cluster-monitoring-config\n"
"    namespace: openshift-monitoring\n"
"data:\n"
"    config.yaml: |\n"
"    enableUserWorkload: true\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:54
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:198
#, fuzzy
msgid "And apply it:"
msgstr "E aplica-o:"

#. type: delimited block -
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:58
#, no-wrap
msgid "oc apply -f cluster-monitoring-config.yaml\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:61
#, fuzzy
msgid "For 4.5 or previous versions of OpenShift, you need to use instead:"
msgstr "Para 4.5 ou versões anteriores do OpenShift, é necessário usar em vez disso:"

#. type: delimited block -
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:73
#, no-wrap
msgid ""
"apiVersion: v1\n"
"kind: ConfigMap\n"
"metadata:\n"
"    name: cluster-monitoring-config\n"
"    namespace: openshift-monitoring\n"
"data:\n"
"    config.yaml: |\n"
"    techPreviewUserWorkload:\n"
"        enabled: true\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:76
#, fuzzy
msgid "Openshift will automatically create the `openshift-user-workload-monitoring` namespace and deploy the required resources for Prometheus to it."
msgstr "O Openshift criará automaticamente o namespace `openshift-user-workload-monitoring` e implantará os recursos necessários para o Prometheus nele."

#. type: Title ==
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:77
#, fuzzy, no-wrap
msgid "2. Deploy our Quarkus application"
msgstr "<li> <p>Implementar a nossa aplicação Quarkus</p> </li>"

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:80
#, fuzzy
msgid "After the required infrastructure in OpenShift is ready, then let's continue with the Quarkus application. We'll implement a REST API and enable micrometer with prometheus which requires the addition of two Quarkus extensions to our `pom.xml` file:"
msgstr "Depois que a infraestrutura necessária no OpenShift estiver pronta, vamos continuar com o aplicativo Quarkus. Implementaremos uma API REST e habilitaremos o micrometer com o prometheus, o que exige a adição de duas extensões do Quarkus ao nosso arquivo `pom.xml`:"

#. type: delimited block -
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:91
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-micrometer-registry-prometheus</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:94
#, fuzzy
msgid "And we'll add the Greeting resource:"
msgstr "E vamos acrescentar o recurso Saudação:"

#. type: delimited block -
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:101
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.PathParam;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:104
#, no-wrap
msgid ""
"import io.micrometer.core.instrument.MeterRegistry;\n"
"import io.micrometer.core.instrument.Tags;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:107
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"public class GreetingsResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:110
#, no-wrap
msgid ""
"    @Inject\n"
"    MeterRegistry registry;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:115
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/{name}\")\n"
"    public String sayHello(@PathParam(value = \"name\") String name) {\n"
"        registry.counter(\"greeting_counter\", Tags.of(\"name\", name)).increment();\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:119
#, no-wrap
msgid ""
"        return \"Hello!\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:122
#, fuzzy
msgid "As we can see, we use the micrometer registry facade to create a counter with a tag by name that will be incremented every time it's invoked."
msgstr "Como podemos ver, utilizamos a fachada de registo do micrómetro para criar um contador com uma etiqueta por nome que será incrementada sempre que for invocada."

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:124
#, fuzzy
msgid "Let's try this application by running it:"
msgstr "Vamos experimentar esta aplicação executando-a:"

#. type: delimited block -
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:128
#, no-wrap
msgid "mvn compile quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:131
#, fuzzy
msgid "Now, we should be able to call our service:"
msgstr "Agora, devemos poder ligar para o nosso serviço:"

#. type: delimited block -
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:135
#, no-wrap
msgid "curl http://localhost:8080/hello/quarkus\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:138
#, fuzzy
msgid "And it should return `Hello!`. So good so far, we can also see the metrics in `http://localhost:8080/q/metrics` where should see our `greeting_counter` counter:"
msgstr "E deve devolver `Hello!`. Até aqui tudo bem, também podemos ver as métricas em `&lt;a href=\"http://localhost:8080/q/metrics\" class=\"bare\"&gt;http://localhost:8080/q/metrics&lt;/a&gt;` onde devemos ver nosso contador `greeting_counter`:"

#. type: delimited block -
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:144
#, no-wrap
msgid ""
"# HELP greeting_counter_total  \n"
"# TYPE greeting_counter_total counter\n"
"greeting_counter_total{name=\"quarkus\",} 1.0\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:147
#, fuzzy
msgid "Next, we need to deploy our Quarkus application into OpenShift. For ease this step, Quarkus provides a super useful extension called `quarkus-openshift`, let's add it into our `pom.xml` file:"
msgstr "Em seguida, precisamos implantar nosso aplicativo Quarkus no OpenShift. Para facilitar este passo, o Quarkus fornece uma extensão super útil chamada `quarkus-openshift`, vamos adicioná-la ao nosso ficheiro `pom.xml`:"

#. type: delimited block -
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:154
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-openshift</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:157
#, fuzzy
msgid "So, let's deploy our application into a newly created project `my-project` in OpenShift:"
msgstr "Então, vamos implantar nosso aplicativo em um projeto recém-criado `my-project` no OpenShift:"

#. type: delimited block -
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:162
#, no-wrap
msgid ""
"oc new-project my-project\n"
"mvn clean package -Dquarkus.kubernetes.deploy=true -Dquarkus.openshift.expose=true -Dquarkus.openshift.labels.app-with-metrics=quarkus-app\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:165
#, fuzzy
msgid "The label `app-with-metrics` will be used in a later step to select the applications to monitor by OpenShift."
msgstr "O rótulo `app-with-metrics` será usado em uma etapa posterior para selecionar os aplicativos a serem monitorados pelo OpenShift."

#. type: Title ==
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:166
#, fuzzy, no-wrap
msgid "3. Create a Service monitor in our project"
msgstr "<li> <p>Criar um monitor de serviço no nosso projeto</p> </li>"

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:169
#, fuzzy
msgid "Before moving forward, let's explain first how Prometheus works. Prometheus uses a pull model to get metrics from applications. This means that Prometheus will scrape or watch endpoints to pull metrics from."
msgstr "Antes de prosseguir, vamos explicar primeiro como o Prometheus funciona. O Prometheus usa um modelo pull para obter métricas de aplicativos. Isso significa que o Prometheus irá raspar ou observar pontos de extremidade para extrair métricas."

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:171
#, fuzzy
msgid "From the previous step, our service is now running in OpenShift, but we didn't configure anything in Prometheus to scrape our service yet. This is done by the Service Monitor resource:"
msgstr "A partir da etapa anterior, nosso serviço agora está em execução no OpenShift, mas ainda não configuramos nada no Prometheus para fazer o scrape do nosso serviço. Isso é feito pelo recurso Service Monitor:"

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:173
#, fuzzy
msgid "`service-monitor.yaml`:"
msgstr "`service-monitor.yaml`:"

#. type: delimited block -
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:191
#, no-wrap
msgid ""
"apiVersion: monitoring.coreos.com/v1\n"
"kind: ServiceMonitor\n"
"metadata:\n"
"  labels:\n"
"    k8s-app: prometheus-app-monitor\n"
"  name: prometheus-app-monitor\n"
"  namespace: my-project\n"
"spec:\n"
"  endpoints:\n"
"  - interval: 30s\n"
"    targetPort: 8080\n"
"    path: /q/metrics\n"
"    scheme: http\n"
"  selector:\n"
"    matchLabels:\n"
"      app-with-metrics: 'quarkus-app'\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:194
#, fuzzy
msgid "The path `/q/metrics` is the default metrics endpoint in Quarkus."
msgstr "O caminho `/q/metrics` é o ponto final de métricas predefinido no Quarkus."

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:196
#, fuzzy
msgid "We could configure the `/metrics` endpoint Prometheus expects in `application.properties` instead of adding the path attribute above using the following property: `quarkus.micrometer.export.prometheus.path=/metrics`."
msgstr "Poderíamos configurar o endpoint `/metrics` que o Prometheus espera em `application.properties` em vez de adicionar o atributo path acima usando a seguinte propriedade: `quarkus.micrometer.export.prometheus.path=/metrics`."

#. type: delimited block -
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:202
#, no-wrap
msgid "oc apply -f service-monitor.yaml\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:205
#, fuzzy
msgid "What we have just done is to create a Service Monitor named `prometheus-app-monitor` that will select apps with the label `app-with-metrics: quarkus-app` that was added in the previous step. Then, OpenShift will call the endpoint `/q/metrics` for all the services labeled with `app-with-metrics: quarkus-app` every 30 seconds."
msgstr "O que acabamos de fazer foi criar um Monitor de Serviço chamado `prometheus-app-monitor` que selecionará aplicativos com o rótulo `app-with-metrics: quarkus-app` que foi adicionado na etapa anterior. Em seguida, o OpenShift chamará o ponto de extremidade `/q/metrics` para todos os serviços rotulados com `app-with-metrics: quarkus-app` a cada 30 segundos."

#. type: Title ==
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:206
#, fuzzy, no-wrap
msgid "Finally, let's start using it!"
msgstr "Finalmente, vamos começar a utilizá-lo!"

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:209
#, fuzzy
msgid "First, we need to call our greetings service: `http://quarkus-micrometer-my-project.ocp.host/hello/quarkus`. This will increment the `greeting_counter_total` counter. But where can we see the metrics? Let's browse to OpenShift Console in the `Developer > Monitoring` view, select `Metrics`, then `Custom Query` and type `greeting_counter_total{name = \"quarkus\"}`, we should see now:"
msgstr "Primeiro, temos de chamar o nosso serviço de saudações: `&lt;a href=\"http://quarkus-micrometer-my-project.ocp.host/hello/quarkus\" class=\"bare\"&gt;http://quarkus-micrometer-my-project.ocp.host/hello/quarkus&lt;/a&gt;`. Isto irá incrementar o contador `greeting_counter_total`. Mas onde podemos ver as métricas? Vamos navegar para o OpenShift Console na visualização `Developer &amp;gt; Monitoring`, selecionar `Metrics`, depois `Custom Query` e digitar `greeting_counter_total{name = \"quarkus\"}`, devemos ver agora:"

#. type: Target for macro image
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:210
#, no-wrap
msgid "/assets/images/posts/micrometer-openshift/micrometer-quarkus-io.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2021-03-15-micrometer-prometheus-openshift.adoc:212
#, fuzzy
msgid "Great! We are now exposing our Quarkus Application metrics in OpenShift!"
msgstr "Muito bom! Agora estamos a expor as métricas da nossa aplicação Quarkus no OpenShift!"
