# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:1
#, no-wrap
msgid "cescoffier"
msgstr ""

#. type: YAML Front Matter: date
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:1
#, no-wrap
msgid "2022-09-07"
msgstr ""

#. type: YAML Front Matter: layout
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:1
#, no-wrap
msgid "post"
msgstr ""

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:1
#, no-wrap
msgid "How to implement a simple cache with the Redis data source"
msgstr ""

#. type: YAML Front Matter: tags
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:1
#, no-wrap
msgid "redis"
msgstr ""

#. type: YAML Front Matter: title
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:1
#, no-wrap
msgid "Introducing the new Redis API - How to cache with Redis?"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:13
msgid "In Quarkus 2.11, we introduced a new API to interact with Redis.  The Redis DataSource APIs aim to be simpler, more extensive, and type-safe.  Under the hood, it uses a performant, non-blocking client (that you can also use if you prefer low-level APIs)."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:15
msgid "In this post, we will introduce this new API and use it to build a cache, one of the main Redis use cases."
msgstr ""

#. type: Title ==
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:16
#, no-wrap
msgid "What is Redis?"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:23
msgid "https://redis.io/[Redis] is an open-source, in-memory data store that can be used as a database, cache, streaming engine, and message broker.  Redis is often used as real-time data stores, cache backends, data storage for geospatial entities, and so on.  To interact with Redis, you emit _commands_ and receive responses.  These commands target _keys_ and manipulate the associated data.  There are many commands divided into groups, including:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:25
msgid "the BitMap group to manipulate bit vectors"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:26
msgid "the Generic group to manipulate the keys"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:27
msgid "the Geospatial group to manipulate geo items"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:28
msgid "the Hash group to manipulate sets of `+field -> item+` pairs (like `Map` in Java)"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:29
msgid "the List, Set, and Sorted Set groups to store list, set, and sorted set of items"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:30
msgid "the Pub/Sub group to emit messages on channels and receive them"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:31
msgid "the String group to manipulate value (in Redis, Strings represent values including binary, numbers...)"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:32
msgid "the Transaction group to execute transactions"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:34
msgid "You can find the complete list of commands on the https://redis.io/commands/[Redis Commands page]."
msgstr ""

#. type: Title ==
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:35
#, no-wrap
msgid "The new Quarkus Redis API"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:38
msgid "The entry point of the new Quarkus Redis API are the two _data sources_ interfaces:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:40
msgid "`io.quarkus.redis.datasource.RedisDataSource` - the imperative (blocking) API"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:41
msgid "`io.quarkus.redis.datasource.ReactiveRedisDataSource` - the reactive API"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:43
msgid "As mentioned above, these APIs are implemented on top of a lower-level client:"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:44
#, no-wrap
msgid "/assets/images/posts/redis-intro/redis-clients.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:50
msgid "The data source APIs follow the command group structure.  For each group, you retrieve an object dedicated to emitting the commands of that group.  In that regard, this new API is not an abstraction of Redis.  You still need to know the command you need."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:52
msgid "For example, to manipulate a `Set<Person>`, you will use the following code:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:56
#, no-wrap
msgid "record Person(String firstName, String lastName) {}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:59
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class PersonService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:61
#, no-wrap
msgid "    private final SetCommands<String, Person> commands;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:66
#, no-wrap
msgid ""
"    public PersonService(RedisDataSource ds) {\n"
"\t    // Retrieve the `set` group\n"
"        commands = ds.set(Person.class);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:72
#, no-wrap
msgid ""
"    public void add(Person person) {\n"
"\t    // Emit the `sadd` command\n"
"        commands.sadd(\"key\", person);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:76
msgid "The API manages the serialization and deserialization for you.  Currently, it uses JSON for objects (using Jackson), but soon the API will offer more advanced features."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:78
msgid "This example uses the imperative API, but the reactive API is symmetric."
msgstr ""

#. type: Title ==
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:79
#, no-wrap
msgid "Implementing a Redis cache"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:83
msgid "Time for more cohesive code.  Let's imagine the following https://github.com/cescoffier/quarkus-redis-demo[application]:"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:84
#, no-wrap
msgid "/assets/images/posts/redis-intro/application.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:89
msgid "We have a database storing `Heroes`, a lot of them.  You need to return the 3 most powerful heroes based on their level.  Of course, you can use your SQL ninja skills, but let's imagine that this code was coded a long time ago, cannot be changed, and is very time-consuming:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:102
#, no-wrap
msgid ""
"// Dumb approach, don't do this\n"
"return new Ranking(Hero.<Hero>listAll()\n"
"\t.stream()\n"
"\t.sorted((o1, o2) -> Integer.compare(o2.level, o1.level))\n"
"\t.peek(h -> {\n"
"\t\t// do something very long...\n"
"\t\tnap();\n"
"\t})\n"
"\t.limit(3)\n"
"\t.collect(Collectors.toList()));\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:106
msgid "So, one solution to avoid having to re-compute this set of heroes on every call is to cache the result for a bit of time, let's say 10 seconds.  Let's consider that it's acceptable in this case to return a potentially outdated result set."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:109
msgid "To use the new Redis API, we need to use the `redis-client` extension.  For users from the previous API, it's the same extension. The previous API is still available but is deprecated, and we plan to remove it at some point."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:111
msgid "Now that we can use the `RedisDataSource`, we can implement the https://github.com/cescoffier/quarkus-redis-demo/blob/735f8cdbe579ef5c13631e8ec6e3ddad6821a3cb/src/main/java/me/escoffier/quarkus/supes/MyRedisCache.java[`MyRedisCache` class] as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:115
#, no-wrap
msgid "package me.escoffier.quarkus.supes;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:119
#, no-wrap
msgid ""
"import io.quarkus.redis.datasource.RedisDataSource;\n"
"import io.quarkus.redis.datasource.string.SetArgs;\n"
"import io.quarkus.redis.datasource.string.StringCommands;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:123
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import java.time.Duration;\n"
"import java.util.function.Supplier;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:126
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyRedisCache {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:128
#, no-wrap
msgid "    private final StringCommands<String, Ranking> commands;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:132
#, no-wrap
msgid ""
"    public MyRedisCache(RedisDataSource ds) {\n"
"        this.commands = ds.string(Ranking.class);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:136
#, no-wrap
msgid ""
"    public Ranking get(String key) {\n"
"        return commands.get(key);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:140
#, no-wrap
msgid ""
"    public void set(String key, Ranking result) {\n"
"        commands.set(key, result, new SetArgs().ex(Duration.ofSeconds(10)));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:144
#, no-wrap
msgid ""
"    public void evict(String key) {\n"
"        commands.getdel(key);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:157
#, no-wrap
msgid ""
"    public Ranking getOrSetIfAbsent(String key,\n"
"           Supplier<Ranking> computation) {\n"
"        var cached = get(key);\n"
"        if (cached != null) {\n"
"            return cached;\n"
"        } else {\n"
"            var result = computation.get();\n"
"            set(key, result);\n"
"            return result;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:161
msgid "Note that it's a simple cache without any fancy features.  Redis provides more advanced commands to implement more complicated strategies."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:164
msgid "The constructor receives the `RedisDataSource` and gets an object to manipulate Redis _values_.  In our case, https://github.com/cescoffier/quarkus-redis-demo/blob/735f8cdbe579ef5c13631e8ec6e3ddad6821a3cb/src/main/java/me/escoffier/quarkus/supes/Ranking.java[`Ranking`] (the top 3 heroes)"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:166
msgid "The `get` method emits the Redis `get` command to retrieve an already stored ``Ranking(``null` if it does not)."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:171
msgid "The `set` method emits the Redis `set` command and store a `Ranking` to the passed key.  The command also configures the expiration time.  So, after 10 seconds, the value is removed by Redis.  As mentioned above, the Ranking instance is serialized into a JSON document."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:174
msgid "The `evict` method allows removing the stored value.  Multiple commands can do this, such as the `del` or `getdel` (which also returned the stored value)."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:179
msgid "For our application, we need something a bit more fancy.  We want to check if we have a value in Redis.  If so, uses that value, and if not, compute the value and store it.  This is implemented in the `getOrSetIfAbsent`."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:181
msgid "Now, we can just use this cache to avoid the heavy computation on every call (check the https://github.com/cescoffier/quarkus-redis-demo/blob/735f8cdbe579ef5c13631e8ec6e3ddad6821a3cb/src/main/java/me/escoffier/quarkus/supes/HeroService.java[HeroService] class to see the complete code):"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:186
#, no-wrap
msgid ""
"@Inject\n"
"MyRedisCache cache;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:201
#, no-wrap
msgid ""
"public Ranking getTopHeroes() {\n"
"    return cache.getOrSetIfAbsent(\"top\", () -> {\n"
"                // Dumb approach, don't do this\n"
"                return new Ranking(Hero.<Hero>listAll()\n"
"                        .stream()\n"
"                        .sorted((o1, o2) -> Integer.compare(o2.level, o1.level))\n"
"                        .peek(h -> {\n"
"                            // do something very long...\n"
"                            nap();\n"
"                        })\n"
"                        .limit(3)\n"
"                        .collect(Collectors.toList()));\n"
"            });\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:204
msgid "To run the application, just start `mvn quarkus:dev` and open your browser to http://localhost:8080:"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:205
#, no-wrap
msgid "/assets/images/posts/redis-intro/screenshot.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:210
msgid "To see the cache in action, check the time displayed on the page and refresh the page.  Don't forget that the cached value is only valid for 10 seconds (as set in `MyRedisCache`).  So, if you wait 10 seconds, it will recompute the result."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:212
msgid "Quarkus comes with a Redis Dev Service that automatically starts a Redis instance on your machine and configures the application. Note that you need to be able to run containers locally to use this feature."
msgstr ""

#. type: Title ==
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:213
#, no-wrap
msgid "Conclusion"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:217
msgid "This post briefly introduces the new Redis API and demonstrates its usage with a cache implementation example.  The complete code is available from this https://github.com/cescoffier/quarkus-redis-demo[GitHub repo]."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:220
msgid "The API supports many more features, such as geospatial data, pub/sub, and transactions, which could be used to improve the `getOrSetIfAbsent` method.  We will cover more advanced use cases in future posts."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:222
msgid "You can find more details about the new API in the:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:224
msgid "https://quarkus.io/guides/redis[Quarkus Getting Started guide]"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:225
msgid "https://quarkus.io/guides/redis-reference[Quarkus Redis Reference guide]"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-09-07-redis-api-intro.adoc:226
msgid "Also, the Quarkus team is working on integrating https://github.com/quarkusio/quarkus/issues/27785[Redis as a cache implementation]. So, eventually, you will just need to use `@CacheResult`, and let the magic happens."
msgstr ""
