# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title ==
#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy, no-wrap
msgid "Creating a Quarkus extension for AWS CloudWatch"
msgstr "Criar uma extensão Quarkus para o AWS CloudWatch"

#. type: Plain text
#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy
msgid "We recently had the situation that we wanted to log our Quarkus application logs to AWS CloudWatch. Basically it takes some time but is not a big deal. Adding a CloudWatch dependency, creating a Log Handler and push the logs to CloudWatch via the provided AWS CloudWatch API. But what if you want to share it with others? Of course you could put it on GitHub as part of your project so others can copy and paste it, but that’s not the most elegant way to share code with others."
msgstr "Recentemente, tivemos uma situação em que queríamos registar os registos da nossa aplicação Quarkus no AWS CloudWatch. Basicamente, isso leva algum tempo, mas não é um grande problema. Adicionar uma dependência do CloudWatch, criar um Log Handler e enviar os registos para o CloudWatch através da API do AWS CloudWatch. Mas e se quiser partilhá-lo com outras pessoas? É claro que você pode colocá-lo no GitHub como parte do seu projeto para que outras pessoas possam copiá-lo e colá-lo, mas essa não é a maneira mais elegante de compartilhar código com outras pessoas."

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid ""
"That’s why we implemented a Quarkus extension so others can use it more easily and don’t need to reinvent the wheel or need to copy paste things around.\n"
"How do I do that? Here the Quarkiverse Hub comes in. Quarkiverse is a GitHub organization where developers can host and share their extension with others. There are several benefits you get for free when hosting the extension in Quarkiverse instead of using the good old way of doing all the things on your own. By using Quarkiverse you don’t need to build the artifact, release it with the Sonatype Nexus Manager (or something similar) and distribute it on Maven Central and other repositories.\n"
"Quarkiverse comes with all these things so you can focus on implementing the extension itself. The following post describes what needs to be done to initialize, implement and share a CloudWatch Quarkus extension."
msgstr ""

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid ""
"If you want to use Quarkiverse to publish your extension on the Hub (which is what we recommend) and make use of all the advantages you get by using it, you simply need to open a new extension proposal issue in the quarkusio/quarkus GitHub organization. By doing this, most of the requirements are fulfilled already as there will be a template generated for you and you just have to implement your extension code. In case you are using an existing project as template, there are some requirements you need to take care of.\n"
"In order to automate extension releases and publication of docs, there are some rules that need to be followed for projects under the Quarkiverse organization:"
msgstr ""

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid "The extension repository should be named quarkus-<project>"
msgstr ""

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid "A Quarkiverse extension *MUST* belong to the io.quarkiverse.<project> groupId"
msgstr ""

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid "The root pom.xml *MUST* inherit from io.quarkiverse:quarkiverse-parent"
msgstr ""

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid "A Quarkiverse extension contains the following folders and files:"
msgstr ""

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid "deployment"
msgstr ""

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid "runtime"
msgstr ""

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid "integration-test"
msgstr ""

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid "docs"
msgstr ""

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid "pom.xml"
msgstr ""

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid "LICENSE"
msgstr ""

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid "README"
msgstr ""

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid ""
"This article covers the runtime and deployment content only as the other things are optional, generated by the project template already or even important, but not the most important and pragmatic thing when you want to learn how a Quarkus extension can be created.\n"
"Let’s start with the deployment section. It contains classes needed for the initialization of the Quarkus extension. Without this initialization class, your extension won’t be identified when starting your Quarkus application."
msgstr ""

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid ""
"In the snippet above you can see a _feature()_ method which is annotated with _@BuildStep_ and returns a new FeatureBuildItem. It exposes the name of the feature (logging-cloudwatch) displayed in the log during application bootstrap.\n"
"The second method _addCloudWatchHandler()_ initializes the extensions runtime configurations provided by the LoggingCloudWatchConfig and LoggingCloudWatchHandlerValueFactory class. Luckily there is a LogHandlerBuildItem provided, so we can overwrite the existing log handler by adding our own implementation. There are lots of other BuildItems provided so it’s definitely worth it, taking a look at it if you want to create your own extension. The parameter of this method is a config class which will be described in the following snippet."
msgstr ""

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid ""
"The _LoggingCloudWatchConfig_ is building the bridge between the extension itself and the Quarkus application which uses the extension. It’s combining the _application.properties entries_ in the Quarkus application with our extension. That means with this class you can define the properties available in the _application.properties_ file and make the extension configurable from the outside.\n"
"The _@ConfigRoot_ defines the prefix of the property in the _application.properties_ and the _@ConfigItems_ is the postfix. One application.properties entry we are accepting with this class is log.cloudwatch.enabled for example."
msgstr ""

#. type: Plain text
#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy
msgid "Besides the _LoggingCloudWatchConfig_ there is another parameter of the _addCloudwatchLogHandler()_ method. It’s the corresponding factory class."
msgstr "Para além do _LoggingCloudWatchConfig_, existe outro parâmetro do método _addCloudwatchLogHandler()_. É a classe de fábrica correspondente."

#. type: Plain text
#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy
msgid "The LoggingCloudWatchHandlerValueFactory is the glue between the actually business logic of the extension: dealing with application logs and putting these logs to AWS and the configurations of the _application.properties_ file mentioned before. As you can see in the _create()_ method, configuration entries are checked and used for initializing the CloudWatch connection."
msgstr "O LoggingCloudWatchHandlerValueFactory é a cola entre a lógica de negócios real da extensão: lidar com os logs do aplicativo e colocar esses logs no AWS e as configurações do arquivo _application.properties_ mencionado anteriormente. Como pode ser visto no método _create()_, as entradas de configuração são verificadas e usadas para inicializar a conexão com o CloudWatch."

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid ""
"Now that we have made the extension configurable for the extension users by adding _application.properties_ entries, exposing the extension name and providing the configurations to the handler class which creates the AWS CloudWatch objects needed to put log messages in AWS CloudWatch, we only need to add one missing piece.\n"
"The Log Handler itself. In the snippet above, in the _LoggingCloudWatchHandlerValueFactory_ we created it already and returned it as a RuntimeValue which we are using in the _LoggingCloudwatchProcessor_ class. That’s the call chain needed to overwrite the existing default log handler."
msgstr ""

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid ""
"This log handler is a java.util.LogHandler which takes the LogRecord object as a parameter of the publish method which will be called when writing a log in an application. For example like log.info(“I Love Open Source!”);. If configured correctly, this log handler will be called when writing logs. As we want to put the log messages in AWS CloudWatch, we need to add the logic for doing it.\n"
"Therefore we create an InputLogEvent and call _putLogEvents()_ which puts the log message to CloudWatch. That’s basically it."
msgstr ""

#. type: delimited block =
#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy
msgid "The snippets in this article are a bit shortened, but basically that’s what the extension contains."
msgstr "Os excertos deste artigo estão um pouco reduzidos, mas basicamente é isso que a extensão contém."

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid ""
"Let’s sum it up:\n"
"There is a processor class which initializes the extension, a configuration class which is needed to make the extension configurable, a value factory class which takes these configurations and creates a AWS CloudWatch connection  as well as a custom _LogHandler_ class which pushes each log message to CloudWatch."
msgstr ""

#. type: Plain text
#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy
msgid "After doing all these things, the only thing missing is releasing a version of the extension. This can be done by opening a Pull Request which updates the current-version and _next-version_ entry of the _project.yml_ file in the _.github_ folder. After merging this Pull Request, some GitHub Actions will be triggered which will bring your new version to Maven Central and finally others can use your extension as well :-)"
msgstr "Depois de fazer todas essas coisas, a única coisa que falta é lançar uma versão da extensão. Isso pode ser feito abrindo um Pull Request que atualiza a entrada current-version e _next-version_ do arquivo _project.yml_ na pasta _.github_. Depois de mesclar esse Pull Request, algumas Ações do GitHub serão acionadas, o que trará sua nova versão para o Maven Central e, finalmente, outros poderão usar sua extensão também :-)"

#. type: Title ==
#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy, no-wrap
msgid "Summary"
msgstr "Resumo"

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid ""
"As you can see, creating, implementing and sharing Quarkus extensions with others is actually very easy. So if you have\n"
"an idea of an extension which could be useful for the community, feel free to pitch your idea by creating a new extension proposal issue on the quarkusio/quarkus GitHub Issues section :-)"
msgstr ""

#. type: Plain text
#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy
msgid "In case you have questions, suggestions or something else, please feel free to contact me on https://twitter.com/bennetelli[Twitter]."
msgstr "Se tiver dúvidas, sugestões ou qualquer outra coisa, não hesite em contactar-me através do  link:https://twitter.com/bennetelli[Twitter]."

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid ""
"Best regards,\n"
"Bennet"
msgstr ""

#. type: Title ==
#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy, no-wrap
msgid "Links"
msgstr "Ligações"

#. type: Plain text
#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy
msgid "https://quarkus.io/blog/quarkiverse/"
msgstr "https://quarkus.io/blog/quarkiverse/"

#. type: Plain text
#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy
msgid "https://github.com/quarkiverse"
msgstr "https://github.com/quarkiverse"

#. type: Plain text
#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy
msgid "https://github.com/quarkiverse/quarkus-logging-cloudwatch"
msgstr "https://github.com/quarkiverse/quarkus-logging-cloudwatch"

#. type: Plain text
#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy
msgid "https://quarkus.io/guides/writing-extensions#create-new-extension-modules-using-maven"
msgstr "https://quarkus.io/guides/writing-extensions#create-new-extension-modules-using-maven"
