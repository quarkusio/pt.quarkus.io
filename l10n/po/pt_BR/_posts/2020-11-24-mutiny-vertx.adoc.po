# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:1
#, fuzzy, no-wrap
msgid "cescoffier"
msgstr "cescoffier"

#. type: YAML Front Matter: date
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:1
#, fuzzy, no-wrap
msgid "2020-11-24"
msgstr "2020-11-24"

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "posto"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:1
#, fuzzy, no-wrap
msgid "Discover the Mutiny variant of the Vert.x API"
msgstr "Descubra a variante Mutiny da API Vert.x"

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:1
#, fuzzy, no-wrap
msgid "reactive mutiny vert.x"
msgstr "mutiny reativo vert.x"

#. type: YAML Front Matter: title
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:1
#, fuzzy, no-wrap
msgid "Mutiny and the Reactiverse"
msgstr "Motim e o Reactiverse"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:16
#, fuzzy
msgid "I had the question multiple times: how do I use Eclipse Vert.x in Quarkus? Indeed, you can use Vert.x in Quarkus.  You can deploy _verticles_, communicate with the event bus, or use anything from the Vert.x ecosystem.  But, you can also use the Mutiny variant of Vert.x in Quarkus, and get a seamless experience with the other reactive APIs offered by Quarkus.  Several posts have already mentioned this, but it deserves a specific blog post.  So, here we are."
msgstr "Já me perguntaram várias vezes: como é que posso usar o Eclipse Vert.x no Quarkus? De facto, é possível utilizar o Vert.x no Quarkus. É possível implementar _verticais_, comunicar com o bus de eventos ou usar qualquer coisa do ecossistema Vert.x. Mas também pode usar a variante Mutiny do Vert.x no Quarkus, e obter uma experiência perfeita com as outras APIs reactivas oferecidas pelo Quarkus. Vários posts já mencionaram isso, mas merece um post específico no blog. Então, aqui estamos."

#. type: Title ==
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:17
#, fuzzy, no-wrap
msgid "Eclipse Vert.x"
msgstr "Eclipse Vert.x"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:24
#, fuzzy
msgid "https://vertx.io[Vert.x] is a toolkit to build reactive applications.  The Vert.x ecosystem is enormous.  From HTTP and data access abilities to messaging clients via microservice and security facilities, the Vert.x ecosystem is remarkably diverse and versatile.  To understand that variety, just check the https://vertx.io/docs/[Vert.x documentation].  That makes Vert.x popular in many areas such as web applications, IoT gateways, banking applications and so on."
msgstr "link:https://vertx.io[O Vert.x] é um conjunto de ferramentas para criar aplicações reactivas. O ecossistema Vert.x é enorme. Desde HTTP e capacidades de acesso a dados a clientes de mensagens através de microsserviços e facilidades de segurança, o ecossistema Vert.x é notavelmente diversificado e versátil. Para entender essa variedade, basta consultar a  link:https://vertx.io/docs/[documentação do Vert.x]. Isso torna a Vert.x popular em muitas áreas, como aplicações Web, gateways IoT, aplicações bancárias e assim por diante."

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:27
#, fuzzy
msgid "As you may know, Quarkus is based on Vert.x.  Under the hood, there is a managed Vert.x instance that powers the rest of Quarkus."
msgstr "Como já deve saber, o Quarkus baseia-se na Vert.x. Nos bastidores, existe uma instância gerida da Vert.x que alimenta o resto do Quarkus."

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:29
#, fuzzy
msgid "image:/assets/images/posts/mutiny-vertx/architecture.png[width=50%]"
msgstr "image:/assets/images/posts/mutiny-vertx/architecture.png[alt=architecture]"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:32
#, fuzzy
msgid "When Quarkus serves a HTTP endpoint, under the hood, there is a Vert.x HTTP server handling the request and response.  That's also true for messaging, gRPC and almost any I/O."
msgstr "Quando o Quarkus serve um ponto de extremidade HTTP, existe um servidor HTTP Vert.x a tratar do pedido e da resposta. O mesmo se aplica ao envio de mensagens, ao gRPC e a quase todas as E/S."

#. type: Title ==
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:33
#, fuzzy, no-wrap
msgid "The Vert.x \"bare\" API and friends"
msgstr "A API \"simples\" do Vert.x e amigos"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:37
#, fuzzy
msgid "Vert.x provides multiple APIs.  Let's focus on the \"bare\" one for now."
msgstr "O Vert.x fornece várias APIs. Para já, vamos concentrar-nos na \"simples\"."

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:40
#, fuzzy
msgid "Following the reactive nature of Vert.x, the API contains mostly asynchronous methods.  These methods are following a syntax convention:"
msgstr "Seguindo a natureza reactiva do Vert.x, a API contém sobretudo métodos assíncronos. Estes métodos estão a seguir uma convenção de sintaxe:"

#. type: delimited block -
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:46
#, no-wrap
msgid ""
"public void doSomething(param1, param2, Handler<AsyncResult<T>> handler) {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:52
#, fuzzy
msgid "The interesting part is the last parameter.  It's a function, a callback to be more precise, that gets called when the operation completes or fails.  Indeed, the asynchronous nature of Vert.x does not allow using `try/catch` blocks.  So you need to pass a continuation callback, invoked with the outcome."
msgstr "A parte interessante é o último parâmetro. É uma função, um retorno de chamada para ser mais preciso, que é chamado quando a operação é concluída ou falha. De facto, a natureza assíncrona do Vert.x não permite a utilização de blocos `try/catch`. Assim, é necessário passar um retorno de chamada de continuação, invocado com o resultado."

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:55
#, fuzzy
msgid "`AsyncResult` is a structure capturing this outcome.  It contains the result (of type `<T>`) produced by the operation, or the failure if it failed."
msgstr "`AsyncResult` é uma estrutura que capta este resultado. Contém o resultado (do tipo `&amp;lt;T&amp;gt;`) produzido pela operação, ou a falha, se esta falhou."

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:57
#, fuzzy
msgid "Let's take an example:"
msgstr "Vejamos um exemplo:"

#. type: delimited block -
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:68
#, no-wrap
msgid ""
"vertx.fileSystem()\n"
"    .readFile(\"my-file.txt\", ar -> {\n"
"        if (ar.failed()) {\n"
"            System.out.println(\"D'oh! Cannot read the file: \" + ar.cause());\n"
"        } else {\n"
"            System.out.println(\"File content is: \" + ar.result());\n"
"        }\n"
"    });\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:74
#, fuzzy
msgid "This code reads a file, and as it's an asynchronous operation, invokes the callback when the file is read.  The `readFile` method reads the complete content of the file and accumulates it in a _buffer_.  The callback receives the asynchronous result containing either the file's content (`ar.result()`) or a failure.  Vert.x invokes this callback when the operation has either completed or failed."
msgstr "Este código lê um ficheiro e, como se trata de uma operação assíncrona, invoca a chamada de retorno quando o ficheiro é lido. O método `readFile` lê o conteúdo completo do ficheiro e acumula-o numa memória _intermédia_. A chamada de retorno recebe o resultado assíncrono que contém o conteúdo do ficheiro ( `ar.result()`) ou uma falha. O Vert.x invoca este retorno de chamada quando a operação foi concluída ou falhou."

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:81
#, fuzzy
msgid "Vert.x also supports streams thanks to the `ReadStream` and `WriteStream` classes.  A `ReadStream` represents a stream of data you can read.  So you can attach a callback invoked on every item traversing the stream.  A `WriteStream` is a data source.  You can push items to a `WriteStream.` These items will be consumed by a `ReadStream`:"
msgstr "O Vert.x também suporta fluxos graças às classes `ReadStream` e `WriteStream`. Uma `ReadStream` representa um fluxo de dados que pode ser lido. Assim, pode anexar uma chamada de retorno invocada em cada item que atravessa o fluxo. Um `WriteStream` é uma fonte de dados. Pode enviar itens para um `WriteStream.`. Estes itens serão consumidos por um `ReadStream`:"

#. type: delimited block -
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:103
#, no-wrap
msgid ""
"vertx.fileSystem()\n"
"    .open(\"my-file.txt\", new OpenOptions().setRead(true), ar -> {\n"
"        if (ar.failed()) {\n"
"            System.out.println(\n"
"                    \"D'oh! Cannot read the file: \" + ar.cause()\n"
"            );\n"
"        } else {\n"
"            AsyncFile file = ar.result();\n"
"            // AsyncFile is a read stream, we can read from it:\n"
"            file\n"
"                    .exceptionHandler(t ->\n"
"                        System.out.println(\"Failure while reading the file: \" + t)\n"
"                    )\n"
"                    // Reads the file chunk by chunk\n"
"                    .handler(buffer ->\n"
"                        System.out.println(\"Received buffer: \" + buffer)\n"
"                    );\n"
"        }\n"
"    });\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:107
#, fuzzy
msgid "Vert.x streams do not implement Reactive Streams.  Vert.x provides a different back-pressure protocol."
msgstr "Os fluxos da Vert.x não implementam fluxos reactivos. A Vert.x fornece um protocolo de contra-pressão diferente."

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:112
#, fuzzy
msgid "Why are these API shaping rules important? Vert.x does not provide a single API.  The \"bare\" API presented above is just one of the proposed API.  It also provides API in Kotlin, API for RX Java, and so on."
msgstr "Por que é que estas regras de configuração da API são importantes? O Vert.x não fornece uma única API. A API \"simples\" apresentada acima é apenas uma das APIs propostas. Ele também fornece API em Kotlin, API para RX Java e assim por diante."

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:116
#, fuzzy
msgid "These APIs are **generated**.  Vert.x provides a code generator that _ translates_ the Vert.x \"bare\" API into the other APIs.  Because all methods are well-formed, the generator understands how they should be adapted."
msgstr "Estas APIs são *geradas*. O Vert.x fornece um gerador de código que _traduz_ a API \"nua\" do Vert.x para as outras APIs. Como todos os métodos são bem formados, o gerador entende como eles devem ser adaptados."

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:118
#, fuzzy
msgid "image:/assets/images/posts/mutiny-vertx/generation.png[]"
msgstr "image:/assets/images/posts/mutiny-vertx/generation.png[alt=generation]"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:121
#, fuzzy
msgid "The generated code exposes a different API; each method delegating to the \"bare\" API.  Asynchronous methods and streams can follow different transformations, so the resulting API uses the right idioms."
msgstr "O código gerado expõe uma API diferente; cada método delega para a API \"nua\". Os métodos assíncronos e os fluxos podem seguir diferentes transformações, pelo que a API resultante utiliza as expressões idiomáticas correctas."

#. type: Title ==
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:122
#, fuzzy, no-wrap
msgid "The Vert.x Mutiny API"
msgstr "A API Vert.x Mutiny"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:127
#, fuzzy
msgid "Mutiny is an event-driven reactive programming library.  It's not related to Vert.x.  However, we have written a code generator that generates the Mutiny variant for the Vert.x API:"
msgstr "Mutiny é uma biblioteca de programação reactiva orientada para eventos. Não está relacionada com a Vert.x. No entanto, escrevemos um gerador de código que gera a variante Mutiny para a API Vert.x:"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:129
#, fuzzy
msgid "image:/assets/images/posts/mutiny-vertx/mutiny.png[]"
msgstr "image:/assets/images/posts/mutiny-vertx/mutiny.png[alt=mutiny]"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:131
#, fuzzy
msgid "The transformations are straightforward:"
msgstr "As transformações são simples:"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:133
#, fuzzy
msgid "`io.vertx` package => `io.vertx.mutiny` package"
msgstr "`io.vertx` pacote ⇒ `io.vertx.mutiny` pacote"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:134
#, fuzzy
msgid "Asynchronous methods => method returning a `Uni<T>`"
msgstr "Métodos assíncronos ⇒ método que devolve um `Uni&amp;lt;T&amp;gt;`"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:135
#, fuzzy
msgid "`ReadStreams<T>` => can be consumed as `Multi<T>`"
msgstr "`ReadStreams&amp;lt;T&amp;gt;` ⇒ pode ser consumido como `Multi&amp;lt;T&amp;gt;`"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:136
#, fuzzy
msgid "`WriteStreams<T>` => can be consumed as Reactive Streams `Subscriber<T>`"
msgstr "`WriteStreams&amp;lt;T&amp;gt;` ⇒ pode ser consumido como Fluxos Reactivos `Subscriber&amp;lt;T&amp;gt;`"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:138
#, fuzzy
msgid "It also adapts the Vert.x back pressure protocol to Reactive Streams, as Mutiny implements Reactive Streams."
msgstr "Também adapta o protocolo de contrapressão Vert.x aos fluxos reactivos, uma vez que o Mutiny implementa fluxos reactivos."

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:140
#, fuzzy
msgid "For example, the first example from above becomes:"
msgstr "Por exemplo, o primeiro exemplo de cima torna-se:"

#. type: delimited block -
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:146
#, no-wrap
msgid ""
"Uni<Buffer> uni = vertx.fileSystem().readFile(\"my-file.txt\");\n"
"uni.subscribe()\n"
"  .with(it -> System.out.println(\"File content is: \" + it));\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:150
#, fuzzy
msgid "One difference between the two APIs is related to laziness. The Vert.x \"bare\" API triggers the operation as soon as the method is called.  The Mutiny variant expects a subscription to trigger the operation."
msgstr "Uma diferença entre as duas APIs está relacionada com a preguiça. A API \"simples\" do Vert.x acciona a operação assim que o método é chamado. A variante Mutiny espera que uma subscrição accione a operação."

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:152
#, fuzzy
msgid "The stream example from above becomes:"
msgstr "O exemplo de fluxo acima torna-se:"

#. type: delimited block -
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:164
#, no-wrap
msgid ""
"Uni<AsyncFile> uni = vertx.fileSystem()\n"
"        .open(\"my-file.txt\", new OpenOptions().setRead(true));\n"
"uni\n"
"    // Gets a Multi to read the file:\n"
"    .onItem().transformToMulti(asyncFile -> asyncFile.toMulti())\n"
"    // Gets the buffers one by one:\n"
"    .subscribe().with(\n"
"       buffer -> System.out.println(\"Received buffer: \" + buffer)\n"
");\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:166
#, fuzzy, no-wrap
msgid "A bit more than this"
msgstr "Um pouco mais do que isto"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:170
#, fuzzy
msgid "The Mutiny variant does not only apply the rules exposed in the previous section.  For asynchronous methods, it also provides:"
msgstr "A variante Mutiny não se limita a aplicar as regras expostas na secção anterior. Para métodos assíncronos, ela também fornece:"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:172
#, fuzzy
msgid "`xAndAwait()` methods - blocks the caller thread until the outcome is received. In the case of a failure, throws a `RuntimeException`"
msgstr "`xAndAwait()` métodos - bloqueia a linha de execução do chamador até que o resultado seja recebido. No caso de uma falha, lança um `RuntimeException`"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:173
#, fuzzy
msgid "`xAndForget()` methods - triggers the operation, discard the outcome"
msgstr "`xAndForget()` métodos - desencadeia a operação, rejeita o resultado"

#. type: delimited block -
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:178
#, no-wrap
msgid ""
"// Read the content of the file in a blocking manner:\n"
"Buffer content   = vertx.fileSystem().readFileAndAwait(\"my-file.txt\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:184
#, no-wrap
msgid ""
"// Open and close the file\n"
"// Closing the file is an asynchronous operation (returning a Uni).\n"
"// We trigger the operation and discard the outcome\n"
"vertx.fileSystem().open(\"my-file.txt\", new OpenOptions().setRead(true))\n"
"    .subscribe().with(file -> file.closeAndForget());\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:186
#, fuzzy, no-wrap
msgid "Where can we find this API?"
msgstr "Onde podemos encontrar esta API?"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:190
#, fuzzy
msgid "At the moment of writing, we only provide Vert.x core and Vert.x clients (MongoDB, Redis, Web client, Mqtt, and so on).  We are extending the support to cover the full Vert.x stack."
msgstr "No momento em que escrevemos, fornecemos apenas o núcleo Vert.x e os clientes Vert.x (MongoDB, Redis, cliente Web, Mqtt e assim por diante). Estamos a alargar o suporte para cobrir toda a pilha Vert.x."

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:193
#, fuzzy
msgid "To use the Mutiny clients, you need to add the right dependency to your project.  Browse https://search.maven.org/search?q=a:smallrye-mutiny-vertx*[the list of dependency] to pick the one you need."
msgstr "Para utilizar os clientes Mutiny, é necessário adicionar a dependência correcta ao seu projeto. Navegue pela  link:https://search.maven.org/search?q=a:smallrye-mutiny-vertx*[lista de dependências] para escolher a que precisa."

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:195
#, fuzzy
msgid "For example, to you use the Mutiny variant of the Vert.x Web client, add the following dependency:"
msgstr "Por exemplo, para utilizar a variante Mutiny do cliente Web Vert.x, adicione a seguinte dependência:"

#. type: delimited block -
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:203
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.smallrye.reactive</groupId>\n"
"  <artifactId>smallrye-mutiny-vertx-web-client</artifactId>\n"
"  <version>...</version>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:206
#, fuzzy
msgid "Once you have the dependency, just create the web client instance:"
msgstr "Assim que tiver a dependência, basta criar a instância do cliente Web:"

#. type: delimited block -
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:210
#, no-wrap
msgid "@Inject Vertx vertx; // Inject the managed io.vertx.mutiny.core.Vertx instance\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:212
#, no-wrap
msgid "private WebClient client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:220
#, no-wrap
msgid ""
"@PostConstruct\n"
"public void init() {\n"
"  client = WebClient.create(vertx, new WebClientOptions()\n"
"    .setDefaultHost(\"localhost\")\n"
"    .setDefaultPort(8082)\n"
"  );\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:226
#, no-wrap
msgid ""
"private Uni<String> call(String path) {\n"
"  return client\n"
"    .get(path).send()\n"
"    .onItem().transform(HttpResponse::bodyAsString);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:229
#, fuzzy
msgid "Something missing? Open an issue on https://github.com/smallrye/smallrye-reactive-utils/issues[SmallRye Reactive Utils]."
msgstr "Algo está faltando? Abra um problema no  link:https://github.com/smallrye/smallrye-reactive-utils/issues[SmallRye Reactive Utils]."

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:231
#, fuzzy
msgid "The Javadoc is available http://smallrye.io/smallrye-reactive-utils/apidocs/[here]."
msgstr "O Javadoc está disponível  link:http://smallrye.io/smallrye-reactive-utils/apidocs/[aqui]."

#. type: Title ==
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:232
#, fuzzy, no-wrap
msgid "The road ahead: Vert.x 4!"
msgstr "O caminho a seguir: Vert.x 4!"

#. type: Plain text
#: upstream/_posts/2020-11-24-mutiny-vertx.adoc:236
#, fuzzy
msgid "Vert.x 4 is coming soon! We are already working in Quarkus and the different satellite projects to migrate.  With Vert.x 4, a new generator has been implemented (following the same code generation approach), paving the road to a smooth upgrade."
msgstr "O Vert.x 4 está a chegar! Já estamos a trabalhar no Quarkus e nos diferentes projectos satélite para fazer a migração. Com a Vert.x 4, foi implementado um novo gerador (seguindo a mesma abordagem de geração de código), abrindo caminho para uma atualização sem problemas."
