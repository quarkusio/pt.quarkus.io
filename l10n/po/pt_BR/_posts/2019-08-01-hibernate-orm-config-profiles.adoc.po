# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2019-08-01-hibernate-orm-config-profiles.adoc
#, fuzzy, no-wrap
msgid "Tips to use Hibernate ORM with Quarkus profiles and live coding mode"
msgstr "Sugestões para utilizar o Hibernate ORM com perfis Quarkus e modo de codificação em direto"

#. type: YAML Front Matter: synopsis
#: _posts/2019-08-01-hibernate-orm-config-profiles.adoc
#, fuzzy, no-wrap
msgid "Hibernate ORM lets you generate or update the database schema. Let's explore when to use such option in combination with live coding."
msgstr "O Hibernate ORM permite-lhe gerar ou atualizar o esquema da base de dados. Vamos explorar quando utilizar esta opção em combinação com a codificação em tempo real."

#: _posts/2019-08-01-hibernate-orm-config-profiles.adoc
#, fuzzy
msgid ""
"Quarkus live coding (aka dev mode) is really useful for applications that mix front end or services and database access.\n"
"There are a few common approaches to make the best of it."
msgstr "A codificação ao vivo do Quarkus (também conhecida como modo de desenvolvimento) é realmente útil para aplicativos que combinam front-end ou serviços e acesso a banco de dados. Há algumas abordagens comuns para tirar o melhor proveito disso."

#: _posts/2019-08-01-hibernate-orm-config-profiles.adoc
#, fuzzy
msgid ""
"The first choice is to use `quarkus.hibernate-orm.database.generation=drop-and-create` in conjunction with `import.sql`.\n"
"That way for every change to your app and in particular to your entities, the database schema will be properly recreated\n"
"and your data fixture (stored in `import.sql`) will be used to repopulate it from scratch.\n"
"This is best to perfectly control your environment and works magic with Quarkus live coding mode:\n"
"your entity changes or any change to your `import.sql` is immediately picked up and the schema updated without restarting the application!"
msgstr "A primeira opção é usar `quarkus.hibernate-orm.database.generation=drop-and-create` em conjunto com `import.sql` . Dessa forma, para cada alteração no aplicativo e, em particular, nas entidades, o esquema do banco de dados será recriado adequadamente e a fixação de dados (armazenada em `import.sql` ) será usada para repovoá-lo do zero. Essa é a melhor maneira de controlar perfeitamente o ambiente e funciona de forma mágica com o modo de codificação ao vivo do Quarkus: as alterações na entidade ou qualquer alteração em `import.sql` são imediatamente captadas e o esquema é atualizado sem reiniciar o aplicativo!"

#: _posts/2019-08-01-hibernate-orm-config-profiles.adoc
#, fuzzy
msgid ""
"By default, Hibernate ORM, upon boot, will read and execute the SQL statements in the `/import.sql` file (if present).\n"
"You can change the file name by changing the property `quarkus.hibernate-orm.sql-load-script` in `application.properties`."
msgstr "Por padrão, o Hibernate ORM, na inicialização, lerá e executará as instruções SQL no arquivo `/import.sql` (se houver). O senhor pode alterar o nome do arquivo alterando a propriedade `quarkus.hibernate-orm.sql-load-script` em `application.properties` ."

#: _posts/2019-08-01-hibernate-orm-config-profiles.adoc
#, fuzzy
msgid ""
"The second approach is to use `quarkus.hibernate-orm.database.generation=update`.\n"
"This approach is best when you do many entity changes but\n"
"still need to work on a copy of the production data\n"
"or if you want to reproduce a bug that is based on specific database entries.\n"
"`update` is a best effort from Hibernate ORM and will fail in specific situations\n"
"including altering your database structure which could lead to data loss.\n"
"For example if you change structures related to the foreign key, Hibernate ORM might have to bail out.\n"
"But for development, these limitations are acceptable."
msgstr "A segunda abordagem é usar `quarkus.hibernate-orm.database.generation=update` . Essa abordagem é melhor quando o senhor faz muitas alterações na entidade, mas ainda precisa trabalhar em uma cópia dos dados de produção ou se quiser reproduzir um bug que se baseia em entradas específicas do banco de dados. `update` é o melhor esforço do Hibernate ORM e falhará em situações específicas, incluindo a alteração da estrutura do banco de dados, o que pode levar à perda de dados. Por exemplo, se o senhor alterar as estruturas relacionadas à chave estrangeira, o Hibernate ORM poderá ter que sair do ar. Mas, para o desenvolvimento, essas limitações são aceitáveis."

#: _posts/2019-08-01-hibernate-orm-config-profiles.adoc
#, fuzzy
msgid ""
"The third approach is to use `quarkus.hibernate-orm.database.generation=none`.\n"
"This approach is best when you are working on a copy of the production data but want to fully control the schema evolution.\n"
"Or if you use a database schema migration tool like https://quarkus.io/guides/flyway[Flyway].\n"
"When you make a change to an entity, make sure to adapt the database schema accordingly."
msgstr "A terceira abordagem é usar o site `quarkus.hibernate-orm.database.generation=none` . Essa abordagem é melhor quando o senhor está trabalhando em uma cópia dos dados de produção, mas deseja controlar totalmente a evolução do esquema. Ou se o senhor usar uma ferramenta de migração de esquema de banco de dados como o link:https://quarkus.io/guides/flyway[Flyway] . Quando o senhor fizer uma alteração em uma entidade, certifique-se de adaptar o esquema do banco de dados de acordo."

#. type: Plain text
#: _posts/2019-08-01-hibernate-orm-config-profiles.adoc
#, fuzzy
msgid "Do not use `quarkus.hibernate-orm.database.generation` `drop-and-create` and `update` in your production environment. You have been warned :)"
msgstr "Não utilize `quarkus.hibernate-orm.database.generation` `drop-and-create` e `update` no seu ambiente de produção. Foi avisado :)"

#. type: Title ==
#: _posts/2019-08-01-hibernate-orm-config-profiles.adoc
#, fuzzy, no-wrap
msgid "Now with Quarkus profiles"
msgstr "Agora com perfis Quarkus"

#: _posts/2019-08-01-hibernate-orm-config-profiles.adoc
#, fuzzy
msgid ""
"It becomes really powerful when combined with Quarkus configuration profiles.\n"
"You can define different https://quarkus.io/guides/config#configuration-profiles[configuration profiles]\n"
"to select different behaviors depending on your environment.\n"
"This is great because you can define different combinations of Hibernate ORM properties matching the development style you currently need."
msgstr "Ele se torna realmente poderoso quando combinado com os perfis de configuração do Quarkus. O senhor pode definir diferentes link:https://quarkus.io/guides/config#configuration-profiles[perfis de configuração] para selecionar diferentes comportamentos, dependendo do seu ambiente. Isso é ótimo porque o senhor pode definir diferentes combinações de propriedades do Hibernate ORM de acordo com o estilo de desenvolvimento de que precisa no momento."

#. type: Block title
#: _posts/2019-08-01-hibernate-orm-config-profiles.adoc
#, no-wrap
msgid "application.properties"
msgstr "application.properties"

#: _posts/2019-08-01-hibernate-orm-config-profiles.adoc
#, fuzzy
msgid ""
"I hope you have found this tip useful.\n"
"Hibernate ORM schema update, data fixture, Quarkus dev mode and its configuration profiles are a powerful combination!"
msgstr "Espero que o senhor tenha achado essa dica útil. A atualização do esquema do Hibernate ORM, a fixação de dados, o modo de desenvolvimento do Quarkus e seus perfis de configuração são uma combinação poderosa!"
