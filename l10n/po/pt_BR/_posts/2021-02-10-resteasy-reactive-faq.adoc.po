# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy, no-wrap
msgid "Massive performance without headaches"
msgstr "Grande desempenho sem dores de cabeça"

#. type: YAML Front Matter: synopsis
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy, no-wrap
msgid "RESTEasy Reactive FAQ"
msgstr "RESTEasy Reactive FAQ"

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "The purpose of this blog post is to clear up some confusion about RESTEasy Reactive and answer some commonly asked questions around it."
msgstr "O objetivo desta publicação do blogue é esclarecer alguma confusão sobre o RESTEasy Reactive e responder a algumas perguntas frequentes sobre o mesmo."

#. type: Title ==
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy, no-wrap
msgid "Acknowledgement"
msgstr "Reconhecimento"

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "This blog post would not have been possible without the expert advice of https://twitter.com/clementplop[Clement Escoffier] and https://twitter.com/unfromage[Stéphane Épardaud]."
msgstr "Esta publicação no blogue não teria sido possível sem os conselhos dos especialistas  link:https://twitter.com/clementplop[Clement Escoffier] e  link:https://twitter.com/unfromage[Stéphane Épardaud]."

#. type: Title ==
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy, no-wrap
msgid "Imperative and Reactive: the elevator pitch"
msgstr "Imperativo e Reativo: o elevator pitch"

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "In our quest to understand why RESTEasy Reactive is important and how it differs from RESTEasy Classic, it helps to paraphrase a very important message that was first introduced https://quarkus.io/blog/io-thread-benchmark/#imperative-and-reactive-the-elevator-pitch[here]."
msgstr "Para compreendermos a importância do RESTEasy Reactive e a sua diferença em relação ao RESTEasy Classic, é útil parafrasear uma mensagem muito importante que foi  link:https://quarkus.io/blog/io-thread-benchmark/#imperative-and-reactive-the-elevator-pitch[aqui] apresentada pela primeira vez."

#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid ""
"In general, Java web applications use imperative programming combined with blocking IO operations. This is incredibly popular because it is easier to reason about the code.\n"
"Things get executed sequentially. When the application receives a request, the framework associates this request to a worker thread.\n"
"When the request processing needs to interact with a database or another remote service, it relies on blocking IO.\n"
"The thread is blocked waiting for the answer, making the communication synchronous. With this model one request is not affected by another as they are run on different threads.\n"
"Even when one thread is waiting, other requests running on different threads are not slowed down significantly."
msgstr "Em geral, os aplicativos da Web Java usam programação imperativa combinada com operações de E/S de bloqueio. Isso é incrivelmente popular porque é mais fácil raciocinar sobre o código. As coisas são executadas sequencialmente. Quando o aplicativo recebe uma solicitação, a estrutura associa essa solicitação a um thread de trabalho. Quando o processamento da solicitação precisa interagir com um banco de dados ou outro serviço remoto, ele depende do bloqueio de IO. O thread fica bloqueado aguardando a resposta, tornando a comunicação síncrona. Com esse modelo, uma solicitação não é afetada por outra, pois elas são executadas em threads diferentes. Mesmo quando um thread está aguardando, outras solicitações executadas em threads diferentes não sofrem lentidão significativa."

#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid ""
"However, with this model, you need one thread for every concurrent request, which places a limit on the achievable concurrency.\n"
"On the other side, the reactive execution model embraces asynchronous development models and non-blocking IO.\n"
"With this model, multiple requests can be handled by the same thread. When the processing of a request can no longer make progress\n"
"(because it requests a remote service, or interacts with a database for example), it uses non-blocking IO.\n"
"Instead of blocking the thread, it schedules the operation and passes a continuation which would be invoked after the completion\n"
"of the operationfootnote:[This article won’t detail how operating systems and non-blocking IO libraries enable such a model. Under the hood, kernel mechanisms such as select, epoll and ICMP are making the handling of IO very efficient, in terms of speed and resource utilization.].\n"
"This releases the thread immediately, which can then be used to serve another request. When the result of the IO operation is available,\n"
"the processing of the request is resumed and continues its execution."
msgstr "Entretanto, com esse modelo, é necessário um thread para cada solicitação simultânea, o que limita a simultaneidade alcançável. Por outro lado, o modelo de execução reativa abrange modelos de desenvolvimento assíncronos e E/S sem bloqueio. Com esse modelo, várias solicitações podem ser tratadas pelo mesmo thread. Quando o processamento de uma solicitação não pode mais progredir (porque ela solicita um serviço remoto ou interage com um banco de dados, por exemplo), ele usa E/S sem bloqueio. Em vez de bloquear o thread, ele agenda a operação e passa uma continuação que seria invocada após a conclusão da operação[ link:[1, id=\"_footnoteref_1\", class=\"footnote\", href=\"#_footnotedef_1\", title=\"View footnote.\"] ]. Isso libera o thread imediatamente, que pode então ser usado para atender a outra solicitação. Quando o resultado da operação de E/S estiver disponível, o processamento da solicitação é retomado e continua sua execução."

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "This model enables the usage of a single IO thread to handle multiple requests. There are three significant benefits."
msgstr "Este modelo permite a utilização de um único thread de IO para tratar vários pedidos. Há três benefícios significativos."

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "First, the response time is smaller because it does not have to jump to another thread."
msgstr "Em primeiro lugar, o tempo de resposta é menor porque não tem de saltar para outro segmento."

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "Second, it reduces memory consumption as it decreases the usage of threads."
msgstr "Em segundo lugar, reduz o consumo de memória, uma vez que diminui a utilização de threads."

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "Third, your concurrency is no longer limited by the number of threads."
msgstr "Em terceiro lugar, a sua concorrência já não está limitada pelo número de threads."

#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid ""
"The reactive model uses the hardware resources more efficiently, but... a significant pitfall lurks. If the processing of a request starts to block, things can go south really quickly as\n"
"no other request can be handled. To avoid this, you need to learn how to write asynchronous and non-blocking code, how to schedule operations, how to write continuations, how to chain actions.\n"
"Basically, we need a way to structure asynchronous processing, and use non-blocking IO. No doubt, that consists of a paradigm shift.\n"
"In Quarkus, we want to make the shift as easy as possible, so RESTEasy Reactive allows you to choose whether an endpoint is blocking or non-blocking\n"
"(an application is free to mix and match blocking and non-blocking methods at will).\n"
"So don’t be intimidated by the reactive word, the infrastructure is reactive, but your code can be either reactive or imperative. That’s what we mean by unification of reactive and imperative."
msgstr "O modelo reativo usa os recursos de hardware de forma mais eficiente, mas... há uma armadilha significativa à espreita. Se o processamento de uma solicitação começar a bloquear, as coisas podem desandar muito rapidamente, pois nenhuma outra solicitação poderá ser atendida. Para evitar isso, o senhor precisa aprender a escrever código assíncrono e sem bloqueio, como agendar operações, como escrever continuações, como encadear ações. Basicamente, precisamos de uma maneira de estruturar o processamento assíncrono e usar IO sem bloqueio. Sem dúvida, isso consiste em uma mudança de paradigma. No Quarkus, queremos tornar essa mudança o mais fácil possível, de modo que o RESTEasy Reactive permite que o senhor escolha se um endpoint é bloqueante ou não bloqueante (um aplicativo é livre para misturar e combinar métodos bloqueantes e não bloqueantes à vontade). Portanto, não se deixe intimidar pela palavra reativo, a infraestrutura é reativa, mas seu código pode ser reativo ou imperativo. É isso que queremos dizer com unificação de reativo e imperativo."

#. type: Title ==
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy, no-wrap
msgid "What that means from a RESTEasy Reactive perspective"
msgstr "O que isso significa do ponto de vista da RESTEasy Reactive"

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "RESTEasy Reactive by default handles each HTTP request on an IO thread (otherwise known as an event-loop thread)footnote:[More information about the execution model of RESTEasy Reactive can be found https://quarkus.io/guides/resteasy-reactive#execution-model-blocking-non-blocking[here]]."
msgstr "O RESTEasy Reactive, por padrão, trata cada solicitação HTTP em uma thread IO (também conhecida como thread de loop de eventos)<sup class=\"footnote\">[ link:#_footnotedef_1[1, id=_footnoteref_1, role=footnote, title=View footnote.]]</sup>."

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "The following image shows what that looks at a high level:"
msgstr "A imagem seguinte mostra o que isso parece a um nível elevado:"

#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid ""
"This ensures that maximum throughput can be achieved, but it also means that the implementation of an endpoint method should complete in a timely fashion otherwise the thread will be used for too longfootnote:[\"Too long\" depends on your target concurrency. You may consider 1ms as too long for some endpoint heavily used, but 100ms might be acceptable for less used endpoints]\n"
"and other requests will be queued up and lead to degraded throughput."
msgstr "Isso garante que a taxa de transferência máxima possa ser alcançada, mas também significa que a implementação de um método de endpoint deve ser concluída em tempo hábil; caso contrário, o thread será usado por muito tempo[ link:[1, id=\"_footnoteref_1\", class=\"footnote\", href=\"#_footnotedef_1\", title=\"View footnote.\"] ] e outras solicitações serão enfileiradas, o que resultará em uma taxa de transferência reduzida."

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "It is important to understand that a method body that uses imperative code only becomes a problem when it takes a long time to execute - which is almost always the case for blocking IO operations."
msgstr "É importante compreender que um corpo de método que utiliza código imperativo só se torna um problema quando demora muito tempo a executar - o que é quase sempre o caso das operações de IO bloqueantes."

#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid ""
"For that reason, when the body of the method performs some kind of blocking IO operation (or even some CPU bound operation that requires time to complete), the request needs to be offloaded to a worker thread.\n"
"In RESTEasy Reactive that is done declaratively using the `@Blocking` annotation - no reactive programming or complex Java concurrency related code is needed.\n"
"Quarkus also warns you when you attempt to use blocking IO on an IO thread.\n"
"If however the method body performs non-blocking IO (or some CPU bound operation that completes very quickly) then RESTEasy Reactive can continue to serve the entire request on the IO thread."
msgstr "Por esse motivo, quando o corpo do método executa algum tipo de operação de E/S bloqueante (ou mesmo alguma operação vinculada à CPU que requer tempo para ser concluída), a solicitação precisa ser transferida para um thread de trabalho. No RESTEasy Reactive isso é feito de forma declarativa usando a anotação `@Blocking` - não é necessária nenhuma programação reativa ou código complexo relacionado à concorrência em Java. O Quarkus também avisa quando o usuário tenta usar IO bloqueante em um thread de IO. No entanto, se o corpo do método executar IO não bloqueante (ou alguma operação vinculada à CPU que seja concluída muito rapidamente), o RESTEasy Reactive poderá continuar a atender toda a solicitação no thread de IO."

#. type: Title ==
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy, no-wrap
msgid "Is RESTEasy Reactive limited to using reactive APIs?"
msgstr "O RESTEasy Reactive está limitado ao uso de APIs reativas?"

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "Absolutely not!"
msgstr "De modo algum!"

#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid ""
"Although RESTEasy Reactive was built from the ground up to do non-blocking IO and serve requests from the event loop threads (thus avoiding the needless usage of worker pool threads)\n"
"it can effortlessly work with blocking IO and any piece of code that provides a blocking API (such as Hibernate) without blocking the event loop."
msgstr "Embora o RESTEasy Reactive tenha sido criado desde o início para fazer E/S sem bloqueio e atender às solicitações dos threads do loop de eventos (evitando, assim, o uso desnecessário de threads de pool de trabalho), ele pode trabalhar facilmente com E/S com bloqueio e com qualquer parte do código que forneça uma API com bloqueio (como o Hibernate) sem bloquear o loop de eventos."

#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid ""
"The only thing you have to do is add `@Blocking` on your endpoint method or class.\n"
"That’s it! If you use `@Blocking` you are back to the regular dispatching mechanism: a worker thread is used to execute your method."
msgstr "A única coisa que o senhor precisa fazer é adicionar `@Blocking` ao seu método ou classe de endpoint. E pronto! Se o senhor usar `@Blocking` , voltará ao mecanismo de despacho regular: um thread de trabalho é usado para executar o método."

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "At a high level it this looks like this:"
msgstr "A um nível elevado, isto tem o seguinte aspeto:"

#. type: Title ==
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy, no-wrap
msgid "Does RESTEasy Reactive require Hibernate Reactive?"
msgstr "O RESTEasy Reactive requer o Hibernate Reactive?"

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "As you can probably guess from the answer to the previous question, the answer is no."
msgstr "Como provavelmente pode adivinhar pela resposta à pergunta anterior, a resposta é não."

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "In scenarios where RESTEasy Reactive is used along with Hibernate, the `@Blocking` annotation should be placed on the endpoint methods that interact with Hibernate."
msgstr "Nos cenários em que o RESTEasy Reactive é utilizado juntamente com o Hibernate, a anotação `@Blocking` deve ser colocada nos métodos de ponto de extremidade que interagem com o Hibernate."

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "In scenarios where RESTEasy Reactive is used along with Hibernate Reactive, no `@Blocking` annotation is necessary on the endpoint methods that interact with Hibernate Reactive."
msgstr "Nos cenários em que o RESTEasy Reactive é utilizado juntamente com o Hibernate Reactive, não é necessária a anotação `@Blocking` nos métodos de ponto final que interagem com o Hibernate Reactive."

#. type: Title ==
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy, no-wrap
msgid "What is the performance implication of using @Blocking?"
msgstr "Qual é a implicação em termos de desempenho da utilização de @Blocking?"

#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid ""
"Although the absolute highest throughput is achieved when an endpoint method is non-blocking (that is the HTTP request is served completely from the event loop thread),\n"
"great performance can nonetheless be achieved even when `@Blocking` is used."
msgstr "Embora a maior taxa de transferência absoluta seja obtida quando um método de endpoint é não bloqueante (ou seja, a solicitação HTTP é atendida completamente a partir do thread do loop de eventos), é possível obter um ótimo desempenho mesmo quando o `@Blocking` é usado."

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "In our benchmarks we see the use of `@Blocking` reduce maximum throughput by around 30%footnote:[This is basically the cost we have to pay for dispatching the request to a worker thread. The percentage of the slowdown decreases the longer the target method takes to execute]."
msgstr "Nos nossos parâmetros de referência, verificamos que a utilização de `@Blocking` reduz a taxa de transferência máxima em cerca de 30%<sup class=\"footnote\">[ link:#_footnotedef_1[1, id=_footnoteref_1, role=footnote, title=View footnote.]]</sup>."

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "However, an endpoint method using `@Blocking` in RESTEasy Reactive still achieves around 50% higher throughput than the same method using RESTEasy Classic."
msgstr "No entanto, um método de ponto de extremidade que utiliza `@Blocking` no RESTEasy Reactive ainda alcança uma taxa de transferência cerca de 50% superior à do mesmo método que utiliza o RESTEasy Classic."

#. type: Title ==
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy, no-wrap
msgid "Why does RESTEasy Reactive using @Blocking perform better than RESTEasy Classic?"
msgstr "Por que o RESTEasy Reactive com @Blocking tem um desempenho melhor do que o RESTEasy Classic?"

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "RESTEasy Reactive is able to gain its performance advantage over RESTEasy Classic by:"
msgstr "O RESTEasy Reactive consegue obter sua vantagem de desempenho sobre o RESTEasy Classic ao"

#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid ""
"Integrating very tightly with Eclipse Vert.x for everything IO related. Vert.x has been extremely well optimized for IO operations and so tight integration with it allows RESTEasy Reactive to benefit from all that work.\n"
"You might recall that RESTEasy Classic on Quarkus uses Vert.x under the hood as well, but in that case the integration is not as deep and is therefore unable to fully utilize the power of Vert.x."
msgstr "Integração muito forte com o Eclipse Vert.x para tudo relacionado a IO. O Vert.x foi extremamente bem otimizado para operações de IO e, portanto, a integração estreita com ele permite que o RESTEasy Reactive se beneficie de todo esse trabalho. O senhor deve se lembrar que o RESTEasy Classic no Quarkus também usa o Vert.x, mas nesse caso a integração não é tão profunda e, portanto, não é possível utilizar totalmente o poder do Vert.x."

#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid ""
"Moving a lot of work to build time. As RESTEasy Reactive was built from the ground up to serve the needs of Quarkus, it benefits from the tightest possible integration with Quarkus and is probably the extension that does the most build time work.\n"
"This in turn results in creating an optimal data pipeline for serving each request, helping the JIT compiler by generating bytecode to inline runtime operations, eliminating reflection at runtime (both for invoking methods and for determining types) and reducing memory allocations."
msgstr "Transferindo muito trabalho para o tempo de construção. Como o RESTEasy Reactive foi desenvolvido desde o início para atender às necessidades do Quarkus, ele se beneficia da integração mais estreita possível com o Quarkus e é provavelmente a extensão que faz a maior parte do trabalho em tempo de construção. Isso, por sua vez, resulta na criação de um pipeline de dados ideal para atender a cada solicitação, ajudando o compilador JIT a gerar bytecode para operações de tempo de execução em linha, eliminando a reflexão em tempo de execução (tanto para invocar métodos quanto para determinar tipos) e reduzindo as alocações de memória."

#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid ""
"Avoiding the use of ThreadLocals and instead by utilizing a context object that contains all the necessary information.\n"
"ThreadLocals are a convenient way to make data available to different parts of a framework, but their frequent use comes at a cost and are thus fully avoided in RESTEasy Reactive."
msgstr "Evitar o uso de ThreadLocals e, em vez disso, utilizar um objeto de contexto que contenha todas as informações necessárias. Os ThreadLocals são uma maneira conveniente de disponibilizar dados para diferentes partes de uma estrutura, mas seu uso frequente tem um custo e, portanto, são totalmente evitados no RESTEasy Reactive."

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "Utilizing Arc in an optimal manner for all necessary injections. RESTEasy Classic provides an abstraction layer that performs the various injection operations, which for the needs of Quarkus is entirely unnecessary since Arc provides the same functionality with better performance."
msgstr "Utilizar o Arc de forma optimizada para todas as injecções necessárias. O RESTEasy Classic fornece uma camada de abstração que executa as várias operações de injeção, o que, para as necessidades do Quarkus, é totalmente desnecessário, uma vez que o Arc fornece a mesma funcionalidade com melhor desempenho."

#. type: Title ==
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy, no-wrap
msgid "How does it compare to RESTEasy Classic with Mutiny?"
msgstr "Como é que se compara com o RESTEasy Classic com Mutiny?"

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "You might recall that Quarkus allows you to use Mutiny return types (Uni and Multi) when using RESTEasy Classic via the `quarkus-resteasy-mutiny` extension and thus might be wondering how that compares to using RESTEasy Reactive."
msgstr "Talvez se lembre de que o Quarkus permite usar tipos de retorno Mutiny (Uni e Multi) ao usar o RESTEasy Classic através da extensão `quarkus-resteasy-mutiny` e, portanto, deve estar se perguntando como isso se compara ao uso do RESTEasy Reactive."

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "The main thing to understand about RESTEasy Classic is that it *always* handles requests on a worker thread as it does not use the event-loop concept at all."
msgstr "A principal coisa a entender sobre o RESTEasy Classic é que ele *sempre* lida com solicitações em uma thread de trabalho, pois não usa o conceito de loop de eventos."

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "This is best shown by the following image:"
msgstr "A imagem seguinte ilustra melhor esta situação:"

#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid ""
"So when using RESTEasy Classic even when you return a reactive type like `Uni` or `Multi` the initial request is still being handled on a worker thread and while the call to the library may result in non-blocking IO,\n"
"nevertheless there is no way for RESTEasy Classic to reuse the worker thread once it is blocked waiting on IO."
msgstr "Portanto, ao usar o RESTEasy Classic, mesmo quando o senhor retorna um tipo reativo como `Uni` ou `Multi` , a solicitação inicial ainda está sendo tratada em um thread de trabalho e, embora a chamada para a biblioteca possa resultar em IO sem bloqueio, não há como o RESTEasy Classic reutilizar o thread de trabalho quando ele estiver bloqueado aguardando IO."

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "Thus, the gain of using reactive return types in RESTEasy Classic is a syntactic gain, not a runtime gain - the underlying hardware isn’t used more efficiently despite the use of reactive types."
msgstr "Assim, o ganho da utilização de tipos de retorno reactivos no RESTEasy Classic é um ganho sintático, não um ganho em tempo de execução - o hardware subjacente não é utilizado de forma mais eficiente apesar da utilização de tipos reactivos."

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "When returning Mutiny types using RESTEasy Reactive, everything happens on the IO Thread (except if the endpoint is annotated with `@Blocking`). By the way, no need for an external extension to use Mutiny with RESTEasy Reactive, it’s built-in!"
msgstr "Ao retornar tipos Mutiny usando RESTEasy Reactive, tudo acontece no IO Thread (exceto se o endpoint for anotado com `@Blocking`). A propósito, não há necessidade de uma extensão externa para usar Mutiny com RESTEasy Reactive, ele está embutido!"

#. type: Title ==
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy, no-wrap
msgid "Do I have to use the new RESTEasy Reactive APIs to achieve maximum performance?"
msgstr "Tenho de utilizar as novas APIs Reactivas RESTEasy para obter o máximo desempenho?"

#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid ""
"Reading through the RESTEasy Reactive documentation you soon come across the new APIs for writing request filters (https://quarkus.io/guides/resteasy-reactive#request-or-response-filters[@ServerRequestFilter]),\n"
"response filters (`@ServerResponseFilter`) and exception mappers (https://quarkus.io/guides/resteasy-reactive#exception-mapping[@ServerExceptionMapper]).\n"
"You might wonder if their usage affects performance in any way compared to the standard JAX-RS APIs (`ContainerRequestFilter`, `ContainerResponseFilter` and `ExceptionMapper`)."
msgstr "Ao ler a documentação do RESTEasy Reactive, o senhor logo se depara com as novas APIs para escrever filtros de solicitação ( link:https://quarkus.io/guides/resteasy-reactive#request-or-response-filters[@ServerRequestFilter] ), filtros de resposta ( `@ServerResponseFilter` ) e mapeadores de exceção ( link:https://quarkus.io/guides/resteasy-reactive#exception-mapping[@ServerExceptionMapper] ). O senhor pode se perguntar se o uso dessas APIs afeta o desempenho de alguma forma em comparação com as APIs JAX-RS padrão ( `ContainerRequestFilter` , `ContainerResponseFilter` e `ExceptionMapper` )."

#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid ""
"Although the new APIs will give a tiny performance advantage over using the old APIs if the use of `@Context` is involved in the latter case, the advantage is negligible and should not worry you unless you are trying to squeeze out every inch of performance you can find.\n"
"One thing to keep in mind when writing filters with either API, is that using `org.jboss.resteasy.reactive.server.SimpleResourceInfo` instead of `javax.ws.rs.container.ResourceInfo` is advised as the latter results in reflection being performed."
msgstr "Embora as novas APIs ofereçam uma pequena vantagem de desempenho em relação ao uso das APIs antigas, se o uso de `@Context` estiver envolvido no último caso, a vantagem é insignificante e não deve preocupá-lo, a menos que esteja tentando espremer cada centímetro de desempenho que puder encontrar. Uma coisa que o senhor deve ter em mente ao escrever filtros com qualquer uma das APIs é que o uso de `org.jboss.resteasy.reactive.server.SimpleResourceInfo` em vez de `javax.ws.rs.container.ResourceInfo` é aconselhável, pois o último resulta na execução de reflexão."

#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid ""
"A special (albeit rather advanced) case where the new APIs do result in noticeably better performance is the case of `MessageBodyReader` and `MessageBodyWriter` classes.\n"
"When reading the HTTP request and writing the HTTP response, the use of https://quarkus.io/guides/resteasy-reactive#readers-and-writers-mapping-entities-and-http-bodies[ServerMessageBodyReader] and `ServerMessageBodyWriter` allows RESTEasy Reactive to optimize the data-path for serving the request."
msgstr "Um caso especial (embora bastante avançado) em que as novas APIs resultam em um desempenho visivelmente melhor é o caso das classes `MessageBodyReader` e `MessageBodyWriter` . Ao ler a solicitação HTTP e escrever a resposta HTTP, o uso de link:https://quarkus.io/guides/resteasy-reactive#readers-and-writers-mapping-entities-and-http-bodies[ServerMessageBodyReader] e `ServerMessageBodyWriter` permite que o RESTEasy Reactive otimize o caminho dos dados para atender à solicitação."

#. type: Title ==
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy, no-wrap
msgid "What about Reactive Routes?"
msgstr "E as rotas reactivas?"

#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid ""
"Quarkus was already providing a way to handle HTTP requests from the IO thread. Reactive Routes provides a declarative model to implement HTTP API. Each route can be called on the IO thread (default) or on a worker thread (using the `@Blocking` annotation).\n"
"Reactive Routes provide very good throughput and performance as highlighted in https://quarkus.io/blog/io-thread-benchmark/[this] article. How does reactive routes compare to RESTEasy Reactive?"
msgstr "O Quarkus já estava fornecendo uma maneira de lidar com solicitações HTTP a partir do thread IO. O Reactive Routes fornece um modelo declarativo para implementar a API HTTP. Cada rota pode ser chamada no thread de IO (padrão) ou em um thread de trabalho (usando a anotação `@Blocking` ). As rotas reativas proporcionam uma taxa de transferência e um desempenho muito bons, conforme destacado link:https://quarkus.io/blog/io-thread-benchmark/[neste] artigo. Como as rotas reativas se comparam ao RESTEasy Reactive?"

#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid ""
"One of the main complaints we got about Reactive Routes was about the development model: it’s very different from the one used with RESTEasy. However, Reactive Routes allowed us to verify the performance and efficiency benefits of using an end-to-end reactive model on top of Quarkus.\n"
"RESTEasy Reactive can be seen as the “next generation”: you get the runtime benefits while also using a familiar development model."
msgstr "Uma das principais reclamações que recebemos sobre o Reactive Routes foi sobre o modelo de desenvolvimento: ele é muito diferente daquele usado com o RESTEasy. No entanto, o Reactive Routes nos permitiu verificar os benefícios de desempenho e eficiência do uso de um modelo reativo de ponta a ponta sobre o Quarkus. O RESTEasy Reactive pode ser visto como a \"próxima geração\": o senhor obtém os benefícios do tempo de execução e, ao mesmo tempo, utiliza um modelo de desenvolvimento familiar."

#. type: Title ==
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy, no-wrap
msgid "Summary"
msgstr "Resumo"

#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid ""
"RESTEasy Reactive is the next generation of HTTP framework. It unifies reactive (non-blocking IO, asynchronous APIs) and imperative (thanks to the `@Blocking` annotation). It improves raw performances without constraining the user experience.\n"
"Its reactive/imperative duality makes it fit any use cases, from highly concurrent HTTP APIs, to more traditional transactional CRUD applications."
msgstr "O RESTEasy Reactive é a próxima geração da estrutura HTTP. Ela unifica o reativo (IO sem bloqueio, APIs assíncronas) e o imperativo (graças à anotação `@Blocking` ). Ela melhora o desempenho bruto sem restringir a experiência do usuário. Sua dualidade reativa/imperativa faz com que se adapte a qualquer caso de uso, desde APIs HTTP altamente simultâneas até aplicativos CRUD transacionais mais tradicionais."

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "We see RESTEasy Reactive as becoming the default HTTP layer in Quarkus in the near future and are completely committed to making it perform at the best possible level while also introducing new features that spark developer joy!"
msgstr "Vemos o RESTEasy Reactive como a camada HTTP padrão no Quarkus em um futuro próximo e estamos completamente comprometidos em fazer com que ele tenha o melhor desempenho possível, ao mesmo tempo em que introduzimos novos recursos que despertam a alegria dos desenvolvedores!"

#. type: Plain text
#: _posts/2021-02-10-resteasy-reactive-faq.adoc
#, fuzzy
msgid "In that vein, we hope that this short blog post will provide you with some insight on what makes RESTEasy Reactive special and clear up any misconceptions you may have had about it."
msgstr "Nesse sentido, esperamos que esta breve publicação do blogue lhe dê uma ideia do que torna o RESTEasy Reactive especial e esclareça quaisquer ideias erradas que possa ter tido sobre ele."
