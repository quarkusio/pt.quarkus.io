# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-10-13-uni-retry.adoc:1
#, fuzzy, no-wrap
msgid "cescoffier"
msgstr "cescoffier"

#. type: YAML Front Matter: date
#: upstream/_posts/2020-10-13-uni-retry.adoc:1
#, fuzzy, no-wrap
msgid "2020-10-13"
msgstr "2020-10-13"

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-10-13-uni-retry.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "posto"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-10-13-uni-retry.adoc:1
#, fuzzy, no-wrap
msgid "How does `retry` actually work?"
msgstr "Como é que o `retry` funciona realmente?"

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-10-13-uni-retry.adoc:1
#, fuzzy, no-wrap
msgid "reactive mutiny retry"
msgstr "tentativa de motim reativo"

#. type: YAML Front Matter: title
#: upstream/_posts/2020-10-13-uni-retry.adoc:1
#, fuzzy, no-wrap
msgid "Mutiny - How does retry... retries?"
msgstr "Mutiny - Como é que o retry... volta a tentar?"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:17
#, fuzzy
msgid "Last week, David, a Quarkus user, asked me about retrying an asynchronous operation.  David has a _picky_ remote HTTP service, which sometimes misbehaves.  Easy answer! Just do: `uni.onFailure().retry().atMost(x)`.  But, David is curious, and asked me a second question: how does retry work? Well, that’s simple; it just retries...  As you can imagine, that did not satisfy David’s curiosity."
msgstr "Na semana passada, o David, um utilizador do Quarkus, perguntou-me sobre a possibilidade de tentar novamente uma operação assíncrona. O David tem um serviço HTTP remoto _exigente_, que por vezes se comporta mal. Resposta fácil! Basta fazer: `uni.onFailure().retry().atMost(x)`. Mas o David é curioso e fez-me uma segunda pergunta: como é que o retry funciona? Bem, isso é simples; ele apenas tenta novamente... Como você pode imaginar, isso não satisfez a curiosidade de David."

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:20
#, fuzzy
msgid "While I was answering to David, I realized that retrying is not that simple and deserves more explanation.  That’s what we are going to see in this blog post."
msgstr "Enquanto estava a responder ao David, apercebi-me de que o retrying não é assim tão simples e merece mais explicações. É isso que vamos ver neste post do blogue."

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:22
#, fuzzy
msgid "## Disclaimer about retries"
msgstr "Declaração de exoneração de responsabilidade sobre novas tentativas"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:29
#, fuzzy
msgid "Okay, if you are the kind of reader who skips the terms and conditions, you can jump to the next section.  But, for others, I need to warn you about retries.  Retries may not be the solution to your problem, as it can be terrible.  Retrying can only be done if your system can handle duplicated requests or messages.  In other words, you can only retry if your system is idempotent, i.e., sending a request or a message multiple times does not change the overall state.  In doubt, check before implementing a retry, as it can harm your system."
msgstr "Muito bem, se é o tipo de leitor que salta os termos e condições, pode passar à secção seguinte. Mas, para os outros, preciso avisá-lo sobre novas tentativas. As tentativas podem não ser a solução para o seu problema, pois podem ser terríveis. As novas tentativas só podem ser feitas se o seu sistema puder lidar com pedidos ou mensagens duplicados. Por outras palavras, só pode tentar novamente se o seu sistema for idempotente, ou seja, enviar um pedido ou uma mensagem várias vezes não altera o estado geral. Em caso de dúvida, verifique antes de implementar uma nova tentativa, uma vez que pode prejudicar o seu sistema."

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:31
#, fuzzy
msgid "Disclaimer said! Let’s look under the hood of retry."
msgstr "Aviso legal dito! Vamos dar uma olhadela nos bastidores do retry."

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:33
#, fuzzy
msgid "## Retry is about resubscribing"
msgstr "Repetir é uma questão de voltar a subscrever"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:35
#, fuzzy
msgid "Let’s imagine you have a `Uni` representing your asynchronous action, like in David’s case, an invocation of a remote service:"
msgstr "Imaginemos que tem um `Uni` que representa a sua ação assíncrona, como no caso do David, uma invocação de um serviço remoto:"

#. type: delimited block -
#: upstream/_posts/2020-10-13-uni-retry.adoc:39
#, no-wrap
msgid "Uni<String> uni = invokePickyService(client);\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:45
#, fuzzy
msgid "Unis are lazy.  Until someone subscribes to them, nothing happens.  In our case, the request is only sent to the remote service when someone subscribes to the `uni`.  So to execute the request, we need to subscribe:"
msgstr "As Unis são preguiçosas. Até que alguém as subscreva, nada acontece. No nosso caso, o pedido só é enviado para o serviço remoto quando alguém subscreve o `uni`. Assim, para executar o pedido, precisamos de subscrever:"

#. type: delimited block -
#: upstream/_posts/2020-10-13-uni-retry.adoc:53
#, no-wrap
msgid ""
"Uni<String> uni = invokePickyService(client);\n"
"uni.subscribe().with(\n"
"    resp -> System.out.println(\"Success: \" + resp),\n"
"    failure -> System.out.println(\"Failed: \" + failure.getMessage())\n"
");\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:57
#, fuzzy
msgid "In Quarkus, most of the time, you return the `Uni`, and Quarkus subscribes to it.  So, don't be mistaken, there is a subscription, you may not see it."
msgstr "No Quarkus, na maioria das vezes, devolve o `Uni` e o Quarkus subscreve-o. Por isso, não se engane, existe uma subscrição, mas pode não a ver."

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:60
#, fuzzy
msgid "This laziness is the retry secret.  In the following sequence diagram, you can see that the request is sent when we get a subscriber:"
msgstr "Esta preguiça é o segredo do retry. No diagrama de sequência seguinte, pode ver que o pedido é enviado quando obtemos um subscritor:"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:62
#, fuzzy
msgid "image:/assets/images/posts/mutiny-retry/subscription.png[]"
msgstr "image:/assets/images/posts/mutiny-retry/subscription.png[alt=subscription]"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:65
#, fuzzy
msgid "An interesting consequence of this is that if you subscribe twice, you emit two requests, and so get two responses:"
msgstr "Uma consequência interessante deste facto é que se subscrever duas vezes, emite dois pedidos e recebe duas respostas:"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:67
#, fuzzy
msgid "image:/assets/images/posts/mutiny-retry/double-subscription.png[]"
msgstr "image:/assets/images/posts/mutiny-retry/double-subscription.png[alt=double subscription]"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:72
#, fuzzy
msgid "But let’s go back to retry.  What’s a retry? A retry is a reaction to a failure, so you are going to write: `uni.onFailure().retry()`.  You also need to indicate how long do you want to retry:"
msgstr "Mas voltemos à repetição. O que é um retry? Um retry é uma reação a uma falha, por isso vai escrever: `uni.onFailure().retry()`. Também precisa de indicar quanto tempo quer repetir:"

#. type: delimited block -
#: upstream/_posts/2020-10-13-uni-retry.adoc:80
#, no-wrap
msgid ""
"Uni<String> uni = invokePickyService(client)\n"
"    .onFailure().retry().indefinitely();\n"
"uni.subscribe().with(\n"
"        resp -> System.out.println(\"Success: \" + resp)\n"
");\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:83
#, fuzzy
msgid "In this snippet, we retry _indefinitely_ until we get a successful result."
msgstr "Neste snippet, tentamos _indefinidamente_ até obtermos um resultado bem-sucedido."

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:87
#, fuzzy
msgid "But, how does it work under the hood? It’s quite simple.  If it gets a failure, it just re-subscribes:"
msgstr "Mas, como é que funciona por baixo do capô? É muito simples. Se houver uma falha, basta voltar a inscrever-se:"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:89
#, fuzzy
msgid "image:/assets/images/posts/mutiny-retry/retry.png[]"
msgstr "image:/assets/images/posts/mutiny-retry/retry.png[alt=retry]"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:92
#, fuzzy
msgid "It resubscribes until it gets a successful response.  In other words, retrying is resubscribing."
msgstr "Volta a inscrever-se até obter uma resposta bem sucedida. Por outras palavras, tentar de novo é voltar a subscrever."

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:94
#, fuzzy
msgid "## How many times should I retry?"
msgstr "Quantas vezes devo tentar de novo?"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:99
#, fuzzy
msgid "That’s always a good question.  Should I retry _indefinitely_? Most probably, not.  Indefinitely can be very long, and it could never end if the called service fails continuously."
msgstr "Esta é sempre uma boa pergunta. Devo tentar de novo _indefinidamente_? Muito provavelmente, não. Indefinidamente pode ser muito longo, e pode nunca terminar se o serviço chamado falhar continuamente."

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:101
#, fuzzy
msgid "You can configure the number of retries using `atMost`:"
msgstr "É possível configurar o número de tentativas utilizando `atMost`:"

#. type: delimited block -
#: upstream/_posts/2020-10-13-uni-retry.adoc:111
#, no-wrap
msgid ""
" Uni<String> uni = invokePickyService(client)\n"
"    .onFailure().retry().atMost(2);\n"
"uni.subscribe().with(\n"
"        resp -> System.out.println(\"Success: \" + resp),\n"
"        failure -> System.out.println(\"Failure: \" + failure.getMessage())\n"
");\n"
"----        \n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-13-uni-retry.adoc:114
#, no-wrap
msgid ""
"`atMost` indicates that at most `n` attempts will be done before failing.\n"
"If we still get a failure after that number of resubscription, the last failure is sent to the subscriber.\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-13-uni-retry.adoc:116
#, no-wrap
msgid "image:/assets/images/posts/mutiny-retry/retry-failed.png[]\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-13-uni-retry.adoc:118
#, no-wrap
msgid "You can also use `until` and decide to retry by looking at the received failure:\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-13-uni-retry.adoc:120
#: upstream/_posts/2020-10-13-uni-retry.adoc:139
#, no-wrap
msgid "[source, java]\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:123
#, fuzzy, no-wrap
msgid ""
"Uni<String> uni = invokePickyService(client)\n"
"    .onFailure().retry().until(failure -> ! (failure instanceof TooManyRequestsException));\n"
msgstr "Uni&lt;String&gt; uni = invokePickyService(client) .onFailure().retry().until(failure → ! (failure instanceof TooManyRequestsException));"

#. type: delimited block -
#: upstream/_posts/2020-10-13-uni-retry.adoc:126
#, no-wrap
msgid "## Bonus: Exponential backoff\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-13-uni-retry.adoc:131
#, no-wrap
msgid ""
"So far, our retries happen immediately.\n"
"It might not be very wise, and separating a bit our retries may give better results, especially when facing intermittent failures due to the load or other external causes.\n"
"Using exponential backoff provides a reasonable tradeoff.\n"
"Retrying with exponential backoff:\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-13-uni-retry.adoc:137
#, no-wrap
msgid ""
"* retries after an initial delay,\n"
"* on every failure, it doubles the previous delay, with an optional maximum,\n"
"* it can use a jitter to add a random duration to the delay,\n"
"* it can have a max delay if needed,\n"
"* it is still constrained by `atMost` \n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:143
#, fuzzy, no-wrap
msgid ""
"Uni<String> uni = invokePickyService(client)\n"
"    .onFailure().retry()\n"
"        .withBackOff(Duration.ofSeconds(1)).withJitter(0.2).atMost(10);\n"
msgstr "Uni&lt;String&gt; uni = invokePickyService(client) .onFailure().retry() .withBackOff(Duration.ofSeconds(1)).withJitter(0.2).atMost(10);"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:144
#, fuzzy, no-wrap
msgid "\n"
msgstr "\n"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:149
#, fuzzy
msgid "This last snippet configures the retry with exponential backoff.  The first retry happens after 1 second, and then it doubles every time without an upper limit.  Random jitter is applied to delays.  If, unfortunately, after ten attempts, it still fails, the failure is sent to the subscriber."
msgstr "Este último snippet configura o retry com backoff exponencial. A primeira tentativa ocorre após 1 segundo e, em seguida, duplica cada vez sem um limite superior. É aplicado um jitter aleatório aos atrasos. Se, infelizmente, após dez tentativas, continuar a falhar, a falha é enviada para o subscritor."

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:151
#, fuzzy
msgid "## Demo time!"
msgstr "Hora da demonstração!"

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:155
#, fuzzy
msgid "Ok, enough talking.  I’ve built a simple playground where you can adjust and try the various retry policies: https://gist.github.com/cescoffier/e9abce907a1c3d05d70bea3dae6dc3d5.  You can _jbang_ the script by downloading it and running `jbang Retry.java`, or just run:"
msgstr "Ok, chega de conversa. Construí um playground simples onde podes ajustar e experimentar as várias políticas de repetição:  https://gist.github.com/cescoffier/e9abce907a1c3d05d70bea3dae6dc3d5  Pode fazer o _jbang_ do script descarregando-o e executando `jbang Retry.java`, ou simplesmente executar:"

#. type: delimited block -
#: upstream/_posts/2020-10-13-uni-retry.adoc:159
#, no-wrap
msgid "jbang https://gist.github.com/cescoffier/e9abce907a1c3d05d70bea3dae6dc3d5\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:162
#, fuzzy
msgid "The called service fails 50% of the time (well, it uses a random, so statistically 50% of the time)."
msgstr "O serviço chamado falha 50% das vezes (bem, usa um aleatório, portanto estatisticamente 50% das vezes)."

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:169
#, fuzzy
msgid "That concludes this blog post.  Again, before using retry, please verify that your system can support it.  Retrying is resubscribing.  You can configure how long, how many times, and when retrying should be attempted.  There are many more options offered by Mutiny, like `when` or using deadlines (`expireIn` and `expireAt`) when using exponential backoff.  You can try all these with the provided playground."
msgstr "Isso conclui esta postagem do blog. Mais uma vez, antes de utilizar a repetição, verifique se o seu sistema a suporta. Tentar de novo é voltar a subscrever. É possível configurar por quanto tempo, quantas vezes e quando deve ser tentada uma nova tentativa. Existem muitas outras opções oferecidas pelo Mutiny, como `when` ou o uso de prazos ( `expireIn` e `expireAt`) ao usar o backoff exponencial. Você pode tentar todas elas com o playground fornecido."

#. type: Plain text
#: upstream/_posts/2020-10-13-uni-retry.adoc:170
#, fuzzy
msgid "Stay tuned! We have plenty of other gems to discuss here!"
msgstr "Fiquem atentos! Temos muitas outras jóias para discutir aqui!"
