# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:1
#, fuzzy, no-wrap
msgid "cescoffier"
msgstr "cescoffier"

#. type: YAML Front Matter: date
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:1
#, fuzzy, no-wrap
msgid "2020-12-01"
msgstr "2020-12-01"

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "posto"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:1
#, fuzzy, no-wrap
msgid "How to send and receive Cloud Events with Quarkus, Kafka and Reactive Messaging"
msgstr "Como enviar e receber eventos na nuvem com o Quarkus, o Kafka e o Reactive Messaging"

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:1
#, fuzzy, no-wrap
msgid "reactive kafka"
msgstr "kafka reativo"

#. type: YAML Front Matter: title
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:1
#, fuzzy, no-wrap
msgid "Sending and Receiving Cloud Events with Kafka"
msgstr "Enviar e receber eventos da nuvem com o Kafka"

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:13
#, fuzzy
msgid "https://cloudevents.io/[Cloud Events] is a specification for describing events.  It aims to ease interoperability.  With the rise of event-driven architecture, it's not surprising to see Cloud Events gaining popularity."
msgstr "link:https://cloudevents.io/[Cloud Events] é uma especificação para a descrição de eventos. O seu objetivo é facilitar a interoperabilidade. Com o aumento da arquitetura orientada para eventos, não é surpreendente ver os Cloud Events a ganhar popularidade."

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:15
#, fuzzy
msgid "This post explains how you can generate and consume Cloud Events using Quarkus, Kafka, and Reactive Messaging."
msgstr "Este post explica como gerar e consumir eventos na nuvem usando o Quarkus, o Kafka e o Reactive Messaging."

#. type: Title ==
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:16
#, fuzzy, no-wrap
msgid "What is Cloud Event?"
msgstr "O que é o Cloud Event?"

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:23
#, fuzzy
msgid "First, let's look at the why.  Events are everywhere.  Many modern systems are using events one way or another.  Events can be used to implement event sourcing, communicate facts, trigger out-of-band processing, or send notifications.  Events become an essential piece of any system."
msgstr "Primeiro, vejamos o porquê. Os eventos estão em todo o lado. Muitos sistemas modernos estão a utilizar eventos de uma forma ou de outra. Os eventos podem ser utilizados para implementar o fornecimento de eventos, comunicar factos, acionar o processamento fora de banda ou enviar notificações. Os eventos tornam-se uma peça essencial de qualquer sistema."

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:29
#, fuzzy
msgid "Yet event publishers tend to describe events differently.  I don't mean the content is different, but the envelope and the event's format are heterogeneous, even if these events transit on the same event mesh.  Some applications choose JSON and encode everything in the event's payload; some other systems prefer binary formats, such as Avro or Protobuf, and use the protocol capability, such as headers or properties, to transport metadata about the wrapped payload.  While event-driven architecture claims to ease the integration with external systems, this disparity is doing the opposite.  It's not rare to need a specific event translator with the only purpose to adapt events from one format to another."
msgstr "No entanto, os editores de eventos tendem a descrever os eventos de forma diferente. Não quero dizer que o conteúdo seja diferente, mas o envelope e o formato do evento são heterogéneos, mesmo que estes eventos transitem na mesma malha de eventos. Algumas aplicações escolhem JSON e codificam tudo na carga útil do evento; outros sistemas preferem formatos binários, como Avro ou Protobuf, e utilizam a capacidade do protocolo, como cabeçalhos ou propriedades, para transportar metadados sobre a carga útil envolvida. Embora a arquitetura orientada para os eventos pretenda facilitar a integração com sistemas externos, esta disparidade está a fazer o contrário. Não é raro precisar de um tradutor de eventos específico com o único objetivo de adaptar eventos de um formato para outro."

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:36
#, fuzzy
msgid "So, what's Cloud Event? Cloud Event proposes a common way to describe events.  The goal is, obviously, interoperability and easing the integration burden.  Cloud Event 1.0 was released almost a year ago.  Over the past year, many Cloud Providers adopted this format, such as Azure and Oracle.  Several middlewares have also added support for Cloud Events, such as Knative, Kogito, Debezium, and Quarkus."
msgstr "Então, o que é o Cloud Event? O Cloud Event propõe uma forma comum de descrever eventos. O objetivo é, obviamente, a interoperabilidade e o alívio da carga de integração. O Cloud Event 1.0 foi lançado há quase um ano. No último ano, muitos fornecedores de serviços em nuvem adoptaram este formato, como o Azure e a Oracle. Vários middlewares também adicionaram suporte aos Cloud Events, como Knative, Kogito, Debezium e Quarkus."

#. type: Title ==
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:37
#, fuzzy, no-wrap
msgid "Show me some examples!"
msgstr "Mostrem-me alguns exemplos!"

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:40
#, fuzzy
msgid "Ok, so, how does it look? The easiest way to understand Cloud Event is to look at one of them:"
msgstr "Então, qual é o seu aspeto? A forma mais fácil de compreender o Evento na Nuvem é olhar para um deles:"

#. type: delimited block -
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:54
#, no-wrap
msgid ""
"{\n"
"    \"specversion\" : \"1.0\",\n"
"    \"id\" : \"O234-345-890\",\n"
"    \"source\" : \"https://reactive-coffee-shop.io/1234/order\",\n"
"    \"type\" : \"me.escoffier.coffee.Order\",\n"
"    \"subject\" : \"order\",\n"
"    \"time\" : \"2020-11-25T09:05:00Z\",\n"
"    \"datacontenttype\" : \"application/json\",\n"
"    \"data\" : \"{\\\"name\\\": \\\"clement\\\", \\\"order\\\":\\\"espresso\\\"}\",\n"
"    \"custom-attribute\" : \"some custom value\"\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:58
#, fuzzy
msgid "This event is described in JSON, but that's just one of the possibilities.  Let's look at the fields."
msgstr "Este evento é descrito em JSON, mas essa é apenas uma das possibilidades. Vejamos os campos."

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:68
#, fuzzy
msgid "First, the `specversion` indicates which version of Cloud Event it is using (1.0).  The `id` field provides an id for that specific event.  The `source` attribute is a URI identifying the event source, i.e., the context in which an event happened or the application that emitted that specific event.  Combining the `id` and the `source` provides a unique identifier.  Such uniqueness is essential to implement idempotence and handle potential duplicates.  The `type` is the last mandatory attribute.  It indicates the _type_ of the event.  Here, I use the fully qualified class name, but you can imagine anything.  It should refer to the kind of event you have defined in your system."
msgstr "Em primeiro lugar, o `specversion` indica a versão do Cloud Event que está a ser utilizada (1.0). O campo `id` fornece uma identificação para esse evento específico. O atributo `source` é um URI que identifica a origem do evento, ou seja, o contexto em que um evento ocorreu ou o aplicativo que emitiu esse evento específico. A combinação dos atributos `id` e `source` permite obter um identificador único. Essa exclusividade é essencial para implementar a idempotência e tratar potenciais duplicados. O `type` é o último atributo obrigatório. Indica o _tipo_ do evento. Neste caso, utilizo o nome de classe totalmente qualificado, mas pode imaginar qualquer coisa. Deve referir-se ao tipo de evento que definiu no seu sistema."

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:75
#, fuzzy
msgid "The other attributes are optional.  `datacontenttype` defines the content-type of the `data` attribute.  `subject` allows passing extra details about the event, such as an additional hint about the context or the type of event.  `time` is a timestamp, generally indicating the creation time.  There is another optional attribute not used in my example.  The `dataschema` attribute lets you pass the schema of the event data."
msgstr "Os outros atributos são opcionais. `datacontenttype` define o tipo de conteúdo do atributo `data`. `subject` permite transmitir pormenores adicionais sobre o evento, como uma pista adicional sobre o contexto ou o tipo de evento. `time` é um carimbo de data/hora, geralmente indicando a hora de criação. Existe outro atributo opcional que não foi utilizado no meu exemplo. O atributo `dataschema` permite-lhe transmitir o esquema dos dados do evento."

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:78
#, fuzzy
msgid "The `data` attribute contains the wrapped business event.  It is an essential part, and the other attributes are just providing details about that specific business event."
msgstr "O atributo `data` contém o evento agrupado. Trata-se de uma parte essencial, e os outros atributos limitam-se a fornecer pormenores sobre esse evento específico."

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:81
#, fuzzy
msgid "You can also define _extensions_.  These extensions would be a set of custom attributes used when the proposed set of attributes is not enough for your use case."
msgstr "Também é possível definir _extensões_. Estas extensões seriam um conjunto de atributos personalizados utilizados quando o conjunto de atributos proposto não é suficiente para o seu caso de utilização."

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:84
#, fuzzy
msgid "That's it! So, we can summarize Cloud Events as _just enough metadata to understand an event_ - its source, an id, a type, and the business data."
msgstr "É isso mesmo! Assim, podemos resumir os Eventos na Nuvem como _metadados suficientes para compreender um evento_ - a sua origem, um ID, um tipo e os dados comerciais."

#. type: Title ==
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:85
#, fuzzy, no-wrap
msgid "Cloud Events on the wire - the bindings"
msgstr "Eventos em nuvem na rede - as ligações"

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:89
#, fuzzy
msgid "But, how would these events be encoded? The previous example using JSON is nice, but some protocols may want to leverage their own capabilities to transmit these metadata."
msgstr "Mas, como é que estes eventos seriam codificados? O exemplo anterior que utiliza JSON é bom, mas alguns protocolos podem querer tirar partido das suas próprias capacidades para transmitir estes metadados."

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:94
#, fuzzy
msgid "That's why Cloud Events also proposes bindings.  A binding is a set of recommendations specific to one protocol.  It explains how each protocol should encode Cloud Events.  For example, there is a binding for HTTP, one for Kafka, and another for AMQP."
msgstr "É por isso que os Cloud Events também propõem ligações. Uma ligação é um conjunto de recomendações específicas para um protocolo. Explica como cada protocolo deve codificar os Cloud Events. Por exemplo, existe uma associação para HTTP, uma para Kafka e outra para AMQP."

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:96
#, fuzzy
msgid "Most of these bindings propose two approaches:"
msgstr "A maioria destas ligações propõe duas abordagens:"

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:98
#, fuzzy
msgid "structured"
msgstr "estruturado"

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:99
#, fuzzy
msgid "binary"
msgstr "binário"

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:104
#, fuzzy
msgid "The structured approach keeps event metadata and data together in the payload of the message or request.  It generally uses JSON to encode that data.  If you pass the Cloud Event example (from above), in an HTTP request, it will use the structured mode.  It will also use the structured mode when you write that JSON snippet in a Kafka record's value."
msgstr "A abordagem estruturada mantém os metadados e os dados do evento juntos na carga útil da mensagem ou do pedido. Ela geralmente usa JSON para codificar esses dados. Se você passar o exemplo do Cloud Event (acima), em uma solicitação HTTP, ele usará o modo estruturado. Ele também usará o modo estruturado quando você escrever esse trecho de JSON no valor de um registro do Kafka."

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:107
#, fuzzy
msgid "The structured approach allows simple forwarding across multiple protocols.  However, it may not be efficient and may constraint the type of business data."
msgstr "A abordagem estruturada permite um simples encaminhamento através de múltiplos protocolos. No entanto, pode não ser eficiente e pode restringir o tipo de dados comerciais."

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:111
#, fuzzy
msgid "The other approach relies on protocol capabilities and enables efficient transfer and encoding.  If we use the binary mode with Kafka, we will store the `data` attribute value in the Kafka record's value and pass the other attributes using the record's headers.  Consequently, business data can be encoded using binary protocols such as Avro, leading to higher efficiency."
msgstr "A outra abordagem baseia-se nas capacidades do protocolo e permite uma transferência e codificação eficientes. Se utilizarmos o modo binário com o Kafka, armazenaremos o valor do atributo `data` no valor do registo Kafka e passaremos os outros atributos utilizando os cabeçalhos do registo. Consequentemente, os dados comerciais podem ser codificados utilizando protocolos binários como o Avro, o que conduz a uma maior eficiência."

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:113
#, fuzzy
msgid "The rest of the post explains how you can send and receive Cloud Events using Quarkus, Kafka, and Reactive Messaging."
msgstr "O restante do post explica como enviar e receber eventos da nuvem usando o Quarkus, o Kafka e o Reactive Messaging."

#. type: Title ==
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:114
#, fuzzy, no-wrap
msgid "Sending Cloud Events on Kafka"
msgstr "Envio de eventos da nuvem no Kafka"

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:118
#, fuzzy
msgid "The Kafka connector used by Quarkus has built-in support for Cloud Events.  It can send and consume Cloud Events using the structured mode (encoding everything in a JSON payload) or the binary mode (using Kafka headers)."
msgstr "O conetor Kafka utilizado pela Quarkus tem suporte incorporado para eventos Cloud. Pode enviar e consumir eventos Cloud utilizando o modo estruturado (codificando tudo num payload JSON) ou o modo binário (utilizando cabeçalhos Kafka)."

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:120
#, fuzzy
msgid "To write your outgoing messages as Cloud Event, you only need to specify the `cloud-events-type` and `cloud-events-source` attributes on your channel:"
msgstr "Para escrever as suas mensagens de saída como Cloud Event, só precisa de especificar os atributos `cloud-events-type` e `cloud-events-source` no seu canal:"

#. type: delimited block -
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:129
#, no-wrap
msgid ""
"mp.messaging.outgoing.generated-price.connector=smallrye-kafka\n"
"mp.messaging.outgoing.generated-price.topic=prices\n"
"mp.messaging.outgoing.generated-price.value.serializer=org.apache.kafka.common.serialization.IntegerSerializer\n"
"mp.messaging.outgoing.generated-price.cloud-events-source=price-generators\n"
"mp.messaging.outgoing.generated-price.cloud-events-type=price\n"
"mp.messaging.outgoing.generated-price.cloud-events-subject=generated-prices\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:134
#, fuzzy
msgid "By default, the connector writes Cloud Events using the binary mode.  The connector generates a random `id` for each message.  You can also customize the other Cloud Event attributes using `cloud-events-$attribute`, such as `cloud-events-subject`."
msgstr "Por padrão, o conetor grava eventos de nuvem usando o modo binário. O conetor gera um `id` aleatório para cada mensagem. Também é possível personalizar os outros atributos do evento de nuvem usando `cloud-events-$attribute`, como `cloud-events-subject`."

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:138
#, fuzzy
msgid "The configuration shown above is applied to all the outgoing messages.  Sometimes, you want to customize the value for each message individually.  To achieve this, you can also attach `io.smallrye.reactive.messaging.ce.OutgoingCloudEventMetadata` to your message to customize the id, source, type and subject for each message:"
msgstr "A configuração apresentada acima é aplicada a todas as mensagens de saída. Por vezes, é necessário personalizar o valor de cada mensagem individualmente. Para tal, também pode anexar `io.smallrye.reactive.messaging.ce.OutgoingCloudEventMetadata` à sua mensagem para personalizar o ID, a fonte, o tipo e o assunto de cada mensagem:"

#. type: delimited block -
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:149
#, no-wrap
msgid ""
"@Outgoing(\"cloud-events\")\n"
"public Message<String> toCloudEvents(Message<String> in) {\n"
"    return in.addMetadata(OutgoingCloudEventMetadata.builder()\n"
"      .withId(\"id-\" + in.getPayload())\n"
"      .withType(\"greetings\")\n"
"      .withSource(URI.create(\"http://example.com\"))\n"
"      .withSubject(\"greeting-message\") .build());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:155
#, fuzzy
msgid "The connector also supports the _structured_ mode.  You can write structured Cloud Events by setting the `cloud-events-mode` attribute to `structured`.  It only supports JSON at the moment.  The written record gets its `content-type` header set to `application/cloudevents+json; charset=UTF-8`, which allows the receiver to understand that it's a structured Cloud Event."
msgstr "O conetor também suporta o modo _estruturado_. Pode escrever Cloud Events estruturados definindo o atributo `cloud-events-mode` para `structured`. De momento, só suporta JSON. O registo escrito recebe o cabeçalho `content-type` definido como `application/cloudevents+json; charset=UTF-8`, o que permite ao recetor compreender que se trata de um evento estruturado na nuvem."

#. type: Title ==
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:156
#, fuzzy, no-wrap
msgid "Consuming Cloud Event from Kafka"
msgstr "Consumir eventos na nuvem a partir do Kafka"

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:161
#, fuzzy
msgid "Naturally, the connector can also consume Cloud Events.  The connector detects Cloud Events automatically by checking the record's headers.  It also determines the mode."
msgstr "Naturalmente, o conetor também pode consumir eventos na nuvem. O conetor detecta automaticamente os eventos Cloud verificando os cabeçalhos do registo. Ele também determina o modo."

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:164
#, fuzzy
msgid "When the connector receives a Cloud Event, it attaches an `IncomingKafkaCloudEventMetadata` to the message metadata.  So, you can retrieve the various attributes as well as the extensions:"
msgstr "Quando o conetor recebe um evento de nuvem, ele anexa um `IncomingKafkaCloudEventMetadata` aos metadados da mensagem. Assim, é possível recuperar os vários atributos, bem como as extensões:"

#. type: delimited block -
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:170
#, no-wrap
msgid ""
"public Message<Double> process(Message<Integer> priceInUsd) {\n"
"  IncomingCloudEventMetadata<Integer> cloudEventMetadata = priceInUsd.getMetadata(IncomingCloudEventMetadata.class)\n"
"    .orElseThrow(() -> new IllegalArgumentException(\"Expected a Cloud Event\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:176
#, no-wrap
msgid ""
"  LOGGER.infof(\"Received Cloud Events (spec-version: %s): source:  '%s', type: '%s', subject: '%s' \",\n"
"    cloudEventMetadata.getSpecVersion(),\n"
"    cloudEventMetadata.getSource(),\n"
"    cloudEventMetadata.getType(),\n"
"    cloudEventMetadata.getSubject().orElse(\"no subject\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:179
#, no-wrap
msgid ""
"  return priceInUsd.withPayload(Integer.valueOf(priceInUsd.getPayload()) * CONVERSION_RATE);\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:181
#, fuzzy, no-wrap
msgid "Summary"
msgstr "Resumo"

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:186
#, fuzzy
msgid "With the rise of event-driven architecture, Cloud Events are becoming highly popular.  Since Quarkus 1.9, the Kafka Connector used in Quarkus has built-in support for Cloud Events.  This post introduced Cloud Events and showed how you could write and read Cloud Events easily."
msgstr "Com o aumento da arquitetura orientada para eventos, os eventos na nuvem estão a tornar-se muito populares. Desde o Quarkus 1.9, o conetor Kafka usado no Quarkus tem suporte integrado para eventos na nuvem. Este post introduziu os Eventos na Nuvem e mostrou como é possível escrever e ler facilmente os Eventos na Nuvem."

#. type: Plain text
#: upstream/_posts/2020-12-01-kafka-cloud-events.adoc:188
#, fuzzy
msgid "Many more options are http://smallrye.io/smallrye-reactive-messaging/3.14.1/kafka/kafka/[available], and Kafka is not the only part of Quarkus with Cloud Events support.  For example, Funqy[https://quarkus.io/guides/funqy#context-injection] also supports Cloud Event out of the box."
msgstr "Muitas outras opções estão  link:http://smallrye.io/smallrye-reactive-messaging/3.14.1/kafka/kafka/[disponíveis], e o Kafka não é a única parte do Quarkus com suporte a eventos na nuvem. Por exemplo, Funqy https://quarkus.io/guides/funqy#context-injection  também suporta Cloud Event de imediato."
