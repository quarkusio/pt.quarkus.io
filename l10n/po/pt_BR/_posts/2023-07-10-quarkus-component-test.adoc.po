# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy, no-wrap
msgid "Explore a new way of testing CDI components in Quarkus"
msgstr "Explorar uma nova forma de testar componentes CDI no Quarkus"

#. type: YAML Front Matter: synopsis
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy, no-wrap
msgid "Quarkus 3.2 introduced an experimental feature to ease the testing of CDI components and mocking of their dependencies."
msgstr "O Quarkus 3.2 introduziu uma funcionalidade experimental para facilitar o teste de componentes CDI e a simulação das suas dependências."

#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid ""
"The Quarkus component model is built on top of CDI.\n"
"However, writing unit tests for beans without a running CDI container is often a tedious work.\n"
"Without the container services up and running, all the work has to be done manually.\n"
"First of all, no dependency injection is performed.\n"
"Furthermore, no events are fired and no observers are notified.\n"
"Also, interceptors are not applied.\n"
"In short, everything needs to be wired together by hand.\n"
"But Quarkus can do better, right?\n"
"Of course, it can!\n"
"Quarkus 3.2 introduced an experimental feature to ease the testing of CDI components and mocking of their dependencies.\n"
"It's a lightweight JUnit 5 extension that does not start a full Quarkus application but merely runs the services needed to make the testing a joyful experience."
msgstr "O modelo de componente do Quarkus é construído sobre o CDI. No entanto, escrever testes de unidade para beans sem um contêiner CDI em execução costuma ser um trabalho tedioso. Sem os serviços do contêiner em funcionamento, todo o trabalho tem de ser feito manualmente. Em primeiro lugar, nenhuma injeção de dependência é realizada. Além disso, nenhum evento é disparado e nenhum observador é notificado. Além disso, os interceptadores não são aplicados. Em resumo, tudo precisa ser conectado manualmente. Mas o Quarkus pode fazer melhor, certo? É claro que pode! O Quarkus 3.2 introduziu um recurso experimental para facilitar o teste de componentes CDI e a simulação de suas dependências. Trata-se de uma extensão JUnit 5 leve que não inicia um aplicativo Quarkus completo, mas apenas executa os serviços necessários para tornar o teste uma experiência agradável."

#. type: Title ==
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy, no-wrap
msgid "A simple example"
msgstr "Um exemplo simples"

#. type: Plain text
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid "First of all, add the `quarkus-junit5-component` module dependency to your project."
msgstr "Em primeiro lugar, adicione a dependência do módulo `quarkus-junit5-component` ao seu projeto."

#. type: Block title
#: _posts/2023-07-10-quarkus-component-test.adoc
#, no-wrap
msgid "Maven"
msgstr "Maven"

#. type: Block title
#: _posts/2023-07-10-quarkus-component-test.adoc
#, no-wrap
msgid "Gradle"
msgstr "Gradle"

#. type: delimited block *
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid "Now, imagine that we have a component `Foo` which is an `@ApplicationScoped` CDI bean."
msgstr "Agora, imagine que temos um componente `Foo` que é um bean CDI `@ApplicationScoped`."

#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid "`Foo` depends on `Charlie` which declares a method `ping()`."
msgstr "`Foo` depende de `Charlie` que declara um método `ping()` ."

#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid "`Foo` depends on the config property `bar`."
msgstr "`Foo` depende da propriedade de configuração `bar` ."

#. type: Plain text
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid "The goal is to test this method which makes use of the `Charlie` dependency and the `bar` config property."
msgstr "O objetivo é testar este método que utiliza a dependência `Charlie` e a propriedade de configuração `bar`."

#. type: Plain text
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid "Then, a simple component test looks like this:"
msgstr "Um teste de componente simples tem o seguinte aspeto:"

#. type: Plain text
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid "`@QuarkusComponentTest` registers the `QuarkusComponentTestExtension` that does all the heavy lifting under the hood."
msgstr "`@QuarkusComponentTest` regista o `QuarkusComponentTestExtension` que faz todo o trabalho pesado debaixo do capô."

#. type: Plain text
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid "`@TestConfigProperty` is used to set the value of a configuration property for the test."
msgstr "`@TestConfigProperty` é utilizado para definir o valor de uma propriedade de configuração para o teste."

#. type: Plain text
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid "The test injects the tested component. The types of all fields annotated with `@Inject` are considered the component types under test."
msgstr "O teste injecta o componente testado. Os tipos de todos os campos anotados com `@Inject` são considerados os tipos de componentes em teste."

#. type: Plain text
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid "The test also injects a mock of `Charlie`, a dependency for which a `@Singleton` bean is registered automatically. The injected reference is an \"unconfigured\" Mockito mock."
msgstr "O teste também injeta uma simulação de `Charlie`, uma dependência para a qual um bean `@Singleton` é registado automaticamente. A referência injectada é uma simulação \"não configurada\" do Mockito."

#. type: Plain text
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid "The Mockito API is used to configure the behavior of the injected mock."
msgstr "A API Mockito é utilizada para configurar o comportamento da simulação injectada."

#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid ""
"In this particular test, the only \"real\" component under the test is `org.acme.Foo`.\n"
"The `Charlie` dependency is a mock that is created automatically.\n"
"And the value of the `bar` configuration property is set with the `@TestConfigProperty` annotation."
msgstr "Nesse teste específico, o único componente \"real\" sob teste é o `org.acme.Foo` . A dependência `Charlie` é uma simulação que é criada automaticamente. E o valor da propriedade de configuração `bar` é definido com a anotação `@TestConfigProperty` ."

#. type: Title ==
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy, no-wrap
msgid "How does it work?"
msgstr "Como é que funciona?"

#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid ""
"The `QuarkusComponentTestExtension` does several things during the `before all` test phase.\n"
"It starts ArC - the CDI container in Quarkus.\n"
"It also registers a dedicated configuration object.\n"
"The container is then stopped and the config is released during the `after all` test phase.\n"
"The fields annotated with `@Inject` and `@InjectMock` are injected after a test instance is created.\n"
"Finally, the CDI request context is activated and terminated per each test method."
msgstr "O site `QuarkusComponentTestExtension` faz várias coisas durante a fase de teste do `before all` . Inicia o ArC, o contêiner de CDI no Quarkus. Ele também registra um objeto de configuração dedicado. O contêiner é então interrompido e a configuração é liberada durante a fase de teste `after all` . Os campos anotados com `@Inject` e `@InjectMock` são injetados depois que uma instância de teste é criada. Por fim, o contexto de solicitação de CDI é ativado e encerrado por cada método de teste."

#. type: Title ===
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy, no-wrap
msgid "Tested components"
msgstr "Componentes testados"

#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid ""
"By default, the types of all fields annotated with `@Inject` are considered component types.\n"
"However, you can also specify additional test components: either with the `@QuarkusComponentTest#value()` or programmatically as the arguments of the <<advanced_features,`QuarkusComponentTestExtension(Class<?>...)`>> constructor.\n"
"Finally, the static nested classes declared on the test class are components too."
msgstr "Por padrão, os tipos de todos os campos anotados com `@Inject` são considerados tipos de componentes. No entanto, o senhor também pode especificar componentes de teste adicionais: com o `@QuarkusComponentTest#value()` ou programaticamente como argumentos do xref:advanced_features[QuarkusComponentTestExtension(Class<?>…)] construtor. Por fim, as classes aninhadas estáticas declaradas na classe de teste também são componentes."

#. type: Plain text
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid "Static nested classed declared on a test class that is annotated with `@QuarkusComponentTest` are excluded from bean discovery when running a regular `@QuarkusTest` in order to prevent unintentional CDI conflicts."
msgstr "As classes aninhadas estáticas declaradas numa classe de teste anotada com `@QuarkusComponentTest` são excluídas da descoberta de feijões quando se executa um `@QuarkusTest` normal, para evitar conflitos CDI não intencionais."

#. type: Title ===
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy, no-wrap
msgid "Automatic mocking of unsatisfied dependencies"
msgstr "Simulação automática de dependências não satisfeitas"

#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid ""
"Unlike in regular CDI environments, the test does not fail if a component injects an unsatisfied dependency.\n"
"Instead, a mock bean is registered automatically for each combination of required type and qualifiers of an injection point that resolves to an unsatisfied dependency.\n"
"The mock bean has the `@Singleton` scope so it’s shared across all injection points with the same required type and qualifiers.\n"
"And the injected reference is an unconfigured Mockito mock.\n"
"This mock can be injected in the test with `@io.quarkus.test.InjectMock` and configured with the Mockito API."
msgstr "Diferentemente dos ambientes CDI comuns, o teste não falha se um componente injetar uma dependência insatisfeita. Em vez disso, um bean simulado é registrado automaticamente para cada combinação de tipo exigido e qualificadores de um ponto de injeção que resolve para uma dependência insatisfeita. O bean simulado tem o escopo `@Singleton` , portanto, é compartilhado em todos os pontos de injeção com o mesmo tipo exigido e os mesmos qualificadores. E a referência injetada é um mock do Mockito não configurado. Esse mock pode ser injetado no teste com `@io.quarkus.test.InjectMock` e configurado com a API do Mockito."

#. type: Title ===
#: _posts/2023-07-10-quarkus-component-test.adoc
#, no-wrap
msgid "Configuration"
msgstr "Configuração"

#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid ""
"A dedicated `SmallRyeConfig` is registered during the `before all` test phase.\n"
"It’s possible to set the configuration properties with the `@TestConfigProperty` annotation or programmatically with the `QuarkusComponentTestExtension#configProperty(String, String)` method.\n"
"If you need to use the default values for missing config properties, then `@QuarkusComponentTest#useDefaultConfigProperties()` and `QuarkusComponentTestExtension#useDefaultConfigProperties()` might come in useful."
msgstr "Um `SmallRyeConfig` dedicado é registrado durante a fase de teste do `before all` . É possível definir as propriedades de configuração com a anotação `@TestConfigProperty` ou programaticamente com o método `QuarkusComponentTestExtension#configProperty(String, String)` . Se o senhor precisar usar os valores padrão para as propriedades de configuração ausentes, então `@QuarkusComponentTest#useDefaultConfigProperties()` e `QuarkusComponentTestExtension#useDefaultConfigProperties()` podem ser úteis."

#. type: Title ==
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy, no-wrap
msgid "Advanced features"
msgstr "Funcionalidades avançadas"

#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid ""
"It is possible to configure the `QuarkusComponentTestExtension` programatically.\n"
"The simple example above could be rewritten like:"
msgstr "É possível configurar o site `QuarkusComponentTestExtension` programaticamente. O exemplo simples acima poderia ser reescrito da seguinte forma:"

#. type: Plain text
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid "Annotate a `static` field of type `QuarkusComponentTestExtension` with the `@RegisterExtension` annotation and configure the extension programmatically."
msgstr "Anotar um campo `static` do tipo `QuarkusComponentTestExtension` com a anotação `@RegisterExtension` e configurar a extensão programaticamente."

#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid ""
"Sometimes you need full control over the bean attributes and maybe even configure the default behavior of a mocked dependency.\n"
"In this case, the mock configurator API and the `QuarkusComponentTestExtension#mock()` method is the right choice."
msgstr "Às vezes, é necessário ter controle total sobre os atributos do bean e talvez até mesmo configurar o comportamento padrão de uma dependência simulada. Nesse caso, a API do configurador de simulação e o método `QuarkusComponentTestExtension#mock()` são a escolha certa."

#. type: Plain text
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid "The scope of the mocked bean is `@Dependent`."
msgstr "O âmbito do bean simulado é `@Dependent`."

#. type: Plain text
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid "Configure the default behavior of the mock."
msgstr "Configurar o comportamento predefinido do mock."

#. type: Title ===
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy, no-wrap
msgid "Mocking CDI interceptors"
msgstr "Interceptores CDI de simulação"

#. type: Plain text
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid "This feature is only available in Quarkus 3.3+."
msgstr "Esta funcionalidade só está disponível no Quarkus 3.3+."

#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid ""
"If a tested component class declares an interceptor binding then you might need to mock the interception too.\n"
"You can define a mock interceptor class as a static nested class of the test class.\n"
"This interceptor class is then automatically discovered"
msgstr "Se uma classe de componente testada declarar uma ligação de interceptador, talvez o senhor precise simular a interceptação também. O senhor pode definir uma classe de interceptador simulado como uma classe aninhada estática da classe de teste. Essa classe de interceptador é então descoberta automaticamente"

#. type: Plain text
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid "`@SimpleBinding` is an interceptor binding."
msgstr "`@SimpleBinding` é uma ligação intercetora."

#. type: Plain text
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid "The interceptor class is automatically considered a tested component and therefore used during the test execution."
msgstr "A classe intercetora é automaticamente considerada um componente testado e, por conseguinte, utilizada durante a execução do teste."

#. type: Title ==
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy, no-wrap
msgid "Summary"
msgstr "Resumo"

#. type: Plain text
#: _posts/2023-07-10-quarkus-component-test.adoc
#, fuzzy
msgid "In this article, we discussed the possibilities of a new way of testing CDI components in a Quarkus application."
msgstr "Neste artigo, discutimos as possibilidades de uma nova forma de testar componentes CDI numa aplicação Quarkus."
