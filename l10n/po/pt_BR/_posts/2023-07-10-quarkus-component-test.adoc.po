# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:1
#, fuzzy, no-wrap
msgid "mkouba"
msgstr "mkouba"

#. type: YAML Front Matter: date
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:1
#, fuzzy, no-wrap
msgid "2023-07-10"
msgstr "2023-07-10"

#. type: YAML Front Matter: layout
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "posto"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:1
#, fuzzy, no-wrap
msgid "Quarkus 3.2 introduced an experimental feature to ease the testing of CDI components and mocking of their dependencies."
msgstr "O Quarkus 3.2 introduziu uma funcionalidade experimental para facilitar o teste de componentes CDI e a simulação das suas dependências."

#. type: YAML Front Matter: tags
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:1
#, fuzzy, no-wrap
msgid "testing"
msgstr "teste"

#. type: YAML Front Matter: title
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:1
#, fuzzy, no-wrap
msgid "Explore a new way of testing CDI components in Quarkus"
msgstr "Explorar uma nova forma de testar componentes CDI no Quarkus"

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:21
#, fuzzy
msgid "The Quarkus component model is built on top of CDI.  However, writing unit tests for beans without a running CDI container is often a tedious work.  Without the container services up and running, all the work has to be done manually.  First of all, no dependency injection is performed.  Furthermore, no events are fired and no observers are notified.  Also, interceptors are not applied.  In short, everything needs to be wired together by hand.  But Quarkus can do better, right? Of course, it can! Quarkus 3.2 introduced an experimental feature to ease the testing of CDI components and mocking of their dependencies.  It's a lightweight JUnit 5 extension that does not start a full Quarkus application but merely runs the services needed to make the testing a joyful experience."
msgstr "O modelo de componente Quarkus é construído sobre o CDI. No entanto, escrever testes unitários para beans sem um contentor CDI em execução é muitas vezes um trabalho tedioso. Sem os serviços do contentor em funcionamento, todo o trabalho tem de ser feito manualmente. Em primeiro lugar, não é efectuada qualquer injeção de dependência. Além disso, nenhum evento é disparado e nenhum observador é notificado. Além disso, os interceptores não são aplicados. Em suma, tudo tem de ser ligado à mão. Mas o Quarkus pode fazer melhor, certo? Claro que pode! O Quarkus 3.2 introduziu um recurso experimental para facilitar o teste de componentes CDI e a simulação de suas dependências. Trata-se de uma extensão leve do JUnit 5 que não inicia uma aplicação Quarkus completa, mas apenas executa os serviços necessários para tornar o teste uma experiência agradável."

#. type: Title ==
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:22
#, fuzzy, no-wrap
msgid "A simple example"
msgstr "Um exemplo simples"

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:25
#, fuzzy
msgid "First of all, add the `quarkus-junit5-component` module dependency to your project."
msgstr "Em primeiro lugar, adicione a dependência do módulo `quarkus-junit5-component` ao seu projeto."

#. type: Block title
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:27
#, fuzzy, no-wrap
msgid "Maven"
msgstr "Maven"

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:36
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5-component</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:39
#, fuzzy, no-wrap
msgid "Gradle"
msgstr "Gradle"

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:46
#, no-wrap
msgid ""
"dependencies {\n"
"    testImplementation(\"io.quarkus:quarkus-junit5-component\")\n"
"}\n"
msgstr ""

#. type: delimited block *
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:50
#, fuzzy
msgid "Now, imagine that we have a component `Foo` which is an `@ApplicationScoped` CDI bean."
msgstr "Agora, imagine que temos um componente `Foo` que é um bean CDI `@ApplicationScoped`."

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:54
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:57
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:60
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class Foo {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:63
#, no-wrap
msgid ""
"    @Inject\n"
"    Charlie charlie; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:66
#, no-wrap
msgid ""
"    @ConfigProperty(name = \"bar\") <2>\n"
"    boolean bar; \n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:71
#, no-wrap
msgid ""
"    public String ping() { <3>\n"
"        return bar ? charlie.ping() : \"nok\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:74
#, fuzzy
msgid "<1>\t`Foo` depends on `Charlie` which declares a method `ping()`.  <2>\t`Foo` depends on the config property `bar`."
msgstr "<li> <p> `Foo` depende de `Charlie` que declara um método `ping()`. &lt;2&gt; `Foo` depende da propriedade de configuração `bar`.</p> </li>"

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:75
#, fuzzy
msgid "The goal is to test this method which makes use of the `Charlie` dependency and the `bar` config property."
msgstr "O objetivo é testar este método que utiliza a dependência `Charlie` e a propriedade de configuração `bar`."

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:77
#, fuzzy
msgid "Then, a simple component test looks like this:"
msgstr "Um teste de componente simples tem o seguinte aspeto:"

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:81
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:156
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:190
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:232
#, no-wrap
msgid "import static org.junit.jupiter.api.Assertions.assertEquals;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:88
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import io.quarkus.test.InjectMock;\n"
"import io.quarkus.test.component.TestConfigProperty;\n"
"import io.quarkus.test.component.QuarkusComponentTest;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.mockito.Mockito;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:92
#, no-wrap
msgid ""
"@QuarkusComponentTest <1>\n"
"@TestConfigProperty(key = \"bar\", value = \"true\") <2>\n"
"public class FooTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:95
#, no-wrap
msgid ""
"    @Inject\n"
"    Foo foo; <3>\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:98
#, no-wrap
msgid ""
"    @InjectMock\n"
"    Charlie charlieMock; <4>\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:105
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPing() {\n"
"        Mockito.when(charlieMock.ping()).thenReturn(\"OK\"); <5>\n"
"        assertEquals(\"OK\", foo.ping());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:107
#, fuzzy
msgid "`@QuarkusComponentTest` registers the `QuarkusComponentTestExtension` that does all the heavy lifting under the hood."
msgstr "`@QuarkusComponentTest` regista o `QuarkusComponentTestExtension` que faz todo o trabalho pesado debaixo do capô."

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:108
#, fuzzy
msgid "`@TestConfigProperty` is used to set the value of a configuration property for the test."
msgstr "`@TestConfigProperty` é utilizado para definir o valor de uma propriedade de configuração para o teste."

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:109
#, fuzzy
msgid "The test injects the tested component. The types of all fields annotated with `@Inject` are considered the component types under test."
msgstr "O teste injecta o componente testado. Os tipos de todos os campos anotados com `@Inject` são considerados os tipos de componentes em teste."

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:110
#, fuzzy
msgid "The test also injects a mock of `Charlie`, a dependency for which a `@Singleton` bean is registered automatically. The injected reference is an \"unconfigured\" Mockito mock."
msgstr "O teste também injeta uma simulação de `Charlie`, uma dependência para a qual um bean `@Singleton` é registado automaticamente. A referência injectada é uma simulação \"não configurada\" do Mockito."

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:111
#, fuzzy
msgid "The Mockito API is used to configure the behavior of the injected mock."
msgstr "A API Mockito é utilizada para configurar o comportamento da simulação injectada."

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:115
#, fuzzy
msgid "In this particular test, the only \"real\" component under the test is `org.acme.Foo`.  The `Charlie` dependency is a mock that is created automatically.  And the value of the `bar` configuration property is set with the `@TestConfigProperty` annotation."
msgstr "Neste teste em particular, o único componente \"real\" sob o teste é `org.acme.Foo`. A dependência `Charlie` é uma simulação que é criada automaticamente. E o valor da propriedade de configuração `bar` é definido com a anotação `@TestConfigProperty`."

#. type: Title ==
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:116
#, fuzzy, no-wrap
msgid "How does it work?"
msgstr "Como é que funciona?"

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:124
#, fuzzy
msgid "The `QuarkusComponentTestExtension` does several things during the `before all` test phase.  It starts ArC - the CDI container in Quarkus.  It also registers a dedicated configuration object.  The container is then stopped and the config is released during the `after all` test phase.  The fields annotated with `@Inject` and `@InjectMock` are injected after a test instance is created.  Finally, the CDI request context is activated and terminated per each test method."
msgstr "O `QuarkusComponentTestExtension` faz várias coisas durante a fase de teste do `before all`. Inicia o ArC - o contentor CDI no Quarkus. Também regista um objeto de configuração dedicado. O contentor é então parado e a configuração é libertada durante a fase de teste `after all`. Os campos anotados com `@Inject` e `@InjectMock` são injectados após a criação de uma instância de teste. Finalmente, o contexto de pedido CDI é ativado e terminado por cada método de teste."

#. type: Title ===
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:125
#, fuzzy, no-wrap
msgid "Tested components"
msgstr "Componentes testados"

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:130
#, fuzzy
msgid "By default, the types of all fields annotated with `@Inject` are considered component types.  However, you can also specify additional test components: either with the `@QuarkusComponentTest#value()` or programmatically as the arguments of the <<advanced_features,`QuarkusComponentTestExtension(Class<?>...)`>> constructor.  Finally, the static nested classes declared on the test class are components too."
msgstr "Por defeito, os tipos de todos os campos anotados com `@Inject` são considerados tipos de componentes. No entanto, também pode especificar componentes de teste adicionais: com o `@QuarkusComponentTest#value()` ou programaticamente como os argumentos do  link:#advanced_features[`QuarkusComponentTestExtension(Class&amp;lt;?&amp;gt;…)`] construtor. Finalmente, as classes aninhadas estáticas declaradas na classe de teste também são componentes."

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:132
#, fuzzy
msgid "Static nested classed declared on a test class that is annotated with `@QuarkusComponentTest` are excluded from bean discovery when running a regular `@QuarkusTest` in order to prevent unintentional CDI conflicts."
msgstr "As classes aninhadas estáticas declaradas numa classe de teste anotada com `@QuarkusComponentTest` são excluídas da descoberta de feijões quando se executa um `@QuarkusTest` normal, para evitar conflitos CDI não intencionais."

#. type: Title ===
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:133
#, fuzzy, no-wrap
msgid "Automatic mocking of unsatisfied dependencies"
msgstr "Simulação automática de dependências não satisfeitas"

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:140
#, fuzzy
msgid "Unlike in regular CDI environments, the test does not fail if a component injects an unsatisfied dependency.  Instead, a mock bean is registered automatically for each combination of required type and qualifiers of an injection point that resolves to an unsatisfied dependency.  The mock bean has the `@Singleton` scope so it’s shared across all injection points with the same required type and qualifiers.  And the injected reference is an unconfigured Mockito mock.  This mock can be injected in the test with `@io.quarkus.test.InjectMock` and configured with the Mockito API."
msgstr "Ao contrário do que acontece em ambientes CDI normais, o teste não falha se um componente injetar uma dependência insatisfeita. Em vez disso, um bean simulado é registado automaticamente para cada combinação de tipo requerido e qualificadores de um ponto de injeção que resolve para uma dependência insatisfeita. O feijão simulado tem o âmbito `@Singleton`, pelo que é partilhado por todos os pontos de injeção com o mesmo tipo e qualificadores necessários. E a referência injectada é uma simulação do Mockito não configurada. Esse mock pode ser injetado no teste com `@io.quarkus.test.InjectMock` e configurado com a API do Mockito."

#. type: Title ===
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:141
#, fuzzy, no-wrap
msgid "Configuration"
msgstr "Configuração"

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:146
#, fuzzy
msgid "A dedicated `SmallRyeConfig` is registered during the `before all` test phase.  It’s possible to set the configuration properties with the `@TestConfigProperty` annotation or programmatically with the `QuarkusComponentTestExtension#configProperty(String, String)` method.  If you need to use the default values for missing config properties, then `@QuarkusComponentTest#useDefaultConfigProperties()` and `QuarkusComponentTestExtension#useDefaultConfigProperties()` might come in useful."
msgstr "Um `SmallRyeConfig` dedicado é registado durante a fase de teste `before all`. É possível definir as propriedades de configuração com a anotação `@TestConfigProperty` ou programaticamente com o método `QuarkusComponentTestExtension#configProperty(String, String)`. Se precisar de utilizar os valores predefinidos para as propriedades de configuração em falta, então `@QuarkusComponentTest#useDefaultConfigProperties()` e `QuarkusComponentTestExtension#useDefaultConfigProperties()` podem ser úteis."

#. type: Title ==
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:148
#, fuzzy, no-wrap
msgid "Advanced features"
msgstr "Funcionalidades avançadas"

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:152
#, fuzzy
msgid "It is possible to configure the `QuarkusComponentTestExtension` programatically.  The simple example above could be rewritten like:"
msgstr "É possível configurar o `QuarkusComponentTestExtension` programaticamente. O exemplo simples acima poderia ser reescrito como:"

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:162
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import io.quarkus.test.InjectMock;\n"
"import io.quarkus.test.component.QuarkusComponentTestExtension;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.mockito.Mockito;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:164
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:199
#, no-wrap
msgid "public class FooTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:168
#, no-wrap
msgid ""
"    @RegisterExtension <1>\n"
"    static final QuarkusComponentTestExtension extension = new QuarkusComponentTestExtension()\n"
"            .configProperty(\"bar\",\"true\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:171
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:211
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:242
#, no-wrap
msgid ""
"    @Inject\n"
"    Foo foo;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:174
#, no-wrap
msgid ""
"    @InjectMock\n"
"    Charlie charlieMock;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:181
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPing() {\n"
"        Mockito.when(charlieMock.ping()).thenReturn(\"OK\");\n"
"        assertEquals(\"OK\", foo.ping());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:183
#, fuzzy
msgid "Annotate a `static` field of type `QuarkusComponentTestExtension` with the `@RegisterExtension` annotation and configure the extension programmatically."
msgstr "Anotar um campo `static` do tipo `QuarkusComponentTestExtension` com a anotação `@RegisterExtension` e configurar a extensão programaticamente."

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:186
#, fuzzy
msgid "Sometimes you need full control over the bean attributes and maybe even configure the default behavior of a mocked dependency.  In this case, the mock configurator API and the `QuarkusComponentTestExtension#mock()` method is the right choice."
msgstr "Por vezes, é necessário ter controlo total sobre os atributos do bean e talvez até configurar o comportamento predefinido de uma dependência simulada. Nesse caso, a API configuradora simulada e o método `QuarkusComponentTestExtension#mock()` são a escolha certa."

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:197
#, no-wrap
msgid ""
"import jakarta.enterprise.context.Dependent;\n"
"import jakarta.inject.Inject;\n"
"import io.quarkus.test.InjectMock;\n"
"import io.quarkus.test.component.QuarkusComponentTestExtension;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.mockito.Mockito;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:208
#, no-wrap
msgid ""
"    @RegisterExtension \n"
"    static final QuarkusComponentTestExtension extension = new QuarkusComponentTestExtension()\n"
"            .configProperty(\"bar\",\"true\")\n"
"            .mock(Charlie.class)\n"
"                .scope(Dependent.class) <1>\n"
"                .createMockitoMock(mock -> {\n"
"                    Mockito.when(mock.pong()).thenReturn(\"BAR\"); <2>\n"
"                });\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:217
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPing() {\n"
"        assertEquals(\"BAR\", foo.ping());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:219
#, fuzzy
msgid "The scope of the mocked bean is `@Dependent`."
msgstr "O âmbito do bean simulado é `@Dependent`."

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:220
#, fuzzy
msgid "Configure the default behavior of the mock."
msgstr "Configurar o comportamento predefinido do mock."

#. type: Title ===
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:221
#, fuzzy, no-wrap
msgid "Mocking CDI interceptors"
msgstr "Interceptores CDI de simulação"

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:224
#, fuzzy
msgid "This feature is only available in Quarkus 3.3+."
msgstr "Esta funcionalidade só está disponível no Quarkus 3.3+."

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:228
#, fuzzy
msgid "If a tested component class declares an interceptor binding then you might need to mock the interception too.  You can define a mock interceptor class as a static nested class of the test class.  This interceptor class is then automatically discovered"
msgstr "Se uma classe de componente testada declarar uma ligação de intercetor, pode ser necessário simular a interceção também. Pode definir uma classe de intercetor simulada como uma classe aninhada estática da classe de teste. Esta classe intercetora é então descoberta automaticamente"

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:236
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import io.quarkus.test.component.QuarkusComponentTest;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:239
#, no-wrap
msgid ""
"@QuarkusComponentTest\n"
"public class FooTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:247
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPing() {\n"
"        assertEquals(\"OK\", foo.ping());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:250
#, no-wrap
msgid ""
"    @ApplicationScoped\n"
"    static class Foo {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:255
#, no-wrap
msgid ""
"       @SimpleBinding <1>\n"
"       String ping() {\n"
"         return \"ok\";\n"
"       }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:257
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:261
#, no-wrap
msgid ""
"    @SimpleBinding\n"
"    @Interceptor\n"
"    static class SimpleMockInterceptor {  <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:266
#, no-wrap
msgid ""
"        @AroundInvoke\n"
"        Object aroundInvoke(InvocationContext context) throws Exception {\n"
"            return context.proceed().toString().toUpperCase();\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:269
#, no-wrap
msgid ""
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:271
#, fuzzy
msgid "`@SimpleBinding` is an interceptor binding."
msgstr "`@SimpleBinding` é uma ligação intercetora."

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:272
#, fuzzy
msgid "The interceptor class is automatically considered a tested component and therefore used during the test execution."
msgstr "A classe intercetora é automaticamente considerada um componente testado e, por conseguinte, utilizada durante a execução do teste."

#. type: Title ==
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:273
#, fuzzy, no-wrap
msgid "Summary"
msgstr "Resumo"

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:275
#, fuzzy
msgid "In this article, we discussed the possibilities of a new way of testing CDI components in a Quarkus application."
msgstr "Neste artigo, discutimos as possibilidades de uma nova forma de testar componentes CDI numa aplicação Quarkus."
