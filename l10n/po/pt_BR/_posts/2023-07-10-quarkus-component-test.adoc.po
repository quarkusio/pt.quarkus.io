# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:1
#, no-wrap
msgid "mkouba"
msgstr ""

#. type: YAML Front Matter: date
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:1
#, no-wrap
msgid "2023-07-10"
msgstr ""

#. type: YAML Front Matter: layout
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:1
#, no-wrap
msgid "post"
msgstr ""

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:1
#, no-wrap
msgid "Quarkus 3.2 introduced an experimental feature to ease the testing of CDI components and mocking of their dependencies."
msgstr ""

#. type: YAML Front Matter: tags
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:1
#, no-wrap
msgid "testing"
msgstr ""

#. type: YAML Front Matter: title
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:1
#, no-wrap
msgid "Explore a new way of testing CDI components in Quarkus"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:21
msgid "The Quarkus component model is built on top of CDI.  However, writing unit tests for beans without a running CDI container is often a tedious work.  Without the container services up and running, all the work has to be done manually.  First of all, no dependency injection is performed.  Furthermore, no events are fired and no observers are notified.  Also, interceptors are not applied.  In short, everything needs to be wired together by hand.  But Quarkus can do better, right? Of course, it can! Quarkus 3.2 introduced an experimental feature to ease the testing of CDI components and mocking of their dependencies.  It's a lightweight JUnit 5 extension that does not start a full Quarkus application but merely runs the services needed to make the testing a joyful experience."
msgstr ""

#. type: Title ==
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:22
#, no-wrap
msgid "A simple example"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:25
msgid "First of all, add the `quarkus-junit5-component` module dependency to your project."
msgstr ""

#. type: Block title
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:27
#, no-wrap
msgid "Maven"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:36
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5-component</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:39
#, no-wrap
msgid "Gradle"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:46
#, no-wrap
msgid ""
"dependencies {\n"
"    testImplementation(\"io.quarkus:quarkus-junit5-component\")\n"
"}\n"
msgstr ""

#. type: delimited block *
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:50
msgid "Now, imagine that we have a component `Foo` which is an `@ApplicationScoped` CDI bean."
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:54
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:57
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:60
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class Foo {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:63
#, no-wrap
msgid ""
"    @Inject\n"
"    Charlie charlie; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:66
#, no-wrap
msgid ""
"    @ConfigProperty(name = \"bar\") <2>\n"
"    boolean bar; \n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:71
#, no-wrap
msgid ""
"    public String ping() { <3>\n"
"        return bar ? charlie.ping() : \"nok\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:74
msgid "<1>\t`Foo` depends on `Charlie` which declares a method `ping()`.  <2>\t`Foo` depends on the config property `bar`."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:75
msgid "The goal is to test this method which makes use of the `Charlie` dependency and the `bar` config property."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:77
msgid "Then, a simple component test looks like this:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:81
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:156
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:190
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:232
#, no-wrap
msgid "import static org.junit.jupiter.api.Assertions.assertEquals;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:88
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import io.quarkus.test.InjectMock;\n"
"import io.quarkus.test.component.TestConfigProperty;\n"
"import io.quarkus.test.component.QuarkusComponentTest;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.mockito.Mockito;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:92
#, no-wrap
msgid ""
"@QuarkusComponentTest <1>\n"
"@TestConfigProperty(key = \"bar\", value = \"true\") <2>\n"
"public class FooTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:95
#, no-wrap
msgid ""
"    @Inject\n"
"    Foo foo; <3>\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:98
#, no-wrap
msgid ""
"    @InjectMock\n"
"    Charlie charlieMock; <4>\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:105
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPing() {\n"
"        Mockito.when(charlieMock.ping()).thenReturn(\"OK\"); <5>\n"
"        assertEquals(\"OK\", foo.ping());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:107
msgid "`@QuarkusComponentTest` registers the `QuarkusComponentTestExtension` that does all the heavy lifting under the hood."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:108
msgid "`@TestConfigProperty` is used to set the value of a configuration property for the test."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:109
msgid "The test injects the tested component. The types of all fields annotated with `@Inject` are considered the component types under test."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:110
msgid "The test also injects a mock of `Charlie`, a dependency for which a `@Singleton` bean is registered automatically. The injected reference is an \"unconfigured\" Mockito mock."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:111
msgid "The Mockito API is used to configure the behavior of the injected mock."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:115
msgid "In this particular test, the only \"real\" component under the test is `org.acme.Foo`.  The `Charlie` dependency is a mock that is created automatically.  And the value of the `bar` configuration property is set with the `@TestConfigProperty` annotation."
msgstr ""

#. type: Title ==
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:116
#, no-wrap
msgid "How does it work?"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:124
msgid "The `QuarkusComponentTestExtension` does several things during the `before all` test phase.  It starts ArC - the CDI container in Quarkus.  It also registers a dedicated configuration object.  The container is then stopped and the config is released during the `after all` test phase.  The fields annotated with `@Inject` and `@InjectMock` are injected after a test instance is created.  Finally, the CDI request context is activated and terminated per each test method."
msgstr ""

#. type: Title ===
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:125
#, no-wrap
msgid "Tested components"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:130
msgid "By default, the types of all fields annotated with `@Inject` are considered component types.  However, you can also specify additional test components: either with the `@QuarkusComponentTest#value()` or programmatically as the arguments of the <<advanced_features,`QuarkusComponentTestExtension(Class<?>...)`>> constructor.  Finally, the static nested classes declared on the test class are components too."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:132
msgid "Static nested classed declared on a test class that is annotated with `@QuarkusComponentTest` are excluded from bean discovery when running a regular `@QuarkusTest` in order to prevent unintentional CDI conflicts."
msgstr ""

#. type: Title ===
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:133
#, no-wrap
msgid "Automatic mocking of unsatisfied dependencies"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:140
msgid "Unlike in regular CDI environments, the test does not fail if a component injects an unsatisfied dependency.  Instead, a mock bean is registered automatically for each combination of required type and qualifiers of an injection point that resolves to an unsatisfied dependency.  The mock bean has the `@Singleton` scope so it’s shared across all injection points with the same required type and qualifiers.  And the injected reference is an unconfigured Mockito mock.  This mock can be injected in the test with `@io.quarkus.test.InjectMock` and configured with the Mockito API."
msgstr ""

#. type: Title ===
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:141
#, no-wrap
msgid "Configuration"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:146
msgid "A dedicated `SmallRyeConfig` is registered during the `before all` test phase.  It’s possible to set the configuration properties with the `@TestConfigProperty` annotation or programmatically with the `QuarkusComponentTestExtension#configProperty(String, String)` method.  If you need to use the default values for missing config properties, then `@QuarkusComponentTest#useDefaultConfigProperties()` and `QuarkusComponentTestExtension#useDefaultConfigProperties()` might come in useful."
msgstr ""

#. type: Title ==
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:148
#, no-wrap
msgid "Advanced features"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:152
msgid "It is possible to configure the `QuarkusComponentTestExtension` programatically.  The simple example above could be rewritten like:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:162
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import io.quarkus.test.InjectMock;\n"
"import io.quarkus.test.component.QuarkusComponentTestExtension;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.mockito.Mockito;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:164
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:199
#, no-wrap
msgid "public class FooTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:168
#, no-wrap
msgid ""
"    @RegisterExtension <1>\n"
"    static final QuarkusComponentTestExtension extension = new QuarkusComponentTestExtension()\n"
"            .configProperty(\"bar\",\"true\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:171
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:211
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:242
#, no-wrap
msgid ""
"    @Inject\n"
"    Foo foo;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:174
#, no-wrap
msgid ""
"    @InjectMock\n"
"    Charlie charlieMock;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:181
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPing() {\n"
"        Mockito.when(charlieMock.ping()).thenReturn(\"OK\");\n"
"        assertEquals(\"OK\", foo.ping());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:183
msgid "Annotate a `static` field of type `QuarkusComponentTestExtension` with the `@RegisterExtension` annotation and configure the extension programmatically."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:186
msgid "Sometimes you need full control over the bean attributes and maybe even configure the default behavior of a mocked dependency.  In this case, the mock configurator API and the `QuarkusComponentTestExtension#mock()` method is the right choice."
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:197
#, no-wrap
msgid ""
"import jakarta.enterprise.context.Dependent;\n"
"import jakarta.inject.Inject;\n"
"import io.quarkus.test.InjectMock;\n"
"import io.quarkus.test.component.QuarkusComponentTestExtension;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.mockito.Mockito;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:208
#, no-wrap
msgid ""
"    @RegisterExtension \n"
"    static final QuarkusComponentTestExtension extension = new QuarkusComponentTestExtension()\n"
"            .configProperty(\"bar\",\"true\")\n"
"            .mock(Charlie.class)\n"
"                .scope(Dependent.class) <1>\n"
"                .createMockitoMock(mock -> {\n"
"                    Mockito.when(mock.pong()).thenReturn(\"BAR\"); <2>\n"
"                });\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:217
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPing() {\n"
"        assertEquals(\"BAR\", foo.ping());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:219
msgid "The scope of the mocked bean is `@Dependent`."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:220
msgid "Configure the default behavior of the mock."
msgstr ""

#. type: Title ===
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:221
#, no-wrap
msgid "Mocking CDI interceptors"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:224
msgid "This feature is only available in Quarkus 3.3+."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:228
msgid "If a tested component class declares an interceptor binding then you might need to mock the interception too.  You can define a mock interceptor class as a static nested class of the test class.  This interceptor class is then automatically discovered"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:236
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import io.quarkus.test.component.QuarkusComponentTest;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:239
#, no-wrap
msgid ""
"@QuarkusComponentTest\n"
"public class FooTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:247
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPing() {\n"
"        assertEquals(\"OK\", foo.ping());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:250
#, no-wrap
msgid ""
"    @ApplicationScoped\n"
"    static class Foo {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:255
#, no-wrap
msgid ""
"       @SimpleBinding <1>\n"
"       String ping() {\n"
"         return \"ok\";\n"
"       }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:257
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:261
#, no-wrap
msgid ""
"    @SimpleBinding\n"
"    @Interceptor\n"
"    static class SimpleMockInterceptor {  <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:266
#, no-wrap
msgid ""
"        @AroundInvoke\n"
"        Object aroundInvoke(InvocationContext context) throws Exception {\n"
"            return context.proceed().toString().toUpperCase();\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:269
#, no-wrap
msgid ""
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:271
msgid "`@SimpleBinding` is an interceptor binding."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:272
msgid "The interceptor class is automatically considered a tested component and therefore used during the test execution."
msgstr ""

#. type: Title ==
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:273
#, no-wrap
msgid "Summary"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-10-quarkus-component-test.adoc:275
msgid "In this article, we discussed the possibilities of a new way of testing CDI components in a Quarkus application."
msgstr ""
