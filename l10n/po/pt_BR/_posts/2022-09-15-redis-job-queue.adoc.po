# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy, no-wrap
msgid "How to implement a job queue with Redis"
msgstr "Como implementar uma fila de tarefas com o Redis"

#. type: YAML Front Matter: synopsis
#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy, no-wrap
msgid "Implementing a job queue using Redis list and the Quarkus Redis extension"
msgstr "Implementação de uma fila de trabalho utilizando a lista Redis e a extensão Quarkus Redis"

#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy
msgid ""
"In https://quarkus.io/blog/redis-api-intro/[how to cache with Redis], we implemented a simple cache backed by Redis. +\n"
"That's just one use case of Redis.\n"
"Redis is also used as a messaging server to implement the processing of background jobs or other kinds of messaging tasks.\n"
"This post explores implementing this pattern with Quarkus and the new Redis data source API."
msgstr ""
"Em link:https://quarkus.io/blog/redis-api-intro/[como fazer cache com o Redis] , implementamos um cache simples com o suporte do Redis.\n"
"\n"
" Esse é apenas um caso de uso do Redis. O Redis também é usado como um servidor de mensagens para implementar o processamento de trabalhos em segundo plano ou outros tipos de tarefas de mensagens. Este post explora a implementação desse padrão com o Quarkus e a nova API de fonte de dados do Redis."

#. type: Title ==
#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy, no-wrap
msgid "Job Queues and Supes!"
msgstr "Filas de espera e Supes!"

#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy
msgid ""
"A job queue is a data structure storing _execution_ requests.\n"
"Job dispatchers submit the tasks they want to execute in that data structure.\n"
"On the other side, job consumers poll the requests and execute them."
msgstr "Uma fila de trabalho é uma estrutura de dados que armazena solicitações de _execução_ . Os despachantes de trabalho enviam as tarefas que desejam executar nessa estrutura de dados. Por outro lado, os consumidores de trabalho pesquisam as solicitações e as executam."

#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy
msgid ""
"There are plenty of variants of that pattern, so let's focus on the following application.\n"
"We have an application managing heroes and villains.\n"
"The application offers the possibility to simulate a fight between a random hero and a random villain.\n"
"The fight simulation is delegated to _fight simulators_, applications dedicated to that task."
msgstr "Há muitas variantes desse padrão, portanto, vamos nos concentrar no aplicativo a seguir. Temos um aplicativo que gerencia heróis e vilões. O aplicativo oferece a possibilidade de simular uma luta entre um herói aleatório e um vilão aleatório. A simulação da luta é delegada a _simuladores de luta_ , aplicativos dedicados a essa tarefa."

#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy
msgid ""
"In this context, the main application submits the fight request to the job queue.\n"
"Then, the fight simulators poll the submitted fight request and execute them."
msgstr "Nesse contexto, o aplicativo principal envia a solicitação de luta para a fila de trabalho. Em seguida, os simuladores de luta pesquisam as solicitações de luta enviadas e as executam."

#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy
msgid ""
"The fight outcomes are communicated using another Redis feature: pub/sub communication.\n"
"The simulators send the outcome to a _channel_ consumed by the application.\n"
"The application then broadcasts these outcomes to a web page."
msgstr "Os resultados da luta são comunicados usando outro recurso do Redis: comunicação pub/sub. Os simuladores enviam o resultado para um _canal_ consumido pelo aplicativo. Em seguida, o aplicativo transmite esses resultados para uma página da Web."

#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy
msgid ""
"This post only discusses the interaction with Redis.\n"
"The rest of the application is straightforward and just uses RESTEasy Reactive and Hibernate ORM with Panache.\n"
"You can find the full code of the application on https://github.com/cescoffier/quarkus-redis-job-queue-demo."
msgstr "Este post discute apenas a interação com o Redis. O restante do aplicativo é simples e usa apenas o RESTEasy Reactive e o Hibernate ORM com o Panache. O senhor pode encontrar o código completo do aplicativo em link:https://github.com/cescoffier/quarkus-redis-job-queue-demo[https://github.com/cescoffier/quarkus-redis-job-queue-demo.]"

#. type: Title ==
#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy, no-wrap
msgid "Submitting jobs"
msgstr "Enviar empregos"

#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy
msgid ""
"The first task is to model the job queue.\n"
"We are using a https://redis.io/docs/data-types/#lists[Redis list] to store the https://github.com/cescoffier/quarkus-redis-job-queue-demo/blob/main/fight-simulator/src/main/java/me/escoffier/quarkus/redis/fight/FightRequest.java[FightRequest]."
msgstr "A primeira tarefa é modelar a fila de trabalho. Estamos usando uma link:https://redis.io/docs/data-types/#lists[lista Redis] para armazenar o link:https://github.com/cescoffier/quarkus-redis-job-queue-demo/blob/main/fight-simulator/src/main/java/me/escoffier/quarkus/redis/fight/FightRequest.java[FightRequest] ."

#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy
msgid ""
"Redis lists distinguish the left side of the list from the right side of the list.\n"
"This distinction allows implementing a FIFO queue where we write on the left side and consume from the right side."
msgstr "As listas Redis distinguem o lado esquerdo da lista do lado direito da lista. Essa distinção permite implementar uma fila FIFO em que escrevemos no lado esquerdo e consumimos do lado direito."

#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy
msgid ""
"To manipulate a Redis list, we need the _group of commands_ associated with this data structure.\n"
"In the https://github.com/cescoffier/quarkus-redis-job-queue-demo/blob/main/supes-application/src/main/java/me/escoffier/quarkus/redis/supes/SupesService.java[SupesService class], we inject the `RedisDataSource` and retrieve the group of commands:"
msgstr "Para manipular uma lista do Redis, precisamos do _grupo de comandos_ associados a essa estrutura de dados. Na link:https://github.com/cescoffier/quarkus-redis-job-queue-demo/blob/main/supes-application/src/main/java/me/escoffier/quarkus/redis/supes/SupesService.java[classe SupesService] , injetamos o endereço `RedisDataSource` e recuperamos o grupo de comandos:"

#. type: Plain text
#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy
msgid "Let's now look at the `submitAFight` method:"
msgstr "Vejamos agora o método `submitAFight`:"

#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy
msgid ""
"The `submitAFight` method retrieves the random fighters, computes an id,  builds the `FightRequest` instance, and executes the `LPUSH` command.\n"
"The `LPUSH`  command writes the given item to the left side of the list stored at the given key (`fight-requests`)."
msgstr "O método `submitAFight` recupera os lutadores aleatórios, calcula um ID, cria a instância `FightRequest` e executa o comando `LPUSH` . O comando `LPUSH` grava o item fornecido no lado esquerdo da lista armazenada na chave fornecida ( `fight-requests` )."

#. type: Title ==
#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy, no-wrap
msgid "Receiving the job requests"
msgstr "Receber os pedidos de trabalho"

#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy
msgid ""
"Let's now look at the other side: the fight simulators.\n"
"The simulators poll the `FightRequests` from the Redis list representing our job queue and simulate the fight."
msgstr "Vejamos agora o outro lado: os simuladores de luta. Os simuladores pesquisam o `FightRequests` da lista Redis que representa nossa fila de trabalhos e simulam a luta."

#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy
msgid ""
"The simulator is implemented in https://github.com/cescoffier/quarkus-redis-job-queue-demo/blob/main/fight-simulator/src/main/java/me/escoffier/quarkus/redis/fight/FightSimulator.java[`me.escoffier.quarkus.redis.fight.FightSimulator`].\n"
"The constructor receives a configured name (to distinguish multiple simulators) and the Redis data source.\n"
"It creates the objects to emit the Redis commands to read from a Redis list:"
msgstr "O simulador é implementado em link:https://github.com/cescoffier/quarkus-redis-job-queue-demo/blob/main/fight-simulator/src/main/java/me/escoffier/quarkus/redis/fight/FightSimulator.java[me.escoffier.quarkus.redis.fight.FightSimulator] . O construtor recebe um nome configurado (para distinguir vários simuladores) e a fonte de dados do Redis. Ele cria os objetos para emitir os comandos do Redis para ler de uma lista do Redis:"

#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy
msgid ""
"The simulator polls the fight requests and for each of them simulate the fight.\n"
"The implementation is an _infinite_ loop (it only stops when the application is shut down).\n"
"In each iteration, it reads the pending `FightRequest` from the right side of the queue with the `BRPOP` command.\n"
"If there is no pending request, it restarts from the beginning of the loop.\n"
"If it has a request, it simulates the fight:"
msgstr "O simulador pesquisa as solicitações de luta e, para cada uma delas, simula a luta. A implementação é um loop _infinito_ (só para quando o aplicativo é encerrado). Em cada iteração, ele lê o `FightRequest` pendente do lado direito da fila com o comando `BRPOP` . Se não houver nenhuma solicitação pendente, ele reinicia desde o início do loop. Se houver uma solicitação, ele simula o combate:"

#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy
msgid ""
"The `BRPOP` command retrieves and removes the last (right) element of the list.\n"
"Unlike the `RPOP`, it waits for a given amount of time (1 second in the code above) if there are no elements in the list.\n"
"So, if the list contains an element, it gets it.\n"
"Otherwise, it waits up to one second before giving up.\n"
"It returns `null` in this case.\n"
"The `BRPOP` command returns a `KeyValue` composed of the key of the list and the `FightRequest`.\n"
"It uses that structure because you can pass multiple keys, which is convenient when you have lists with priorities."
msgstr "O comando `BRPOP` recupera e remove o último elemento (direito) da lista. Ao contrário do `RPOP` , ele aguarda um determinado período de tempo (1 segundo no código acima) se não houver elementos na lista. Portanto, se a lista contiver um elemento, ele o obterá. Caso contrário, ele espera até um segundo antes de desistir. Nesse caso, ele retorna `null` . O comando `BRPOP` retorna um `KeyValue` composto da chave da lista e do `FightRequest` . Ele usa essa estrutura porque o senhor pode passar várias chaves, o que é conveniente quando há listas com prioridades."

#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy
msgid ""
"The `BRPOP` command also avoids spinning indefinitely if the list is empty, as it waits for 1 second during each iteration.\n"
"Finally, the `BRPOP` command is _atomic_.\n"
"It means that if you have multiple simulators, they cannot retrieve the same item.\n"
"It dispatches each item once."
msgstr "O comando `BRPOP` também evita girar indefinidamente se a lista estiver vazia, pois aguarda 1 segundo durante cada iteração. Por fim, o comando `BRPOP` é _atômico_ . Isso significa que, se o senhor tiver vários simuladores, eles não poderão recuperar o mesmo item. Ele despacha cada item uma vez."

#. type: Title ==
#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy, no-wrap
msgid "Sending the fight outcome"
msgstr "Envio do resultado do combate"

#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy
msgid ""
"The pool loop retrieves the `FightRequests` from the queue and simulates the fights, but how to communicate the results?\n"
"For this, we use another Redis feature: pub/sub communication."
msgstr "O loop do pool recupera o `FightRequests` da fila e simula as lutas, mas como comunicar os resultados? Para isso, usamos outro recurso do Redis: a comunicação pub/sub."

#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy
msgid ""
"In simple words, we are going to send the `FightResult` to a _channel_.\n"
"Applications subscribing to that channel will receive the emitted `FightResult`."
msgstr "Em palavras simples, enviaremos o `FightResult` para um _canal_ . Os aplicativos que se inscreverem nesse canal receberão o `FightResult` emitido."

#. type: Plain text
#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy
msgid "A `FightResult` contains the request id, the two fighters, and the name of the winner:"
msgstr "Um `FightResult` contém o ID do pedido, os dois lutadores e o nome do vencedor:"

#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy
msgid ""
"To use Redis _pub/sub_ commands, we need the object associated with this group.\n"
"In the `FightSimulator`, we also uses the `pubsub` method to get that object:"
msgstr "Para usar os comandos _pub/sub_ do Redis, precisamos do objeto associado a esse grupo. No `FightSimulator` , também usamos o método `pubsub` para obter esse objeto:"

#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy
msgid ""
"Now, we can use this `publisher` to send the `FightResults`.\n"
"After each fight, we call `publisher.publish` to send the `FightResult` instance to the `fight-results` channel:"
msgstr "Agora, podemos usar esse `publisher` para enviar o `FightResults` . Após cada combate, chamamos `publisher.publish` para enviar a instância `FightResult` para o canal `fight-results` :"

#. type: Title ==
#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy, no-wrap
msgid "Receiving the fight outcome"
msgstr "Receber o resultado do combate"

#. type: Plain text
#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy
msgid "At that point:"
msgstr "Nessa altura:"

#. type: Plain text
#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy
msgid "we submit the fight request into the job queue,"
msgstr "enviamos o pedido de luta para a fila de trabalho,"

#. type: Plain text
#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy
msgid "we consume that queue and simulate the fight,"
msgstr "consumimos essa fila e simulamos o combate,"

#. type: Plain text
#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy
msgid "we send the outcome to the `fight-results` channel."
msgstr "enviamos o resultado para o canal `fight-results`."

#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy
msgid ""
"So, the only missing piece is the consumption of that channel.\n"
"Let's return to the https://github.com/cescoffier/quarkus-redis-job-queue-demo/blob/main/supes-application/src/main/java/me/escoffier/quarkus/redis/supes/SupesService.java[`me.escoffier.quarkus.redis.supes.SupesService`] class.\n"
"In the constructor, we also inject the `ReactiveRedisDataSource`, the reactive variant of the Redis data source.\n"
"Then, in the constructor code, we subscribe to the `fight-results`."
msgstr "Portanto, a única peça que falta é o consumo desse canal. Vamos voltar à classe link:https://github.com/cescoffier/quarkus-redis-job-queue-demo/blob/main/supes-application/src/main/java/me/escoffier/quarkus/redis/supes/SupesService.java[me.escoffier.quarkus.redis.supes.SupesService] classe. No construtor, também injetamos o `ReactiveRedisDataSource` , a variante reativa da fonte de dados Redis. Em seguida, no código do construtor, assinamos o `fight-results` ."

#. type: Plain text
#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy
msgid "Because we use the reactive data source, this subscription returns a `Multi<FightResult>`, ready to be served by Quarkus and an SSE (see https://github.com/cescoffier/quarkus-redis-job-queue-demo/blob/main/supes-application/src/main/java/me/escoffier/quarkus/redis/supes/SupesResource.java[SupesResource.java]):"
msgstr "Como utilizamos a fonte de dados reactiva, esta subscrição devolve um `Multi&amp;lt;FightResult&amp;gt;`, pronto a ser servido pelo Quarkus e um SSE (ver  link:https://github.com/cescoffier/quarkus-redis-job-queue-demo/blob/main/supes-application/src/main/java/me/escoffier/quarkus/redis/supes/SupesResource.java[SupesResource.java]):"

#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy
msgid ""
"`.broadcast().toAllSubscribers()` instructs Quarkus to broadcast all the received `FightResult` to all the connected SSE.\n"
"So, the browser filters out unrequested results."
msgstr "`.broadcast().toAllSubscribers()` instrui o Quarkus a transmitir todos os `FightResult` recebidos para todos os SSE conectados. Assim, o navegador filtra os resultados não solicitados."

#. type: Title ==
#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy, no-wrap
msgid "Running the system"
msgstr "Executar o sistema"

#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy
msgid ""
"The circle is complete!\n"
"The full code source is available from https://github.com/cescoffier/quarkus-redis-job-queue-demo.\n"
"To run the system, open three terminals."
msgstr "O círculo está completo! O código-fonte completo está disponível em link:https://github.com/cescoffier/quarkus-redis-job-queue-demo[https://github.com/cescoffier/quarkus-redis-job-queue-demo.] Para executar o sistema, abra três terminais."

#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy
msgid ""
"First, we start the `supes-application`.\n"
"In the first terminal, navigate to the `supes-application` and run `mvn quarkus:dev`\n"
"Quarkus automatically starts the PostgreSQL and Redis instances (if your machine can run containers).\n"
"In the console, hit `h` and then `c`.\n"
"It displays the running dev services.\n"
"Look for the redis one, and copy the `quarkus.redis.hosts` injected configuration:"
msgstr "Primeiro, iniciamos o `supes-application` . No primeiro terminal, navegue até `supes-application` e execute `mvn quarkus:dev` . O Quarkus inicia automaticamente as instâncias do PostgreSQL e do Redis (se sua máquina puder executar contêineres). No console, acesse `h` e, em seguida, `c` . Ele exibe os serviços de desenvolvimento em execução. Procure o do Redis e copie a configuração injetada do `quarkus.redis.hosts` :"

#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy
msgid ""
"In the previous snippet, copy: `quarkus.redis.hosts=redis://localhost:53853`.\n"
"This is the address of the redis server.\n"
"We need to configure to the simulators with that address."
msgstr "No snippet anterior, copie: `quarkus.redis.hosts=redis://localhost:53853` . Esse é o endereço do servidor redis. Precisamos configurar os simuladores com esse endereço."

#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy
msgid ""
"If you go to http://localhost:8080, the web page is served.\n"
"You can hit the `fights!` button a few times."
msgstr "Se o senhor acessar link:http://localhost:8080[http://localhost:8080,] a página da Web será exibida. O senhor pode pressionar o botão `fights!` algumas vezes."

#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy
msgid ""
"The fight won't happen as we have no simulator.\n"
"However, the fight requests have been submitted and stored in the list.\n"
"So they are not lost."
msgstr "A luta não acontecerá, pois não temos um simulador. No entanto, as solicitações de luta foram enviadas e armazenadas na lista. Portanto, elas não estão perdidas."

#. type: Plain text
#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy
msgid "Now, in the second terminal, navigate to the `fight-simulator` directory, and run:"
msgstr "Agora, no segundo terminal, navegue até o diretório `fight-simulator` e execute:"

#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy
msgid "*IMPORTANT*: update the `quarkus.redis-hosts` with the one copied above."
msgstr "*IMPORTANTE* : atualize o endereço `quarkus.redis-hosts` com o que foi copiado acima."

#. type: Plain text
#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy
msgid "As soon as you start it, it processes the pending fight requests:"
msgstr "Assim que o inicia, processa os pedidos de luta pendentes:"

#. type: Plain text
#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy
msgid "If you go back to the web page, the winners get a _halo_:"
msgstr "Se voltar à página Web, os vencedores recebem uma _auréola_:"

#. type: Plain text
#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy
msgid "Now, in the third terminal, navigate to the `fight-simulator` directory, and run:"
msgstr "Agora, no terceiro terminal, navegue até o diretório `fight-simulator` e execute:"

#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy
msgid "*IMPORTANT*: as in the previous command, update the `quarkus.redis-hosts` with the one copied above."
msgstr "*IMPORTANTE* : como no comando anterior, atualize o endereço `quarkus.redis-hosts` com o que foi copiado acima."

#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy
msgid ""
"Go back to the web page and click on the `fight!` button a few times.\n"
"Check the logs of both simulators to see that the fight requests are now dispatched beween the two simulators."
msgstr "Volte para a página da Web e clique no botão `fight!` algumas vezes. Verifique os registros dos dois simuladores para ver se as solicitações de luta estão sendo despachadas entre os dois simuladores."

#. type: Title ==
#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy, no-wrap
msgid "Summary"
msgstr "Resumo"

#. type: Plain text
#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy
msgid "This posts explains how you can implement a job queue with Redis and the Quarkus Redis datasource API."
msgstr "Esta publicação explica como pode implementar uma fila de tarefas com o Redis e a API de fonte de dados do Quarkus Redis."

#: _posts/2022-09-15-redis-job-queue.adoc
#, fuzzy
msgid ""
"Learn more about the Redis data source API from the https://quarkus.io/guides/redis[Quarkus documentation].\n"
"We will publish more content about Redis patterns, so stay tuned!"
msgstr "Saiba mais sobre a API de fonte de dados do Redis na link:https://quarkus.io/guides/redis[documentação do Quarkus] . Publicaremos mais conteúdo sobre os padrões do Redis, portanto, fique atento!"
