# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:1
#, no-wrap
msgid "karm"
msgstr ""

#. type: YAML Front Matter: date
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:1
#, no-wrap
msgid "2023-06-26"
msgstr ""

#. type: YAML Front Matter: layout
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:1
#, no-wrap
msgid "post"
msgstr ""

#. type: YAML Front Matter: tags
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:1
#, no-wrap
msgid "development-tips windows"
msgstr ""

#. type: YAML Front Matter: title
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:1
#, no-wrap
msgid "Podman for Windows"
msgstr ""

#. type: Title =
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:10
#, no-wrap
msgid "Quarkus Native with Podman for Windows"
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:12
#, no-wrap
msgid "Quarkus and Podman"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:12
#, no-wrap
msgid "quarkus-podman-790x103.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:19
msgid "Developers who use Windows workstations might face the challenge of running Linux-native workflows.  One way to achieve this is by using Podman, a container engine that provides a command line capability to run Linux containers. Podman supports running containers both as \"rootful\" and as \"rootless\", with the latter being the default that doesn't require elevated privileges. In this blog post, we'll explore how to use Podman with Quarkus Native to build and run applications on Windows."
msgstr ""

#. type: Title ==
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:20
#, no-wrap
msgid "Installing Podman on Windows"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:28
msgid "In my latest experience, I used two setups, a Windows 10 on an older baremetal Xeon based desktop and a Windows 10 Qemu driven VM on my CentOS 8 Stream Linux laptop. The former being without any hiccups using https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md[Podman for Windows] guide while the latter required some link:/assets/examples/posts/podman-for-windows/win10.xml.txt[manual tweaks] in `+/etc/libvirt/qemu/win10.xml+` to allow for nested virtualization.  Your mileage might vary with guest Windows and hypervisor versions though."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:31
msgid "Besides the command line, there is also a full Podman Desktop experience available on https://podman-desktop.io/.  The installer checks your setup and guides you:"
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:32
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:98
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:122
#, no-wrap
msgid "Podman Desktop"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:32
#, no-wrap
msgid "podman-desktop-790x623.png"
msgstr ""

#. type: Title ==
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:34
#, no-wrap
msgid "Quarkus Native builder image"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:38
msgid "Both the latest Quarkus 2 and Quarkus 3 autodetects whether either Podman or Docker is installed, and it uses it to run containers."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:43
msgid "We will use a QuickStart example that watermarks images. The example depends on Quarkus AWT extension that is not yet ported to run natively on Windows, yet we use a Windows workstation to develop our Java code, so using a Linux container to do the native build suits us well. We use https://github.com/cmderdev/cmder[cmder] terminal on Windows, but a plain cmd prompt would do too."
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:50
#, no-wrap
msgid ""
"C:\\tmp\n"
"λ git clone https://github.com/quarkusio/quarkus-quickstarts.git\n"
"λ cd quarkus-quickstarts\\awt-graphics-rest-quickstart\n"
"λ git checkout development\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:53
msgid "Depending on your Podman installation, you might need to run `+podman machine start+` too.  link:/assets/examples/posts/podman-for-windows/podman-win-output-sdasff.txt[Podman output]."
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:56
#, no-wrap
msgid ""
"C:\\tmp\\quarkus-quickstarts\\awt-graphics-rest-quickstart (development -> origin)\n"
"λ mvnw package -Dnative -Dquarkus.native.container-build=true -Dquarkus.platform.version=3.1.2.Final\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:58
msgid "link:/assets/examples/posts/podman-for-windows/podman-win-awt-quickstart-build.txt[Full output]"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:63
msgid "We can see in the log that Quarkus detected that we had `+podman.exe+` available, and it used Mandrel builder image to do the build, i.e. our Java bytecode alongside with various resources and properties was made available inside a Linux container where a `+native-image+` tool created an ELF64 Linux executable. We can see that artifact right in our `+target+` directory now:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:70
#, no-wrap
msgid ""
"λ file target\\awt-graphics-rest-quickstart-1.0.0-SNAPSHOT-runner\n"
"target\\awt-graphics-rest-quickstart-1.0.0-SNAPSHOT-runner: ELF 64-bit LSB executable, x86-64, version 1 (SYSV),\n"
"  dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0,\n"
"  BuildID[sha1]=20820fdafc19e803147d91fbba6823ad45024041, not stripped\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:74
msgid "We cannot run the executable here on our Windows workstation, yet we can immediately use another Linux image to run it in a container:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:78
#, no-wrap
msgid "λ podman build -f src/main/docker/Dockerfile.native -t quarkus/awt-graphics-rest .\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:81
msgid "link:/assets/examples/posts/podman-for-windows/podman-win-container-build.txt[Full output]"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:83
msgid "Let’s run it:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:94
#, no-wrap
msgid ""
"C:\\tmp\\quarkus-quickstarts\\awt-graphics-rest-quickstart (development -> origin)\n"
"λ podman run -i --rm -p 8080:8080 quarkus/awt-graphics-rest\n"
"__  ____  __  _____   ___  __ ____  ______\n"
" --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/\n"
" -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\\ \\\n"
"--\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/\n"
"2023-06-22 15:53:03,890 INFO  [io.quarkus] (main) awt-graphics-rest-quickstart 1.0.0-SNAPSHOT native (powered by Quarkus 3.1.2.Final) started in 0.169s. Listening on: http://0.0.0.0:8080\n"
"2023-06-22 15:53:03,890 INFO  [io.quarkus] (main) Profile prod activated.\n"
"2023-06-22 15:53:03,890 INFO  [io.quarkus] (main) Installed features: [awt, cdi, resteasy, resteasy-multipart, smallrye-context-propagation, vertx]\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:97
msgid "We can have the application watermark an image for us now. First, we need some image to watermark:"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:98
#, no-wrap
msgid "orig-790x230.png"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:104
#, no-wrap
msgid ""
"C:\\tmp\n"
"λ curl https://quarkus.io/assets/images/posts/podman-for-windows/orig-790x230.png --output C:/tmp/example.png\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:107
msgid "Next, we use our locally running container to watermark it:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:112
#, no-wrap
msgid ""
"C:\\tmp\n"
"λ curl -F \"image=@C:/tmp/example.png\" http://localhost:8080/watermark --output C:/tmp/result.png\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:115
msgid "And see the result, word Mandrel in the top left corner and a Quarkus logotype in the bottom right corner:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:120
#, no-wrap
msgid ""
"C:\\tmp\n"
"λ mspaint.exe C:/tmp/result.png\n"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:122
#, no-wrap
msgid "result-790x230.png"
msgstr ""

#. type: Title ==
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:124
#, no-wrap
msgid "Linux containers in your test flow"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:127
msgid "You can use Podman to run your tests in Linux containers too. For example, you can take advantage of the `+quarkus-container-image-docker+` extension. Add it to the `+pom.xml+`:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:142
#, no-wrap
msgid ""
"...\n"
"     <artifactId>quarkus-junit5</artifactId>\n"
"     <scope>test</scope>\n"
"   </dependency>\n"
"+  <dependency>\n"
"+    <groupId>io.quarkus</groupId>\n"
"+    <artifactId>quarkus-container-image-docker</artifactId>\n"
"+  </dependency>\n"
"   <dependency>\n"
"     <groupId>io.rest-assured</groupId>\n"
"     <artifactId>rest-assured</artifactId>\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:145
msgid "Let's run it:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:149
#, no-wrap
msgid "λ mvnw verify -Ddocker -Dnative -Dquarkus.native.container-build=true -Dquarkus.container-image.build=true -Dquarkus.platform.version=3.1.2.Final\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:152
msgid "Here is the link:/assets/examples/posts/podman-for-windows/podman-win-test-in-linux-container.txt[Full output]."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:154
msgid "Browsing the log, we can see that the JVM based test passed first:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:161
#, no-wrap
msgid ""
"...\n"
"[INFO] Running org.acme.awt.rest.ImageResourceTest\n"
"INFO  [io.quarkus] (main) awt-graphics-rest-quickstart 1.0.0-SNAPSHOT on JVM\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:164
msgid "Then the Linux builder image is used to build a Linux executable:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:173
#, no-wrap
msgid ""
"...\n"
"[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildContainerRunner] Using podman to run the native image builder\n"
"[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildContainerRunner] Checking image status quay.io/quarkus/ubi-quarkus-mandrel-builder-image:22.3-java17\n"
"...\n"
"[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildRunner] podman run...\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:176
msgid "Next we can see that the integration testsuite decided to build a Linux container image with our newly built executable in it:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:183
#, no-wrap
msgid ""
"...\n"
"[INFO] [io.quarkus.container.image.docker.deployment.DockerProcessor] Starting (local) container image build for native binary using docker.\n"
"[INFO] [io.quarkus.container.image.docker.deployment.DockerProcessor] Executing the following command to build docker image: 'podman build -f C:\\tmp\\quarkus-quickstarts\\awt-graphics-rest-quickstart\\src\\main\\docker\\Dockerfile.native -t karm/awt-graphics-rest-quickstart:1.0.0-SNAPSHOT C:\\tmp\\quarkus-quickstarts\\awt-graphics-rest-quickstart'\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:186
msgid "Finally, the integration testsuite starts the application in a container and runs the tests against it:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:193
#, no-wrap
msgid ""
"...\n"
"[INFO] Running org.acme.awt.rest.ImageResourceIT\n"
" INFO  [io.qua.tes.com.DefaultDockerContainerLauncher] (main) Executing \"podman run...\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:196
msgid "We can check in the preserved `+target/quarkus.log+` that the application was indeed ran in a Linux container as a native executable:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:200
#, no-wrap
msgid "λ type target\\quarkus.log\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:208
#, no-wrap
msgid ""
" --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/\n"
" -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\\ \\\n"
"--\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/\n"
"2023-06-22 21:41:27,637 INFO  [io.quarkus] (main) awt-graphics-rest-quickstart 1.0.0-SNAPSHOT native (powered by Quarkus 3.1.2.Final) started in 0.062s. Listening on: http://0.0.0.0:8081\n"
"2023-06-22 21:41:27,637 INFO  [io.quarkus] (main) Profile prod activated.\n"
"2023-06-22 21:41:27,637 INFO  [io.quarkus] (main) Installed features: [awt, cdi, resteasy, resteasy-multipart, smallrye-context-propagation, vertx]\n"
"2023-06-22 21:41:30,264 INFO  [io.quarkus] (Shutdown thread) awt-graphics-rest-quickstart stopped in 0.002s\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:211
msgid "This way we can have our test application executed in a Linux container while keeping our Windows development environment."
msgstr ""

#. type: Title ==
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:212
#, no-wrap
msgid "Troubleshooting"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:214
#, no-wrap
msgid "**File permissions:** The Linux executable file might have missing its executable flag, so you might need to set\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:215
#, no-wrap
msgid "it in your Dockerfile as we do in the Quickstart AWT example, i.e. `+RUN chmod \"ugo+x\" /work/application+`.\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:216
#, no-wrap
msgid "**Podman machine must be inited:** If something goes south, an Administrator can fix it by removing the machine\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:218
#, no-wrap
msgid ""
"(the Linux VM providing podman services), e.g. `+podman machine rm \"podman-machine-default\"+` and then\n"
"`+podman machine init+`.\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:219
#, no-wrap
msgid "*Directory or a file access:* When more services or more complex multimodule projects are being built, one could\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:221
#, no-wrap
msgid ""
"hit `+The process cannot access the file because it is being used by another process+`. The easiest way to debug\n"
"such situation is to use https://download.sysinternals.com/files/Handle.zip[Handle] tool by Sysinternals.\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:223
msgid "Note that none of the aforementioned situations is Quarkus specific per se."
msgstr ""

#. type: Title ==
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:224
#, no-wrap
msgid "Conclusion"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:227
msgid "Podman is perfectly capable of running your Linux containers on Windows, being it test apps or databases. It is definitely worth trying out."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-26-podman-for-windows.adoc:228
msgid "Do you have a question regarding this post? Feel free to hit us up on https://quarkusio.zulipchat.com/#[Zulip chat], https://stackoverflow.com/questions/tagged/quarkus%20podman?sort=Newest[Stack Overflow] or on https://github.com/quarkusio/quarkus/issues?q=label%3Aenv%2Fpodman[GitHub]."
msgstr ""
