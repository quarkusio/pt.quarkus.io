# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy, no-wrap
msgid "Emitter - Bridging the imperative and the reactive worlds"
msgstr "Emissor - Faz a ponte entre o mundo imperativo e o mundo reativo"

#. type: YAML Front Matter: synopsis
#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy, no-wrap
msgid "Emitting messages with Reactive Messaging Emitters"
msgstr "Emissão de mensagens com emissores de mensagens reactivas"

#. type: Plain text
#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid "In a https://quarkus.io/blog/kafka-avro/[previous blog post] about Kafka and Avro, we used an _emitter_ to send Kafka messages."
msgstr "Em um  link:https://quarkus.io/blog/kafka-avro/[post anterior] sobre o Kafka e o Avro, usamos um _emissor_ para enviar mensagens do Kafka."

#. type: Plain text
#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid "image:/assets/images/posts/reactive-messaging-emitter/architecture.png[width=70%]"
msgstr "image:/assets/images/posts/reactive-messaging-emitter/architecture.png[alt=architecture]"

#. type: Plain text
#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid "In this post, we are going look at this emitter construct a little bit more closely."
msgstr "Neste post, vamos analisar um pouco mais de perto a construção do emissor."

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid "Injecting an Emitter"
msgstr "Injetando um emissor"

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid ""
"Injecting an emitter is straightforward.\n"
"You indicate the targeted channel, i.e., where do you send your messages:"
msgstr "A injeção de um emissor é simples. O senhor indica o canal de destino, ou seja, para onde deseja enviar suas mensagens:"

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid ""
"Remember that reactive messaging uses _channels_ as a primary abstraction.\n"
"They can be in-memory channels or mapped to a remote broker."
msgstr "Lembre-se de que as mensagens reativas usam _canais_ como abstração principal. Eles podem ser canais na memória ou mapeados para um corretor remoto."

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid ""
"In the previous code snippet, we inject an `Emitter<Movie>`.\n"
"It means you will send messages containing movies as payload.\n"
"So, the specified type is the payload type.\n"
"That lets you send: payloads directly (wrapped automatically in a message) or more detailed messages containing a movie as payload:"
msgstr "No trecho de código anterior, injetamos um `Emitter<Movie>` . Isso significa que o senhor enviará mensagens contendo filmes como carga útil. Portanto, o tipo especificado é o tipo de carga útil. Isso permite que o senhor envie: cargas úteis diretamente (agrupadas automaticamente em uma mensagem) ou mensagens mais detalhadas contendo um filme como carga útil:"

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid "Sending payloads"
msgstr "Envio de cargas úteis"

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid ""
"Sending payload is the simplest way to send data.\n"
"You just pass the payload to the `send` method like an instance of `Movie`.\n"
"Under the hood, it just creates a simple `Message` wrapping the payload."
msgstr "O envio de carga útil é a maneira mais simples de enviar dados. O senhor passa a carga útil para o método `send` como uma instância de `Movie` . Por trás disso, ele cria um `Message` simples que envolve a carga útil."

#. type: Plain text
#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid "When used with payload, the `send` method returns a `CompletionStage` indicating if the message processing succeeded or failed:"
msgstr "Quando utilizado com payload, o método `send` devolve um `CompletionStage` indicando se o processamento da mensagem foi bem sucedido ou falhou:"

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid ""
"Processing, and will see later event the emission, happens asynchronously.\n"
"So, the returned `CompletionStage` lets you know when the message is processed.\n"
"The `CompletionStage` is completed successfully when the message is acknowledged.\n"
"Most of the time, it means that the processing has been completed smoothly, or the message has been sent to a broker successfully.\n"
"If something wrong happens, the `CompletionStage` is completed exceptionally.\n"
"The passed exception gives you an idea of the reason."
msgstr "O processamento, como veremos mais adiante no evento de emissão, ocorre de forma assíncrona. Portanto, o `CompletionStage` retornado permite que o senhor saiba quando a mensagem é processada. O `CompletionStage` é concluído com êxito quando a mensagem é confirmada. Na maioria das vezes, isso significa que o processamento foi concluído sem problemas ou que a mensagem foi enviada a um agente com êxito. Se algo errado acontecer, o `CompletionStage` será concluído excepcionalmente. A exceção transmitida dá ao senhor uma ideia do motivo."

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid "Sending messages"
msgstr "Envio de mensagens"

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid ""
"While sending payloads is more straightforward, sometimes you want to attach metadata to the message, like configuring how it should be written in Kafka, tracing information, etc.\n"
"The emitter also allows sending messages, and so attach the metadata you want.\n"
"In the following example, we configure the outbound Kafka record.\n"
"We set the key, the topic, and so on.\n"
"That way, you can dispatch messages to different topics and even decide dynamically:"
msgstr "Embora o envio de cargas úteis seja mais simples, às vezes o senhor deseja anexar metadados à mensagem, como configurar como ela deve ser gravada no Kafka, rastrear informações etc. O emissor também permite o envio de mensagens e, portanto, anexa os metadados que o senhor deseja. No exemplo a seguir, configuramos o registro de saída do Kafka. Definimos a chave, o tópico e assim por diante. Dessa forma, o senhor pode enviar mensagens para diferentes tópicos e até mesmo decidir dinamicamente:"

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid "Emissions are asynchronous"
msgstr "As emissões são assíncronas"

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid ""
"Emitters form a bridge between the imperative and the reactive worlds.\n"
"When you emit a message, this message is not processed immediately.\n"
"The downstream component consuming the message are part of a _Reactive Streams_.\n"
"Passing the message immediately would violate the Reactive Streams protocol.\n"
"We must be sure that the downstream components are ready to accept this message.\n"
"As a result, the emitter is not pushing the message directly, but enqueue it in a buffer used to handle the downstream capacity (requests in Reactive Streams lingo)."
msgstr "Os emissores formam uma ponte entre os mundos imperativo e reativo. Quando o senhor emite uma mensagem, essa mensagem não é processada imediatamente. O componente downstream que consome a mensagem faz parte de um _Reactive Streams_ . Passar a mensagem imediatamente violaria o protocolo do Reactive Streams. Precisamos ter certeza de que os componentes downstream estão prontos para aceitar essa mensagem. Como resultado, o emissor não está enviando a mensagem diretamente, mas colocando-a em uma fila em um buffer usado para lidar com a capacidade de downstream (solicitações no jargão de fluxos reativos)."

#. type: Plain text
#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid "image:/assets/images/posts/reactive-messaging-emitter/buffer.png[width=90%]"
msgstr "image:/assets/images/posts/reactive-messaging-emitter/buffer.png[alt=buffer]"

#. type: Plain text
#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid "The downstream component receives the messages according to the requests it makes, ensuring its capacity is never exceeded."
msgstr "O componente a jusante recebe as mensagens de acordo com os pedidos que efectua, garantindo que a sua capacidade nunca é ultrapassada."

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid "Overflow management"
msgstr "Gerenciamento de transbordamento"

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid ""
"But with buffer comes... overflow.\n"
"If you emit too many messages and the downstream cannot keep up, the messages are stored in the buffer until it reaches its maximum capacity.\n"
"Then, you cannot emit anymore, and attempting to emit will throw exceptions.\n"
"But what can we do in this case?\n"
"When injecting the emitter, you can configure an Overflow strategy.\n"
"For example, you can set the buffer size, use an unbounded buffer, drop the messages, fail, or just ignore the back pressure and let the downstream handle it.\n"
"By default, it uses a buffer, but depending on your use case, you may want to configure it differently:"
msgstr "Mas com o buffer vem... o estouro. Se o senhor emitir muitas mensagens e o downstream não conseguir acompanhar, as mensagens serão armazenadas no buffer até que ele atinja sua capacidade máxima. Então, o senhor não poderá mais emitir, e a tentativa de emissão lançará exceções. Mas o que podemos fazer nesse caso? Ao injetar o emissor, o senhor pode configurar uma estratégia de estouro. Por exemplo, o senhor pode definir o tamanho do buffer, usar um buffer ilimitado, descartar as mensagens, falhar ou simplesmente ignorar a contrapressão e deixar que o downstream lide com ela. Por padrão, ele usa um buffer, mas dependendo do seu caso de uso, o senhor pode querer configurá-lo de forma diferente:"

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid "Conclusion"
msgstr "Conclusão"

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid ""
"This post is a brief introduction to the `Emitter` construct from Reactive Messaging.\n"
"More information is available on the https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2.2/emitter/emitter.html[SmallRye Reactive Messaging documentation]."
msgstr "Este post é uma breve introdução à construção `Emitter` do Reactive Messaging. Mais informações estão disponíveis na link:https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2.2/emitter/emitter.html[documentação do SmallRye Reactive Messaging] ."

#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid ""
"In the next Quarkus version (1.9), this feature will be improved with two very nice enhancements.\n"
"First, it will offer a Mutiny variant, easing the integration with Mutiny APIs.\n"
"Then, it would be possible for the Kafka case to directly emit key/value pairs without needing to use metadata."
msgstr "Na próxima versão do Quarkus (1.9), esse recurso será aprimorado com duas melhorias muito boas. Primeiro, ele oferecerá uma variante Mutiny, facilitando a integração com as APIs Mutiny. Em seguida, será possível que o caso Kafka emita diretamente pares de chave/valor sem a necessidade de usar metadados."

#. type: Plain text
#: _posts/2020-10-06-reactive-messaging-emitter.adoc
#, fuzzy
msgid "Stay tuned! Will will cover these in a follow-up post!"
msgstr "Fique atento! O Will irá abordar estes temas numa publicação posterior!"
