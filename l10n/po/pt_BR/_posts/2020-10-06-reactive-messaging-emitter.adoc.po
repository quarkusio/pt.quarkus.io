# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:1
#, fuzzy, no-wrap
msgid "cescoffier"
msgstr "cescoffier"

#. type: YAML Front Matter: date
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:1
#, fuzzy, no-wrap
msgid "2020-10-06"
msgstr "2020-10-06"

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "posto"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:1
#, fuzzy, no-wrap
msgid "Emitting messages with Reactive Messaging Emitters"
msgstr "Emissão de mensagens com emissores de mensagens reactivas"

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:1
#, fuzzy, no-wrap
msgid "reactive mutiny messaging kafka"
msgstr "mutiny reativo mensagens kafka"

#. type: YAML Front Matter: title
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:1
#, fuzzy, no-wrap
msgid "Emitter - Bridging the imperative and the reactive worlds"
msgstr "Emissor - Faz a ponte entre o mundo imperativo e o mundo reativo"

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:11
#, fuzzy
msgid "In a https://quarkus.io/blog/kafka-avro/[previous blog post] about Kafka and Avro, we used an _emitter_ to send Kafka messages."
msgstr "Em um  link:https://quarkus.io/blog/kafka-avro/[post anterior] sobre o Kafka e o Avro, usamos um _emissor_ para enviar mensagens do Kafka."

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:13
#, fuzzy
msgid "image:/assets/images/posts/reactive-messaging-emitter/architecture.png[width=70%]"
msgstr "image:/assets/images/posts/reactive-messaging-emitter/architecture.png[alt=architecture]"

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:15
#, fuzzy
msgid "In this post, we are going look at this emitter construct a little bit more closely."
msgstr "Neste post, vamos analisar um pouco mais de perto a construção do emissor."

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:17
#, fuzzy
msgid "## Injecting an Emitter"
msgstr "Injetar um emissor"

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:20
#, fuzzy
msgid "Injecting an emitter is straightforward.  You indicate the targeted channel, i.e., where do you send your messages:"
msgstr "A injeção de um emissor é simples. Indica-se o canal de destino, ou seja, para onde se enviam as mensagens:"

#. type: delimited block -
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:24
#, no-wrap
msgid "@Inject @Channel(\"movies\") Emitter<Movie> emitter;\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:28
#, fuzzy
msgid "Remember that reactive messaging uses _channels_ as a primary abstraction.  They can be in-memory channels or mapped to a remote broker."
msgstr "Lembre-se que o envio reativo de mensagens utiliza _canais_ como abstração primária. Podem ser canais na memória ou mapeados para um corretor remoto."

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:33
#, fuzzy
msgid "In the previous code snippet, we inject an `Emitter<Movie>`.  It means you will send messages containing movies as payload.  So, the specified type is the payload type.  That lets you send: payloads directly (wrapped automatically in a message) or more detailed messages containing a movie as payload:"
msgstr "No trecho de código anterior, injetamos um `Emitter&amp;lt;Movie&amp;gt;`. Isso significa que você enviará mensagens contendo filmes como carga útil. Portanto, o tipo especificado é o tipo de carga útil. Isto permite-lhe enviar: cargas úteis diretamente (envolvidas automaticamente numa mensagem) ou mensagens mais detalhadas contendo um filme como carga útil:"

#. type: delimited block -
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:37
#, no-wrap
msgid "Movie movie = ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:40
#, no-wrap
msgid ""
"// Send payloads directly\n"
"emitter.send(movie);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:43
#, no-wrap
msgid ""
"// Send messages\n"
"emitter.send(Message.of(movie));\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:46
#, fuzzy
msgid "## Sending payloads"
msgstr "Envio de cargas úteis"

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:50
#, fuzzy
msgid "Sending payload is the simplest way to send data.  You just pass the payload to the `send` method like an instance of `Movie`.  Under the hood, it just creates a simple `Message` wrapping the payload."
msgstr "O envio de payload é a forma mais simples de enviar dados. Basta passar o payload para o método `send` como uma instância de `Movie`. Nos bastidores, ele apenas cria um simples `Message` envolvendo o payload."

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:52
#, fuzzy
msgid "When used with payload, the `send` method returns a `CompletionStage` indicating if the message processing succeeded or failed:"
msgstr "Quando utilizado com payload, o método `send` devolve um `CompletionStage` indicando se o processamento da mensagem foi bem sucedido ou falhou:"

#. type: delimited block -
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:63
#, no-wrap
msgid ""
"emitter.send(movie)\n"
"    .whenComplete((success, failure) -> {\n"
"        if (failure != null) {\n"
"            System.out.println(\"D'oh! \" + failure.getMessage());\n"
"        } else {\n"
"            System.out.println(\"Message processed successfully\");\n"
"        }\n"
"    });\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:71
#, fuzzy
msgid "Processing, and will see later event the emission, happens asynchronously.  So, the returned `CompletionStage` lets you know when the message is processed.  The `CompletionStage` is completed successfully when the message is acknowledged.  Most of the time, it means that the processing has been completed smoothly, or the message has been sent to a broker successfully.  If something wrong happens, the `CompletionStage` is completed exceptionally.  The passed exception gives you an idea of the reason."
msgstr "O processamento, como veremos mais adiante no evento da emissão, ocorre de forma assíncrona. Assim, o `CompletionStage` devolvido permite-lhe saber quando é que a mensagem é processada. O `CompletionStage` é concluído com êxito quando a mensagem é reconhecida. Na maioria das vezes, isso significa que o processamento foi concluído sem problemas ou que a mensagem foi enviada para um corretor com êxito. Se algo de errado acontecer, o `CompletionStage` é concluído excecionalmente. A exceção transmitida dá-lhe uma ideia do motivo."

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:73
#, fuzzy
msgid "## Sending messages"
msgstr "Envio de mensagens"

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:79
#, fuzzy
msgid "While sending payloads is more straightforward, sometimes you want to attach metadata to the message, like configuring how it should be written in Kafka, tracing information, etc.  The emitter also allows sending messages, and so attach the metadata you want.  In the following example, we configure the outbound Kafka record.  We set the key, the topic, and so on.  That way, you can dispatch messages to different topics and even decide dynamically:"
msgstr "Embora o envio de cargas úteis seja mais simples, por vezes é necessário anexar metadados à mensagem, como configurar a forma como deve ser escrita no Kafka, informações de rastreio, etc. O emissor também permite o envio de mensagens e, portanto, anexa os metadados desejados. No exemplo seguinte, configuramos o registo Kafka de saída. Definimos a chave, o tópico, etc. Desta forma, é possível enviar mensagens para diferentes tópicos e até decidir dinamicamente:"

#. type: delimited block -
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:87
#, no-wrap
msgid ""
"OutgoingKafkaRecordMetadata<?> metadata = OutgoingKafkaRecordMetadata.builder()\n"
"        .withTopic(\"movies\")\n"
"        .withKey(movie.getYear())\n"
"        .build();\n"
"emitter.send(Message.of(movie).addMetadata(metadata));\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:90
#, fuzzy
msgid "## Emissions are asynchronous"
msgstr "As emissões são assíncronas"

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:97
#, fuzzy
msgid "Emitters form a bridge between the imperative and the reactive worlds.  When you emit a message, this message is not processed immediately.  The downstream component consuming the message are part of a _Reactive Streams_.  Passing the message immediately would violate the Reactive Streams protocol.  We must be sure that the downstream components are ready to accept this message.  As a result, the emitter is not pushing the message directly, but enqueue it in a buffer used to handle the downstream capacity (requests in Reactive Streams lingo)."
msgstr "Os emissores formam uma ponte entre o mundo imperativo e o mundo reativo. Quando se emite uma mensagem, esta mensagem não é processada imediatamente. O componente a jusante que consome a mensagem faz parte de um _fluxo reativo_. Passar a mensagem imediatamente violaria o protocolo dos fluxos reactivos. Temos de ter a certeza de que os componentes a jusante estão prontos para aceitar esta mensagem. Por conseguinte, o emissor não envia a mensagem diretamente, mas coloca-a numa fila num buffer utilizado para tratar a capacidade a jusante (pedidos, na linguagem dos fluxos reactivos)."

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:99
#, fuzzy
msgid "image:/assets/images/posts/reactive-messaging-emitter/buffer.png[width=90%]"
msgstr "image:/assets/images/posts/reactive-messaging-emitter/buffer.png[alt=buffer]"

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:101
#, fuzzy
msgid "The downstream component receives the messages according to the requests it makes, ensuring its capacity is never exceeded."
msgstr "O componente a jusante recebe as mensagens de acordo com os pedidos que efectua, garantindo que a sua capacidade nunca é ultrapassada."

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:103
#, fuzzy
msgid "## Overflow management"
msgstr "Gestão de transbordos"

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:111
#, fuzzy
msgid "But with buffer comes... overflow.  If you emit too many messages and the downstream cannot keep up, the messages are stored in the buffer until it reaches its maximum capacity.  Then, you cannot emit anymore, and attempting to emit will throw exceptions.  But what can we do in this case? When injecting the emitter, you can configure an Overflow strategy.  For example, you can set the buffer size, use an unbounded buffer, drop the messages, fail, or just ignore the back pressure and let the downstream handle it.  By default, it uses a buffer, but depending on your use case, you may want to configure it differently:"
msgstr "Mas com o buffer vem... o transbordamento. Se emitir demasiadas mensagens e o downstream não conseguir acompanhar, as mensagens são armazenadas no buffer até este atingir a sua capacidade máxima. Então, não se pode emitir mais, e tentar emitir lançará excepções. Mas o que é que podemos fazer neste caso? Ao injetar o emissor, pode configurar uma estratégia de Overflow. Por exemplo, é possível definir o tamanho do buffer, usar um buffer ilimitado, descartar as mensagens, falhar ou simplesmente ignorar a contrapressão e deixar que o downstream lide com ela. Por padrão, ele usa um buffer, mas dependendo do seu caso de uso, você pode querer configurá-lo de forma diferente:"

#. type: delimited block -
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:118
#, no-wrap
msgid ""
"@Inject \n"
"@Channel(\"movies\") \n"
"@OnOverflow(value = OnOverflow.Strategy.BUFFER, bufferSize = 1000) \n"
"Emitter<Movie> emitter1;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:123
#, no-wrap
msgid ""
"@Inject \n"
"@Channel(\"movies\") \n"
"@OnOverflow(value = OnOverflow.Strategy.NONE) \n"
"Emitter<Movie> emitter2;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:128
#, no-wrap
msgid ""
"@Inject \n"
"@Channel(\"movies\") \n"
"@OnOverflow(value = OnOverflow.Strategy.UNBOUNDED_BUFFER) \n"
"Emitter<Movie> emitter3;\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:131
#, fuzzy
msgid "## Conclusion"
msgstr "Conclusão"

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:134
#, fuzzy
msgid "This post is a brief introduction to the `Emitter` construct from Reactive Messaging.  More information is available on the https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2.2/emitter/emitter.html[SmallRye Reactive Messaging documentation]."
msgstr "Este post é uma breve introdução à construção `Emitter` do Reactive Messaging. Mais informações estão disponíveis na  link:https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2.2/emitter/emitter.html[documentação do SmallRye Reactive Messaging]."

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:138
#, fuzzy
msgid "In the next Quarkus version (1.9), this feature will be improved with two very nice enhancements.  First, it will offer a Mutiny variant, easing the integration with Mutiny APIs.  Then, it would be possible for the Kafka case to directly emit key/value pairs without needing to use metadata."
msgstr "Na próxima versão do Quarkus (1.9), esta funcionalidade será melhorada com duas melhorias muito interessantes. Primeiro, oferecerá uma variante Mutiny, facilitando a integração com as APIs Mutiny. Depois, será possível que o caso Kafka emita diretamente pares chave/valor sem necessidade de utilizar metadados."

#. type: Plain text
#: upstream/_posts/2020-10-06-reactive-messaging-emitter.adoc:139
#, fuzzy
msgid "Stay tuned! Will will cover these in a follow-up post!"
msgstr "Fique atento! O Will irá abordar estes temas numa publicação posterior!"
