# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:07+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:1
#, fuzzy, no-wrap
msgid "phillipkruger"
msgstr "phillipkruger"

#. type: YAML Front Matter: date
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:1
#, fuzzy, no-wrap
msgid "2020-10-27"
msgstr "2020-10-27"

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "posto"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:1
#, fuzzy, no-wrap
msgid "Exploring some experimental SmallRye GraphQL features"
msgstr "Explorando alguns recursos experimentais do SmallRye GraphQL"

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:1
#, fuzzy, no-wrap
msgid "extension graphql"
msgstr "extensão graphql"

#. type: Title =
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:1
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:11
#, fuzzy, no-wrap
msgid "Experimental GraphQL"
msgstr "GraphQL experimental"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:14
#, fuzzy
msgid "This blog post is a follow up on the initial introductory post, link:/blog/supersonic-subatomic-graphql/[Supersonic Subatomic GraphQL], and here we will explore more features, some that is experimental, that we hope to eventually move to the MicroProfile GraphQL Specification (based on your feedback !)"
msgstr "Esta publicação do blogue é um seguimento da publicação introdutória inicial,  link:/blog/supersonic-subatomic-graphql/[Supersonic Subatomic GraphQL], e aqui vamos explorar mais funcionalidades, algumas experimentais, que esperamos eventualmente passar para a MicroProfile GraphQL Specification (com base no seu feedback!)"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:16
#, fuzzy
msgid "We will look at the following:"
msgstr "Analisaremos os seguintes aspectos:"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:18
#, fuzzy
msgid "Operational Context - Optimize your downstream processes."
msgstr "Contexto operacional - Optimize os seus processos a jusante."

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:19
#, fuzzy
msgid "Cache - Caching your endpoints."
msgstr "Cache - Colocar em cache os seus pontos finais."

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:20
#, fuzzy
msgid "Asynchronous - Concurrent execution of multiple requests or sources."
msgstr "Assíncrono - Execução simultânea de vários pedidos ou fontes."

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:21
#, fuzzy
msgid "Batch - Solving N+1."
msgstr "Lote - Resolução de N+1."

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:22
#, fuzzy
msgid "Generics support."
msgstr "Apoio aos genéricos."

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:23
#, fuzzy
msgid "Events and custom execution."
msgstr "Eventos e execução personalizada."

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:24
#, fuzzy
msgid "Transformation and mapping."
msgstr "Transformação e cartografia."

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:25
#, fuzzy
msgid "Build tools - Maven and Gradle support."
msgstr "Ferramentas de construção - suporte para Maven e Gradle."

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:27
#, fuzzy
msgid "All source code is available here: https://github.com/phillip-kruger/graphql-experimental[github.com/phillip-kruger/graphql-experimental]"
msgstr "Todo o código-fonte está disponível aqui:  link:https://github.com/phillip-kruger/graphql-experimental[github.com/phillip-kruger/graphql-experimental]"

#. type: Title ==
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:28
#, fuzzy, no-wrap
msgid "Operational Context"
msgstr "Contexto operacional"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:31
#, fuzzy
msgid "The Context Object is an experimental Object that can be injected anywhere in your code, downstream from your `@GraphQLApi`."
msgstr "O objeto Context é um objeto experimental que pode ser injetado em qualquer parte do seu código, a jusante do seu `@GraphQLApi`."

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:33
#, fuzzy
msgid "It's in the `api` module in SmallRye GraphQL, with the intention to eventually move this up to the MicroProfile GraphQL Api."
msgstr "Ele está no módulo `api` no SmallRye GraphQL, com a intenção de eventualmente movê-lo para o MicroProfile GraphQL Api."

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:35
#, fuzzy
msgid "Example:"
msgstr "Exemplo:"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:37
#, fuzzy
msgid "We have a Person GraphQL Endpoint, that uses some service to get the person from where ever it is stored."
msgstr "Temos um ponto de extremidade GraphQL de pessoa, que usa algum serviço para obter a pessoa de onde quer que ela esteja armazenada."

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:39
#, fuzzy
msgid "The endpoint:"
msgstr "O ponto final:"

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:44
#, no-wrap
msgid ""
"@GraphQLApi\n"
"public class PersonEndpoint {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:47
#, no-wrap
msgid ""
"    @Inject\n"
"    PersonService personService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:52
#, no-wrap
msgid ""
"    @Query\n"
"    public List<Person> getPeople(){\n"
"        return personService.getAllPeople();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:58
#, no-wrap
msgid ""
"    @Query\n"
"    public Person getPerson(int id){\n"
"        return personService.getPerson(id);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:61
#, fuzzy
msgid "A Person is a basic POJO, that can have multiple relationships, that in turn has a Person. So making a call to the database to get a person, can end up retuning more people, depending on the number of relationships. In our example, we have Person 1 that has a `Spouse`, Person 2."
msgstr "Uma pessoa é um POJO básico, que pode ter vários relacionamentos, que por sua vez têm uma pessoa. Assim, fazer uma chamada à base de dados para obter uma pessoa, pode acabar por devolver mais pessoas, dependendo do número de relações. No nosso exemplo, temos a Pessoa 1 que tem um `Spouse`, Pessoa 2."

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:62
#, fuzzy, no-wrap
msgid "classdiagramm"
msgstr "classdiagramm"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:62
#, no-wrap
msgid "PersonClassDiagram.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:66
#, fuzzy
msgid "Now let's assume that `PersonService` makes a call to a database or some other storage to get the data. We can now inject the context object to get details on the request, and optimise our call:"
msgstr "Agora vamos supor que `PersonService` faz uma chamada para um banco de dados ou algum outro armazenamento para obter os dados. Podemos agora injetar o objeto de contexto para obter detalhes sobre o pedido e otimizar a nossa chamada:"

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:71
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:73
#, no-wrap
msgid "    @Inject Context context;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:78
#, no-wrap
msgid ""
"    public Person getPerson(int id){\n"
"        // Use context to get more information on the query\n"
"        // Let's print out the context here and see what we have\n"
"        System.out.println(context);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:82
#, no-wrap
msgid ""
"        // Get the person from the datastore here.\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:85
#, fuzzy
msgid "Let's do a `Query` to get the name and surname of Person 1:"
msgstr "Vamos fazer um `Query` para obter o nome e o apelido da Pessoa 1:"

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:94
#, no-wrap
msgid ""
"{\n"
"  person(id:1){\n"
"    names\n"
"    surname\n"
"  }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:96
#, fuzzy, no-wrap
msgid "So what can you get from context ?"
msgstr "O que é que se pode obter do contexto?"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:99
#, fuzzy
msgid "There are a few things we can get:"
msgstr "Há algumas coisas que podemos obter:"

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:119
#, no-wrap
msgid ""
"executionId = 30337360\n"
"request = {\"query\":\"{\\n  person(id:1){\\n    names\\n    surname\\n  }\\n}\",\"variables\":null}\n"
"operationName = null\n"
"operationTypes = [Query]\n"
"parentTypeName = Query\n"
"variables = null\n"
"query = {\n"
"  person(id:1){\n"
"    names\n"
"    surname\n"
"  }\n"
"},\n"
"fieldName = person\n"
"selectedFields = [\"names\",\"surname\"]\n"
"source = null\n"
"arguments = {id=1}\n"
"path = /person\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:122
#, fuzzy
msgid "What we probably want to know is which fields have been requested, so that we can do a better database query."
msgstr "O que provavelmente queremos saber é quais os campos que foram pedidos, para podermos fazer uma melhor consulta da base de dados."

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:124
#, fuzzy
msgid "So the fieldName (`person`) and the selectedFields (`names`,`surname`) is what we need."
msgstr "Assim, o fieldName ( `person`) e os selectedFields ( `names`, `surname`) são o que precisamos."

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:126
#, fuzzy
msgid "A more complex GraphQL Request, will then lead to a more complex datasource query, example, if we want to know the relationships we would do:"
msgstr "Um pedido GraphQL mais complexo conduzirá a uma consulta de fonte de dados mais complexa, por exemplo, se quisermos conhecer as relações que faríamos:"

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:142
#, no-wrap
msgid ""
"{\n"
"  person(id:1){\n"
"    names\n"
"    surname\n"
"    relations{\n"
"      relationType\n"
"      person{\n"
"        names\n"
"        surname\n"
"      }\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:145
#, fuzzy
msgid "That will give us this in the `Context` selectedFields:"
msgstr "Isto dar-nos-á o seguinte em `Context` selectedFields:"

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:166
#, no-wrap
msgid ""
"[\n"
"   \"names\",\n"
"   \"surname\",\n"
"   {\n"
"      \"relations\":[\n"
"         {\n"
"            \"relationType\":[\n"
"            ]\n"
"         },\n"
"         {\n"
"            \"person\":[\n"
"               \"names\",\n"
"               \"surname\"\n"
"            ]\n"
"         }\n"
"      ]\n"
"   }\n"
"]\n"
msgstr ""

#. type: Title ===
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:168
#, fuzzy, no-wrap
msgid "Context in source methods"
msgstr "Contexto nos métodos de origem"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:171
#, fuzzy
msgid "Let's add a field to person using `@Source` and see what the context can give us then. First we will add a service that fetches the exchange rate from an api (http://exchangeratesapi.io/[exchangeratesapi.io]). This allows us to add the exchange rate for that person against some currency."
msgstr "Vamos adicionar um campo à pessoa utilizando `@Source` e ver o que o contexto nos pode dar. Em primeiro lugar, vamos adicionar um serviço que vai buscar a taxa de câmbio a uma API link:http://exchangeratesapi.io/[(exchangeratesapi.io]). Isto permite-nos adicionar a taxa de câmbio dessa pessoa em relação a uma determinada moeda."

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:173
#, fuzzy
msgid "In Java we add this `Source` method:"
msgstr "Em Java, adicionamos este método `Source`:"

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:181
#, no-wrap
msgid ""
"public ExchangeRate getExchangeRate(@Source Person person, CurencyCode against){\n"
"    Map<CurencyCode, Double> map = exchangeRateService.getExchangeRates(against);\n"
"    Double rate = map.get(person.curencyCode);\n"
"    return new ExchangeRate(person.curencyCode, against, rate);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:184
#, fuzzy
msgid "Now we can query that (`ExchangeRate`) field:"
msgstr "Agora podemos consultar esse campo ( `ExchangeRate`):"

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:196
#, no-wrap
msgid ""
"{\n"
"  person(id:1){\n"
"    names\n"
"    surname\n"
"    exchangeRate(against:GBP){\n"
"      rate\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:199
#, fuzzy
msgid "When we `Inject` and print the context in the `ExchangeRateService` we now get:"
msgstr "Quando `Inject` e imprimimos o contexto em `ExchangeRateService` obtemos agora:"

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:223
#, no-wrap
msgid ""
"executionId = 17333236733\n"
"request = {\"query\":\"{\\n  person(id:1){\\n    names\\n    surname\\n    exchangeRate(against:GBP){\\n      rate\\n    }\\n  }\\n}\",\"variables\":null}\n"
"operationName = null\n"
"operationTypes = [Query]\n"
"parentTypeName = Person\n"
"variables = null\n"
"query = {\n"
"  person(id:1){\n"
"    names\n"
"    surname\n"
"    exchangeRate(against:GBP){\n"
"      rate\n"
"    }\n"
"  }\n"
"}\n"
"fieldName = exchangeRate\n"
"selectedFields = [\"rate\"]\n"
"source = com.github.phillipkruger.user.model.Person@7929ad0a\n"
"arguments = {against=GBP}\n"
"fieldName = exchangeRate\n"
"path = /person/exchangeRate\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:226
#, fuzzy
msgid "Note that the fieldName is now `exchangeRate` and the selectedFields is `[\"rate\"]`. You will also note that the source field is populated with the person."
msgstr "Note que o fieldName é agora `exchangeRate` e o selectedFields é `[\"rate\"]`. Também se nota que o campo source é preenchido com a pessoa."

#. type: Title ==
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:227
#, fuzzy, no-wrap
msgid "Cache"
msgstr "Cache"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:230
#, fuzzy
msgid "Another question that comes up regularly is how can you cache your endpoint results. As an example, let's say the Exchange Rate information can be updated daily, so we do not want to make a call to the http://exchangeratesapi.io/[exchangeratesapi.io] for every call."
msgstr "Outra questão que surge regularmente é como armazenar em cache os resultados do ponto de extremidade. Por exemplo, digamos que as informações sobre a taxa de câmbio podem ser actualizadas diariamente, pelo que não queremos fazer uma chamada ao  link:http://exchangeratesapi.io/[exchangeratesapi.io] para cada chamada."

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:232
#, fuzzy
msgid "You can just use the caching that comes with Quarkus! Simply include the cache extension:"
msgstr "Pode simplesmente utilizar a cache que vem com o Quarkus! Basta incluir a extensão de cache:"

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:239
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-cache</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:242
#, fuzzy
msgid "And add the `@CacheResult` annotation to your method:"
msgstr "E adicione a anotação `@CacheResult` ao seu método:"

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:251
#, no-wrap
msgid ""
"@CacheResult(cacheName = \"exchange-rate-cache\")\n"
"public ExchangeRate getExchangeRate(@Source Person person, CurencyCode against){\n"
"    Map<CurencyCode, Double> map = exchangeRateService.getExchangeRates(against);\n"
"    Double rate = map.get(person.curencyCode);\n"
"    return new ExchangeRate(person.curencyCode, against, rate);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:254
#, fuzzy
msgid "Read more about caching in Quarkus here: https://quarkus.io/guides/cache[quarkus.io/guides/cache]"
msgstr "Leia mais sobre o armazenamento em cache no Quarkus aqui:  link:https://quarkus.io/guides/cache[quarkus.io/guides/cache]"

#. type: Title ==
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:255
#, fuzzy, no-wrap
msgid "Asynchronous"
msgstr "Assíncrono"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:258
#, fuzzy
msgid "Now, let's add another service that returns the weather conditions for a city:"
msgstr "Agora, vamos adicionar outro serviço que devolve as condições meteorológicas de uma cidade:"

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:263
#, no-wrap
msgid ""
"@GraphQLApi\n"
"public class TravelEndpoint {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:266
#, no-wrap
msgid ""
"    @Inject\n"
"    WeatherService weatherService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:271
#, no-wrap
msgid ""
"    @Query\n"
"    public Weather getWeather(String city){\n"
"        return weatherService.getWeather(city);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:273
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:276
#, fuzzy
msgid "Let's say this person is traveling to London, you can now do something like this:"
msgstr "Digamos que esta pessoa está a viajar para Londres, pode agora fazer algo deste género:"

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:293
#, no-wrap
msgid ""
"{\n"
"  person(id:1){\n"
"    names\n"
"    surname\n"
"    exchangeRate(against:GBP){\n"
"      rate\n"
"    }\n"
"  }\n"
"  weather(city:\"London\"){\n"
"    description\n"
"    min\n"
"    max\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:296
#, fuzzy
msgid "At the moment the person and weather query will execute sequentially, and there is no real reason that this should be the case. We can get the weather at the same time that we get the person."
msgstr "De momento, a consulta da pessoa e do tempo serão executadas sequencialmente, e não há nenhuma razão real para que seja esse o caso. Podemos obter a meteorologia ao mesmo tempo que obtemos a pessoa."

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:297
#, fuzzy, no-wrap
msgid "async1"
msgstr "assíncrono1"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:297
#, no-wrap
msgid "async1.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:300
#, fuzzy
msgid "Let's change the java code:"
msgstr "Vamos alterar o código java:"

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:307
#, no-wrap
msgid ""
"@Query\n"
"public CompletableFuture<Person> getPerson(int id){\n"
"    return CompletableFuture.supplyAsync(() -> personService.getPerson(id));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:310
#, fuzzy
msgid "and"
msgstr "e"

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:317
#, no-wrap
msgid ""
"@Query\n"
"public CompletableFuture<Weather> getWeather(String city){\n"
"    return weatherService.getWeather(city);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:320
#, fuzzy
msgid "Now person and weather are being fetched concurrently."
msgstr "Agora, a pessoa e o tempo estão a ser obtidos em simultâneo."

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:322
#, fuzzy
msgid "Let's say this person actually wants to travel to London _and_ New York, we can do something like this:"
msgstr "Digamos que esta pessoa quer realmente viajar para Londres _e_ Nova Iorque, podemos fazer algo deste género:"

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:347
#, no-wrap
msgid ""
"{\n"
"  person(id:1){\n"
"    names\n"
"    surname\n"
"    gbp:exchangeRate(against:GBP){\n"
"      rate\n"
"    }\n"
"    usd:exchangeRate(against:USD){\n"
"      rate\n"
"    }\n"
"  }\n"
"  uk:weather(city:\"London\"){\n"
"    description\n"
"    min\n"
"    max\n"
"  }\n"
"  us:weather(city:\"New York\"){\n"
"    description\n"
"    min\n"
"    max\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:350
#, fuzzy
msgid "We can now change the code to also fetch the exchange rates concurrently:"
msgstr "Podemos agora alterar o código para também ir buscar as taxas de câmbio em simultâneo:"

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:351
#, fuzzy, no-wrap
msgid "async2"
msgstr "assíncrono2"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:351
#, no-wrap
msgid "async2.png"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:358
#, no-wrap
msgid ""
"public CompletableFuture<ExchangeRate> getExchangeRate(@Source Person person, CurencyCode against){\n"
"    return CompletableFuture.supplyAsync(() -> exchangeRateService.getExchangeRate(against,person.curencyCode));\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:360
#, fuzzy, no-wrap
msgid "Batch"
msgstr "Lote"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:363
#, fuzzy
msgid "If you want to get ALL people, and you are including a field (like `exchangeRate`) with a `Source` method, it means that for every person, we will call the `getExchangeRate` method. Depending on the number of people, that could be a lot of calls. So you might rather want to do a batch source method."
msgstr "Se quiser obter TODAS as pessoas e estiver a incluir um campo (como `exchangeRate`) com um método `Source`, isso significa que, para cada pessoa, chamaremos o método `getExchangeRate`. Dependendo do número de pessoas, isso pode ser um grande número de chamadas. Por isso, é preferível utilizar um método batch source."

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:364
#, fuzzy, no-wrap
msgid "batch"
msgstr "lote"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:364
#, no-wrap
msgid "batch.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:367
#, fuzzy
msgid "This will allow you to get all the people in one method and do one call to get their exchange rates."
msgstr "Desta forma, poderá reunir todas as pessoas num único método e fazer uma chamada para obter as respectivas taxas de câmbio."

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:369
#, fuzzy
msgid "So, let's change the `getExchangeRate` method to take a `List` of person and return a `List` of `ExchangeRate`:"
msgstr "Assim, vamos alterar o método `getExchangeRate` para receber um `List` de pessoa e devolver um `List` de `ExchangeRate`:"

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:374
#, no-wrap
msgid ""
"public List<ExchangeRate> getExchangeRate(@Source List<Person> people, CurencyCode against){\n"
"    Map<CurencyCode, Double> map = exchangeRateService.getExchangeRates(against);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:380
#, no-wrap
msgid ""
"    List<ExchangeRate> rates = new ArrayList<>();\n"
"    for(Person person : people){\n"
"        Double rate = map.get(person.curencyCode);\n"
"        rates.add(new ExchangeRate(person.curencyCode, against, rate));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:383
#, no-wrap
msgid ""
"    return rates;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:386
#, fuzzy
msgid "Above will still work on `getPerson` method where there is only one person."
msgstr "O acima exposto continua a funcionar no método `getPerson`, em que há apenas uma pessoa."

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:388
#, fuzzy
msgid "Doing a query on all people:"
msgstr "Fazer uma pesquisa sobre todas as pessoas:"

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:400
#, no-wrap
msgid ""
"{\n"
"  people{\n"
"    names\n"
"    surname\n"
"    exchangeRate(against:GBP){\n"
"      rate\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:403
#, fuzzy
msgid "This will call the `getExchangeRate` method with all people."
msgstr "Esta ação chamará o método `getExchangeRate` a todas as pessoas."

#. type: Title ==
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:404
#, fuzzy, no-wrap
msgid "Generics"
msgstr "Genéricos"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:407
#, fuzzy
msgid "It's the year 2050 and we need to extend our travel service to also cater for aliens. Let's add a generic `Being` type:"
msgstr "Estamos no ano de 2050 e precisamos de alargar o nosso serviço de viagens para atender também os extraterrestres. Vamos acrescentar um tipo genérico `Being`:"

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:411
#, no-wrap
msgid "public class Being<T> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:413
#, no-wrap
msgid "    private T being;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:416
#, no-wrap
msgid ""
"    public Being() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:420
#, no-wrap
msgid ""
"    public Being(T being) {\n"
"        this.being = being;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:424
#, no-wrap
msgid ""
"    public T getBeing() {\n"
"        return being;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:429
#, no-wrap
msgid ""
"    public void setBeing(T being) {\n"
"        this.being = being;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:432
#, fuzzy
msgid "And now change the Endpoint to allow people and alien queries:"
msgstr "E agora altere o Endpoint para permitir consultas de pessoas e extraterrestres:"

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:439
#, no-wrap
msgid ""
"@Query\n"
"public Being<Person> getPerson(int id){\n"
"    return new Being<>(personService.getPerson(id));\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:444
#, no-wrap
msgid ""
"@Query\n"
"public Being<Alien> getAlien(int id){\n"
"    return new Being<>(alienService.getAlien(id));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:447
#, fuzzy
msgid "We can then query both human and alien beings:"
msgstr "Podemos então interrogar tanto os seres humanos como os extraterrestres:"

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:464
#, no-wrap
msgid ""
"{\n"
"  person(id:1){\n"
"    being{\n"
"      names\n"
"      surname\n"
"    }\n"
"  }\n"
"  alien(id:1){\n"
"    being{\n"
"      type\n"
"      from\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:466
#, fuzzy, no-wrap
msgid "Events and custom execution"
msgstr "Eventos e execução personalizada"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:470
#, fuzzy
msgid "Events are used internally when you enable integration with MicroProfile Metrics, MicroProfile OpenTracing and Bean Validation, but you can also take part in these events.  These are all CDI Events and can be used with the `@Observes` annotation."
msgstr "Os eventos são utilizados internamente quando se ativa a integração com MicroProfile Metrics, MicroProfile OpenTracing e Bean Validation, mas também se pode participar nestes eventos. Todos eles são eventos CDI e podem ser utilizados com a anotação `@Observes`."

#. type: Title ===
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:471
#, fuzzy, no-wrap
msgid "While building the schema"
msgstr "Durante a criação do esquema"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:474
#, fuzzy
msgid "When we scan the classpath for annotations and types, we build up a https://github.com/smallrye/smallrye-graphql/tree/main/common/schema-model[model] of all the operations. You can manipulate this model by taking part in the _create operation_ event:"
msgstr "Quando procuramos anotações e tipos no classpath, criamos um  link:https://github.com/smallrye/smallrye-graphql/tree/main/common/schema-model[modelo] de todas as operações. É possível manipular este modelo participando no evento de _criação da operação_:"

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:481
#, no-wrap
msgid ""
"public Operation createOperation(@Observes Operation operation) {\n"
"    // Here manipulate operation\n"
"    return operation;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:485
#, fuzzy
msgid "Just before the final schema is built, after scanning all annotations and after the above event, you can _take part_ and contribute to the schema: This exposes the underlying `graphql-java` implementation details, and can be useful when you want to do things that are not yet implemented in SmallRye GraphQL, like subscriptions for instance:"
msgstr "Pouco antes de o esquema final ser construído, depois de verificar todas as anotações e após o evento acima, você pode _participar_ e contribuir para o esquema: Isso expõe os detalhes da implementação do `graphql-java` e pode ser útil quando se quer fazer coisas que ainda não estão implementadas no SmallRye GraphQL, como assinaturas, por exemplo:"

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:492
#, no-wrap
msgid ""
"public GraphQLSchema.Builder beforeSchemaBuild(@Observes GraphQLSchema.Builder builder) {\n"
"    // Here add you own, in example a subscription\n"
"    return builder;\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:494
#, fuzzy, no-wrap
msgid "While running a request"
msgstr "Durante a execução de um pedido"

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:496
#, fuzzy, no-wrap
msgid "events"
msgstr "eventos"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:496
#, no-wrap
msgid "events.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:499
#, fuzzy
msgid "In this example request:"
msgstr "Neste pedido de exemplo:"

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:512
#, no-wrap
msgid ""
"{\n"
"  person(id:1){\n"
"    names\n"
"    surname\n"
"    exchangeRate(against:USD){\n"
"      rate\n"
"      base\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:515
#, fuzzy
msgid "the request flow is as follows:"
msgstr "o fluxo de pedidos é o seguinte:"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:517
#, fuzzy
msgid "The Execution service gets the request."
msgstr "O Execution Service recebe o pedido."

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:518
#, fuzzy
msgid "The person is being fetched with a `datafetcher`."
msgstr "A pessoa está a ser buscada com um `datafetcher`."

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:519
#, fuzzy
msgid "Your CDI bean (`@GraphQLApi`) method (`getPerson`) is being invoked."
msgstr "O método do seu bean CDI ( `@GraphQLApi`) ( `getPerson`) está a ser invocado."

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:520
#, fuzzy
msgid "The exchange rate is being fetched, passing the above person as an argument."
msgstr "A taxa de câmbio está a ser obtida, passando a pessoa acima como um argumento."

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:521
#, fuzzy
msgid "Your CDI bean (`@GraphQLApi`) method (`getExchangeRate`) is being invoked."
msgstr "O método do seu bean CDI ( `@GraphQLApi`) ( `getExchangeRate`) está a ser invocado."

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:522
#, fuzzy
msgid "Data is being returned."
msgstr "Os dados estão a ser devolvidos."

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:524
#, fuzzy
msgid "You can receive events on all of these points:"
msgstr "Pode receber eventos sobre todos estes pontos:"

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:530
#, no-wrap
msgid ""
"public void beforeExecute(@Observes @BeforeExecute Context context) {\n"
"    System.err.println(\">>>>> Received beforeExecute event [\" + context.getQuery() + \"]\");\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:534
#, no-wrap
msgid ""
"public void beforeDataFetch(@Observes @BeforeDataFetch Context context) {\n"
"    System.err.println(\">>>>> Received beforeDataFetch event [\" + context.getQuery() + \"]\");\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:538
#, no-wrap
msgid ""
"public void beforeInvoke(@Observes InvokeInfo invokeInfo) {\n"
"    System.err.println(\">>>>> Received beforeInvoke event [\" + invokeInfo.getOperationMethod().getName() + \"]\");\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:542
#, no-wrap
msgid ""
"public void afterDataFetch(@Observes @AfterDataFetch Context context) {\n"
"    System.err.println(\">>>>> Received afterDataFetch event [\" + context.getQuery() + \"]\");\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:546
#, no-wrap
msgid ""
"public void afterExecute(@Observes @AfterExecute Context context) {\n"
"    System.err.println(\">>>>> Received afterExecute event [\" + context.getQuery() + \"]\");\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:549
#, fuzzy
msgid "You can also get events when an error occurs:"
msgstr "Também é possível obter eventos quando ocorre um erro:"

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:555
#, no-wrap
msgid ""
"public void errorExecute(@Observes @ErrorExecute ErrorInfo errorInfo) {\n"
"    System.err.println(\">>>>> Received errorExecute event [\" + errorInfo.getT() + \"]\");\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:559
#, no-wrap
msgid ""
"public void errorDataFetch(@Observes @ErrorDataFetch ErrorInfo errorInfo) {\n"
"    System.err.println(\">>>>> Received errorDataFetch event [\" + errorInfo.getT() + \"]\");\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:561
#, fuzzy, no-wrap
msgid "Using the Execution Service directly"
msgstr "Utilizar diretamente o Execution Service"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:564
#, fuzzy
msgid "The default assumed behavior is to interact with your endpoint via HTTP, you can however inject the `ExecutionService` yourself and execute requests."
msgstr "O comportamento assumido por defeito é interagir com o seu ponto final através de HTTP. No entanto, pode injetar o `ExecutionService` e executar pedidos."

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:566
#, fuzzy
msgid "As an example, lets do a request that gets all the names of all the people on startup:"
msgstr "Como exemplo, vamos fazer um pedido que obtém todos os nomes de todas as pessoas no arranque:"

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:574
#, no-wrap
msgid ""
"{\n"
"  people{\n"
"    names\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:577
#, fuzzy
msgid "We can now do this:"
msgstr "Agora podemos fazer isso:"

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:582
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class StartupService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:584
#, no-wrap
msgid "    @Inject ExecutionService executionService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:586
#, no-wrap
msgid "    public void init(@Observes StartupEvent event){\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:591
#, no-wrap
msgid ""
"        JsonObjectBuilder builder = Json.createObjectBuilder();\n"
"        builder.add(\"query\", ALL_NAMES);\n"
"        JsonObject request = builder.build();\n"
"        JsonObject response = executionService.execute(request);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:593
#, no-wrap
msgid "        System.err.println(\">>>>> \" + response);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:595
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:602
#, no-wrap
msgid ""
"    private static final String ALL_NAMES = \"{\\n\" +\n"
"                                            \"people{\\n\" +\n"
"                                            \"    names\\n\" +\n"
"                                            \"  }\\n\" +\n"
"                                            \"}\";\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:604
#, fuzzy, no-wrap
msgid "Transformation and mapping"
msgstr "Transformação e cartografia"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:607
#, fuzzy
msgid "By default, Date and Number values can be transformed using https://javaee.github.io/jsonb-spec/docs/user-guide.html#date-number-formats[JsonB Formats]"
msgstr "Por predefinição, os valores de Data e Número podem ser transformados utilizando  link:https://javaee.github.io/jsonb-spec/docs/user-guide.html#date-number-formats[Formatos JsonB]"

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:612
#, no-wrap
msgid ""
"public class Person {\n"
"    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:615
#, no-wrap
msgid ""
"    @JsonbDateFormat(\"dd.MM.yyyy\")\n"
"    private Date birthDate;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:619
#, no-wrap
msgid ""
"    @JsonbNumberFormat(\"#0.00\")\n"
"    public BigDecimal salary;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:622
#, fuzzy
msgid "MicroProfile GraphQL Specification maps the relevant Java types to a GraphQL Scalar. You can change the mapping of an existing field to map to another Scalar type like this:"
msgstr "O MicroProfile GraphQL Specification mapeia os tipos Java relevantes para um GraphQL Scalar. É possível alterar o mapeamento de um campo existente para mapear para outro tipo Scalar da seguinte forma:"

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:627
#, no-wrap
msgid ""
"@ToScalar(Scalar.Int.class)\n"
"Long id; // This usually maps to BigInteger\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:630
#, fuzzy
msgid "In the GraphQL Schema this will now map to an `int`."
msgstr "No esquema GraphQL, isso agora será mapeado para um `int`."

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:632
#, fuzzy
msgid "You can also add an Object that should transform to a `Scalar` Type and not a complex object, example you might have an `Email` Object, but do not want to use a complex type in GraphQL, and rather map this to a `String`:"
msgstr "Você também pode adicionar um Objeto que deve ser transformado em um `Scalar` Type e não em um objeto complexo, por exemplo, você pode ter um Objeto `Email`, mas não quer usar um tipo complexo no GraphQL, e sim mapeá-lo para um `String`:"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:634
#, fuzzy
msgid "To do this your `Email` POJO needs to implement the `toString` method and have a constructor that takes a String, or a static `Email fromString(String s)` method, or a `setValue(String value)` method."
msgstr "Para tal, o POJO `Email` tem de implementar o método `toString` e ter um construtor que aceite uma String, ou um método estático `Email fromString(String s)`, ou um método `setValue(String value)`."

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:639
#, no-wrap
msgid ""
"public class Email {\n"
"    private String value;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:642
#, no-wrap
msgid ""
"    public Email() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:646
#, no-wrap
msgid ""
"    public Email(String value) {\n"
"        this.value = value;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:650
#, no-wrap
msgid ""
"    public String getValue() {\n"
"        return value;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:654
#, no-wrap
msgid ""
"    public void setValue(String value) {\n"
"        this.value = value;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:660
#, no-wrap
msgid ""
"    @Override\n"
"    public String toString() {\n"
"        return value;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:663
#, fuzzy
msgid "You can then use this as a field on your Response and add the `@ToScalar` annotation, i.e. person:"
msgstr "Pode então utilizá-lo como um campo na sua resposta e adicionar a anotação `@ToScalar`, ou seja, pessoa:"

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:668
#, no-wrap
msgid ""
"@ToScalar(Scalar.String.class)\n"
"Email email; // This usually maps to a complex object\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:670
#, fuzzy, no-wrap
msgid "Build tools"
msgstr "Ferramentas de construção"

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:673
#, fuzzy
msgid "Lastly, support has been added to generate the schema on https://github.com/smallrye/smallrye-graphql/tree/main/tools[build] using https://github.com/smallrye/smallrye-graphql/tree/main/tools/maven-plugin[`maven`] (or https://github.com/smallrye/smallrye-graphql/tree/main/tools/gradle-plugin[`gradle`])."
msgstr "Por fim, foi adicionado suporte para gerar o esquema na  link:https://github.com/smallrye/smallrye-graphql/tree/main/tools[compilação] usando  link:https://github.com/smallrye/smallrye-graphql/tree/main/tools/maven-plugin[`maven`] (ou  link:https://github.com/smallrye/smallrye-graphql/tree/main/tools/gradle-plugin[`gradle`])."

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:675
#, fuzzy
msgid "Example, in `maven` you can add this to your `pom.xml`:"
msgstr "Por exemplo, em `maven` pode adicionar isto ao seu `pom.xml`:"

#. type: delimited block -
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:689
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>smallrye-graphql-maven-plugin</artifactId>\n"
"    <groupId>io.smallrye</groupId>\n"
"    <executions>\n"
"        <execution>\n"
"            <goals>\n"
"                <goal>generate-schema</goal>\n"
"            </goals>\n"
"        </execution>\n"
"    </executions>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-experimental_graphql.adoc:691
#, fuzzy
msgid "and the generated schema will be stored in `target/generated/`."
msgstr "e o esquema gerado será armazenado em `target/generated/`."
