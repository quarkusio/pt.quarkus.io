# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title ==
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "Quarkus support for AWS Lambda SnapStart"
msgstr "Suporte do Quarkus para o AWS Lambda SnapStart"

#. type: YAML Front Matter: synopsis
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "Amazon Web Services (AWS)  announced the SnapStart feature for AWS Lambda. SnapStart reduces startup latency for Java-based functions running on AWS Lambda, and Quarkus supports it from day one!"
msgstr "A Amazon Web Services (AWS) anunciou o recurso SnapStart para o AWS Lambda. O SnapStart reduz a latência de inicialização para funções baseadas em Java em execução no AWS Lambda, e o Quarkus oferece suporte a ele desde o primeiro dia!"

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "Amazon Web Services (AWS)  http://aws.amazon.com/blogs/aws/new-accelerate-your-lambda-functions-with-lambda-snapstart[announced] the SnapStart feature for AWS Lambda. SnapStart for Java reduces startup latency for Java-based functions running on AWS Lambda, and Quarkus supports it from day one!"
msgstr "A Amazon Web Services (AWS)  link:http://aws.amazon.com/blogs/aws/new-accelerate-your-lambda-functions-with-lambda-snapstart[anunciou] o recurso SnapStart para o AWS Lambda. O SnapStart para Java reduz a latência de inicialização para funções baseadas em Java em execução no AWS Lambda, e o Quarkus oferece suporte a ele desde o primeiro dia!"

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "Quarkus is supersonic subatomic Java with a focus on cloud-native applications. The idea behind Quarkus has always been to do at build-time what traditional frameworks do at runtime. Quarkus is optimized for low memory usage and fast startup times. Quarkus brings back _developer joy_ to Java and enables every Java developer out there to use their skills to develop cloud-native apps, including AWS Lambda workloads."
msgstr "Quarkus é um Java subatómico supersónico com foco em aplicações nativas da nuvem. A ideia por trás do Quarkus sempre foi fazer em tempo de construção o que os frameworks tradicionais fazem em tempo de execução. O Quarkus é otimizado para baixo uso de memória e tempos de inicialização rápidos. O Quarkus traz de volta a _alegria do desenvolvedor_ para o Java e permite que todos os desenvolvedores Java usem suas habilidades para desenvolver aplicativos nativos da nuvem, incluindo cargas de trabalho do AWS Lambda."

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "Quarkus uses the ‘quarkus-amazon-lambda’ extension to build and deploy functions to AWS Lambda. The extension allows developers to use the Quarkus development model like live coding, continuous testing, etc., and the ability to use CDI Injections and additional quarkus extensions. Developers can deploy functions to AWS Lambda using native or Java mode. With today's http://aws.amazon.com/blogs/aws/new-accelerate-your-lambda-functions-with-lambda-snapstart[announcement], the SnapStart feature is now an additional option to build and deploy functions written with Quarkus to AWS Lambda."
msgstr "O Quarkus utiliza a extensão \"quarkus-amazon-lambda\" para criar e implementar funções no AWS Lambda. A extensão permite que os programadores utilizem o modelo de desenvolvimento Quarkus, como a codificação em tempo real, os testes contínuos, etc., e a capacidade de utilizar injecções CDI e outras extensões quarkus. Os programadores podem implementar funções no AWS Lambda utilizando o modo nativo ou Java. Com o  link:http://aws.amazon.com/blogs/aws/new-accelerate-your-lambda-functions-with-lambda-snapstart[anúncio] de hoje, o recurso SnapStart é agora uma opção adicional para criar e implantar funções escritas com o Quarkus no AWS Lambda."

#. type: Title ===
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "What is SnapStart?"
msgstr "O que é o SnapStart?"

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "Typically AWS Lambda creates a new execution environment when invoking a new function for the first time or when it is scaled up to handle the traffic. SnapStart takes a different approach by taking a snapshot of the execution environment(memory and application state)  of the initialized function execution environment. Furthermore, it persists the snapshot and caches it for low-latency access. When invoking the function, it does not need to spend time initializing code, dependencies, or framework. Instead, Lambda resumes the new execution environment from the persisted snapshot."
msgstr "Normalmente, o AWS Lambda cria um novo ambiente de execução ao invocar uma nova função pela primeira vez ou quando é ampliado para lidar com o tráfego. O SnapStart adota uma abordagem diferente, tirando um instantâneo do ambiente de execução (memória e estado do aplicativo) do ambiente de execução da função inicializada. Além disso, ele persiste o instantâneo e o armazena em cache para acesso de baixa latência. Ao invocar a função, ele não precisa gastar tempo inicializando o código, as dependências ou o framework. Em vez disso, o Lambda retoma o novo ambiente de execução a partir do snapshot armazenado."

#. type: Title ===
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "SnapStart considerations"
msgstr "Considerações sobre o SnapStart"

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "Because of how SnapStart works with snapshots and resumes the execution environment with low latency, this benefits functions written with Quarkus. Quarkus can leverage the snapshotting and warm-up code paths for the libraries Quarkus supports."
msgstr "Devido à forma como o SnapStart trabalha com instantâneos e retoma o ambiente de execução com baixa latência, isso beneficia as funções escritas com o Quarkus. O Quarkus pode aproveitar os caminhos de código de captura de instantâneos e aquecimento para as bibliotecas suportadas pelo Quarkus."

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "For the Developer's code and libraries, they need to consider particular cases when utilizing SnapStart:"
msgstr "Para o código e as bibliotecas do desenvolvedor, eles precisam considerar casos específicos ao utilizar o SnapStart:"

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid ""
"*Resource connections over the network***:** Snapshots do not guarantee connections back to remote hosts when a function is resumed. Developers will need to ensure and validate the state of connections.  +\n"
"*Pulling in-memory data from sources*: Often, one needs to pull data from a different source into memory. This can also lead to inconsistency if the data at the source has changed or even expired. Ensure and verify the state of such data. +\n"
"*Randomness*: Lambda SnapStart speeds up applications by re-using a single initialized snapshot many times over to resume execution environments. As a result, unique content which was included in the snapshot during initialization may be reused across execution environments and so may no longer remain unique. Ensure that unique content is generated after initialization, and avoid caching unique content during initialization. Refer to the feature documentation to understand these considerations around uniqueness and interfaces available to customers to restore uniqueness."
msgstr ""
"*Conexões de recursos pela rede<strong></strong>:* Os instantâneos não garantem conexões de volta a hosts remotos quando uma função é retomada. Os desenvolvedores precisarão garantir e validar o estado das conexões. \n"
" *Extração de dados de fontes na memória* : Muitas vezes, é necessário extrair dados de uma fonte diferente para a memória. Isso também pode levar a inconsistências se os dados da fonte tiverem sido alterados ou até mesmo expirado. Garanta e verifique o estado desses dados.\n"
" Randomness (Aleatoriedade): O Lambda SnapStart acelera os aplicativos ao reutilizar um único snapshot inicializado várias vezes para retomar os ambientes de execução. Como resultado, o conteúdo exclusivo que foi incluído no snapshot durante a inicialização pode ser reutilizado em ambientes de execução e, portanto, pode não permanecer exclusivo. Certifique-se de que o conteúdo exclusivo seja gerado após a inicialização e evite armazenar em cache o conteúdo exclusivo durante a inicialização. Consulte a documentação do recurso para entender essas considerações sobre exclusividade e as interfaces disponíveis aos clientes para restaurar a exclusividade."

#. type: Title ===
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "Quarkus fast startup times and integration with SnapStart"
msgstr "Tempos de arranque rápidos do Quarkus e integração com o SnapStart"

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "A typical Java application uses JIT (Just in time) compilation. When an application starts up, it needs time for specific warm-up code paths to perform better, which means additional CPU cycles for warm-up times. Cloud-native applications demand a faster startup time. Ahead-of-time (AOT) compilation enables that by doing most of the optimizations at build time. A good example here is Quarkus. As a result, we have full speed from startup and no CPU overhead for compilations at startup time. Quarkus application initialization has two phases: static initialization and runtime initialization. This distinction follows the principles of the GraalVM native compilation, inlining the static initialization in the resulting executable, while the runtime initialization happens during the regular execution. We compared multiple functions to understand the benefits of each feature we added:"
msgstr "Uma aplicação Java típica utiliza a compilação JIT (Just in time). Quando uma aplicação é iniciada, ela precisa de tempo para que caminhos de código de aquecimento específicos tenham um melhor desempenho, o que significa ciclos de CPU adicionais para tempos de aquecimento. Os aplicativos nativos da nuvem exigem um tempo de inicialização mais rápido. A compilação AOT (Ahead-of-time) permite isso ao fazer a maioria das otimizações no momento da compilação. Um bom exemplo aqui é o Quarkus. Como resultado, temos velocidade total desde a inicialização e nenhuma sobrecarga de CPU para compilações no momento da inicialização. A inicialização da aplicação Quarkus tem duas fases: inicialização estática e inicialização em tempo de execução. Essa distinção segue os princípios da compilação nativa do GraalVM, incorporando a inicialização estática no executável resultante, enquanto a inicialização em tempo de execução ocorre durante a execução regular. Comparámos várias funções para compreender os benefícios de cada funcionalidade que adicionámos:"

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "The Hello function is a simple function returning “Hello” and using the Quarkus AWS Lambda extension"
msgstr "A função Hello é uma função simples que retorna \"Hello\" e utiliza a extensão AWS Lambda do Quarkus"

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "The Heroes function implements a CRUD interface on top of DynamoDB. It uses the Quarkus AWS Lamdba HTTP and RESTEasy Reactive. Invocations go through an AWS API Gateway."
msgstr "A função Heroes implementa uma interface CRUD no topo do DynamoDB. Utiliza o AWS Lamdba HTTP da Quarkus e o RESTEasy Reactive. As invocações passam por um AWS API Gateway."

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "For each function, we compare:"
msgstr "Para cada função, comparamos:"

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "The invocation duration, memory, and billed duration without SnapStart"
msgstr "A duração da invocação, a memória e a duração facturada sem o SnapStart"

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "The invocation duration, memory, and billed duration with a full startup during the warmup phase and the preloading of the classes."
msgstr "A duração da invocação, a memória e a duração facturada com um arranque completo durante a fase de aquecimento e o pré-carregamento das classes."

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "The class preloading loads and initializes all the classes used by the application."
msgstr "O pré-carregamento de classes carrega e inicializa todas as classes utilizadas pela aplicação."

#. type: Title ===
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, no-wrap
msgid "Results"
msgstr "Resultados"

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "*Hello Function*"
msgstr "*Função Hello*"

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "*Without SnapStart*"
msgstr "*Sem o SnapStart*"

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "*With SnapStart*"
msgstr "*Com o SnapStart*"

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "*Native*"
msgstr "*Nativo*"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "Total duration"
msgstr "Duração total"

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "2230 ms"
msgstr "2230 ms"

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "202 ms"
msgstr "202 ms"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "-90.93%"
msgstr "-90.93%"

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "356 ms"
msgstr "356 ms"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "-84.05%"
msgstr "-84.05%"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "Billed duration"
msgstr "Duração facturada"

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "131 ms"
msgstr "131 ms"

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "109 ms"
msgstr "109 ms"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "-16.79%"
msgstr "-16.79%"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "171.76%"
msgstr "171.76%"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "Memory"
msgstr "Memória"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "115 MB"
msgstr "115 MB"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "104 MB"
msgstr "104 MB"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "-9.57%"
msgstr "-9.57%"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "59 MB"
msgstr "59 MB"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "-48.70%"
msgstr "-48.70%"

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "*Heroes Function*"
msgstr "*Função dos heróis*"

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "15728 ms"
msgstr "15728 ms"

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "965 ms"
msgstr "965 ms"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "-93.87%"
msgstr "-93.87%"

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "1112 ms"
msgstr "1112 ms"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "-92.93%"
msgstr "-92.93%"

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "12550 ms"
msgstr "12550 ms"

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "885 ms"
msgstr "885 ms"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "-92.95%"
msgstr "-92.95%"

#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "1113 ms"
msgstr "1113 ms"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "-91.13%"
msgstr "-91.13%"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "222 MB"
msgstr "222 MB"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "173 MB"
msgstr "173 MB"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "-22.07%"
msgstr "-22.07%"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "96 MB"
msgstr "96 MB"

#. type: Table
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "-56.76%"
msgstr "-56.76%"

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "Quarkus together with AWS Lambda SnapStart functions enables further runtime optimizations close to the native performance and much faster than the regular Java ones. For some functions, SnapStart is faster than a cold start of a native executable in AWS Lambda. For others, memory usage is better with the native image."
msgstr "O Quarkus, juntamente com as funções SnapStart do AWS Lambda, permite outras optimizações do tempo de execução próximas do desempenho nativo e muito mais rápidas do que as do Java normal. Para algumas funções, o SnapStart é mais rápido do que um arranque a frio de um executável nativo no AWS Lambda. Para outras, a utilização da memória é melhor com a imagem nativa."

#. type: Title ===
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy, no-wrap
msgid "Conclusion"
msgstr "Conclusão"

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "Developers now have three options to build and deploy functions to AWS Lambda; JVM mode, Native mode, and the latest inclusion of the SnapStart feature. All three have different use cases. It is important to note that SnapStart is an AWS Lambda feature only."
msgstr "Os desenvolvedores agora têm três opções para criar e implantar funções no AWS Lambda: modo JVM, modo nativo e a inclusão mais recente do recurso SnapStart. Todos os três têm casos de uso diferentes. É importante notar que o SnapStart é apenas um recurso do AWS Lambda."

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "With the SnapStart feature, it is possible to run Quarkus in JVM mode with similar and, in some cases, faster startup times than the native image in the AWS Lambda environment. For this to work, developers need to ensure that applications can startup in a safe state, e.g., network connections, resources, etc. Luckily if you are using Quarkus a lot of this is done for you."
msgstr "Com o recurso SnapStart, é possível executar o Quarkus no modo JVM com tempos de inicialização semelhantes e, em alguns casos, mais rápidos do que a imagem nativa no ambiente AWS Lambda. Para que isso funcione, os desenvolvedores precisam garantir que os aplicativos possam ser iniciados em um estado seguro, por exemplo, conexões de rede, recursos, etc. Felizmente, se estiver a utilizar o Quarkus, muito disto é feito por si."

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "With https://github.com/quarkusio/quarkus/pull/29108[PR #29108] merged into the Quarkus main branch, Quarkus applications can use the SnapStart features on AWS Lambda. The feature will land in the 2.15 platform release as an experimental feature."
msgstr "Com o  link:https://github.com/quarkusio/quarkus/pull/29108[PR #29108] incorporado ao branch principal do Quarkus, os aplicativos Quarkus podem usar os recursos do SnapStart no AWS Lambda. O recurso será lançado na versão 2.15 da plataforma como um recurso experimental."

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "If you are an AWS Lambda user we encourage you to try out Quarkus with and without AWS Snapstart and compare. Let us know your results and feedback."
msgstr "Se for um utilizador do AWS Lambda, encorajamo-lo a experimentar o Quarkus com e sem o AWS Snapstart e a comparar. Informe-nos sobre os seus resultados e comentários."

#. type: Plain text
#: _posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc
#, fuzzy
msgid "For more technical details, visit the AWS Lambda SnapStart blog http://aws.amazon.com/blogs/aws/new-accelerate-your-lambda-functions-with-lambda-snapstart[here]."
msgstr "Para obter mais detalhes técnicos, visite o blogue do AWS Lambda SnapStart  link:http://aws.amazon.com/blogs/aws/new-accelerate-your-lambda-functions-with-lambda-snapstart[aqui]."
