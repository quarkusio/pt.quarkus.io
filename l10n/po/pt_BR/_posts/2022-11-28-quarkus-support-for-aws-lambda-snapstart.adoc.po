# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:1
#, no-wrap
msgid "sshaaf"
msgstr ""

#. type: YAML Front Matter: date
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:1
#, no-wrap
msgid "2022-11-28"
msgstr ""

#. type: YAML Front Matter: layout
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:1
#, no-wrap
msgid "post"
msgstr ""

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:1
#, no-wrap
msgid "Amazon Web Services (AWS)  announced the SnapStart feature for AWS Lambda. SnapStart reduces startup latency for Java-based functions running on AWS Lambda, and Quarkus supports it from day one!"
msgstr ""

#. type: YAML Front Matter: tags
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:1
#, no-wrap
msgid "announcement"
msgstr ""

#. type: Title ==
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:1
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:10
#, no-wrap
msgid "Quarkus support for AWS Lambda SnapStart"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:14
msgid "Amazon Web Services (AWS)  http://aws.amazon.com/blogs/aws/new-accelerate-your-lambda-functions-with-lambda-snapstart[announced] the SnapStart feature for AWS Lambda. SnapStart for Java reduces startup latency for Java-based functions running on AWS Lambda, and Quarkus supports it from day one!"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:16
msgid "Quarkus is supersonic subatomic Java with a focus on cloud-native applications. The idea behind Quarkus has always been to do at build-time what traditional frameworks do at runtime. Quarkus is optimized for low memory usage and fast startup times. Quarkus brings back _developer joy_ to Java and enables every Java developer out there to use their skills to develop cloud-native apps, including AWS Lambda workloads."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:18
msgid "Quarkus uses the ‘quarkus-amazon-lambda’ extension to build and deploy functions to AWS Lambda. The extension allows developers to use the Quarkus development model like live coding, continuous testing, etc., and the ability to use CDI Injections and additional quarkus extensions. Developers can deploy functions to AWS Lambda using native or Java mode. With today's http://aws.amazon.com/blogs/aws/new-accelerate-your-lambda-functions-with-lambda-snapstart[announcement], the SnapStart feature is now an additional option to build and deploy functions written with Quarkus to AWS Lambda."
msgstr ""

#. type: Title ===
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:19
#, no-wrap
msgid "What is SnapStart?"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:22
msgid "Typically AWS Lambda creates a new execution environment when invoking a new function for the first time or when it is scaled up to handle the traffic. SnapStart takes a different approach by taking a snapshot of the execution environment(memory and application state)  of the initialized function execution environment. Furthermore, it persists the snapshot and caches it for low-latency access. When invoking the function, it does not need to spend time initializing code, dependencies, or framework. Instead, Lambda resumes the new execution environment from the persisted snapshot."
msgstr ""

#. type: Title ===
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:23
#, no-wrap
msgid "SnapStart considerations"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:27
msgid "Because of how SnapStart works with snapshots and resumes the execution environment with low latency, this benefits functions written with Quarkus. Quarkus can leverage the snapshotting and warm-up code paths for the libraries Quarkus supports."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:29
msgid "For the Developer's code and libraries, they need to consider particular cases when utilizing SnapStart:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:33
#, no-wrap
msgid ""
"*Resource connections over the network***:** Snapshots do not guarantee connections back to remote hosts when a function is resumed. Developers will need to ensure and validate the state of connections.  +\n"
"*Pulling in-memory data from sources*: Often, one needs to pull data from a different source into memory. This can also lead to inconsistency if the data at the source has changed or even expired. Ensure and verify the state of such data. +\n"
"*Randomness*: Lambda SnapStart speeds up applications by re-using a single initialized snapshot many times over to resume execution environments. As a result, unique content which was included in the snapshot during initialization may be reused across execution environments and so may no longer remain unique. Ensure that unique content is generated after initialization, and avoid caching unique content during initialization. Refer to the feature documentation to understand these considerations around uniqueness and interfaces available to customers to restore uniqueness.\n"
msgstr ""

#. type: Title ===
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:34
#, no-wrap
msgid "Quarkus fast startup times and integration with SnapStart"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:37
msgid "A typical Java application uses JIT (Just in time) compilation. When an application starts up, it needs time for specific warm-up code paths to perform better, which means additional CPU cycles for warm-up times. Cloud-native applications demand a faster startup time. Ahead-of-time (AOT) compilation enables that by doing most of the optimizations at build time. A good example here is Quarkus. As a result, we have full speed from startup and no CPU overhead for compilations at startup time. Quarkus application initialization has two phases: static initialization and runtime initialization. This distinction follows the principles of the GraalVM native compilation, inlining the static initialization in the resulting executable, while the runtime initialization happens during the regular execution. We compared multiple functions to understand the benefits of each feature we added:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:39
msgid "The Hello function is a simple function returning “Hello” and using the Quarkus AWS Lambda extension"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:40
msgid "The Heroes function implements a CRUD interface on top of DynamoDB. It uses the Quarkus AWS Lamdba HTTP and RESTEasy Reactive. Invocations go through an AWS API Gateway."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:42
msgid "For each function, we compare:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:44
msgid "The invocation duration, memory, and billed duration without SnapStart"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:45
msgid "The invocation duration, memory, and billed duration with a full startup during the warmup phase and the preloading of the classes."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:47
msgid "The class preloading loads and initializes all the classes used by the application."
msgstr ""

#. type: Title ===
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:48
#, no-wrap
msgid "Results"
msgstr ""

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:52
#, no-wrap
msgid "*Hello Function"
msgstr ""

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:52
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:63
#, no-wrap
msgid "*Without SnapStart"
msgstr ""

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:52
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:63
#, no-wrap
msgid "*With SnapStart"
msgstr ""

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:52
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:63
#, no-wrap
msgid "*Native"
msgstr ""

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:54
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:65
#, no-wrap
msgid "Total duration"
msgstr ""

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:54
#, no-wrap
msgid "2230 m"
msgstr ""

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:54
#, no-wrap
msgid "202 m"
msgstr ""

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:54
#, no-wrap
msgid "-90.93%"
msgstr ""

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:54
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:55
#, no-wrap
msgid "356 m"
msgstr ""

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:55
#, no-wrap
msgid "-84.05%"
msgstr ""

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:55
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:66
#, no-wrap
msgid "Billed duration"
msgstr ""

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:55
#, no-wrap
msgid "131 m"
msgstr ""

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:55
#, no-wrap
msgid "109 m"
msgstr ""

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:55
#, no-wrap
msgid "-16.79%"
msgstr ""

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:56
#, no-wrap
msgid "171.76%"
msgstr ""

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:56
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:67
#, no-wrap
msgid "Memory"
msgstr ""

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:56
#, no-wrap
msgid "115 MB"
msgstr ""

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:56
#, no-wrap
msgid "104 MB"
msgstr ""

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:56
#, no-wrap
msgid "-9.57%"
msgstr ""

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:56
#, no-wrap
msgid "59 MB"
msgstr ""

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:57
#, no-wrap
msgid "-48.70%"
msgstr ""

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:63
#, no-wrap
msgid "*Heroes Function"
msgstr ""

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:65
#, no-wrap
msgid "15728 m"
msgstr ""

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:65
#, no-wrap
msgid "965 m"
msgstr ""

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:65
#, no-wrap
msgid "-93.87%"
msgstr ""

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:65
#, no-wrap
msgid "1112 m"
msgstr ""

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:66
#, no-wrap
msgid "-92.93%"
msgstr ""

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:66
#, no-wrap
msgid "12550 m"
msgstr ""

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:66
#, no-wrap
msgid "885 m"
msgstr ""

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:66
#, no-wrap
msgid "-92.95%"
msgstr ""

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:66
#, no-wrap
msgid "1113 m"
msgstr ""

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:67
#, no-wrap
msgid "-91.13%"
msgstr ""

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:67
#, no-wrap
msgid "222 MB"
msgstr ""

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:67
#, no-wrap
msgid "173 MB"
msgstr ""

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:67
#, no-wrap
msgid "-22.07%"
msgstr ""

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:67
#, no-wrap
msgid "96 MB"
msgstr ""

#. type: Table
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:68
#, no-wrap
msgid "-56.76%"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:72
msgid "Quarkus together with AWS Lambda SnapStart functions enables further runtime optimizations close to the native performance and much faster than the regular Java ones. For some functions, SnapStart is faster than a cold start of a native executable in AWS Lambda. For others, memory usage is better with the native image."
msgstr ""

#. type: Title ===
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:73
#, no-wrap
msgid "Conclusion"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:76
msgid "Developers now have three options to build and deploy functions to AWS Lambda; JVM mode, Native mode, and the latest inclusion of the SnapStart feature. All three have different use cases. It is important to note that SnapStart is an AWS Lambda feature only."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:78
msgid "With the SnapStart feature, it is possible to run Quarkus in JVM mode with similar and, in some cases, faster startup times than the native image in the AWS Lambda environment. For this to work, developers need to ensure that applications can startup in a safe state, e.g., network connections, resources, etc. Luckily if you are using Quarkus a lot of this is done for you."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:80
msgid "With https://github.com/quarkusio/quarkus/pull/29108[PR #29108] merged into the Quarkus main branch, Quarkus applications can use the SnapStart features on AWS Lambda. The feature will land in the 2.15 platform release as an experimental feature."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:82
msgid "If you are an AWS Lambda user we encourage you to try out Quarkus with and without AWS Snapstart and compare. Let us know your results and feedback."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-11-28-quarkus-support-for-aws-lambda-snapstart.adoc:84
msgid "For more technical details, visit the AWS Lambda SnapStart blog http://aws.amazon.com/blogs/aws/new-accelerate-your-lambda-functions-with-lambda-snapstart[here]."
msgstr ""
