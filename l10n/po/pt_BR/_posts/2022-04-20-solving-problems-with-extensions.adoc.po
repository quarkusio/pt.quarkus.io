# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
#, fuzzy, no-wrap
msgid "Solving problems with Quarkus extensions (1/n)"
msgstr "Resolução de problemas com extensões Quarkus (1/n)"

#. type: YAML Front Matter: synopsis
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
#, fuzzy, no-wrap
msgid "The unique build infrastructure of Quarkus allows you to solve complex issues in a very simple way by developing custom extensions."
msgstr "A infraestrutura de construção única do Quarkus permite-lhe resolver problemas complexos de uma forma muito simples, desenvolvendo extensões personalizadas."

#. type: Plain text
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
#, fuzzy
msgid "This is the first post of what I hope will be a series of several articles showing how you can solve complex problems by leveraging the unique Quarkus build infrastructure and extension framework."
msgstr "Este é o primeiro post do que eu espero que seja uma série de vários artigos mostrando como você pode resolver problemas complexos aproveitando a infraestrutura de construção e a estrutura de extensão exclusivas do Quarkus."

#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"First things first, bootstraping a Quarkus extension is easy: in one command, you can get it scaffolded and get started on the actual implementation.\n"
"But that's not the subject of this post!"
msgstr ""

#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"An extension, apart from providing some runtime code to your application, also allows to tweak the build of your application and do all sorts of things at the build level.\n"
"This is what we will focus on in this series."
msgstr ""

#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid "**Problem of the day:** to ensure binary compatibility, the Hub4j GitHub API introduces some bridge methods that confuse Mockito and more specifically ByteBuddy and ultimately make our tests unreliable. How can we solve that?"
msgstr ""

#. type: Title ==
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
#, fuzzy, no-wrap
msgid "Some context"
msgstr "Algum contexto"

#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"You might have heard about https://github.com/quarkiverse/quarkus-github-app[my Quarkus GitHub App extension]\n"
"that allows you to develop GitHub Apps based on Quarkus at light speed with very little boilerplate\n"
"(shameless ad: it is awesome!)."
msgstr ""

#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"My dear colleague https://github.com/yrodiere[Yoann Rodière] (he is awesome too!) wrote some test infrastructure for it based on https://site.mockito.org[Mockito]\n"
"(which uses https://bytebuddy.net/[ByteBuddy] under the hood).\n"
"That was all good until we started noticing confusing and non reproducible failures in our tests\n"
"with Mockito sometimes not actually calling the method we would expect."
msgstr ""

#. type: Plain text
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
#, fuzzy
msgid "The source of the problem is that, to ensure binary compatibility, the https://github.com/hub4j/github-api[Hub4j GitHub API] we use in Quarkus GitHub App introduces bridge methods in the bytecode."
msgstr "A origem do problema é que, para garantir a compatibilidade binária, a  link:https://github.com/hub4j/github-api[API GitHub do Hub4j] que utilizamos na aplicação GitHub da Quarkus introduz métodos de ponte no bytecode."

#. type: Plain text
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
#, fuzzy
msgid "For instance, let's take this method of the `GitHub` class of the GitHub API:"
msgstr "Por exemplo, vamos utilizar este método da classe `GitHub` da API do GitHub:"

#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"Historically, it used to return a `GHUser` but, in newer versions, it returns a `GHMyself`,\n"
"which broke the binary compatibility."
msgstr ""

#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"To restore it and with the help of the `@WithBridgeMethods` annotation, the GitHub API build will create two methods in the bytecode:\n"
"one returning `GHMyself` and one returning `GHUser`.\n"
"This is very useful if you have compiled your application with an old version of the GitHub API and you just want to use the new version without recompiling your application.\n"
"Typically, in the case of Jenkins, you can switch to a new version of the GitHub API without having to recompile all the Jenkins plugins using GitHub API."
msgstr ""

#. type: Plain text
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
#, fuzzy
msgid "At the bytecode level, you end up with something equivalent to the following:"
msgstr "Ao nível do bytecode, obtém-se algo equivalente ao seguinte:"

#. type: Plain text
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
#, fuzzy
msgid "`invokevirtual` of `getMyself()` that returns `GHMyself`"
msgstr "`invokevirtual` de `getMyself()` que devolve `GHMyself`"

#. type: Plain text
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
#, fuzzy
msgid "And if your existing compiled code calls `GHUser getMyself()`, it will still work after the change of return type."
msgstr "E se o seu código compilado atual chamar `GHUser getMyself()`, continuará a funcionar após a alteração do tipo de retorno."

#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"This bridge methods approach solves a real problem and it's not that big of a deal as it's fully transparent for the developer...\n"
"except when you start using Mockito due to https://github.com/raphw/byte-buddy/issues/1162[a ByteBuddy issue]:\n"
"ByteBuddy can get confused if there are several methods with the same signature but different return types."
msgstr ""

#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"ByteBuddy is an amazing library and this blog post should not be seen as a critique of ByteBuddy.\n"
"This is an extreme corner case that doesn't happen with standard bytecode."
msgstr ""

#. type: Plain text
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
#, fuzzy
msgid "This issue was causing our tests to be unreliable because sometimes ByteBuddy was choosing the wrong method to apply Mockito magic."
msgstr "Este problema estava a fazer com que os nossos testes não fossem fiáveis porque, por vezes, o ByteBuddy estava a escolher o método errado para aplicar a magia do Mockito."

#. type: Title ==
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
#, fuzzy, no-wrap
msgid "How can we work around this?"
msgstr "Como é que podemos contornar esta situação?"

#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"In the case of Quarkus GitHub App, we don't really care about binary compatibility:\n"
"when upgrading to a new version of the GitHub API,\n"
"users will rebuild their application."
msgstr ""

#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"So given these bridge methods are problematic,\n"
"one solution would be to get rid of them."
msgstr ""

#. type: Plain text
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
#, fuzzy
msgid "Obviously, we could fork the GitHub API and avoid generating the bridge methods."
msgstr "Obviamente, poderíamos bifurcar a API do GitHub e evitar a geração dos métodos de ponte."

#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"But forking and maintaining a fork forever is definitely not something we should consider if we can avoid it.\n"
"Especially since we want to continue benefiting from all the future improvements of the GitHub API."
msgstr ""

#. type: Plain text
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
#, fuzzy
msgid "So could we somehow keep the library standard but have Quarkus adjust the bytecode when building the application?"
msgstr "Poderíamos, então, manter a biblioteca padrão, mas fazer com que o Quarkus ajustasse o bytecode ao construir a aplicação?"

#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"If you are in a rush, the short answer is yes.\n"
"Now let's go for the (not so) long answer."
msgstr ""

#. type: Title ===
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
#, fuzzy, no-wrap
msgid "Let's identify the methods"
msgstr "Vamos identificar os métodos"

#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"In Quarkus, we can index the annotations with Jandex so, in a perfect world,\n"
"we would index the GitHub API jar with Jandex (which we already do for other purposes)\n"
"and interrogate Jandex to get all the methods annotated with `@WithBridgeMethods`:"
msgstr ""

#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"Unfortunately, `@WithBridgeMethods` has a `CLASS` retention policy\n"
"- which makes perfect sense for its usage -\n"
"and Jandex only considers annotations with a `RUNTIME` retention policy."
msgstr ""

#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"This limitation will be alleviated in Jandex 3 but, for the time being,\n"
"we cannot use Jandex."
msgstr ""

#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"Unfortunately, until then, we don't have many options here:\n"
"we have to list the methods manually."
msgstr ""

#. type: Plain text
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
#, fuzzy
msgid "For more flexibility, we introduced a `BuildItem`:"
msgstr "Para maior flexibilidade, introduzimos um `BuildItem`:"

#. type: Plain text
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
#, fuzzy
msgid "And we will produce a `GitHubApiClassWithBridgeMethodsBuildItem` for each class:"
msgstr "E produziremos um `GitHubApiClassWithBridgeMethodsBuildItem` para cada turma:"

#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"Once this is done, we are able to consume the `GitHubApiClassWithBridgeMethodsBuildItem` from any Quarkus `@BuildStep`\n"
"so this list is generally available to the Quarkus build."
msgstr ""

#. type: delimited block =
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
#, fuzzy
msgid "I won't go into detail on the Quarkus build process but the principle of it is extremely simple:"
msgstr "Não vou entrar em pormenores sobre o processo de construção do Quarkus, mas o seu princípio é extremamente simples:"

#. type: delimited block =
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
#, fuzzy
msgid "It is composed of build steps (methods annotated with `@BuildStep`)."
msgstr "É composto por etapas de construção (métodos anotados com `@BuildStep`)."

#. type: delimited block =
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
#, fuzzy
msgid "A build step can consume build items."
msgstr "Um passo de construção pode consumir itens de construção."

#. type: delimited block =
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
#, fuzzy
msgid "A build step produces build items."
msgstr "Um passo de construção produz itens de construção."

#. type: delimited block =
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
#, fuzzy
msgid "Then it is just a matter of resolving the dependencies of the build steps to get to the final result: your application."
msgstr "Depois, é apenas uma questão de resolver as dependências das etapas de compilação para chegar ao resultado final: a sua aplicação."

#. type: delimited block =
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
#, fuzzy
msgid "You can learn more about it in the link:/guides/writing-extensions#build-step-processors[Writing extensions guide]."
msgstr "Pode obter mais informações sobre este assunto no  link:/guides/writing-extensions#build-step-processors[Guia de extensões de escrita]."

#. type: Title ===
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
#, fuzzy, no-wrap
msgid "Removing the methods"
msgstr "Remoção dos métodos"

#. type: Plain text
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
#, fuzzy
msgid "Now that we have the list of methods handy, the next step is to remove them."
msgstr "Agora que temos a lista de métodos à mão, o próximo passo é removê-los."

#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"To manipulate bytecode during the build, Quarkus offers the `BytecodeTransformerBuildItem`.\n"
"Adjusting the bytecode of a class is just a matter of producing one for the given class."
msgstr ""

#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"For instance, to remove the bridge methods from our GitHub API methods,\n"
"we add the following build step to our extension:"
msgstr ""

#. type: Plain text
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
#, fuzzy
msgid "We are going to produce ``BytecodeTransformerBuildItem``s."
msgstr "Vamos produzir `BytecodeTransformerBuildItem`s."

#. type: Plain text
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
#, fuzzy
msgid "We consume the previously produced ``GitHubApiClassWithBridgeMethodsBuildItem``s."
msgstr "Consumimos o `GitHubApiClassWithBridgeMethodsBuildItem`s produzido anteriormente."

#. type: Plain text
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
#, fuzzy
msgid "`RemoveBridgeMethodsClassVisitor` is a classic https://asm.ow2.io[ASM] `ClassVisitor` that will modify the bytecode:"
msgstr "`RemoveBridgeMethodsClassVisitor` é um  link:https://asm.ow2.io[ASM] clássico `ClassVisitor` que modificará o bytecode:"

#. type: Plain text
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
#, fuzzy
msgid "If the method name matches and the method is a bridge and synthetic method..."
msgstr "Se o nome do método corresponder e o método for uma ponte e um método sintético..."

#. type: Plain text
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
#, fuzzy
msgid "... we remove it from the bytecode by returning `null`."
msgstr "<li> <p>removemo-lo do bytecode devolvendo `null`.</p> </li>"

#. type: Plain text
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
#, fuzzy
msgid "If not, we just delegate to the superclass method that will incorporate the method in the bytecode."
msgstr "Caso contrário, limitamo-nos a delegar no método da superclasse que irá incorporar o método no bytecode."

#. type: Plain text
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
#, fuzzy
msgid "And that's it!"
msgstr "E pronto!"

#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"During the build process, Quarkus will create a class file containing the modified bytecode\n"
"and will use it instead of the class coming from the GitHub API jar.\n"
"Thus the bridge methods we wanted to remove will never be visible to ByteBuddy."
msgstr ""

#. type: Title ==
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
#, fuzzy, no-wrap
msgid "Conclusion"
msgstr "Conclusão"

#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"At conferences, we often say that Quarkus is doing things differently from other frameworks\n"
"and that the magic relies in its innovative build process."
msgstr ""

#. type: Plain text
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
#, fuzzy
msgid "This build process is the key to the low memory footprint and fast startup times of Quarkus."
msgstr "Este processo de compilação é a chave para o baixo consumo de memória e os tempos de arranque rápidos do Quarkus."

#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid "**But it is also a very powerful tool to customize the build of your applications.**"
msgstr ""
