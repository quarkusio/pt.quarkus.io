# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "A IO thread and a worker thread walk into a bar: a microbenchmark story"
msgstr "Uma thread de IO e uma thread de trabalho entram em um bar: uma história de microbenchmark"

#. type: YAML Front Matter: synopsis
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "Understand when and how to use the Quarkus IO thread and its influence on microbenchmarks."
msgstr "Compreender quando e como utilizar a thread IO do Quarkus e a sua influência nos microbenchmarks."

#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid ""
"A competitor recently published a microbenchmark comparing the performance of their stack to Quarkus.\n"
"The Quarkus team feels this microbenchmark shouldn’t be taken at face value because it wasn’t making a like-to-like comparison leading to incorrect conclusions.\n"
"Both of the two frameworks under comparison support reactive processing.\n"
"Reactive processing enables running the business logic directly on the _IO thread_, which ultimately performs better in microbenchmark focusing on response time and concurrency.\n"
"The microbenchmark should have been written so that both frameworks (or neither framework) obtain this benefit.\n"
"Anyway, this turns out to be a very interesting topic and good information for Quarkus users, so read on."
msgstr "Um concorrente publicou recentemente um microbenchmark comparando o desempenho de sua pilha com o Quarkus. A equipe do Quarkus acredita que esse microbenchmark não deve ser levado a sério, pois não foi feita uma comparação entre pares, o que levou a conclusões incorretas. Ambas as estruturas comparadas oferecem suporte ao processamento reativo. O processamento reativo permite executar a lógica comercial diretamente no _thread de E/S_ , o que, em última análise, apresenta melhor desempenho em microbenchmark com foco no tempo de resposta e na simultaneidade. O microbenchmark deveria ter sido escrito de modo que ambas as estruturas (ou nenhuma delas) obtivessem esse benefício. De qualquer forma, esse é um tópico muito interessante e boas informações para os usuários do Quarkus, portanto, continue lendo."

#. type: Title ==
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "tl; dr;"
msgstr "tl; dr;"

#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid ""
"Quarkus https://quarkus.io/blog/runtime-performance/[has great performance] for both imperative and reactive workloads.\n"
"It’s because Quarkus is itself based on Eclipse Vert.x, a mature top performing reactive framework, in such a way that allows you to layer, mix and match the IO paradigm that best fits your use-case."
msgstr "O Quarkus link:https://quarkus.io/blog/runtime-performance/[tem excelente desempenho] para cargas de trabalho imperativas e reativas. Isso se deve ao fato de o Quarkus ser baseado no Eclipse Vert.x, uma estrutura reativa madura e de alto desempenho, de modo a permitir que o senhor crie camadas, misture e combine o paradigma de E/S mais adequado ao seu caso de uso."

#. type: Plain text
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid "If you have a REST scenario well suited to run _purely on the IO thread_, add a Vert.x Reactive Route using https://quarkus.io/guides/reactive-routes[Quarkus Reactive Routes] and your app will get better performance than using Quarkus RESTEasy."
msgstr "Se tiver um cenário REST adequado para ser executado _exclusivamente na thread IO_, adicione uma rota reactiva Vert.x utilizando  link:https://quarkus.io/guides/reactive-routes[o Quarkus Reactive Routes] e a sua aplicação obterá um melhor desempenho do que utilizando o Quarkus RESTEasy."

#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid ""
"We ran this low-work REST + validation competitor-written microbenchmark which features no blocking operation, just returning static data.\n"
"When using Quarkus Reactive Routes to run Quarkus _purely on the IO thread_, **we observed 2.6x times the requests/sec and 30% less memory usage (RSS)** than running with Quarkus RESTEasy (which mixes IO thread and worker thread).\n"
"But that’s on a microbenchmark purpose built to this specific scenario (more on that later)."
msgstr "Executamos esse microbenchmark REST de baixo trabalho + validação escrito por um concorrente que não apresenta nenhuma operação de bloqueio, apenas retornando dados estáticos. Ao usar o Quarkus Reactive Routes para executar o Quarkus _puramente no thread de IO_ , observamos *2,6 vezes mais solicitações/segundo e 30% menos uso de memória (RSS)* do que ao executar com o Quarkus RESTEasy (que mistura thread de IO e thread de trabalho). Mas isso foi feito em um microbenchmark criado especificamente para esse cenário (mais sobre isso adiante)."

#. type: Title ==
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "More interesting read"
msgstr "Ler mais interessante"

#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid ""
"The microbenchmark itself is uninteresting, but it is a good demonstrator of a phenomenon that can happen in reactive stacks.\n"
"Let’s use it as a vehicle to learn more about Quarkus and its reactive engine."
msgstr "O microbenchmark em si não é interessante, mas é um bom demonstrador de um fenômeno que pode ocorrer em pilhas reativas. Vamos usá-lo como um veículo para aprender mais sobre o Quarkus e seu mecanismo reativo."

#. type: Title ===
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "Imperative and Reactive: the elevator pitch"
msgstr "Imperativo e Reativo: o elevator pitch"

#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid ""
"This blog post does not explain the fundamental differences between the imperative execution model and the reactive execution model.\n"
"However, to understand why we see so much difference in the mentioned microbenchmark, we need some notions."
msgstr "Esta postagem do blog não explica as diferenças fundamentais entre o modelo de execução imperativo e o modelo de execução reativo. No entanto, para entender por que vemos tanta diferença no microbenchmark mencionado, precisamos de algumas noções."

#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid ""
"In general, Java web applications use imperative programming combined with blocking IO operations.\n"
"This is incredibly popular because it is easier to reason about the code.\n"
"_Things_ get executed sequentially.\n"
"To make sure one request is not affected by another, they are run on different threads.\n"
"When your workload needs to interact with a database or another remote service, it relies on blocking IO.\n"
"The thread is blocked waiting for the answer.\n"
"Other requests running on different threads are not slowed down significantly.\n"
"But this means one thread for every concurrent request, which limits the overall concurrency."
msgstr "Em geral, os aplicativos Web Java usam programação imperativa combinada com operações de E/S de bloqueio. Isso é incrivelmente popular porque é mais fácil raciocinar sobre o código. _As coisas_ são executadas sequencialmente. Para garantir que uma solicitação não seja afetada por outra, elas são executadas em threads diferentes. Quando sua carga de trabalho precisa interagir com um banco de dados ou outro serviço remoto, ela depende do bloqueio de E/S. O thread fica bloqueado aguardando a resposta. Outras solicitações executadas em threads diferentes não sofrem lentidão significativa. Mas isso significa um thread para cada solicitação simultânea, o que limita a simultaneidade geral."

#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid ""
"On the other side, the reactive execution model embraces asynchronous development models and non blocking IOs.\n"
"With this model, multiple requests can be handled by the same thread.\n"
"When the processing of a request cannot make progress anymore (because it requests a remote service, or interacts with a database), it uses non blocking IO.\n"
"This releases the thread immediately, which can then be used to serve another request.\n"
"When the result of the IO operation is available, the processing of the request is restored and continues its execution.\n"
"This model enables the usage of the _IO thread_ to handle multiple requests.\n"
"There are two significant benefits.\n"
"First, the response time is smaller because it does not have to jump to another thread.\n"
"Second, it reduces memory consumption as it decreases the usage of threads.\n"
"The reactive model uses the hardware resources more efficiently, but... there is a significant drawback.\n"
"If the processing of a request starts to block, this gets real bad.\n"
"No other request can be handled.\n"
"To avoid this, you need to learn how to write non blocking code, how to structure asynchronous processing, and how to use non blocking IOs.\n"
"It's a paradigm shift."
msgstr "Por outro lado, o modelo de execução reativa abrange modelos de desenvolvimento assíncronos e IOs sem bloqueio. Com esse modelo, várias solicitações podem ser tratadas pelo mesmo thread. Quando o processamento de uma solicitação não pode mais progredir (porque ela solicita um serviço remoto ou interage com um banco de dados), ele usa IO não bloqueante. Isso libera o thread imediatamente, que pode então ser usado para atender a outra solicitação. Quando o resultado da operação de E/S está disponível, o processamento da solicitação é restaurado e continua sua execução. Esse modelo permite o uso do _thread de E_ /S para lidar com várias solicitações. Há dois benefícios significativos. Primeiro, o tempo de resposta é menor porque não é necessário saltar para outro thread. Em segundo lugar, ele reduz o consumo de memória, pois diminui o uso de threads. O modelo reativo usa os recursos de hardware com mais eficiência, mas... há uma desvantagem significativa. Se o processamento de uma solicitação começar a bloquear, isso será muito ruim. Nenhuma outra solicitação poderá ser processada. Para evitar isso, o senhor precisa aprender a escrever código sem bloqueio, como estruturar o processamento assíncrono e como usar IOs sem bloqueio. Trata-se de uma mudança de paradigma."

#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid ""
"In Quarkus, we want to make the shift as easy as possible.\n"
"However, we have observed that the majority of user applications are written using the imperative model.\n"
"That is why, when the user application uses JAX-RS, Quarkus defaults to execute the (imperative) workload to a _worker thread_."
msgstr "No Quarkus, queremos tornar essa mudança o mais fácil possível. No entanto, observamos que a maioria dos aplicativos de usuário é escrita usando o modelo imperativo. É por isso que, quando o aplicativo do usuário usa o JAX-RS, o Quarkus tem como padrão executar a carga de trabalho (imperativa) em um _thread de_ trabalho."

#. type: Title ===
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "Hello world microbenchmark: IO thread or worker thread?"
msgstr "Microbenchmark Hello world: thread de IO ou thread de trabalho?"

#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid ""
"Back to the competitor’s microbenchmark, we have a REST endpoint doing some trivial processing and some equally trivial validation.\n"
"Pretty much no meaningful business work.\n"
"This is the Hello World of REST for all intents and purposes."
msgstr "De volta ao microbenchmark do concorrente, temos um endpoint REST fazendo um processamento trivial e uma validação igualmente trivial. Praticamente nenhum trabalho comercial significativo. Para todos os efeitos, esse é o Hello World do REST."

#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid ""
"When you run the microbenchmark with Quarkus RESTEasy, the request is handled by the reactive engine on the _IO thread_ but then the processing work is handed over to a second thread from the _worker thread pool_.\n"
"That’s called _dispatch_.\n"
"When your microbenchmark does as little as Hello World, then the dispatch overhead is proportionally big.\n"
"The dispatch overhead is not visible in most (real life) applications but is very visible in artificial constructs like microbenchmarks."
msgstr "Quando o senhor executa o microbenchmark com o Quarkus RESTEasy, a solicitação é tratada pelo mecanismo reativo no _thread de IO_ , mas, em seguida, o trabalho de processamento é entregue a um segundo thread do _pool de threads de_ trabalho. Isso é chamado de _despacho_ . Quando seu microbenchmark faz algo tão pequeno quanto Hello World, a sobrecarga de despacho é proporcionalmente grande. A sobrecarga de despacho não é visível na maioria dos aplicativos (da vida real), mas é muito visível em construções artificiais como os microbenchmarks."

#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid ""
"The competitor’s stack, however, runs all the request operations on the IO thread by default.\n"
"So what this microbenchmark was actually comparing is just the cost of dispatching to the worker thread pool.\n"
"And frankly (according to the competitor's numbers) and in spite of this extra dispatch work, Quarkus did very very well achieving ~95% of the competitor’s throughput today!  I say today because we are always improving upon performance, and in fact we expect to see further gains in the soon to be released 1.4 release."
msgstr "A pilha do concorrente, no entanto, executa todas as operações de solicitação no thread de IO por padrão. Portanto, o que esse microbenchmark estava realmente comparando é apenas o custo de envio para o pool de threads de trabalho. E, francamente (de acordo com os números do concorrente), e apesar desse trabalho extra de despacho, o Quarkus se saiu muito bem, atingindo ~95% da taxa de transferência do concorrente hoje! Digo hoje porque estamos sempre melhorando o desempenho e, na verdade, esperamos ver mais ganhos na versão 1.4, que será lançada em breve."

#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid "*When compared at a disadvantage (dispatching to a worker thread), Quarkus is nevertheless almost as fast in throughput.*"
msgstr "*Quando comparado com uma desvantagem (envio para um thread de trabalho), o Quarkus é, no entanto, quase tão rápido em termos de rendimento.*"

#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid ""
"… But wait, Quarkus can also avoid the dispatch altogether and run operations on the IO Thread.\n"
"This is a more accurate comparison to how the competitor' stack was configured to do as in both case, it is the user's responsibility to ask for a dispatch if and when needed by the application.\n"
"To compare apples to apples, let’s use https://quarkus.io/guides/reactive-routes[Quarkus Reactive Routes] backed by Eclipse Vert.x.\n"
"In this model, operations are run on the IO thread by default."
msgstr "... Mas espere, o Quarkus também pode evitar totalmente o despacho e executar operações na thread de IO. Essa é uma comparação mais precisa de como a pilha do concorrente foi configurada para fazer, pois em ambos os casos, é responsabilidade do usuário solicitar um despacho se e quando o aplicativo precisar. Para comparar as maçãs com as maçãs, vamos usar link:https://quarkus.io/guides/reactive-routes[o Quarkus Reactive Routes] com o suporte do Eclipse Vert.x. Nesse modelo, as operações são executadas no thread de IO por padrão."

#. type: Plain text
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid "This is not very different from your JAX-RS equivalent."
msgstr "Isto não é muito diferente do seu equivalente JAX-RS."

#. type: Title ===
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "Throughput Numbers"
msgstr "Números de produtividade"

#. type: Plain text
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid "We ran the microbenchmark application in a docker container constrained to reflect a typical resource allocation to a container orchestrated by Kubernetes:"
msgstr "Executámos a aplicação de microbenchmark num contentor docker limitado para refletir uma atribuição típica de recursos a um contentor orquestrado por Kubernetes:"

#. type: Plain text
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid "4 CPU"
msgstr "4 CPU"

#. type: Plain text
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid "256 MB of RAM"
msgstr "256 MB de RAM"

#. type: Plain text
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid "and `-Xmx128m` heap usage for the Java process"
msgstr "e `-Xmx128m` utilização de heap para o processo Java"

#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid ""
"We saw that Quarkus using Reactive Routes ran 2.6 times the requests/sec.\n"
"2.6 times!\n"
"It makes sense! Remember the application code virtually does nothing, so the dispatch cost is comparatively high.\n"
"If you were to write a more real life workload (maybe even having a blocking operation like a JPA access and therefore forcing a dispatch), then the results would be very different.\n"
"Context matters!"
msgstr "Vimos que o Quarkus usando rotas reativas executou 2,6 vezes mais solicitações por segundo. 2,6 vezes! Isso faz sentido! Lembre-se de que o código do aplicativo praticamente não faz nada, portanto, o custo de despacho é comparativamente alto. Se o senhor escrevesse uma carga de trabalho mais real (talvez até mesmo com uma operação de bloqueio como um acesso JPA e, portanto, forçando um despacho), os resultados seriam muito diferentes. O contexto é importante!"

#. type: Plain text
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid "You can find code and how to reproduce the microbenchmark https://github.com/johnaohara/quarkus-iothread-workerpool/tree/1.3.1.Final[here on GitHub]."
msgstr "Pode encontrar o código e a forma de reproduzir o microbenchmark  link:https://github.com/johnaohara/quarkus-iothread-workerpool/tree/1.3.1.Final[aqui no GitHub]."

#. type: Block title
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "Microbenchmark results comparing Quarkus dispatching to a worker thread vs running purely on the IO thread"
msgstr "Resultados de microbenchmark comparando o envio do Quarkus para uma thread de trabalho com a execução puramente na thread de IO"

#. type: Table
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "Quarkus - 1.3.1.Final - 4 CPU's"
msgstr "Quarkus - 1.3.1.Final - 4 CPU's"

#. type: Table
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "Worker thread"
msgstr "Fio de trabalho"

#. type: Table
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "IO thread"
msgstr "Rosca IO"

#. type: Table
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "Ratio"
msgstr "Rácio"

#. type: Table
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "Mean Start Time to First Request (ms) footnote:[‘Mean Start Time to First Request’ was measured using an application built as an UberJar]"
msgstr "Tempo médio de início do primeiro pedido (ms) <sup class=\"footnote\">[ link:#_footnotedef_1[1, id=_footnoteref_1, role=footnote, title=View footnote.]]</sup>"

#. type: Table
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "993.9"
msgstr "993.9"

#. type: Table
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "868.3"
msgstr "868.3"

#. type: Table
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "87.4%"
msgstr "87.4%"

#. type: Table
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "Max RSS (MB)"
msgstr "RSS máximo (MB)"

#. type: Table
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "138.8"
msgstr "138.8"

#. type: Table
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "97.9"
msgstr "97.9"

#. type: Table
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "70.5%"
msgstr "70.5%"

#. type: Table
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "Max Throughput (req/sec)"
msgstr "Taxa de transferência máxima (req/seg.)"

#. type: Table
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "46,172.2"
msgstr "46,172.2"

#. type: Table
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "123,520.4"
msgstr "123,520.4"

#. type: Table
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "267.5%"
msgstr "267.5%"

#. type: Table
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "Max Req/Sec/MB"
msgstr "Necessidade máxima/Segundo/MB"

#. type: Table
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "332.7"
msgstr "332.7"

#. type: Table
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "1,262.1"
msgstr "1,262.1"

#. type: Table
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "379.4%"
msgstr "379.4%"

#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid "*In a fair comparison (purely remaining on the IO thread - no dispatch), Quarkus more than double its throughput.*"
msgstr "*Em uma comparação justa (permanecendo apenas no thread de IO - sem despacho), o Quarkus mais do que dobrou sua taxa de transferência.*"

#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid ""
"As the generated load tends towards the maximum throughput of the system under test, the response time experienced by the client increases exponentially.\n"
"So the best system (for the workload) has a vertical line as far to the right as possible.\n"
"Equally important is to have as flat a line as possible for the longest time.\n"
"You do not want the response time to degrade before the system reaches maximum throughput."
msgstr "À medida que a carga gerada tende para a taxa de transferência máxima do sistema em teste, o tempo de resposta experimentado pelo cliente aumenta exponencialmente. Portanto, o melhor sistema (para a carga de trabalho) tem uma linha vertical o mais à direita possível. Igualmente importante é ter uma linha tão plana quanto possível durante o maior tempo possível. O senhor não quer que o tempo de resposta se degrade antes que o sistema atinja a taxa de transferência máxima."

#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid ""
"By the way, in the competitor microbenchmark Quarkus is shown as consuming more RSS (more RAM).This is also explained by the worker thread pool being operated whereas the competitor did not have a worker thread pool.\n"
"The Quarkus Reactive Routes solution (on a pure IO event run) shows a 30% RSS usage reduction."
msgstr "A propósito, no microbenchmark do concorrente, o Quarkus é mostrado como consumindo mais RSS (mais RAM), o que também é explicado pelo fato de o pool de threads de trabalho ser operado, enquanto o concorrente não tinha um pool de threads de trabalho. A solução Quarkus Reactive Routes (em uma execução de evento IO puro) mostra uma redução de 30% no uso de RSS."

#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid ""
"In this graph, the lower, the better.\n"
"We see that the pure IO thread solution manages to increase throughput with little to no change to the memory usage (RSS), that's very good!"
msgstr "Nesse gráfico, quanto mais baixo, melhor. Vemos que a solução de thread de IO puro consegue aumentar a taxa de transferência com pouca ou nenhuma alteração no uso da memória (RSS), o que é muito bom!"

#. type: Title ==
#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy, no-wrap
msgid "Conclusion"
msgstr "Conclusão"

#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid ""
"Quarkus offers you the ability to safely run blocking operations, run non blocking operations on the IO thread or mix both models.\n"
"The Quarkus team takes performance very seriously and we see Quarkus as offering great numbers whether you use the imperative or reactive models.\n"
"In more realistic workloads, the dispatch cost would be much less significant, you would not see such drastic differences between the two approaches.\n"
"As usual, test as close to your real application as possible."
msgstr "O Quarkus oferece ao senhor a capacidade de executar operações de bloqueio com segurança, executar operações sem bloqueio no thread de IO ou misturar os dois modelos. A equipe do Quarkus leva o desempenho muito a sério e consideramos que o Quarkus oferece ótimos números, quer o senhor use os modelos imperativos ou reativos. Em cargas de trabalho mais realistas, o custo de despacho seria muito menos significativo e o senhor não veria diferenças tão drásticas entre as duas abordagens. Como sempre, teste o mais próximo possível de seu aplicativo real."

#: _posts/2020-04-21-io-thread-benchmark.adoc
#, fuzzy
msgid ""
"Mystery solved.\n"
"Benchmarks are hard, challenge them.\n"
"But the moral of the story is that in all bad comes some good.\n"
"We’ve now learned how to run Quarkus applications entirely on the IO thread.\n"
"And how in some situations that can make a big difference.\n"
"Remember, don’t block! In fact, Quarkus https://quarkus.io/guides/all-config#quarkus-vertx-core_quarkus.vertx.warning-exception-time[can warn you if you do so].\n"
"Oh and we also learned that Quarkus is so fast, it can even beat itself ;p"
msgstr "Mistério resolvido. Os padrões de referência são difíceis, desafiem-nos. Mas a moral da história é que tudo o que é ruim é bom. Agora aprendemos como executar aplicativos Quarkus inteiramente no thread de IO. E como, em algumas situações, isso pode fazer uma grande diferença. Lembre-se, não bloqueie! Na verdade, o Quarkus link:https://quarkus.io/guides/all-config#quarkus-vertx-core_quarkus.vertx.warning-exception-time[pode avisá-lo se o senhor fizer isso] . Ah, e também aprendemos que o Quarkus é tão rápido que pode até vencer a si mesmo ;p"
