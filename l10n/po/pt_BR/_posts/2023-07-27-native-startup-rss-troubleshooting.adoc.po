# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy, no-wrap
msgid "Analysing Quarkus Native startup RSS consumption"
msgstr "Analisar o consumo de RSS do arranque do Quarkus Native"

#. type: YAML Front Matter: synopsis
#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy, no-wrap
msgid "Use Linux native tooling and JFR to understand Quarkus Native startup RSS consumption"
msgstr "Utilizar as ferramentas nativas do Linux e o JFR para compreender o consumo de RSS no arranque do Quarkus Native"

#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid ""
"During the development of Quarkus 2.13,\n"
"we discovered that there was a startup degradation in native mode.\n"
"One of the key aspects of this degradation was that RSS consumption on start up had gone up by about 10-15% compared to Quarkus 2.7.\n"
"In this blog post you will learn how the Quarkus native RSS consumption debugging techniques described in\n"
"https://quarkus.io/guides/native-reference#rss[the Quarkus native reference guide]\n"
"were used to diagnose this issue.\n"
"You will also learn about recent updates in GraalVM that make doing this kind of analysis more convenient."
msgstr "Durante o desenvolvimento do Quarkus 2.13, descobrimos que havia uma degradação da inicialização no modo nativo. Um dos principais aspectos dessa degradação era que o consumo de RSS na inicialização havia aumentado em cerca de 10-15% em comparação com o Quarkus 2.7. Nesta postagem do blog, o senhor aprenderá como as técnicas de depuração do consumo de RSS nativo do Quarkus descritas no link:https://quarkus.io/guides/native-reference#rss[guia de referência nativo do Quarkus] foram usadas para diagnosticar esse problema. O senhor também conhecerá as atualizações recentes do GraalVM que tornam esse tipo de análise mais conveniente."

#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid ""
"Our analysis showed that the RSS consumption for Quarkus 2.7 was about ~33MB while for Quarkus 2.13 it was about ~36MB, roughly a 10 % increase.\n"
"Below we see how we measured the RSS consumption for Quarkus 2.7.6.Final:"
msgstr "Nossa análise mostrou que o consumo de RSS para o Quarkus 2.7 foi de cerca de ~33MB, enquanto para o Quarkus 2.13 foi de cerca de ~36MB, um aumento aproximado de 10%. Abaixo, vemos como medimos o consumo de RSS para o Quarkus 2.7.6.Final:"

#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid ""
"Similarly, below we see how we measured the RSS consumption for Quarkus 2.13.4.Final:\n"
"In our environment, the RSS consumption had gone up to about ~36M, roughly a 10% increase:"
msgstr "Da mesma forma, abaixo vemos como medimos o consumo de RSS para o Quarkus 2.13.4.Final: Em nosso ambiente, o consumo de RSS subiu para cerca de ~36M, aproximadamente um aumento de 10%:"

#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid ""
"Since Quarkus 2.7 and 2.13 used different GraalVM versions (21.3 vs 22.3),\n"
"we first investigated whether the increase in the startup time and RSS consumption was due to a change in GraalVM.\n"
"This turned out to not be the case,\n"
"as using the same GraalVM version on both Quarkus versions still resulted in similar differences."
msgstr "Como o Quarkus 2.7 e o 2.13 usavam versões diferentes do GraalVM (21.3 vs. 22.3), primeiro investigamos se o aumento no tempo de inicialização e no consumo de RSS era devido a uma alteração no GraalVM. Isso acabou não acontecendo, pois o uso da mesma versão do GraalVM em ambas as versões do Quarkus ainda resultou em diferenças semelhantes."

#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid ""
"We also profiled the startup time in JVM mode,\n"
"and although we could observe some slight increase in heap usage,\n"
"the RSS increase was not apparent at runtime.\n"
"So, the challenge was to understand what was causing the RSS increase that seemed to only affect native mode\n"
"and that was Quarkus specific."
msgstr "Também traçamos o perfil do tempo de inicialização no modo JVM e, embora pudéssemos observar um pequeno aumento no uso do heap, o aumento do RSS não era aparente no tempo de execução. Portanto, o desafio era entender o que estava causando o aumento do RSS que parecia afetar apenas o modo nativo e que era específico do Quarkus."

#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid ""
"In native mode we needed to look for system calls that increased RSS,\n"
"and investigate what caused them.\n"
"There are several system calls that can be used to allocate memory, e.g. `malloc`, `mmap`...etc,\n"
"but when we analysed the system calls emitted on startup,\n"
"we discovered that `mmap` calls were the prominent ones.\n"
"Following\n"
"https://www.brendangregg.com/FlameGraphs/memoryflamegraphs.html[Brendan Gregg’s Memory Leak (and Growth) Flame Graphs guide]\n"
"on a Linux environment,\n"
"we were able to produce flamegraphs for the `mmap` system calls.\n"
"To obtain these flamegraphs, we capture the `sys_enter_mmap` system call events with `perf record`,\n"
"and then we generate flamegraphs with the recorded data:"
msgstr "No modo nativo, precisávamos procurar as chamadas de sistema que aumentavam o RSS e investigar o que as causava. Há várias chamadas de sistema que podem ser usadas para alocar memória, por exemplo, `malloc` , `mmap` ...etc., mas quando analisamos as chamadas de sistema emitidas na inicialização, descobrimos que as chamadas `mmap` eram as mais proeminentes. Seguindo o link:https://www.brendangregg.com/FlameGraphs/memoryflamegraphs.html[guia Memory Leak (and Growth) Flame Graphs de Brendan Gregg] em um ambiente Linux, conseguimos produzir gráficos de chama para as chamadas de sistema `mmap` . Para obter esses gráficos de chama, capturamos os eventos de chamada do sistema `sys_enter_mmap` com `perf record` e, em seguida, geramos gráficos de chama com os dados registrados:"

#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid ""
"The native executable above was created passing in\n"
"`-Dquarkus.native.debug.enabled` and `-Dquarkus.native.additional-build-args=-H:-DeleteLocalSymbols`\n"
"as extra build flags."
msgstr "O executável nativo acima foi criado com a inclusão de `-Dquarkus.native.debug.enabled` e `-Dquarkus.native.additional-build-args=-H:-DeleteLocalSymbols` como sinalizadores de compilação adicionais."

#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid ""
"`mmap` calls happen for a variety of reasons,\n"
"but in the context of this blog post,\n"
"we're interested in those `mmap` calls that are triggered by object allocations.\n"
"Not every object allocation triggers an `mmap` call.\n"
"Instead, each thread in SubstrateVM will allocate a heap chunk using `mmap` when the first object is allocated,\n"
"and it will use this heap chunk as long as there's space for further objects allocated in the same thread.\n"
"When the heap chunk is full,\n"
"the thread will request a new heap chunk using `mmap`.\n"
"This pattern is called thread-local allocation.\n"
"HotSpot has a similar feature as well,\n"
"but there the heap chunk size is dynamically computed depending on multiple factors,\n"
"while on SubstrateVM the size is fixed.\n"
"At the time of writing, the default heap chunk size is 1MB,\n"
"but an upcoming change will make it 512KB instead."
msgstr "`mmap` ocorrem por vários motivos, mas no contexto desta postagem do blog, estamos interessados nas chamadas `mmap` que são acionadas por alocações de objetos. Nem toda alocação de objeto aciona uma chamada `mmap` . Em vez disso, cada thread no SubstrateVM alocará um pedaço de heap usando `mmap` quando o primeiro objeto for alocado e usará esse pedaço de heap enquanto houver espaço para outros objetos alocados no mesmo thread. Quando o heap chunk estiver cheio, o thread solicitará um novo heap chunk usando `mmap` . Esse padrão é chamado de alocação local de thread. O HotSpot também tem um recurso semelhante, mas lá o tamanho do heap chunk é calculado dinamicamente, dependendo de vários fatores, enquanto no SubstrateVM o tamanho é fixo. No momento em que este artigo foi escrito, o tamanho padrão do heap chunk era de 1 MB, mas uma alteração futura fará com que seja de 512 KB."

#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid ""
"We describe the object allocation as fast when the thread has a heap chunk cached and there's enough space for the object.\n"
"We describe the object allocation as slow when the thread needs to request a new heap chunk via the `mmap` system call to satisfy the object allocation.\n"
"Slow allocations are the most interesting in this case,\n"
"because they give us a rough indication of which allocations are pushing the number of heap chunks up,\n"
"and therefore are pushing the RSS consumption up.\n"
"In SubstrateVM, stacktraces of the slow allocation path contain invocations to methods defined in the `com.oracle.svm.core.genscavenge.ThreadLocalAllocation` class that contain the `slowPathNew` prefix in their name .\n"
"E.g. `slowPathNewInstance` for plain objects or `slowPathNewArray` for arrays."
msgstr "Descrevemos a alocação de objetos como rápida quando o thread tem um pedaço de heap armazenado em cache e há espaço suficiente para o objeto. Descrevemos a alocação do objeto como lenta quando o thread precisa solicitar um novo pedaço de heap por meio da chamada de sistema `mmap` para satisfazer a alocação do objeto. As alocações lentas são as mais interessantes nesse caso, pois nos dão uma indicação aproximada de quais alocações estão aumentando o número de pedaços de heap e, portanto, o consumo de RSS. No SubstrateVM, os stacktraces do caminho de alocação lenta contêm invocações de métodos definidos na classe `com.oracle.svm.core.genscavenge.ThreadLocalAllocation` que contêm o prefixo `slowPathNew` em seu nome. Por exemplo, `slowPathNewInstance` para objetos simples ou `slowPathNewArray` para arrays."

#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid ""
"The areas of interest in the flamegraphs are those stacktraces that contain `ApplicationImpl.doStart()` method call,\n"
"because that's the method that is responsible for starting up Quarkus applications.\n"
"We want to find out how many slow path allocations are visible in these stacktraces,\n"
"which are executed by the `main` thread.\n"
"Also, by looking at the stacktraces that cause these slow path allocations,\n"
"we can get an idea of which components might be allocation heavy.\n"
"If you focus the flamegraph on that method,\n"
"and then click on `Search` at the top right and type `slowPathNew`,\n"
"you can observe which of the `sys_enter_mmap` system calls are related to native heap memory allocation."
msgstr "As áreas de interesse nos gráficos de chama são os stacktraces que contêm a chamada do método `ApplicationImpl.doStart()` , porque esse é o método responsável por iniciar os aplicativos Quarkus. Queremos descobrir quantas alocações de caminho lento estão visíveis nesses stacktraces, que são executados pelo thread `main` . Além disso, observando os stacktraces que causam essas alocações de caminho lento, podemos ter uma ideia de quais componentes podem ser pesados em termos de alocação. Se o gráfico de chama for focalizado nesse método e, em seguida, o usuário clicar em `Search` no canto superior direito e digitar `slowPathNew` , poderá observar quais das chamadas de sistema `sys_enter_mmap` estão relacionadas à alocação de memória heap nativa."

#. type: Plain text
#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid "For Quarkus 2.7.6.Final, the flamegraph looks like this:"
msgstr "Para o Quarkus 2.7.6.Final, o gráfico de chama tem o seguinte aspeto:"

#. type: Plain text
#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid "And here's a screenshot highlighting the stacktraces that contain slow path allocations:"
msgstr "E aqui está uma captura de tela destacando os rastreamentos de pilha que contêm alocações de caminho lentas:"

#. type: Plain text
#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid "Observing the number of stacktraces that contain `slowPathNew` invocations above, i.e. 2, we can say that the `main` thread in Quarkus 2.7.6.Final allocates roughly 2MB of heap chunks."
msgstr "Observando o número de stacktraces que contêm `slowPathNew` invocações acima, ou seja, 2, podemos dizer que a thread `main` no Quarkus 2.7.6.Final aloca cerca de 2MB de pedaços de heap."

#. type: Plain text
#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid "For Quarkus 2.13.4.Final, the flamegraph looks like this:"
msgstr "Para o Quarkus 2.13.4.Final, o gráfico de chama tem o seguinte aspeto:"

#. type: Plain text
#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid "Focusing on the same area, we observe that the `slowPathNew` stacktrace count is 5 in this case, so the `main` thread allocates roughly 5MB of heap chunks:"
msgstr "Concentrando-nos na mesma área, observamos que a contagem do stacktrace `slowPathNew` é 5 neste caso, pelo que a thread `main` atribui cerca de 5 MB de pedaços de heap:"

#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid ""
"The increase in object allocation at runtime startup between these two Quarkus versions,\n"
"combined with the idiosyncrasies of how thread local allocation works in SubstrateVM,\n"
"is what was causing the increase in RSS consumption.\n"
"In other words, even though both HotSpot and SubstrateVM experience higher allocations,\n"
"SubstrateVM's fixed thread-local allocation heap chunk sizes make this more apparent,\n"
"compared to the dynamic thread-local allocation logic in HotSpot."
msgstr "O aumento na alocação de objetos na inicialização do tempo de execução entre essas duas versões do Quarkus, combinado com as idiossincrasias de como a alocação local de thread funciona no SubstrateVM, é o que estava causando o aumento no consumo de RSS. Em outras palavras, embora tanto o HotSpot quanto o SubstrateVM tenham alocações mais altas, os tamanhos fixos dos pedaços de heap de alocação local de thread do SubstrateVM tornam isso mais aparente, em comparação com a lógica de alocação local de thread dinâmica no HotSpot."

#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid ""
"Since then, improvements were made to the components that caused the extra object allocation.\n"
"We were able to detect the changes that had caused these extra allocations\n"
"by looking at the components that appeared in the stacktrace leading to slow allocations,\n"
"and inspecting updates that had happened in those components.\n"
"In this case, updates to the SmallRye configuration handling at startup caused the regression."
msgstr "Desde então, foram feitas melhorias nos componentes que causaram a alocação extra de objetos. Conseguimos detectar as alterações que causaram essas alocações extras observando os componentes que apareciam no stacktrace, levando a alocações lentas, e inspecionando as atualizações que ocorreram nesses componentes. Nesse caso, as atualizações no tratamento da configuração do SmallRye na inicialização causaram a regressão."

#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid ""
"The stacktraces that cause slow object allocations give us an approximation on the components that cause memory usage increase.\n"
"There could be situations where the stacktrace leading to a slow allocation is perfectly valid,\n"
"but due to the non-deterministic nature of object allocation,\n"
"the stacktrace just happens to be the one that caused a new heap chunk to be allocated.\n"
"However, if you see multiple stacktraces in the same area,\n"
"that's probably a good hint that something in that area needs to be investigated."
msgstr "Os rastreamentos de pilha que causam alocações lentas de objetos nos dão uma aproximação dos componentes que causam o aumento do uso da memória. Pode haver situações em que o stacktrace que leva a uma alocação lenta seja perfeitamente válido, mas, devido à natureza não determinística da alocação de objetos, o stacktrace é apenas aquele que causou a alocação de um novo pedaço de heap. Entretanto, se o senhor vir vários stacktraces na mesma área, isso provavelmente é uma boa dica de que algo nessa área precisa ser investigado."

#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid ""
"By Quarkus version 2.13.7.Final, the RSS consumption on startup was back to previous levels.\n"
"The RSS regression was introduced by the changes in\n"
"https://github.com/quarkusio/quarkus/pull/26802#issue-1308798216[PR #26802],\n"
"and the fixes in https://github.com/quarkusio/quarkus/pull/29408[PR #29408]\n"
"and https://github.com/quarkusio/quarkus/pull/29842[PR #29842]\n"
"brought it back down."
msgstr "Na versão 2.13.7.Final do Quarkus, o consumo de RSS na inicialização voltou aos níveis anteriores. A regressão do RSS foi introduzida pelas alterações no link:https://github.com/quarkusio/quarkus/pull/26802#issue-1308798216[PR #26802] , e as correções no link:https://github.com/quarkusio/quarkus/pull/29408[PR #29408] e no link:https://github.com/quarkusio/quarkus/pull/29842[PR #29842] o reduziram novamente."

#. type: Title ==
#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy, no-wrap
msgid "Performing the analysis with `ObjectAllocationInNewTLAB` JFR event"
msgstr "Realização da análise com o evento `ObjectAllocationInNewTLAB` JFR"

#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid ""
"As newer versions of GraalVM implement https://github.com/oracle/graal/issues/5410[more and more JFR events] in native mode,\n"
"it also becomes easier to analyse Quarkus application performance.\n"
"For instance the recent release of GraalVM for JDK 17/20 adds support for the `jdk.ObjectAllocationInNewTLAB` event,\n"
"which would have highlighted the discrepancies in the Quarkus versions compared above.\n"
"Unfortunately, the Quarkus versions tested here are not compatible with this GraalVM version,\n"
"but we can give it a go with the latest Quarkus version to see what comes out."
msgstr "Como as versões mais recentes do GraalVM implementam cada link:https://github.com/oracle/graal/issues/5410[vez mais eventos JFR] no modo nativo, também fica mais fácil analisar o desempenho do aplicativo Quarkus. Por exemplo, a versão recente do GraalVM para JDK 17/20 adiciona suporte ao evento `jdk.ObjectAllocationInNewTLAB` , o que teria destacado as discrepâncias nas versões do Quarkus comparadas acima. Infelizmente, as versões do Quarkus testadas aqui não são compatíveis com essa versão do GraalVM, mas podemos tentar com a versão mais recente do Quarkus para ver o que acontece."

#. type: Plain text
#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid "First, we build the native Quarkus application with JFR support:"
msgstr "Primeiro, criamos a aplicação Quarkus nativa com suporte JFR:"

#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid ""
"To obtain `jdk.ObjectAllocationInNewTLAB` events,\n"
"a custom JFC configuration file is required.\n"
"We use `jfr configure` to generate it:"
msgstr "Para obter os eventos do `jdk.ObjectAllocationInNewTLAB` , é necessário um arquivo de configuração JFC personalizado. Usamos o site `jfr configure` para gerá-lo:"

#. type: Plain text
#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid "Then, we start the Quarkus native executable with the necessary JFR flags:"
msgstr "Em seguida, iniciamos o executável nativo do Quarkus com os sinalizadores JFR necessários:"

#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid ""
"After shutting down Quarkus,\n"
"we can use https://adoptium.net/jmc[Adoptium's Eclipse Mission Control]\n"
"to visualize a flamegraph for all the `jdk.ObjectAllocationInNewTLAB` events.\n"
"We can also do a similar focus on `ApplicationImpl.doStart()` method to observe which slow path allocations get triggered from there:"
msgstr "Depois de encerrar o Quarkus, podemos usar link:https://adoptium.net/jmc[o Eclipse Mission Control do Adoptium] para visualizar um gráfico de chama para todos os eventos do `jdk.ObjectAllocationInNewTLAB` . Também podemos fazer um foco semelhante no método `ApplicationImpl.doStart()` para observar quais alocações de caminho lento são acionadas a partir daí:"

#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid ""
"Looking at the flamegraph,\n"
"we can count 7 stacktraces for slow path allocations for the `main` thread.\n"
"Whether this is a problem,\n"
"or maybe code execution has shifted from another thread to `main`,\n"
"would be something we would need to explore further and see if there's a regression."
msgstr "Observando o gráfico de chama, podemos contar 7 stacktraces para alocações de caminho lento para o thread `main` . Se isso é um problema ou se a execução do código foi transferida de outro thread para `main` , seria algo que precisaríamos explorar mais a fundo e verificar se há uma regressão."

#: _posts/2023-07-27-native-startup-rss-troubleshooting.adoc
#, fuzzy
msgid ""
"If you encounter memory issues in your native applications,\n"
"or any other type of performance issues,\n"
"do not hesitate giving JFR a go.\n"
"Robert Toyonaga has written a couple of blog posts on the latest JFR additions,\n"
"see link:/blog/profile-and-monitor-native-executables-with-jfr[here] to find out more."
msgstr "Se o senhor encontrar problemas de memória em seus aplicativos nativos ou qualquer outro tipo de problema de desempenho, não hesite em dar uma chance ao JFR. Robert Toyonaga escreveu algumas postagens no blog sobre as mais recentes adições ao JFR. Veja link:/blog/profile-and-monitor-native-executables-with-jfr[aqui] para saber mais."
