# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:07+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:1
#, fuzzy, no-wrap
msgid "hcummins"
msgstr "hcummins"

#. type: YAML Front Matter: date
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:1
#, fuzzy, no-wrap
msgid "2023-05-15"
msgstr "2023-05-15"

#. type: YAML Front Matter: layout
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "posto"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:1
#, fuzzy, no-wrap
msgid "With Quarkus 3 and the Quarkiverse Pact extensions, Quarkus can run continuous tests continuously."
msgstr "Com o Quarkus 3 e as extensões Quarkiverse Pact, o Quarkus pode executar testes contínuos continuamente."

#. type: YAML Front Matter: tags
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:1
#, fuzzy, no-wrap
msgid "extension"
msgstr "extensão"

#. type: YAML Front Matter: title
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:1
#, fuzzy, no-wrap
msgid "Using Pact and Quarkus to Tame Microservices Testing"
msgstr "Usando o Pact e o Quarkus para domar o teste de microsserviços"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:13
#, fuzzy
msgid "In a microservices architecture, making sure each microservices works is (relatively) easy.  The microservices are usually small, and easy to test.  But how do you make sure the microservices work together? How do you know if the system as a whole works?"
msgstr "Numa arquitetura de microsserviços, garantir que cada microsserviço funciona é (relativamente) fácil. Os microserviços são normalmente pequenos e fáceis de testar. Mas como garantir que os microsserviços funcionem juntos? Como é que se sabe se o sistema como um todo funciona?"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:16
#, fuzzy
msgid "One answer is contract testing.  Contract testing gives more confidence than testing individual services, but the cost is far lower than end-to-end testing."
msgstr "Uma resposta é o ensaio por contrato. O teste de contratos dá mais confiança do que o teste de serviços individuais, mas o custo é muito inferior ao do teste de ponta a ponta."

#. type: Title ==
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:17
#, fuzzy, no-wrap
msgid "What's wrong with end-to-end testing?"
msgstr "O que há de errado com os testes de ponta a ponta?"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:23
#, fuzzy
msgid "Even when developing, standing up all the dependencies and consumers for an individual microservice can be hard work.  Recently, our consulting colleagues received a plea for help from the CTO of a tech startup, who couldn't run his dev stack on a brand new laptop with 64 GB of RAM, because the application involved dozens of microservices and they consumed so many resources.  (If this sounds familiar, Quarkus can help https://www.redhat.com/en/resources/greener-java-applications-detail#section-7[lower the resource consumption of the stack], but that's a different topic!)"
msgstr "Mesmo durante o desenvolvimento, levantar todas as dependências e consumidores para um microserviço individual pode ser um trabalho árduo. Recentemente, nossos colegas de consultoria receberam um pedido de ajuda do CTO de uma startup de tecnologia, que não conseguia executar sua pilha de desenvolvimento em um laptop novo com 64 GB de RAM, porque o aplicativo envolvia dezenas de microsserviços e eles consumiam muitos recursos. (Se isso soa familiar, o Quarkus pode ajudar a  link:https://www.redhat.com/en/resources/greener-java-applications-detail#section-7[reduzir o consumo de recursos da pilha], mas esse é um tópico diferente!)"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:27
#, fuzzy, no-wrap
msgid ""
"Teams sometimes address the challenge of local microservices development by providing remote environments into which local code can be injected.\n"
" This is sometimes called https://blog.getambassador.io/testing-microservices-isolating-requests-not-environments-with-telepresence-f22535789253[\"remocal development\"] or telepresence.\n"
"Another, purely local, model, is https://eng.lyft.com/scaling-productivity-on-microservices-at-lyft-part-2-optimizing-for-fast-local-development-9f27a98b47ee[local virtual environments].\n"
msgstr "Por vezes, as equipas abordam o desafio do desenvolvimento local de microsserviços fornecendo ambientes remotos nos quais o código local pode ser injetado. Isto é por vezes chamado de  link:https://blog.getambassador.io/testing-microservices-isolating-requests-not-environments-with-telepresence-f22535789253[\"desenvolvimento remocal\"] ou telepresença. Outro modelo, puramente local, são os  link:https://eng.lyft.com/scaling-productivity-on-microservices-at-lyft-part-2-optimizing-for-fast-local-development-9f27a98b47ee[ambientes virtuais locais]."

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:29
#, fuzzy
msgid "While these environments can be useful, they can also be fragile, and managing them often needs a dedicated platform team."
msgstr "Embora estes ambientes possam ser úteis, também podem ser frágeis e a sua gestão necessita frequentemente de uma equipa de plataforma dedicada."

#. type: Title ==
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:30
#, fuzzy, no-wrap
msgid "What's wrong with mocks?"
msgstr "Qual é o problema dos simulacros?"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:38
#, fuzzy
msgid "When having 'real' versions of the rest of the system to test against is too heavy, teams often use mocks or stubs.  (Mocks and stubs are subtly different, but for simplicity I'll use \"mocks\" to describe both.)  Mocks have many advantages; they're lightweight and enable unit testing of code with external dependencies.  However, mocks also have a big disadvantage; there's no guarantee the mock behaves like real the thing.  Users of a service will bake their own assumptions about how a service behaves into a mock.  If a service changes, it's up to consuming code to figure out what's changed and update the mocks."
msgstr "Quando ter versões \"reais\" do resto do sistema para testar é demasiado pesado, as equipas usam frequentemente mocks ou stubs. (Mocks e stubs são subtilmente diferentes, mas para simplificar vou usar \"mocks\" para descrever ambos). Os mocks têm muitas vantagens; são leves e permitem testes unitários de código com dependências externas. No entanto, os mocks também têm uma grande desvantagem: não há garantia de que o mock se comporte como a coisa real. Os utilizadores de um serviço vão incorporar as suas próprias suposições sobre como um serviço se comporta numa simulação. Se um serviço muda, cabe ao código consumidor descobrir o que mudou e atualizar os mocks."

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:40
#, fuzzy
msgid "Sometimes, the first time these assumptions are tested is in production."
msgstr "Por vezes, a primeira vez que estes pressupostos são testados é na produção."

#. type: Title ==
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:41
#, fuzzy, no-wrap
msgid "Contract tests"
msgstr "Testes de contrato"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:45
#, fuzzy
msgid "How can we make a link between the mock being used by a consumer, and the functional validation being done by the provider? This is where contract testing helps. A contract testing framework powers two things:"
msgstr "Como podemos estabelecer uma ligação entre a simulação que está a ser utilizada por um consumidor e a validação funcional que está a ser feita pelo fornecedor? É aqui que os testes de contrato ajudam. Uma estrutura de teste de contrato permite duas coisas:"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:47
#, fuzzy
msgid "A generated mock, which is used by the consumer to validate the consumer code behaves correctly. The mock is generated from the contract and examples."
msgstr "Uma simulação gerada, que é utilizada pelo consumidor para validar o comportamento correto do código do consumidor. A simulação é gerada a partir do contrato e dos exemplos."

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:48
#, fuzzy
msgid "Generated functional tests, which is validates the provider behaves as expected. These tests are generated from the same contract and examples as the consumer's mock."
msgstr "Testes funcionais gerados, que validam se o fornecedor se comporta como esperado. Estes testes são gerados a partir do mesmo contrato e exemplos que a simulação do consumidor."

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:53
#, fuzzy
msgid "With https://en.wikipedia.org/wiki/Test-driven_development[Test Driven Development(TDD)], you start with tests (a description of the desired behaviour) and work backwards to an implementation.  You can do the same thing with contract testing; you start with the contract, which describes what the service needs to do, and work backwards to the implementation.  This is known as \"contract-first\", and it can be a very effective development technique.  My colleagues in Red Hat App Dev Consulting have written some great articles about https://appdev.consulting.redhat.com/tracks/contract-first/[how they use contract-first development]."
msgstr "Com o  link:https://en.wikipedia.org/wiki/Test-driven_development[desenvolvimento orientado por testes (TDD)], começa-se com testes (uma descrição do comportamento pretendido) e trabalha-se de trás para a frente até à implementação. Pode fazer-se o mesmo com os testes de contratos; começa-se com o contrato, que descreve o que o serviço tem de fazer, e trabalha-se de trás para a frente até à implementação. Isto é conhecido como \"contract-first\", e pode ser uma técnica de desenvolvimento muito eficaz. Meus colegas da Red Hat App Dev Consulting escreveram alguns artigos excelentes sobre  link:https://appdev.consulting.redhat.com/tracks/contract-first/[como eles usam o desenvolvimento de contrato-primeiro]."

#. type: Title ==
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:54
#, fuzzy, no-wrap
msgid "Contract test options"
msgstr "Opções de teste de contrato"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:60
#, fuzzy
msgid "There are a few different contract-testing frameworks out there, including Pact, Microcks, Spring Cloud Contract.  Some teams also build up their own OpenAPI-based toolchains, such as Schemathesis for functional tests, and Prism for the mocking.  Arguably the most popular contract testing solution is Pact, so it's where the Quarkiverse support for contract testing has started."
msgstr "Existem alguns frameworks de teste de contratos diferentes, incluindo Pact, Microcks, Spring Cloud Contract. Algumas equipas também constroem as suas próprias ferramentas baseadas em OpenAPI, como o Schemathesis para testes funcionais e o Prism para o mocking. Indiscutivelmente, a solução de teste de contrato mais popular é o Pact, por isso é onde o suporte do Quarkiverse para testes de contrato começou."

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:62
#, fuzzy
msgid "Pact is polyglot, with bindings for almost all popular languages."
msgstr "O Pact é poliglota, com ligações para quase todas as línguas populares."

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:63
#, fuzzy
msgid "It's an integrated solution which provides both mocks for consumers and functional tests for providers."
msgstr "Trata-se de uma solução integrada que fornece simulações para os consumidores e testes funcionais para os fornecedores."

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:64
#, fuzzy
msgid "It's standalone, and can be run without standing up any extra services, although a Pact Broker with some nice value-adds is available."
msgstr "É autónomo e pode ser executado sem a necessidade de criar serviços adicionais, embora esteja disponível um Pact Broker com algumas mais-valias."

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:65
#, fuzzy
msgid "Although Pact started as a REST-only solution, it is now https://docs.pact.io/blog/2022/11/11/pact-plugin-framework-launch[pluggable], which allows it to support a range of protocols and transports"
msgstr "Embora o Pact tenha começado por ser uma solução exclusivamente REST, é agora  link:https://docs.pact.io/blog/2022/11/11/pact-plugin-framework-launch[compatível] com vários protocolos e transportes"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:68
#, fuzzy
msgid "The Pact team have a https://pactflow.io/blog/contract-testing-using-json-schemas-and-open-api-part-1/[good overview] of the advantages and disadvantages of schema-based testing (such as validation based on an OpenAPI spec) and contract testing."
msgstr "A equipa do Pact tem uma  link:https://pactflow.io/blog/contract-testing-using-json-schemas-and-open-api-part-1/[boa visão geral] das vantagens e desvantagens dos testes baseados em esquemas (como a validação baseada numa especificação OpenAPI) e dos testes de contratos."

#. type: Title ==
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:69
#, fuzzy, no-wrap
msgid "What's new with Pact and Quarkus"
msgstr "Novidades sobre o Pacto e o Quarkus"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:73
#, fuzzy
msgid "Using Pact with Quarkus isn't new; Quarkus contributors made https://github.com/quarkusio/quarkus/commit/70902a005842a083814aea13567b8bc82574a021[several] https://github.com/quarkusio/quarkus/commit/910227622e0e4c51c111872962cfd5364674673a#diff-40752b74da493b2aa06facf4b1ebd7a81736f6318dcfe76ddae90deafa57fad7[classloading adjustments] in Quarkus core to support Pact testing in Quarkus 2.0, but this support was limited. In particular, Pact tests couldn't run in continuous testing mode."
msgstr "A utilização do Pact com o Quarkus não é nova; os colaboradores do Quarkus fizeram  link:https://github.com/quarkusio/quarkus/commit/70902a005842a083814aea13567b8bc82574a021[vários]  link:https://github.com/quarkusio/quarkus/commit/910227622e0e4c51c111872962cfd5364674673a#diff-40752b74da493b2aa06facf4b1ebd7a81736f6318dcfe76ddae90deafa57fad7[ajustes de carregamento de classes] no núcleo do Quarkus para suportar os testes Pact no Quarkus 2.0, mas este suporte era limitado. Em particular, os testes Pact não podiam ser executados em modo de teste contínuo."

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:78
#, fuzzy
msgid "Quarkus 3.0 moves Pact support from Quarkus core to its own Quarkiverse extension, where it can be deeper.  Quarkus core also includes classloading changes in the Kotlin extension and some classloading fixes in continuous testing itself.  These mean that, with the Pact Quarkiverse http://quarkus.io/extensions/io.quarkiverse.pact/quarkus-pact-provider[provider] and http://quarkus.io/extensions/io.quarkiverse.pact/quarkus-pact-consumer[consumer extensions] Pact tests work properly with `quarkus test` and `quarkus dev`."
msgstr "O Quarkus 3.0 move o suporte ao Pact do núcleo do Quarkus para sua própria extensão Quarkiverse, onde pode ser mais profundo. O núcleo do Quarkus também inclui alterações de carregamento de classe na extensão Kotlin e algumas correções de carregamento de classe no próprio teste contínuo. Isto significa que, com as  link:http://quarkus.io/extensions/io.quarkiverse.pact/quarkus-pact-consumer[extensões] de  link:http://quarkus.io/extensions/io.quarkiverse.pact/quarkus-pact-provider[fornecedor] e  link:http://quarkus.io/extensions/io.quarkiverse.pact/quarkus-pact-consumer[consumidor] do Pact Quarkiverse, os testes Pact funcionam corretamente com `quarkus test` e `quarkus dev`."

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:80
#, fuzzy
msgid "To install the consumer extensions, run"
msgstr "Para instalar as extensões do consumidor, execute"

#. type: delimited block -
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:83
#, no-wrap
msgid "quarkus ext add io.quarkiverse.pact:quarkus-pact-consumer\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:86
#, fuzzy
msgid "The provider extension can be installed with"
msgstr "A extensão do fornecedor pode ser instalada com"

#. type: delimited block -
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:88
#, no-wrap
msgid "quarkus ext add io.quarkiverse.pact:quarkus-pact-provider\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:91
#, fuzzy
msgid "For a deeper dive into contract testing, check out https://www.youtube.com/watch?v=d9CSY8HuZ9U[Quarkus Insights #117]."
msgstr "Para uma análise mais aprofundada dos testes de contrato, consulte o  link:https://www.youtube.com/watch?v=d9CSY8HuZ9U[Quarkus Insights #117]."

#. type: Title ==
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:93
#, fuzzy, no-wrap
msgid "Summary"
msgstr "Resumo"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:98
#, fuzzy
msgid "If you're using microservices, you should seriously consider contract testing.  With the new Pact extension, Quarkus 3 allows contract tests to be developed using the same great workflow as other tests."
msgstr "Se estiver a utilizar microsserviços, deve considerar seriamente os testes de contrato. Com a nova extensão Pact, o Quarkus 3 permite que os testes de contrato sejam desenvolvidos usando o mesmo fluxo de trabalho excelente de outros testes."

#. type: Title ==
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:99
#, fuzzy, no-wrap
msgid "More resources"
msgstr "Mais recursos"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:102
#, fuzzy
msgid "https://quarkiverse.github.io/quarkiverse-docs/quarkus-pact/dev/index.html[Documentation for the Pact extensions]"
msgstr "link:https://quarkiverse.github.io/quarkiverse-docs/quarkus-pact/dev/index.html[Documentação para as extensões do Pacto]"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:103
#, fuzzy
msgid "https://docs.pact.io/implementation_guides/jvm[The Pact JVM binding documentation]"
msgstr "link:https://docs.pact.io/implementation_guides/jvm[A documentação da ligação Pact JVM]"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:104
#, fuzzy
msgid "https://quarkus.io/quarkus-workshops/super-heroes/index.html#contract-testing[Contract Testing Module] of the Quarkus Superheroes workshop"
msgstr "link:https://quarkus.io/quarkus-workshops/super-heroes/index.html#contract-testing[Módulo de teste de contrato] do atelier Quarkus Superheroes"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:105
#, fuzzy
msgid "https://www.youtube.com/watch?v=d9CSY8HuZ9U[Quarkus Insights about the Pact extension]"
msgstr "link:https://www.youtube.com/watch?v=d9CSY8HuZ9U[Quarkus Insights sobre a extensão do Pacto]"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:106
#, fuzzy
msgid "https://github.com/holly-cummins/pact-quarkus-sweater-demo[Sample application showing the Quarkus Pact extension]"
msgstr "link:https://github.com/holly-cummins/pact-quarkus-sweater-demo[Exemplo de aplicação que mostra a extensão do Pacto de Quarkus]"

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:107
#, fuzzy
msgid "https://appdev.consulting.redhat.com/tracks/contract-first/[Contract-first development] (with OpenAPIGenerator, Schemathesis, and Prism)"
msgstr "link:https://appdev.consulting.redhat.com/tracks/contract-first/[Desenvolvimento com base em contratos] (com OpenAPIGenerator, Schemathesis e Prism)"
