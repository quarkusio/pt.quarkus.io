# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:07+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:1
#, no-wrap
msgid "hcummins"
msgstr ""

#. type: YAML Front Matter: date
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:1
#, no-wrap
msgid "2023-05-15"
msgstr ""

#. type: YAML Front Matter: layout
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:1
#, no-wrap
msgid "post"
msgstr ""

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:1
#, no-wrap
msgid "With Quarkus 3 and the Quarkiverse Pact extensions, Quarkus can run continuous tests continuously."
msgstr ""

#. type: YAML Front Matter: tags
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:1
#, no-wrap
msgid "extension"
msgstr ""

#. type: YAML Front Matter: title
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:1
#, no-wrap
msgid "Using Pact and Quarkus to Tame Microservices Testing"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:13
msgid "In a microservices architecture, making sure each microservices works is (relatively) easy.  The microservices are usually small, and easy to test.  But how do you make sure the microservices work together? How do you know if the system as a whole works?"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:16
msgid "One answer is contract testing.  Contract testing gives more confidence than testing individual services, but the cost is far lower than end-to-end testing."
msgstr ""

#. type: Title ==
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:17
#, no-wrap
msgid "What's wrong with end-to-end testing?"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:23
msgid "Even when developing, standing up all the dependencies and consumers for an individual microservice can be hard work.  Recently, our consulting colleagues received a plea for help from the CTO of a tech startup, who couldn't run his dev stack on a brand new laptop with 64 GB of RAM, because the application involved dozens of microservices and they consumed so many resources.  (If this sounds familiar, Quarkus can help https://www.redhat.com/en/resources/greener-java-applications-detail#section-7[lower the resource consumption of the stack], but that's a different topic!)"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:27
#, no-wrap
msgid ""
"Teams sometimes address the challenge of local microservices development by providing remote environments into which local code can be injected.\n"
" This is sometimes called https://blog.getambassador.io/testing-microservices-isolating-requests-not-environments-with-telepresence-f22535789253[\"remocal development\"] or telepresence.\n"
"Another, purely local, model, is https://eng.lyft.com/scaling-productivity-on-microservices-at-lyft-part-2-optimizing-for-fast-local-development-9f27a98b47ee[local virtual environments].\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:29
msgid "While these environments can be useful, they can also be fragile, and managing them often needs a dedicated platform team."
msgstr ""

#. type: Title ==
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:30
#, no-wrap
msgid "What's wrong with mocks?"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:38
msgid "When having 'real' versions of the rest of the system to test against is too heavy, teams often use mocks or stubs.  (Mocks and stubs are subtly different, but for simplicity I'll use \"mocks\" to describe both.)  Mocks have many advantages; they're lightweight and enable unit testing of code with external dependencies.  However, mocks also have a big disadvantage; there's no guarantee the mock behaves like real the thing.  Users of a service will bake their own assumptions about how a service behaves into a mock.  If a service changes, it's up to consuming code to figure out what's changed and update the mocks."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:40
msgid "Sometimes, the first time these assumptions are tested is in production."
msgstr ""

#. type: Title ==
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:41
#, no-wrap
msgid "Contract tests"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:45
msgid "How can we make a link between the mock being used by a consumer, and the functional validation being done by the provider? This is where contract testing helps. A contract testing framework powers two things:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:47
msgid "A generated mock, which is used by the consumer to validate the consumer code behaves correctly. The mock is generated from the contract and examples."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:48
msgid "Generated functional tests, which is validates the provider behaves as expected. These tests are generated from the same contract and examples as the consumer's mock."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:53
msgid "With https://en.wikipedia.org/wiki/Test-driven_development[Test Driven Development(TDD)], you start with tests (a description of the desired behaviour) and work backwards to an implementation.  You can do the same thing with contract testing; you start with the contract, which describes what the service needs to do, and work backwards to the implementation.  This is known as \"contract-first\", and it can be a very effective development technique.  My colleagues in Red Hat App Dev Consulting have written some great articles about https://appdev.consulting.redhat.com/tracks/contract-first/[how they use contract-first development]."
msgstr ""

#. type: Title ==
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:54
#, no-wrap
msgid "Contract test options"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:60
msgid "There are a few different contract-testing frameworks out there, including Pact, Microcks, Spring Cloud Contract.  Some teams also build up their own OpenAPI-based toolchains, such as Schemathesis for functional tests, and Prism for the mocking.  Arguably the most popular contract testing solution is Pact, so it's where the Quarkiverse support for contract testing has started."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:62
msgid "Pact is polyglot, with bindings for almost all popular languages."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:63
msgid "It's an integrated solution which provides both mocks for consumers and functional tests for providers."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:64
msgid "It's standalone, and can be run without standing up any extra services, although a Pact Broker with some nice value-adds is available."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:65
msgid "Although Pact started as a REST-only solution, it is now https://docs.pact.io/blog/2022/11/11/pact-plugin-framework-launch[pluggable], which allows it to support a range of protocols and transports"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:68
msgid "The Pact team have a https://pactflow.io/blog/contract-testing-using-json-schemas-and-open-api-part-1/[good overview] of the advantages and disadvantages of schema-based testing (such as validation based on an OpenAPI spec) and contract testing."
msgstr ""

#. type: Title ==
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:69
#, no-wrap
msgid "What's new with Pact and Quarkus"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:73
msgid "Using Pact with Quarkus isn't new; Quarkus contributors made https://github.com/quarkusio/quarkus/commit/70902a005842a083814aea13567b8bc82574a021[several] https://github.com/quarkusio/quarkus/commit/910227622e0e4c51c111872962cfd5364674673a#diff-40752b74da493b2aa06facf4b1ebd7a81736f6318dcfe76ddae90deafa57fad7[classloading adjustments] in Quarkus core to support Pact testing in Quarkus 2.0, but this support was limited. In particular, Pact tests couldn't run in continuous testing mode."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:78
msgid "Quarkus 3.0 moves Pact support from Quarkus core to its own Quarkiverse extension, where it can be deeper.  Quarkus core also includes classloading changes in the Kotlin extension and some classloading fixes in continuous testing itself.  These mean that, with the Pact Quarkiverse http://quarkus.io/extensions/io.quarkiverse.pact/quarkus-pact-provider[provider] and http://quarkus.io/extensions/io.quarkiverse.pact/quarkus-pact-consumer[consumer extensions] Pact tests work properly with `quarkus test` and `quarkus dev`."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:80
msgid "To install the consumer extensions, run"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:83
#, no-wrap
msgid "quarkus ext add io.quarkiverse.pact:quarkus-pact-consumer\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:86
msgid "The provider extension can be installed with"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:88
#, no-wrap
msgid "quarkus ext add io.quarkiverse.pact:quarkus-pact-provider\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:91
msgid "For a deeper dive into contract testing, check out https://www.youtube.com/watch?v=d9CSY8HuZ9U[Quarkus Insights #117]."
msgstr ""

#. type: Title ==
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:93
#, no-wrap
msgid "Summary"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:98
msgid "If you're using microservices, you should seriously consider contract testing.  With the new Pact extension, Quarkus 3 allows contract tests to be developed using the same great workflow as other tests."
msgstr ""

#. type: Title ==
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:99
#, no-wrap
msgid "More resources"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:102
msgid "https://quarkiverse.github.io/quarkiverse-docs/quarkus-pact/dev/index.html[Documentation for the Pact extensions]"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:103
msgid "https://docs.pact.io/implementation_guides/jvm[The Pact JVM binding documentation]"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:104
msgid "https://quarkus.io/quarkus-workshops/super-heroes/index.html#contract-testing[Contract Testing Module] of the Quarkus Superheroes workshop"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:105
msgid "https://www.youtube.com/watch?v=d9CSY8HuZ9U[Quarkus Insights about the Pact extension]"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:106
msgid "https://github.com/holly-cummins/pact-quarkus-sweater-demo[Sample application showing the Quarkus Pact extension]"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-05-15-pact-and-quarkus-3.adoc:107
msgid "https://appdev.consulting.redhat.com/tracks/contract-first/[Contract-first development] (with OpenAPIGenerator, Schemathesis, and Prism)"
msgstr ""
