# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:1
#, fuzzy, no-wrap
msgid "cescoffier"
msgstr "cescoffier"

#. type: YAML Front Matter: date
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:1
#, fuzzy, no-wrap
msgid "2020-11-10"
msgstr "2020-11-10"

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "posto"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:1
#, fuzzy, no-wrap
msgid "How to observe events without touching the streams."
msgstr "Como observar os acontecimentos sem tocar nas correntes."

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:1
#, fuzzy, no-wrap
msgid "reactive mutiny"
msgstr "motim reativo"

#. type: YAML Front Matter: title
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:1
#, fuzzy, no-wrap
msgid "Peeking at the streams"
msgstr "Espreitar os riachos"

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:15
#, fuzzy
msgid "Mutiny is an event-driven Reactive Programming library.  Like other reactive programming libraries, it uses streams as the primary construct.  These streams convey events, and your code processes these events.  Most of the time, your code is only interested in item and failure events.  But there are other kinds of events such as cancellation, request, completion, and so on."
msgstr "Mutiny é uma biblioteca de programação reativa orientada a eventos. Tal como outras bibliotecas de programação reactiva, utiliza streams como construção primária. Esses fluxos transmitem eventos, e seu código processa esses eventos. Na maioria das vezes, seu código está interessado apenas em eventos de item e falha. Mas existem outros tipos de eventos, como cancelamento, solicitação, conclusão e assim por diante."

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:17
#, fuzzy
msgid "It's not rare that you need to look at these various events to understand better what's going on or implement specific side effects. For example, you may need to close a resource after a completion event or log a message on failure or cancellation."
msgstr "Não é raro precisar de olhar para estes vários eventos para compreender melhor o que se está a passar ou implementar efeitos secundários específicos. Por exemplo, pode ser necessário fechar um recurso após um evento de conclusão ou registar uma mensagem em caso de falha ou cancelamento."

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:21
#, fuzzy
msgid "For each kind of event, there is an associated _group_ providing the methods to handle that specific event: `onItem()`, `onFailure()`, `onCompletion()` and so on.  These groups provide two methods to peek at the various events without impacting its distribution: `invoke` and `call`.  It does not transform the received event; it notifies you that something happened and let you react."
msgstr "Para cada tipo de evento, existe um _grupo_ associado que fornece os métodos para lidar com esse evento específico: `onItem()`, `onFailure()`, `onCompletion()` e assim por diante. Estes grupos fornecem dois métodos para espreitar os vários eventos sem afetar a sua distribuição: `invoke` e `call`. Não transforma o evento recebido; notifica-o de que algo aconteceu e permite-lhe reagir."

#. type: Title ==
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:22
#, fuzzy, no-wrap
msgid "The invoke method"
msgstr "O método de invocação"

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:26
#, fuzzy
msgid "The `invoke` method is synchronous and does not return anything.  Mutiny invokes the configured callback when the observed stream dispatches the event:"
msgstr "O método `invoke` é síncrono e não devolve nada. O Mutiny invoca a chamada de retorno configurada quando o fluxo observado despacha o evento:"

#. type: delimited block -
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:33
#, no-wrap
msgid ""
"Uni<Integer> u = uni.onItem()\n"
"    .invoke(i -> System.out.println(\"Received item: \" + i));    \n"
"Multi<Integer> m = multi.onItem()\n"
"    .invoke(i -> System.out.println(\"Received item: \" + i));\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:37
#, fuzzy
msgid "As said above, `invoke` is synchronous.  Mutiny invokes the callback and propagates the event downstream when the callback returns. It blocks the dispatching."
msgstr "Como dito acima, `invoke` é síncrono. Mutiny invoca o retorno de chamada e propaga o evento a jusante quando o retorno de chamada retorna. Bloqueia o envio."

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:39
#, fuzzy
msgid "image:/assets/images/posts/mutiny-invoke-call/invoke.png[]"
msgstr "image:/assets/images/posts/mutiny-invoke-call/invoke.png[alt=invoke]"

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:41
#, fuzzy
msgid "Of course, we highly recommend you not to block."
msgstr "Naturalmente, recomendamos vivamente que não bloqueie."

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:43
#, fuzzy
msgid "The following snippets show how you can log the different types of events."
msgstr "Os seguintes excertos mostram como pode registar os diferentes tipos de eventos."

#. type: delimited block -
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:53
#, no-wrap
msgid ""
"multi\n"
"  .onSubscribe().invoke(() -> System.out.println(\"⬇️ Subscribed\"))\n"
"  .onItem().invoke(i -> System.out.println(\"⬇️ Received item: \" + i))\n"
"  .onFailure().invoke(f -> System.out.println(\"⬇️ Failed with \" + f))\n"
"  .onCompletion().invoke(() -> System.out.println(\"⬇️ Completed\"))\n"
"  .onCancellation().invoke(() -> System.out.println(\"⬆️ Cancelled\"))\n"
"  .onRequest().invoke(l -> System.out.println(\"⬆️ Requested: \" + l))\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:56
#, fuzzy
msgid "The arrows from the previous code snippet indicate if the event comes from the upstream (source) or downstream (consumer)."
msgstr "As setas do trecho de código anterior indicam se o evento vem de montante (fonte) ou de jusante (consumidor)."

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:59
#, fuzzy
msgid "The `invoke` method does not change the event, except in one case.  If the `invoke` callback throws an exception, the downstream does not get the actual event but get a failure event instead."
msgstr "O método `invoke` não altera o evento, exceto num caso. Se a chamada de retorno `invoke` lançar uma exceção, o downstream não recebe o evento real, mas recebe um evento de falha."

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:61
#, fuzzy
msgid "When observing the failure event, if the callback throws an exception, Mutiny propagates a `CompositeException` aggregating the original failure and the callback failure."
msgstr "Ao observar o evento de falha, se o retorno de chamada lançar uma exceção, o Mutiny propaga um `CompositeException` agregando a falha original e a falha do retorno de chamada."

#. type: Title ==
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:62
#, fuzzy, no-wrap
msgid "The call method"
msgstr "O método de chamada"

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:65
#, fuzzy
msgid "Unlike `invoke`, `call` is asynchronous, and the callback returns a `Uni<?>` object."
msgstr "Ao contrário de `invoke`, `call` é assíncrono e a chamada de retorno devolve um objeto `Uni&amp;lt;?&amp;gt;`."

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:67
#, fuzzy
msgid "`call` is often used when you need to implement asynchronous side-effects, such as closing resources."
msgstr "`call` é frequentemente utilizado quando é necessário implementar efeitos secundários assíncronos, como o encerramento de recursos."

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:69
#, fuzzy
msgid "image:/assets/images/posts/mutiny-invoke-call/call.png[]"
msgstr "image:/assets/images/posts/mutiny-invoke-call/call.png[alt=call]"

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:71
#, fuzzy
msgid "Mutiny does not dispatch the original event downstream until the Uni returned by the callback emits an item:"
msgstr "O Mutiny não despacha o evento original até que o Uni retornado pelo callback emita um item:"

#. type: delimited block -
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:80
#, no-wrap
msgid ""
"multi\n"
"    .onItem().call(i -> \n"
"        Uni.createFrom().nullItem()\n"
"            .onItem().delayIt().by(Duration.ofSeconds(1))\n"
"    )\n"
"----                \n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:83
#, no-wrap
msgid ""
"As shown in the previous snippet, you can use this approach to delay items. \n"
"But the primary use case is about completing asynchronous actions:\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:85
#, no-wrap
msgid "[source, java]\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:88
#, fuzzy, no-wrap
msgid ""
"multi\n"
"    .onCompletion().call(() -> resource.close())\n"
msgstr "multi .onCompletion().call) → resource.close("

#. type: delimited block -
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:93
#, no-wrap
msgid ""
"Under the hood, Mutiny gets the `Uni` (by invoking the callback) and subscribes to it. \n"
"It observes the item or failure event from that `Uni`. \n"
"It discards the item value as only the emission matters in this case.\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:95
#, no-wrap
msgid "If the callback throws an exception or the produced `Uni` produces a failure, Mutiny propagates that failure (or a `CompositeException`) downstream, replacing the original event. \n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:96
#, fuzzy, no-wrap
msgid "Summary"
msgstr "Resumo"

#. type: delimited block -
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:99
msgid "The `invoke` and `call` methods are handy when you need to observe a stream without changing the transiting events."
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:102
msgid "Use `invoke` for implementing synchronous side-effects or logging events.  The asynchronous nature of `call` makes it perfect for implementing asynchronous side-effects, such as closing resources, flushing data, delay items, and so on."
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:104
msgid "The following table highlights the key differences:"
msgstr ""

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:107
#, fuzzy, no-wrap
msgid "Method"
msgstr "Método"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:107
#, fuzzy, no-wrap
msgid "`invoke`"
msgstr "`invoke`"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:109
#, fuzzy, no-wrap
msgid "`call`"
msgstr "`call`"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:109
#, fuzzy, no-wrap
msgid "Nature"
msgstr "Natureza"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:109
#, fuzzy, no-wrap
msgid "synchronous"
msgstr "síncrono"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:111
#, fuzzy, no-wrap
msgid "asynchronous"
msgstr "assíncrono"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:111
#, fuzzy, no-wrap
msgid "Return type"
msgstr "Tipo de retorno"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:111
#, fuzzy, no-wrap
msgid "`void`"
msgstr "`void`"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:113
#, fuzzy, no-wrap
msgid "`Uni<?>`"
msgstr "`Uni&amp;lt;?&amp;gt;`"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:113
#, fuzzy, no-wrap
msgid "Main Use cases"
msgstr "Principais casos de utilização"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:113
#, fuzzy, no-wrap
msgid "logging"
msgstr "registo"

#. type: Table
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:115
#, fuzzy, no-wrap
msgid "closing resources, flushing data"
msgstr "encerramento de recursos, descarga de dados"

#. type: Plain text
#: upstream/_posts/2020-11-10-mutiny-invoke-and-call.adoc:117
#, fuzzy
msgid "These methods are available for every kind of event in the associated group."
msgstr "Estes métodos estão disponíveis para todos os tipos de eventos do grupo associado."
