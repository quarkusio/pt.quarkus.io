# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:1
#, no-wrap
msgid "iocanel"
msgstr ""

#. type: YAML Front Matter: date
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:1
#, no-wrap
msgid "2023-06-23"
msgstr ""

#. type: YAML Front Matter: layout
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:1
#, no-wrap
msgid "post"
msgstr ""

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:1
#, no-wrap
msgid "New Quarkus CLI features in 3.0 that will simplify your workflow and make your life easier"
msgstr ""

#. type: YAML Front Matter: tags
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:1
#, no-wrap
msgid "feature"
msgstr ""

#. type: YAML Front Matter: title
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:1
#, no-wrap
msgid "Dev productivity - Quarkus CLI"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:12
msgid "People hardly realize that the Quarkus CLI was available from the first public release of Quarkus back in 2019.  It originally only allowed project creation and extension manipulation. The following command shows the list of supported commands:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:17
#, no-wrap
msgid ""
"quarkus --help\n"
"Usage: quarkus <command> [<args>]\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:19
#, no-wrap
msgid "These are the common quarkus commands used in various situations\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:22
#, no-wrap
msgid ""
"Options:\n"
"  -h, --help\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:27
#, no-wrap
msgid ""
"quarkus commands:\n"
"    list-extensions  List extensions for a project\n"
"    add-extension  Adds extensions to a project\n"
"    create-project  Creates a base Quarkus maven project\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:32
msgid "Today, in version `3.1.2.Final` it includes almost 30 commands spread across 6 main categories. 3 of those categories were part of the 3.0 roadmap and will be the focus of this post. In particular, this post is about building container images, deploying and extending the Quarkus CLI."
msgstr ""

#. type: Title ====
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:34
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:65
#, no-wrap
msgid "Building container images using the Quarkus CLI"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:37
msgid "Providing a simple way for creating container images with Quarkus is not something new. Since, its early days Quarkus provided extensions that took care of building container images with technologies like:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:39
msgid "https://quarkus.io/guides/container-image#docker[docker]"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:40
msgid "https://quarkus.io/guides/container-image#openshift[openshift]"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:41
msgid "https://quarkus.io/guides/container-image#jib[jib]"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:42
msgid "https://quarkus.io/guides/container-image#buildpacks[buildpacks]"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:44
msgid "Using these extensions required their addition to the project, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:48
#, no-wrap
msgid "quarkus ext add quarkus-container-image-docker\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:51
msgid "Also, it required additional configuration options, in order to trigger the container image build:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:55
#, no-wrap
msgid "./mvnw package -Dquarkus.container-image.build=true\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:59
msgid "While this is something that works well, users still needed to know about these extensions and the special configuration options needed to enable them.  In other words, users needed to have a link to https://quarkus.io/guides/container-image[Quarkus container image documentation] handy in order to check the available and their usage options."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:63
msgid "Moreover, users needed to modify the project configuration each time they needed to switch between extensions.  This is trivial, but something that should be optional as the actual application does not depend on how the container images are built.  Also, it can potentially increase the noise in the version control log."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:68
msgid "Quarkus 3.0 introduces an alternative way of building container images using the Quarkus CLI. In the recent version of the CLI new sub commands are available for building and pushing container images.  These are listed in the output of `quarkus --help`."
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:79
#, no-wrap
msgid ""
"quarkus --help | grep image\n"
" image                   Build or push project container image.\n"
"   build                 Build a container image.\n"
"     docker              Build a container image using Docker.\n"
"     buildpack           Build a container image using Buildpack.\n"
"     jib                 Build a container image using Jib.\n"
"     openshift           Build a container image using Openshift.\n"
"   push                  Push a container image.\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:82
msgid "For example in order to perform a docker build:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:86
#, no-wrap
msgid "quarkus image build docker\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:90
msgid "Note, that the command does not require users to edit their build files (e.g. pom.xml or build.gradle) in any way and can be run in any project without requiring any particular extension.  It can be even run on blank quarkus project:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:96
#, no-wrap
msgid ""
"quarkus create app hello\n"
"cd hello\n"
"quarkus image build docker\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:99
msgid "No additional configuration needed, even when users decide to switch to a different container image technology like jib:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:103
#, no-wrap
msgid "quarkus image build jib\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:106
msgid "Last but not least, the CLI does provide additional help like code completion and help messages:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:110
#, no-wrap
msgid "quarkus image build jib --help\n"
msgstr ""

#. type: Title ====
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:113
#, no-wrap
msgid "Deploying applications"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:117
msgid "In a way similar to building container images Quarkus allowed the application deployment to platforms like https://kubernetes.io[Kubernetes] and https://openshift.com[OpenShift].  Again, this is something the required the use of extensions and additional build options to enable deployment.  For example to deploy an application on https://kubernetes.io[Kubernetes] one needed to explicitly add the extension to the project and enable deployment using the `quakrus.kubernetes.deploy` property."
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:122
#, no-wrap
msgid ""
"quarkus ext add quarkus-kubernetes\n"
"./mvnw package -Dquarkus.kubernetes.deploy=true\n"
msgstr ""

#. type: Title ====
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:125
#, no-wrap
msgid "Deploying using the Quarkus CLI"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:128
msgid "In Quarkus 3.0 the CLI includes the `deploy` sub command that is the entry point to commands related to deployment.  Using `quarkus --help` one can list all the related commands:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:138
#, no-wrap
msgid ""
"quarkus --help | grep deploy\n"
"deploy                  Deploy application.\n"
"  kubernetes            Perform the deploy action on kubernetes.\n"
"  openshift             Perform the deploy action on openshift.\n"
"  knative               Perform the deploy action on knative.\n"
"  kind                  Perform the deploy action on kind.\n"
"  minikube              Perform the deploy action on minikube.\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:141
msgid "These commands allow developers to easily deploy their Quarkus application from one platform to the other without messing with their project files."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:146
msgid "Imagine a team with some developers using https://kind.sigs.k8s.io/[kind] and some others https://minikube.sigs.k8s.io/docs/start/[minikube]. Prior to 3.0 they would have to stash and apply the extension of their choice each time they needed to pull changes from version control. Alternatively, they could configure build profiles. Using the CLI users are able to deploy to the platform of their choice even in cases where it's not aligned with what is present in the project configuration. For example if the project includes the https://quarkus.io/guides/deploying-to-kubernetes[Quarkus Kubernetes exntension] but user prefers to use https://kind.sigs.k8s.io/[kind] extension and make use of optimized manifests for https://kind.sigs.k8s.io/[kind]:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:150
#, no-wrap
msgid "quarkus deploy kind\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:153
msgid "It's important to note, that by having a command per platform, users can easily set platform specific configuration when executing these commands (see the `--help` output)."
msgstr ""

#. type: Title ====
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:155
#, no-wrap
msgid "Summarizing image building and deployment commands"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:158
msgid "Quarkus 3.0 introduces new CLI commands for building container images and deploying. The commands improve the developer experience as they eliminate steps related to project setup and configuration. They allow developers to easily experiment with different technologies and guide them by providing help messages, hints and completion."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:160
msgid "Future releases of Quarkus will expand this concept to cover areas like https://quarkus.io/guides/azure-functions[Quarkus Azure Functions] and https://quarkus.io/guides/amazon-lambda[Quarkus Amazon Lambda]."
msgstr ""

#. type: Title ====
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:162
#, no-wrap
msgid "CLI Plugins"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:165
msgid "The CLI brings some really interesting features for Developers, but unfortunately it can't grow indefinitely as it needs to be reasonably sized.  This need lead to the implementation of a plugin system for the CLI, that allows the dynamic addition of commands in the form of plugins."
msgstr ""

#. type: Title =====
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:167
#, no-wrap
msgid "What is a Plugin ?"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:169
msgid "A plugin implements a command in one of the following ways:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:171
msgid "As an arbitrary executable"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:172
msgid "As a java source file"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:173
msgid "As a jar (with main)"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:174
msgid "As a maven artifact"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:175
msgid "As a https://www.jbang.dev/[JBang] alias"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:177
msgid "Plugins are added to the CLI either explicitly using the Quarkus CLI, or implicitly by adding extensions to the project."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:179
msgid "Let's see what the CLI commands related to plugins are available:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:187
#, no-wrap
msgid ""
"quarkus --help | grep plug\n"
"plugin, plug            Configure plugins of the Quarkus CLI.\n"
"  list, ls              List CLI plugins.\n"
"  add                   Add plugin(s) to the Quarkus CLI.\n"
"  remove                Remove plugin(s) to the Quarkus CLI.\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:190
msgid "Initially, there are no plugins installed so, `quarkus plug list` returns an empty list:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:196
#, no-wrap
msgid ""
"quarkus plug list\n"
"No plugins installed!\n"
"To include the installable plugins in the list, append --installable to the command.\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:199
msgid "It also returns a hint suggesting the use of the `--installable`, but what are `installable` plugins ?"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:202
msgid "Installable refers to executables found in PATH, or https://www.jbang.dev/[JBang] aliases prefixed with the `quarkus` prefix.  **Note**: The command does require https://www.jbang.dev/[JBang] (and prompts users for installation if not already installed)."
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:210
#, no-wrap
msgid ""
"quarkus plug list --installable\n"
"  Name    \t Type  \t Scope \t Location               \t Description\n"
"  fmt     \t jbang \t user  \t quarkus-fmt@quarkusio\n"
"  kill    \t jbang \t user  \t quarkus-kill@quarkusio\n"
"  quarkus \t jbang \t user  \t quarkus@quarkusio\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:214
msgid "The plugins listed are https://www.jbang.dev/[JBang] aliases that are available in the https://github.com/quarkusio/jbang-catalog/blob/HEAD/jbang-catalog.json[quarkus.io JBang catalog] (enabled by default).  More catalogs can be added using the https://www.jbang.dev/[JBang] binary."
msgstr ""

#. type: Title =====
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:216
#, no-wrap
msgid "Writing plugins"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:218
msgid "Let's see how to create a plugin for the Quarkus CLI. Out of the box the Quarkus CLI provides 3 ways of creating projects:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:220
msgid "A webapp"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:221
msgid "A command line application"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:222
msgid "A Quarkus extension"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:230
#, no-wrap
msgid ""
"quarkus --help | grep -A3 create\n"
"create                  Create a new project.\n"
"  app                   Create a Quarkus application project.\n"
"  cli                   Create a Quarkus command-line project.\n"
"  extension             Create a Quarkus extension project\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:237
msgid "We are going to create a plugin for `create` that creates new applications using https://github.com/quarkusio/quarkus-quickstarts[Quarkus Quickstarts].  This is as simple as writing a script that clones the repository from Github and copies the quickstart of choice.  To add some extra value on top of it let's use a https://git-scm.com/docs/git-sparse-checkout[Sparse Checkout] and also limit depth to 1.  This minimizes the amount of data transferred and speeds things up.  Moreover, recalling the actual steps needed for a https://git-scm.com/docs/git-sparse-checkout[Sparse Checkout] is not easy, therefore it's something that is really handy to have as a script:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:241
#, no-wrap
msgid "#!/bin/bash\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:244
#, no-wrap
msgid ""
"DIRECTORY=$1\n"
"REPO_URL=\"https://github.com/quarkusio/quarkus-quickstarts.git\"\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:248
#, no-wrap
msgid ""
"# Create a new directory for your Git repo and navigate into it\n"
"mkdir $DIRECTORY\n"
"cd $DIRECTORY\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:251
#, no-wrap
msgid ""
"# Initialize a new Git repository here\n"
"git init\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:256
#, no-wrap
msgid ""
"# Add the repository from GitHub as a place your local Git repo can fetch from\n"
"git remote add origin $REPO_URL\n"
"git config core.sparseCheckout true\n"
"echo \"$DIRECTORY\" >> .git/info/sparse-checkout\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:259
#, no-wrap
msgid ""
"# Fetch just the history of the specific directory\n"
"git fetch --depth 1 origin main:$DIRECTORY\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:265
#, no-wrap
msgid ""
"# Checkout the specific directory\n"
"git checkout $DIRECTORY\n"
"mv $DIRECTORY/* .\n"
"rm -rf $DIRECTORY\n"
"rm -rf .git\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:270
msgid "Let's save the script above in a file named `quarkus-create-from-quickstart` and add it to the PATH.  The `quarkus-` is the required prefix and `create` is the name of the command under which the plugin is going to be installed.  Next time `quarkus plug list --installable` is run it picks up the script:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:279
#, no-wrap
msgid ""
"quarkus plug list --installable\n"
"  Name                   \t Type       \t Scope \t Location                                         \t Description\n"
"  create-from-quickstart \t executable \t user  \t /home/iocanel/bin/quarkus-create-from-quickstart\n"
"  fmt                    \t jbang      \t user  \t quarkus-fmt@quarkusio\n"
"  kill                   \t jbang      \t user  \t quarkus-kill@quarkusio\n"
"  quarkus                \t jbang      \t user  \t quarkus@quarkusio\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:281
#, no-wrap
msgid "Use the 'plugin add' subcommand and pass the location of any plugin listed above, or any remote location in the form of URL / GACTV pointing to a remote plugin.\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:284
msgid "The plugin can be now installed using:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:291
#, no-wrap
msgid ""
"quarkus plug add create-from-quickstart\n"
"Added plugin:\n"
"    Name                   \t Type       \t Scope \t Location                                         \t Description\n"
" *  create-from-quickstart \t executable \t user  \t /home/iocanel/bin/quarkus-create-from-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:294
msgid "The plugin now appears in the `quarkus --help` under the `create` command:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:303
#, no-wrap
msgid ""
"quarkus --help | grep -A4 create\n"
"create                  Create a new project.\n"
"  app                   Create a Quarkus application project.\n"
"  cli                   Create a Quarkus command-line project.\n"
"  extension             Create a Quarkus extension project\n"
"  from-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:306
msgid "And it can be used as regular command. Let's use it to create an application from the https://github.com/quarkusio/quarkus-quickstarts/tree/main/hibernate-orm-panache-quickstart[Hibernate ORM Panache Quickstart]:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:310
#, no-wrap
msgid "quarkus create from-quickstart hibernate-orm-panache-quickstart\n"
msgstr ""

#. type: Title =====
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:313
#, no-wrap
msgid "Using your Java skills to write plugins"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:318
msgid "Using shell scripts or arbitrary binaries (written in any language) is one of writing plugins.  Java developers can alternatively put their java skills to use.  Any source file that contains a main or any jar that defines a main class can be used directly by passing their location (Path or URL).  In case of jars maven coordinates in the form of GACTV (<Group ID>:<Artifact Id>:<Classifier>:<Type>:<Version>) are also supported."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:322
msgid "Let's rewrite the `create-from-github` in Java and see how we can plug a java source file to the Quarkus CLI.  The implementation will use https://www.eclipse.org/jgit/[jgit] and https://commons.apache.org/proper/commons-io/[commons.io]. To simplify dependency management the source file includes https://www.jbang.dev/[JBang] meta comments that define the fore mentioned dependencies:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:329
#, no-wrap
msgid ""
"///usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n"
"//DEPS org.eclipse.jgit:org.eclipse.jgit:6.5.0.202303070854-r\n"
"//DEPS commons-io:commons-io:2.11.0\n"
"//JAVA_OPTIONS -Djava.io.tmpdir=/tmp\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:333
#, no-wrap
msgid ""
"import org.eclipse.jgit.api.*;\n"
"import org.eclipse.jgit.lib.*;\n"
"import org.eclipse.jgit.transport.*;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:342
#, no-wrap
msgid ""
"import java.io.File;\n"
"import java.io.IOException;\n"
"import java.nio.file.Files;\n"
"import java.nio.file.Path;\n"
"import java.nio.file.Paths;\n"
"import java.util.Arrays;\n"
"import java.util.Set;\n"
"import org.apache.commons.io.FileUtils;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:344
#, no-wrap
msgid "public class CreateFromQuickstart {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:347
#, no-wrap
msgid ""
"    private static final String REPO_URL = \"https://github.com/quarkusio/quarkus-quickstarts.git\";\n"
"    private static final String FETCH = \"+refs/heads/*:refs/remotes/origin/*\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:354
#, no-wrap
msgid ""
"    public static void main(String[] args) {\n"
"        String directory = args[0];\n"
"        Set<String> paths = Set.of(directory);\n"
"        try {\n"
"            Path cloneDir = Files.createTempDirectory(\"create-from-quickstart-\");\n"
"            Git git = Git.init().setDirectory(cloneDir.toFile()).call();\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:361
#, no-wrap
msgid ""
"            StoredConfig config = git.getRepository().getConfig();\n"
"            config.setString(\"remote\", \"origin\", \"url\", REPO_URL);\n"
"            config.setString(\"remote\", \"origin\", \"fetch\", FETCH);\n"
"            config.setBoolean(\"core\", null, \"sparseCheckout\", true);\n"
"            config.setBoolean(\"core\", null, \"sparseCheckout\", true);\n"
"            config.save();\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:377
#, no-wrap
msgid ""
"            Path file = cloneDir.resolve(\".git\").resolve(\"info\").resolve(\"sparse-checkout\");\n"
"            file.getParent().toFile().mkdirs();\n"
"            Files.write(file, directory.getBytes());\n"
"            FetchResult result = git.fetch().setRemote(\"origin\").setRefSpecs(new RefSpec(FETCH)).setThin(false).call();\n"
"            git.checkout().setName(\"origin/main\").call();\n"
"            File source = cloneDir.resolve(directory).toFile();\n"
"            File destination = new File(directory);\n"
"            FileUtils.copyDirectory(source, destination);\n"
"            FileUtils.deleteDirectory(cloneDir.toFile());\n"
"        } catch (Exception e) {\n"
"            e.printStackTrace();\n"
"            System.exit(1);\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:380
msgid "To add this source file as a Quarkus CLI plugin:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:387
#, no-wrap
msgid ""
"quarkus plug add /path/to/CreateFromQuickstart.java\n"
"Added plugin:\n"
"    Name                 \t Type \t Scope \t Location                                     \t Description\n"
" *  CreateFromQuickstart \t java \t user  \t /path/to/CreateFromQuickstart.java\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:391
msgid "Note that the name derived from the actual file/class name that is using https://en.wikipedia.org/wiki/Camel_case[Camel Case] and therefore is not matched to the `create` sub command.  Instead, it is added as a sibling to `create`:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:402
#, no-wrap
msgid ""
"quarkus --help\n"
"Commands:\n"
"  create                  Create a new project.\n"
"    app                   Create a Quarkus application project.\n"
"    cli                   Create a Quarkus command-line project.\n"
"    extension             Create a Quarkus extension project\n"
"  # more commands here\n"
"  CreateFromQuickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:406
msgid "As of `3.1.2.Final` there is no direct way to alias a plugin. However, aliases are supported by https://www.jbang.dev/[JBang].  Here's how aliases can be used:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:415
#, no-wrap
msgid ""
"jbang alias add --name quarkus-create-from-quickstart ~/path/to/CreateFromQuickstart.java\n"
"[jbang] Alias 'quarkus-create-from-quickstart' added to '/home/user/.jbang/jbang-catalog.json'\n"
"quarkus plug add create-from-quickstart\n"
"Added plugin:\n"
"    Name                   \t Type  \t Scope \t Location                       \t Description\n"
" *  create-from-quickstart \t jbang \t user  \t quarkus-create-from-quickstart\n"
msgstr ""

#. type: Title =====
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:418
#, no-wrap
msgid "Project specific plugins"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:421
msgid "In all the examples so far the plugins listed as `user scoped`. This means that the plugins are global to the user. It is possible however to also have `project scoped` plugins.  This is important as it allows:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:423
msgid "Having project specific plugins"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:424
msgid "Overriding versions per project"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:425
msgid "Sharing the plugin catalog (via version control)"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:426
msgid "Support extension provided plugins"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:430
msgid "When the `quarkus plug add` command is called from within a project, the plugin is added to the project catalog, unless the `--user` options is used.  The plugin catalog is persisted in `.quarkus` in the root of the project. By adding this folder to version control, the project plugin catalog is shared between users of the project.  In this case, its a good idea to also include the actual plugin source files in version control, or use a shared https://www.jbang.dev/[JBang] catalog."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:434
msgid "Let's create script that allows users to setup their project in an https://argoproj.github.io/cd/[ArgoCD] developer instance.  https://argoproj.github.io/cd/[ArgoCD] is a GitOps continous delivery tool for https://kubernetes.io[Kubernetes].  The following example demonstrates its setup process can be automated as a Quarkus CLI plugin:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:436
msgid "More specifically the plugin performs the following:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:438
msgid "Installs the https://argoproj.github.io/cd/[ArgoCD] binary"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:439
msgid "Installs the https://argoproj.github.io/cd/[ArgoCD] resources to the target cluster"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:440
msgid "It generated https://kubernetes.io[Kubernetes] manifests for the project"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:441
msgid "It adds the generated resources to version control"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:442
msgid "It setups the project to https://argoproj.github.io/cd/[ArgoCD]"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:446
msgid "Even though some of the steps above need only need to be performed once (e.g. adding manifests to version control) the remaining steps have to be performed for each developer environment.  So, instead of adding the script to some shared folder or repository forever to be forgotten, it makes sense to have it inside the project as a CLI plugin.  The source of the script could be something like:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:452
#, no-wrap
msgid ""
"#!/bin/bash\n"
"set -e\n"
"ARGOCD_VERSION=\"v2.7.4\"\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:458
#, no-wrap
msgid ""
"check_requirements() {\n"
"    if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then\n"
"        echo \"Error: The current folder is not under version control.\"\n"
"        exit 1\n"
"    fi\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:467
#, no-wrap
msgid ""
"    if [ ! -f \"target/kubernetes/kubernetes.yml\" ]; then\n"
"        mvn quarkus:deploy -Dquarkus.kubernetes.deploy=false\n"
"        if [ ! -f \"target/kubernetes/kubernetes.yml\" ]; then\n"
"         echo \"Error: The target/kubernetes/kubernetes.yml file does not exist.\"\n"
"         exit 1\n"
"        fi\n"
"    fi\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:479
#, no-wrap
msgid ""
"install_argocd_binary() {\n"
"    OS=\"`uname`\"\n"
"    case $OS in\n"
"        'Linux')\n"
"        OS='linux'\n"
"        ;;\n"
"        'Darwin')\n"
"        OS='darwin'\n"
"        ;;\n"
"        *) ;;\n"
"    esac\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:486
#, no-wrap
msgid ""
"    if ! command -v argocd &> /dev/null\n"
"    then\n"
"        curl -sSL -o $HOME/bin/argocd https://github.com/argoproj/argo-cd/releases/download/${ARGOCD_VERSION}/argocd-${OS}-amd64\n"
"        chmod +x $HOME/bin/argocd\n"
"    fi\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:493
#, no-wrap
msgid ""
"install_argocd_resources() {\n"
"    if ! kubectl get namespace | grep -q 'argocd'; then\n"
"        kubectl create namespace argocd\n"
"    fi\n"
"    if ! kubectl get pods -n argocd | grep -q 'argocd-server'; then\n"
"        kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/${ARGOCD_VERSION}/manifests/install.yaml\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:497
#, no-wrap
msgid ""
"        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=argocd-server -n argocd --timeout=120s\n"
"    fi\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:513
#, no-wrap
msgid ""
"wait_for_port() {\n"
"    local PORT=$1\n"
"    local TIMEOUT=5\n"
"    local START_TIME=$SECONDS\n"
"    while :\n"
"    do\n"
"        if nc -v $1 &> /dev/null; then\n"
"            nc -z localhost $PORT  && return\n"
"        fi\n"
"        if (( SECONDS - START_TIME >= TIMEOUT )); then\n"
"            return\n"
"        fi\n"
"        sleep 1\n"
"    done\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:517
#, no-wrap
msgid ""
"cleanup() {\n"
"    kill $PORT_FORWARD_PID\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:525
#, no-wrap
msgid ""
"create_app() {\n"
"    NAMESPACE=`kubectl config view --minify --output 'jsonpath={..namespace}'`\n"
"    GIT_URL=`git remote get-url origin | sed -s \"s/git@github.com:/https:\\/\\/github.com\\//\"`\n"
"    GIT_BRANCH=`git branch -l | grep \"*\" | awk '{print $2}'`\n"
"    APP_DIR=`git rev-parse --show-toplevel`\n"
"    APP_NAME=`git rev-parse --show-toplevel | xargs basename`\n"
"    ARGOCD_PASSWORD=`argocd admin initial-password argo -n argocd | head -n1`\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:540
#, no-wrap
msgid ""
"    if [ -f \"$APP_DIR/.argocd\" ]; then\n"
"        mkdir $APP_DIR/.argocd\n"
"    fi\n"
"    cp target/kubernetes/kubernetes.yml $APP_DIR/.argocd/\n"
"    if [ -n \"$(git status --porcelain | grep -v '?')\" ]; then\n"
"        git add $APP_DIR/.argocd\n"
"        git commit -m \"Add generated manifests to argocd\" && git push origin $BRANCH\n"
"    fi\n"
"    kubectl port-forward svc/argocd-server -n argocd 9443:443 > /dev/null 2>&1 &\n"
"    PORT_FORWARD_PID=$!\n"
"    trap  \"cleanup\" EXIT SIGINT SIGTERM\n"
"    wait_for_port 9443\n"
"    argocd login localhost:9443 --username admin --password $ARGOCD_PASSWORD --insecure\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:544
#, no-wrap
msgid ""
"    argocd app create $APP_NAME --repo $GIT_URL --path .argocd --dest-server https://kubernetes.default.svc --dest-namespace default\n"
"    argocd app sync $APP_NAME\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:549
#, no-wrap
msgid ""
"check_requirements\n"
"install_argocd_binary\n"
"install_argocd_resources\n"
"create_app\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:552
msgid "Let's save the file under `bin/quarkus-argocd-setup` and add it as a plugin:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:556
#, no-wrap
msgid "quarkus plug add bin/quarkus-argocds-setup\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:559
msgid "Now by calling `quarkus argocd-setup` the application is setup for use with https://argoproj.github.io/cd/[ArgoCD]."
msgstr ""

#. type: Title =====
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:561
#, no-wrap
msgid "Extension provided plugins"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:564
msgid "A Quarkus extension may contribute to the CLI plugins that are available to a project.  At the moment the following Quarkiverse extensions provide plugins:"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:566
msgid "https://github.com/quarkiverse/quarkus-authzed-client[Quarkus Authzed Client]"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:567
msgid "https://github.com/quarkiverse/quarkus-helm[Quarkus Helm]"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:570
msgid "Let's see how things work when such an extension is added to a project.  The following command adds the https://github.com/quarkiverse/quarkus-helm[Quarkus Helm] extension, along with the https://kubernetes.io[Kubernetes] and docker extensions that often are used together."
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:577
#, no-wrap
msgid ""
"quarkus ext add quarkus-helm quarkus-kubernetes quarkus-container-image-docker\n"
"[SUCCESS] ✅  Extension io.quarkiverse.helm:quarkus-helm:1.0.7 has been installed\n"
"[SUCCESS] ✅  Extension io.quarkus:quarkus-kubernetes has been installed\n"
"[SUCCESS] ✅  Extension io.quarkus:quarkus-container-image-docker has been installed\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:580
msgid "Now the ``helm` plugin should be automatically added next time the CLI used:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:591
#, no-wrap
msgid ""
"quarkus --help\n"
"Plugin catalog last updated on: 07/06/2023 10:29:05. Syncing!\n"
"Looking for the newly published extensions in registry.quarkus.io\n"
"Options:\n"
"# option details\n"
"Commads:\n"
"# commands\n"
"helm\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:595
msgid "The plugin can now be used to install the application using https://helm.sh/[Helm] charts. The plugin itself is a simple wrapper around the official https://helm.sh/[Helm] binary that simplifies its use. For example the app can be easily installed using:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:599
#, no-wrap
msgid "quarkus helm install\n"
msgstr ""

#. type: Title =====
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:602
#, no-wrap
msgid "Summarizing plugins"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:605
msgid "The Quarkus CLI plugin system is not just a way for the Quarkus team to rightsize and modularize the Quarkus CLI, it also offers teams a way of creating scripts and recipes specific to their project and distribute them along with the code."
msgstr ""

#. type: Title ===
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:607
#, no-wrap
msgid "See also"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:610
msgid "If you want to see more about the new Quarkus CLI features make sure to check the following https://quarkus.io/insights/[Quarkus Insights] episodes.  They demonstrate the new features in action and will hopefully inspire you with ideas for your own plugins."
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:612
msgid "https://www.youtube.com/watch?v=82NjJ7gDzv0[Quarkus Insigts #124: 1000 ways to deploy Quarkus]"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-06-23-quarkus-cli.adoc:612
msgid "https://www.youtube.com/watch?v=iskDa-i82RU[Quarkus Insights #129: Quarkus CLI plugins: JBang]"
msgstr ""
