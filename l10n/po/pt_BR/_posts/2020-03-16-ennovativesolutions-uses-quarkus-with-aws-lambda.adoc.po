# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:1
#, fuzzy, no-wrap
msgid "cesarsaavedra"
msgstr "cesarsaavedra"

#. type: YAML Front Matter: date
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:1
#, fuzzy, no-wrap
msgid "2020-03-14"
msgstr "2020-03-14"

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "posto"

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:1
#, fuzzy, no-wrap
msgid "user-story"
msgstr "história do utilizador"

#. type: Title =
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:1
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:10
#, fuzzy, no-wrap
msgid "Ennovative Solutions uses Quarkus with AWS Lambda to deliver a better customer experience with their new product PURQR"
msgstr "A Ennovative Solutions utiliza o Quarkus com o AWS Lambda para proporcionar uma melhor experiência ao cliente com o seu novo produto PURQR"

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:13
#, fuzzy, no-wrap
msgid "EnnovativeSolutions logo"
msgstr "Logótipo da EnnovativeSolutions"

#. type: Target for macro image
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:13
#, no-wrap
msgid "ennovativesolutions-purqr.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:16
#, fuzzy
msgid "https://www.ennovative-solutions.be/[Ennovative Solutions] is an IT Consulting and Services company out of Diepenbeek, Belgium. By working with many customers, including ones in retail, they identified that many of them were suffering low sales due to poor customer experience. As a result, in 2019, they created a new application called https://www.purqr.com/?fbclid=IwAR2nSQcVWEOEIiL0XLva4IAkjJWmehU8FdS2YtMAwpC1jFdflGbvmmmOwT8[PURQR] (Purchasing via QR codes), which is a new cloud platform that comes with both a backend application and a mobile application to manage retailers’ physical store showrooms. By using the mobile app, one can perform in store analytics, e.g. popular products & categories, best performing salespersons, etc., and deliver a more personalized experience to end customers. The platform also manages appointments and customer data so when they leave the showroom they can receive an overview of what they liked via mail. In addition, PURQR integrates to customers’ quoting systems. For example, one of its goals is to provide customers with a more personalized follow-up quote to turn it into a sale. The solution also keeps customer information for further communication and possible co-sale and up-sale opportunities. Because one scans the products as part of its processes, one can get insights into popular products that the company can then stock up on.  Their cloud platform can improve customer experience and also increase sales."
msgstr "link:https://www.ennovative-solutions.be/[A Ennovative Solutions] é uma empresa de consultoria e serviços de TI sediada em Diepenbeek, na Bélgica. Ao trabalhar com muitos clientes, incluindo os do sector retalhista, identificaram que muitos deles estavam a sofrer baixas vendas devido a uma má experiência do cliente. Como resultado, em 2019, criaram uma nova aplicação chamada  link:https://www.purqr.com/?fbclid=IwAR2nSQcVWEOEIiL0XLva4IAkjJWmehU8FdS2YtMAwpC1jFdflGbvmmmOwT8[PURQR] (Purchasing via QR codes), que é uma nova plataforma em nuvem que vem com uma aplicação de backend e uma aplicação móvel para gerir os showrooms das lojas físicas dos retalhistas. Ao utilizar a aplicação móvel, é possível efetuar análises na loja, por exemplo, produtos e categorias populares, vendedores com melhor desempenho, etc., e proporcionar uma experiência mais personalizada aos clientes finais. A plataforma também gere as marcações e os dados dos clientes para que, quando saírem da loja, possam receber uma visão geral do que gostaram por correio eletrónico. Além disso, a PURQR integra-se nos sistemas de cotação dos clientes. Por exemplo, um dos seus objectivos é fornecer aos clientes um orçamento de acompanhamento mais personalizado para o transformar numa venda. A solução também mantém as informações do cliente para comunicação posterior e possíveis oportunidades de co-venda e de venda adicional. Uma vez que a solução analisa os produtos como parte dos seus processos, é possível obter informações sobre produtos populares que a empresa pode então armazenar. A sua plataforma na nuvem pode melhorar a experiência do cliente e também aumentar as vendas."

#. type: Title ==
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:17
#, fuzzy, no-wrap
msgid "Their journey into Quarkus"
msgstr "A sua viagem até Quarkus"

#. type: Plain text
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:20
#, fuzzy
msgid "For the development of PURQR, Ennovative Solutions decided to follow a Function-as-a-Service approach by using AWS Lambda as the serverless computing platform. When Dennis Baerten, Software Engineer with Ennovative Solutions, started his journey using AWS Lambda, he described it as _“I ran into the long startup times using regular Java in AWS Lambda”._ They soon realized that using plain Java on this serverless computing platform was not going to deliver the performance and experience that they were after. This is when they started to look at other options."
msgstr "Para o desenvolvimento do PURQR, a Ennovative Solutions decidiu seguir uma abordagem de função como serviço, utilizando o AWS Lambda como plataforma de computação sem servidor. Quando Dennis Baerten, engenheiro de software da Ennovative Solutions, iniciou a sua viagem utilizando o AWS Lambda, descreveu-a como _\"deparei-me com os longos tempos de arranque utilizando Java normal no AWS Lambda\"._ Eles logo perceberam que usar Java simples nesta plataforma de computação sem servidor não iria fornecer o desempenho e a experiência que eles estavam procurando. Foi quando eles começaram a procurar outras opções."

#. type: Title ==
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:21
#, fuzzy, no-wrap
msgid "From Micronaut to Quarkus"
msgstr "De Micronauta a Quarkus"

#. type: Plain text
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:24
#, fuzzy
msgid "A colleague of Dennis’ told him to look at Micronaut, which is another framework that supports GraalVM. He tried out Micronaut but encountered difficulties getting it to work with the type of application he was building. Furthermore, there was no Micronaut plugin to build his native image in AWS. _“Quarkus had more features and extensions than Micronaut that could be compiled to native (compatible with GraalVM)”,_ Dennis asserted. When he got started with Quarkus, one of the first things Dennis did was to enroll himself to the Quarkus Zulip channel. Dennis engaged and connected with the Quarkus community and obtained quick replies to his questions and even found some bugs in Quarkus. He was even able to apply the fixes himself via GitHub Pull Requests, which were eventually merged into the Quarkus project. Dennis expressed _“I valued and was very pleased with the support from the Quarkus community, which is very active”._ In addition, the fact that Red Hat was behind Quarkus was also important to Dennis. He was familiar with Hibernate and other open source technologies that are sponsored by Red Hat. He knew Red Hat was a big player in the IT world so knowing this gave Dennis the confidence in the technology. Knowing that Red Hat was a sponsor of Quarkus, reassured him about his decision to use it to implement his application."
msgstr "Um colega do Dennis disse-lhe para olhar para o Micronaut, que é outra estrutura que suporta o GraalVM. Ele experimentou o Micronaut mas encontrou dificuldades em fazê-lo funcionar com o tipo de aplicação que estava a construir. Além disso, não havia nenhum plugin Micronaut para construir a sua imagem nativa no AWS. \" _O Quarkus tinha mais recursos e extensões do que o Micronaut que poderiam ser compilados para nativo (compatível com o GraalVM)\",_ afirmou Dennis. Quando começou a usar o Quarkus, uma das primeiras coisas que Dennis fez foi inscrever-se no canal Quarkus Zulip. Dennis se envolveu e se conectou com a comunidade Quarkus e obteve respostas rápidas às suas perguntas e até encontrou alguns bugs no Quarkus. Conseguiu mesmo aplicar ele próprio as correcções através dos pedidos de alteração do GitHub, que acabaram por ser integrados no projeto Quarkus. Dennis afirmou: _\"Valorizei e fiquei muito satisfeito com o apoio da comunidade Quarkus, que é muito ativa\"._ Além disso, o facto de a Red Hat estar por trás do Quarkus também foi importante para Dennis. Ele estava familiarizado com o Hibernate e outras tecnologias de código aberto patrocinadas pela Red Hat. Ele sabia que a Red Hat era um grande ator no mundo das TI, pelo que este facto deu a Dennis confiança na tecnologia. O facto de saber que a Red Hat era patrocinadora da Quarkus tranquilizou-o quanto à sua decisão de a utilizar para implementar a sua aplicação."

#. type: Plain text
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:26
#, fuzzy
msgid "Ennovative Solutions had tried Micronaut during the proof of concept phase. However, after learning about Quarkus and its benefits over Micronaut, they migrated everything to Quarkus. In their opinion, some of these benefits included:"
msgstr "A Ennovative Solutions tinha experimentado o Micronaut durante a fase de prova de conceito. No entanto, depois de conhecerem o Quarkus e as suas vantagens em relação ao Micronaut, migraram tudo para o Quarkus. Na opinião deles, alguns desses benefícios incluem:"

#. type: Plain text
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:28
#, fuzzy
msgid "Great support via Zulip"
msgstr "Grande apoio através da Zulip"

#. type: Plain text
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:29
#, fuzzy
msgid "Ability to directly contribute to the project"
msgstr "Capacidade de contribuir diretamente para o projeto"

#. type: Plain text
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:30
#, fuzzy
msgid "Fast innovation"
msgstr "Inovação rápida"

#. type: Plain text
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:31
#, fuzzy
msgid "Fast project release cadence that provides quick bug fixes and new features"
msgstr "Cadência rápida de lançamento de projectos que permite correcções rápidas de erros e novas funcionalidades"

#. type: Plain text
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:32
#, fuzzy
msgid "Quarkus is following closely what happens with GraalVM"
msgstr "Quarkus está a acompanhar de perto o que acontece com o GraalVM"

#. type: Plain text
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:33
#, fuzzy
msgid "Quarkus is a hot topic and innovative technology that is talked about a lot at Java conferences"
msgstr "O Quarkus é um tema quente e uma tecnologia inovadora de que se fala muito nas conferências sobre Java"

#. type: Title ==
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:34
#, fuzzy, no-wrap
msgid "PURQR high-level architecture"
msgstr "Arquitetura de alto nível do PURQR"

#. type: Plain text
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:37
#, fuzzy
msgid "PURQR consists of 7 Quarkus microservices that are currently running in production. They have been in production since October 2019."
msgstr "O PURQR é composto por 7 microsserviços Quarkus que estão atualmente a funcionar em produção. Estão em produção desde outubro de 2019."

#. type: Plain text
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:39
#, fuzzy
msgid "Most of the microservices are HTTP-based and sit behind an Amazon API Gateway and at the backend they are all AWS Lambda functions. These microservices are:"
msgstr "A maior parte dos microsserviços são baseados em HTTP e situam-se atrás de um Amazon API Gateway e, no backend, são todos funções AWS Lambda. Estes microsserviços são:"

#. type: Plain text
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:41
#, fuzzy
msgid "External product view - viewing capabilities for products for the end consumer"
msgstr "Visualização externa do produto - capacidades de visualização de produtos para o consumidor final"

#. type: Plain text
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:42
#, fuzzy
msgid "Product repository - this is where information about products reside"
msgstr "Repositório de produtos - é aqui que residem as informações sobre os produtos"

#. type: Plain text
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:43
#, fuzzy
msgid "Company settings - interface to set company wide parameters"
msgstr "Definições da empresa - interface para definir os parâmetros de toda a empresa"

#. type: Plain text
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:44
#, fuzzy
msgid "Appointments - customer appointments functionality"
msgstr "Marcações - funcionalidade de marcações de clientes"

#. type: Plain text
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:45
#, fuzzy
msgid "Label generation - capabilities for generating Dymo labels"
msgstr "Geração de etiquetas - capacidades para gerar etiquetas Dymo"

#. type: Plain text
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:46
#, fuzzy
msgid "Notifications - SQS consumer for asynchronous emails"
msgstr "Notificações - consumidor SQS para mensagens de correio eletrónico assíncronas"

#. type: Plain text
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:47
#, fuzzy
msgid "Summary - aggregates all the data to display on the dashboard for the business owner"
msgstr "Resumo - agrega todos os dados a apresentar no painel de controlo para o proprietário da empresa"

#. type: Plain text
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:49
#, fuzzy
msgid "Here’s a high-level pictorial of the PURQR system that uses Quarkus with AWS Lamdba:"
msgstr "Aqui está uma imagem de alto nível do sistema PURQR que utiliza o Quarkus com o AWS Lamdba:"

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:51
#, fuzzy, no-wrap
msgid "PURQR high-levelArch"
msgstr "PURQR high-levelArch"

#. type: Target for macro image
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:51
#, no-wrap
msgid "purqr-architecture.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:54
#, fuzzy
msgid "As depicted in the logical architecture diagram above, the Quarkus-based microservices all run as AWS Lambda functions. It is worth mentioning that all these microservices run in test and production in Quarkus native mode, which leverages GraalVM native image. For local development and debugging purposes, they run these microservices in Quarkus JVM mode using https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/what-is-sam.html[AWS Serverless Application Model] (SAM) on their local machines."
msgstr "Conforme ilustrado no diagrama de arquitetura lógica acima, os microsserviços baseados no Quarkus são todos executados como funções AWS Lambda. Vale a pena mencionar que todos esses microsserviços são executados em teste e produção no modo nativo do Quarkus, que aproveita a imagem nativa do GraalVM. Para fins de desenvolvimento local e depuração, eles executam esses microsserviços no modo JVM do Quarkus usando o  link:https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/what-is-sam.html[AWS Serverless Application Model] (SAM) em suas máquinas locais."

#. type: Plain text
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:56
#, fuzzy
msgid "Lastly, _“moving to Quarkus was easy.  Getting everything to work in native mode took a couple of days. And it took about two months to develop the complete application”,_ added Dennis."
msgstr "Por último, _\"a mudança para o Quarkus foi fácil. Pôr tudo a funcionar em modo nativo demorou alguns dias. E foram necessários cerca de dois meses para desenvolver a aplicação completa\",_ acrescentou Dennis."

#. type: Title ==
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:57
#, fuzzy, no-wrap
msgid "Quarkus benefits"
msgstr "Vantagens do Quarkus"

#. type: Plain text
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:60
#, fuzzy
msgid "Ennovative Solutions found Quarkus to be a very valuable and rich Java stack with a wide range of capabilities to implement any type of business application. Among the many benefits that Quarkus provided to them, running Java applications in AWS Lambda functions without the downside of cold starts was one of them. Quarkus fast startup time was key here because they wanted to reduce the cold start timing of AWS Lambda functions to a bare minimum when running in both test and production environments. For example, _“using Spring with AWS Lambda would have been prohibitive because the startup time of Spring in AWS Lambda is too big from my research”,_ Dennis mentioned ( https://keyholesoftware.com/2018/04/26/aws-lambda-with-spring-boot/[1] , https://dzone.com/articles/aws-lambda-with-spring-boot[2] , https://pattern-match.com/blog/2019/07/11/springboot2-and-aws-lambda-quick-fix/[3] ). Also, from past experience, he had seen that _“using plain Java with AWS Lambda, it was taking 6 to 7 seconds for a cold startup whereas with Quarkus it takes about 200 milliseconds”,_ Dennis added. However, in order to be more thorough in his research, he took one of the simplest functions (no dependency injection, logging) he had and ran it in AWS Lambda in plain Java and Quarkus native mode, the latter being a combination of Quarkus + GraalVM native image. The measurements, as reported by the AWS Lambda platform, are as follows:"
msgstr "A Ennovative Solutions considerou o Quarkus uma pilha Java muito valiosa e rica, com uma vasta gama de capacidades para implementar qualquer tipo de aplicação empresarial. Entre os muitos benefícios que o Quarkus lhes proporcionou, a execução de aplicações Java em funções AWS Lambda sem a desvantagem dos arranques a frio foi um deles. O tempo de arranque rápido do Quarkus foi fundamental neste caso, porque queriam reduzir o tempo de arranque a frio das funções AWS Lambda ao mínimo possível quando executadas em ambientes de teste e de produção. Por exemplo, _\"usar o Spring com o AWS Lambda teria sido proibitivo porque o tempo de arranque do Spring no AWS Lambda é demasiado grande, de acordo com a minha investigação\",_ mencionou Dennis (  link:https://keyholesoftware.com/2018/04/26/aws-lambda-with-spring-boot/[1],  link:https://dzone.com/articles/aws-lambda-with-spring-boot[2],  link:https://pattern-match.com/blog/2019/07/11/springboot2-and-aws-lambda-quick-fix/[3] ). Além disso, com base em experiências anteriores, ele tinha visto que _\"usando Java simples com o AWS Lambda, estava a demorar 6 a 7 segundos para um arranque a frio, enquanto que com o Quarkus demora cerca de 200 milissegundos\",_ acrescentou Dennis. No entanto, a fim de ser mais minucioso em sua pesquisa, ele pegou uma das funções mais simples (sem injeção de dependência, logging) que ele tinha e a executou no AWS Lambda em Java simples e no modo nativo Quarkus, sendo este último uma combinação de Quarkus + imagem nativa GraalVM. As medições, conforme relatadas pela plataforma AWS Lambda, são as seguintes:"

#. type: Block title
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:61
#, fuzzy, no-wrap
msgid "Quarkus with AWS Lambda - measurements"
msgstr "Quarkus com AWS Lambda - medições"

#. type: Table
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:65
#, fuzzy, no-wrap
msgid "Metric name"
msgstr "Nome da métrica"

#. type: Table
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:65
#, fuzzy, no-wrap
msgid "Plain Java"
msgstr "Java simples"

#. type: Table
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:67
#, fuzzy, no-wrap
msgid "Quarkus native mode"
msgstr "Modo nativo do Quarkus"

#. type: Table
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:68
#, fuzzy, no-wrap
msgid "Cold start time (ms)"
msgstr "Tempo de arranque a frio (ms)"

#. type: Table
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:69
#, fuzzy, no-wrap
msgid "584.13"
msgstr "584.13"

#. type: Table
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:71
#, fuzzy, no-wrap
msgid "222.07"
msgstr "222.07"

#. type: Table
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:72
#, fuzzy, no-wrap
msgid "Execution time (ms)"
msgstr "Tempo de execução (ms)"

#. type: Table
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:73
#, fuzzy, no-wrap
msgid "76.12"
msgstr "76.12"

#. type: Table
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:75
#, fuzzy, no-wrap
msgid "6.67"
msgstr "6.67"

#. type: Table
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:76
#, fuzzy, no-wrap
msgid "Memory consumed (MB)"
msgstr "Memória consumida (MB)"

#. type: Table
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:77
#, fuzzy, no-wrap
msgid "102"
msgstr "102"

#. type: Table
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:78
#, fuzzy, no-wrap
msgid "72"
msgstr "72"

#. type: Plain text
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:81
#, fuzzy
msgid "In the table above, you can see a 62% reduction in cold start from plain Java to Quarkus native and a 91% reduction in execution time from plain Java to Quarkus native mode! For memory consumption, there was a 29% reduction in going from plain Java to Quarkus native."
msgstr "Na tabela acima, pode ver-se uma redução de 62% no arranque a frio do Java simples para o Quarkus native e uma redução de 91% no tempo de execução do Java simples para o modo nativo do Quarkus! Relativamente ao consumo de memória, houve uma redução de 29% na passagem do Java simples para o Quarkus native."

#. type: Plain text
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:83
#, fuzzy
msgid "By using Quarkus with AWS Lambda, Ennovative Solutions have been able to lower the cloud resource consumption costs, which include the use of AWS Lambda, SQS, DynamoDB, Route53, among others. Presently, PURQR has a handful of customers so their monthly costs are minimal. However, Dennis mentions that as their number of customers grows so will their cloud resource consumption costs.  _“As these costs increase, this is when the benefit of using Quarkus will be experienced due to its more efficient use of cloud resources and fast startup time compared to plain Java and Spring Boot”,_ Dennis stated."
msgstr "Ao utilizar o Quarkus com o AWS Lambda, a Ennovative Solutions conseguiu reduzir os custos de consumo de recursos na nuvem, que incluem a utilização do AWS Lambda, SQS, DynamoDB, Route53, entre outros. Atualmente, a PURQR tem uma mão cheia de clientes, pelo que os seus custos mensais são mínimos. No entanto, Dennis menciona que, à medida que o número de clientes aumenta, também aumentam os custos de consumo de recursos na nuvem. \"À _medida que esses custos aumentam, é quando o benefício de usar Quarkus será experimentado devido ao seu uso mais eficiente dos recursos da nuvem e tempo de inicialização rápido em comparação com Java simples e Spring Boot\",_ afirmou Dennis."

#. type: Plain text
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:85
#, fuzzy
msgid "As a Spring developer, Dennis found Quarkus very easy to learn. He mentioned _“it took me about 3 days to get familiar with the Quarkus stack”._ In fact, he highlighted that the fast learning curve attracted him to Quarkus as well. He was also particularly impressed by the Quarkus documentation, which _\"is very good\",_ he added. Dennis thinks the Quarkus guides are very thorough and provide good detailed information. This is another reason why he selected Quarkus."
msgstr "Como programador Spring, Dennis achou o Quarkus muito fácil de aprender. Ele mencionou que _\"levei cerca de 3 dias para me familiarizar com a pilha da Quarkus\"._ De facto, sublinhou que a curva de aprendizagem rápida também o atraiu para a Quarkus. Ficou também particularmente impressionado com a documentação do Quarkus, que _\"é muito boa\",_ acrescentou. Dennis considera que os guias do Quarkus são muito completos e fornecem boas informações pormenorizadas. Esta é outra razão pela qual escolheu o Quarkus."

#. type: Title ==
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:86
#, fuzzy, no-wrap
msgid "Lessons Learned"
msgstr "Lições aprendidas"

#. type: Plain text
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:89
#, fuzzy
msgid "Quarkus can run in JVM mode and native mode. If you are interested in running your application in Quarkus native mode, Dennis recommends to first check if Quarkus offers extensions for your required functional requirements. For example, if you’d like to access an in-memory-data-grid (IMDG) like Kafka, he suggests you first search the Quarkus extensions to see if there’s any extension related to this need. Quarkus extensions can compile to native so it’s better to check if Quarkus offers your required functionality before you start implementing your application with a library for which Quarkus does not provide an extension. If you don’t find a Quarkus extension for the third-party library you want to use, then Dennis recommends to check the Quarkus project issues to see if there’s already a pending request to “quark” the third-party library. Also, you’d want to check with the third-party library authors/project to see if they already have a Quarkus extension or are working on one.  You don’t want to find out that you can’t compile your application to a native executable after you have spent hours developing it! You want to avoid this if your goal is to compile to native. In short, the lesson learned here is _“check first if there are Quarkus extensions available for what you need”_, Dennis suggests."
msgstr "O Quarkus pode ser executado no modo JVM e no modo nativo. Se estiver interessado em executar a sua aplicação no modo nativo do Quarkus, Dennis recomenda verificar primeiro se o Quarkus oferece extensões para os seus requisitos funcionais necessários. Por exemplo, se quiser aceder a um IMDG (in-memory-data-grid) como o Kafka, sugere que pesquise primeiro as extensões do Quarkus para ver se existe alguma extensão relacionada com esta necessidade. As extensões do Quarkus podem ser compiladas como nativas, portanto, é melhor verificar se o Quarkus oferece a funcionalidade necessária antes de começar a implementar seu aplicativo com uma biblioteca para a qual o Quarkus não fornece uma extensão. Se não encontrar uma extensão Quarkus para a biblioteca de terceiros que pretende utilizar, o Dennis recomenda que verifique os problemas do projeto Quarkus para ver se já existe um pedido pendente para \"quark\" a biblioteca de terceiros. Além disso, deve verificar com os autores/projeto da biblioteca de terceiros para ver se já têm uma extensão Quarkus ou se estão a trabalhar numa. Não vai querer descobrir que não pode compilar a sua aplicação para um executável nativo depois de ter passado horas a desenvolvê-la! É melhor evitar esta situação se o seu objetivo for compilar para a versão nativa. Em suma, a lição aprendida aqui é _\"verifique primeiro se há extensões Quarkus disponíveis para o que você precisa\",_ sugere Dennis."

#. type: Plain text
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:91
#, fuzzy
msgid "They were not able to use live coding with Quarkus because this capability does not currently support AWS Serverless Application Model (SAM) for the AWS Lambda functions running on their local machines."
msgstr "Não puderam utilizar a codificação em tempo real com o Quarkus porque esta capacidade não suporta atualmente o AWS Serverless Application Model (SAM) para as funções AWS Lambda em execução nas suas máquinas locais."

#. type: Plain text
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:93
#, fuzzy
msgid "Lastly, although learning Quarkus was fast, learning the internals of Quarkus native mode was more challenging and took longer to understand."
msgstr "Por último, embora a aprendizagem do Quarkus tenha sido rápida, a aprendizagem dos aspectos internos do modo nativo do Quarkus foi mais difícil e demorou mais tempo a compreender."

#. type: Title ==
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:94
#, fuzzy, no-wrap
msgid "The future"
msgstr "O futuro"

#. type: Plain text
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:97
#, fuzzy
msgid "Ennovative Solutions plans to continue using Quarkus for future development of PURQR as well as other solutions. They are extremely impressed by this new technology and the involvement and active participation of its community. About the Quarkus project, Dennis’s parting thoughts are _“Great job! Keep up the good work and continue accepting work from the community.”_"
msgstr "A Ennovative Solutions planeia continuar a utilizar o Quarkus para o desenvolvimento futuro do PURQR, bem como de outras soluções. Estão extremamente impressionados com esta nova tecnologia e com o envolvimento e a participação ativa da sua comunidade. Sobre o projeto Quarkus, Dennis diz: _\"Excelente trabalho! Continuem o bom trabalho e continuem a aceitar trabalho da comunidade\"._"

#. type: Plain text
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:99
#, fuzzy
msgid "For more information on Quarkus:"
msgstr "Para mais informações sobre o Quarkus:"

#. type: Plain text
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:101
#, fuzzy
msgid "Quarkus website: http://quarkus.io"
msgstr "Sítio Web da Quarkus:  http://quarkus.io"

#. type: Plain text
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:102
#, fuzzy
msgid "Quarkus GitHub project: https://github.com/quarkusio/quarkus"
msgstr "Projeto Quarkus GitHub:  https://github.com/quarkusio/quarkus"

#. type: Plain text
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:103
#, fuzzy
msgid "Quarkus Twitter: https://twitter.com/QuarkusIO"
msgstr "Quarkus Twitter:  https://twitter.com/QuarkusIO"

#. type: Plain text
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:104
#, fuzzy
msgid "Quarkus chat: https://quarkusio.zulipchat.com/"
msgstr "Chat do Quarkus:  https://quarkusio.zulipchat.com/"

#. type: Plain text
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:105
#, fuzzy
msgid "Quarkus mailing list: https://groups.google.com/forum/#!forum/quarkus-dev"
msgstr "Lista de correio eletrónico Quarkus:  https://groups.google.com/forum/#!forum/quarkus-dev"

#. type: Plain text
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:106
#, fuzzy
msgid "https://youtube.com/quarkusio[Quarkus YouTube Channel]"
msgstr "link:https://youtube.com/quarkusio[Canal do YouTube da Quarkus]"

#. type: Plain text
#: upstream/_posts/2020-03-16-ennovativesolutions-uses-quarkus-with-aws-lambda.adoc:106
#, fuzzy
msgid "https://www.redhat.com/cms/managed-files/cl-4-reasons-try-quarkus-checklist-f19180cs-201909-en.pdf[Four reasons to use Quarkus]"
msgstr "link:https://www.redhat.com/cms/managed-files/cl-4-reasons-try-quarkus-checklist-f19180cs-201909-en.pdf[Quatro razões para utilizar o Quarkus]"
