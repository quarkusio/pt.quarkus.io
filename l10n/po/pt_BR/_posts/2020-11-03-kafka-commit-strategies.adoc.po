# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:1
#, fuzzy, no-wrap
msgid "cescoffier"
msgstr "cescoffier"

#. type: YAML Front Matter: date
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:1
#, fuzzy, no-wrap
msgid "2020-11-03"
msgstr "2020-11-03"

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "posto"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:1
#, fuzzy, no-wrap
msgid "Offset commiting strategies in the Kafka connector"
msgstr "Estratégias de confirmação de deslocamento no conetor Kafka"

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:1
#, fuzzy, no-wrap
msgid "reactive kafka"
msgstr "kafka reativo"

#. type: YAML Front Matter: title
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:1
#, fuzzy, no-wrap
msgid "Kafka - When to commit?"
msgstr "Kafka - Quando é que se deve fazer o commit?"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:15
#, fuzzy
msgid "In a https://quarkus.io/blog/kafka-failure-strategy/[previous blog post], we have looked at failure strategies provided by the Reactive Messaging Kafka connector.  But, imagine it's our lucky day, and for once it worked.  We should inform Kafka that the processing succeeded.  In Kafka terminology, we call this: _offset commit_.  This post covers the different strategies to commit offsets with the Reactive Messaging Kafka connector."
msgstr "Em uma  link:https://quarkus.io/blog/kafka-failure-strategy/[postagem anterior do blog], analisamos as estratégias de falha fornecidas pelo conetor Kafka de mensagens reativas. Mas, imagine que é o nosso dia de sorte e, pela primeira vez, funcionou. Devemos informar ao Kafka que o processamento foi bem-sucedido. Na terminologia do Kafka, chamamos isso de: _offset commit_. Este post aborda as diferentes estratégias para confirmar offsets com o conetor Reactive Messaging Kafka."

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:17
#, fuzzy
msgid "## Kafka Consumer Group and Offsets"
msgstr "Grupo de consumidores Kafka e compensações"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:21
#, fuzzy
msgid "Kafka organizes records (_i.e._ messages) around _topics_.  Each topic has a name, and applications send records to topics and poll records from topics.  So far, nothing out of the ordinary."
msgstr "O Kafka organiza registos _(ou seja,_ mensagens) em torno de _tópicos_. Cada tópico tem um nome e as aplicações enviam registos para tópicos e pesquisam registos de tópicos. Até agora, nada fora do comum."

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:28
#, fuzzy
msgid "Topics are divided into partitions.  Each partition is an ordered, immutable sequence of records.  Sending a message to a topic appends it to the selected partition.  Each message from a partition gets a sequential id number called _offset_.  It uniquely identifies each message within the partition.  So, with Kafka, you can identify an individual record using a `<topic, partition, offset>` tuple."
msgstr "Os tópicos são divididos em partições. Cada partição é uma sequência ordenada e imutável de registos. O envio de uma mensagem para um tópico anexa-a à partição selecionada. Cada mensagem de uma partição recebe um número de identificação sequencial chamado _offset_. Ele identifica de forma exclusiva cada mensagem dentro da partição. Assim, com o Kafka, é possível identificar um registo individual utilizando uma tupla `&amp;lt;topic, partition, offset&amp;gt;`."

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:30
#, fuzzy
msgid "image:/assets/images/posts/kafka-commit-strategies/topics-partitions.png[]"
msgstr "image:/assets/images/posts/kafka-commit-strategies/topics-partitions.png[alt=topics partitions]"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:35
#, fuzzy
msgid "When an application consumes messages from Kafka, it uses a Kafka consumer.  With this consumer, it polls batches of messages from a specific topic, for example, `movies` or `actors`.  Retrieved messages belong to partitions assigned to this consumer.  And that aspect is essential."
msgstr "Quando uma aplicação consome mensagens do Kafka, utiliza um consumidor Kafka. Com este consumidor, sonda lotes de mensagens de um tópico específico, por exemplo, `movies` ou `actors`. As mensagens recuperadas pertencem a partições atribuídas a este consumidor. E este aspeto é essencial."

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:39
#, fuzzy
msgid "Consumers belong to a consumer group, identified with a name (`A` and `B` in the picture above).  A group contains one or more consumers.  In general, when you scale up your application, it creates a consumer joining the same group."
msgstr "Os consumidores pertencem a um grupo de consumidores, identificado com um nome ( `A` e `B` na imagem acima). Um grupo contém um ou mais consumidores. Em geral, quando aumenta a escala da sua aplicação, esta cria um consumidor que se junta ao mesmo grupo."

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:41
#, fuzzy
msgid "image:/assets/images/posts/kafka-commit-strategies/consumer-groups.png[]"
msgstr "image:/assets/images/posts/kafka-commit-strategies/consumer-groups.png[alt=consumer groups]"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:49
#, fuzzy
msgid "Each consumer group receives each record from a topic once.  To achieve this, it assigns each consumer from a group to a set of partitions.  For example, in the above picture, the consumer from the application A1 receives the records from the partitions 0 and 1.  A2 receives the records from the partition 2.  App B is the only consumer from its consumer group.  So, it gets the records from all three partitions.  Consequently (ignore rebalance or other subtilities for now), each record from a topic is only received once per consumer group, by a specific consumer from that group."
msgstr "Cada grupo de consumidores recebe uma vez cada registo de um tópico. Para tal, atribui cada consumidor de um grupo a um conjunto de partições. Por exemplo, na imagem acima, o consumidor da aplicação A1 recebe os registos das partições 0 e 1. A2 recebe os registos da partição 2. A aplicação B é o único consumidor do seu grupo de consumidores. Por isso, recebe os registos das três partições. Consequentemente (ignore o reequilíbrio ou outras subtilidades por agora), cada registo de um tópico só é recebido uma vez por grupo de consumidores, por um consumidor específico desse grupo."

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:54
#, fuzzy
msgid "To orchestrate each consumer group's progress, each consumer periodically informs the broker of its current position - the last processed offset.  It commits the offset, indicating that all the previous records from that partition have been processed.  So, if a consumer stops and comes back later, it restarts from the last committed position (if assigned to that partition again).  Note that this behavior is configurable."
msgstr "Para orquestrar o progresso de cada grupo de consumidores, cada consumidor informa periodicamente o broker da sua posição atual - o último offset processado. Confirma o offset, indicando que todos os registos anteriores dessa partição foram processados. Assim, se um consumidor parar e voltar mais tarde, ele reinicia a partir da última posição confirmada (se for atribuído a essa partição novamente). Note que este comportamento é configurável."

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:61
#, fuzzy
msgid "What's important to notice is the periodic aspect of the commit.  Offset commit is expensive, and to enhance performance, we should not commit the offset after each processed record.  In this regard, Kafka behaves differently from traditional messaging solutions, such as JMS, which acknowledges each message individually.  Another important characteristic is the positional aspect of the commit.  You commit the position indicating that all the records located before that position are processed.  But is it really the case?"
msgstr "O que é importante notar é o aspeto periódico do commit. A confirmação do offset é dispendiosa e, para melhorar o desempenho, não devemos confirmar o offset após cada registo processado. Neste aspeto, o Kafka comporta-se de forma diferente das soluções de mensagens tradicionais, como o JMS, que reconhece cada mensagem individualmente. Outra caraterística importante é o aspeto posicional da confirmação. O commit da posição indica que todos os registos localizados antes dessa posição são processados. Mas será que é mesmo assim?"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:63
#, fuzzy
msgid "### The Kafka default behavior"
msgstr "O comportamento predefinido do Kafka"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:66
#, fuzzy
msgid "The Apache Kafka consumer uses an auto-commit approach by default.  Applications using such a consumer are structured around a polling loop:"
msgstr "O consumidor do Apache Kafka utiliza uma abordagem de auto-compromisso por defeito. As aplicações que utilizam este tipo de consumidor estão estruturadas em torno de um ciclo de sondagem:"

#. type: delimited block -
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:73
#, no-wrap
msgid ""
"while(true) {\n"
"    ConsumerRecords records = consumer.poll(Duration.ofMillis(10000));\n"
"    processRetrievedRecords(records);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:77
#, fuzzy
msgid "Such a program polls a batch of records, processes them, and then polls the next set.  While calling the `poll` method, the consumer periodically commits the last offset of the previous batches transparently."
msgstr "Um programa deste tipo sonda um lote de registos, processa-os e depois sonda o próximo conjunto. Ao chamar o método `poll`, o consumidor confirma periodicamente o último deslocamento dos lotes anteriores de forma transparente."

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:83
#, fuzzy
msgid "Quite nice, right? If the application fails to process a message, it throws an exception, which either interrupts the while loop or is handled gracefully (within the `processRetrievedRecords` method).  In the first case, it means that it won't commit anymore (as it happens in the `poll` method, not called anymore).  If the application restarts, it resumes from the last committed offset (or apply the `auto.offset.reset` strategy, defaulting to `latest`, if there are no offsets for this group yet).  It may re-process a set of messages (it's the application's responsibility to handle duplicates), but at least nothing is lost."
msgstr "Muito bom, não é? Se a aplicação não conseguir processar uma mensagem, lança uma exceção, que interrompe o ciclo while ou é tratada de forma graciosa (no método `processRetrievedRecords` ). No primeiro caso, significa que a aplicação deixa de se comprometer (como acontece no método `poll`, que já não é chamado). Se a aplicação reiniciar, recomeça a partir do último desvio confirmado (ou aplica a estratégia `auto.offset.reset`, por defeito para `latest`, se ainda não existirem desvios para este grupo). Pode voltar a processar um conjunto de mensagens (é da responsabilidade da aplicação tratar os duplicados), mas pelo menos nada se perde."

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:86
#, fuzzy
msgid "So, is there anything wrong with this? Looks wonderful... until you add a pinch of asynchrony."
msgstr "Então, há algo de errado com isto? Parece maravilhoso... até adicionar uma pitada de assincronia."

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:88
#, fuzzy
msgid "## What if the message's processing is asynchronous"
msgstr "E se o processamento da mensagem for assíncrono?"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:93
#, fuzzy
msgid "If the message processing is asynchronous (offloaded to another thread, use non-blocking I/O...), failures may not interrupt the while loop from above.  Failure happens asynchronously, outside the polling thread.  If the `poll` method gets called again despite a failed processing, and _auto-commit_ is still enabled, we may commit offsets while something wrong happened.  If some processing of previously retrieved records is not completed yet, while this auto commit happens, it may consider the record as processed correctly, but the outcome is unknown at that point."
msgstr "Se o processamento da mensagem for assíncrono (transferido para outra thread, usar E/S sem bloqueio...), as falhas podem não interromper o loop while de cima. A falha ocorre de forma assíncrona, fora da thread de sondagem. Se o método `poll` for chamado novamente apesar de um processamento falhado, e _o auto-commit_ ainda estiver ativado, podemos confirmar os offsets enquanto algo de errado aconteceu. Se algum processamento de registos recuperados anteriormente ainda não estiver concluído, enquanto esta confirmação automática acontece, pode considerar o registo como processado corretamente, mas o resultado é desconhecido nesse momento."

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:102
#, fuzzy
msgid "So to handle these case, we can disable the auto-commit and switch to manual commit.  In this case, it's the application's responsibility to commit the offsets regularly.  So, the application needs to track the polled records, their processing, failures, and periodically commits the offsets.  It might not look too tricky, but actually, it can become quite challenging.  Again, in asynchronous scenarios, you may complete the processing of messages in various orders.  For example, if you call a remote service for each record, the responses may not come in the same orders as the records.  You need to track messages individually and only commit the offsets if all the previous messages are processed successfully.  Without this, you may commit offsets while there is processing from previous records still in progress or even failed processing."
msgstr "Assim, para lidar com estes casos, podemos desativar o auto-commit e mudar para o commit manual. Neste caso, é da responsabilidade da aplicação confirmar os desvios regularmente. Assim, a aplicação precisa de seguir os registos sondados, o seu processamento, as falhas e confirmar periodicamente os valores de referência. Pode não parecer muito complicado, mas, na verdade, pode tornar-se bastante difícil. Mais uma vez, em cenários assíncronos, é possível concluir o processamento de mensagens em várias ordens. Por exemplo, se chamar um serviço remoto para cada registo, as respostas podem não vir na mesma ordem que os registos. É necessário seguir as mensagens individualmente e só confirmar os desvios se todas as mensagens anteriores forem processadas com êxito. Sem isso, pode confirmar os desvios enquanto o processamento de registos anteriores ainda estiver em curso ou até mesmo o processamento falhar."

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:104
#, fuzzy
msgid "What can we do about this?"
msgstr "O que é que podemos fazer em relação a isto?"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:106
#, fuzzy
msgid "## Kafka connector commit strategies"
msgstr "Estratégias de confirmação do conetor Kafka"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:108
#, fuzzy
msgid "When using Reactive Messaging and the Kafka connector, you entered an asynchronous world."
msgstr "Ao utilizar o serviço de mensagens reactivas e o conetor Kafka, entrou num mundo assíncrono."

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:113
#, fuzzy
msgid "Message processing may not happen synchronously and sequentially.  When a Reactive Messaging `Message` processing completes, it acknowledges the message.  In the case of processing failures, it sends a negative acknowledgment.  The Kafka connector receives these acknowledgments and can decide what needs to be done, basically: to commit or not to commit."
msgstr "O processamento de mensagens pode não ocorrer de forma síncrona e sequencial. Quando um processamento do serviço de mensagens reactivas `Message` está concluído, confirma a receção da mensagem. No caso de falhas de processamento, envia um aviso de receção negativo. O conetor Kafka recebe estas confirmações e pode decidir o que deve ser feito, basicamente: confirmar ou não confirmar."

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:115
#, fuzzy
msgid "You can choose among three strategies:"
msgstr "Pode escolher entre três estratégias:"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:117
#, fuzzy
msgid "throttled (default starting Quarkus 1.10)"
msgstr "acelerado (predefinição a partir do Quarkus 1.10)"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:118
#, fuzzy
msgid "latest (default before Quarkus 1.10)"
msgstr "mais recente (predefinição antes do Quarkus 1.10)"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:119
#, fuzzy
msgid "ignore (default if `enabled.auto.commit=true` is set)"
msgstr "ignorar (predefinição se `enabled.auto.commit=true` estiver definido)"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:121
#, fuzzy
msgid "This is configured using the `commit-strategy` attribute:"
msgstr "Isto é configurado utilizando o atributo `commit-strategy`:"

#. type: delimited block -
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:126
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:142
#, no-wrap
msgid ""
"mp.messaging.incoming.my-channel.connector=smallrye-kafka\n"
"mp.messaging.incoming.my-channel.commit-strategy=throttled\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:129
#, fuzzy
msgid "## The throttled strategy"
msgstr "A estratégia do estrangulamento"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:134
#, fuzzy
msgid "The throttled strategy can be seen as an asynchronous variant of the default \"auto-commit\" behavior described above.  When enabled, the connector tracks each received message and monitors their acknowledgment.  When the connector finds out that all messages before a position are processed successfully, it commits that position.  This commit happens periodically to avoid committing too often."
msgstr "A estratégia estrangulada pode ser vista como uma variante assíncrona do comportamento padrão \"auto-commit\" descrito acima. Quando ativado, o conetor segue cada mensagem recebida e monitoriza o seu reconhecimento. Quando o conetor descobre que todas as mensagens antes de uma posição foram processadas com sucesso, ele confirma essa posição. Essa confirmação ocorre periodicamente para evitar confirmações muito frequentes."

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:137
#, fuzzy
msgid "This strategy provides very good throughput and can handle asynchronous processing.  To enable this strategy configures the channel with:"
msgstr "Esta estratégia fornece um rendimento muito bom e pode lidar com o processamento assíncrono. Para ativar esta estratégia, configure o canal com:"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:150
#, fuzzy
msgid "There is one detail to mention.  If an old message is neither acked nor nacked, the strategy cannot commit the position anymore.  It will enqueue messages forever, waiting for that missing ack to happen.  It can lead to out of memory, as the connector would never be able to commit a position and to clear the queue.  Fortunately, the strategy detects this situation and reports a failure to the connector, marking the application unhealthy.  The `throttled.unprocessed-record-max-age.ms` attribute configures the deadline for each message to be acked or nacked before being considered as a poison pill (Default is 1 minute)."
msgstr "Há um pormenor a referir. Se uma mensagem antiga não for nem acked nem nacked, a estratégia não pode mais comprometer a posição. Ficará eternamente em fila de espera, aguardando que o ack que falta seja efectuado. Isto pode levar à perda de memória, uma vez que o conetor nunca poderá confirmar uma posição e limpar a fila. Felizmente, a estratégia detecta esta situação e comunica uma falha ao conetor, marcando a aplicação como não saudável. O atributo `throttled.unprocessed-record-max-age.ms` configura o prazo para que cada mensagem seja acked ou nacked antes de ser considerada como um poison pill (a predefinição é 1 minuto)."

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:152
#, fuzzy
msgid "## The Ignore strategy"
msgstr "A estratégia Ignorar"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:157
#, fuzzy
msgid "The connector uses this strategy by default if you explicitly enabled Kafka's auto-commit (with the `enable.auto.commit` attribute set to `true`).  In this case, the connector ignores acknowledgment and won't commit the offsets.  The Kafka consumer commits the offset periodically when polling batches, as described above.  This strategy works well if the message processing is synchronous and failures handled gracefully."
msgstr "O conetor utiliza esta estratégia por predefinição se tiver ativado explicitamente o auto-compromisso do Kafka (com o atributo `enable.auto.commit` definido como `true`). Nesse caso, o conetor ignora a confirmação e não confirma os deslocamentos. O consumidor do Kafka confirma o deslocamento periodicamente ao sondar os lotes, conforme descrito acima. Esta estratégia funciona bem se o processamento da mensagem for síncrono e as falhas forem tratadas de forma graciosa."

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:159
#, fuzzy
msgid "You can enable this strategy by configured enabled-auto-commit to true:"
msgstr "Pode ativar esta estratégia configurando enabled-auto-commit para true:"

#. type: delimited block -
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:164
#, no-wrap
msgid ""
"mp.messaging.incoming.my-channel.connector=smallrye-kafka\n"
"mp.messaging.incoming.my-channel.enable.auto.commit=true\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:167
#, fuzzy
msgid "Be aware that starting Quarkus 1.9, auto commit is disabled by default. So you need to explicitly enable it."
msgstr "Tenha em atenção que, a partir do Quarkus 1.9, a confirmação automática está desactivada por predefinição. Por isso, é necessário activá-lo explicitamente."

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:171
#, fuzzy
msgid "If you don't enable auto-commit, using this strategy is still possible but will never commit the offsets.  In other words, you would restart from the oldest stored records every time.  While there are use cases for this, double-check that's what you want. In this case, enable this strategy with:"
msgstr "Se não ativar a confirmação automática, a utilização desta estratégia continua a ser possível, mas nunca confirmará os desvios. Por outras palavras, reiniciará sempre a partir dos registos armazenados mais antigos. Embora existam casos de uso para isso, verifique novamente se é isso que você deseja. Nesse caso, habilite essa estratégia com:"

#. type: delimited block -
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:176
#, no-wrap
msgid ""
"mp.messaging.incoming.my-channel.connector=smallrye-kafka\n"
"mp.messaging.incoming.my-channel.commit-strategy=ignore\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:179
#, fuzzy
msgid "## The latest strategy"
msgstr "A mais recente estratégia"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:183
#, fuzzy, no-wrap
msgid ""
"This strategy commits the offset every time a message is acknowledged.\n"
"This strategy tends to commit often, and so decrease the throughput.   \n"
"However, it also reduces the risk of duplicates if the messages are processed synchronously. \n"
msgstr "Esta estratégia confirma o desvio sempre que uma mensagem é confirmada. Esta estratégia tende a ser efectuada com frequência, diminuindo assim o débito. No entanto, também reduz o risco de duplicados se as mensagens forem processadas de forma síncrona."

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:185
#, fuzzy
msgid "Enable this strategy with:"
msgstr "Ativar esta estratégia com:"

#. type: delimited block -
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:190
#, no-wrap
msgid ""
"mp.messaging.incoming.my-channel.connector=smallrye-kafka\n"
"mp.messaging.incoming.my-channel.commit-strategy=latest\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:193
#, fuzzy
msgid "## Conclusion"
msgstr "Conclusão"

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:198
#, fuzzy
msgid "In general, use the `throttled` strategy.  It provides high-throughput and handles the asynchronous use cases.  This strategy is becoming the default strategy in Quarkus 1.10.  You can also switch to the `ignore` strategy if the Kafka auto-commit is acceptable for you, or if you want to skip offset commit altogether."
msgstr "Em geral, utilize a estratégia `throttled`. Esta estratégia proporciona um elevado rendimento e trata os casos de utilização assíncronos. Essa estratégia está se tornando a estratégia padrão no Quarkus 1.10. Também pode mudar para a estratégia `ignore` se o auto-commit do Kafka for aceitável para si, ou se quiser saltar completamente o offset commit."

#. type: Plain text
#: upstream/_posts/2020-11-03-kafka-commit-strategies.adoc:200
#, fuzzy
msgid "That concludes this blog post.  The next one will discuss how to receive and produce Cloud Events using the Kafka connector."
msgstr "Isso conclui esta postagem do blog. A próxima discutirá como receber e produzir eventos de nuvem usando o conetor Kafka."
