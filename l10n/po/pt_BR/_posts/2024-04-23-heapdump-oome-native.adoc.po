msgid ""
msgstr ""
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _posts/2024-04-23-heapdump-oome-native.adoc
#, fuzzy
msgid "Obtaining heap dump on OutOfMemoryError with Quarkus native"
msgstr "Obtenção de heap dump em OutOfMemoryError com o Quarkus nativo"

#: _posts/2024-04-23-heapdump-oome-native.adoc
#, fuzzy
msgid "Generating and inspecting heap dumps in Quarkus native when `OutOfMemoryError` errors occur"
msgstr "Geração e inspeção de heap dumps no Quarkus native quando ocorrem erros no `OutOfMemoryError` "

#: _posts/2024-04-23-heapdump-oome-native.adoc
#, fuzzy
msgid ""
"Starting with GraalVM for JDK 21,\n"
"native executables can run with the `-XX:+HeapDumpOnOutOfMemoryError` option to generate a heap dump when a `java.lang.OutOfMemoryError` is thrown.\n"
"In this blog post we will explore how to use the flag,\n"
"we will inspect what a GraalVM Native Image heap dump looks like and how it compares with one produced by HotSpot."
msgstr "A partir do GraalVM para JDK 21, os executáveis nativos podem ser executados com a opção `-XX:+HeapDumpOnOutOfMemoryError` para gerar um heap dump quando um `java.lang.OutOfMemoryError` é lançado. Nesta postagem do blog, exploraremos como usar o sinalizador, inspecionaremos a aparência de um heap dump do GraalVM Native Image e como ele se compara a um produzido pelo HotSpot."

#: _posts/2024-04-23-heapdump-oome-native.adoc
#, fuzzy
msgid ""
"Note: The heap of GraalVM Native Image executables has both read-only and read-write segments.\n"
"The read-only part is referred to as the \"image heap\" and contains the data pre-initialized during the image build to help speed up start-up time.\n"
"The read-write part is where allocations at runtime are made.\n"
"Therefore, heap dumps generated at runtime will contain content from both the \"image heap\" and the read-write heap."
msgstr "Observação: o heap dos executáveis da imagem nativa do GraalVM tem segmentos de leitura e gravação. A parte somente leitura é chamada de \"heap de imagem\" e contém os dados pré-inicializados durante a criação da imagem para ajudar a acelerar o tempo de inicialização. A parte de leitura e gravação é onde são feitas as alocações em tempo de execução. Portanto, os heap dumps gerados em tempo de execução conterão conteúdo tanto do \"image heap\" quanto do read-write heap."

#: _posts/2024-04-23-heapdump-oome-native.adoc
#, fuzzy
msgid ""
"To see this flag in action, we need to manufacture a situation where a Quarkus application runs out of memory.\n"
"One easy way to achieve this is to configure the application with a garbage collector that doesn't do any memory reclamation,\n"
"i.e. the Epsilon GC.\n"
"Once the Quarkus application is running with Epsilon GC,\n"
"apply some load and within a short space of time it will run out of memory and produce a heap dump."
msgstr "Para ver esse sinalizador em ação, precisamos criar uma situação em que um aplicativo Quarkus fique sem memória. Uma maneira fácil de conseguir isso é configurar o aplicativo com um coletor de lixo que não faça nenhuma recuperação de memória, ou seja, o Epsilon GC. Quando o aplicativo Quarkus estiver em execução com o GC Epsilon, aplique alguma carga e, em um curto espaço de tempo, ele ficará sem memória e produzirá um heap dump."

#: _posts/2024-04-23-heapdump-oome-native.adoc
#, fuzzy
msgid ""
"Let’s do this using a Quarkus application that simply responds to an HTTP endpoint request as a starting point.\n"
"The sample application can be downloaded from\n"
"https://code.quarkus.io[code.quarkus.io] using a browser\n"
"or via the command line:"
msgstr "Vamos fazer isso usando um aplicativo Quarkus que simplesmente responde a uma solicitação de endpoint HTTP como ponto de partida. O aplicativo de amostra pode ser baixado de link:https://code.quarkus.io[code.quarkus.io] usando um navegador ou a linha de comando:"

#: _posts/2024-04-23-heapdump-oome-native.adoc
#, fuzzy
msgid "Next, build a Quarkus native executable with GraalVM for JDK 21 configuring it to use Epsilon GC:"
msgstr "Em seguida, crie um executável nativo do Quarkus com o GraalVM para JDK 21, configurando-o para usar o Epsilon GC:"

#: _posts/2024-04-23-heapdump-oome-native.adoc
#, fuzzy
msgid "Note: The GC selection needs to be done at build time for Quarkus native applications."
msgstr "Observação: A seleção do GC precisa ser feita no momento da compilação dos aplicativos nativos do Quarkus."

#: _posts/2024-04-23-heapdump-oome-native.adoc
#, fuzzy
msgid "While the Quarkus native executable is being produced you will be able to observe that GC is indeed configured to be EpsilonGC:"
msgstr "Enquanto o executável nativo do Quarkus estiver sendo produzido, o senhor poderá observar que o GC está realmente configurado para ser o EpsilonGC:"

#: _posts/2024-04-23-heapdump-oome-native.adoc
#, fuzzy
msgid ""
"Once the build completes,\n"
"start Quarkus with `-XX:+HeapDumpOnOutOfMemoryError -XX:+ExitOnOutOfMemoryError`.\n"
"The latter forces the application to shutdown when an `OutOfMemoryError` occurs rather than leave the process in an indeterminate state:"
msgstr "Quando a compilação for concluída, inicie o Quarkus com `-XX:+HeapDumpOnOutOfMemoryError -XX:+ExitOnOutOfMemoryError` . Esse último força o aplicativo a encerrar quando ocorre um `OutOfMemoryError` em vez de deixar o processo em um estado indeterminado:"

#: _posts/2024-04-23-heapdump-oome-native.adoc
#, fuzzy
msgid "Next, apply some load to the HTTP endpoint exposed by the Quarkus application, for example using `curl` in a bash loop:"
msgstr "Em seguida, aplique alguma carga ao endpoint HTTP exposto pelo aplicativo Quarkus, por exemplo, usando `curl` em um loop bash:"

#: _posts/2024-04-23-heapdump-oome-native.adoc
#, fuzzy
msgid ""
"Switching to the Quarkus console,\n"
"an `OutOfMemoryError` would be observed along with some messages indicating that a heap dump is being produced:"
msgstr "Ao mudar para o console do Quarkus, um `OutOfMemoryError` seria observado junto com algumas mensagens indicando que um heap dump está sendo produzido:"

#: _posts/2024-04-23-heapdump-oome-native.adoc
#, fuzzy
msgid ""
"Multiple graphical tools exist out there to inspect heap dumps,\n"
"such as https://visualvm.github.io/[VisualVM],\n"
"https://eclipse.dev/mat/[Eclipse Memory Analyzer (MAT)], etc.,\n"
"but some new ones are also available that you can run in the command line to get a quick picture of the heap dump,\n"
"for example\n"
"https://github.com/openjdk/jol[Java Object Layout (JOL)]:"
msgstr "Existem várias ferramentas gráficas para inspecionar os despejos de heap, como o link:https://visualvm.github.io/[VisualVM] , o link:https://eclipse.dev/mat/[Eclipse Memory Analyzer (MAT)] etc., mas também estão disponíveis algumas novas que podem ser executadas na linha de comando para obter uma imagem rápida do despejo de heap, por exemplo, o link:https://github.com/openjdk/jol[Java Object Layout (JOL)] :"

#: _posts/2024-04-23-heapdump-oome-native.adoc
#, fuzzy
msgid ""
"The presence of SubstrateVM,\n"
"the VM that powers native images built with GraalVM,\n"
"can be clearly observed because of the instances of `com.oracle.svm.core.monitor.JavaMonitor` present in the heap dump.\n"
"What would the heap dump look like if we repeat exactly the same exercise but instead we use Quarkus JVM mode? Let’s see:"
msgstr "A presença do SubstrateVM, a VM que alimenta as imagens nativas criadas com o GraalVM, pode ser claramente observada por causa das instâncias de `com.oracle.svm.core.monitor.JavaMonitor` presentes no heap dump. Como seria o heap dump se repetíssemos exatamente o mesmo exercício, mas, em vez disso, usássemos o modo JVM do Quarkus? Vejamos:"

#: _posts/2024-04-23-heapdump-oome-native.adoc
#, fuzzy
msgid "Rebuild the Quarkus app for JVM mode and run it with Epsilon GC:"
msgstr "Reconstrua o aplicativo Quarkus para o modo JVM e execute-o com o Epsilon GC:"

#: _posts/2024-04-23-heapdump-oome-native.adoc
#, fuzzy
msgid "After applying the same load, you would observe the heap dump being generated in JVM mode as well:"
msgstr "Depois de aplicar a mesma carga, o senhor observará que o heap dump também está sendo gerado no modo JVM:"

#: _posts/2024-04-23-heapdump-oome-native.adoc
#, fuzzy
msgid "And this is what the heap dump looks like with JOL:"
msgstr "E é assim que o heap dump se parece com o JOL:"

#: _posts/2024-04-23-heapdump-oome-native.adoc
#, fuzzy
msgid ""
"As expected, no SubstrateVM classes are present in this heap dump,\n"
"leaving only Quarkus, Vert.x and OpenJDK types in the heap dump."
msgstr "Como esperado, nenhuma classe do SubstrateVM está presente nesse heap dump, deixando apenas os tipos Quarkus, Vert.x e OpenJDK no heap dump."
