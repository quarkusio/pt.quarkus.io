# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:1
#, fuzzy, no-wrap
msgid "cescoffier"
msgstr "cescoffier"

#. type: YAML Front Matter: date
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:1
#, fuzzy, no-wrap
msgid "2020-09-29"
msgstr "2020-09-29"

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "posto"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:1
#, fuzzy, no-wrap
msgid "Running concurrent asynchronous actions with Mutiny"
msgstr "Executar acções assíncronas simultâneas com o Mutiny"

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:1
#, fuzzy, no-wrap
msgid "reactive mutiny async"
msgstr "mutiny reativo assíncrono"

#. type: YAML Front Matter: title
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:1
#, fuzzy, no-wrap
msgid "Concurrent asynchronous actions with Mutiny"
msgstr "Acções assíncronas simultâneas com o Mutiny"

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:13
#, fuzzy
msgid "This week, I've been asked about a widespread use case around concurrency.  This user wanted to call two microservices _in parallel_, and when both results are received, join them and continue the processing.  Basically, the following pattern:"
msgstr "Esta semana, perguntaram-me sobre um caso de utilização generalizado em torno da concorrência. Este utilizador queria chamar dois microserviços _em paralelo_ e, quando ambos os resultados fossem recebidos, juntá-los e continuar o processamento. Basicamente, o seguinte padrão:"

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:15
#, fuzzy
msgid "image:/assets/images/posts/mutiny-concurrent-uni/pattern.png[width=50%]"
msgstr "image:/assets/images/posts/mutiny-concurrent-uni/pattern.png[alt=pattern]"

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:18
#, fuzzy
msgid "In a non-reactive approach, both calls would block the caller thread, and, except if you use a worker thread pool, the calls are not concurrent.  Even if you use a worker thread pool, these threads are likely blocked, consuming resources for nothing."
msgstr "Numa abordagem não reactiva, ambas as chamadas bloqueariam a thread do chamador e, exceto se utilizar um pool de threads de trabalho, as chamadas não são simultâneas. Mesmo se você usar um pool de threads de trabalho, essas threads provavelmente estarão bloqueadas, consumindo recursos para nada."

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:20
#, fuzzy
msgid "But no worries, Quarkus reactive nature and Mutiny have everything to handle this scenario."
msgstr "Mas não se preocupe, a natureza reactiva de Quarkus e o Mutiny têm tudo para lidar com este cenário."

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:22
#, fuzzy
msgid "## Let's call two services"
msgstr "Vamos chamar dois serviços"

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:27
#, fuzzy
msgid "In this post, I'm going to use the Vert.x Web Client, a reactive HTTP client.  It leverages non-blocking I/O to be highly performant and truly non-blocking.  It does not rely on a hidden thread pool.  You can also use the Quarkus Rest Client, but, at the moment, it still uses worker threads."
msgstr "Neste post, vou usar o Cliente Web Vert.x, um cliente HTTP reativo. Ele aproveita a E/S não-bloqueante para ser altamente performático e verdadeiramente não-bloqueante. Ele não depende de um pool de threads oculto. Também é possível usar o cliente Quarkus Rest, mas, no momento, ele ainda usa threads de trabalho."

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:30
#, fuzzy
msgid "No matter which client we use, we need some remote services to call.  Let's use:"
msgstr "Independentemente do cliente que usarmos, precisamos de alguns serviços remotos para chamar. Vamos usar:"

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:32
#, fuzzy
msgid "https://programming-quotes-api.herokuapp.com/ - to get a quote about programming"
msgstr "https://programming-quotes-api.herokuapp.com/  - para obter um orçamento sobre programação"

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:33
#, fuzzy
msgid "https://api.chucknorris.io/ - to get a quote about _Chuck Norris_"
msgstr "https://api.chucknorris.io/  - para obter um orçamento sobre _Chuck Norris_"

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:38
#, fuzzy
msgid "First thing first, let's see the code required to retrieve our quotes: While both services are similar, the structure of the response differs a little bit.  So we end up with:"
msgstr "Antes de mais, vamos ver o código necessário para obter as nossas cotações: Embora ambos os serviços sejam semelhantes, a estrutura da resposta difere um pouco. Assim, acabamos com:"

#. type: delimited block -
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:47
#, no-wrap
msgid ""
"private static Uni<String> getProgrammingQuote(WebClient client) {\n"
"    return client.getAbs(PROGRAMMING_QUOTE)\n"
"            .as(BodyCodec.jsonObject())\n"
"            .send()\n"
"            .onItem().transform(r -> r.body().getString(\"en\") + \" (\" + r.body().getString(\"author\") + \")\");\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:54
#, no-wrap
msgid ""
"private static Uni<String> getChuckNorrisQuote(WebClient client) {\n"
"    return client.getAbs(CHUCK_NORRIS_QUOTE)\n"
"            .as(BodyCodec.jsonObject())\n"
"            .send()\n"
"            .onItem().transform(r -> r.body().getString(\"value\"));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:62
#, fuzzy
msgid "These two methods receive a `WebClient`, invoke the services, retrieve the JSON responses, and extract them.  They both return a `Uni`.  So they are asynchronous.  The result (the quote) is provided _later_ when available.  Also, returning a `Uni` means that the services will only be invoked when someone subscribes to the returned `Uni`.  If you subscribe multiple times, you will call the service multiple times."
msgstr "Estes dois métodos recebem um `WebClient`, invocam os serviços, obtêm as respostas JSON e extraem-nas. Ambos devolvem um `Uni`. Portanto, são assíncronos. O resultado (a citação) é fornecido _mais tarde_, quando disponível. Além disso, retornar um `Uni` significa que os serviços só serão invocados quando alguém se inscrever no `Uni` retornado. Se o utilizador subscrever várias vezes, chamará o serviço várias vezes."

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:64
#, fuzzy
msgid "## Combining Unis"
msgstr "Combinação de unidades"

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:67
#, fuzzy
msgid "So far, we have two methods to call our services.  But we want to call them concurrently, as depicted above."
msgstr "Até agora, temos dois métodos para chamar os nossos serviços. Mas queremos chamá-los em simultâneo, como ilustrado acima."

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:69
#, fuzzy
msgid "Mutiny provides a way to _combine_ items produced by `Unis`:"
msgstr "O Motim proporciona uma forma de _combinar_ itens produzidos por `Unis`:"

#. type: delimited block -
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:75
#, no-wrap
msgid ""
"Uni<Tuple2<String, String>> tuple = Uni.combine().all()\n"
"    .unis(getProgrammingQuote(client), getChuckNorrisQuote(client))\n"
"    .asTuple();\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:79
#, fuzzy
msgid "When someone subscribes to the `Uni tuple`, it subscribes to the `getProgrammingQuote(client)` and `getChuckNorrisQuote(client)` `Unis`, which invoke the services.  So the requests are emitted, and the services are invoked concurrently."
msgstr "Quando alguém se inscreve em `Uni tuple`, inscreve-se em `getProgrammingQuote(client)` e `getChuckNorrisQuote(client)` `Unis` , que invocam os serviços. Assim, os pedidos são emitidos e os serviços são invocados em simultâneo."

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:81
#, fuzzy
msgid "When both responses are available, it combines them into a _Tuple_, a simple structure carrying multiple items."
msgstr "Quando ambas as respostas estão disponíveis, combina-as numa _tupla_, uma estrutura simples que contém vários itens."

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:85
#, fuzzy
msgid "In other words, concurrently calling our services is pretty straightforward.  Just create the `Unis` representing the services or the asynchronous action you want to achieve and combine them using `Uni.combine().all()` You can decide to combine the results using _tuples_ or to use a combinator function."
msgstr "Por outras palavras, chamar simultaneamente os nossos serviços é bastante simples. Basta criar o `Unis` que representa os serviços ou a ação assíncrona que pretende realizar e combiná-los utilizando `Uni.combine().all()`. Pode decidir combinar os resultados utilizando _tuplas_ ou uma função combinadora."

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:87
#, fuzzy
msgid "## Putting everything together"
msgstr "Colocar tudo junto"

#. type: delimited block -
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:92
#, no-wrap
msgid ""
"// Create a Web Client\n"
"WebClient client = WebClient.create(vertx);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:97
#, no-wrap
msgid ""
"// Combine the result of our 2 Unis in a tuple\n"
"Uni.combine().all()\n"
"        .unis(getProgrammingQuote(client), getChuckNorrisQuote(client))\n"
"        .asTuple()\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:104
#, no-wrap
msgid ""
"        // Subscribe (which will trigger the calls)\n"
"        .subscribe().with(tuple -> {\n"
"    System.out.println(\"Programming Quote: \" + tuple.getItem1());\n"
"    System.out.println(\"Chuck Norris Quote: \" + tuple.getItem2());\n"
"});\n"
"----        \n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:107
#, no-wrap
msgid ""
"That's it! \n"
"If you want to see this code in action, check this https://gist.github.com/cescoffier/1ed68bef12b798529e10350f77686e9a[gist]. You even can run it directly with JBang:\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:109
#, no-wrap
msgid "[source,bash]\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:111
#, fuzzy
msgid "jbang https://gist.github.com/cescoffier/1ed68bef12b798529e10350f77686e9a"
msgstr "jbang  https://gist.github.com/cescoffier/1ed68bef12b798529e10350f77686e9a"

#. type: delimited block -
#: upstream/_posts/2020-09-29-mutiny-concurrent-uni.adoc:113
#, no-wrap
msgid "Enjoy!\n"
msgstr ""
