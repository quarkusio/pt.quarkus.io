# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:1
#, fuzzy, no-wrap
msgid "cescoffier"
msgstr "cescoffier"

#. type: YAML Front Matter: date
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:1
#, fuzzy, no-wrap
msgid "2020-10-27"
msgstr "2020-10-27"

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "posto"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:1
#, fuzzy, no-wrap
msgid "How does flow control works with Mutiny"
msgstr "Como é que o controlo de fluxo funciona com o Mutiny"

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:1
#, fuzzy, no-wrap
msgid "reactive mutiny streams"
msgstr "fluxos reactivos de motins"

#. type: YAML Front Matter: title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:1
#, fuzzy, no-wrap
msgid "Mutiny - Flow control and Back-pressure"
msgstr "Mutiny - Controlo do caudal e contrapressão"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:13
#, fuzzy
msgid "Reactive Programming offers an elegant, flexible, and powerful way to write asynchronous code.  It supports failure handling, both sequential and parallel operation composition, and plenty of operators.  Reactive programming promotes data streams as a primary construct, and your code is observing streams and reacting to signals."
msgstr "A Programação Reactiva oferece uma forma elegante, flexível e poderosa de escrever código assíncrono. Suporta o tratamento de falhas, a composição de operações sequenciais e paralelas e muitos operadores. A programação reativa promove fluxos de dados como uma construção primária, e seu código está observando fluxos e reagindo a sinais."

#. type: Block title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:14
#, fuzzy, no-wrap
msgid "Origins of back-pressure (https://impurepics.com/posts/2018-05-26-backpressure-origins.html)   "
msgstr "Origens da contrapressão https://impurepics.com/posts/2018-05-26-backpressure-origins.html"

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:15
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:27
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:169
#, fuzzy, no-wrap
msgid "800"
msgstr "800"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:15
#, no-wrap
msgid "/assets/images/posts/mutiny-back-pressure/back-pressure-origin.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:19
#, fuzzy
msgid "However, using data streams as primary constructs does not come without some issues.  One of the main problems is the need for flow control."
msgstr "No entanto, a utilização de fluxos de dados como construções primárias não é isenta de alguns problemas. Um dos principais problemas é a necessidade de controlo do fluxo."

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:21
#, fuzzy
msgid "## The producer/consumer problem"
msgstr "O problema do produtor/consumidor"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:25
#, fuzzy
msgid "Let's imagine a fast producer and a slow consumer.  The producer sends events too quickly for the consumer that can't keep up.  That phenomenon is remarkably well illustrated in the following picture."
msgstr "Imaginemos um produtor rápido e um consumidor lento. O produtor envia eventos demasiado depressa para o consumidor que não consegue acompanhar. Este fenómeno está muito bem ilustrado na imagem seguinte."

#. type: Block title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:26
#, fuzzy, no-wrap
msgid "No Back-Pressure (https://impurepics.com/posts/2018-05-26-backpressure-origins.html)"
msgstr "Sem contrapressão https://impurepics.com/posts/2018-05-26-backpressure-origins.html"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:27
#, no-wrap
msgid "/assets/images/posts/mutiny-back-pressure/back-pressure-no.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:31
#, fuzzy
msgid "Let's see some code.  Imagine a producer emitting an event every ten milliseconds, while the consumer can only consume one per second."
msgstr "Vamos ver algum código. Imagine um produtor que emite um evento a cada dez milissegundos, enquanto o consumidor só pode consumir um por segundo."

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:41
#, no-wrap
msgid ""
"Multi.createFrom().ticks().every(Duration.ofMillis(10))\n"
"    .emitOn(Infrastructure.getDefaultExecutor())\n"
"    .onItem().transform(BackPressureExample::canOnlyConsumeOneItemPerSecond)\n"
"    .subscribe().with(\n"
"        item -> System.out.println(\"Got item: \" + item),\n"
"        failure -> System.out.println(\"Got failure: \" + failure)\n"
");\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:44
#, fuzzy
msgid "If you run that code, you will see that the subscriber gets a `MissingBackPressureFailure,` indicating that the downstream cannot keep up:"
msgstr "Se executar esse código, verá que o assinante recebe um `MissingBackPressureFailure,` indicando que o downstream não consegue acompanhar:"

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:49
#, no-wrap
msgid ""
"Got item: 0\n"
"Got failure: io.smallrye.mutiny.subscription.BackPressureFailure: Could not emit tick 16 due to lack of requests\n"
msgstr ""

#. type: Block title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:52
#, fuzzy, no-wrap
msgid "emitOn"
msgstr "emitOn"

#. type: delimited block =
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:57
#, fuzzy
msgid "In the previous code, you may wonder about the `emitOn.` It's a Mutiny operator allowing controlling on which thread the Subscriber receives the events.  Back-pressure is often required when multiple threads are involved, as in a single thread approach, blocking the thread would block the source, which may have dramatic consequences."
msgstr "No código anterior, poderá questionar-se sobre o operador `emitOn.` It's a Mutiny que permite controlar em que thread o Subscriber recebe os eventos. A contrapressão é frequentemente necessária quando estão envolvidas várias threads, uma vez que, numa abordagem de thread única, o bloqueio da thread bloquearia a fonte, o que pode ter consequências dramáticas."

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:60
#, fuzzy
msgid "So, what can we do to handle this _overflow_?"
msgstr "Então, o que podemos fazer para lidar com este _excesso_?"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:62
#, fuzzy
msgid "### Buffering items"
msgstr "Itens de buffering"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:65
#, fuzzy
msgid "The first natural solution uses buffers.  The consumer can buffer the events, so it does not fail:"
msgstr "A primeira solução natural utiliza buffers. O consumidor pode armazenar os eventos em buffer, para não falhar:"

#. type: Block title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:66
#, fuzzy, no-wrap
msgid "Buffering to avoid overwhelming downstream consumers"
msgstr "Proteção (buffering) para evitar sobrecarregar os consumidores a jusante"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:67
#, no-wrap
msgid "/assets/images/posts/mutiny-back-pressure/back-pressure-buffer.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:71
#, fuzzy
msgid "Using a buffer allows handling small bumps, but it's not a long term solution.  If we update the code to use a large buffer, the consumer can handle more events but eventually fails:"
msgstr "A utilização de um buffer permite lidar com pequenos choques, mas não é uma solução a longo prazo. Se actualizarmos o código para utilizar um buffer grande, o consumidor pode tratar mais eventos, mas acaba por falhar:"

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:82
#, no-wrap
msgid ""
"Multi.createFrom().ticks().every(Duration.ofMillis(10))\n"
"    .onOverflow().buffer(250)\n"
"    .emitOn(Infrastructure.getDefaultExecutor())\n"
"    .onItem().transform(BufferingExample::canOnlyConsumeOneItemPerSecond)\n"
"    .subscribe().with(\n"
"        item -> System.out.println(\"Got item: \" + item),\n"
"        failure -> System.out.println(\"Got failure: \" + failure)\n"
");\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:90
#, no-wrap
msgid ""
"Got item: 0\n"
"Got item: 1\n"
"Got item: 2\n"
"Got failure: io.smallrye.mutiny.subscription.BackPressureFailure: Buffer is full due to lack of downstream consumption\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:95
#, fuzzy
msgid "You can imagine increasing the buffer's size, but it's hard to anticipate the optimal value.  What about unbounded buffers? In general, that's a terrible idea as you may run out of memory."
msgstr "Pode imaginar aumentar o tamanho do buffer, mas é difícil antecipar o valor ótimo. E quanto aos buffers sem limites? Em geral, é uma péssima ideia, pois pode ficar sem memória."

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:97
#, fuzzy
msgid "### Dropping items"
msgstr "Deixar cair objectos"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:99
#, fuzzy
msgid "Another solution consists of dropping items:"
msgstr "Outra solução consiste em deixar cair objectos:"

#. type: Block title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:100
#, fuzzy, no-wrap
msgid "Dropping items to avoid overwhelming downstream consumers"
msgstr "Deixar cair artigos para evitar sobrecarregar os consumidores a jusante"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:101
#, no-wrap
msgid "/assets/images/posts/mutiny-back-pressure/back-pressure-drop.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:104
#, fuzzy
msgid "You can drop the newest received items or oldest ones:"
msgstr "Pode deixar cair os artigos recebidos mais recentes ou os mais antigos:"

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:116
#, no-wrap
msgid ""
"Multi.createFrom().ticks().every(Duration.ofMillis(10))\n"
"    .onOverflow().drop(x -> System.out.println(\"Dropping item \" + x))\n"
"    .emitOn(Infrastructure.getDefaultExecutor())\n"
"    .onItem().transform(DropExample::canOnlyConsumeOneItemPerSecond)\n"
"    .transform().byTakingFirstItems(10)\n"
"    .subscribe().with(\n"
"        item -> System.out.println(\"Got item: \" + item),\n"
"        failure -> System.out.println(\"Got failure: \" + failure)\n"
");\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:129
#, no-wrap
msgid ""
"// ....\n"
"Dropping item 997\n"
"Dropping item 998\n"
"Dropping item 999\n"
"Dropping item 1000\n"
"Dropping item 1001\n"
"Dropping item 1002\n"
"Dropping item 1003\n"
"Got item: 9\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:134
#, fuzzy
msgid "Dropping items provides a sustainable solution to our problem, but we are losing events! As we can see in the previous output, we may drop the high majority of items.  In many cases, this is not acceptable."
msgstr "A eliminação de itens é uma solução sustentável para o nosso problema, mas estamos a perder eventos! Como podemos ver no resultado anterior, podemos eliminar a grande maioria dos itens. Em muitos casos, isto não é aceitável."

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:137
#, fuzzy
msgid "So, we need another solution, a solution where the overall pace is adjusted to satisfy the pipeline's slowest element.  We need flow control."
msgstr "Por isso, precisamos de outra solução, uma solução em que o ritmo global seja ajustado para satisfazer o elemento mais lento da conduta. Precisamos de controlo do fluxo."

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:139
#, fuzzy
msgid "### What the heck is Back-Pressure?"
msgstr "O que é a contrapressão?"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:144
#, fuzzy
msgid "You may have seen this term many times, and often associated with Reactive.  In mechanics, back-pressure is a way to control the flow of fluid through pipes, leading to a pressure drop.  That control can use reducers or bends.  While very interesting, if you are a plumber, it's not clear how it can help us here?"
msgstr "Já deve ter visto este termo muitas vezes, e frequentemente associado a Reativo. Em mecânica, a contrapressão é uma forma de controlar o fluxo de fluido através de tubos, levando a uma queda de pressão. Esse controlo pode ser feito através de redutores ou curvas. Embora muito interessante, se formos canalizadores, não é claro como nos pode ajudar aqui?"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:147
#, fuzzy
msgid "We can see our streams as a flow of fluid, and the set of stages (operator or subscriber) forms a pipe.  We want to make the fluid flows as frictionless as possible without swirls and waves."
msgstr "Podemos ver os nossos fluxos como um fluxo de fluido, e o conjunto de etapas (operador ou assinante) forma um tubo. Queremos que o fluido flua o menos possível sem fricção, sem redemoinhos e ondas."

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:150
#, fuzzy
msgid "An interesting characteristic of fluid mechanics is how a downstream reduction of the throughput affects the upstream.  Essentially, that's what we need: a way for the downstream operators and subscribers to reduce the throughput, not only locally but also upstream."
msgstr "Uma caraterística interessante da mecânica dos fluidos é a forma como uma redução do débito a jusante afecta a montante. Essencialmente, é disso que precisamos: uma forma de os operadores e assinantes a jusante reduzirem o débito, não só localmente, mas também a montante."

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:156
#, fuzzy
msgid "Don't be mistaken; back-pressure is not something new in the IT world and is not limited to Reactive.  One of the most brilliant usages of back-pressure is in TCP.  A reader, receiving data, can block the writer, on the other side of the wire, if it does not read the sent data.  That way, the reader is never overwhelmed.  But, the consequence need to be understood: blocking the writer may not be without side-effects."
msgstr "Não se engane; a contrapressão não é algo novo no mundo das TI e não se limita ao Reactive. Um dos usos mais brilhantes da contrapressão é no TCP. Um leitor, recebendo dados, pode bloquear o escritor, do outro lado do fio, se não ler os dados enviados. Desta forma, o leitor nunca fica sobrecarregado. Mas, é preciso entender as consequências: bloquear o escritor pode não ser isento de efeitos colaterais."

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:160
#, fuzzy
msgid "There are other back-pressure implementations.  AMQP uses a credit-based flow control, where you can only send if you have enough credit.  Eclipse Vert.x back-pressure is based on pause/resume, where a consumer can pause the upstream until it catches up and resume it once back on track."
msgstr "Existem outras implementações de contra-pressão. O AMQP usa um controlo de fluxo baseado em crédito, em que só se pode enviar se houver crédito suficiente. O Eclipse Vert.x back-pressure é baseado em pause/resume, onde um consumidor pode pausar o upstream até que ele se recupere e retomá-lo uma vez que esteja no caminho certo."

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:162
#, fuzzy
msgid "### Introducing Reactive Streams"
msgstr "Introdução aos fluxos reactivos"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:167
#, fuzzy
msgid "Let's now focus on another back-pressure protocol: https://www.reactive-streams.org/[Reactive Streams].  It defines an asynchronous and back-pressure protocol suiting to our fast producer/slow consumer problem.  With Reactive Streams, the consumer, named `Subscriber`, requests items from the producer, named `Publisher`.  The `Publisher` cannot send more than the requested amount of items:"
msgstr "Vamos agora concentrar-nos noutro protocolo de contrapressão:  link:https://www.reactive-streams.org/[Reactive Streams]. Este define um protocolo assíncrono e de contrapressão adequado ao nosso problema de produtor rápido/consumidor lento. Com os fluxos reactivos, o consumidor, chamado `Subscriber`, solicita itens ao produtor, chamado `Publisher`. O `Publisher` não pode enviar mais do que a quantidade de itens solicitada:"

#. type: Block title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:168
#, fuzzy, no-wrap
msgid "Reactive Streams Back-Pressure (https://impurepics.com/posts/2018-05-26-backpressure-origins.html)"
msgstr "Contrapressão de fluxos reactivos https://impurepics.com/posts/2018-05-26-backpressure-origins.html"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:169
#, no-wrap
msgid "/assets/images/posts/mutiny-back-pressure/back-pressure.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:173
#, fuzzy
msgid "When the items are received and processed, the consumer can request more items, and so on.  Thus, the consumer controls the flow."
msgstr "Quando os itens são recebidos e processados, o consumidor pode solicitar mais itens, e assim por diante. Assim, o consumidor controla o fluxo."

#. type: Block title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:174
#, fuzzy, no-wrap
msgid "Using flow control to avoid overwhelming consumers"
msgstr "Utilizar o controlo do fluxo para evitar sobrecarregar os consumidores"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:175
#, no-wrap
msgid "/assets/images/posts/mutiny-back-pressure/back-pressure-flow-control.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:178
#, fuzzy
msgid "### Reactive Streams entities"
msgstr "Entidades de fluxos reactivos"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:185
#, fuzzy
msgid "To implement that protocol, Reactive Streams define a set of entities.  First, a `Subscriber` is a consumer.  It subscribes to a `Publisher,` producing items.  Then, the `Publisher` sends, asynchronously, a `Subscription` object to the `Subscriber`.  This `Subscription` is a contract.  With this `Subscription,` the `Subscriber` can request items and cancels the subscription when it does not want any more items."
msgstr "Para implementar esse protocolo, os fluxos reactivos definem um conjunto de entidades. Em primeiro lugar, um `Subscriber` é um consumidor. Subscreve um `Publisher,` que produz itens. Depois, o `Publisher` envia, de forma assíncrona, um objeto `Subscription` para o `Subscriber`. Este `Subscription` é um contrato. Com este `Subscription,` o `Subscriber` pode pedir itens e cancela a subscrição quando não quiser mais itens."

#. type: Block title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:186
#, fuzzy, no-wrap
msgid "Example of interactions between a `Subscriber` and a `Publisher`"
msgstr "Exemplo de interacções entre um `Subscriber` e um `Publisher`"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:187
#, no-wrap
msgid "/assets/images/posts/mutiny-back-pressure/back-pressure-sequence.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:190
#, fuzzy
msgid "A `Publisher` cannot send more items than requested to the `Subscriber,` and the `Subscriber` can request more items at any time."
msgstr "Um `Publisher` não pode enviar mais itens do que os solicitados para o `Subscriber,` e o `Subscriber` pode solicitar mais itens em qualquer altura."

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:193
#, fuzzy
msgid "It is essential to understand that the requests and emissions are not necessarily happening synchronously.  A `Subscriber` can request three items, and the Publisher will send one by one when they are available."
msgstr "É essencial compreender que os pedidos e as emissões não estão necessariamente a acontecer de forma síncrona. Um `Subscriber` pode pedir três itens, e o editor enviará um a um quando estiverem disponíveis."

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:197
#, fuzzy
msgid "Reactive Streams introduces another entity named `Processor.` A `Processor` is a `Subscriber` and a `Publisher` simultaneously.  In other words, it's a link in our pipeline:"
msgstr "Os fluxos reactivos introduzem outra entidade denominada `Processor.` Uma `Processor` é simultaneamente uma `Subscriber` e uma `Publisher`. Por outras palavras, é uma ligação no nosso pipeline:"

#. type: Block title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:198
#, fuzzy, no-wrap
msgid "Example of interactions between a `Subscriber,` a `Processor` and a `Publisher`"
msgstr "Exemplo de interacções entre um `Subscriber,` a `Processor` e um `Publisher`"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:199
#, no-wrap
msgid "/assets/images/posts/mutiny-back-pressure/pipeline-with-processor.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:210
#, fuzzy
msgid "A `Subscriber` calls `subscribe` on a `Processor.` Before receiving a `Subscription,` the `Processor` subscribes to its own upstream (the `Publisher` in the picture above).  When that upstream provides a `Subscription` to our Processor, it can give a `Subscription` to the Subscriber.  All these interactions are asynchronous.  When this handshake completes, the `Subscriber` can start requesting items.  The Processor is responsible for mediating the `Subscriber` requests with its upstream.  For example, as illustrated in the picture above, if the `Subscriber` requires two items, the `Processor` also requests two items to its own upstream.  Of course, depending on the `Processor` code, it may not be that simple.  What's fundamental is that each `Publisher` and `Processor` enforces the flowing requests never to overload downstream Subscribers."
msgstr "Um `Subscriber` chama `subscribe` num `Processor.` Antes de receber um `Subscription,`, o `Processor` subscreve o seu próprio upstream (o `Publisher` na imagem acima). Quando esse upstream fornece um `Subscription` ao nosso Processador, este pode fornecer um `Subscription` ao Subscritor. Todas estas interacções são assíncronas. Quando este aperto de mão estiver concluído, o `Subscriber` pode começar a solicitar itens. O Processador é responsável por mediar os pedidos do `Subscriber` com o seu upstream. Por exemplo, como ilustrado na figura acima, se o `Subscriber` requer dois itens, o `Processor` também solicita dois itens ao seu próprio upstream. É claro que, dependendo do código do `Processor`, pode não ser tão simples assim. O que é fundamental é que cada `Publisher` e `Processor` faça com que os pedidos em fluxo nunca sobrecarreguem os Subscribers a jusante."

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:212
#, fuzzy
msgid "### Be warned; it's a trap!"
msgstr "Atenção, é uma armadilha!"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:217
#, fuzzy
msgid "If you look at the http://www.reactive-streams.org/reactive-streams-1.0.3-javadoc/org/reactivestreams/package-summary.html[Reactive Streams API], you will find it straightforward.  Be warned; it's a trap! Behind this apparent simplicity, implementing Reactive Streams entities yourself is a nightmare.  Reactive Streams come with a broad set of rules and a strict TCK."
msgstr "Se olhar para a  link:http://www.reactive-streams.org/reactive-streams-1.0.3-javadoc/org/reactivestreams/package-summary.html[API Reactive Streams], verá que é simples. Esteja avisado; é uma armadilha! Por trás dessa aparente simplicidade, implementar entidades de fluxos reativos por conta própria é um pesadelo. Os fluxos reativos vêm com um amplo conjunto de regras e um TCK rigoroso."

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:221
#, fuzzy
msgid "But, no worries, Mutiny implements the Reactive Streams protocol for you.  In other words, when using `Multi,` you are using a `Publisher` following the Reactive Streams protocol.  All the subscription handshakes and requests negotiations are done for you."
msgstr "Mas, não se preocupe, o Mutiny implementa o protocolo Reactive Streams para si. Por outras palavras, ao utilizar `Multi,` está a utilizar um `Publisher` seguindo o protocolo Reactive Streams. Todos os handshakes de subscrição e negociações de pedidos são feitos por si."

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:223
#, fuzzy
msgid "### Looking under the hood"
msgstr "Olhando sob o capô"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:226
#, fuzzy
msgid "I knew it! You are curious! You can use `onSubscribe().invoke()` and `onRequest().invoke()` to check what's going on:"
msgstr "Eu sabia! Estás curioso! Pode utilizar `onSubscribe().invoke()` e `onRequest().invoke()` para verificar o que se está a passar:"

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:238
#, no-wrap
msgid ""
"Multi.createFrom().range(0, 10)\n"
"    .onSubscribe().invoke(sub -> System.out.println(\"Received subscription: \" + sub))\n"
"    .onRequest().invoke(req -> System.out.println(\"Got a request: \" + req))\n"
"    .transform().byFilteringItemsWith(i -> i % 2 == 0)\n"
"    .onItem().transform(i -> i * 100)\n"
"    .subscribe().with(\n"
"            i -> System.out.println(\"i: \" + i)\n"
");\n"
"---- \n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:240
#, no-wrap
msgid "You can also go a step further and not only observing but also controlling the flow yourself:\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:242
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:265
#, no-wrap
msgid "[source, java, indent=0]\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:260
#, fuzzy, no-wrap
msgid ""
"Multi.createFrom().range(0, 10)\n"
"    .onSubscribe().invoke(sub -> System.out.println(\"Received subscription: \" + sub))\n"
"    .onRequest().invoke(req -> System.out.println(\"Got a request: \" + req))\n"
"    .onItem().transform(i -> i * 100)\n"
"    .subscribe().with(\n"
"            subscription -> {\n"
"                // Got the subscription\n"
"                upstream.set(subscription);\n"
"                subscription.request(1);\n"
"            },\n"
"            i -> {\n"
"                System.out.println(\"i: \" + i);\n"
"                upstream.get().request(1);\n"
"            },\n"
"            f -> System.out.println(\"Failed with \" + f),\n"
"            () -> System.out.println(\"Completed\")\n"
");\n"
msgstr "Multi.createFrom().range(0, 10) .onSubscribe().invoke(sub → System.out.println(\"Recebeu a subscrição: \" + sub)) .onRequest().invoke(req → System.out.println(\"Recebeu um pedido: \" + req)) .onItem().transform(i → i * 100) .subscribe().with( subscription → { // Obteve a subscrição upstream.set(subscription); subscription.request(1); }, i → { System.out.println(\"i: \" + i); upstream.get().request(1); }, f → System.out.println(\"Falhou com \" + f), () → System.out.println(\"Concluído\") );"

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:263
#, no-wrap
msgid "And, if you are a bit insane, you can even implement a `Subscriber` directly:\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:271
#, fuzzy, no-wrap
msgid ""
"Multi.createFrom().range(0, 10)\n"
"    .onSubscribe().invoke(sub -> System.out.println(\"Received subscription: \" + sub))\n"
"    .onRequest().invoke(req -> System.out.println(\"Got a request: \" + req))\n"
"    .onItem().transform(i -> i * 100)\n"
"    .subscribe().withSubscriber(new Subscriber<Integer>() {\n"
msgstr "Multi.createFrom().range(0, 10) .onSubscribe().invoke(sub → System.out.println(\"Recebeu a subscrição: \" + sub)) .onRequest().invoke(req → System.out.println(\"Recebeu um pedido: \" + req)) .onItem().transform(i → i * 100) .subscribe().withSubscriber(new Subscriber&lt;Integer&gt;() {"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:273
#, fuzzy, no-wrap
msgid "        private Subscription subscription;\n"
msgstr "<pre>Assinatura privada Assinatura;</pre>"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:279
#, fuzzy, no-wrap
msgid ""
"        @Override\n"
"        public void onSubscribe(Subscription s) {\n"
"            this.subscription = s;\n"
"            s.request(1);\n"
"        }\n"
msgstr ""
"<pre>@Override\n"
"public void onSubscribe(Subscription s) {\n"
"    this.subscription = s;\n"
"    s.request(1);\n"
"}</pre>"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:285
#, fuzzy, no-wrap
msgid ""
"        @Override\n"
"        public void onNext(Integer item) {\n"
"            System.out.println(\"Got item \" + item);\n"
"            subscription.request(1);\n"
"        }\n"
msgstr ""
"<pre>@Override\n"
"public void onNext(Integer item) {\n"
"    System.out.println(\"Obteve o item \" + item);\n"
"    subscrição.pedido(1);\n"
"}</pre>"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:290
#, fuzzy, no-wrap
msgid ""
"        @Override\n"
"        public void onError(Throwable t) {\n"
"            // ...\n"
"        }\n"
msgstr ""
"<pre>@Override\n"
"public void onError(Throwable t) {\n"
"    // ...\n"
"}</pre>"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:297
#, fuzzy, no-wrap
msgid ""
"        @Override\n"
"        public void onComplete() {\n"
"            // ...\n"
"        }\n"
"    }\n"
");\n"
msgstr ""
"<pre>        @Override\n"
"        public void onComplete() {\n"
"            // ...\n"
"        }\n"
"    }\n"
");</pre>"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:298
#, fuzzy, no-wrap
msgid "\n"
msgstr "\n"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:301
#, fuzzy
msgid "### Summary"
msgstr "Resumo"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:311
#, fuzzy
msgid "This post described the different approaches offered by Mutiny to handle back-pressure.  The Reactive Streams protocol works well when you can control the pace of the upstream.  But it's not always the case.  Streams representing physical entities are rarely controllable.  Imagine a stream emitting user's keystrokes.  You cannot ask the users to slow down.  That would be a terrible user experience.  As we have seen above, time is also not something we can slow down, unfortunately...  In this case, the `onOverflow()` group lets you decide the mitigation, such as using buffers or dropping items."
msgstr "Este post descreveu as diferentes abordagens oferecidas pelo Mutiny para lidar com a contrapressão. O protocolo Reactive Streams funciona bem quando se pode controlar o ritmo do upstream. Mas nem sempre é o caso. Fluxos que representam entidades físicas raramente são controláveis. Imagine um fluxo que emite as teclas digitadas por um utilizador. Não se pode pedir aos utilizadores que abrandem o ritmo. Isso seria uma péssima experiência para o utilizador. Como vimos acima, o tempo também não é algo que possamos abrandar, infelizmente... Neste caso, o grupo `onOverflow()` permite-lhe decidir a atenuação, como a utilização de buffers ou a eliminação de itens."

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:314
#, fuzzy
msgid "It's critical to avoid overwhelming downstream subscribers.  It is the small crack that ripples in your system with dreadful consequences."
msgstr "É fundamental evitar a sobrecarga dos assinantes a jusante. É a pequena fissura que se repercute no seu sistema com consequências terríveis."
