# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy, no-wrap
msgid "Mutiny - Flow control and Back-pressure"
msgstr "Mutiny - Controlo do caudal e contrapressão"

#. type: YAML Front Matter: synopsis
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy, no-wrap
msgid "How does flow control works with Mutiny"
msgstr "Como é que o controlo de fluxo funciona com o Mutiny"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"Reactive Programming offers an elegant, flexible, and powerful way to write asynchronous code.\n"
"It supports failure handling, both sequential and parallel operation composition, and plenty of operators.\n"
"Reactive programming promotes data streams as a primary construct, and your code is observing streams and reacting to signals."
msgstr "A programação reativa oferece uma maneira elegante, flexível e poderosa de escrever código assíncrono. Ela oferece suporte ao tratamento de falhas, composição de operações sequenciais e paralelas e muitos operadores. A programação reativa promove fluxos de dados como uma construção primária, e seu código está observando fluxos e reagindo a sinais."

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "Origins of back-pressure (https://impurepics.com/posts/2018-05-26-backpressure-origins.html)"
msgstr "Origens da contrapressão ( link:https://impurepics.com/posts/2018-05-26-backpressure-origins.html[https://impurepics.com/posts/2018-05-26-backpressure-origins.html)]"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"However, using data streams as primary constructs does not come without some issues.\n"
"One of the main problems is the need for flow control."
msgstr "Entretanto, o uso de fluxos de dados como construções primárias não vem sem alguns problemas. Um dos principais problemas é a necessidade de controle de fluxo."

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "The producer/consumer problem"
msgstr "O problema do produtor/consumidor"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"Let's imagine a fast producer and a slow consumer.\n"
"The producer sends events too quickly for the consumer that can't keep up.\n"
"That phenomenon is remarkably well illustrated in the following picture."
msgstr "Vamos imaginar um produtor rápido e um consumidor lento. O produtor envia eventos muito rapidamente para o consumidor, que não consegue acompanhar o ritmo. Esse fenômeno é muito bem ilustrado na figura a seguir."

#. type: Block title
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy, no-wrap
msgid "No Back-Pressure (https://impurepics.com/posts/2018-05-26-backpressure-origins.html)"
msgstr "Sem contrapressão https://impurepics.com/posts/2018-05-26-backpressure-origins.html"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"Let's see some code.\n"
"Imagine a producer emitting an event every ten milliseconds, while the consumer can only consume one per second."
msgstr "Vamos ver um código. Imagine um produtor emitindo um evento a cada dez milissegundos, enquanto o consumidor só pode consumir um por segundo."

#. type: Plain text
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "If you run that code, you will see that the subscriber gets a `MissingBackPressureFailure,` indicating that the downstream cannot keep up:"
msgstr "Se executar esse código, verá que o assinante recebe um `MissingBackPressureFailure,` indicando que o downstream não consegue acompanhar:"

#. type: Block title
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy, no-wrap
msgid "emitOn"
msgstr "emitOn"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"In the previous code, you may wonder about the `emitOn.`\n"
"It's a Mutiny operator allowing controlling on which thread the Subscriber receives the events.\n"
"Back-pressure is often required when multiple threads are involved, as in a single thread approach, blocking the thread would block the source, which may have dramatic consequences."
msgstr "No código anterior, o senhor pode se perguntar sobre o operador `emitOn.` It's a Mutiny que permite controlar em qual thread o Subscriber recebe os eventos. A contrapressão geralmente é necessária quando vários threads estão envolvidos, pois em uma abordagem de thread único, o bloqueio do thread bloquearia a fonte, o que pode ter consequências dramáticas."

#. type: Plain text
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "So, what can we do to handle this _overflow_?"
msgstr "Então, o que podemos fazer para lidar com este _excesso_?"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "Buffering items"
msgstr "Itens de buffer"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"The first natural solution uses buffers.\n"
"The consumer can buffer the events, so it does not fail:"
msgstr "A primeira solução natural usa buffers. O consumidor pode armazenar os eventos em um buffer, para que não haja falhas:"

#. type: Block title
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy, no-wrap
msgid "Buffering to avoid overwhelming downstream consumers"
msgstr "Proteção (buffering) para evitar sobrecarregar os consumidores a jusante"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"Using a buffer allows handling small bumps, but it's not a long term solution.\n"
"If we update the code to use a large buffer, the consumer can handle more events but eventually fails:"
msgstr "O uso de um buffer permite lidar com pequenos choques, mas não é uma solução de longo prazo. Se atualizarmos o código para usar um buffer grande, o consumidor poderá lidar com mais eventos, mas acabará falhando:"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"You can imagine increasing the buffer's size, but it's hard to anticipate the optimal value.\n"
"What about unbounded buffers?\n"
"In general, that's a terrible idea as you may run out of memory."
msgstr "O senhor pode imaginar aumentar o tamanho do buffer, mas é difícil prever o valor ideal. E quanto aos buffers ilimitados? Em geral, essa é uma péssima ideia, pois o senhor pode ficar sem memória."

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "Dropping items"
msgstr "Derrubar itens"

#. type: Plain text
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "Another solution consists of dropping items:"
msgstr "Outra solução consiste em deixar cair objectos:"

#. type: Block title
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy, no-wrap
msgid "Dropping items to avoid overwhelming downstream consumers"
msgstr "Deixar cair artigos para evitar sobrecarregar os consumidores a jusante"

#. type: Plain text
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "You can drop the newest received items or oldest ones:"
msgstr "Pode deixar cair os artigos recebidos mais recentes ou os mais antigos:"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"Dropping items provides a sustainable solution to our problem, but we are losing events!\n"
"As we can see in the previous output, we may drop the high majority of items.\n"
"In many cases, this is not acceptable."
msgstr "A eliminação de itens oferece uma solução sustentável para o nosso problema, mas estamos perdendo eventos! Como podemos ver no resultado anterior, podemos descartar a grande maioria dos itens. Em muitos casos, isso não é aceitável."

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"So, we need another solution, a solution where the overall pace is adjusted to satisfy the pipeline's slowest element.\n"
"We need flow control."
msgstr "Portanto, precisamos de outra solução, uma solução em que o ritmo geral seja ajustado para satisfazer o elemento mais lento do pipeline. Precisamos de controle de fluxo."

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "What the heck is Back-Pressure?"
msgstr "O que diabos é pressão traseira?"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"You may have seen this term many times, and often associated with Reactive.\n"
"In mechanics, back-pressure is a way to control the flow of fluid through pipes, leading to a pressure drop.\n"
"That control can use reducers or bends.\n"
"While very interesting, if you are a plumber, it's not clear how it can help us here?"
msgstr "O senhor já deve ter visto esse termo muitas vezes, geralmente associado ao Reactive. Em mecânica, a contrapressão é uma forma de controlar o fluxo de fluido através de tubos, levando a uma queda de pressão. Esse controle pode usar redutores ou curvas. Embora muito interessante, se o senhor for um encanador, não está claro como isso pode nos ajudar aqui?"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"We can see our streams as a flow of fluid, and the set of stages (operator or subscriber) forms a pipe.\n"
"We want to make the fluid flows as frictionless as possible without swirls and waves."
msgstr "Podemos ver nossos fluxos como um fluxo de fluido, e o conjunto de estágios (operador ou assinante) forma um tubo. Queremos que o fluido flua o mais livre de atrito possível, sem redemoinhos e ondas."

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"An interesting characteristic of fluid mechanics is how a downstream reduction of the throughput affects the upstream.\n"
"Essentially, that's what we need: a way for the downstream operators and subscribers to reduce the throughput, not only locally but also upstream."
msgstr "Uma característica interessante da mecânica dos fluidos é como uma redução da taxa de transferência no sentido downstream afeta o upstream. Essencialmente, é disso que precisamos: uma maneira de as operadoras e assinantes downstream reduzirem a taxa de transferência, não apenas localmente, mas também upstream."

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"Don't be mistaken; back-pressure is not something new in the IT world and is not limited to Reactive.\n"
"One of the most brilliant usages of back-pressure is in TCP.\n"
"A reader, receiving data, can block the writer, on the other side of the wire, if it does not read the sent data.\n"
"That way, the reader is never overwhelmed.\n"
"But, the consequence need to be understood: blocking the writer may not be without side-effects."
msgstr "Não se engane; a contrapressão não é algo novo no mundo da TI e não se limita ao Reactive. Um dos usos mais brilhantes da contrapressão está no TCP. Um leitor, ao receber dados, pode bloquear o escritor, do outro lado do fio, se não ler os dados enviados. Dessa forma, o leitor nunca fica sobrecarregado. Mas é preciso entender as consequências: bloquear o escritor pode não ser isento de efeitos colaterais."

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"There are other back-pressure implementations.\n"
"AMQP uses a credit-based flow control, where you can only send if you have enough credit.\n"
"Eclipse Vert.x back-pressure is based on pause/resume, where a consumer can pause the upstream until it catches up and resume it once back on track."
msgstr "Há outras implementações de contrapressão. O AMQP usa um controle de fluxo baseado em crédito, em que o usuário só pode enviar se tiver crédito suficiente. A contrapressão do Eclipse Vert.x é baseada em pausa/retomada, em que um consumidor pode pausar o upstream até que ele se recupere e retomá-lo quando estiver de volta ao caminho certo."

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "Introducing Reactive Streams"
msgstr "Apresentando os fluxos reativos"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"Let's now focus on another back-pressure protocol: https://www.reactive-streams.org/[Reactive Streams].\n"
"It defines an asynchronous and back-pressure protocol suiting to our fast producer/slow consumer problem.\n"
"With Reactive Streams, the consumer, named `Subscriber`, requests items from the producer, named `Publisher`.\n"
"The `Publisher` cannot send more than the requested amount of items:"
msgstr "Vamos nos concentrar agora em outro protocolo de contrapressão: link:https://www.reactive-streams.org/[Reactive Streams] . Ele define um protocolo assíncrono e de contrapressão adequado ao nosso problema de produtor rápido/consumidor lento. Com o Reactive Streams, o consumidor, chamado `Subscriber` , solicita itens do produtor, chamado `Publisher` . O `Publisher` não pode enviar mais do que a quantidade de itens solicitada:"

#. type: Block title
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy, no-wrap
msgid "Reactive Streams Back-Pressure (https://impurepics.com/posts/2018-05-26-backpressure-origins.html)"
msgstr "Contrapressão de fluxos reactivos https://impurepics.com/posts/2018-05-26-backpressure-origins.html"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"When the items are received and processed, the consumer can request more items, and so on.\n"
"Thus, the consumer controls the flow."
msgstr "Quando os itens são recebidos e processados, o consumidor pode solicitar mais itens, e assim por diante. Assim, o consumidor controla o fluxo."

#. type: Block title
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy, no-wrap
msgid "Using flow control to avoid overwhelming consumers"
msgstr "Utilizar o controlo do fluxo para evitar sobrecarregar os consumidores"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "Reactive Streams entities"
msgstr "Entidades de fluxos reativos"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"To implement that protocol, Reactive Streams define a set of entities.\n"
"First, a `Subscriber` is a consumer.\n"
"It subscribes to a `Publisher,` producing items.\n"
"Then, the `Publisher` sends, asynchronously, a `Subscription` object to the `Subscriber`.\n"
"This `Subscription` is a contract.\n"
"With this `Subscription,` the `Subscriber` can request items and cancels the subscription when it does not want any more items."
msgstr "Para implementar esse protocolo, os fluxos reativos definem um conjunto de entidades. Primeiro, um `Subscriber` é um consumidor. Ele se inscreve em um `Publisher,` que produz itens. Em seguida, o `Publisher` envia, de forma assíncrona, um objeto `Subscription` para o `Subscriber` . Esse `Subscription` é um contrato. Com esse `Subscription,` , o `Subscriber` pode solicitar itens e cancelar a assinatura quando não quiser mais itens."

#. type: Block title
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy, no-wrap
msgid "Example of interactions between a `Subscriber` and a `Publisher`"
msgstr "Exemplo de interacções entre um `Subscriber` e um `Publisher`"

#. type: Plain text
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "A `Publisher` cannot send more items than requested to the `Subscriber,` and the `Subscriber` can request more items at any time."
msgstr "Um `Publisher` não pode enviar mais itens do que os solicitados para o `Subscriber,` e o `Subscriber` pode solicitar mais itens em qualquer altura."

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"It is essential to understand that the requests and emissions are not necessarily happening synchronously.\n"
"A `Subscriber` can request three items, and the Publisher will send one by one when they are available."
msgstr "É essencial entender que as solicitações e emissões não estão necessariamente ocorrendo de forma síncrona. Um `Subscriber` pode solicitar três itens, e o Publisher enviará um a um quando estiverem disponíveis."

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"Reactive Streams introduces another entity named `Processor.`\n"
"A `Processor` is a `Subscriber` and a `Publisher` simultaneously.\n"
"In other words, it's a link in our pipeline:"
msgstr "O Reactive Streams apresenta outra entidade chamada `Processor.` . Um `Processor` é um `Subscriber` e um `Publisher` simultaneamente. Em outras palavras, é um link em nosso pipeline:"

#. type: Block title
#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy, no-wrap
msgid "Example of interactions between a `Subscriber,` a `Processor` and a `Publisher`"
msgstr "Exemplo de interacções entre um `Subscriber,` a `Processor` e um `Publisher`"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"A `Subscriber` calls `subscribe` on a `Processor.`\n"
"Before receiving a `Subscription,` the `Processor` subscribes to its own upstream (the `Publisher` in the picture above).\n"
"When that upstream provides a `Subscription` to our Processor, it can give a `Subscription` to the Subscriber.\n"
"All these interactions are asynchronous.\n"
"When this handshake completes, the `Subscriber` can start requesting items.\n"
"The Processor is responsible for mediating the `Subscriber` requests with its upstream.\n"
"For example, as illustrated in the picture above, if the `Subscriber` requires two items, the `Processor` also requests two items to its own upstream.\n"
"Of course, depending on the `Processor` code, it may not be that simple.\n"
"What's fundamental is that each `Publisher` and `Processor` enforces the flowing requests never to overload downstream Subscribers."
msgstr "Um `Subscriber` chama `subscribe` em um `Processor.` . Antes de receber um `Subscription,` , o `Processor` se inscreve em seu próprio upstream (o `Publisher` na imagem acima). Quando esse upstream fornece um `Subscription` ao nosso Processador, ele pode fornecer um `Subscription` ao Assinante. Todas essas interações são assíncronas. Quando esse handshake é concluído, o `Subscriber` pode começar a solicitar itens. O processador é responsável por mediar as solicitações do `Subscriber` com seu upstream. Por exemplo, conforme ilustrado na figura acima, se o `Subscriber` solicitar dois itens, o `Processor` também solicitará dois itens ao seu próprio upstream. É claro que, dependendo do código do `Processor` , pode não ser tão simples assim. O fundamental é que cada `Publisher` e `Processor` imponha o fluxo de solicitações para nunca sobrecarregar os Subscribers downstream."

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "Be warned; it's a trap!"
msgstr "O senhor deve estar ciente de que é uma armadilha!"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"If you look at the http://www.reactive-streams.org/reactive-streams-1.0.3-javadoc/org/reactivestreams/package-summary.html[Reactive Streams API], you will find it straightforward.\n"
"Be warned; it's a trap!\n"
"Behind this apparent simplicity, implementing Reactive Streams entities yourself is a nightmare.\n"
"Reactive Streams come with a broad set of rules and a strict TCK."
msgstr "Se o senhor observar a link:http://www.reactive-streams.org/reactive-streams-1.0.3-javadoc/org/reactivestreams/package-summary.html[API Reactive Streams] , verá que ela é simples. Fique atento, pois é uma armadilha! Por trás dessa aparente simplicidade, a implementação de entidades de fluxos reativos pelo senhor é um pesadelo. Os fluxos reativos vêm com um amplo conjunto de regras e um TCK rigoroso."

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"But, no worries, Mutiny implements the Reactive Streams protocol for you.\n"
"In other words, when using `Multi,` you are using a `Publisher` following the Reactive Streams protocol.\n"
"All the subscription handshakes and requests negotiations are done for you."
msgstr "Mas não se preocupe, pois o Mutiny implementa o protocolo Reactive Streams para o senhor. Em outras palavras, ao usar o `Multi,` , o senhor está usando um `Publisher` seguindo o protocolo Reactive Streams. Todos os handshakes de assinatura e negociações de solicitações são feitos para o senhor."

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "Looking under the hood"
msgstr "Olhando sob o capô"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"I knew it! You are curious!\n"
"You can use `onSubscribe().invoke()` and `onRequest().invoke()` to check what's going on:"
msgstr "Eu sabia! O senhor está curioso! O senhor pode usar `onSubscribe().invoke()` e `onRequest().invoke()` para verificar o que está acontecendo:"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "You can also go a step further and not only observing but also controlling the flow yourself:"
msgstr "O senhor também pode dar um passo adiante e não apenas observar, mas também controlar o fluxo:"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "And, if you are a bit insane, you can even implement a `Subscriber` directly:"
msgstr "E, se o senhor for um pouco louco, pode até mesmo implementar um `Subscriber` diretamente:"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid "Summary"
msgstr "Resumo"

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"This post described the different approaches offered by Mutiny to handle back-pressure.\n"
"The Reactive Streams protocol works well when you can control the pace of the upstream.\n"
"But it's not always the case.\n"
"Streams representing physical entities are rarely controllable.\n"
"Imagine a stream emitting user's keystrokes.\n"
"You cannot ask the users to slow down.\n"
"That would be a terrible user experience.\n"
"As we have seen above, time is also not something we can slow down, unfortunately...\n"
"In this case, the `onOverflow()` group lets you decide the mitigation, such as using buffers or dropping items."
msgstr "Esta publicação descreveu as diferentes abordagens oferecidas pelo Mutiny para lidar com a contrapressão. O protocolo Reactive Streams funciona bem quando o senhor pode controlar o ritmo do upstream. Mas nem sempre é esse o caso. Os fluxos que representam entidades físicas raramente são controláveis. Imagine um fluxo que emite as teclas digitadas pelo usuário. O senhor não pode pedir aos usuários que diminuam a velocidade. Isso seria uma péssima experiência para o usuário. Como vimos acima, o tempo também não é algo que possamos desacelerar, infelizmente... Nesse caso, o grupo `onOverflow()` permite que o senhor decida a atenuação, como usar buffers ou descartar itens."

#: _posts/2020-10-27-mutiny-back-pressure.adoc
#, fuzzy
msgid ""
"It's critical to avoid overwhelming downstream subscribers.\n"
"It is the small crack that ripples in your system with dreadful consequences."
msgstr "É fundamental evitar a sobrecarga dos assinantes downstream. É a pequena rachadura que se espalha em seu sistema com consequências terríveis."
