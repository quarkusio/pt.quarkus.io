# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy, no-wrap
msgid "Combining Apache Kafka and the Rest client"
msgstr "Combinar o Apache Kafka e o cliente Rest"

#. type: YAML Front Matter: synopsis
#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy, no-wrap
msgid "How to combine reactive messaging, Kafka and the Rest client"
msgstr "Como combinar o envio reativo de mensagens, o Kafka e o cliente Rest"

#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy
msgid ""
"Another week, another interesting question.\n"
"This week, someone asks me about combining Kafka and the Rest Client.\n"
"That is a recurring subject, and most of the time, the goal is to achieve the following process:"
msgstr "Mais uma semana, mais uma pergunta interessante. Esta semana, alguém me pergunta sobre como combinar o Kafka e o Rest Client. Esse é um assunto recorrente e, na maioria das vezes, o objetivo é alcançar o seguinte processo:"

#. type: Plain text
#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy
msgid "image:/assets/images/posts/kafka-rest-client/kafka-rest-architecture.png[]"
msgstr "image:/assets/images/posts/kafka-rest-client/kafka-rest-architecture.png[alt=kafka rest architecture]"

#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy
msgid ""
"In other words, we want to call a remote service for each Kafka message we receive.\n"
"Therefore, we have a first topic (\"in\") containing the data we are consuming, for instance, \"transactions\".\n"
"Then, we have the central piece of the architecture: the processing component.\n"
"It consumes the incoming transactions, and for each of them, calls a remote service.\n"
"It also writes the response (produced by the remote service) to another Kafka topic \"out\"."
msgstr "Em outras palavras, queremos chamar um serviço remoto para cada mensagem do Kafka que recebermos. Portanto, temos um primeiro tópico (\"in\") que contém os dados que estamos consumindo, por exemplo, \"transações\". Em seguida, temos a peça central da arquitetura: o componente de processamento. Ele consome as transações de entrada e, para cada uma delas, chama um serviço remoto. Ele também grava a resposta (produzida pelo serviço remoto) em outro tópico \"out\" do Kafka."

#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy
msgid ""
"Implementing this with Quarkus is straightforward, and that's what we will cover in this post.\n"
"Thanks to Reactive Messaging and the Rest Client, this should not take more than 20 lines of code!"
msgstr "Implementar isso com o Quarkus é simples, e é isso que abordaremos neste post. Graças ao Reactive Messaging e ao Rest Client, isso não deve exigir mais de 20 linhas de código!"

#. type: Title ==
#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy, no-wrap
msgid "The Remote Service"
msgstr "O serviço remoto"

#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy
msgid ""
"Let's start with the remote service.\n"
"Quarkus offers multiple ways to invoke a remote HTTP service, but let's use the Rest Client as it provides an excellent way to interact with HTTP services without having to handle the low-level details of HTTP."
msgstr "Vamos começar com o serviço remoto. O Quarkus oferece várias maneiras de invocar um serviço HTTP remoto, mas vamos usar o Rest Client, pois ele oferece uma excelente maneira de interagir com serviços HTTP sem precisar lidar com os detalhes de baixo nível do HTTP."

#. type: Plain text
#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy
msgid "You can use any HTTP API, but to simplify, let's consider a straightforward remote service, something like:"
msgstr "Pode utilizar qualquer API HTTP, mas para simplificar, vamos considerar um serviço remoto simples, algo como:"

#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy
msgid ""
"This service contains two methods calling the same HTTP endpoint.\n"
"The first one is synchronous, and so blocks the caller thread until the response is received.\n"
"The second is asynchronous, and the returned `Uni` gets the response when received.\n"
"In this case, the caller thread is not blocked and can do something else.\n"
"We are going to see how to use these methods later, but first, a bit of configuration.\n"
"In the `application.properties` add:"
msgstr "Esse serviço contém dois métodos que chamam o mesmo endpoint HTTP. O primeiro é síncrono e, portanto, bloqueia o thread do chamador até que a resposta seja recebida. O segundo é assíncrono, e o `Uni` retornado obtém a resposta quando a recebe. Nesse caso, o thread do chamador não é bloqueado e pode fazer outra coisa. Veremos como usar esses métodos mais tarde, mas, primeiro, um pouco de configuração. Em `application.properties` , adicione:"

#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy
msgid ""
"Of course, update the URL.\n"
"The https://quarkus.io/guides/rest-client[https://quarkus.io/guides/rest-client] guide gives more details about the usage and configuration of the Rest Client."
msgstr "Obviamente, atualize o URL. O guia https://quarkus.io/guides/rest-client fornece mais detalhes sobre o uso e a configuração do Rest Client."

#. type: Title ==
#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy, no-wrap
msgid "Invoking the service for each incoming transaction"
msgstr "Invocação do serviço para cada transação de entrada"

#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy
msgid ""
"Ok, we can call our service, but remember, we want to invoke it for every incoming transaction, and these transactions come from a Kafka topic.\n"
"With Reactive Messaging, there is no need to handle Kafka right now.\n"
"We can focus on the logic.\n"
"Let's say we have a *channel* (a stream of data), in which to transit our transactions.\n"
"We call this first channel `in`."
msgstr "Ok, podemos chamar nosso serviço, mas lembre-se de que queremos invocá-lo para cada transação de entrada, e essas transações vêm de um tópico do Kafka. Com o Reactive Messaging, não há necessidade de lidar com o Kafka neste momento. Podemos nos concentrar na lógica. Digamos que tenhamos um *canal* (um fluxo de dados) no qual transitaremos nossas transações. Chamamos esse primeiro canal de `in` ."

#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy
msgid ""
"We also want to write the responses from the remote service into another Kafka topic.\n"
"Again, no need to handle Kafka right now.\n"
"Let's say we write the responses into a channel named `out`."
msgstr "Também queremos gravar as respostas do serviço remoto em outro tópico do Kafka. Novamente, não há necessidade de lidar com o Kafka neste momento. Digamos que gravemos as respostas em um canal chamado `out` ."

#. type: Plain text
#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy
msgid "So, we have the following (incomplete) code:"
msgstr "Assim, temos o seguinte código (incompleto):"

#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy
msgid ""
"`@Incoming` configures the read channel.\n"
"`@Outgoing` configures the written channel.\n"
"But, something is missing... we need to call our remote service:"
msgstr "`@Incoming` configura o canal de leitura. `@Outgoing` configura o canal de gravação. Mas está faltando algo... precisamos chamar nosso serviço remoto:"

#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy
msgid ""
"First, we inject the Rest Client.\n"
"Then, we just invoke it in our method."
msgstr "Primeiro, injetamos o Rest Client. Depois, basta invocá-lo em nosso método."

#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy
msgid ""
"You may wonder about `@Blocking`.\n"
"With reactive messaging, you need to indicate when you are using blocking code, as by default, it uses an event loop architecture.\n"
"While convenient, you should not abuse `@Blocking`, as it relies on a thread pool limiting your concurrency.\n"
"But, it keeps your logic synchronous."
msgstr "O senhor pode se perguntar sobre `@Blocking` . Com as mensagens reativas, o senhor precisa indicar quando está usando código de bloqueio, pois, por padrão, ele usa uma arquitetura de loop de eventos. Embora conveniente, o senhor não deve abusar do `@Blocking` , pois ele depende de um pool de threads que limita a concorrência. Porém, ela mantém a lógica síncrona."

#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy
msgid "Using Asynchronous operations"
msgstr "Uso de operações assíncronas"

#. type: Plain text
#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy
msgid "We can get rid of `@Blocking` annotation by using the second method provided by the `TransactionService`: `postAsync:`"
msgstr "Podemos livrar-nos da anotação `@Blocking` utilizando o segundo método fornecido pelo `TransactionService`: `postAsync:`"

#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy
msgid ""
"Using the *async* variant of the `post` method allows us to remove `@Blocking`.\n"
"We return the `Uni` directly.\n"
"When that `Uni` receives the remote service's response, it writes the value to the `out` channel."
msgstr "O uso da variante *assíncrona* do método `post` nos permite remover o `@Blocking` . Retornamos o `Uni` diretamente. Quando esse `Uni` recebe a resposta do serviço remoto, ele grava o valor no canal `out` ."

#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy
msgid "Mapping channel to Kafka"
msgstr "Mapeamento do canal para o Kafka"

#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy
msgid ""
"So far, so good.\n"
"It's time to connect our code with Kafka.\n"
"With Reactive Messaging, we map channels to _connectors_, here Kafka.\n"
"So, we just need to configure the application to indicate that the `in` and `out` channels are Kafka topics.\n"
"Once again, edit the `application.properties` file, and add:"
msgstr "Até agora, tudo bem. É hora de conectar nosso código ao Kafka. Com o Reactive Messaging, mapeamos canais para _conectores_ , aqui o Kafka. Portanto, só precisamos configurar o aplicativo para indicar que os canais `in` e `out` são tópicos do Kafka. Mais uma vez, edite o arquivo `application.properties` e adicione:"

#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy
msgid ""
"The first block is about the `in` channel.\n"
"It's connected to the `transactions` Kafka topic.\n"
"The data is deserialized with a https://github.com/cescoffier/quarkus-kafka-rest-client-demo/blob/master/src/main/java/org/acme/model/TransactionDeserializer.java[custom deserializer].\n"
"The last other properties disable the auto-commit (Reactive Messaging is handling commits for you) and read the data since the last committed offset."
msgstr "O primeiro bloco é sobre o canal `in` . Ele está conectado ao tópico `transactions` do Kafka. Os dados são link:https://github.com/cescoffier/quarkus-kafka-rest-client-demo/blob/master/src/main/java/org/acme/model/TransactionDeserializer.java[desserializados] com um link:https://github.com/cescoffier/quarkus-kafka-rest-client-demo/blob/master/src/main/java/org/acme/model/TransactionDeserializer.java[desserializador personalizado] . As outras últimas propriedades desativam o auto-commit (o Reactive Messaging está lidando com os commits para o senhor) e leem os dados desde o último offset confirmado."

#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy
msgid ""
"The second block configures the `out` channel.\n"
"We connect it with the `output` Kafka topic and configure the value serializer.\n"
"For this simple example, we write the data as JSON."
msgstr "O segundo bloco configura o canal `out` . Nós o conectamos com o tópico `output` do Kafka e configuramos o serializador de valores. Para este exemplo simples, gravamos os dados como JSON."

#. type: Plain text
#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy
msgid "So, when a transaction is written to the Kafka `transaction` topic, it gets received by our processing component, sent to the remote service, and the result is written to the `output` Kafka topic:"
msgstr "Assim, quando uma transação é escrita no tópico do Kafka `transaction`, é recebida pelo nosso componente de processamento, enviada para o serviço remoto e o resultado é escrito no tópico do Kafka `output`:"

#. type: Plain text
#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy
msgid "If you look inside the `output` topic, you will see the `TransactionResult` flowing:"
msgstr "Se olhar para o tópico `output`, verá o `TransactionResult` a fluir:"

#. type: Plain text
#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy
msgid "image:/assets/images/posts/kafka-rest-client/output.png[]"
msgstr "image:/assets/images/posts/kafka-rest-client/output.png[alt=output]"

#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy
msgid "We are done!"
msgstr "Estamos prontos!"

#. type: Plain text
#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy
msgid "With a few lines of code and a bit of configuration, we can read data from a Kafka topic, call a remote service, and write the result to another Kafka topic. Plain simple."
msgstr "Com algumas linhas de código e um pouco de configuração, podemos ler dados de um tópico do Kafka, chamar um serviço remoto e escrever o resultado noutro tópico do Kafka. Simples assim."

#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy
msgid ""
"Want to try by yourself?\n"
"Check out the code in this https://github.com/cescoffier/quarkus-kafka-rest-client-demo[GitHub repository] and follow the instructions from the readme."
msgstr "Deseja experimentar por si mesmo? Confira o código neste link:https://github.com/cescoffier/quarkus-kafka-rest-client-demo[repositório do GitHub] e siga as instruções do readme."

#. type: Plain text
#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy
msgid "Reactive Messaging and the Rest client contain other gems, check the related guides and documentation to learn more about them:"
msgstr "O serviço de mensagens reactivas e o cliente Rest contêm outras jóias, consulte os guias e a documentação relacionados para saber mais sobre eles:"

#. type: Plain text
#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy
msgid "https://quarkus.io/guides/rest-client[Using the Rest Client]"
msgstr "link:https://quarkus.io/guides/rest-client[Utilizar o cliente Rest]"

#. type: Plain text
#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy
msgid "https://quarkus.io/guides/kafka[Interacting with Kafka]"
msgstr "link:https://quarkus.io/guides/kafka[Interagir com o Kafka]"

#. type: Plain text
#: _posts/2020-09-08-kafka-rest-client.adoc
#, fuzzy
msgid "https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2.2/kafka/kafka.html[The Kafka Connector documentation]"
msgstr "link:https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2.2/kafka/kafka.html[A documentação do Conector Kafka]"
