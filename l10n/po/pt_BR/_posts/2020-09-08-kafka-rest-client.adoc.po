# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:1
#, fuzzy, no-wrap
msgid "cescoffier"
msgstr "cescoffier"

#. type: YAML Front Matter: date
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:1
#, fuzzy, no-wrap
msgid "2020-09-08"
msgstr "2020-09-08"

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "posto"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:1
#, fuzzy, no-wrap
msgid "How to combine reactive messaging, Kafka and the Rest client"
msgstr "Como combinar o envio reativo de mensagens, o Kafka e o cliente Rest"

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:1
#, fuzzy, no-wrap
msgid "reactive kafka rest mutiny http"
msgstr "reativo kafka rest mutiny http"

#. type: YAML Front Matter: title
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:1
#, fuzzy, no-wrap
msgid "Combining Apache Kafka and the Rest client"
msgstr "Combinar o Apache Kafka e o cliente Rest"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:13
#, fuzzy
msgid "Another week, another interesting question.  This week, someone asks me about combining Kafka and the Rest Client.  That is a recurring subject, and most of the time, the goal is to achieve the following process:"
msgstr "Mais uma semana, mais uma pergunta interessante. Esta semana, alguém me pergunta sobre como combinar o Kafka e o Rest Client. Esse é um assunto recorrente e, na maioria das vezes, o objetivo é conseguir o seguinte processo:"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:15
#, fuzzy
msgid "image:/assets/images/posts/kafka-rest-client/kafka-rest-architecture.png[]"
msgstr "image:/assets/images/posts/kafka-rest-client/kafka-rest-architecture.png[alt=kafka rest architecture]"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:21
#, fuzzy
msgid "In other words, we want to call a remote service for each Kafka message we receive.  Therefore, we have a first topic (\"in\") containing the data we are consuming, for instance, \"transactions\".  Then, we have the central piece of the architecture: the processing component.  It consumes the incoming transactions, and for each of them, calls a remote service.  It also writes the response (produced by the remote service) to another Kafka topic \"out\"."
msgstr "Por outras palavras, queremos chamar um serviço remoto para cada mensagem Kafka que recebemos. Por conseguinte, temos um primeiro tópico (\"in\") que contém os dados que estamos a consumir, por exemplo, \"transacções\". Depois, temos a peça central da arquitetura: o componente de processamento. Este consome as transacções que chegam e, para cada uma delas, chama um serviço remoto. Também escreve a resposta (produzida pelo serviço remoto) noutro tópico Kafka \"out\"."

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:24
#, fuzzy
msgid "Implementing this with Quarkus is straightforward, and that's what we will cover in this post.  Thanks to Reactive Messaging and the Rest Client, this should not take more than 20 lines of code!"
msgstr "Implementar isso com o Quarkus é simples, e é isso que vamos abordar neste post. Graças ao Reactive Messaging e ao Rest Client, isto não deve demorar mais de 20 linhas de código!"

#. type: Title ==
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:25
#, fuzzy, no-wrap
msgid "The Remote Service"
msgstr "O serviço remoto"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:29
#, fuzzy
msgid "Let's start with the remote service.  Quarkus offers multiple ways to invoke a remote HTTP service, but let's use the Rest Client as it provides an excellent way to interact with HTTP services without having to handle the low-level details of HTTP."
msgstr "Vamos começar com o serviço remoto. O Quarkus oferece várias formas de invocar um serviço HTTP remoto, mas vamos utilizar o Cliente Rest, uma vez que este oferece uma excelente forma de interagir com serviços HTTP sem ter de lidar com os pormenores de baixo nível do HTTP."

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:31
#, fuzzy
msgid "You can use any HTTP API, but to simplify, let's consider a straightforward remote service, something like:"
msgstr "Pode utilizar qualquer API HTTP, mas para simplificar, vamos considerar um serviço remoto simples, algo como:"

#. type: delimited block -
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:38
#, no-wrap
msgid ""
"@RegisterRestClient(configKey = \"transaction-service\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"public interface TransactionService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:42
#, no-wrap
msgid ""
"    @Path(\"/transactions\")\n"
"    @POST \n"
"    TransactionResult postSync(Transaction transaction);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:46
#, no-wrap
msgid ""
"    @Path(\"/transactions\")\n"
"    @POST \n"
"    Uni<TransactionResult> postAsync(Transaction transaction);\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:48
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:92
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:116
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:147
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:56
#, fuzzy
msgid "This service contains two methods calling the same HTTP endpoint.  The first one is synchronous, and so blocks the caller thread until the response is received.  The second is asynchronous, and the returned `Uni` gets the response when received.  In this case, the caller thread is not blocked and can do something else.  We are going to see how to use these methods later, but first, a bit of configuration.  In the `application.properties` add:"
msgstr "Este serviço contém dois métodos que chamam o mesmo ponto de extremidade HTTP. O primeiro é síncrono, pelo que bloqueia a thread do chamador até que a resposta seja recebida. O segundo é assíncrono, e o `Uni` devolvido obtém a resposta quando a recebe. Neste caso, a thread que chama não é bloqueada e pode fazer outra coisa. Veremos como usar esses métodos mais tarde, mas primeiro, um pouco de configuração. No `application.properties`, adicione:"

#. type: delimited block -
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:61
#, no-wrap
msgid ""
"# Configure the transaction-service (rest client)\n"
"transaction-service/mp-rest/url=http://localhost:8080\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:65
#, fuzzy
msgid "Of course, update the URL.  The https://quarkus.io/guides/rest-client[https://quarkus.io/guides/rest-client] guide gives more details about the usage and configuration of the Rest Client."
msgstr "Naturalmente, actualize o URL. O guia  link:https://quarkus.io/guides/rest-client[https://quarkus.io/guides/rest-client] fornece mais pormenores sobre a utilização e a configuração do cliente Rest."

#. type: Title ==
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:66
#, fuzzy, no-wrap
msgid "Invoking the service for each incoming transaction"
msgstr "Invocação do serviço para cada transação de entrada"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:73
#, fuzzy
msgid "Ok, we can call our service, but remember, we want to invoke it for every incoming transaction, and these transactions come from a Kafka topic.  With Reactive Messaging, there is no need to handle Kafka right now.  We can focus on the logic.  Let's say we have a *channel* (a stream of data), in which to transit our transactions.  We call this first channel `in`."
msgstr "Ok, podemos chamar nosso serviço, mas lembre-se, queremos invocá-lo para cada transação de entrada, e essas transações vêm de um tópico do Kafka. Com o Reactive Messaging, não há necessidade de lidar com o Kafka neste momento. Podemos nos concentrar na lógica. Digamos que temos um *canal* (um fluxo de dados), no qual transitamos nossas transações. Chamamos esse primeiro canal de `in`."

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:77
#, fuzzy
msgid "We also want to write the responses from the remote service into another Kafka topic.  Again, no need to handle Kafka right now.  Let's say we write the responses into a channel named `out`."
msgstr "Também queremos escrever as respostas do serviço remoto em outro tópico do Kafka. Novamente, não há necessidade de lidar com o Kafka agora. Digamos que escrevemos as respostas em um canal chamado `out`."

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:79
#, fuzzy
msgid "So, we have the following (incomplete) code:"
msgstr "Assim, temos o seguinte código (incompleto):"

#. type: delimited block -
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:84
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:102
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:134
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class TransactionProcessor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:90
#, no-wrap
msgid ""
"    @Incoming(\"in\") // The first channel - we read from it\n"
"    @Outgoing(\"out\") // The second channel - we write to it\n"
"    public TransactionResult sendToTransactionService(Transaction transaction) {\n"
"       // Need to call our service here\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:97
#, fuzzy
msgid "`@Incoming` configures the read channel.  `@Outgoing` configures the written channel.  But, something is missing... we need to call our remote service:"
msgstr "`@Incoming` configura o canal de leitura. `@Outgoing` configura o canal de escrita. Mas falta algo... precisamos de chamar o nosso serviço remoto:"

#. type: delimited block -
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:104
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:136
#, no-wrap
msgid "    private static final Logger LOGGER = Logger.getLogger(\"TransactionProcessor\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:106
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:138
#, no-wrap
msgid "    @Inject @RestClient TransactionService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:114
#, no-wrap
msgid ""
"    @Incoming(\"in\")\n"
"    @Outgoing(\"out\")\n"
"    @Blocking\n"
"    public TransactionResult sendToTransactionService(Transaction transaction) {\n"
"        LOGGER.infof(\"Sending %s transaction service\", transaction);\n"
"        return service.postSync(transaction);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:120
#, fuzzy
msgid "First, we inject the Rest Client.  Then, we just invoke it in our method."
msgstr "Primeiro, injectamos o cliente Rest. Depois, invocamo-lo no nosso método."

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:125
#, fuzzy
msgid "You may wonder about `@Blocking`.  With reactive messaging, you need to indicate when you are using blocking code, as by default, it uses an event loop architecture.  While convenient, you should not abuse `@Blocking`, as it relies on a thread pool limiting your concurrency.  But, it keeps your logic synchronous."
msgstr "Poderá questionar-se sobre `@Blocking`. Com o envio reativo de mensagens, é necessário indicar quando está a utilizar código de bloqueio, uma vez que, por defeito, utiliza uma arquitetura de ciclo de eventos. Embora seja conveniente, não deve abusar de `@Blocking`, uma vez que se baseia num conjunto de threads que limita a concorrência. Mas mantém a sua lógica síncrona."

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:127
#, fuzzy
msgid "### Using Asynchronous operations"
msgstr "Utilização de operações assíncronas"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:129
#, fuzzy
msgid "We can get rid of `@Blocking` annotation by using the second method provided by the `TransactionService`: `postAsync:`"
msgstr "Podemos livrar-nos da anotação `@Blocking` utilizando o segundo método fornecido pelo `TransactionService`: `postAsync:`"

#. type: delimited block -
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:145
#, no-wrap
msgid ""
"    @Incoming(\"in\")\n"
"    @Outgoing(\"out\")\n"
"    public Uni<TransactionResult> sendToTransactionService(Transaction transaction) {\n"
"        LOGGER.infof(\"Sending %s transaction service\", transaction);\n"
"        return service.postAsync(transaction);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:152
#, fuzzy
msgid "Using the *async* variant of the `post` method allows us to remove `@Blocking`.  We return the `Uni` directly.  When that `Uni` receives the remote service's response, it writes the value to the `out` channel."
msgstr "A utilização da variante *assíncrona* do método `post` permite-nos remover o `@Blocking`. Devolvemos o `Uni` diretamente. Quando esse `Uni` recebe a resposta do serviço remoto, ele escreve o valor no canal `out`."

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:154
#, fuzzy
msgid "### Mapping channel to Kafka"
msgstr "Mapeamento do canal para o Kafka"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:160
#, fuzzy
msgid "So far, so good.  It's time to connect our code with Kafka.  With Reactive Messaging, we map channels to _connectors_, here Kafka.  So, we just need to configure the application to indicate that the `in` and `out` channels are Kafka topics.  Once again, edit the `application.properties` file, and add:"
msgstr "Até agora, tudo bem. É hora de conectar nosso código ao Kafka. Com o Reactive Messaging, mapeamos canais para _conectores_, aqui o Kafka. Assim, só precisamos de configurar a aplicação para indicar que os canais `in` e `out` são tópicos do Kafka. Mais uma vez, edite o arquivo `application.properties` e adicione:"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:167
#, fuzzy
msgid "``` mp.messaging.incoming.in.connector=smallrye-kafka mp.messaging.incoming.in.topic=transactions mp.messaging.incoming.in.value.deserializer=org.acme.model.TransactionDeserializer mp.messaging.incoming.in.auto.offset.reset=earliest mp.messaging.incoming.in.enable.auto.commit=false"
msgstr "<pre class=\"highlight\"> ``</pre>"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:172
#, fuzzy
msgid "mp.messaging.outgoing.out.connector=smallrye-kafka mp.messaging.outgoing.out.topic=output mp.messaging.outgoing.out.value.serializer=io.quarkus.kafka.client.serialization.JsonbSerializer ```"
msgstr "mp.messaging.outgoing.out.connector=smallrye-kafka mp.messaging.outgoing.out.topic=output mp.messaging.outgoing.out.value.serializer=io.quarkus.kafka.client.serialization.JsonbSerializer ```"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:177
#, fuzzy
msgid "The first block is about the `in` channel.  It's connected to the `transactions` Kafka topic.  The data is deserialized with a https://github.com/cescoffier/quarkus-kafka-rest-client-demo/blob/master/src/main/java/org/acme/model/TransactionDeserializer.java[custom deserializer].  The last other properties disable the auto-commit (Reactive Messaging is handling commits for you) and read the data since the last committed offset."
msgstr "O primeiro bloco é sobre o canal `in`. Ele está conectado ao tópico `transactions` do Kafka. Os dados são  link:https://github.com/cescoffier/quarkus-kafka-rest-client-demo/blob/master/src/main/java/org/acme/model/TransactionDeserializer.java[desserializados] com um  link:https://github.com/cescoffier/quarkus-kafka-rest-client-demo/blob/master/src/main/java/org/acme/model/TransactionDeserializer.java[desserializador personalizado]. As outras últimas propriedades desactivam o auto-commit (o Reactive Messaging está a tratar dos commits por si) e lêem os dados desde o último offset de commit."

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:181
#, fuzzy
msgid "The second block configures the `out` channel.  We connect it with the `output` Kafka topic and configure the value serializer.  For this simple example, we write the data as JSON."
msgstr "O segundo bloco configura o canal `out`. Nós o conectamos com o tópico `output` do Kafka e configuramos o serializador de valores. Para este exemplo simples, escrevemos os dados como JSON."

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:183
#, fuzzy
msgid "So, when a transaction is written to the Kafka `transaction` topic, it gets received by our processing component, sent to the remote service, and the result is written to the `output` Kafka topic:"
msgstr "Assim, quando uma transação é escrita no tópico do Kafka `transaction`, é recebida pelo nosso componente de processamento, enviada para o serviço remoto e o resultado é escrito no tópico do Kafka `output`:"

#. type: delimited block -
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:190
#, no-wrap
msgid ""
"2020-08-27 10:04:44,141 INFO  [TransactionProcessor] (vert.x-eventloop-thread-0) Sending Transaction{name='MacroHard', amount=20} transaction service\n"
"2020-08-27 10:04:44,196 INFO  [TransactionResource] (executor-thread-2) Handling transaction MacroHard / 20\n"
"2020-08-27 10:04:44,240 INFO  [TransactionProcessor] (vert.x-eventloop-thread-0) Sending Transaction{name='BlueHat', amount=10} transaction service\n"
"2020-08-27 10:04:44,245 INFO  [TransactionResource] (executor-thread-2) Handling transaction BlueHat / 10\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:193
#, fuzzy
msgid "If you look inside the `output` topic, you will see the `TransactionResult` flowing:"
msgstr "Se olhar para o tópico `output`, verá o `TransactionResult` a fluir:"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:195
#, fuzzy
msgid "image:/assets/images/posts/kafka-rest-client/output.png[]"
msgstr "image:/assets/images/posts/kafka-rest-client/output.png[alt=output]"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:197
#, fuzzy
msgid "### We are done!"
msgstr "Acabámos!"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:199
#, fuzzy
msgid "With a few lines of code and a bit of configuration, we can read data from a Kafka topic, call a remote service, and write the result to another Kafka topic. Plain simple."
msgstr "Com algumas linhas de código e um pouco de configuração, podemos ler dados de um tópico do Kafka, chamar um serviço remoto e escrever o resultado noutro tópico do Kafka. Simples assim."

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:202
#, fuzzy
msgid "Want to try by yourself? Check out the code in this https://github.com/cescoffier/quarkus-kafka-rest-client-demo[GitHub repository] and follow the instructions from the readme."
msgstr "Quer experimentar por si próprio? Veja o código neste  link:https://github.com/cescoffier/quarkus-kafka-rest-client-demo[repositório do GitHub] e siga as instruções do readme."

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:204
#, fuzzy
msgid "Reactive Messaging and the Rest client contain other gems, check the related guides and documentation to learn more about them:"
msgstr "O serviço de mensagens reactivas e o cliente Rest contêm outras jóias, consulte os guias e a documentação relacionados para saber mais sobre eles:"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:206
#, fuzzy
msgid "https://quarkus.io/guides/rest-client[Using the Rest Client]"
msgstr "link:https://quarkus.io/guides/rest-client[Utilizar o cliente Rest]"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:207
#, fuzzy
msgid "https://quarkus.io/guides/kafka[Interacting with Kafka]"
msgstr "link:https://quarkus.io/guides/kafka[Interagir com o Kafka]"

#. type: Plain text
#: upstream/_posts/2020-09-08-kafka-rest-client.adoc:207
#, fuzzy
msgid "https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2.2/kafka/kafka.html[The Kafka Connector documentation]"
msgstr "link:https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2.2/kafka/kafka.html[A documentação do Conector Kafka]"
