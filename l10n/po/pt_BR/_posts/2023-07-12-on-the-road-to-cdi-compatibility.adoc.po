# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:07+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:1
#, fuzzy, no-wrap
msgid "lthon"
msgstr "lthon"

#. type: YAML Front Matter: date
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:1
#, fuzzy, no-wrap
msgid "2023-07-12"
msgstr "2023-07-12"

#. type: YAML Front Matter: layout
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "posto"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:1
#, fuzzy, no-wrap
msgid "Quarkus is now compatible with CDI Lite."
msgstr "O Quarkus é agora compatível com o CDI Lite."

#. type: YAML Front Matter: tags
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:1
#, fuzzy, no-wrap
msgid "arc cdi"
msgstr "arco cdi"

#. type: YAML Front Matter: title
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:1
#, fuzzy, no-wrap
msgid "On the Road to CDI Compatibility"
msgstr "A caminho da compatibilidade CDI"

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:12
#, fuzzy
msgid "Ever since the very first days of Quarkus, the days that are now covered by the blissful fog of oblivion and the survivors only talk about them after a few pints of beer, dependency injection container was an integral part of the envisioned framework.  And not just any dependency injection container -- a link:/blog/quarkus-dependency-injection/[CDI implementation], of all things."
msgstr "Desde os primeiros dias do Quarkus, os dias que agora estão cobertos pela névoa feliz do esquecimento e os sobreviventes só falam deles depois de alguns litros de cerveja, o contentor de injeção de dependências era uma parte integrante da estrutura prevista. E não apenas um contentor de injeção de dependências qualquer - uma  link:/blog/quarkus-dependency-injection/[implementação de CDI], de todas as coisas."

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:16
#, fuzzy
msgid "At the very beginning, the CDI implementation used was Weld.  Very soon, the Masterminds and Deep Thoughts behind the CDI work in what eventually became Quarkus, Martin Kouba and Stuart Douglas, realized that Weld cannot possibly unlock the full potential that a build-time oriented framework conceals.  Thus, ArC was born."
msgstr "No início, a implementação de CDI usada foi o Weld. Muito em breve, os mentores e pensadores profundos por trás do trabalho de CDI no que eventualmente se tornou o Quarkus, Martin Kouba e Stuart Douglas, perceberam que o Weld não poderia desbloquear todo o potencial que uma estrutura orientada para o tempo de construção esconde. Assim, nasceu o ArC."

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:21
#, fuzzy
msgid "When I first heard of ArC, I thought, surely that means _A reduced CDI_, especially with that capitalization! Alas, I was deeply mistaken.  It is a reference to an activity that I could never possibly indulge in out of the simple concern for my health and safety: _arc welding_.  (That indeed is a backreference to Weld. There are some clever people here!)"
msgstr "Quando ouvi falar de ArC pela primeira vez, pensei: \"De certeza que isso quer dizer _CDI reduzido_, especialmente com essa capitalização! Infelizmente, estava profundamente enganado. Trata-se de uma referência a uma atividade a que nunca me poderia dedicar por simples preocupação com a minha saúde e segurança: a _soldadura por arco_. (É, de facto, uma referência a Weld. Há aqui gente muito inteligente!)"

#. type: Title ==
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:22
#, fuzzy, no-wrap
msgid "Arc Welding"
msgstr "Soldadura por arco"

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:28
#, fuzzy
msgid "ArC started with one important architectural constraint that was significantly different to all other existing CDI implementations at that time: it ought to perform the heavy lifting during application build.  Among others, this includes the entire bean discovery process.  If you are familiar with AtInject and its various implementations, this concept doesn't come as a surprise.  For example, Guice is a popular dependency injection container that does all the work at application runtime, while Dagger is a popular alternative that precomputes dependency wiring at build time."
msgstr "O ArC começou com uma restrição arquitetónica importante que era significativamente diferente de todas as outras implementações de CDI existentes na altura: devia fazer o trabalho pesado durante a construção da aplicação. Isso inclui, entre outros, todo o processo de descoberta de bean. Se estiver familiarizado com o AtInject e as suas várias implementações, este conceito não é uma surpresa. Por exemplo, Guice é um popular container de injeção de dependência que faz todo o trabalho em tempo de execução da aplicação, enquanto Dagger é uma alternativa popular que pré-computa a fiação de dependência em tempo de construção."

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:32
#, fuzzy
msgid "With CDI, the situation is not that simple.  CDI 2.0, the latest version at that time, includes features that ultimately preclude running bean discovery at build time; most notably, the _Portable Extensions_ API.  To be able to execute portable extensions, you need to have a running CDI container (to deliver events or use the `BeanManager` API), you need to be able to reflect on application classes (the `Annotated*` types directly expose `java.lang.reflect` types), and you need to support portable extension instances holding various kinds of state (including started threads or open sockets)."
msgstr "Com o CDI, a situação não é tão simples. O CDI 2.0, a versão mais recente na altura, inclui funcionalidades que, em última análise, impedem a execução da descoberta de feijões no momento da construção, nomeadamente a API _Portable Extensions_. Para poder executar extensões portáteis, é necessário ter um contentor CDI em execução (para entregar eventos ou utilizar a API `BeanManager` ), é necessário poder refletir sobre as classes de aplicação (os tipos `Annotated*` expõem diretamente os tipos `java.lang.reflect` ) e é necessário suportar instâncias de extensão portáteis com vários tipos de estado (incluindo threads iniciadas ou sockets abertos)."

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:35
#, fuzzy
msgid "There are also features that were challenging to implement, like efficient bean metadata storage and runtime access, or dynamic lookup, but those are _just work_.  Portable Extensions were downright impossible."
msgstr "Há também funcionalidades que foram difíceis de implementar, como o armazenamento eficiente de metadados de beans e o acesso em tempo de execução, ou a pesquisa dinâmica, mas essas são _apenas trabalho_. As Extensões Portáteis eram absolutamente impossíveis."

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:40
#, fuzzy
msgid "ArC made an obvious choice: it will not support Portable Extensions, it will not be a fully compatible implementation of CDI, and it will not be verified by the CDI TCK.  This decision opened the door to pruning some ancient CDI features that have not been widely used or were deemed not important enough for contemporary software world: conversations, specialization, passivation, interceptors bound using the `@Interceptors` annotation, enablement using `beans.xml`, and so on.  Some other features are not a good fit for the build-time approach either: the notion of explicit bean archives, `InterceptionFactory`, or some parts of the `BeanManager` API.  This might sound like a long list, but as a matter of fact, the result was a perfectly \"just enough\" implementation of CDI that allowed running a huge number of existing CDI-based libraries and frameworks, after writing a Quarkus-specific integration."
msgstr "O ArC fez uma escolha óbvia: não suportará Portable Extensions, não será uma implementação totalmente compatível do CDI e não será verificado pelo CDI TCK. Esta decisão abriu a porta para a eliminação de algumas características antigas do CDI que não têm sido amplamente utilizadas ou que não foram consideradas suficientemente importantes para o mundo do software contemporâneo: conversas, especialização, passivação, interceptores ligados utilizando a anotação `@Interceptors`, habilitação utilizando `beans.xml`, etc. Alguns outros recursos também não se encaixam bem na abordagem de tempo de construção: a noção de arquivos de bean explícitos, `InterceptionFactory`, ou algumas partes da API `BeanManager`. Esta lista pode parecer longa, mas, na verdade, o resultado foi uma implementação de CDI perfeitamente \"justa\", que permitiu executar um grande número de bibliotecas e estruturas baseadas em CDI, depois de escrever uma integração específica para o Quarkus."

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:42
#, fuzzy
msgid "All was nice and rosy, pink unicorns happily roamed flowery meadows, double rainbows glowed on clear sunny skies, and developers developed mighty microservices all over the link:https://twitter.com/Grady_Booch/status/1154493591487537152[kuberspace]. Over time, some features that were originally omitted, such as decorators, were also implemented."
msgstr "Tudo era bonito e cor-de-rosa, unicórnios cor-de-rosa passeavam alegremente por prados floridos, arco-íris duplos brilhavam em céus claros e ensolarados, e os desenvolvedores desenvolviam poderosos microserviços em todo o  link:https://twitter.com/Grady_Booch/status/1154493591487537152[kuberspace]. Com o tempo, alguns recursos que foram originalmente omitidos, como decoradores, também foram implementados."

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:45
#, fuzzy
msgid "Of course, some people tried to complain that Quarkus claims it implements CDI, while it really doesn't, because it doesn't pass the TCK, but we don't have to fuss over that.  The absence of these features has been clearly documented, and majestic exclusion lists have been a noble tradition in the CDI world since the beginning of time anyway."
msgstr "Claro que algumas pessoas tentaram queixar-se de que o Quarkus afirma que implementa CDI, quando na realidade não o faz, porque não passa o TCK, mas não temos de nos preocupar com isso. A ausência destas características foi claramente documentada, e as majestosas listas de exclusão têm sido uma nobre tradição no mundo CDI desde o início dos tempos."

#. type: Title ==
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:46
#, fuzzy, no-wrap
msgid "CDI Lite"
msgstr "CDI Lite"

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:49
#, fuzzy
msgid "ArC has quite successfully proven that there indeed is a small seed hidden in CDI, waiting to be watered and manured, waiting to grow and blossom and show to the world that CDI need not be just \"guiced\"; it can also be \"daggered\"."
msgstr "O ArC conseguiu provar que existe, de facto, uma pequena semente escondida na CDI, à espera de ser regada e adubada, à espera de crescer e florescer e de mostrar ao mundo que a CDI não precisa de ser apenas \"guiada\"; também pode ser \"adubada\"."

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:53
#, fuzzy
msgid "A small group of engineers convened in Red Hat, trying to contrive a diabolical plan: could this be made part of CDI proper? The idea was link:https://github.com/jakartaee/cdi/issues/425[discussed] externally and internally fairly extensively.  Fortunately, CDI was conceived at Red Hat, so we had all the experts, and the link:https://www.cdi-spec.org/news/2020/03/09/CDI_for_the_future/[first concrete idea] of how this could be done was published relatively soon."
msgstr "Um pequeno grupo de engenheiros reuniu-se na Red Hat, tentando conceber um plano diabólico: poderia isto fazer parte do CDI propriamente dito? A ideia foi  link:https://github.com/jakartaee/cdi/issues/425[discutida] externa e internamente de forma bastante extensa. Felizmente, o CDI foi concebido na Red Hat, por isso tínhamos todos os especialistas, e a  link:https://www.cdi-spec.org/news/2020/03/09/CDI_for_the_future/[primeira ideia concreta] de como isto poderia ser feito foi publicada relativamente cedo."

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:59
#, fuzzy
msgid "A huge part of those discussions revolved around Portable Extensions.  As mentioned earlier, they cannot be supported at build time, so we knew early on that we had to design a new extension API.  (This is when yours truly enters the scene, not planning to leave until the curtain falls.)  We made several prototypes of various aspects of the API, including a new language model, and eventually link:https://www.cdi-spec.org/news/2020/09/15/CDI_Lite_extension/[published a proposal] (beware, the article is now severely outdated!).  We called it _Build Compatible Extensions_, to highlight the stark contrast with Portable Extensions: this API can be implemented both at build time and at runtime."
msgstr "Uma grande parte dessas discussões girou em torno das Extensões Portáteis. Como mencionado anteriormente, elas não podem ser suportadas no momento da construção, então sabíamos desde o início que tínhamos que projetar uma nova API de extensão. (É aqui que o meu amigo entra em cena, não planeando sair até que a cortina caia). Fizemos vários protótipos de vários aspectos da API, incluindo um novo modelo de linguagem, e acabámos por  link:https://www.cdi-spec.org/news/2020/09/15/CDI_Lite_extension/[publicar uma proposta] (atenção, o artigo está agora muito desatualizado!). Chamámos-lhe _Extensões Compatíveis com_ a Construção, para realçar o forte contraste com as Extensões Portáteis: esta API pode ser implementada tanto em tempo de construção como em tempo de execução."

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:65
#, fuzzy
msgid "Publishing that proposal had two effects.  First, it has shown that communication is hard, online communication is harder and online communication in a non-native language is pretty darn painful.  Second, it has shown serious interest from us in doing the necessary work.  And it wasn't just us -- some Oracle people have also shown up, most notably Graeme Rocher of the Micronaut fame.  Over the subsequent year, the Core CDI specification was link:https://www.theserverside.com/blog/Coffee-Talk-Java-News-Stories-and-Opinions/CDI-Full-vs-CDI-Lite-What-changed-in-Contexts-and-Dependency-Injection-40[refactored] into CDI Lite and CDI Full, the Build Compatible Extensions API was link:https://jakartaee.github.io/cdi/2021/12/03/you-know-build-compatible-extensions.html[incorporated] (and for that, I actually implemented two prototypes, one in ArC and the other as a Portable Extension for Weld), the CDI TCK was split to support testing only CDI Lite implementations, and so on."
msgstr "A publicação dessa proposta teve dois efeitos. Primeiro, mostrou que a comunicação é difícil, que a comunicação em linha é mais difícil e que a comunicação em linha numa língua não materna é bastante dolorosa. Segundo, mostrou um sério interesse da nossa parte em fazer o trabalho necessário. E não fomos só nós - algumas pessoas da Oracle também apareceram, mais notavelmente Graeme Rocher da fama do Micronauta. No ano seguinte, a especificação Core CDI foi  link:https://www.theserverside.com/blog/Coffee-Talk-Java-News-Stories-and-Opinions/CDI-Full-vs-CDI-Lite-What-changed-in-Contexts-and-Dependency-Injection-40[refatorada] em CDI Lite e CDI Full, a API Build Compatible Extensions foi  link:https://jakartaee.github.io/cdi/2021/12/03/you-know-build-compatible-extensions.html[incorporada] (e para isso, eu implementei dois protótipos, um em ArC e outro como uma Portable Extension para Weld), o CDI TCK foi dividido para suportar testes apenas de implementações CDI Lite, e assim por diante."

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:67
#, fuzzy
msgid "Finally, as part of Jakarta EE 10, CDI 4.0 was released, featuring the Lite specification, which became the cornerstone of Jakarta EE Core Profile, which in turn became the cornerstone of MicroProfile."
msgstr "Finalmente, como parte do Jakarta EE 10, foi lançado o CDI 4.0, com a especificação Lite, que se tornou a pedra angular do Jakarta EE Core Profile, que por sua vez se tornou a pedra angular do MicroProfile."

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:69
#, fuzzy
msgid "End of story, go home? Not so fast."
msgstr "Fim da história, ir para casa? Não tão depressa."

#. type: Title ==
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:70
#, fuzzy, no-wrap
msgid "Compatible Implementation"
msgstr "Implementação compatível"

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:77
#, fuzzy
msgid "Now that we have the CDI Lite specification, do we have any implementations? Of course, all existing implementations of CDI become CDI Full implementations relatively easily; the hardest part is implementing the new extension API, which is possible using a Portable Extension.  But are there any _new_ implementations? Is ArC a CDI Lite implementation now? Is it verified by the TCK at last?"
msgstr "Agora que temos a especificação CDI Lite, temos alguma implementação? É claro que todas as implementações existentes do CDI se tornam implementações do CDI Full com relativa facilidade; a parte mais difícil é implementar a nova API de extensão, o que é possível usando uma Portable Extension. Mas existem _novas_ implementações? O ArC é agora uma implementação CDI Lite? Foi finalmente verificado pelo TCK?"

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:81
#, fuzzy
msgid "We naturally intended for ArC to implement CDI Lite, but it wasn't just ArC.  The link:https://projects.eclipse.org/projects/ee4j.odi[Eclipse Open DI] project also strives to become a CDI Lite implementation, and it is built on top of the Micronaut framework.  I can't speak for that project, but I can say that working on the CDI Lite specification together with the talented people behind ODI was a great experience!"
msgstr "Naturalmente, pretendíamos que o ArC implementasse o CDI Lite, mas não era apenas o ArC. O projeto  link:https://projects.eclipse.org/projects/ee4j.odi[Eclipse Open DI] também se esforça para se tornar uma implementação CDI Lite, e é construído sobre a estrutura Micronaut. Não posso falar por esse projeto, mas posso dizer que trabalhar na especificação do CDI Lite junto com as pessoas talentosas por trás do ODI foi uma ótima experiência!"

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:88
#, fuzzy
msgid "Now, when it comes to ArC, more work obviously ensued.  I fortunately already had an Arquillian adapter for ArC from the previous prototyping work (Arquillian is a testing framework the CDI TCK relies upon), and the other relevant TCKs are very easy to embed.  It wasn't too hard to start running them: the AtInject TCK, the CDI Lang Model TCK and the CDI Lite TCK.  We started running the TCKs with standalone ArC, to make the work easier and faster.  The CDI Lang Model TCK was always passing, as I was developing the implementation together with the specification, and getting the AtInject TCK to pass did not require too much time (it was mostly about implementing a precise resolution of overriden methods).  The CDI Lite TCK is clearly the most complex one; at the beginning, we had roughly 2/3 of the tests passing and the remaining 1/3 failing, for many different reasons."
msgstr "Agora, no que diz respeito ao ArC, obviamente houve mais trabalho. Felizmente, eu já tinha um adaptador Arquillian para o ArC do trabalho de prototipagem anterior (o Arquillian é um framework de testes no qual o TCK do CDI se baseia), e os outros TCKs relevantes são muito fáceis de incorporar. Não foi muito difícil começar a executá-los: o TCK AtInject, o TCK CDI Lang Model e o TCK CDI Lite. Começámos a executar os TCKs com o ArC autónomo, para tornar o trabalho mais fácil e rápido. O TCK do CDI Lang Model estava sempre a passar, uma vez que eu estava a desenvolver a implementação juntamente com a especificação, e fazer com que o TCK do AtInject passasse não exigia muito tempo (tratava-se sobretudo de implementar uma resolução precisa de métodos sobrepostos). O TCK do CDI Lite é claramente o mais complexo; no início, tínhamos cerca de 2/3 dos testes a passar e os restantes 1/3 a falhar, por muitas razões diferentes."

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:96
#, fuzzy
msgid "During the Quarkus 2.16 development cycle, I created an initial exclusion list and we started closing the gap.  For a while, we had to work in an extra repository, until Quarkus moved from the `javax` dependencies to `jakarta`, but that was fairly simple to set up.  The Arquillian adapter needed improvements to correctly implement the CDI type discovery rules (because ArC leaves most of type discovery to the integrator).  Many validations were missing from ArC and we added those.  We even implemented some more features.  When standalone ArC was passing the TCKs, it didn't take much time to run them with full Quarkus too.  Overall, this link:https://github.com/quarkusio/quarkus/issues/28558[took] 26 pull requests and 109 commits, over the course of four to five months."
msgstr "Durante o ciclo de desenvolvimento do Quarkus 2.16, criei uma lista de exclusão inicial e começámos a colmatar a lacuna. Durante algum tempo, tivemos de trabalhar num repositório adicional, até o Quarkus passar das dependências de `javax` para `jakarta`, mas isso foi bastante simples de configurar. O adaptador Arquillian precisava de melhorias para implementar corretamente as regras de descoberta de tipos CDI (porque o ArC deixa a maior parte da descoberta de tipos para o integrador). Muitas validações estavam em falta no ArC e nós adicionámo-las. Até implementámos mais algumas funcionalidades. Quando o ArC autónomo estava a passar os TCKs, não demorou muito tempo a executá-los também com o Quarkus completo. No total,  link:https://github.com/quarkusio/quarkus/issues/28558[foram necessários] 26 pull requests e 109 commits, ao longo de quatro a cinco meses."

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:100
#, fuzzy
msgid "We unfortunately also had to create a _strict mode_.  ArC has several usability improvements on top of the CDI specification, and a few of them go against the specification rules.  We recommend users to use the default mode which includes these improvements, but we also want to have an option to turn those improvements off, for people who value specification compatibility more."
msgstr "Infelizmente, também tivemos de criar um _modo estrito_. O ArC tem várias melhorias de usabilidade em cima da especificação CDI, e algumas delas vão contra as regras da especificação. Recomendamos aos utilizadores que utilizem o modo predefinido que inclui estas melhorias, mas também queremos ter uma opção para desativar essas melhorias, para as pessoas que valorizam mais a compatibilidade com a especificação."

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:103
#, fuzzy
msgid "And since we are lazy people, like all decent programmers, running the TCKs is automated as part of the Quarkus Maven build (which means they also run on all pull requests to Quarkus that touch ArC).  If you want to try it yourself, it requires very little manual work."
msgstr "E como somos pessoas preguiçosas, como todos os programadores decentes, a execução dos TCKs é automatizada como parte da construção do Quarkus Maven (o que significa que eles também são executados em todos os pull requests para o Quarkus que tocam no ArC). Se quiseres experimentar por ti próprio, é necessário muito pouco trabalho manual."

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:105
#, fuzzy
msgid "Clone the Quarkus repository, if you don’t have it already:"
msgstr "Clone o repositório Quarkus, se ainda não o tiver:"

#. type: delimited block -
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:109
#, no-wrap
msgid "git clone https://github.com/quarkusio/quarkus.git\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:111
#, fuzzy
msgid "Build Quarkus:"
msgstr "Construir Quarkus:"

#. type: delimited block -
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:116
#, no-wrap
msgid ""
"cd quarkus\n"
"mvn -Dquickly\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:118
#, fuzzy
msgid "Run the AtInject TCK:"
msgstr "Execute o TCK AtInject:"

#. type: delimited block -
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:123
#, no-wrap
msgid ""
"cd tcks/jakarta-atinject\n"
"mvn clean verify\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:125
#, fuzzy
msgid "Run the CDI Lang Model TCK:"
msgstr "Executar o CDI Lang Model TCK:"

#. type: delimited block -
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:130
#, no-wrap
msgid ""
"cd ../jakarta-cdi-lang-model\n"
"mvn clean verify\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:132
#, fuzzy
msgid "Run the CDI Lite TCK:"
msgstr "Executar o CDI Lite TCK:"

#. type: delimited block -
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:137
#, no-wrap
msgid ""
"cd ../jakarta-cdi\n"
"mvn clean verify\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:140
#, fuzzy
msgid "If everything went fine, you should see the following outputs."
msgstr "Se tudo correu bem, deve ver os seguintes resultados."

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:142
#, fuzzy
msgid "For AtInject:"
msgstr "Para AtInject:"

#. type: delimited block -
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:148
#, no-wrap
msgid ""
"Running io.quarkus.tck.atinject.AtInjectTest\n"
"...\n"
"Tests run: 1, Failures: 0, Errors: 0, Skipped: 0\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:151
#, fuzzy
msgid "For CDI Lang Model:"
msgstr "Para o modelo CDI Lang:"

#. type: delimited block -
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:157
#, no-wrap
msgid ""
"Running io.quarkus.tck.cdi.lang.model.LangModelTest\n"
"...\n"
"Tests run: 1, Failures: 0, Errors: 0, Skipped: 0\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:160
#, fuzzy
msgid "For CDI Lite:"
msgstr "Para CDI Lite:"

#. type: delimited block -
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:166
#, no-wrap
msgid ""
"Running TestSuite\n"
"...\n"
"Tests run: 717, Failures: 0, Errors: 0, Skipped: 0\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:169
#, fuzzy
msgid "And that's all, folks!"
msgstr "E é tudo, pessoal!"

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:171
#, fuzzy
msgid "It is my pleasure to announce that Quarkus 3.2 successfully passes the AtInject TCK, the CDI Lang Model TCK and the CDI Lite TCK and hence becomes a compatible implementation of CDI Lite."
msgstr "Tenho o prazer de anunciar que o Quarkus 3.2 foi aprovado no AtInject TCK, no CDI Lang Model TCK e no CDI Lite TCK, tornando-se assim uma implementação compatível do CDI Lite."

#. type: Plain text
#: upstream/_posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc:174
#, fuzzy
msgid "I would also like to extend my sincere gratitude to Martin Kouba and Matěj Novotný, our resident CDI gurus, for welcoming me and sharing with me their deep knowledge of the subject.  I mostly just tried to not wreck their code.  (Which, over time, also became my code, I guess. Whoops!)"
msgstr "Gostaria também de estender a minha sincera gratidão a Martin Kouba e Matěj Novotný, os nossos gurus CDI residentes, por me receberem e partilharem comigo os seus profundos conhecimentos sobre o assunto. A maior parte do tempo tentei apenas não estragar o código deles. (Que, com o tempo, também se tornou o meu código, acho eu. Whoops!)"
