# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:07+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: title
#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy, no-wrap
msgid "On the Road to CDI Compatibility"
msgstr "A caminho da compatibilidade CDI"

#. type: YAML Front Matter: synopsis
#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy, no-wrap
msgid "Quarkus is now compatible with CDI Lite."
msgstr "O Quarkus é agora compatível com o CDI Lite."

#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid ""
"Ever since the very first days of Quarkus, the days that are now covered by the blissful fog of oblivion and the survivors only talk about them after a few pints of beer, dependency injection container was an integral part of the envisioned framework.\n"
"And not just any dependency injection container -- a link:/blog/quarkus-dependency-injection/[CDI implementation], of all things."
msgstr "Desde os primeiros dias do Quarkus, os dias que agora estão cobertos pela feliz névoa do esquecimento e os sobreviventes só falam sobre eles depois de alguns litros de cerveja, o contêiner de injeção de dependência era parte integrante da estrutura idealizada. E não apenas qualquer contêiner de injeção de dependência - uma link:/blog/quarkus-dependency-injection/[implementação de CDI] , entre todas as coisas."

#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid ""
"At the very beginning, the CDI implementation used was Weld.\n"
"Very soon, the Masterminds and Deep Thoughts behind the CDI work in what eventually became Quarkus, Martin Kouba and Stuart Douglas, realized that Weld cannot possibly unlock the full potential that a build-time oriented framework conceals.\n"
"Thus, ArC was born."
msgstr "No início, a implementação de CDI usada foi o Weld. Muito em breve, os mestres e pensadores profundos por trás do trabalho de CDI no que acabou se tornando o Quarkus, Martin Kouba e Stuart Douglas, perceberam que o Weld não poderia desbloquear todo o potencial que uma estrutura orientada para o tempo de construção esconde. Assim, nasceu o ArC."

#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid ""
"When I first heard of ArC, I thought, surely that means _A reduced CDI_, especially with that capitalization!\n"
"Alas, I was deeply mistaken.\n"
"It is a reference to an activity that I could never possibly indulge in out of the simple concern for my health and safety: _arc welding_.\n"
"(That indeed is a backreference to Weld. There are some clever people here!)"
msgstr "Quando ouvi falar em ArC pela primeira vez, pensei: com certeza isso significa _CDI reduzido_ , especialmente com essa capitalização! Infelizmente, eu estava profundamente enganado. Trata-se de uma referência a uma atividade à qual eu jamais poderia me dedicar por simples preocupação com minha saúde e segurança: _soldagem a arco_ . (Na verdade, trata-se de uma referência a Weld. Há pessoas inteligentes aqui!)"

#. type: Title ==
#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy, no-wrap
msgid "Arc Welding"
msgstr "Soldadura por arco"

#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid ""
"ArC started with one important architectural constraint that was significantly different to all other existing CDI implementations at that time: it ought to perform the heavy lifting during application build.\n"
"Among others, this includes the entire bean discovery process.\n"
"If you are familiar with AtInject and its various implementations, this concept doesn't come as a surprise.\n"
"For example, Guice is a popular dependency injection container that does all the work at application runtime, while Dagger is a popular alternative that precomputes dependency wiring at build time."
msgstr "O ArC começou com uma restrição arquitetônica importante que era significativamente diferente de todas as outras implementações de CDI existentes na época: ele deveria fazer o trabalho pesado durante a criação do aplicativo. Entre outras coisas, isso inclui todo o processo de descoberta do bean. Se o senhor estiver familiarizado com o AtInject e suas várias implementações, esse conceito não será uma surpresa. Por exemplo, o Guice é um contêiner de injeção de dependência popular que faz todo o trabalho no tempo de execução do aplicativo, enquanto o Dagger é uma alternativa popular que pré-computa a fiação de dependência no tempo de compilação."

#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid ""
"With CDI, the situation is not that simple.\n"
"CDI 2.0, the latest version at that time, includes features that ultimately preclude running bean discovery at build time; most notably, the _Portable Extensions_ API.\n"
"To be able to execute portable extensions, you need to have a running CDI container (to deliver events or use the `BeanManager` API), you need to be able to reflect on application classes (the `Annotated*` types directly expose `java.lang.reflect` types), and you need to support portable extension instances holding various kinds of state (including started threads or open sockets)."
msgstr "Com o CDI, a situação não é tão simples. O CDI 2.0, a versão mais recente na época, inclui recursos que, em última análise, impedem a execução da descoberta de bean no momento da compilação, principalmente a API _Portable Extensions_ . Para poder executar extensões portáteis, é necessário ter um contêiner CDI em execução (para fornecer eventos ou usar a API `BeanManager` ), é necessário poder refletir sobre as classes de aplicativos (os tipos `Annotated*` expõem diretamente os tipos `java.lang.reflect` ) e é necessário oferecer suporte a instâncias de extensões portáteis que mantenham vários tipos de estado (inclusive threads iniciados ou soquetes abertos)."

#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid ""
"There are also features that were challenging to implement, like efficient bean metadata storage and runtime access, or dynamic lookup, but those are _just work_.\n"
"Portable Extensions were downright impossible."
msgstr "Há também recursos que foram difíceis de implementar, como armazenamento eficiente de metadados de bean e acesso em tempo de execução, ou pesquisa dinâmica, mas esses são _apenas trabalho_ . As Portable Extensions eram absolutamente impossíveis."

#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid ""
"ArC made an obvious choice: it will not support Portable Extensions, it will not be a fully compatible implementation of CDI, and it will not be verified by the CDI TCK.\n"
"This decision opened the door to pruning some ancient CDI features that have not been widely used or were deemed not important enough for contemporary software world: conversations, specialization, passivation, interceptors bound using the `@Interceptors` annotation, enablement using `beans.xml`, and so on.\n"
"Some other features are not a good fit for the build-time approach either: the notion of explicit bean archives, `InterceptionFactory`, or some parts of the `BeanManager` API.\n"
"This might sound like a long list, but as a matter of fact, the result was a perfectly \"just enough\" implementation of CDI that allowed running a huge number of existing CDI-based libraries and frameworks, after writing a Quarkus-specific integration."
msgstr "O ArC fez uma escolha óbvia: não oferecerá suporte a Portable Extensions, não será uma implementação totalmente compatível com o CDI e não será verificado pelo CDI TCK. Essa decisão abriu a porta para a eliminação de alguns recursos antigos do CDI que não foram amplamente utilizados ou que não foram considerados importantes o suficiente para o mundo do software contemporâneo: conversas, especialização, passivação, interceptores vinculados usando a anotação `@Interceptors` , habilitação usando `beans.xml` e assim por diante. Alguns outros recursos também não são adequados para a abordagem de tempo de construção: a noção de arquivos de bean explícitos, `InterceptionFactory` , ou algumas partes da API `BeanManager` . Essa pode parecer uma longa lista, mas, na verdade, o resultado foi uma implementação perfeitamente \"justa\" do CDI que permitiu a execução de um grande número de bibliotecas e estruturas baseadas em CDI, depois de escrever uma integração específica para o Quarkus."

#. type: Plain text
#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid "All was nice and rosy, pink unicorns happily roamed flowery meadows, double rainbows glowed on clear sunny skies, and developers developed mighty microservices all over the link:https://twitter.com/Grady_Booch/status/1154493591487537152[kuberspace]. Over time, some features that were originally omitted, such as decorators, were also implemented."
msgstr "Tudo era bonito e cor-de-rosa, unicórnios cor-de-rosa passeavam alegremente por prados floridos, arco-íris duplos brilhavam em céus claros e ensolarados, e os desenvolvedores desenvolviam poderosos microserviços em todo o  link:https://twitter.com/Grady_Booch/status/1154493591487537152[kuberspace]. Com o tempo, alguns recursos que foram originalmente omitidos, como decoradores, também foram implementados."

#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid ""
"Of course, some people tried to complain that Quarkus claims it implements CDI, while it really doesn't, because it doesn't pass the TCK, but we don't have to fuss over that.\n"
"The absence of these features has been clearly documented, and majestic exclusion lists have been a noble tradition in the CDI world since the beginning of time anyway."
msgstr "É claro que algumas pessoas tentaram reclamar que o Quarkus afirma que implementa o CDI, mas na verdade não o faz, porque não passa no TCK, mas não precisamos nos preocupar com isso. A ausência desses recursos foi claramente documentada, e as majestosas listas de exclusão têm sido uma nobre tradição no mundo do CDI desde o início dos tempos."

#. type: Title ==
#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy, no-wrap
msgid "CDI Lite"
msgstr "CDI Lite"

#. type: Plain text
#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid "ArC has quite successfully proven that there indeed is a small seed hidden in CDI, waiting to be watered and manured, waiting to grow and blossom and show to the world that CDI need not be just \"guiced\"; it can also be \"daggered\"."
msgstr "O ArC conseguiu provar que existe, de facto, uma pequena semente escondida na CDI, à espera de ser regada e adubada, à espera de crescer e florescer e de mostrar ao mundo que a CDI não precisa de ser apenas \"guiada\"; também pode ser \"adubada\"."

#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid ""
"A small group of engineers convened in Red Hat, trying to contrive a diabolical plan: could this be made part of CDI proper?\n"
"The idea was link:https://github.com/jakartaee/cdi/issues/425[discussed] externally and internally fairly extensively.\n"
"Fortunately, CDI was conceived at Red Hat, so we had all the experts, and the link:https://www.cdi-spec.org/news/2020/03/09/CDI_for_the_future/[first concrete idea] of how this could be done was published relatively soon."
msgstr "Um pequeno grupo de engenheiros se reuniu na Red Hat, tentando elaborar um plano diabólico: isso poderia fazer parte do CDI propriamente dito? A ideia foi link:https://github.com/jakartaee/cdi/issues/425[discutida] externa e internamente de forma bastante extensa. Felizmente, o CDI foi concebido na Red Hat, então tínhamos todos os especialistas, e a link:https://www.cdi-spec.org/news/2020/03/09/CDI_for_the_future/[primeira ideia concreta] de como isso poderia ser feito foi publicada relativamente cedo."

#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid ""
"A huge part of those discussions revolved around Portable Extensions.\n"
"As mentioned earlier, they cannot be supported at build time, so we knew early on that we had to design a new extension API.\n"
"(This is when yours truly enters the scene, not planning to leave until the curtain falls.)\n"
"We made several prototypes of various aspects of the API, including a new language model, and eventually link:https://www.cdi-spec.org/news/2020/09/15/CDI_Lite_extension/[published a proposal] (beware, the article is now severely outdated!).\n"
"We called it _Build Compatible Extensions_, to highlight the stark contrast with Portable Extensions: this API can be implemented both at build time and at runtime."
msgstr "Uma grande parte dessas discussões girou em torno das Portable Extensions. Conforme mencionado anteriormente, elas não podem ser suportadas no momento da compilação, portanto, sabíamos desde o início que tínhamos de criar uma nova API de extensão. (É nesse momento que o senhor entra em cena, não planejando sair até que a cortina caia). Fizemos vários protótipos de diversos aspectos da API, incluindo um novo modelo de linguagem, e, por fim, link:https://www.cdi-spec.org/news/2020/09/15/CDI_Lite_extension/[publicamos uma proposta] (cuidado, o artigo agora está muito desatualizado!). Nós a chamamos de _Build Compatible Extensions (Extensões compatíveis com_ compilação), para destacar o forte contraste com as Portable Extensions (Extensões portáteis): essa API pode ser implementada tanto no momento da compilação quanto no momento da execução."

#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid ""
"Publishing that proposal had two effects.\n"
"First, it has shown that communication is hard, online communication is harder and online communication in a non-native language is pretty darn painful.\n"
"Second, it has shown serious interest from us in doing the necessary work.\n"
"And it wasn't just us -- some Oracle people have also shown up, most notably Graeme Rocher of the Micronaut fame.\n"
"Over the subsequent year, the Core CDI specification was link:https://www.theserverside.com/blog/Coffee-Talk-Java-News-Stories-and-Opinions/CDI-Full-vs-CDI-Lite-What-changed-in-Contexts-and-Dependency-Injection-40[refactored] into CDI Lite and CDI Full, the Build Compatible Extensions API was link:https://jakartaee.github.io/cdi/2021/12/03/you-know-build-compatible-extensions.html[incorporated] (and for that, I actually implemented two prototypes, one in ArC and the other as a Portable Extension for Weld), the CDI TCK was split to support testing only CDI Lite implementations, and so on."
msgstr "A publicação dessa proposta teve dois efeitos. Primeiro, mostrou que a comunicação é difícil, a comunicação on-line é mais difícil e a comunicação on-line em um idioma não nativo é muito dolorosa. Em segundo lugar, demonstrou um sério interesse da nossa parte em fazer o trabalho necessário. E não fomos apenas nós - algumas pessoas da Oracle também apareceram, principalmente Graeme Rocher, famoso pelo Micronaut. No ano seguinte, a especificação Core CDI foi link:https://www.theserverside.com/blog/Coffee-Talk-Java-News-Stories-and-Opinions/CDI-Full-vs-CDI-Lite-What-changed-in-Contexts-and-Dependency-Injection-40[refatorada] em CDI Lite e CDI Full, a API Build Compatible Extensions foi link:https://jakartaee.github.io/cdi/2021/12/03/you-know-build-compatible-extensions.html[incorporada] (e, para isso, implementei dois protótipos, um no ArC e outro como Portable Extension for Weld), o CDI TCK foi dividido para suportar testes apenas de implementações CDI Lite e assim por diante."

#. type: Plain text
#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid "Finally, as part of Jakarta EE 10, CDI 4.0 was released, featuring the Lite specification, which became the cornerstone of Jakarta EE Core Profile, which in turn became the cornerstone of MicroProfile."
msgstr "Finalmente, como parte do Jakarta EE 10, foi lançado o CDI 4.0, com a especificação Lite, que se tornou a pedra angular do Jakarta EE Core Profile, que por sua vez se tornou a pedra angular do MicroProfile."

#. type: Plain text
#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid "End of story, go home? Not so fast."
msgstr "Fim da história, ir para casa? Não tão depressa."

#. type: Title ==
#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy, no-wrap
msgid "Compatible Implementation"
msgstr "Implementação compatível"

#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid ""
"Now that we have the CDI Lite specification, do we have any implementations?\n"
"Of course, all existing implementations of CDI become CDI Full implementations relatively easily; the hardest part is implementing the new extension API, which is possible using a Portable Extension.\n"
"But are there any _new_ implementations?\n"
"Is ArC a CDI Lite implementation now?\n"
"Is it verified by the TCK at last?"
msgstr "Agora que temos a especificação CDI Lite, temos alguma implementação? É claro que todas as implementações existentes do CDI se tornam implementações do CDI Full com relativa facilidade; a parte mais difícil é implementar a nova API de extensão, o que é possível usando uma Portable Extension. Mas existem _novas_ implementações? O ArC é uma implementação CDI Lite agora? Ele foi finalmente verificado pelo TCK?"

#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid ""
"We naturally intended for ArC to implement CDI Lite, but it wasn't just ArC.\n"
"The link:https://projects.eclipse.org/projects/ee4j.odi[Eclipse Open DI] project also strives to become a CDI Lite implementation, and it is built on top of the Micronaut framework.\n"
"I can't speak for that project, but I can say that working on the CDI Lite specification together with the talented people behind ODI was a great experience!"
msgstr "Naturalmente, pretendíamos que o ArC implementasse o CDI Lite, mas não foi apenas o ArC. O projeto link:https://projects.eclipse.org/projects/ee4j.odi[Eclipse Open DI] também se esforça para se tornar uma implementação do CDI Lite e foi desenvolvido com base na estrutura Micronaut. Não posso falar por esse projeto, mas posso dizer que trabalhar na especificação do CDI Lite junto com as pessoas talentosas por trás do ODI foi uma ótima experiência!"

#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid ""
"Now, when it comes to ArC, more work obviously ensued.\n"
"I fortunately already had an Arquillian adapter for ArC from the previous prototyping work (Arquillian is a testing framework the CDI TCK relies upon), and the other relevant TCKs are very easy to embed.\n"
"It wasn't too hard to start running them: the AtInject TCK, the CDI Lang Model TCK and the CDI Lite TCK.\n"
"We started running the TCKs with standalone ArC, to make the work easier and faster.\n"
"The CDI Lang Model TCK was always passing, as I was developing the implementation together with the specification, and getting the AtInject TCK to pass did not require too much time (it was mostly about implementing a precise resolution of overriden methods).\n"
"The CDI Lite TCK is clearly the most complex one; at the beginning, we had roughly 2/3 of the tests passing and the remaining 1/3 failing, for many different reasons."
msgstr "Agora, no que diz respeito ao ArC, obviamente houve mais trabalho. Felizmente, eu já tinha um adaptador Arquillian para o ArC do trabalho de prototipagem anterior (o Arquillian é uma estrutura de teste na qual o TCK do CDI se baseia), e os outros TCKs relevantes são muito fáceis de incorporar. Não foi muito difícil começar a executá-los: o TCK AtInject, o TCK CDI Lang Model e o TCK CDI Lite. Começamos a executar os TCKs com o ArC autônomo, para tornar o trabalho mais fácil e rápido. O TCK do CDI Lang Model sempre foi aprovado, pois eu estava desenvolvendo a implementação junto com a especificação, e fazer com que o TCK do AtInject fosse aprovado não exigiu muito tempo (tratava-se principalmente de implementar uma resolução precisa de métodos sobrepostos). O TCK do CDI Lite é claramente o mais complexo; no início, tínhamos cerca de 2/3 dos testes aprovados e o 1/3 restante reprovado, por vários motivos diferentes."

#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid ""
"During the Quarkus 2.16 development cycle, I created an initial exclusion list and we started closing the gap.\n"
"For a while, we had to work in an extra repository, until Quarkus moved from the `javax` dependencies to `jakarta`, but that was fairly simple to set up.\n"
"The Arquillian adapter needed improvements to correctly implement the CDI type discovery rules (because ArC leaves most of type discovery to the integrator).\n"
"Many validations were missing from ArC and we added those.\n"
"We even implemented some more features.\n"
"When standalone ArC was passing the TCKs, it didn't take much time to run them with full Quarkus too.\n"
"Overall, this link:https://github.com/quarkusio/quarkus/issues/28558[took] 26 pull requests and 109 commits, over the course of four to five months."
msgstr "Durante o ciclo de desenvolvimento do Quarkus 2.16, criei uma lista de exclusão inicial e começamos a fechar a lacuna. Por um tempo, tivemos que trabalhar em um repositório extra, até que o Quarkus passou das dependências do `javax` para o `jakarta` , mas isso foi bastante simples de configurar. O adaptador Arquillian precisava de melhorias para implementar corretamente as regras de descoberta de tipos CDI (porque o ArC deixa a maior parte da descoberta de tipos para o integrador). Muitas validações estavam faltando no ArC e nós as adicionamos. Até implementamos mais alguns recursos. Quando o ArC autônomo estava passando os TCKs, não levou muito tempo para executá-los também com o Quarkus completo. No total, link:https://github.com/quarkusio/quarkus/issues/28558[foram necessários] 26 pull requests e 109 commits, ao longo de quatro a cinco meses."

#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid ""
"We unfortunately also had to create a _strict mode_.\n"
"ArC has several usability improvements on top of the CDI specification, and a few of them go against the specification rules.\n"
"We recommend users to use the default mode which includes these improvements, but we also want to have an option to turn those improvements off, for people who value specification compatibility more."
msgstr "Infelizmente, também tivemos que criar um _modo restrito_ . O ArC tem vários aprimoramentos de usabilidade sobre a especificação CDI, e alguns deles vão contra as regras da especificação. Recomendamos que os usuários usem o modo padrão que inclui esses aprimoramentos, mas também queremos ter uma opção para desativar esses aprimoramentos, para as pessoas que valorizam mais a compatibilidade com a especificação."

#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid ""
"And since we are lazy people, like all decent programmers, running the TCKs is automated as part of the Quarkus Maven build (which means they also run on all pull requests to Quarkus that touch ArC).\n"
"If you want to try it yourself, it requires very little manual work."
msgstr "E como somos pessoas preguiçosas, como todos os programadores decentes, a execução dos TCKs é automatizada como parte da compilação do Quarkus Maven (o que significa que eles também são executados em todas as solicitações pull para o Quarkus que tocam o ArC). Se o senhor quiser experimentar por conta própria, é necessário muito pouco trabalho manual."

#. type: Plain text
#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid "Clone the Quarkus repository, if you don’t have it already:"
msgstr "Clone o repositório Quarkus, se ainda não o tiver:"

#. type: Plain text
#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid "Build Quarkus:"
msgstr "Construir Quarkus:"

#. type: Plain text
#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid "Run the AtInject TCK:"
msgstr "Execute o TCK AtInject:"

#. type: Plain text
#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid "Run the CDI Lang Model TCK:"
msgstr "Executar o CDI Lang Model TCK:"

#. type: Plain text
#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid "Run the CDI Lite TCK:"
msgstr "Executar o CDI Lite TCK:"

#. type: Plain text
#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid "If everything went fine, you should see the following outputs."
msgstr "Se tudo correu bem, deve ver os seguintes resultados."

#. type: Plain text
#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid "For AtInject:"
msgstr "Para AtInject:"

#. type: Plain text
#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid "For CDI Lang Model:"
msgstr "Para o modelo CDI Lang:"

#. type: Plain text
#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid "For CDI Lite:"
msgstr "Para CDI Lite:"

#. type: Plain text
#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid "And that's all, folks!"
msgstr "E é tudo, pessoal!"

#. type: Plain text
#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid "It is my pleasure to announce that Quarkus 3.2 successfully passes the AtInject TCK, the CDI Lang Model TCK and the CDI Lite TCK and hence becomes a compatible implementation of CDI Lite."
msgstr "Tenho o prazer de anunciar que o Quarkus 3.2 foi aprovado no AtInject TCK, no CDI Lang Model TCK e no CDI Lite TCK, tornando-se assim uma implementação compatível do CDI Lite."

#: _posts/2023-07-12-on-the-road-to-cdi-compatibility.adoc
#, fuzzy
msgid ""
"I would also like to extend my sincere gratitude to Martin Kouba and Matěj Novotný, our resident CDI gurus, for welcoming me and sharing with me their deep knowledge of the subject.\n"
"I mostly just tried to not wreck their code.\n"
"(Which, over time, also became my code, I guess. Whoops!)"
msgstr "Também gostaria de estender minha sincera gratidão a Martin Kouba e Matěj Novotný, nossos gurus residentes de CDI, por me receberem e compartilharem comigo seu profundo conhecimento do assunto. Na maior parte do tempo, eu apenas tentei não destruir o código deles. (Que, com o tempo, também se tornou meu código, eu acho. Ops!)"
