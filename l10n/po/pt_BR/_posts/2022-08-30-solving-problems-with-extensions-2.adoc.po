# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:1
#, no-wrap
msgid "gsmet"
msgstr ""

#. type: YAML Front Matter: date
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:1
#, no-wrap
msgid "2022-08-30"
msgstr ""

#. type: YAML Front Matter: layout
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:1
#, no-wrap
msgid "post"
msgstr ""

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:1
#, no-wrap
msgid "The unique build infrastructure of Quarkus allows you to solve complex issues in a very simple way by developing custom extensions."
msgstr ""

#. type: YAML Front Matter: tags
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:1
#, no-wrap
msgid "extensions development-tips"
msgstr ""

#. type: YAML Front Matter: title
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:1
#, no-wrap
msgid "Solving problems with Quarkus extensions (2/n)"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:13
msgid "We are all good: 2 posts make a series!"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:15
msgid "If you haven't looked at the first post of this series, I invite you to link:/blog/solving-problems-with-extensions/[read it]!"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:18
#, no-wrap
msgid ""
"**Problem of the day:** A library is using the `@Inject` annotation to handle its internal injection and, when used on beans, that will conflict with the CDI injection we have in Quarkus.\n"
"Leading to the impossibility for the CDI layer to inject these objects as they are not CDI beans.\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:19
#, no-wrap
msgid "Some context"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:23
msgid "As for the first post of the series, this post is based on my work on https://github.com/quarkiverse/quarkus-github-app[the Quarkus GitHub App extension] that allows you to develop GitHub Apps based on Quarkus at light speed with very little boilerplate."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:26
msgid "The newest feature of this extension is the ability to easily develop comment-based commands in your GitHub apps.  For instance, do something when a user posts a `@bot do-something` in a comment of a pull request."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:29
msgid "While it is possible to implement it all by yourself with the standard features of Quarkus GitHub App, we developed an additional extension to make things even easier."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:31
msgid "Implementing a comment-based command with this extension is as easy as:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:36
#, no-wrap
msgid ""
"@Cli(name = \"@bot\", commands = { DoSomething.class }) \n"
"public class MyFirstCli {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:39
#, no-wrap
msgid ""
"    @Command(name = \"do-something\") \n"
"    static class DoSomething implements Runnable { \n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:46
#, no-wrap
msgid ""
"        @Override\n"
"        public void run() { \n"
"            // do something\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:49
msgid "The `run()` method of the `DoSomething` class will be called any time a user posts `@bot do-something` as a comment in an issue or pull request."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:51
msgid "These are the basics but the extension has a ton of other features such as reaction-based feedback, scopes, permissions..."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:55
msgid "This extension is based on the https://rvesse.github.io/airline/[Airline library].  This library is designed to easily parse and execute command lines.  While originally designed to develop CLI applications, it is a perfect fit for our usage."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:57
msgid "One problem that we have with this library is that it uses the `@Inject` annotation for injecting some objects into commands such as `GlobalMetadata`:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:62
#, no-wrap
msgid ""
"@Command(name = \"do-something\") \n"
"static class DoSomething implements Runnable { \n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:65
#, no-wrap
msgid ""
"    @Inject\n"
"    GlobalMetadata metadata;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:71
#, no-wrap
msgid ""
"    @Override\n"
"    public void run() { \n"
"        // do something\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:75
msgid "This is a problem for us as this `@Inject` annotation is used by CDI injection and, in the context of our extension, the `@Command` classes are CDI beans.  Thus, this particular `@Inject` annotation will also be interpreted by ArC, our CDI implementation, and ArC will try to inject `GlobalMetadata` as a CDI bean... and fail because it is not a CDI bean."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:77
msgid "Suffice to say it won't work very well and we need to fix it."
msgstr ""

#. type: delimited block =
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:81
msgid "Not making `@Command` classes CDI beans is NOT an option as we want regular CDI injection to work."
msgstr ""

#. type: Title ==
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:83
#, no-wrap
msgid "How can we work around this?"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:87
msgid "Ideally, the Airline library wouldn't use the `@Inject` annotation for its internal purpose and the good news is, in the latest versions, the annotation used for injection can be specified."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:89
msgid "But for the sake of the exercise, let's stick to the previous Airline version."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:91
msgid "So now what?"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:94
msgid "The set of classes the Airline library is susceptible to inject is limited: it is used to inject a limited number of classes and to handle composition (i.e. sharing components across several commands)."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:96
msgid "For these use cases, we somehow need ArC to ignore the injection points."
msgstr ""

#. type: Title ==
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:97
#, no-wrap
msgid "AnnotationTransformers to the rescue"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:101
msgid "If you are familiar with Quarkus, you are probably familiar with the notion of Jandex index.  In Quarkus, we build indexes of the project annotations and these indexes are used by our core and extensions to find annotations (and more)."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:103
msgid "ArC, our CDI implementation, is one of the components that consumes the Jandex indexes."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:105
msgid "Interestingly though, ArC does not consume the Jandex index as is:"
msgstr ""

#. type: Target for macro image
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:106
#, no-wrap
msgid "annotations-transformers.svg"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:110
msgid "Annotations transformers can add, remove, update existing annotations before consumption by ArC.  These are used by several features in Quarkus, for instance Hibernate Validator interceptor support."
msgstr ""

#. type: delimited block =
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:114
msgid "Annotations transformers do NOT modify the original classes, nor do they modify the Jandex indexes."
msgstr ""

#. type: delimited block =
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:116
msgid "Using annotations transfomers will solely impact ArC, our CDI implementation."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:121
msgid "This behavior is of great interest to us: we could hide the annotations from ArC using an annotations transformer while keeping them available for Airline to consume them via reflection."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:123
msgid "Let's create our annotations transformer:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:127
#, no-wrap
msgid "public class HideAirlineInjectAnnotationsTransformer implements AnnotationsTransformer { <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:129
#, no-wrap
msgid "    private final IndexView index;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:133
#, no-wrap
msgid ""
"    HideAirlineInjectAnnotationsTransformer(IndexView index) { <2>\n"
"        this.index = index;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:138
#, no-wrap
msgid ""
"    @Override\n"
"    public boolean appliesTo(Kind kind) {\n"
"        return Kind.FIELD == kind; <3>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:142
#, no-wrap
msgid ""
"    @Override\n"
"    public void transform(TransformationContext transformationContext) {\n"
"        FieldInfo fieldInfo = transformationContext.getTarget().asField();\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:146
#, no-wrap
msgid ""
"        if (!fieldInfo.hasAnnotation(DotNames.INJECT)) { <4>\n"
"            return;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:156
#, no-wrap
msgid ""
"        if (fieldInfo.hasAnnotation(ARGUMENTS) ||\n"
"                fieldInfo.hasAnnotation(OPTION) ||\n"
"                GLOBAL_METADATA.equals(fieldInfo.type().name()) || <5>\n"
"                COMMAND_GROUP_METADATA.equals(fieldInfo.type().name()) ||\n"
"                COMMAND_METADATA.equals(fieldInfo.type().name()) ||\n"
"                isComposition(fieldInfo)) { <6>\n"
"            transformationContext.transform().remove(ai -> DotNames.INJECT.equals(ai.name())).done(); <7>\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:159
#, no-wrap
msgid ""
"    private boolean isComposition(FieldInfo fieldInfo) { <8>\n"
"        Type fieldType = fieldInfo.type();\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:163
#, no-wrap
msgid ""
"        if (fieldType.kind() != Type.Kind.CLASS) {\n"
"            return false;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:165
#, no-wrap
msgid "        ClassInfo fieldClass = index.getClassByName(fieldType.asClassType().name());\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:169
#, no-wrap
msgid ""
"        if (fieldClass == null) {\n"
"            return false;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:171
#, no-wrap
msgid "        Set<DotName> fieldClassAnnotations = fieldClass.annotationsMap().keySet();\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:175
#, no-wrap
msgid ""
"        return fieldClassAnnotations.contains(ARGUMENTS) || fieldClassAnnotations.contains(OPTION);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:177
msgid "Our class implements `AnnotationsTransformer`."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:178
msgid "We inject the Jandex index in our transformer as we will need it to detect composition."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:179
msgid "We are only interested in fields so let's apply our transformer to fields only."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:180
msgid "If the field is not annotated with `@Inject`, it is of no interest to us."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:181
msgid "If the field type is `GlobalMetadata`, `GroupMetadata` or `CommandMetadata`, we know it is the responsibility of Airline to inject it."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:182
msgid "We are also detecting composition."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:184
msgid "We remove the `@Inject` annotation from the transformed view visible to ArC.  Make sure you don't forget to finalize the transformation with `.done()`."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:185
msgid "For composition, we detect if the field is of a type that contains `@Arguments` or `@Option` annotations."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:188
msgid "Now that we have created our annotations transformer, we need to make sure Quarkus knows about it."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:190
msgid "As usual, for the Quarkus build process, you just need to produce a `BuildItem` to register the annotations transformer:"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:199
#, no-wrap
msgid ""
"@BuildStep\n"
"public void beanConfig(CombinedIndexBuildItem index,\n"
"        BuildProducer<AnnotationsTransformerBuildItem> annotationsTransformer) {\n"
"    annotationsTransformer\n"
"            .produce(new AnnotationsTransformerBuildItem(new HideAirlineInjectAnnotationsTransformer(index.getIndex())));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:203
msgid "And that's it, from now on, the `@Inject` annotations consumed by the Airline library will be hidden from ArC, while still being visible from the Airline library, which uses reflection."
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:205
msgid "Regular CDI injection is still supported as only the `@Inject` annotations handled by Airline are hidden from ArC."
msgstr ""

#. type: Title ==
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:206
#, no-wrap
msgid "Conclusion"
msgstr ""

#. type: Plain text
#: upstream/_posts/2022-08-30-solving-problems-with-extensions-2.adoc:209
msgid "Once again, we have seen how the unique build infrastructure of Quarkus can solve real life issues with very little boilerplate.  And that with unified concepts that are very easy to grasp."
msgstr ""
