# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-29 08:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: upstream/_guides/security-webauthn.adoc:7
#, fuzzy, no-wrap
msgid "Using Security with WebAuthn"
msgstr "Utilizar a segurança com o WebAuthn"

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:16
#, fuzzy
msgid "This guide demonstrates how your Quarkus application can use WebAuthn authentication instead of passwords."
msgstr "Este guia demonstra como a sua aplicação Quarkus pode utilizar a autenticação WebAuthn em vez de palavras-passe."

#. type: Title ==
#: upstream/_guides/security-webauthn.adoc:19
#, fuzzy, no-wrap
msgid "Prerequisites"
msgstr "Pré-requisitos"

#. type: Title ==
#: upstream/_guides/security-webauthn.adoc:23
#, fuzzy, no-wrap
msgid "Introduction to WebAuthn"
msgstr "Introdução ao WebAuthn"

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:28
#, fuzzy
msgid "https://webauthn.guide/[WebAuthn] is an authentication mechanism designed to replace passwords. In short, every time you write a service for registering new users, or logging them in, instead of asking for a password, you use WebAuthn, which will replace the password."
msgstr "link:https://webauthn.guide/[O WebAuthn] é um mecanismo de autenticação concebido para substituir as palavras-passe. Resumindo, sempre que escrever um serviço para registar novos utilizadores ou para os iniciar, em vez de pedir uma palavra-passe, utilize o WebAuthn, que substituirá a palavra-passe."

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:33
#, fuzzy
msgid "WebAuthn replaces the password with a proof of identity. In practice, users, instead of having to invent a password, store it or remember it, will use a hardware token that will generate a proof of identity specifically for your service or website. This can be done by asking users to press their thumb on their phone, or pressing a button on a https://www.yubico.com[YubiKey] on a computer."
msgstr "O WebAuthn substitui a palavra-passe por uma prova de identidade. Na prática, os utilizadores, em vez de terem de inventar uma palavra-passe, guardá-la ou recordá-la, utilizarão um token de hardware que gerará uma prova de identidade específica para o seu serviço ou sítio Web. Isto pode ser feito pedindo aos utilizadores que pressionem o polegar no telemóvel ou que pressionem um botão de uma  link:https://www.yubico.com[YubiKey] num computador."

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:38
#, fuzzy
msgid "So, when you register your user, you use your browser to enter your user information (username, your name, etc…)  and instead of typing a password to identify yourself, you click a button which will invoke the WebAuthn browser API which will ask you to do something (press a button, use your fingerprint). Then, your browser will generate a proof of identity which you can send to your service instead of a password."
msgstr "Assim, quando regista o seu utilizador, utiliza o seu programa de navegação para introduzir as suas informações de utilizador (nome de utilizador, o seu nome, etc.) e, em vez de introduzir uma palavra-passe para se identificar, clica num botão que invoca a API do programa de navegação WebAuthn, que lhe pede para fazer algo (premir um botão, utilizar a sua impressão digital). Em seguida, o browser gera uma prova de identidade que pode ser enviada ao serviço em vez de uma palavra-passe."

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:45
#, fuzzy
msgid "This proof of identity, when you register, consists mostly in a public key. Actually there's a lot of stuff in there but the most interesting is the public key. This public key is not stored on your device, or your browser.  It is generated especially for the target service (tied to its URI), and derived from the hardware authenticator.  So the association of the hardware authenticator and the target service will always derive the same private and public key pair, none of which are stored anywhere. You can for example, take your YubiKey to another computer and it will keep generating the same private/public keys for the same target service."
msgstr "Esta prova de identidade, quando se regista, consiste principalmente numa chave pública. Na verdade, há muitas coisas lá dentro, mas o mais interessante é a chave pública. Esta chave pública não é armazenada no seu dispositivo, nem no seu browser. É gerada especialmente para o serviço alvo (associada ao seu URI) e derivada do autenticador de hardware. Assim, a associação do autenticador de hardware e do serviço de destino derivará sempre o mesmo par de chaves públicas e privadas, nenhuma das quais está armazenada em lado nenhum. Pode, por exemplo, levar a sua YubiKey para outro computador e esta continuará a gerar as mesmas chaves privadas/públicas para o mesmo serviço de destino."

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:48
#, fuzzy
msgid "So, when you register, you send (mostly) a public key instead of a password, and the service stores that information as WebAuthn credentials for your new user account, and this is what will identify you later."
msgstr "Assim, quando se regista, envia (principalmente) uma chave pública em vez de uma palavra-passe, e o serviço armazena essa informação como credenciais WebAuthn para a sua nova conta de utilizador, e é isso que o identificará mais tarde."

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:54
#, fuzzy
msgid "Then, when you need to log in to that service, instead of typing your password (which doesn't exist, remember?), you press a button on the login form, and the browser will ask you to do something, and then it will send a signature to your service instead of a password. That signature requires the private key that is derived from your authenticator hardware and the target service, and so when your service receives it, it can verify that it corresponds to the signature of the public key you stored as credentials."
msgstr "Depois, quando precisar de iniciar sessão nesse serviço, em vez de digitar a sua palavra-passe (que não existe, lembra-se?), carrega num botão no formulário de início de sessão e o browser pede-lhe para fazer alguma coisa, enviando depois uma assinatura para o seu serviço em vez de uma palavra-passe. Essa assinatura requer a chave privada derivada do seu hardware autenticador e do serviço de destino, pelo que, quando o seu serviço a recebe, pode verificar se corresponde à assinatura da chave pública que guardou como credenciais."

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:57
#, fuzzy
msgid "So, to recap: registration sends a generated public key instead of a password, and login sends a signature for that public key, allowing you to verify that the user is who they were when they registered."
msgstr "Assim, recapitulando: o registo envia uma chave pública gerada em vez de uma palavra-passe e o início de sessão envia uma assinatura para essa chave pública, permitindo verificar se o utilizador é quem era quando se registou."

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:62
#, fuzzy
msgid "In practice, it's a little more complex, because there needs to be a handshake with the server before you can use the hardware authenticator (ask for a challenge and other things), so there are always two calls to your service: one before login or registration, before calling the hardware authenticator, and then the normal login or registration."
msgstr "Na prática, é um pouco mais complexo, porque é necessário um aperto de mão com o servidor antes de poder utilizar o autenticador de hardware (pedir um desafio e outras coisas), pelo que há sempre duas chamadas ao seu serviço: uma antes do início de sessão ou do registo, antes de chamar o autenticador de hardware e, em seguida, o início de sessão ou o registo normal."

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:64
#, fuzzy
msgid "And also there are a lot more fields to store than just a public key, but we will help you with that."
msgstr "Além disso, existem muitos mais campos para armazenar do que apenas uma chave pública, mas iremos ajudá-lo com isso."

#. type: Title ==
#: upstream/_guides/security-webauthn.adoc:65
#, fuzzy, no-wrap
msgid "Architecture"
msgstr "Arquitetura"

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:68
#, fuzzy
msgid "In this example, we build a very simple microservice which offers four endpoints:"
msgstr "Neste exemplo, criámos um microsserviço muito simples que oferece quatro pontos finais:"

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:70
#, fuzzy
msgid "`/api/public`"
msgstr "`/api/public`"

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:71
#, fuzzy
msgid "`/api/public/me`"
msgstr "`/api/public/me`"

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:72
#, fuzzy
msgid "`/api/users/me`"
msgstr "`/api/users/me`"

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:73
#, fuzzy
msgid "`/api/admin`"
msgstr "`/api/admin`"

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:78
#, fuzzy
msgid "The `/api/public` endpoint can be accessed anonymously.  The `/api/public/me` endpoint can be accessed anonymously and returns the current username if there is one, or `<not logged in>` if not.  The `/api/admin` endpoint is protected with RBAC (Role-Based Access Control) where only users granted with the `admin` role can access. At this endpoint, we use the `@RolesAllowed` annotation to declaratively enforce the access constraint.  The `/api/users/me` endpoint is also protected with RBAC (Role-Based Access Control) where only users granted with the `user` role can access. As a response, it returns a JSON document with details about the user."
msgstr "O ponto de extremidade `/api/public` pode ser acedido anonimamente. O ponto de extremidade `/api/public/me` pode ser acedido anonimamente e devolve o nome de utilizador atual, se existir, ou `&amp;lt;not logged in&amp;gt;`, se não existir. O ponto de extremidade `/api/admin` está protegido com RBAC (Controlo de Acesso Baseado em Funções), em que apenas os utilizadores com a função `admin` podem aceder. Neste ponto de extremidade, usamos a anotação `@RolesAllowed` para impor declarativamente a restrição de acesso. O ponto de extremidade `/api/users/me` também está protegido com RBAC (Controlo de Acesso Baseado em Funções), em que apenas os utilizadores com a função `user` podem aceder. Como resposta, devolve um documento JSON com detalhes sobre o utilizador."

#. type: Title ==
#: upstream/_guides/security-webauthn.adoc:79
#, fuzzy, no-wrap
msgid "Solution"
msgstr "Solução"

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:83
#, fuzzy
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "Recomendamos que siga as instruções nas secções seguintes e crie a aplicação passo a passo. No entanto, pode ir diretamente para o exemplo completo."

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:85
#, fuzzy
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Clonar o repositório Git: `git clone {quickstarts-clone-url}`, ou descarregar um {quickstarts-archive-url}[arquivo]."

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:87
#, fuzzy
msgid "The solution is located in the `security-webauthn-quickstart` link:{quickstarts-tree-url}/security-webauthn-quickstart[directory]."
msgstr "A solução está localizada no  link:{quickstarts-tree-url}/security-webauthn-quickstart[diretório] `security-webauthn-quickstart`."

#. type: Title ==
#: upstream/_guides/security-webauthn.adoc:88
#, fuzzy, no-wrap
msgid "Creating the Maven Project"
msgstr "Criar o projeto Maven"

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:91
#, fuzzy
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "Primeiro, precisamos de um novo projeto. Crie um novo projeto com o seguinte comando:"

#. type: delimited block =
#: upstream/_guides/security-webauthn.adoc:99
#, fuzzy
msgid "Don't forget to add the database connector library of choice. Here we are using PostgreSQL as identity store."
msgstr "Não se esqueça de adicionar a biblioteca do conetor de base de dados da sua escolha. Neste caso, estamos a utilizar o PostgreSQL como armazenamento de identidades."

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:103
#, fuzzy
msgid "This command generates a Maven project, importing the `security-webauthn` extension which allows you to use WebAuthn to authenticate users."
msgstr "Este comando gera um projeto Maven, importando a extensão `security-webauthn` que lhe permite utilizar o WebAuthn para autenticar utilizadores."

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:106
#, fuzzy
msgid "If you already have your Quarkus project configured, you can add the `security-webauthn` extension to your project by running the following command in your project base directory:"
msgstr "Se já tiver o seu projeto Quarkus configurado, pode adicionar a extensão `security-webauthn` ao seu projeto executando o seguinte comando no diretório de base do seu projeto:"

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:111
#, fuzzy
msgid "This will add the following to your build file:"
msgstr "Isto irá adicionar o seguinte ao seu ficheiro de compilação:"

#. type: Block title
#: upstream/_guides/security-webauthn.adoc:113
#: upstream/_guides/security-webauthn.adoc:1068
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:119
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-security-webauthn</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/security-webauthn.adoc:122
#: upstream/_guides/security-webauthn.adoc:1077
#, fuzzy, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:125
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-security-webauthn\")\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-webauthn.adoc:127
#, fuzzy, no-wrap
msgid "Writing the application"
msgstr "Escrever a aplicação"

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:130
#, fuzzy
msgid "Let's start by implementing the `/api/public` endpoint. As you can see from the source code below, it is just a regular Jakarta REST resource:"
msgstr "Vamos começar implementando o ponto de extremidade `/api/public`. Como pode ver no código-fonte abaixo, é apenas um recurso Jakarta REST normal:"

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:134
#: upstream/_guides/security-webauthn.adoc:169
#: upstream/_guides/security-webauthn.adoc:194
#: upstream/_guides/security-webauthn.adoc:222
#: upstream/_guides/security-webauthn.adoc:341
#: upstream/_guides/security-webauthn.adoc:366
#: upstream/_guides/security-webauthn.adoc:414
#: upstream/_guides/security-webauthn.adoc:936
#, no-wrap
msgid "package org.acme.security.webauthn;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:136
#, no-wrap
msgid "import java.security.Principal;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:143
#, no-wrap
msgid ""
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.Context;\n"
"import jakarta.ws.rs.core.MediaType;\n"
"import jakarta.ws.rs.core.SecurityContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:146
#, no-wrap
msgid ""
"@Path(\"/api/public\")\n"
"public class PublicResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:152
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String publicResource() {\n"
"        return \"public\";\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:161
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/me\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String me(@Context SecurityContext securityContext) {\n"
"        Principal user = securityContext.getUserPrincipal();\n"
"        return user != null ? user.getName() : \"<not logged in>\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:164
#, fuzzy
msgid "The source code for the `/api/admin` endpoint is also very simple. The main difference here is that we are using a `@RolesAllowed` annotation to make sure that only users granted with the `admin` role can access the endpoint:"
msgstr "O código-fonte do ponto de extremidade `/api/admin` também é muito simples. A principal diferença aqui é que estamos a utilizar uma anotação `@RolesAllowed` para garantir que apenas os utilizadores com a função `admin` podem aceder ao ponto final:"

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:175
#, no-wrap
msgid ""
"import jakarta.annotation.security.RolesAllowed;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:178
#, no-wrap
msgid ""
"@Path(\"/api/admin\")\n"
"public class AdminResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:186
#, no-wrap
msgid ""
"    @GET\n"
"    @RolesAllowed(\"admin\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String adminResource() {\n"
"         return \"admin\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:190
#, fuzzy
msgid "Finally, let's consider the `/api/users/me` endpoint. As you can see from the source code below, we are trusting only users with the `user` role.  We are using `SecurityContext` to get access to the current authenticated Principal and we return the user's name. This information is loaded from the database."
msgstr "Por fim, vamos considerar o ponto de extremidade `/api/users/me`. Como você pode ver no código-fonte abaixo, estamos confiando apenas em usuários com a função `user`. Estamos usando `SecurityContext` para obter acesso ao Principal autenticado atual e retornamos o nome do usuário. Essas informações são carregadas do banco de dados."

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:200
#, no-wrap
msgid ""
"import jakarta.annotation.security.RolesAllowed;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.core.Context;\n"
"import jakarta.ws.rs.core.SecurityContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:203
#, no-wrap
msgid ""
"@Path(\"/api/users\")\n"
"public class UserResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:211
#, no-wrap
msgid ""
"    @GET\n"
"    @RolesAllowed(\"user\")\n"
"    @Path(\"/me\")\n"
"    public String me(@Context SecurityContext securityContext) {\n"
"        return securityContext.getUserPrincipal().getName();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-webauthn.adoc:213
#, fuzzy, no-wrap
msgid "Storing our WebAuthn credentials"
msgstr "Armazenar as nossas credenciais WebAuthn"

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:218
#, fuzzy
msgid "We can now describe how our WebAuthn credentials are stored in our database with three entities. Note that we've simplified the model in order to only store one credential per user (who could actually have more than one WebAuthn credential and other data such as roles):"
msgstr "Podemos agora descrever como as nossas credenciais WebAuthn são armazenadas na nossa base de dados com três entidades. Note-se que simplificámos o modelo de modo a armazenar apenas uma credencial por utilizador (que pode, na verdade, ter mais do que uma credencial WebAuthn e outros dados, como funções):"

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:225
#, no-wrap
msgid ""
"import java.util.ArrayList;\n"
"import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:231
#, no-wrap
msgid ""
"import jakarta.persistence.Entity;\n"
"import jakarta.persistence.OneToMany;\n"
"import jakarta.persistence.OneToOne;\n"
"import jakarta.persistence.Table;\n"
"import jakarta.persistence.UniqueConstraint;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:236
#, no-wrap
msgid ""
"import io.quarkus.hibernate.reactive.panache.PanacheEntity;\n"
"import io.smallrye.mutiny.Uni;\n"
"import io.vertx.ext.auth.webauthn.Authenticator;\n"
"import io.vertx.ext.auth.webauthn.PublicKeyCredential;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:240
#, no-wrap
msgid ""
"@Table(uniqueConstraints = @UniqueConstraint(columnNames = {\"userName\", \"credID\"}))\n"
"@Entity\n"
"public class WebAuthnCredential extends PanacheEntity {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:245
#, no-wrap
msgid ""
"    /**\n"
"     * The username linked to this authenticator\n"
"     */\n"
"    public String userName;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:250
#, no-wrap
msgid ""
"    /**\n"
"     * The type of key (must be \"public-key\")\n"
"     */\n"
"    public String type = \"public-key\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:255
#, no-wrap
msgid ""
"    /**\n"
"     * The non user identifiable id for the authenticator\n"
"     */\n"
"    public String credID;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:260
#, no-wrap
msgid ""
"    /**\n"
"     * The public key associated with this authenticator\n"
"     */\n"
"    public String publicKey;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:265
#, no-wrap
msgid ""
"    /**\n"
"     * The signature counter of the authenticator to prevent replay attacks\n"
"     */\n"
"    public long counter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:267
#, no-wrap
msgid "    public String aaguid;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:283
#, no-wrap
msgid ""
"    /**\n"
"     * The Authenticator attestation certificates object, a JSON like:\n"
"     * <pre>{@code\n"
"     *   {\n"
"     *     \"alg\": \"string\",\n"
"     *     \"x5c\": [\n"
"     *       \"base64\"\n"
"     *     ]\n"
"     *   }\n"
"     * }</pre>\n"
"     */\n"
"    /**\n"
"     * The algorithm used for the public credential\n"
"     */\n"
"    public PublicKeyCredential alg;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:289
#, no-wrap
msgid ""
"    /**\n"
"     * The list of X509 certificates encoded as base64url.\n"
"     */\n"
"    @OneToMany(mappedBy = \"webAuthnCredential\")\n"
"    public List<WebAuthnCertificate> x5c = new ArrayList<>();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:291
#, no-wrap
msgid "    public String fmt;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:295
#, no-wrap
msgid ""
"    // owning side\n"
"    @OneToOne\n"
"    public User user;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:298
#, no-wrap
msgid ""
"    public WebAuthnCredential() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:321
#, no-wrap
msgid ""
"    public WebAuthnCredential(Authenticator authenticator, User user) {\n"
"        aaguid = authenticator.getAaguid();\n"
"        if(authenticator.getAttestationCertificates() != null)\n"
"            alg = authenticator.getAttestationCertificates().getAlg();\n"
"        counter = authenticator.getCounter();\n"
"        credID = authenticator.getCredID();\n"
"        fmt = authenticator.getFmt();\n"
"        publicKey = authenticator.getPublicKey();\n"
"        type = authenticator.getType();\n"
"        userName = authenticator.getUserName();\n"
"        if(authenticator.getAttestationCertificates() != null\n"
"                && authenticator.getAttestationCertificates().getX5c() != null) {\n"
"            for (String x5c : authenticator.getAttestationCertificates().getX5c()) {\n"
"                WebAuthnCertificate cert = new WebAuthnCertificate();\n"
"                cert.x5c = x5c;\n"
"                cert.webAuthnCredential = this;\n"
"                this.x5c.add(cert);\n"
"            }\n"
"        }\n"
"        this.user = user;\n"
"        user.webAuthnCredential = this;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:325
#, no-wrap
msgid ""
"    public static Uni<List<WebAuthnCredential>> findByUserName(String userName) {\n"
"        return list(\"userName\", userName);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:329
#, no-wrap
msgid ""
"    public static Uni<List<WebAuthnCredential>> findByCredID(String credID) {\n"
"        return list(\"credID\", credID);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:334
#, no-wrap
msgid ""
"    public <T> Uni<T> fetch(T association) {\n"
"        return getSession().flatMap(session -> session.fetch(association));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:337
#, fuzzy
msgid "We also need a second entity for the credentials:"
msgstr "Precisamos também de uma segunda entidade para as credenciais:"

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:344
#, no-wrap
msgid ""
"import jakarta.persistence.Entity;\n"
"import jakarta.persistence.ManyToOne;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:346
#, no-wrap
msgid "import io.quarkus.hibernate.reactive.panache.PanacheEntity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:350
#, no-wrap
msgid ""
"@Entity\n"
"public class WebAuthnCertificate extends PanacheEntity {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:353
#, no-wrap
msgid ""
"    @ManyToOne\n"
"    public WebAuthnCredential webAuthnCredential;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:359
#, no-wrap
msgid ""
"    /**\n"
"     * The list of X509 certificates encoded as base64url.\n"
"     */\n"
"    public String x5c;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:362
#, fuzzy
msgid "And last but not least, our user entity:"
msgstr "E por último, mas não menos importante, a nossa entidade de utilizador:"

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:371
#, no-wrap
msgid ""
"import jakarta.persistence.Column;\n"
"import jakarta.persistence.Entity;\n"
"import jakarta.persistence.OneToOne;\n"
"import jakarta.persistence.Table;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:374
#, no-wrap
msgid ""
"import io.quarkus.hibernate.reactive.panache.PanacheEntity;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:378
#, no-wrap
msgid ""
"@Table(name = \"user_table\")\n"
"@Entity\n"
"public class User extends PanacheEntity {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:381
#, no-wrap
msgid ""
"    @Column(unique = true)\n"
"    public String userName;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:385
#, no-wrap
msgid ""
"    // non-owning side, so we can add more credentials later\n"
"    @OneToOne(mappedBy = \"user\")\n"
"    public WebAuthnCredential webAuthnCredential;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:390
#, no-wrap
msgid ""
"    public static Uni<User> findByUserName(String userName) {\n"
"        return find(\"userName\", userName).firstResult();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/security-webauthn.adoc:392
#, fuzzy, no-wrap
msgid "A note about usernames and credential IDs"
msgstr "Uma nota sobre nomes de utilizador e IDs de credenciais"

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:395
#, fuzzy
msgid "WebAuthn relies on a combination of usernames (unique per user) and credential IDs (unique per authenticator device)."
msgstr "O WebAuthn baseia-se numa combinação de nomes de utilizador (únicos por utilizador) e IDs de credenciais (únicos por dispositivo autenticador)."

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:397
#, fuzzy
msgid "The reasons why there are two such identifiers, and why they are not unique keys for the credentials themselves are:"
msgstr "As razões pelas quais existem dois identificadores deste tipo e porque não são chaves únicas para as próprias credenciais são:"

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:400
#, fuzzy
msgid "A single user can have more than one authenticator device, which means a single username can map to multiple credential IDs, all of which identify the same user."
msgstr "Um único utilizador pode ter mais do que um dispositivo autenticador, o que significa que um único nome de utilizador pode ser mapeado para várias IDs de credenciais, todas elas identificando o mesmo utilizador."

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:402
#, fuzzy
msgid "An authenticator device may be shared by multiple users, because a single person may want multiple user accounts with different usernames, all of which having the same authenticator device. So a single credential ID may be used by multiple different users."
msgstr "Um dispositivo autenticador pode ser partilhado por vários utilizadores, porque uma única pessoa pode querer várias contas de utilizador com nomes de utilizador diferentes, todas elas com o mesmo dispositivo autenticador. Assim, uma única ID de credencial pode ser utilizada por vários utilizadores diferentes."

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:404
#, fuzzy
msgid "The combination of username and credential ID should be a unicity constraint for your credentials table, though."
msgstr "No entanto, a combinação de nome de utilizador e ID de credencial deve ser uma restrição de unicidade para a sua tabela de credenciais."

#. type: Title ===
#: upstream/_guides/security-webauthn.adoc:405
#, fuzzy, no-wrap
msgid "Exposing your entities to Quarkus WebAuthn"
msgstr "Expor as suas entidades ao Quarkus WebAuthn"

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:410
#, fuzzy
msgid "You need to define a bean implementing the `WebAuthnUserProvider` in order to allow the Quarkus WebAuthn extension to load and store credentials. This is where you tell Quarkus how to turn your data model into the WebAuthn security model:"
msgstr "É necessário definir um bean que implemente o `WebAuthnUserProvider` para permitir que a extensão WebAuthn do Quarkus carregue e armazene credenciais. É aqui que diz ao Quarkus como transformar o seu modelo de dados no modelo de segurança WebAuthn:"

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:420
#, no-wrap
msgid ""
"import java.util.ArrayList;\n"
"import java.util.Collections;\n"
"import java.util.HashSet;\n"
"import java.util.List;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:422
#: upstream/_guides/security-webauthn.adoc:1283
#, no-wrap
msgid "import jakarta.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:428
#, no-wrap
msgid ""
"import io.quarkus.hibernate.reactive.panache.common.runtime.ReactiveTransactional;\n"
"import io.quarkus.security.webauthn.WebAuthnUserProvider;\n"
"import io.smallrye.mutiny.Uni;\n"
"import io.vertx.ext.auth.webauthn.AttestationCertificates;\n"
"import io.vertx.ext.auth.webauthn.Authenticator;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:431
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyWebAuthnSetup implements WebAuthnUserProvider {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:438
#, no-wrap
msgid ""
"    @ReactiveTransactional\n"
"    @Override\n"
"    public Uni<List<Authenticator>> findWebAuthnCredentialsByUserName(String userName) {\n"
"        return WebAuthnCredential.findByUserName(userName)\n"
"                .flatMap(MyWebAuthnSetup::toAuthenticators);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:445
#, no-wrap
msgid ""
"    @ReactiveTransactional\n"
"    @Override\n"
"    public Uni<List<Authenticator>> findWebAuthnCredentialsByCredID(String credID) {\n"
"        return WebAuthnCredential.findByCredID(credID)\n"
"                .flatMap(MyWebAuthnSetup::toAuthenticators);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:466
#, no-wrap
msgid ""
"    @ReactiveTransactional\n"
"    @Override\n"
"    public Uni<Void> updateOrStoreWebAuthnCredentials(Authenticator authenticator) {\n"
"        return User.findByUserName(authenticator.getUserName())\n"
"            .flatMap(user -> {\n"
"                // new user\n"
"                if(user == null) {\n"
"                    User newUser = new User();\n"
"                    newUser.userName = authenticator.getUserName();\n"
"                    WebAuthnCredential credential = new WebAuthnCredential(authenticator, newUser);\n"
"                    return credential.persist()\n"
"                            .flatMap(c -> newUser.persist())\n"
"                            .onItem().ignore().andContinueWithNull();\n"
"                } else {\n"
"                    // existing user\n"
"                    user.webAuthnCredential.counter = authenticator.getCounter();\n"
"                    return Uni.createFrom().nullItem();\n"
"                }\n"
"            });\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:477
#, no-wrap
msgid ""
"    private static Uni<List<Authenticator>> toAuthenticators(List<WebAuthnCredential> dbs) {\n"
"        // can't call combine/uni on empty list\n"
"        if(dbs.isEmpty())\n"
"            return Uni.createFrom().item(Collections.emptyList());\n"
"        List<Uni<Authenticator>> ret = new ArrayList<>(dbs.size());\n"
"        for (WebAuthnCredential db : dbs) {\n"
"            ret.add(toAuthenticator(db));\n"
"        }\n"
"        return Uni.combine().all().unis(ret).combinedWith(f -> (List)f);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:499
#, no-wrap
msgid ""
"    private static Uni<Authenticator> toAuthenticator(WebAuthnCredential credential) {\n"
"        return credential.fetch(credential.x5c)\n"
"                .map(x5c -> {\n"
"                    Authenticator ret = new Authenticator();\n"
"                    ret.setAaguid(credential.aaguid);\n"
"                    AttestationCertificates attestationCertificates = new AttestationCertificates();\n"
"                    attestationCertificates.setAlg(credential.alg);\n"
"                    List<String> x5cs = new ArrayList<>(x5c.size());\n"
"                    for (WebAuthnCertificate webAuthnCertificate : x5c) {\n"
"                        x5cs.add(webAuthnCertificate.x5c);\n"
"                    }\n"
"                    ret.setAttestationCertificates(attestationCertificates);\n"
"                    ret.setCounter(credential.counter);\n"
"                    ret.setCredID(credential.credID);\n"
"                    ret.setFmt(credential.fmt);\n"
"                    ret.setPublicKey(credential.publicKey);\n"
"                    ret.setType(credential.type);\n"
"                    ret.setUserName(credential.userName);\n"
"                    return ret;\n"
"                });\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:511
#, no-wrap
msgid ""
"    @Override\n"
"    public Set<String> getRoles(String userId) {\n"
"        if(userId.equals(\"admin\")) {\n"
"            Set<String> ret = new HashSet<>();\n"
"            ret.add(\"user\");\n"
"            ret.add(\"admin\");\n"
"            return ret;\n"
"        }\n"
"        return Collections.singleton(\"user\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-webauthn.adoc:513
#, fuzzy, no-wrap
msgid "Writing the HTML application"
msgstr "Escrever a aplicação HTML"

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:517
#, fuzzy
msgid "We now need to write a web page with links to all our APIs, as well as a way to register a new user, login, and logout, in `src/main/resources/META-INF/resources/index.html`:"
msgstr "Precisamos agora de escrever uma página Web com ligações para todas as nossas API, bem como uma forma de registar um novo utilizador, iniciar sessão e terminar sessão, em `src/main/resources/META-INF/resources/index.html`:"

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:544
#, no-wrap
msgid ""
"<!DOCTYPE html>\n"
"<html lang=\"en\">\n"
"  <head>\n"
"    <meta charset=\"UTF-8\">\n"
"    <title>Login</title>\n"
"    <script src=\"/q/webauthn/webauthn.js\" type=\"text/javascript\" charset=\"UTF-8\"></script>\n"
"    <style>\n"
"     .container {\n"
"      display: grid;\n"
"      grid-template-columns: auto auto auto;\n"
"     }\n"
"     button, input {\n"
"      margin: 5px 0;\n"
"     }\n"
"     .item {\n"
"      padding: 20px;\n"
"     }\n"
"     nav > ul {\n"
"       list-style-type: none;\n"
"       margin: 0;\n"
"       padding: 0;\n"
"       overflow: hidden;\n"
"       background-color: #333;\n"
"     }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:548
#, no-wrap
msgid ""
"     nav > ul > li {\n"
"       float: left;\n"
"     }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:556
#, no-wrap
msgid ""
"     nav > ul > li > a {\n"
"       display: block;\n"
"       color: white;\n"
"       text-align: center;\n"
"       padding: 14px 16px;\n"
"       text-decoration: none;\n"
"     }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:562
#, no-wrap
msgid ""
"     nav > ul > li > a:hover {\n"
"       background-color: #111;\n"
"     }\n"
"    </style>\n"
"  </head>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:599
#, no-wrap
msgid ""
"  <body>\n"
"    <nav>\n"
"     <ul>\n"
"      <li><a href=\"/api/public\">Public API</a></li>\n"
"      <li><a href=\"/api/users/me\">User API</a></li>\n"
"      <li><a href=\"/api/admin\">Admin API</a></li>\n"
"      <li><a href=\"/q/webauthn/logout\">Logout</a></li>\n"
"    </nav>\n"
"    <div class=\"container\">\n"
"     <div class=\"item\">\n"
"      <h1>Status</h1>\n"
"      <div id=\"result\"></div>\n"
"     </div>\n"
"     <div class=\"item\">\n"
"      <h1>Login</h1>\n"
"      <p>\n"
"       <input id=\"userNameLogin\" placeholder=\"User name\"/><br/>\n"
"       <button id=\"login\">Login</button>\n"
"      </p>\n"
"     </div>\n"
"     <div class=\"item\">\n"
"      <h1>Register</h1>\n"
"      <p>\n"
"       <input id=\"userNameRegister\" placeholder=\"User name\"/><br/>\n"
"       <input id=\"firstName\" placeholder=\"First name\"/><br/>\n"
"       <input id=\"lastName\" placeholder=\"Last name\"/><br/>\n"
"       <button id=\"register\">Register</button>\n"
"      </p>\n"
"     </div>\n"
"    </div>\n"
"    <script type=\"text/javascript\">\n"
"      const webAuthn = new WebAuthn({\n"
"        callbackPath: '/q/webauthn/callback',\n"
"        registerPath: '/q/webauthn/register',\n"
"        loginPath: '/q/webauthn/login'\n"
"      });\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:601
#, no-wrap
msgid "      const result = document.getElementById('result');\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:605
#, no-wrap
msgid ""
"      fetch('/api/public/me')\n"
"        .then(response => response.text())\n"
"        .then(name => result.append(\"User: \"+name));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:607
#, no-wrap
msgid "      const loginButton = document.getElementById('login');\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:620
#, no-wrap
msgid ""
"      loginButton.onclick = () => {\n"
"        var userName = document.getElementById('userNameLogin').value;\n"
"        result.replaceChildren();\n"
"        webAuthn.login({ name: userName })\n"
"          .then(body => {\n"
"            result.append(\"User: \"+userName);\n"
"          })\n"
"          .catch(err => {\n"
"            result.append(\"Login failed: \"+err);\n"
"          });\n"
"        return false;\n"
"      };\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:622
#, no-wrap
msgid "      const registerButton = document.getElementById('register');\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:640
#, no-wrap
msgid ""
"      registerButton.onclick = () => {\n"
"        var userName = document.getElementById('userNameRegister').value;\n"
"        var firstName = document.getElementById('firstName').value;\n"
"        var lastName = document.getElementById('lastName').value;\n"
"        result.replaceChildren();\n"
"        webAuthn.register({ name: userName, displayName: firstName + \" \" + lastName })\n"
"          .then(body => {\n"
"            result.append(\"User: \"+userName);\n"
"          })\n"
"          .catch(err => {\n"
"            result.append(\"Registration failed: \"+err);\n"
"          });\n"
"        return false;\n"
"      };\n"
"    </script>\n"
"  </body>\n"
"</html>\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-webauthn.adoc:642
#, fuzzy, no-wrap
msgid "Testing the application"
msgstr "Testar a aplicação"

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:645
#, fuzzy
msgid "The application is now protected and the identities are provided by our database."
msgstr "A aplicação está agora protegida e as identidades são fornecidas pela nossa base de dados."

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:647
#, fuzzy
msgid "Run your application in dev mode with:"
msgstr "Execute a sua aplicação no modo de desenvolvimento com:"

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:652
#, fuzzy
msgid "which will start a PostgreSQL Dev Service container, and open http://localhost:8080 in your browser."
msgstr "que iniciará um container PostgreSQL Dev Service, e abrirá  http://localhost:8080  no seu navegador."

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:654
#, fuzzy
msgid "Initially, you will have no credentials registered, and no current user:"
msgstr "Inicialmente, não terá credenciais registadas nem um utilizador atual:"

#. type: Target for macro image
#: upstream/_guides/security-webauthn.adoc:655
#, no-wrap
msgid "webauthn-1.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:659
#, fuzzy
msgid "The current user is displayed on the left, and you can use the top menu to try accessing the public API, which should work, while the user and admin APIs will fail and redirect you to the current page."
msgstr "O utilizador atual é apresentado à esquerda e pode utilizar o menu superior para tentar aceder à API pública, que deverá funcionar, enquanto as APIs de utilizador e de administrador falharão e redireccioná-lo-ão para a página atual."

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:662
#, fuzzy
msgid "Start by registering your WebAuthn credentials by entering a username, first and last names on the `Register` form on the right, then pressing the `Register` button:"
msgstr "Comece por registar as suas credenciais WebAuthn introduzindo um nome de utilizador, nome próprio e apelido no formulário `Register` à direita e, em seguida, prima o botão `Register`:"

#. type: Target for macro image
#: upstream/_guides/security-webauthn.adoc:663
#, no-wrap
msgid "webauthn-2.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:666
#, fuzzy
msgid "Your browser will ask you to activate your WebAuthn authenticator:"
msgstr "O seu browser pedir-lhe-á para ativar o autenticador WebAuthn:"

#. type: Target for macro image
#: upstream/_guides/security-webauthn.adoc:667
#, no-wrap
msgid "webauthn-3.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:670
#, fuzzy
msgid "You will then be logged in, and can check that the user API is now accessible:"
msgstr "A sessão será então iniciada e poderá verificar se a API do utilizador está agora acessível:"

#. type: Target for macro image
#: upstream/_guides/security-webauthn.adoc:671
#: upstream/_guides/security-webauthn.adoc:679
#, no-wrap
msgid "webauthn-4.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:674
#, fuzzy
msgid "At this stage you can `Logout` and enter your username in the `Login` form:"
msgstr "Nesta fase, pode `Logout` e introduzir o seu nome de utilizador no formulário `Login`:"

#. type: Target for macro image
#: upstream/_guides/security-webauthn.adoc:675
#, no-wrap
msgid "webauthn-5.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:678
#, fuzzy
msgid "Then press the `Login` button, and you will be logged in:"
msgstr "Em seguida, prima o botão `Login` e será iniciada a sessão:"

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:682
#, fuzzy
msgid "The admin API is only accessible if you register with the `admin` user name."
msgstr "A API de administração só é acessível se se registar com o nome de utilizador `admin`."

#. type: Title ==
#: upstream/_guides/security-webauthn.adoc:683
#, fuzzy, no-wrap
msgid "WebAuthn endpoints"
msgstr "Pontos de extremidade WebAuthn"

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:686
#, fuzzy
msgid "The Quarkus WebAuthn extension comes out of the box with these REST endpoints pre-defined:"
msgstr "A extensão Quarkus WebAuthn é fornecida com estes pontos de extremidade REST predefinidos:"

#. type: Title ===
#: upstream/_guides/security-webauthn.adoc:687
#, fuzzy, no-wrap
msgid "Obtain a registration challenge"
msgstr "Obter um desafio de registo"

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:690
#, fuzzy
msgid "`POST /q/webauthn/register`: Set up and obtain a registration challenge"
msgstr "`POST /q/webauthn/register`: Criar e obter um desafio de registo"

#. type: Block title
#: upstream/_guides/security-webauthn.adoc:692
#: upstream/_guides/security-webauthn.adoc:740
#: upstream/_guides/security-webauthn.adoc:777
#: upstream/_guides/security-webauthn.adoc:797
#, fuzzy, no-wrap
msgid "Request"
msgstr "Pedido"

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:698
#, no-wrap
msgid ""
"{\n"
" \"name\": \"userName\",\n"
" \"displayName\": \"Mr Nice Guy\"\n"
"}\n"
msgstr ""

#. type: Block title
#: upstream/_guides/security-webauthn.adoc:701
#: upstream/_guides/security-webauthn.adoc:748
#, fuzzy, no-wrap
msgid "Response"
msgstr "Resposta"

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:733
#, no-wrap
msgid ""
"{\n"
" \"rp\": {\n"
"   \"name\": \"Quarkus server\"\n"
"  },\n"
" \"user\": {\n"
"   \"id\": \"ryPi43NJSx6LFYNitrOvHg\",\n"
"   \"name\": \"FroMage\",\n"
"   \"displayName\": \"Mr Nice Guy\"\n"
"  },\n"
"  \"challenge\": \"6tkVLgYzp5yJz_MtnzCy6VRMkHuN4f4C-_hukRmsuQ_MQl7uxJweiqH8gaFkm_mEbKzlUbOabJM3nLbi08i1Uw\",\n"
"  \"pubKeyCredParams\": [\n"
"    {\n"
"     \"alg\": -7,\n"
"     \"type\":\"public-key\"\n"
"    },\n"
"    {\n"
"     \"alg\": -257,\n"
"     \"type\": \"public-key\"\n"
"    }\n"
"  ],\n"
"  \"authenticatorSelection\": {\n"
"   \"requireResidentKey\": false,\n"
"   \"userVerification\": \"discouraged\"\n"
"  },\n"
"  \"timeout\": 60000,\n"
"  \"attestation\": \"none\",\n"
"  \"extensions\": {\n"
"   \"txAuthSimple\": \"\"\n"
"  }\n"
" }\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-webauthn.adoc:735
#, fuzzy, no-wrap
msgid "Obtain a login challenge"
msgstr "Obter um desafio de início de sessão"

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:738
#, fuzzy
msgid "`POST /q/webauthn/login`: Set up and obtain a login challenge"
msgstr "`POST /q/webauthn/login`: Configurar e obter um desafio de início de sessão"

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:745
#, no-wrap
msgid ""
"{\n"
" \"name\": \"userName\"\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:770
#, no-wrap
msgid ""
"{\n"
" \"challenge\": \"RV4hqKHezkWSxpOICBkpx16yPJFGMZrkPlJP-Wp8w4rVl34VIzCT7AP0Q5Rv-3JCU3jwu-j3VlOgyNMDk2AqDg\",\n"
" \"timeout\": 60000,\n"
" \"userVerification\": \"discouraged\",\n"
" \"extensions\": {\n"
"  \"txAuthSimple\": \"\"\n"
" },\n"
" \"allowCredentials\": [\n"
"  {\n"
"   \"type\": \"public-key\",\n"
"   \"id\": \"boMwU-QwZ_RsToPTG3iC50g8-yiKbLc3A53tgWMhzbNEQAJIlbWgchmwbt5m0ssqQNR0IM_WxCmcfKWlEao7Fg\",\n"
"   \"transports\": [\n"
"    \"usb\",\n"
"    \"nfc\",\n"
"    \"ble\",\n"
"    \"internal\"\n"
"   ]\n"
"  }\n"
" ]\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-webauthn.adoc:772
#, fuzzy, no-wrap
msgid "Trigger a registration"
msgstr "Acionar um registo"

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:775
#, fuzzy
msgid "`POST /q/webauthn/callback`: Trigger a registration"
msgstr "`POST /q/webauthn/callback`: Acionar um registo"

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:788
#, no-wrap
msgid ""
"{\n"
" \"id\": \"boMwU-QwZ_RsToPTG3iC50g8-yiKbLc3A53tgWMhzbNEQAJIlbWgchmwbt5m0ssqQNR0IM_WxCmcfKWlEao7Fg\",\n"
" \"rawId\": \"boMwU-QwZ_RsToPTG3iC50g8-yiKbLc3A53tgWMhzbNEQAJIlbWgchmwbt5m0ssqQNR0IM_WxCmcfKWlEao7Fg\",\n"
" \"response\": {\n"
"  \"attestationObject\": \"<DATA>\",\n"
"  \"clientDataJSON\":\"<DATA>\"\n"
" },\n"
" \"type\": \"public-key\"\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:791
#: upstream/_guides/security-webauthn.adoc:813
#, fuzzy
msgid "This returns a 204 with no body."
msgstr "Devolve um 204 sem corpo."

#. type: Title ===
#: upstream/_guides/security-webauthn.adoc:792
#, fuzzy, no-wrap
msgid "Trigger a login"
msgstr "Acionar um início de sessão"

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:795
#, fuzzy
msgid "`POST /q/webauthn/callback`: Trigger a login"
msgstr "`POST /q/webauthn/callback`: Acionar um início de sessão"

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:810
#, no-wrap
msgid ""
"{\n"
" \"id\": \"boMwU-QwZ_RsToPTG3iC50g8-yiKbLc3A53tgWMhzbNEQAJIlbWgchmwbt5m0ssqQNR0IM_WxCmcfKWlEao7Fg\",\n"
" \"rawId\": \"boMwU-QwZ_RsToPTG3iC50g8-yiKbLc3A53tgWMhzbNEQAJIlbWgchmwbt5m0ssqQNR0IM_WxCmcfKWlEao7Fg\",\n"
" \"response\": {\n"
"  \"clientDataJSON\": \"<DATA>\",\n"
"  \"authenticatorData\": \"<DATA>\",\n"
"  \"signature\": \"<DATA>\",\n"
"  \"userHandle\": \"\"\n"
" },\n"
" \"type\": \"public-key\"\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-webauthn.adoc:814
#, fuzzy, no-wrap
msgid "Logout"
msgstr "Terminar sessão"

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:817
#, fuzzy
msgid "`GET /q/webauthn/logout`: Logs you out"
msgstr "`GET /q/webauthn/logout`: Faz o logout"

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:819
#, fuzzy
msgid "This returns a 302 redirect to the root URI of your application."
msgstr "Isto devolve um redireccionamento 302 para o URI de raiz da sua aplicação."

#. type: Title ==
#: upstream/_guides/security-webauthn.adoc:820
#, fuzzy, no-wrap
msgid "WebAuthn JavaScript library"
msgstr "Biblioteca JavaScript WebAuthn"

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:824
#, fuzzy
msgid "Because there's so much JavaScript needed to set WebAuthn up in the browser, the Quarkus WebAuthn extension ships with a JavaScript library to help you talk to the WebAuthn endpoints, at `/q/webauthn/webauthn.js`. You can set it up like this:"
msgstr "Como é necessário muito JavaScript para configurar o WebAuthn no browser, a extensão Quarkus WebAuthn é fornecida com uma biblioteca JavaScript para o ajudar a falar com os pontos finais do WebAuthn, em `/q/webauthn/webauthn.js`. Pode configurá-la da seguinte forma:"

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:837
#, no-wrap
msgid ""
"<script src=\"/q/webauthn/webauthn.js\" type=\"text/javascript\" charset=\"UTF-8\"></script>\n"
"<script type=\"text/javascript\">\n"
"  // configure where our endpoints are\n"
"  const webAuthn = new WebAuthn({\n"
"    callbackPath: '/q/webauthn/callback',\n"
"    registerPath: '/q/webauthn/register',\n"
"    loginPath: '/q/webauthn/login'\n"
"  });\n"
"  // use the webAuthn APIs here\n"
"</script>\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-webauthn.adoc:839
#, fuzzy, no-wrap
msgid "Invoke registration"
msgstr "Invocar o registo"

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:843
#, fuzzy
msgid "The `webAuthn.register` method invokes the registration challenge endpoint, then calls the authenticator and invokes the callback endpoint for that registration, and returns a https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise[Promise object]:"
msgstr "O método `webAuthn.register` invoca o ponto de extremidade do desafio de registo, chama o autenticador e invoca o ponto de extremidade de retorno de chamada para esse registo e devolve um  link:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise[objeto Promise]:"

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:853
#, no-wrap
msgid ""
"webAuthn.register({ name: userName, displayName: firstName + \" \" + lastName })\n"
"  .then(body => {\n"
"    // do something now that the user is registered\n"
"  })\n"
"  .catch(err => {\n"
"    // registration failed\n"
"  });\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-webauthn.adoc:855
#, fuzzy, no-wrap
msgid "Invoke login"
msgstr "Invocar o início de sessão"

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:859
#, fuzzy
msgid "The `webAuthn.login` method invokes the login challenge endpoint, then calls the authenticator and invokes the callback endpoint for that login, and returns a https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise[Promise object]:"
msgstr "O método `webAuthn.login` invoca o ponto de extremidade de desafio de início de sessão, chama o autenticador e invoca o ponto de extremidade de retorno de chamada para esse início de sessão e devolve um  link:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise[objeto Promise]:"

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:869
#, no-wrap
msgid ""
"webAuthn.login({ name: userName })\n"
"  .then(body => {\n"
"    // do something now that the user is logged in\n"
"  })\n"
"  .catch(err => {\n"
"    // login failed\n"
"  });\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-webauthn.adoc:871
#, fuzzy, no-wrap
msgid "Only invoke the registration challenge and authenticator"
msgstr "Invocar apenas o desafio de registo e o autenticador"

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:877
#, fuzzy
msgid "The `webAuthn.registerOnly` method invokes the registration challenge endpoint, then calls the authenticator and returns a https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise[Promise object] containing a JSON object suitable for being sent to the callback endpoint. You can use that JSON object in order to store the credentials in hidden form `input` elements, for example, and send it as part of a regular HTML form:"
msgstr "O método `webAuthn.registerOnly` invoca o ponto final do desafio de registo, depois chama o autenticador e devolve um  link:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise[objeto Promise] que contém um objeto JSON adequado para ser enviado para o ponto final da chamada de retorno. Pode utilizar esse objeto JSON para armazenar as credenciais num formulário oculto `input` elementos, por exemplo, e enviá-lo como parte de um formulário HTML normal:"

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:892
#, no-wrap
msgid ""
"webAuthn.registerOnly({ name: userName, displayName: firstName + \" \" + lastName })\n"
"  .then(body => {\n"
"    // store the registration JSON in form elements\n"
"    document.getElementById('webAuthnId').value = body.id;\n"
"    document.getElementById('webAuthnRawId').value = body.rawId;\n"
"    document.getElementById('webAuthnResponseAttestationObject').value = body.response.attestationObject;\n"
"    document.getElementById('webAuthnResponseClientDataJSON').value = body.response.clientDataJSON;\n"
"    document.getElementById('webAuthnType').value = body.type;\n"
"  })\n"
"  .catch(err => {\n"
"    // registration failed\n"
"  });\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-webauthn.adoc:894
#, fuzzy, no-wrap
msgid "Only invoke the login challenge and authenticator"
msgstr "Invocar apenas o desafio de início de sessão e o autenticador"

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:900
#, fuzzy
msgid "The `webAuthn.loginOnly` method invokes the login challenge endpoint, then calls the authenticator and returns a https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise[Promise object] containing a JSON object suitable for being sent to the callback endpoint. You can use that JSON object in order to store the credentials in hidden form `input` elements, for example, and send it as part of a regular HTML form:"
msgstr "O método `webAuthn.loginOnly` invoca o ponto final do desafio de início de sessão, depois chama o autenticador e devolve um  link:https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise[objeto Promise] que contém um objeto JSON adequado para ser enviado para o ponto final de retorno de chamada. Pode utilizar esse objeto JSON para armazenar as credenciais num formulário oculto `input` elementos, por exemplo, e enviá-lo como parte de um formulário HTML normal:"

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:917
#, no-wrap
msgid ""
"webAuthn.loginOnly({ name: userName })\n"
"  .then(body => {\n"
"    // store the login JSON in form elements\n"
"    document.getElementById('webAuthnId').value = body.id;\n"
"    document.getElementById('webAuthnRawId').value = body.rawId;\n"
"    document.getElementById('webAuthnResponseClientDataJSON').value = body.response.clientDataJSON;\n"
"    document.getElementById('webAuthnResponseAuthenticatorData').value = body.response.authenticatorData;\n"
"    document.getElementById('webAuthnResponseSignature').value = body.response.signature;\n"
"    document.getElementById('webAuthnResponseUserHandle').value = body.response.userHandle;\n"
"    document.getElementById('webAuthnType').value = body.type;\n"
"  })\n"
"  .catch(err => {\n"
"    // login failed\n"
"  });\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-webauthn.adoc:919
#, fuzzy, no-wrap
msgid "Handling login and registration endpoints yourself"
msgstr "Gerir você mesmo os pontos finais de início de sessão e de registo"

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:924
#, fuzzy
msgid "Sometimes, you will want to ask for more data than just a username in order to register a user, or you want to deal with login and registration with custom validation, and so the WebAuthn callback endpoint is not enough."
msgstr "Por vezes, é necessário pedir mais dados do que apenas um nome de utilizador para registar um utilizador, ou tratar o início de sessão e o registo com validação personalizada, pelo que o ponto de extremidade de retorno de chamada WebAuthn não é suficiente."

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:928
#, fuzzy
msgid "In this case, you can use the `WebAuthn.loginOnly` and `WebAuthn.registerOnly` methods from the JavaScript library, store the authenticator data in hidden form elements, and send them as part of your form payload to the server to your custom login or registration endpoints."
msgstr "Neste caso, pode utilizar os métodos `WebAuthn.loginOnly` e `WebAuthn.registerOnly` da biblioteca JavaScript, armazenar os dados do autenticador em elementos de formulário ocultos e enviá-los como parte da carga útil do formulário para o servidor para os seus pontos finais personalizados de início de sessão ou registo."

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:932
#, fuzzy
msgid "If you are storing them in form input elements, you can then use the `WebAuthnLoginResponse` and `WebAuthnRegistrationResponse` classes, mark them as `@BeanParam` and then use the `WebAuthnSecurity.login` and `WebAuthnSecurity.register` methods. For example, here's how you can handle a custom login and register:"
msgstr "Se os estiver a armazenar em elementos de entrada de formulário, pode utilizar as classes `WebAuthnLoginResponse` e `WebAuthnRegistrationResponse`, marcá-los como `@BeanParam` e utilizar os métodos `WebAuthnSecurity.login` e `WebAuthnSecurity.register`. Por exemplo, eis como pode tratar um início de sessão e um registo personalizados:"

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:938
#, no-wrap
msgid "import java.net.URI;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:946
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.BeanParam;\n"
"import jakarta.ws.rs.POST;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.core.NewCookie;\n"
"import jakarta.ws.rs.core.Response;\n"
"import jakarta.ws.rs.core.Response.Status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:948
#, no-wrap
msgid "import org.jboss.resteasy.reactive.RestForm;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:956
#, no-wrap
msgid ""
"import io.quarkus.hibernate.reactive.panache.common.runtime.ReactiveTransactional;\n"
"import io.quarkus.security.webauthn.WebAuthnLoginResponse;\n"
"import io.quarkus.security.webauthn.WebAuthnRegisterResponse;\n"
"import io.quarkus.security.webauthn.WebAuthnSecurity;\n"
"import io.smallrye.mutiny.Uni;\n"
"import io.vertx.ext.auth.webauthn.Authenticator;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:959
#, no-wrap
msgid ""
"@Path(\"\")\n"
"public class LoginResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:962
#, no-wrap
msgid ""
"    @Inject\n"
"    WebAuthnSecurity webAuthnSecurity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:975
#, no-wrap
msgid ""
"    @Path(\"/login\")\n"
"    @POST\n"
"    @ReactiveTransactional\n"
"    public Uni<Response> login(@RestForm String userName,\n"
"                               @BeanParam WebAuthnLoginResponse webAuthnResponse,\n"
"                               RoutingContext ctx) {\n"
"        // Input validation\n"
"        if(userName == null || userName.isEmpty()\n"
"                || !webAuthnResponse.isSet()\n"
"                || !webAuthnResponse.isValid()) {\n"
"            return Uni.createFrom().item(Response.status(Status.BAD_REQUEST).build());\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:983
#, no-wrap
msgid ""
"        Uni<User> userUni = User.findByUserName(userName);\n"
"        return userUni.flatMap(user -> {\n"
"            if(user == null) {\n"
"                // Invalid user\n"
"                return Uni.createFrom().item(Response.status(Status.BAD_REQUEST).build());\n"
"            }\n"
"            Uni<Authenticator> authenticator = this.webAuthnSecurity.login(webAuthnResponse, ctx);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:997
#, no-wrap
msgid ""
"            return authenticator\n"
"                    // bump the auth counter\n"
"                    .invoke(auth -> user.webAuthnCredential.counter = auth.getCounter())\n"
"                    .map(auth -> {\n"
"                        // make a login JWT cookie\n"
"                        NewCookie cookie = null;\n"
"                        return Response.seeOther(URI.create(\"/\")).cookie(cookie).build();\n"
"                    })\n"
"                    // handle login failure\n"
"                    .onFailure().recoverWithItem(x -> {\n"
"                        // make a proper error response\n"
"                        return Response.status(Status.BAD_REQUEST).build();\n"
"                    });\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:1000
#, no-wrap
msgid ""
"        });\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:1013
#, no-wrap
msgid ""
"    @Path(\"/register\")\n"
"    @POST\n"
"    @ReactiveTransactional\n"
"    public Uni<Response> register(@RestForm String userName,\n"
"                                  @BeanParam WebAuthnRegisterResponse webAuthnResponse,\n"
"                                  RoutingContext ctx) {\n"
"        // Input validation\n"
"        if(userName == null || userName.isEmpty()\n"
"                || !webAuthnResponse.isSet()\n"
"                || !webAuthnResponse.isValid()) {\n"
"            return Uni.createFrom().item(Response.status(Status.BAD_REQUEST).build());\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:1021
#, no-wrap
msgid ""
"        Uni<User> userUni = User.findByUserName(userName);\n"
"        return userUni.flatMap(user -> {\n"
"            if(user != null) {\n"
"                // Duplicate user\n"
"                return Uni.createFrom().item(Response.status(Status.BAD_REQUEST).build());\n"
"            }\n"
"            Uni<Authenticator> authenticator = this.webAuthnSecurity.register(webAuthnResponse, ctx);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:1030
#, no-wrap
msgid ""
"            return authenticator\n"
"                    // store the user\n"
"                    .flatMap(auth -> {\n"
"                        User newUser = new User();\n"
"                        newUser.userName = auth.getUserName();\n"
"                        WebAuthnCredential credential = new WebAuthnCredential(auth, newUser);\n"
"                        return credential.persist()\n"
"                                .flatMap(c -> newUser.persist());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:1042
#, no-wrap
msgid ""
"                    })\n"
"                    .map(newUser -> {\n"
"                        // make a login JWT cookie\n"
"                        NewCookie cookie = null;\n"
"                        return Response.seeOther(URI.create(\"/\")).cookie(cookie).build();\n"
"                    })\n"
"                    // handle login failure\n"
"                    .onFailure().recoverWithItem(x -> {\n"
"                        // make a proper error response\n"
"                        return Response.status(Status.BAD_REQUEST).build();\n"
"                    });\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:1046
#, no-wrap
msgid ""
"        });\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:1052
#, fuzzy
msgid "The `WebAuthnSecurity` methods do not set or read the user cookie, so you will have to take care of it yourself, but it allows you to use other means of storing the user, such as JWT. You can use the `rememberUser(String userName, RoutingContext ctx)` and `logout(RoutingContext ctx)` methods on the same `WebAuthnSecurity` class if you want to manually set up login cookies."
msgstr "Os métodos `WebAuthnSecurity` não definem nem lêem o cookie de utilizador, pelo que terá de ser o utilizador a tratar disso, mas permitem-lhe utilizar outros meios de armazenamento do utilizador, como o JWT. Pode utilizar os métodos `rememberUser(String userName, RoutingContext ctx)` e `logout(RoutingContext ctx)` na mesma classe `WebAuthnSecurity` se pretender configurar manualmente os cookies de início de sessão."

#. type: Title ==
#: upstream/_guides/security-webauthn.adoc:1053
#, fuzzy, no-wrap
msgid "Blocking version"
msgstr "Versão de bloqueio"

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:1058
#, fuzzy
msgid "If you're using a blocking data access to the database, you can safely block on the `WebAuthnSecurity` methods, with `.await().indefinitely()`, because nothing is async in the `register` and `login` methods, besides the data access with your `WebAuthnUserProvider`."
msgstr "Se estiver a utilizar um acesso bloqueante aos dados da base de dados, pode bloquear com segurança os métodos `WebAuthnSecurity`, com `.await().indefinitely()`, porque nada é assíncrono nos métodos `register` e `login`, para além do acesso aos dados com o seu `WebAuthnUserProvider`."

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:1061
#, fuzzy
msgid "You will have to add the `@Blocking` annotation on your `WebAuthnUserProvider` class in order to tell the Quarkus WebAuthn endpoints to defer those calls to the worker pool."
msgstr "Terá de acrescentar a anotação `@Blocking` à sua classe `WebAuthnUserProvider` para dizer aos pontos de extremidade WebAuthn do Quarkus para adiarem essas chamadas para o grupo de trabalho."

#. type: Title ==
#: upstream/_guides/security-webauthn.adoc:1062
#, fuzzy, no-wrap
msgid "Testing WebAuthn"
msgstr "Testar o WebAuthn"

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:1066
#, fuzzy
msgid "Testing WebAuthn can be complicated because normally you need a hardware token, which is why we've made the `quarkus-test-security-webauthn` helper library:"
msgstr "Testar o WebAuthn pode ser complicado porque normalmente é necessário um token de hardware, e é por isso que criámos a biblioteca auxiliar `quarkus-test-security-webauthn`:"

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:1074
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-security-webauthn</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:1080
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-test-security-webauthn\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:1085
#, fuzzy
msgid "With this, you can use `WebAuthnHardware` to emulate an authenticator token, as well as the `WebAuthnEndpointHelper` helper methods in order to invoke the WebAuthn endpoints, or even fill your form data for custom endpoints:"
msgstr "Com isto, pode utilizar `WebAuthnHardware` para emular um token de autenticação, bem como os métodos auxiliares `WebAuthnEndpointHelper` para invocar os pontos finais WebAuthn, ou mesmo preencher os dados do seu formulário para pontos finais personalizados:"

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:1089
#: upstream/_guides/security-webauthn.adoc:1281
#, no-wrap
msgid "package org.acme.security.webauthn.test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:1091
#, no-wrap
msgid "import static io.restassured.RestAssured.given;\n"
msgstr "import static io.restassured.RestAssured.given;\n"

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:1094
#, no-wrap
msgid ""
"import java.util.function.Consumer;\n"
"import java.util.function.Supplier;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:1097
#, no-wrap
msgid ""
"import org.hamcrest.Matchers;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:1107
#, no-wrap
msgid ""
"import io.quarkus.security.webauthn.WebAuthnController;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.security.webauthn.WebAuthnEndpointHelper;\n"
"import io.quarkus.test.security.webauthn.WebAuthnHardware;\n"
"import io.restassured.RestAssured;\n"
"import io.restassured.filter.Filter;\n"
"import io.restassured.http.ContentType;\n"
"import io.restassured.specification.RequestSpecification;\n"
"import io.vertx.core.json.JsonObject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:1110
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class WebAuthnResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:1117
#, no-wrap
msgid ""
"    enum User {\n"
"        USER, ADMIN;\n"
"    }\n"
"    enum Endpoint {\n"
"        DEFAULT, MANUAL;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:1123
#, no-wrap
msgid ""
"    @Test\n"
"    public void testWebAuthnUser() {\n"
"        testWebAuthn(\"FroMage\", User.USER, Endpoint.DEFAULT);\n"
"        testWebAuthn(\"scooby\", User.USER, Endpoint.MANUAL);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:1128
#, no-wrap
msgid ""
"    @Test\n"
"    public void testWebAuthnAdmin() {\n"
"        testWebAuthn(\"admin\", User.ADMIN, Endpoint.DEFAULT);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:1132
#, no-wrap
msgid ""
"    private void testWebAuthn(String userName, User user, Endpoint endpoint) {\n"
"        Filter cookieFilter = new RenardeCookieFilter();\n"
"        WebAuthnHardware token = new WebAuthnHardware();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:1134
#: upstream/_guides/security-webauthn.adoc:1154
#, no-wrap
msgid "        verifyLoggedOut(cookieFilter);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:1146
#, no-wrap
msgid ""
"        // two-step registration\n"
"        String challenge = WebAuthnEndpointHelper.invokeRegistration(userName, cookieFilter);\n"
"        JsonObject registrationJson = token.makeRegistrationJson(challenge);\n"
"        if(endpoint == Endpoint.DEFAULT)\n"
"            WebAuthnEndpointHelper.invokeCallback(registrationJson, cookieFilter);\n"
"        else {\n"
"            invokeCustomEndpoint(\"/register\", cookieFilter, request -> {\n"
"                WebAuthnEndpointHelper.addWebAuthnRegistrationFormParameters(request, registrationJson);\n"
"                request.formParam(\"userName\", userName);\n"
"            });\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:1149
#: upstream/_guides/security-webauthn.adoc:1169
#, no-wrap
msgid ""
"        // verify that we can access logged-in endpoints\n"
"        verifyLoggedIn(cookieFilter, userName, user);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:1152
#: upstream/_guides/security-webauthn.adoc:1172
#, no-wrap
msgid ""
"        // logout\n"
"        WebAuthnEndpointHelper.invokeLogout(cookieFilter);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:1166
#, no-wrap
msgid ""
"        // two-step login\n"
"        challenge = WebAuthnEndpointHelper.invokeLogin(userName, cookieFilter);\n"
"        JsonObject loginJson = token.makeLoginJson(challenge);\n"
"        if(endpoint == Endpoint.DEFAULT)\n"
"            WebAuthnEndpointHelper.invokeCallback(loginJson, cookieFilter);\n"
"        else {\n"
"            invokeCustomEndpoint(\"/login\", cookieFilter, request -> {\n"
"                WebAuthnEndpointHelper.addWebAuthnLoginFormParameters(request, loginJson);\n"
"                request.formParam(\"userName\", userName);\n"
"            });\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:1175
#, no-wrap
msgid ""
"        verifyLoggedOut(cookieFilter);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:1192
#, no-wrap
msgid ""
"    private void invokeCustomEndpoint(String uri, Filter cookieFilter, Consumer<RequestSpecification> requestCustomiser) {\n"
"        RequestSpecification request = given()\n"
"        .when();\n"
"        requestCustomiser.accept(request);\n"
"        request\n"
"        .filter(cookieFilter)\n"
"        .redirects().follow(false)\n"
"        .log().ifValidationFails()\n"
"        .post(uri)\n"
"        .then()\n"
"        .statusCode(200)\n"
"        .log().ifValidationFails()\n"
"        .cookie(WebAuthnController.CHALLENGE_COOKIE, Matchers.is(\"\"))\n"
"        .cookie(WebAuthnController.USERNAME_COOKIE, Matchers.is(\"\"))\n"
"        .cookie(\"quarkus-credential\", Matchers.notNullValue());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:1208
#, no-wrap
msgid ""
"    private void verifyLoggedIn(Filter cookieFilter, String userName, User user) {\n"
"        // public API still good\n"
"        RestAssured.given().filter(cookieFilter)\n"
"        .when()\n"
"        .get(\"/api/public\")\n"
"        .then()\n"
"        .statusCode(200)\n"
"        .body(Matchers.is(\"public\"));\n"
"        // public API user name\n"
"        RestAssured.given().filter(cookieFilter)\n"
"        .when()\n"
"        .get(\"/api/public/me\")\n"
"        .then()\n"
"        .statusCode(200)\n"
"        .body(Matchers.is(userName));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:1216
#, no-wrap
msgid ""
"        // user API accessible\n"
"        RestAssured.given().filter(cookieFilter)\n"
"        .when()\n"
"        .get(\"/api/users/me\")\n"
"        .then()\n"
"        .statusCode(200)\n"
"        .body(Matchers.is(userName));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:1233
#, no-wrap
msgid ""
"        // admin API?\n"
"        if(user == User.ADMIN) {\n"
"            RestAssured.given().filter(cookieFilter)\n"
"            .when()\n"
"            .get(\"/api/admin\")\n"
"            .then()\n"
"            .statusCode(200)\n"
"            .body(Matchers.is(\"admin\"));\n"
"        } else {\n"
"            RestAssured.given().filter(cookieFilter)\n"
"            .when()\n"
"            .get(\"/api/admin\")\n"
"            .then()\n"
"            .statusCode(403);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:1249
#, no-wrap
msgid ""
"    private void verifyLoggedOut(Filter cookieFilter) {\n"
"        // public API still good\n"
"        RestAssured.given().filter(cookieFilter)\n"
"        .when()\n"
"        .get(\"/api/public\")\n"
"        .then()\n"
"        .statusCode(200)\n"
"        .body(Matchers.is(\"public\"));\n"
"        // public API user name\n"
"        RestAssured.given().filter(cookieFilter)\n"
"        .when()\n"
"        .get(\"/api/public/me\")\n"
"        .then()\n"
"        .statusCode(200)\n"
"        .body(Matchers.is(\"<not logged in>\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:1259
#, no-wrap
msgid ""
"        // user API not accessible\n"
"        RestAssured.given()\n"
"        .filter(cookieFilter)\n"
"        .redirects().follow(false)\n"
"        .when()\n"
"        .get(\"/api/users/me\")\n"
"        .then()\n"
"        .statusCode(302)\n"
"        .header(\"Location\", Matchers.is(\"http://localhost:8081/\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:1271
#, no-wrap
msgid ""
"        // admin API not accessible\n"
"        RestAssured.given()\n"
"        .filter(cookieFilter)\n"
"        .redirects().follow(false)\n"
"        .when()\n"
"        .get(\"/api/admin\")\n"
"        .then()\n"
"        .statusCode(302)\n"
"        .header(\"Location\", Matchers.is(\"http://localhost:8081/\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:1277
#, fuzzy
msgid "For this test, since we're testing both the provided callback endpoint, which updates users in its `WebAuthnUserProvider` and the manual `LoginResource` endpoint, which deals with users manually, we need to override the `WebAuthnUserProvider` with one that doesn't update the `scooby` user:"
msgstr "Para este teste, uma vez que estamos a testar o ponto de extremidade de retorno de chamada fornecido, que actualiza os utilizadores em `WebAuthnUserProvider` e o ponto de extremidade manual `LoginResource`, que lida com os utilizadores manualmente, precisamos de substituir o `WebAuthnUserProvider` por um que não actualize o utilizador `scooby`:"

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:1285
#, no-wrap
msgid "import org.acme.security.webauthn.MyWebAuthnSetup;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:1289
#, no-wrap
msgid ""
"import io.quarkus.test.Mock;\n"
"import io.smallrye.mutiny.Uni;\n"
"import io.vertx.ext.auth.webauthn.Authenticator;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-webauthn.adoc:1302
#, no-wrap
msgid ""
"@Mock\n"
"@ApplicationScoped\n"
"public class TestUserProvider extends MyWebAuthnSetup {\n"
"    @Override\n"
"    public Uni<Void> updateOrStoreWebAuthnCredentials(Authenticator authenticator) {\n"
"        // delegate the scooby user to the manual endpoint, because if we do it here it will be\n"
"        // created/updated twice\n"
"        if(authenticator.getUserName().equals(\"scooby\"))\n"
"            return Uni.createFrom().nullItem();\n"
"        return super.updateOrStoreWebAuthnCredentials(authenticator);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-webauthn.adoc:1305
#, fuzzy, no-wrap
msgid "Configuration Reference"
msgstr "Referência de configuração"

#. type: Title ==
#: upstream/_guides/security-webauthn.adoc:1309
#, fuzzy, no-wrap
msgid "References"
msgstr "Referências"

#. type: Plain text
#: upstream/_guides/security-webauthn.adoc:1311
#, fuzzy
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "link:security-overview.html[Visão geral do Quarkus Security]"
