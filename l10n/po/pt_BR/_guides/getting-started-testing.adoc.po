# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-29 08:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: upstream/_guides/getting-started-testing.adoc:7
#, fuzzy, no-wrap
msgid "Testing Your Application"
msgstr "Testar a sua aplicação"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:19
#, fuzzy
msgid "Learn how to test your Quarkus Application.  This guide covers:"
msgstr "Saiba como testar a sua aplicação Quarkus. Este guia abrange:"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:21
#, fuzzy
msgid "Testing in JVM mode"
msgstr "Testes no modo JVM"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:22
#, fuzzy
msgid "Testing in native mode"
msgstr "Testes em modo nativo"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:23
#, fuzzy
msgid "Injection of resources into tests"
msgstr "Injeção de recursos nos ensaios"

#. type: Title ==
#: upstream/_guides/getting-started-testing.adoc:24
#, fuzzy, no-wrap
msgid "Prerequisites"
msgstr "Pré-requisitos"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:28
#, fuzzy
msgid "The completed greeter application from the xref:getting-started.adoc[Getting Started Guide]"
msgstr "A aplicação de rececionista preenchida do  link:getting-started.html[Guia de Introdução]"

#. type: Title ==
#: upstream/_guides/getting-started-testing.adoc:29
#, fuzzy, no-wrap
msgid "Architecture"
msgstr "Arquitetura"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:33
#, fuzzy
msgid "In this guide, we expand on the initial test that was created as part of the Getting Started Guide.  We cover injection into tests and also how to test native executables."
msgstr "Neste guia, expandimos o teste inicial que foi criado como parte do Guia de Introdução. Cobrimos a injeção em testes e também como testar executáveis nativos."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:35
#, fuzzy
msgid "Quarkus supports Continuous testing, but this is covered by the xref:continuous-testing.adoc[Continuous Testing Guide]."
msgstr "O Quarkus suporta testes contínuos, mas isso é abordado no  link:continuous-testing.html[Guia de testes contínuos]."

#. type: Title ==
#: upstream/_guides/getting-started-testing.adoc:36
#, fuzzy, no-wrap
msgid "Solution"
msgstr "Solução"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:40
#, fuzzy
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "Recomendamos que siga as instruções nas secções seguintes e crie a aplicação passo a passo. No entanto, pode ir diretamente para o exemplo completo."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:42
#, fuzzy
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Clonar o repositório Git: `git clone {quickstarts-clone-url}`, ou descarregar um {quickstarts-archive-url}[arquivo]."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:44
#, fuzzy
msgid "The solution is located in the `getting-started-testing` link:{quickstarts-tree-url}/getting-started-testing[directory]."
msgstr "A solução está localizada no  link:{quickstarts-tree-url}/getting-started-testing[diretório] `getting-started-testing`."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:46
#, fuzzy
msgid "This guide assumes you already have the completed application from the `getting-started` directory."
msgstr "Este guia parte do princípio de que já tem a aplicação preenchida no diretório `getting-started`."

#. type: Title ==
#: upstream/_guides/getting-started-testing.adoc:47
#, fuzzy, no-wrap
msgid "Recap of HTTP based Testing in JVM mode"
msgstr "Recapitulação dos testes baseados em HTTP no modo JVM"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:51
#, fuzzy
msgid "If you have started from the Getting Started example you should already have a completed test, including the correct tooling setup."
msgstr "Se tiver começado a partir do exemplo de Introdução, já deve ter um teste concluído, incluindo a configuração correcta das ferramentas."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:53
#, fuzzy
msgid "In your build file you should see 2 test dependencies:"
msgstr "No seu ficheiro de compilação, deve ver 2 dependências de teste:"

#. type: Block title
#: upstream/_guides/getting-started-testing.adoc:54
#, fuzzy, no-wrap
msgid "Maven"
msgstr "Maven"

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:68
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.rest-assured</groupId>\n"
"    <artifactId>rest-assured</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/getting-started-testing.adoc:71
#, fuzzy, no-wrap
msgid "Gradle"
msgstr "Gradle"

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:79
#, no-wrap
msgid ""
"dependencies {\n"
"    testImplementation(\"io.quarkus:quarkus-junit5\")\n"
"    testImplementation(\"io.rest-assured:rest-assured\")\n"
"}\n"
msgstr ""

#. type: delimited block *
#: upstream/_guides/getting-started-testing.adoc:85
#, fuzzy
msgid "`quarkus-junit5` is required for testing, as it provides the `@QuarkusTest` annotation that controls the testing framework.  `rest-assured` is not required but is a convenient way to test HTTP endpoints, we also provide integration that automatically sets the correct URL so no configuration is required."
msgstr "`quarkus-junit5` é necessário para os testes, uma vez que fornece a anotação `@QuarkusTest` que controla a estrutura de testes. `rest-assured` não é necessário, mas é uma forma conveniente de testar pontos finais HTTP. Também fornecemos uma integração que define automaticamente o URL correto, pelo que não é necessária qualquer configuração."

#. type: delimited block *
#: upstream/_guides/getting-started-testing.adoc:88
#, fuzzy
msgid "Because we are using JUnit 5, the version of the https://maven.apache.org/surefire/maven-surefire-plugin/[Surefire Maven Plugin] must be set, as the default version does not support Junit 5:"
msgstr "Como estamos a utilizar o JUnit 5, a versão do  link:https://maven.apache.org/surefire/maven-surefire-plugin/[plug-in Surefire Maven] tem de ser definida, uma vez que a versão predefinida não suporta o Junit 5:"

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:101
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-surefire-plugin</artifactId>\n"
"    <version>${surefire-plugin.version}</version>\n"
"    <configuration>\n"
"       <systemPropertyVariables>\n"
"          <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n"
"          <maven.home>${maven.home}</maven.home>\n"
"       </systemPropertyVariables>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:105
#, fuzzy
msgid "We also set the `java.util.logging.manager` system property to make sure tests will use the correct logmanager and `maven.home` to ensure that custom configuration from `${maven.home}/conf/settings.xml` is applied (if any)."
msgstr "Também definimos a propriedade de sistema `java.util.logging.manager` para garantir que os testes utilizarão o gestor de registos correto e `maven.home` para garantir que a configuração personalizada de `${maven.home}/conf/settings.xml` é aplicada (se existir)."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:107
#, fuzzy
msgid "The project should also contain a simple test:"
msgstr "O projeto deve também conter um teste simples:"

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:111
#: upstream/_guides/getting-started-testing.adoc:206
#: upstream/_guides/getting-started-testing.adoc:270
#: upstream/_guides/getting-started-testing.adoc:311
#: upstream/_guides/getting-started-testing.adoc:350
#: upstream/_guides/getting-started-testing.adoc:438
#: upstream/_guides/getting-started-testing.adoc:501
#, no-wrap
msgid "package org.acme.getting.started.testing;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:114
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:116
#: upstream/_guides/getting-started-testing.adoc:317
#, no-wrap
msgid "import java.util.UUID;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:119
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.CoreMatchers.is;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:122
#: upstream/_guides/getting-started-testing.adoc:1037
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class GreetingResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:131
#, no-wrap
msgid ""
"    @Test\n"
"    public void testHelloEndpoint() {\n"
"        given()\n"
"          .when().get(\"/hello\")\n"
"          .then()\n"
"             .statusCode(200)\n"
"             .body(is(\"hello\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:142
#, no-wrap
msgid ""
"    @Test\n"
"    public void testGreetingEndpoint() {\n"
"        String uuid = UUID.randomUUID().toString();\n"
"        given()\n"
"          .pathParam(\"name\", uuid)\n"
"          .when().get(\"/hello/greeting/{name}\")\n"
"          .then()\n"
"            .statusCode(200)\n"
"            .body(is(\"hello \" + uuid));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:144
#: upstream/_guides/getting-started-testing.adoc:410
#: upstream/_guides/getting-started-testing.adoc:734
#: upstream/_guides/getting-started-testing.adoc:1054
#: upstream/_guides/getting-started-testing.adoc:1295
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:148
#, fuzzy
msgid "This test uses HTTP to directly test our REST endpoint. When the test is run the application will be started before the test is run."
msgstr "Este teste utiliza HTTP para testar diretamente o nosso ponto de extremidade REST. Quando o teste for executado, a aplicação será iniciada antes de o teste ser executado."

#. type: Title ===
#: upstream/_guides/getting-started-testing.adoc:149
#, fuzzy, no-wrap
msgid "Controlling the test port"
msgstr "Controlo da porta de ensaio"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:153
#, fuzzy
msgid "While Quarkus will listen on port `8080` by default, when running tests it defaults to `8081`. This allows you to run tests while having the application running in parallel."
msgstr "Embora o Quarkus escute na porta `8080` por padrão, ao executar testes, o padrão é `8081`. Isso permite que você execute testes enquanto o aplicativo é executado em paralelo."

#. type: Block title
#: upstream/_guides/getting-started-testing.adoc:155
#, fuzzy, no-wrap
msgid "Changing the test port"
msgstr "Alterar a porta de teste"

#. type: delimited block =
#: upstream/_guides/getting-started-testing.adoc:158
#, fuzzy
msgid "You can configure the ports used by tests by configuring `quarkus.http.test-port` for HTTP and `quarkus.http.test-ssl-port` for HTTPS in your `application.properties`:"
msgstr "Pode configurar as portas utilizadas pelos testes configurando `quarkus.http.test-port` para HTTP e `quarkus.http.test-ssl-port` para HTTPS no seu `application.properties`:"

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:162
#, no-wrap
msgid ""
"quarkus.http.test-port=8083\n"
"quarkus.http.test-ssl-port=8446\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:164
#, fuzzy
msgid "`0` will result in the use of a random port (assigned by the operating system)."
msgstr "`0` resultará na utilização de uma porta aleatória (atribuída pelo sistema operativo)."

#. type: delimited block =
#: upstream/_guides/getting-started-testing.adoc:168
#, fuzzy
msgid "Quarkus also provides RestAssured integration that updates the default port used by RestAssured before the tests are run, so no additional configuration should be required."
msgstr "O Quarkus também fornece uma integração com o RestAssured que actualiza a porta predefinida utilizada pelo RestAssured antes da execução dos testes, pelo que não deve ser necessária qualquer configuração adicional."

#. type: Title ===
#: upstream/_guides/getting-started-testing.adoc:169
#, fuzzy, no-wrap
msgid "Controlling HTTP interaction timeout"
msgstr "Controlo do tempo limite de interação HTTP"

#. type: delimited block =
#: upstream/_guides/getting-started-testing.adoc:173
#, fuzzy
msgid "When using REST Assured in your test, the connection and response timeouts are set to 30 seconds.  You can override this setting with the `quarkus.http.test-timeout` property:"
msgstr "Ao usar REST Assured em seu teste, os tempos limite de conexão e resposta são definidos como 30 segundos. Você pode substituir essa configuração com a propriedade `quarkus.http.test-timeout`:"

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:177
#, no-wrap
msgid "quarkus.http.test-timeout=10s\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/getting-started-testing.adoc:179
#, fuzzy, no-wrap
msgid "Injecting a URI"
msgstr "Injetar um URI"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:183
#, fuzzy
msgid "It is also possible to directly inject the URL into the test which can make is easy to use a different client. This is done via the `@TestHTTPResource` annotation."
msgstr "Também é possível injetar diretamente o URL no teste, o que pode facilitar a utilização de um cliente diferente. Isto é feito através da anotação `@TestHTTPResource`."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:186
#, fuzzy
msgid "Let's write a simple test that shows this off to load some static resources. First create a simple HTML file in `src/main/resources/META-INF/resources/index.html` :"
msgstr "Vamos escrever um teste simples que mostre isso para carregar alguns recursos estáticos. Primeiro, crie um arquivo HTML simples em `src/main/resources/META-INF/resources/index.html`:"

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:198
#, no-wrap
msgid ""
"<html>\n"
"    <head>\n"
"        <title>Testing Guide</title>\n"
"    </head>\n"
"    <body>\n"
"        Information about testing\n"
"    </body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:201
#, fuzzy
msgid "We will create a simple test to ensure that this is being served correctly:"
msgstr "Vamos criar um teste simples para garantir que este está a ser servido corretamente:"

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:211
#: upstream/_guides/getting-started-testing.adoc:275
#, no-wrap
msgid ""
"import java.io.IOException;\n"
"import java.io.InputStream;\n"
"import java.net.URL;\n"
"import java.nio.charset.StandardCharsets;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:214
#: upstream/_guides/getting-started-testing.adoc:278
#: upstream/_guides/getting-started-testing.adoc:355
#, no-wrap
msgid ""
"import org.junit.jupiter.api.Assertions;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:217
#, no-wrap
msgid ""
"import io.quarkus.test.common.http.TestHTTPResource;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:220
#: upstream/_guides/getting-started-testing.adoc:285
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class StaticContentTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:223
#, no-wrap
msgid ""
"    @TestHTTPResource(\"index.html\") // <1>\n"
"    URL url;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:232
#, no-wrap
msgid ""
"    @Test\n"
"    public void testIndexHtml() throws IOException {\n"
"        try (InputStream in = url.openStream()) {\n"
"            String contents = new String(in.readAllBytes(), StandardCharsets.UTF_8);\n"
"            Assertions.assertTrue(contents.contains(\"<title>Testing Guide</title>\"));\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:234
#, fuzzy
msgid "This annotation allows you to directly inject the URL of the Quarkus instance, the value of the annotation will be the path component of the URL"
msgstr "Esta anotação permite-lhe injetar diretamente o URL da instância Quarkus, o valor da anotação será o componente do caminho do URL"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:236
#, fuzzy
msgid "For now `@TestHTTPResource` allows you to inject `URI`, `URL` and `String` representations of the URL."
msgstr "Por enquanto, `@TestHTTPResource` permite-lhe injetar `URI`, `URL` e `String` representações do URL."

#. type: Title ==
#: upstream/_guides/getting-started-testing.adoc:237
#, fuzzy, no-wrap
msgid "Testing a specific endpoint"
msgstr "Testar um ponto final específico"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:242
#, fuzzy
msgid "Both RESTassured and `@TestHTTPResource` allow you to specify the endpoint class you are testing rather than hard coding a path. This currently supports both Jakarta REST endpoints, Servlets and Reactive Routes. This makes it a lot easier to see exactly which endpoints a given test is testing."
msgstr "Tanto o RESTassured como o `@TestHTTPResource` permitem-lhe especificar a classe do ponto final que está a testar em vez de codificar um caminho. Isso atualmente suporta ambos os endpoints Jakarta REST, Servlets e Rotas Reativas. Isso torna muito mais fácil ver exatamente quais pontos de extremidade um determinado teste está testando."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:244
#, fuzzy
msgid "For the purposes of these examples I am going to assume we have an endpoint that looks like the following:"
msgstr "Para efeitos destes exemplos, vou assumir que temos um ponto final que se parece com o seguinte:"

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:249
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"public class GreetingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:256
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return \"hello\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:260
#, fuzzy
msgid "This currently does not support the `@ApplicationPath()` annotation to set the Jakarta REST context path. Use the `quarkus.resteasy.path` config value instead if you want a custom context path."
msgstr "Atualmente, isto não suporta a anotação `@ApplicationPath()` para definir o caminho do contexto Jakarta REST. Em vez disso, utilize o valor de configuração `quarkus.resteasy.path` se pretender um caminho de contexto personalizado."

#. type: Title ===
#: upstream/_guides/getting-started-testing.adoc:261
#, fuzzy, no-wrap
msgid "TestHTTPResource"
msgstr "TestHTTPResource"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:266
#, fuzzy
msgid "You can the use the `io.quarkus.test.common.http.TestHTTPEndpoint` annotation to specify the endpoint path, and the path will be extracted from the provided endpoint. If you also specify a value for the `TestHTTPResource` endpoint it will be appended to the end of the endpoint path."
msgstr "Pode utilizar a anotação `io.quarkus.test.common.http.TestHTTPEndpoint` para especificar o caminho do ponto final, e o caminho será extraído do ponto final fornecido. Se também especificar um valor para o ponto final `TestHTTPResource`, ele será anexado ao final do caminho do ponto final."

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:282
#, no-wrap
msgid ""
"import io.quarkus.test.common.http.TestHTTPEndpoint;\n"
"import io.quarkus.test.common.http.TestHTTPResource;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:289
#, no-wrap
msgid ""
"    @TestHTTPEndpoint(GreetingResource.class)  // <1>\n"
"    @TestHTTPResource\n"
"    URL url;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:298
#, no-wrap
msgid ""
"    @Test\n"
"    public void testIndexHtml() throws IOException {\n"
"        try (InputStream in = url.openStream()) {\n"
"            String contents = new String(in.readAllBytes(), StandardCharsets.UTF_8);\n"
"            Assertions.assertEquals(\"hello\", contents);\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:301
#, fuzzy
msgid "Because `GreetingResource` is annotated with `@Path(\"/hello\")` the injected URL will end with `/hello`."
msgstr "Como `GreetingResource` é anotado com `@Path(\"/hello\")`, o URL injetado terminará com `/hello`."

#. type: Title ===
#: upstream/_guides/getting-started-testing.adoc:302
#, fuzzy, no-wrap
msgid "RESTassured"
msgstr "RESTassured"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:307
#, fuzzy
msgid "To control the RESTassured base path (i.e. the default path that serves as the root for every request) you can use the `io.quarkus.test.common.http.TestHTTPEndpoint` annotation. This can be applied at the class or method level. To test out greeting resource we would do:"
msgstr "Para controlar o caminho de base RESTassured (ou seja, o caminho predefinido que serve de raiz para todos os pedidos), pode utilizar a anotação `io.quarkus.test.common.http.TestHTTPEndpoint`. Isso pode ser aplicado no nível da classe ou do método. Para testar o recurso de saudação, faríamos:"

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:315
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.common.http.TestHTTPEndpoint;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:320
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.when;\n"
"import static org.hamcrest.CoreMatchers.is;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:324
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@TestHTTPEndpoint(GreetingResource.class) //<1>\n"
"public class GreetingResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:333
#, no-wrap
msgid ""
"    @Test\n"
"    public void testHelloEndpoint() {\n"
"        when().get()    //<2>\n"
"          .then()\n"
"             .statusCode(200)\n"
"             .body(is(\"hello\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:335
#, fuzzy
msgid "This tells RESTAssured to prefix all requests with `/hello`."
msgstr "Isto diz ao RESTAssured para prefixar todos os pedidos com `/hello`."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:336
#, fuzzy
msgid "Note we don't need to specify a path here, as `/hello` is the default for this test"
msgstr "Note que não é necessário especificar um caminho aqui, pois `/hello` é o padrão para este teste"

#. type: Title ==
#: upstream/_guides/getting-started-testing.adoc:337
#, fuzzy, no-wrap
msgid "Injection into tests"
msgstr "Injeção nos ensaios"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:341
#, fuzzy
msgid "So far we have only covered integration style tests that test the app via HTTP endpoints, but what if we want to do unit testing and test our beans directly?"
msgstr "Até agora, só abordámos os testes de integração que testam a aplicação através de pontos de extremidade HTTP, mas e se quisermos fazer testes unitários e testar os nossos beans diretamente?"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:345
#, fuzzy
msgid "Quarkus supports this by allowing you to inject CDI beans into your tests via the `@Inject` annotation (in fact, tests in Quarkus are full CDI beans, so you can use all CDI functionality). Let's create a simple test that tests the greeting service directly without using HTTP:"
msgstr "O Quarkus suporta isto, permitindo-lhe injetar beans CDI nos seus testes através da anotação `@Inject` (de facto, os testes no Quarkus são beans CDI completos, pelo que pode utilizar todas as funcionalidades CDI). Vamos criar um teste simples que testa o serviço de saudação diretamente sem utilizar HTTP:"

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:352
#, no-wrap
msgid "import jakarta.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:357
#, no-wrap
msgid "import io.quarkus.test.junit.QuarkusTest;\n"
msgstr "import io.quarkus.test.junit.QuarkusTest;\n"

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:360
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class GreetingServiceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:363
#, no-wrap
msgid ""
"    @Inject // <1>\n"
"    GreetingService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:369
#, no-wrap
msgid ""
"    @Test\n"
"    public void testGreetingService() {\n"
"        Assertions.assertEquals(\"hello Quarkus\", service.greeting(\"Quarkus\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:371
#, fuzzy
msgid "The `GreetingService` bean will be injected into the test"
msgstr "O feijão `GreetingService` será injetado no teste"

#. type: Title ==
#: upstream/_guides/getting-started-testing.adoc:372
#, fuzzy, no-wrap
msgid "Applying Interceptors to Tests"
msgstr "Aplicação de interceptores a testes"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:377
#, fuzzy
msgid "As mentioned above Quarkus tests are actually full CDI beans, and as such you can apply CDI interceptors as you would normally. As an example, if you want a test method to run within the context of a transaction you can simply apply the `@Transactional` annotation to the method and the transaction interceptor will handle it."
msgstr "Como mencionado anteriormente, os testes Quarkus são na realidade beans CDI completos e, como tal, pode aplicar interceptores CDI como faria normalmente. Por exemplo, se quiser que um método de teste seja executado no contexto de uma transação, pode simplesmente aplicar a anotação `@Transactional` ao método e o intercetor de transação tratará disso."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:380
#, fuzzy
msgid "In addition to this you can also create your own test stereotypes. For example, we could create a `@TransactionalQuarkusTest` as follows:"
msgstr "Para além disso, também pode criar os seus próprios estereótipos de teste. Por exemplo, podemos criar um `@TransactionalQuarkusTest` da seguinte forma:"

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:390
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@Stereotype\n"
"@Transactional\n"
"@Retention(RetentionPolicy.RUNTIME)\n"
"@Target(ElementType.TYPE)\n"
"public @interface TransactionalQuarkusTest {\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:394
#, fuzzy
msgid "If we then apply this annotation to a test class it will act as if we had applied both the `@QuarkusTest` and `@Transactional` annotations, e.g.:"
msgstr "Se aplicarmos esta anotação a uma classe de teste, esta actuará como se tivéssemos aplicado as anotações `@QuarkusTest` e `@Transactional`, por exemplo:"

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:400
#, no-wrap
msgid ""
"@TransactionalQuarkusTest\n"
"public class TestStereotypeTestCase {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:403
#, no-wrap
msgid ""
"    @Inject\n"
"    UserTransaction userTransaction;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:408
#, no-wrap
msgid ""
"    @Test\n"
"    public void testUserTransaction() throws Exception {\n"
"        Assertions.assertEquals(Status.STATUS_ACTIVE, userTransaction.getStatus());\n"
"    }\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/getting-started-testing.adoc:412
#, fuzzy, no-wrap
msgid "Tests and Transactions"
msgstr "Testes e transacções"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:418
#, fuzzy
msgid "You can use the standard Quarkus `@Transactional` annotation on tests, but this means that the changes your test makes to the database will be persistent. If you want any changes made to be rolled back at the end of the test you can use the `io.quarkus.test.TestTransaction` annotation. This will run the test method in a transaction, but roll it back once the test method is complete to revert any database changes."
msgstr "Pode utilizar a anotação padrão do Quarkus `@Transactional` nos testes, mas isto significa que as alterações que o seu teste faz à base de dados serão persistentes. Se quiser que quaisquer alterações feitas sejam revertidas no final do teste, pode usar a anotação `io.quarkus.test.TestTransaction`. Isto irá executar o método de teste numa transação, mas irá revertê-lo assim que o método de teste estiver concluído para reverter quaisquer alterações à base de dados."

#. type: Title ==
#: upstream/_guides/getting-started-testing.adoc:419
#, fuzzy, no-wrap
msgid "Enrichment via QuarkusTest*Callback"
msgstr "Enriquecimento através de QuarkusTest*Callback"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:422
#, fuzzy
msgid "Alternatively or additionally to an interceptor, you can enrich *all* your `@QuarkusTest` classes by implementing the following callback interfaces:"
msgstr "Em alternativa ou adicionalmente a um intercetor, pode enriquecer *todas as* suas classes `@QuarkusTest` implementando as seguintes interfaces de retorno de chamada:"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:424
#, fuzzy
msgid "`io.quarkus.test.junit.callback.QuarkusTestBeforeClassCallback`"
msgstr "`io.quarkus.test.junit.callback.QuarkusTestBeforeClassCallback`"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:425
#, fuzzy
msgid "`io.quarkus.test.junit.callback.QuarkusTestAfterConstructCallback`"
msgstr "`io.quarkus.test.junit.callback.QuarkusTestAfterConstructCallback`"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:426
#, fuzzy
msgid "`io.quarkus.test.junit.callback.QuarkusTestBeforeEachCallback`"
msgstr "`io.quarkus.test.junit.callback.QuarkusTestBeforeEachCallback`"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:427
#, fuzzy
msgid "`io.quarkus.test.junit.callback.QuarkusTestBeforeTestExecutionCallback`"
msgstr "`io.quarkus.test.junit.callback.QuarkusTestBeforeTestExecutionCallback`"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:428
#, fuzzy
msgid "`io.quarkus.test.junit.callback.QuarkusTestAfterTestExecutionCallback`"
msgstr "`io.quarkus.test.junit.callback.QuarkusTestAfterTestExecutionCallback`"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:429
#, fuzzy
msgid "`io.quarkus.test.junit.callback.QuarkusTestAfterEachCallback`"
msgstr "`io.quarkus.test.junit.callback.QuarkusTestAfterEachCallback`"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:431
#, fuzzy
msgid "Optionally, you can enable these callbacks also for the `@QuarkusIntegrationTest` tests if the property `quarkus.test.enable-callbacks-for-integration-tests` is `true`."
msgstr "Opcionalmente, pode ativar estas chamadas de retorno também para os testes `@QuarkusIntegrationTest` se a propriedade `quarkus.test.enable-callbacks-for-integration-tests` for `true`."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:433
#, fuzzy
msgid "Such a callback implementation has to be registered as a \"service provider\" as defined by `java.util.ServiceLoader`."
msgstr "Essa implementação de retorno de chamada tem de ser registada como um \"fornecedor de serviços\", tal como definido em `java.util.ServiceLoader`."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:435
#, fuzzy
msgid "E.g. the following sample callback:"
msgstr "Por exemplo, o seguinte exemplo de chamada de retorno:"

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:441
#, no-wrap
msgid ""
"import io.quarkus.test.junit.callback.QuarkusTestBeforeEachCallback;\n"
"import io.quarkus.test.junit.callback.QuarkusTestMethodContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:443
#, no-wrap
msgid "public class MyQuarkusTestBeforeEachCallback implements QuarkusTestBeforeEachCallback {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:449
#, no-wrap
msgid ""
"    @Override\n"
"    public void beforeEach(QuarkusTestMethodContext context) {\n"
"        System.out.println(\"Executing \" + context.getTestMethod());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:451
#, fuzzy
msgid "has to be registered via `src/main/resources/META-INF/services/io.quarkus.test.junit.callback.QuarkusTestBeforeEachCallback` as follows:"
msgstr "tem de ser registado em `src/main/resources/META-INF/services/io.quarkus.test.junit.callback.QuarkusTestBeforeEachCallback` da seguinte forma:"

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:454
#, no-wrap
msgid "org.acme.getting.started.testing.MyQuarkusTestBeforeEachCallback\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:457
#, fuzzy
msgid "It is possible to read annotations from the test class or method to control what the callback shall be doing."
msgstr "É possível ler anotações da classe ou método de teste para controlar o que a chamada de retorno deve fazer."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:460
#, fuzzy, no-wrap
msgid ""
"While it is possible to use JUnit Jupiter callback interfaces like `BeforeEachCallback`, you might run into classloading issues because Quarkus has\n"
"         to run tests in a custom classloader which JUnit is not aware of.\n"
msgstr "Embora seja possível utilizar as interfaces de retorno de chamada do JUnit Jupiter como `BeforeEachCallback`, poderá deparar-se com problemas de carregamento de classes porque o Quarkus tem de executar testes num carregador de classes personalizado que o JUnit não conhece."

#. type: Title ==
#: upstream/_guides/getting-started-testing.adoc:462
#, fuzzy, no-wrap
msgid "Testing Different Profiles"
msgstr "Teste de perfis diferentes"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:467
#, fuzzy
msgid "So far in all our examples we only start Quarkus once for all tests. Before the first test is run Quarkus will boot, then all tests will run, then Quarkus will shut down at the end. This makes for a very fast testing experience however it is a bit limited as you can't test different configurations."
msgstr "Até agora, em todos os nossos exemplos, só iniciámos o Quarkus uma vez para todos os testes. Antes de o primeiro teste ser executado, o Quarkus arranca, depois todos os testes são executados e, no final, o Quarkus desliga-se. Isto permite uma experiência de teste muito rápida, mas é um pouco limitada, pois não é possível testar configurações diferentes."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:471
#, fuzzy
msgid "To get around this Quarkus supports the idea of a test profile. If a test has a different profile to the previously run test then Quarkus will be shut down and started with the new profile before running the tests. This is obviously a bit slower, as it adds a shutdown/startup cycle to the test time, but gives a great deal of flexibility."
msgstr "Para contornar esta situação, o Quarkus suporta a ideia de um perfil de teste. Se um teste tiver um perfil diferente do teste executado anteriormente, o Quarkus será desligado e iniciado com o novo perfil antes de executar os testes. Isto é obviamente um pouco mais lento, pois acrescenta um ciclo de encerramento/arranque ao tempo do teste, mas dá uma grande flexibilidade."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:479
#, fuzzy
msgid "To reduce the amount of times Quarkus needs to restart, `io.quarkus.test.junit.util.QuarkusTestProfileAwareClassOrderer` is registered as a global `ClassOrderer` as described in the link:https://junit.org/junit5/docs/current/user-guide/#writing-tests-test-execution-order-classes[JUnit 5 User Guide].  The behavior of this `ClassOrderer` is configurable via `junit-platform.properties` (see the source code or javadoc for more details).  It can also be disabled entirely by setting another `ClassOrderer` that is provided by JUnit 5 or even your own custom one. + Please note that as of JUnit 5.8.2 link:https://github.com/junit-team/junit5/issues/2794[only a single `junit-platform.properties` is picked up and a warning is logged if more than one is found].  If you encounter such warnings, you can get rid of them by removing the Quarkus-supplied `junit-platform.properties` from the classpath via an exclusion:"
msgstr "Para reduzir a quantidade de vezes que o Quarkus precisa de reiniciar, `io.quarkus.test.junit.util.QuarkusTestProfileAwareClassOrderer` é registado como um `ClassOrderer` global, tal como descrito no  link:https://junit.org/junit5/docs/current/user-guide/#writing-tests-test-execution-order-classes[Guia do Utilizador JUnit 5]. O comportamento deste `ClassOrderer` é configurável através de `junit-platform.properties` (veja o código fonte ou o javadoc para mais detalhes). Ele também pode ser totalmente desativado configurando outro `ClassOrderer` que é fornecido pelo JUnit 5 ou até mesmo o seu próprio personalizado. + Observe que, a partir do JUnit 5.8.2,  link:https://github.com/junit-team/junit5/issues/2794[apenas um único `junit-platform.properties` é detectado e um aviso é registrado se mais de um for encontrado]. Se você encontrar tais avisos, você pode se livrar deles removendo o `junit-platform.properties` fornecido pelo Quarkus do classpath através de uma exclusão:"

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:492
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5</artifactId>\n"
"    <scope>test</scope>\n"
"    <exclusions>\n"
"        <exclusion>\n"
"            <groupId>io.quarkus</groupId>\n"
"            <artifactId>quarkus-junit5-properties</artifactId>\n"
"        </exclusion>\n"
"    </exclusions>\n"
"</dependency>\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/getting-started-testing.adoc:494
#, fuzzy, no-wrap
msgid "Writing a Profile"
msgstr "Escrever um perfil"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:497
#, fuzzy
msgid "To implement a test profile we need to implement `io.quarkus.test.junit.QuarkusTestProfile`:"
msgstr "Para implementar um perfil de teste, precisamos de implementar `io.quarkus.test.junit.QuarkusTestProfile`:"

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:506
#, no-wrap
msgid ""
"import java.util.Collections;\n"
"import java.util.List;\n"
"import java.util.Map;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:509
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTestProfile;\n"
"import io.quarkus.test.junit.QuarkusTestProfile.TestResourceEntry;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:511
#, no-wrap
msgid "public class MockGreetingProfile implements QuarkusTestProfile { <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:524
#, no-wrap
msgid ""
"    /**\n"
"     * Returns additional config to be applied to the test. This\n"
"     * will override any existing config (including in application.properties),\n"
"     * however existing config will be merged with this (i.e. application.properties\n"
"     * config will still take effect, unless a specific config key has been overridden).\n"
"     *\n"
"     * Here we are changing the Jakarta REST root path.\n"
"     */\n"
"    @Override\n"
"    public Map<String, String> getConfigOverrides() {\n"
"        return Collections.singletonMap(\"quarkus.resteasy.path\",\"/api\");\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:535
#, no-wrap
msgid ""
"    /**\n"
"     * Returns enabled alternatives.\n"
"     *\n"
"     * This has the same effect as setting the 'quarkus.arc.selected-alternatives' config key,\n"
"     * however it may be more convenient.\n"
"     */\n"
"    @Override\n"
"    public Set<Class<?>> getEnabledAlternatives() {\n"
"        return Collections.singleton(MockGreetingService.class);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:546
#, no-wrap
msgid ""
"    /**\n"
"     * Allows the default config profile to be overridden. This basically just sets the quarkus.test.profile system\n"
"     * property before the test is run.\n"
"     *\n"
"     * Here we are setting the profile to test-mocked\n"
"     */\n"
"    @Override\n"
"    public String getConfigProfile() {\n"
"        return \"test-mocked\";\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:558
#, no-wrap
msgid ""
"    /**\n"
"     * Additional {@link QuarkusTestResourceLifecycleManager} classes (along with their init params) to be used from this\n"
"     * specific test profile.\n"
"     *\n"
"     * If this method is not overridden, then only the {@link QuarkusTestResourceLifecycleManager} classes enabled via the {@link io.quarkus.test.common.QuarkusTestResource} class\n"
"     * annotation will be used for the tests using this profile (which is the same behavior as tests that don't use a profile at all).\n"
"     */\n"
"    @Override\n"
"    public List<TestResourceEntry> testResources() {\n"
"        return Collections.singletonList(new TestResourceEntry(CustomWireMockServerManager.class));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:568
#, no-wrap
msgid ""
"    /**\n"
"     * If this returns true then only the test resources returned from {@link #testResources()} will be started,\n"
"     * global annotated test resources will be ignored.\n"
"     */\n"
"    @Override\n"
"    public boolean disableGlobalTestResources() {\n"
"        return false;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:579
#, no-wrap
msgid ""
"    /**\n"
"     * The tags this profile is associated with.\n"
"     * When the {@code quarkus.test.profile.tags} System property is set (its value is a comma separated list of strings)\n"
"     * then Quarkus will only execute tests that are annotated with a {@code @TestProfile} that has at least one of the\n"
"     * supplied (via the aforementioned system property) tags.\n"
"     */\n"
"    @Override\n"
"    public Set<String> tags() {\n"
"        return Collections.emptySet();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:587
#, no-wrap
msgid ""
"    /**\n"
"     * The command line parameters that are passed to the main method on startup.\n"
"     */\n"
"    @Override\n"
"    public String[] commandLineParameters() {\n"
"        return new String[0];\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:595
#, no-wrap
msgid ""
"    /**\n"
"     * If the main method should be run.\n"
"     */\n"
"    @Override\n"
"    public boolean runMainMethod() {\n"
"        return false;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:605
#, no-wrap
msgid ""
"    /**\n"
"     * If this method returns true then all {@code StartupEvent} and {@code ShutdownEvent} observers declared on application\n"
"     * beans should be disabled.\n"
"     */\n"
"    @Override\n"
"    public boolean disableApplicationLifecycleObservers() {\n"
"        return false;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:607
#, fuzzy
msgid "All these methods have default implementations so just override the ones you need to override."
msgstr "Todos estes métodos têm implementações predefinidas, pelo que basta substituir os que precisa de substituir."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:610
#, fuzzy
msgid "Now we have defined our profile we need to include it on our test class.  We do this by annotating the test class with `@TestProfile(MockGreetingProfile.class)`."
msgstr "Agora que definimos o nosso perfil, precisamos de o incluir na nossa classe de teste. Fazemos isso anotando a classe de teste com `@TestProfile(MockGreetingProfile.class)`."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:613
#, fuzzy
msgid "All the test profile configuration is stored in a single class, which makes it easy to tell if the previous test ran with the same configuration."
msgstr "Toda a configuração do perfil de teste é armazenada numa única classe, o que torna mais fácil saber se o teste anterior foi executado com a mesma configuração."

#. type: Title ===
#: upstream/_guides/getting-started-testing.adoc:614
#, fuzzy, no-wrap
msgid "Running specific tests"
msgstr "Execução de testes específicos"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:618
#, fuzzy
msgid "Quarkus provides the ability to limit test execution to tests with specific `@TestProfile` annotations.  This works by leveraging the `tags` method of `QuarkusTestProfile` in conjunction with the `quarkus.test.profile.tags` system property."
msgstr "O Quarkus fornece a capacidade de limitar a execução de testes a testes com anotações `@TestProfile` específicas. Isso funciona aproveitando o método `tags` de `QuarkusTestProfile` em conjunto com a propriedade do sistema `quarkus.test.profile.tags`."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:622
#, fuzzy
msgid "Essentially, any `QuarkusTestProfile` with at least one matching tag matching the value of `quarkus.test.profile.tags` will be considered active and all the tests annotated with `@TestProfile` of active profiles, will be run while the rest will be skipped.  This is best shown in the following example."
msgstr "Essencialmente, qualquer `QuarkusTestProfile` com pelo menos uma etiqueta correspondente ao valor de `quarkus.test.profile.tags` será considerado ativo e todos os testes anotados com `@TestProfile` de perfis activos serão executados, enquanto os restantes serão ignorados. Isto é melhor demonstrado no exemplo seguinte."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:624
#, fuzzy
msgid "First let's define a few `QuarkusTestProfile` implementations like so:"
msgstr "Em primeiro lugar, vamos definir algumas implementações de `QuarkusTestProfile` da seguinte forma:"

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:627
#, no-wrap
msgid "public class Profiles {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:629
#, no-wrap
msgid "    public static class NoTags implements QuarkusTestProfile {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:631
#: upstream/_guides/getting-started-testing.adoc:1686
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:638
#, no-wrap
msgid ""
"    public static class SingleTag implements QuarkusTestProfile {\n"
"        @Override\n"
"        public Set<String> tags() {\n"
"            return Collections.singleton(\"test1\");\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:646
#, no-wrap
msgid ""
"    public static class MultipleTags implements QuarkusTestProfile {\n"
"        @Override\n"
"        public Set<String> tags() {\n"
"            return new HashSet<>(Arrays.asList(\"test1\", \"test2\"));\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:649
#, fuzzy
msgid "Now let's assume that we have the following tests:"
msgstr "Agora vamos supor que temos os seguintes testes:"

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:654
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class NoQuarkusProfileTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:660
#: upstream/_guides/getting-started-testing.adoc:673
#: upstream/_guides/getting-started-testing.adoc:686
#: upstream/_guides/getting-started-testing.adoc:699
#, no-wrap
msgid ""
"    @Test\n"
"    public void test() {\n"
"        // test something\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:667
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@TestProfile(Profiles.NoTags.class)\n"
"public class NoTagsTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:680
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@TestProfile(Profiles.SingleTag.class)\n"
"public class SingleTagTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:693
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@TestProfile(Profiles.MultipleTags.class)\n"
"public class MultipleTagsTest {\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:702
#, fuzzy
msgid "Let's consider the following scenarios:"
msgstr "Consideremos os seguintes cenários:"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:704
#, fuzzy
msgid "`quarkus.test.profile.tags` is not set: All tests will be executed."
msgstr "`quarkus.test.profile.tags` não está definido: Todos os testes serão executados."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:706
#, fuzzy
msgid "`quarkus.test.profile.tags=foo`: In this case none of tests will be executed because none of the tags defined on the `QuarkusTestProfile` implementations match the value of `quarkus.test.profile.tags`.  Note that `NoQuarkusProfileTest` is not executed either because it is not annotated with `@TestProfile`."
msgstr "`quarkus.test.profile.tags=foo`: Neste caso, nenhum dos testes será executado porque nenhuma das etiquetas definidas nas implementações `QuarkusTestProfile` corresponde ao valor de `quarkus.test.profile.tags`. Note-se que `NoQuarkusProfileTest` também não é executado porque não está anotado com `@TestProfile`."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:708
#, fuzzy
msgid "`quarkus.test.profile.tags=test1`: In this case `SingleTagTest` and `MultipleTagsTest` will be run because the tags on their respective `QuarkusTestProfile` implementations match the value of `quarkus.test.profile.tags`."
msgstr "`quarkus.test.profile.tags=test1`: Neste caso, `SingleTagTest` e `MultipleTagsTest` serão executados porque as etiquetas das suas respectivas implementações `QuarkusTestProfile` correspondem ao valor de `quarkus.test.profile.tags`."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:709
#, fuzzy
msgid "`quarkus.test.profile.tags=test1,test3`: This case results in the same tests being executed as the previous case."
msgstr "`quarkus.test.profile.tags=test1,test3`: Este caso resulta na execução dos mesmos testes que o caso anterior."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:711
#, fuzzy
msgid "`quarkus.test.profile.tags=test2,test3`: In this case only `MultipleTagsTest` will be run because `MultipleTagsTest` is the only `QuarkusTestProfile` implementation whose `tags` method matches the value of `quarkus.test.profile.tags`."
msgstr "`quarkus.test.profile.tags=test2,test3`: Neste caso, apenas `MultipleTagsTest` será executado porque `MultipleTagsTest` é a única implementação de `QuarkusTestProfile` cujo método `tags` corresponde ao valor de `quarkus.test.profile.tags`."

#. type: Title ==
#: upstream/_guides/getting-started-testing.adoc:712
#, fuzzy, no-wrap
msgid "Mock Support"
msgstr "Suporte simulado"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:716
#, fuzzy
msgid "Quarkus supports the use of mock objects using two different approaches. You can either use CDI alternatives to mock out a bean for all test classes, or use `QuarkusMock` to mock out beans on a per test basis."
msgstr "O Quarkus suporta a utilização de objectos de simulação utilizando duas abordagens diferentes. Pode utilizar alternativas CDI para simular um bean para todas as classes de teste, ou utilizar `QuarkusMock` para simular beans por teste."

#. type: Title ===
#: upstream/_guides/getting-started-testing.adoc:717
#, fuzzy, no-wrap
msgid "CDI `@Alternative` mechanism."
msgstr "CDI `@Alternative` mecanismo."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:723
#, fuzzy
msgid "To use this simply override the bean you wish to mock with a class in the `src/test/java` directory, and put the `@Alternative` and `@Priority(1)` annotations on the bean.  Alternatively, a convenient `io.quarkus.test.Mock` stereotype annotation could be used.  This built-in stereotype declares `@Alternative`, `@Priority(1)` and `@Dependent`.  For example if I have the following service:"
msgstr "Para usar isso, basta substituir o bean que deseja simular por uma classe no diretório `src/test/java` e colocar as anotações `@Alternative` e `@Priority(1)` no bean. Como alternativa, uma anotação conveniente do estereótipo `io.quarkus.test.Mock` pode ser usada. Este estereótipo incorporado declara `@Alternative`, `@Priority(1)` e `@Dependent`. Por exemplo, se eu tiver o seguinte serviço:"

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:728
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class ExternalService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:732
#, no-wrap
msgid ""
"    public String service() {\n"
"        return \"external\";\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:737
#, fuzzy
msgid "I could mock it with the following class in `src/test/java`:"
msgstr "Posso simulá-lo com a seguinte classe em `src/test/java`:"

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:743
#, no-wrap
msgid ""
"@Mock\n"
"@ApplicationScoped // <1>\n"
"public class MockExternalService extends ExternalService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:749
#, no-wrap
msgid ""
"    @Override\n"
"    public String service() {\n"
"        return \"mock\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:751
#, fuzzy
msgid "Overrides the `@Dependent` scope declared on the `@Mock` stereotype."
msgstr "Substitui o âmbito `@Dependent` declarado no estereótipo `@Mock`."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:754
#, fuzzy
msgid "It is important that the alternative be present in the `src/test/java` directory rather than `src/main/java`, as otherwise it will take effect all the time, not just when testing."
msgstr "É importante que a alternativa esteja presente no diretório `src/test/java` em vez de `src/main/java`, pois caso contrário terá sempre efeito e não apenas durante o teste."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:757
#, fuzzy
msgid "Note that at present this approach does not work with native image testing, as this would require the test alternatives to be baked into the native image."
msgstr "Note-se que, atualmente, esta abordagem não funciona com testes de imagens nativas, uma vez que tal exigiria que as alternativas de teste fossem incorporadas na imagem nativa."

#. type: Title ===
#: upstream/_guides/getting-started-testing.adoc:759
#, fuzzy, no-wrap
msgid "Mocking using QuarkusMock"
msgstr "Simulação com o QuarkusMock"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:764
#, fuzzy
msgid "The `io.quarkus.test.junit.QuarkusMock` class can be used to temporarily mock out any normal scoped bean. If you use this method in a `@BeforeAll` method the mock will take effect for all tests on the current class, while if you use this in a test method the mock will only take effect for the duration of the current test."
msgstr "A classe `io.quarkus.test.junit.QuarkusMock` pode ser usada para simular temporariamente qualquer bean com escopo normal. Se utilizar este método num método `@BeforeAll`, a simulação terá efeito em todos os testes da classe atual, enquanto que se o utilizar num método de teste, a simulação só terá efeito durante o teste atual."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:767
#, fuzzy
msgid "This method can be used for any normal scoped CDI bean (e.g. `@ApplicationScoped`, `@RequestScoped` etc, basically every scope except `@Singleton` and `@Dependent`)."
msgstr "Este método pode ser utilizado para qualquer bean CDI de âmbito normal (por exemplo, `@ApplicationScoped`, `@RequestScoped` etc., basicamente todos os âmbitos exceto `@Singleton` e `@Dependent`)."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:769
#, fuzzy
msgid "An example usage could look like:"
msgstr "Um exemplo de utilização poderia ser o seguinte:"

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:774
#: upstream/_guides/getting-started-testing.adoc:846
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class MockTestCase {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:777
#, no-wrap
msgid ""
"    @Inject\n"
"    MockableBean1 mockableBean1;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:780
#, no-wrap
msgid ""
"    @Inject\n"
"    MockableBean2 mockableBean2;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:787
#, no-wrap
msgid ""
"    @BeforeAll\n"
"    public static void setup() {\n"
"        MockableBean1 mock = Mockito.mock(MockableBean1.class);\n"
"        Mockito.when(mock.greet(\"Stuart\")).thenReturn(\"A mock for Stuart\");\n"
"        QuarkusMock.installMockForType(mock, MockableBean1.class);  // <1>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:793
#, no-wrap
msgid ""
"    @Test\n"
"    public void testBeforeAll() {\n"
"        Assertions.assertEquals(\"A mock for Stuart\", mockableBean1.greet(\"Stuart\"));\n"
"        Assertions.assertEquals(\"Hello Stuart\", mockableBean2.greet(\"Stuart\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:800
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPerTestMock() {\n"
"        QuarkusMock.installMockForInstance(new BonjourGreeter(), mockableBean2); // <2>\n"
"        Assertions.assertEquals(\"A mock for Stuart\", mockableBean1.greet(\"Stuart\"));\n"
"        Assertions.assertEquals(\"Bonjour Stuart\", mockableBean2.greet(\"Stuart\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:803
#: upstream/_guides/getting-started-testing.adoc:873
#, no-wrap
msgid ""
"    @ApplicationScoped\n"
"    public static class MockableBean1 {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:808
#: upstream/_guides/getting-started-testing.adoc:816
#: upstream/_guides/getting-started-testing.adoc:878
#, no-wrap
msgid ""
"        public String greet(String name) {\n"
"            return \"Hello \" + name;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:811
#: upstream/_guides/getting-started-testing.adoc:881
#, no-wrap
msgid ""
"    @ApplicationScoped\n"
"    public static class MockableBean2 {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:824
#, no-wrap
msgid ""
"    public static class BonjourGreeter extends MockableBean2 {\n"
"        @Override\n"
"        public String greet(String name) {\n"
"            return \"Bonjour \" + name;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:826
#, fuzzy
msgid "As the injected instance is not available here we use `installMockForType`, this mock is used for both test methods"
msgstr "Como a instância injectada não está disponível, utilizamos `installMockForType`, este mock é utilizado para ambos os métodos de teste"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:827
#, fuzzy
msgid "We use `installMockForInstance` to replace the injected bean, this takes effect for the duration of the test method."
msgstr "Utilizamos `installMockForInstance` para substituir o bean injetado, o que tem efeito durante a duração do método de teste."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:830
#, fuzzy
msgid "Note that there is no dependency on Mockito, you can use any mocking library you like, or even manually override the objects to provide the behaviour you require."
msgstr "Note-se que não há dependência do Mockito, pode utilizar qualquer biblioteca de simulação que deseje, ou mesmo substituir manualmente os objectos para fornecer o comportamento que pretende."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:834
#, fuzzy
msgid "Using `@Inject` will get you a CDI proxy to the mock instance you install, which is not suitable for passing to methods such as `Mockito.verify` which want the mock instance itself.  So if you need to call methods such as `verify` you should hang on to the mock instance in your test, or use `@io.quarkus.test.InjectMock`."
msgstr "Ao utilizar `@Inject` obterá um proxy CDI para a instância simulada que instalou, o que não é adequado para passar para métodos como `Mockito.verify` que pretende a própria instância simulada. Assim, se precisar de chamar métodos como `verify`, deve manter a instância de simulação no seu teste ou utilizar `@io.quarkus.test.InjectMock`."

#. type: Title ====
#: upstream/_guides/getting-started-testing.adoc:835
#, fuzzy, no-wrap
msgid "Further simplification with `@InjectMock`"
msgstr "Simplificação adicional com `@InjectMock`"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:839
#, fuzzy
msgid "Building on the features provided by `QuarkusMock`, Quarkus also allows users to effortlessly take advantage of link:https://site.mockito.org/[Mockito] for mocking the beans supported by `QuarkusMock`.  This functionality is available with the `@io.quarkus.test.InjectMock` annotation if the `quarkus-junit5-mockito` dependency is present."
msgstr "Com base nas funcionalidades fornecidas por `QuarkusMock`, o Quarkus também permite que os utilizadores tirem partido sem esforço do  link:https://site.mockito.org/[Mockito] para simular os beans suportados por `QuarkusMock`. Esta funcionalidade está disponível com a anotação `@io.quarkus.test.InjectMock` se a dependência `quarkus-junit5-mockito` estiver presente."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:841
#, fuzzy
msgid "Using `@InjectMock`, the previous example could be written as follows:"
msgstr "Utilizando `@InjectMock`, o exemplo anterior pode ser escrito da seguinte forma:"

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:849
#, no-wrap
msgid ""
"    @InjectMock\n"
"    MockableBean1 mockableBean1; // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:852
#, no-wrap
msgid ""
"    @InjectMock\n"
"    MockableBean2 mockableBean2;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:857
#, no-wrap
msgid ""
"    @BeforeEach\n"
"    public void setup() {\n"
"        Mockito.when(mockableBean1.greet(\"Stuart\")).thenReturn(\"A mock for Stuart\"); // <2>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:863
#, no-wrap
msgid ""
"    @Test\n"
"    public void firstTest() {\n"
"        Assertions.assertEquals(\"A mock for Stuart\", mockableBean1.greet(\"Stuart\"));\n"
"        Assertions.assertEquals(null, mockableBean2.greet(\"Stuart\")); // <3>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:870
#, no-wrap
msgid ""
"    @Test\n"
"    public void secondTest() {\n"
"        Mockito.when(mockableBean2.greet(\"Stuart\")).thenReturn(\"Bonjour Stuart\"); // <4>\n"
"        Assertions.assertEquals(\"A mock for Stuart\", mockableBean1.greet(\"Stuart\"));\n"
"        Assertions.assertEquals(\"Bonjour Stuart\", mockableBean2.greet(\"Stuart\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:887
#, no-wrap
msgid ""
"        public String greet(String name) {\n"
"            return \"Hello \" + name;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:889
#, fuzzy
msgid "`@InjectMock` results in a Mockito mock being created, which is then available in test methods of the test class (other test classes are *not* affected by this)"
msgstr "`@InjectMock` resulta na criação de uma simulação do Mockito, que fica então disponível nos métodos de teste da classe de teste (outras classes de teste *não* são afectadas por isto)"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:890
#, fuzzy
msgid "The `mockableBean1` is configured here for every test method of the class"
msgstr "O `mockableBean1` é configurado aqui para cada método de teste da classe"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:891
#, fuzzy
msgid "Since the `mockableBean2` mock has not been configured, it will return the default Mockito response."
msgstr "Uma vez que a simulação `mockableBean2` não foi configurada, devolverá a resposta predefinida do Mockito."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:892
#, fuzzy
msgid "In this test the `mockableBean2` is configured, so it returns the configured response."
msgstr "Neste teste, o `mockableBean2` está configurado, pelo que devolve a resposta configurada."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:896
#, fuzzy
msgid "Although the test above is good for showing the capabilities of `@InjectMock`, it is not a good representation of a real test. In a real test we would most likely configure a mock, but then test a bean that uses the mocked bean.  Here is an example:"
msgstr "Embora o teste acima seja bom para mostrar os recursos de `@InjectMock`, ele não é uma boa representação de um teste real. Em um teste real, provavelmente configuraríamos um mock, mas depois testaríamos um bean que usa o bean mockado. Aqui está um exemplo:"

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:901
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class MockGreetingServiceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:904
#, no-wrap
msgid ""
"    @InjectMock\n"
"    GreetingService greetingService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:914
#, no-wrap
msgid ""
"    @Test\n"
"    public void testGreeting() {\n"
"        when(greetingService.greet()).thenReturn(\"hi\");\n"
"        given()\n"
"                .when().get(\"/greeting\")\n"
"                .then()\n"
"                .statusCode(200)\n"
"                .body(is(\"hi\")); // <1>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:917
#: upstream/_guides/getting-started-testing.adoc:987
#, no-wrap
msgid ""
"    @Path(\"greeting\")\n"
"    public static class GreetingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:919
#: upstream/_guides/getting-started-testing.adoc:989
#, no-wrap
msgid "        final GreetingService greetingService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:923
#: upstream/_guides/getting-started-testing.adoc:993
#, no-wrap
msgid ""
"        public GreetingResource(GreetingService greetingService) {\n"
"            this.greetingService = greetingService;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:930
#: upstream/_guides/getting-started-testing.adoc:1000
#, no-wrap
msgid ""
"        @GET\n"
"        @Produces(\"text/plain\")\n"
"        public String greet() {\n"
"            return greetingService.greet();\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:938
#: upstream/_guides/getting-started-testing.adoc:1008
#, no-wrap
msgid ""
"    @ApplicationScoped\n"
"    public static class GreetingService {\n"
"        public String greet(){\n"
"            return \"hello\";\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:940
#, fuzzy
msgid "Since we configured `greetingService` as a mock, the `GreetingResource` which uses the `GreetingService` bean, we get the mocked response instead of the response of the regular `GreetingService` bean"
msgstr "Uma vez que configurámos `greetingService` como uma simulação, o `GreetingResource` que utiliza o bean `GreetingService`, obtemos a resposta simulada em vez da resposta do bean normal `GreetingService`"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:944
#, fuzzy
msgid "By default, the `@InjectMock` annotation can be used for any normal CDI scoped bean (e.g. `@ApplicationScoped`, `@RequestScoped`).  Mocking `@Singleton` beans can be performed by adding the `@MockitoConfig(convertScopes = true)` annotation.  This will convert the `@Singleton` bean to an `@ApplicationScoped` bean for the test."
msgstr "Por predefinição, a anotação `@InjectMock` pode ser utilizada para qualquer bean com âmbito CDI normal (por exemplo, `@ApplicationScoped`, `@RequestScoped`). A simulação de beans `@Singleton` pode ser realizada adicionando a anotação `@MockitoConfig(convertScopes = true)`. Isso converterá o bean `@Singleton` em um bean `@ApplicationScoped` para o teste."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:946
#, fuzzy
msgid "This is considered an advanced option and should only be performed if you fully understand the consequences of changing the scope of the bean."
msgstr "Esta é considerada uma opção avançada e só deve ser executada se o utilizador compreender bem as consequências da alteração do âmbito do bean."

#. type: Title ====
#: upstream/_guides/getting-started-testing.adoc:947
#, fuzzy, no-wrap
msgid "Using Spies instead of Mocks with `@InjectSpy`"
msgstr "Utilizar Spies em vez de Mocks com `@InjectSpy`"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:951
#, fuzzy
msgid "Building on the features provided by `InjectMock`, Quarkus also allows users to effortlessly take advantage of link:https://site.mockito.org/[Mockito] for spying on the beans supported by `QuarkusMock`.  This functionality is available via the `@io.quarkus.test.junit.mockito.InjectSpy` annotation which is available in the `quarkus-junit5-mockito` dependency."
msgstr "Com base nas funcionalidades fornecidas por `InjectMock`, o Quarkus também permite aos utilizadores tirar partido do  link:https://site.mockito.org/[Mockito] para espiar os beans suportados por `QuarkusMock`. Esta funcionalidade está disponível através da anotação `@io.quarkus.test.junit.mockito.InjectSpy` que está disponível na dependência `quarkus-junit5-mockito`."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:955
#, fuzzy
msgid "Sometimes when testing you only need to verify that a certain logical path was taken, or you only need to stub out a single method's response while still executing the rest of the methods on the Spied clone. Please see link:https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#13[Mockito documentation - Spying on real objects] for more details on Spy partial mocks.  In either of those situations a Spy of the object is preferable.  Using `@InjectSpy`, the previous example could be written as follows:"
msgstr "Às vezes, ao testar, você só precisa verificar se um determinado caminho lógico foi seguido, ou você só precisa esboçar a resposta de um único método enquanto ainda executa o resto dos métodos no clone espiado. Por favor, veja a  link:https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#13[documentação do Mockito - Espiando objetos reais] para mais detalhes sobre mocks parciais do Spy. Em qualquer uma dessas situações, um Spy do objeto é preferível. Usando `@InjectSpy`, o exemplo anterior poderia ser escrito da seguinte forma:"

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:960
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class SpyGreetingServiceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:963
#, no-wrap
msgid ""
"    @InjectSpy\n"
"    GreetingService greetingService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:971
#, no-wrap
msgid ""
"    @Test\n"
"    public void testDefaultGreeting() {\n"
"        given()\n"
"                .when().get(\"/greeting\")\n"
"                .then()\n"
"                .statusCode(200)\n"
"                .body(is(\"hello\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:974
#, no-wrap
msgid ""
"        Mockito.verify(greetingService, Mockito.times(1)).greet(); <1>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:984
#, no-wrap
msgid ""
"    @Test\n"
"    public void testOverrideGreeting() {\n"
"        doReturn(\"hi\").when(greetingService).greet(); <2>\n"
"        given()\n"
"                .when().get(\"/greeting\")\n"
"                .then()\n"
"                .statusCode(200)\n"
"                .body(is(\"hi\")); <3>\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1010
#, fuzzy
msgid "Instead of overriding the value, we just want to ensure that the greet method on our `GreetingService` was called by this test."
msgstr "Em vez de substituir o valor, queremos apenas garantir que o método greet do nosso `GreetingService` foi chamado por este teste."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1011
#, fuzzy
msgid "Here we are telling the Spy to return \"hi\" instead of \"hello\". When the `GreetingResource` requests the greeting from `GreetingService` we get the mocked response instead of the response of the regular `GreetingService` bean. Sometimes it's impossible or impractical to use `when(Object)` for stubbing spies. Therefore when using spies please consider `doReturn|Answer|Throw()` family of methods for stubbing."
msgstr "Aqui estamos a dizer ao Spy para devolver \"hi\" em vez de \"hello\". Quando o `GreetingResource` solicita a saudação de `GreetingService`, obtemos a resposta simulada em vez da resposta do bean `GreetingService` normal. Às vezes é impossível ou impraticável usar `when(Object)` para stubbing spies. Portanto, ao usar spies, considere a família de métodos `doReturn|Answer|Throw()` para stubbing."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1012
#, fuzzy
msgid "We are verifying that we get the mocked response from the Spy."
msgstr "Estamos a verificar se recebemos a resposta simulada do Spy."

#. type: Title ====
#: upstream/_guides/getting-started-testing.adoc:1013
#, fuzzy, no-wrap
msgid "Using `@InjectMock` with `@RestClient`"
msgstr "Utilizar `@InjectMock` com `@RestClient`"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1016
#, fuzzy
msgid "The `@RegisterRestClient` registers the implementation of the rest-client at runtime, and because the bean needs to be a regular scope, you have to annotate your interface with `@ApplicationScoped`."
msgstr "O `@RegisterRestClient` regista a implementação do rest-client em tempo de execução e, uma vez que o bean tem de ser um âmbito regular, é necessário anotar a sua interface com `@ApplicationScoped`."

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1023
#, no-wrap
msgid ""
"@Path(\"/\")\n"
"@ApplicationScoped\n"
"@RegisterRestClient\n"
"public interface GreetingService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1029
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/hello\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    String hello();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1032
#, fuzzy
msgid "For the test class here is an example:"
msgstr "Para a classe de teste, eis um exemplo:"

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1041
#, no-wrap
msgid ""
"    @InjectMock\n"
"    @RestClient // <1>\n"
"    GreetingService greetingService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1045
#, no-wrap
msgid ""
"    @Test\n"
"    public void testHelloEndpoint() {\n"
"        Mockito.when(greetingService.hello()).thenReturn(\"hello from mockito\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1052
#, no-wrap
msgid ""
"        given()\n"
"          .when().get(\"/hello\")\n"
"          .then()\n"
"             .statusCode(200)\n"
"             .body(is(\"hello from mockito\"));\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1056
#, fuzzy
msgid "Indicate that this injection point is meant to use an instance of `RestClient`."
msgstr "Indicar que este ponto de injeção se destina a utilizar uma instância de `RestClient`."

#. type: Title ===
#: upstream/_guides/getting-started-testing.adoc:1057
#, fuzzy, no-wrap
msgid "Mocking with Panache"
msgstr "Zombar com elegância"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1060
#, fuzzy
msgid "If you are using the `quarkus-hibernate-orm-panache` or `quarkus-mongodb-panache` extensions, check out the xref:hibernate-orm-panache.adoc#mocking[Hibernate ORM with Panache Mocking] and xref:mongodb-panache.adoc#mocking[MongoDB with Panache Mocking] documentation for the easiest way to mock your data access."
msgstr "Se estiver a utilizar as extensões `quarkus-hibernate-orm-panache` ou `quarkus-mongodb-panache`, consulte a documentação  link:hibernate-orm-panache.html#mocking[Hibernate ORM with Panache Mocking] e  link:mongodb-panache.html#mocking[MongoDB with Panache Mocking] para obter a forma mais fácil de simular o acesso aos dados."

#. type: Title ==
#: upstream/_guides/getting-started-testing.adoc:1061
#, fuzzy, no-wrap
msgid "Testing Security"
msgstr "Teste de segurança"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1064
#, fuzzy
msgid "If you are using Quarkus Security, check out the xref:security-testing.adoc[Testing Security] section for information on how to easily test security features of the application."
msgstr "Se estiver a utilizar o Quarkus Security, consulte a secção  link:security-testing.html[Teste de segurança] para obter informações sobre como testar facilmente as funcionalidades de segurança da aplicação."

#. type: Title ==
#: upstream/_guides/getting-started-testing.adoc:1066
#, fuzzy, no-wrap
msgid "Starting services before the Quarkus application starts"
msgstr "Iniciar serviços antes do início da aplicação Quarkus"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1069
#, fuzzy
msgid "A very common need is to start some services on which your Quarkus application depends, before the Quarkus application starts for testing. To address this need, Quarkus provides `@io.quarkus.test.common.QuarkusTestResource` and `io.quarkus.test.common.QuarkusTestResourceLifecycleManager`."
msgstr "Uma necessidade muito comum é a de iniciar alguns serviços dos quais a sua aplicação Quarkus depende, antes de a aplicação Quarkus ser iniciada para testes. Para atender a essa necessidade, o Quarkus fornece `@io.quarkus.test.common.QuarkusTestResource` e `io.quarkus.test.common.QuarkusTestResourceLifecycleManager`."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1072
#, fuzzy
msgid "By simply annotating any test in the test suite with `@QuarkusTestResource`, Quarkus will run the corresponding `QuarkusTestResourceLifecycleManager` before any tests are run.  A test suite is also free to utilize multiple `@QuarkusTestResource` annotations, in which case all the corresponding `QuarkusTestResourceLifecycleManager` objects will be run before the tests. When using multiple test resources they can be started concurrently. For that you need to set `@QuarkusTestResource(parallel = true)`."
msgstr "Simplesmente anotando qualquer teste no conjunto de testes com `@QuarkusTestResource`, o Quarkus executará o `QuarkusTestResourceLifecycleManager` correspondente antes de qualquer teste ser executado. Um conjunto de testes também é livre de utilizar múltiplas anotações `@QuarkusTestResource`, caso em que todos os objectos `QuarkusTestResourceLifecycleManager` correspondentes serão executados antes dos testes. Ao usar vários recursos de teste, eles podem ser iniciados simultaneamente. Para isso, é necessário definir `@QuarkusTestResource(parallel = true)`."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1075
#, fuzzy
msgid "Test resources are global, even if they are defined on a test class or custom profile, which means they will all be activated for all tests, even though we do remove duplicates. If you want to only enable a test resource on a single test class or test profile, you can use `@QuarkusTestResource(restrictToAnnotatedClass = true)`."
msgstr "Os recursos de teste são globais, mesmo que sejam definidos numa classe de teste ou num perfil personalizado, o que significa que serão todos activados para todos os testes, apesar de removermos os duplicados. Se pretender ativar um recurso de teste apenas numa única classe de teste ou perfil de teste, pode utilizar `@QuarkusTestResource(restrictToAnnotatedClass = true)`."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1080
#, fuzzy
msgid "Quarkus provides a few implementations of `QuarkusTestResourceLifecycleManager` out of the box (see `io.quarkus.test.h2.H2DatabaseTestResource` which starts an H2 database, or `io.quarkus.test.kubernetes.client.KubernetesServerTestResource` which starts a mock Kubernetes API server), but it is common to create custom implementations to address specific application needs.  Common cases include starting docker containers using https://www.testcontainers.org/[Testcontainers] (an example of which can be found https://github.com/quarkusio/quarkus/blob/main/test-framework/keycloak-server/src/main/java/io/quarkus/test/keycloak/server/KeycloakTestResourceLifecycleManager.java[here]), or starting a mock HTTP server using https://wiremock.org/[Wiremock] (an example of which can be found https://github.com/geoand/quarkus-test-demo/blob/main/src/test/java/org/acme/getting/started/country/WiremockCountries.java[here])."
msgstr "O Quarkus fornece algumas implementações de `QuarkusTestResourceLifecycleManager` fora da caixa (veja `io.quarkus.test.h2.H2DatabaseTestResource` que inicia um banco de dados H2, ou `io.quarkus.test.kubernetes.client.KubernetesServerTestResource` que inicia um servidor de API Kubernetes simulado), mas é comum criar implementações personalizadas para atender a necessidades específicas de aplicativos. Casos comuns incluem iniciar contêineres docker usando  link:https://www.testcontainers.org/[Testcontainers] (um exemplo pode ser encontrado  link:https://github.com/quarkusio/quarkus/blob/main/test-framework/keycloak-server/src/main/java/io/quarkus/test/keycloak/server/KeycloakTestResourceLifecycleManager.java[aqui]), ou iniciar um servidor HTTP simulado usando  link:https://wiremock.org/[Wiremock] (um exemplo pode ser encontrado  link:https://github.com/geoand/quarkus-test-demo/blob/main/src/test/java/org/acme/getting/started/country/WiremockCountries.java[aqui])."

#. type: Title ===
#: upstream/_guides/getting-started-testing.adoc:1082
#, fuzzy, no-wrap
msgid "Altering the test class"
msgstr "Alterar a classe de teste"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1085
#, fuzzy
msgid "When creating a custom `QuarkusTestResourceLifecycleManager` that needs to inject the something into the test class, the `inject` methods can be used.  If for example you have a test like the following:"
msgstr "Ao criar um `QuarkusTestResourceLifecycleManager` personalizado que precisa de injetar algo na classe de teste, os métodos `inject` podem ser utilizados. Se, por exemplo, você tiver um teste como o seguinte:"

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1091
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(MyWireMockResource.class)\n"
"public class MyTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1094
#, no-wrap
msgid ""
"    @InjectWireMock // this a custom annotation you are defining in your own application\n"
"    WireMockServer wireMockServer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1100
#, no-wrap
msgid ""
"    @Test\n"
"    public someTest() {\n"
"        // control wiremock in some way and perform test\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1103
#, fuzzy
msgid "Making `MyWireMockResource` inject the `wireMockServer` field can be done as shown in the `inject` method of the following code snippet:"
msgstr "Fazer com que `MyWireMockResource` injete o campo `wireMockServer` pode ser feito como mostrado no método `inject` do seguinte trecho de código:"

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1107
#, no-wrap
msgid "public class MyWireMockResource implements QuarkusTestResourceLifecycleManager {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1109
#, no-wrap
msgid "    WireMockServer wireMockServer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1114
#, no-wrap
msgid ""
"    @Override\n"
"    public Map<String, String> start() {\n"
"        wireMockServer = new WireMockServer(8090);\n"
"        wireMockServer.start();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1116
#, no-wrap
msgid "        // create some stubs\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1119
#, no-wrap
msgid ""
"        return Map.of(\"some.service.url\", \"localhost:\" + wireMockServer.port());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1127
#, no-wrap
msgid ""
"    @Override\n"
"    public synchronized void stop() {\n"
"        if (wireMockServer != null) {\n"
"            wireMockServer.stop();\n"
"            wireMockServer = null;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1133
#, no-wrap
msgid ""
"    @Override\n"
"    public void inject(TestInjector testInjector) {\n"
"        testInjector.injectIntoFields(wireMockServer, new TestInjector.AnnotatedAndMatchesType(InjectWireMock.class, WireMockServer.class));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1137
#, fuzzy
msgid "It is worth mentioning that this injection into the test class is not under the control of CDI and happens after CDI has performed any necessary injections into the test class."
msgstr "Vale a pena mencionar que esta injeção na classe de teste não está sob o controlo do CDI e acontece depois de o CDI ter efectuado todas as injecções necessárias na classe de teste."

#. type: Title ===
#: upstream/_guides/getting-started-testing.adoc:1138
#, fuzzy, no-wrap
msgid "Annotation-based test resources"
msgstr "Recursos de teste baseados em anotações"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1142
#, fuzzy
msgid "It is possible to write test resources that are enabled and configured using annotations. This is enabled by placing the `@QuarkusTestResource` on an annotation which will be used to enable and configure the test resource."
msgstr "É possível escrever recursos de teste que são activados e configurados utilizando anotações. Isto é possível colocando o endereço `@QuarkusTestResource` numa anotação que será utilizada para ativar e configurar o recurso de teste."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1145
#, fuzzy
msgid "For example, this defines the `@WithKubernetesTestServer` annotation, which you can use on your tests to activate the `KubernetesServerTestResource`, but only for the annotated test class. You can also place them on your `QuarkusTestProfile` test profiles."
msgstr "Por exemplo, isto define a anotação `@WithKubernetesTestServer`, que pode utilizar nos seus testes para ativar o `KubernetesServerTestResource`, mas apenas para a classe de teste anotada. Também pode colocá-las nos seus perfis de teste `QuarkusTestProfile`."

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1156
#, no-wrap
msgid ""
"@QuarkusTestResource(KubernetesServerTestResource.class)\n"
"@Retention(RetentionPolicy.RUNTIME)\n"
"@Target(ElementType.TYPE)\n"
"public @interface WithKubernetesTestServer {\n"
"    /**\n"
"     * Start it with HTTPS\n"
"     */\n"
"    boolean https() default false;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1161
#, no-wrap
msgid ""
"    /**\n"
"     * Start it in CRUD mode\n"
"     */\n"
"    boolean crud() default true;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1167
#, no-wrap
msgid ""
"    /**\n"
"     * Port to use, defaults to any available port\n"
"     */\n"
"    int port() default 0;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1171
#, fuzzy
msgid "The `KubernetesServerTestResource` class has to implement the `QuarkusTestResourceConfigurableLifecycleManager` interface in order to be configured using the previous annotation:"
msgstr "A classe `KubernetesServerTestResource` tem de implementar a interface `QuarkusTestResourceConfigurableLifecycleManager` para poder ser configurada utilizando a anotação anterior:"

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1176
#, no-wrap
msgid ""
"public class KubernetesServerTestResource\n"
"        implements QuarkusTestResourceConfigurableLifecycleManager<WithKubernetesTestServer> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1180
#, no-wrap
msgid ""
"    private boolean https = false;\n"
"    private boolean crud = true;\n"
"    private int port = 0;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1187
#, no-wrap
msgid ""
"    @Override\n"
"    public void init(WithKubernetesTestServer annotation) {\n"
"        this.https = annotation.https();\n"
"        this.crud = annotation.crud();\n"
"        this.port = annotation.port();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1190
#, no-wrap
msgid ""
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1194
#, fuzzy
msgid "If you want to make the annotation repeatable, the containing annotation type must be annotated with `@QuarkusTestResourceRepeatable`.  For example, this would define a repeatable `@WithRepeatableTestResource` annotation."
msgstr "Se quiser tornar a anotação repetível, o tipo de anotação que a contém deve ser anotado com `@QuarkusTestResourceRepeatable`. Por exemplo, isto definiria uma anotação repetível `@WithRepeatableTestResource`."

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1202
#, no-wrap
msgid ""
"@QuarkusTestResource(KubernetesServerTestResource.class)\n"
"@Retention(RetentionPolicy.RUNTIME)\n"
"@Target(ElementType.TYPE)\n"
"@Repeatable(WithRepeatableTestResource.List.class)\n"
"public @interface WithRepeatableTestResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1204
#, no-wrap
msgid "    String key() default \"\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1212
#, no-wrap
msgid ""
"    @Target(ElementType.TYPE)\n"
"    @Retention(RetentionPolicy.RUNTIME)\n"
"    @QuarkusTestResourceRepeatable(WithRepeatableTestResource.class)\n"
"    @interface List {\n"
"        WithRepeatableTestResource[] value();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/getting-started-testing.adoc:1216
#, fuzzy, no-wrap
msgid "Hang Detection"
msgstr "Deteção de enforcamento"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1221
#, fuzzy
msgid "`@QuarkusTest` has support for hang detection to help diagnose any unexpected hangs. If no progress is made for a specified time (i.e. no JUnit callbacks are invoked) then Quarkus will print a stack trace to the console to help diagnose the hang.  The default value for this timeout is 10 minutes."
msgstr "`@QuarkusTest` tem suporte para deteção de travamento para ajudar a diagnosticar qualquer travamento inesperado. Se nenhum progresso for feito durante um tempo especificado (ou seja, nenhuma chamada de retorno JUnit for invocada), o Quarkus imprimirá um rastreamento de pilha no console para ajudar a diagnosticar o travamento. O valor padrão para este tempo limite é 10 minutos."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1226
#, fuzzy
msgid "No further action will be taken, and the tests will continue as normal (generally until CI times out), however the printed stack traces should help diagnose why the build has failed. You can control this timeout with the `quarkus.test.hang-detection-timeout` system property (you can also set this in application.properties, but this won't be read until Quarkus has started, so the timeout for Quarkus start will be the default of 10 minutes)."
msgstr "Nenhuma outra ação será tomada, e os testes continuarão normalmente (geralmente até que o CI chegue ao fim), porém os traços de pilha impressos devem ajudar a diagnosticar por que a compilação falhou. Pode controlar este tempo limite com a propriedade de sistema `quarkus.test.hang-detection-timeout` (também pode definir isto em application.properties, mas isto não será lido até o Quarkus ter iniciado, por isso o tempo limite para o início do Quarkus será o padrão de 10 minutos)."

#. type: Title ==
#: upstream/_guides/getting-started-testing.adoc:1227
#, fuzzy, no-wrap
msgid "Native Executable Testing"
msgstr "Teste de executáveis nativos"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1231
#, fuzzy
msgid "It is also possible to test native executables using `@QuarkusIntegrationTest`. This supports all the features mentioned in this guide except injecting into tests (and the native executable runs in a separate non-JVM process this is not really possible)."
msgstr "Também é possível testar executáveis nativos usando `@QuarkusIntegrationTest`. Isso suporta todos os recursos mencionados neste guia, exceto a injeção em testes (e o executável nativo é executado em um processo separado não-JVM, isso não é realmente possível)."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1234
#, fuzzy
msgid "This is covered in the xref:building-native-image.adoc[Native Executable Guide]."
msgstr "Isto é abordado no  link:building-native-image.html[Guia do Executável Nativo]."

#. type: Title ==
#: upstream/_guides/getting-started-testing.adoc:1236
#, fuzzy, no-wrap
msgid "Using `@QuarkusIntegrationTest`"
msgstr "Utilizar `@QuarkusIntegrationTest`"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1243
#, fuzzy
msgid "`@QuarkusIntegrationTest` should be used to launch and test the artifact produced by the Quarkus build, and supports testing a jar (of whichever type), a native image or container image.  Put simply, this means that if the result of a Quarkus build (`mvn package` or `gradle build`) is a jar, that jar will be launched as `java -jar ...` and tests run against it.  If instead a native image was built, then the application is launched as `./application ...` and again the tests run against the running application.  Finally, if a container image was created during the build (by including the `quarkus-container-image-jib` or `quarkus-container-image-docker` extensions and having the `quarkus.container-image.build=true` property configured), then a container is created and run (this requires the `docker` executable being present)."
msgstr "`@QuarkusIntegrationTest` deve ser utilizado para lançar e testar o artefacto produzido pela compilação Quarkus, e suporta o teste de um jar (de qualquer tipo), uma imagem nativa ou uma imagem de contentor. Simplificando, isto significa que se o resultado de uma compilação Quarkus ( `mvn package` ou `gradle build`) for um jar, esse jar será lançado como `java -jar …​` e os testes serão executados contra ele. Se, em vez disso, foi construída uma imagem nativa, então a aplicação é lançada como `./application …​` e, mais uma vez, os testes são executados contra a aplicação em execução. Finalmente, se uma imagem de contentor foi criada durante a compilação (incluindo as extensões `quarkus-container-image-jib` ou `quarkus-container-image-docker` e tendo a propriedade `quarkus.container-image.build=true` configurada), então um contentor é criado e executado (isto requer que o executável `docker` esteja presente)."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1245
#, fuzzy
msgid "This is a black box test that supports the same set features and has the same limitations."
msgstr "Trata-se de um teste de caixa negra que suporta o mesmo conjunto de funcionalidades e tem as mesmas limitações."

#. type: delimited block =
#: upstream/_guides/getting-started-testing.adoc:1250
#, fuzzy
msgid "As a test annotated with `@QuarkusIntegrationTest` tests the result of the build, it should be run as part of the integration test suite - i.e. by setting `-DskipITs=false` if using Maven or the `quarkusIntTest` task if using Gradle.  These tests will **not** work if run in the same phase as `@QuarkusTest` as Quarkus has not yet created the final artifact."
msgstr "Como um teste anotado com `@QuarkusIntegrationTest` testa o resultado da construção, deve ser executado como parte do conjunto de testes de integração - ou seja, definindo `-DskipITs=false` se estiver a utilizar o Maven ou a tarefa `quarkusIntTest` se estiver a utilizar o Gradle. Estes testes *não* funcionarão se forem executados na mesma fase que `@QuarkusTest`, uma vez que o Quarkus ainda não criou o artefacto final."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1253
#, fuzzy
msgid "The `pom.xml` file contains:"
msgstr "O ficheiro `pom.xml` contém:"

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1276
#, no-wrap
msgid ""
"<plugin>\n"
"    <groupId>org.apache.maven.plugins</groupId>\n"
"    <artifactId>maven-failsafe-plugin</artifactId>\n"
"    <version>${surefire-plugin.version}</version>\n"
"    <executions>\n"
"        <execution>\n"
"            <goals>\n"
"                <goal>integration-test</goal>\n"
"                <goal>verify</goal>\n"
"            </goals>\n"
"            <configuration>\n"
"                <systemPropertyVariables>\n"
"                    <native.image.path>${project.build.directory}/${project.build.finalName}-runner</native.image.path>\n"
"                    <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n"
"                    <maven.home>${maven.home}</maven.home>\n"
"                </systemPropertyVariables>\n"
"            </configuration>\n"
"        </execution>\n"
"    </executions>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1279
#, fuzzy
msgid "This instructs the failsafe-maven-plugin to run integration-test."
msgstr "Isto dá instruções ao failsafe-maven-plugin para executar o teste de integração."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1281
#, fuzzy
msgid "Then, open the `src/test/java/org/acme/quickstart/GreetingResourceIT.java`. It contains:"
msgstr "Em seguida, abra o sítio `src/test/java/org/acme/quickstart/GreetingResourceIT.java`. Este contém:"

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1285
#, no-wrap
msgid "package org.acme.quickstart;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1288
#, no-wrap
msgid "import io.quarkus.test.junit.QuarkusIntegrationTest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1291
#, no-wrap
msgid ""
"@QuarkusIntegrationTest // <1>\n"
"public class GreetingResourceIT extends GreetingResourceTest { // <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1293
#, no-wrap
msgid "    // Run the same tests\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1298
#, fuzzy
msgid "Use another test runner that starts the application from the native file before the tests.  The executable is retrieved by the _Failsafe Maven Plugin_."
msgstr "Utilize outro executor de testes que inicie a aplicação a partir do ficheiro nativo antes dos testes. O executável é recuperado pelo _plug-in Failsafe Maven_."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1299
#, fuzzy
msgid "We extend our previous tests as a convenience, but you can also implement your tests."
msgstr "Por uma questão de conveniência, alargamos os nossos testes anteriores, mas também pode implementar os seus testes."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1301
#, fuzzy
msgid "More information can be found in the link:building-native-image#testing-the-native-executable[Testing the native executable Guide]."
msgstr "Para mais informações, consulte o  link:building-native-image#testing-the-native-executable[Guia de teste do executável nativo]."

#. type: delimited block =
#: upstream/_guides/getting-started-testing.adoc:1305
#, fuzzy
msgid "When the application is tested using `@QuarkusIntegrationTest` it is launched using the `prod` configuration profile, but this can be changed using the `quarkus.test.integration-test-profile` property."
msgstr "Quando a aplicação é testada utilizando `@QuarkusIntegrationTest`, é lançada utilizando o perfil de configuração `prod`, mas este pode ser alterado utilizando a propriedade `quarkus.test.integration-test-profile`."

#. type: delimited block =
#: upstream/_guides/getting-started-testing.adoc:1311
#, fuzzy
msgid "While adding test-specific configuration properties using `src/test/resources/application.properties` (note there's `test`, not `main`)  is possible for unit tests, it's not possible for integration tests."
msgstr "Embora a adição de propriedades de configuração específicas do teste usando `src/test/resources/application.properties` (observe que há `test`, não `main`) seja possível para testes de unidade, não é possível para testes de integração."

#. type: Title ===
#: upstream/_guides/getting-started-testing.adoc:1313
#, fuzzy, no-wrap
msgid "Launching containers"
msgstr "Lançamento de contentores"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1318
#, fuzzy
msgid "When `@QuarkusIntegrationTest` results in launching a container (because the application was built with `quarkus.container-image.build` set to `true`), the container is launched on a predictable container network. This facilitates writing integration tests that need to launch services to support the application.  This means that `@QuarkusIntegrationTest` works out of the box with containers launched via xref:dev-services.adoc[Dev Services], but it also means that it enables using xref:quarkus-test-resource[QuarkusTestLifecycleManager] resources that launch additional containers.  This can be achieved by having your `QuarkusTestLifecycleManager` implement `io.quarkus.test.common.DevServicesContext.ContextAware`. A simple example could be the following:"
msgstr "Quando `@QuarkusIntegrationTest` resulta no lançamento de um contentor (porque a aplicação foi construída com `quarkus.container-image.build` definido como `true`), o contentor é lançado numa rede de contentores previsível. Isto facilita a escrita de testes de integração que precisam de lançar serviços para suportar a aplicação. Isto significa que `@QuarkusIntegrationTest` funciona fora da caixa com contentores lançados através dos  link:dev-services.html[Serviços de Desenvolvimento], mas também significa que permite utilizar recursos  link:#quarkus-test-resource[do QuarkusTestLifecycleManager] que lançam contentores adicionais. Isto pode ser conseguido fazendo com que o seu `QuarkusTestLifecycleManager` implemente `io.quarkus.test.common.DevServicesContext.ContextAware`. Um exemplo simples poderia ser o seguinte:"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1322
#, fuzzy
msgid "The container running the resource to test against, for example PostgreSQL via Testcontainers, is assigned an IP address from the container's network.  Use the container's \"public\" IP from its network and the \"unmapped\" port number to connect to the service.  The Testcontainers library usually return connection strings without respecting the container network, so additional code is needed to provide Quarkus the \"correct\" connection string using the container's IP on the container network and the _unmapped_ port number."
msgstr "O contêiner que executa o recurso a ser testado, por exemplo, PostgreSQL via Testcontainers, recebe um endereço IP da rede do contêiner. Use o IP \"público\" do contêiner de sua rede e o número da porta \"não mapeada\" para se conectar ao serviço. A biblioteca Testcontainers geralmente devolve cadeias de ligação sem respeitar a rede do contentor, pelo que é necessário código adicional para fornecer ao Quarkus a cadeia de ligação \"correcta\" utilizando o IP do contentor na rede do contentor e o número da porta _não mapeada_."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1324
#, fuzzy
msgid "The following example illustrates the use with PostgreSQL, but the approach is applicable to all containers."
msgstr "O exemplo seguinte ilustra a utilização com o PostgreSQL, mas a abordagem é aplicável a todos os contentores."

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1329
#, no-wrap
msgid ""
"import io.quarkus.test.common.DevServicesContext;\n"
"import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1332
#, no-wrap
msgid ""
"import org.testcontainers.containers.JdbcDatabaseContainer;\n"
"import org.testcontainers.containers.PostgreSQLContainer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1336
#, no-wrap
msgid ""
"import java.util.HashMap;\n"
"import java.util.Map;\n"
"import java.util.Optional;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1338
#, no-wrap
msgid "public class CustomResource implements QuarkusTestResourceLifecycleManager, DevServicesContext.ContextAware {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1341
#, no-wrap
msgid ""
"    private Optional<String> containerNetworkId;\n"
"    private JdbcDatabaseContainer container;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1346
#, no-wrap
msgid ""
"    @Override\n"
"    public void setIntegrationTestContext(DevServicesContext context) {\n"
"        containerNetworkId = context.containerNetworkId();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1351
#, no-wrap
msgid ""
"    @Override\n"
"    public Map<String, String> start() {\n"
"        // start a container making sure to call withNetworkMode() with the value of containerNetworkId if present\n"
"        container = new PostgreSQLContainer<>(\"postgres:latest\").withLogConsumer(outputFrame -> {});\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1354
#, no-wrap
msgid ""
"        // apply the network to the container\n"
"        containerNetworkId.ifPresent(container::withNetworkMode);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1357
#, no-wrap
msgid ""
"        // start container before retrieving its URL or other properties\n"
"        container.start();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1364
#, no-wrap
msgid ""
"        String jdbcUrl = container.getJdbcUrl();\n"
"        if (containerNetworkId.isPresent()) {\n"
"            // Replace hostname + port in the provided JDBC URL with the hostname of the Docker container\n"
"            // running PostgreSQL and the listening port.\n"
"            jdbcUrl = fixJdbcUrl(jdbcUrl);\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1371
#, no-wrap
msgid ""
"        // return a map containing the configuration the application needs to use the service\n"
"        return ImmutableMap.of(\n"
"            \"quarkus.datasource.username\", container.getUsername(),\n"
"            \"quarkus.datasource.password\", container.getPassword(),\n"
"            \"quarkus.datasource.jdbc.url\", jdbcUrl);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1375
#, no-wrap
msgid ""
"    private String fixJdbcUrl(String jdbcUrl) {\n"
"        // Part of the JDBC URL to replace\n"
"        String hostPort = container.getHost() + ':' + container.getMappedPort(PostgreSQLContainer.POSTGRESQL_PORT);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1381
#, no-wrap
msgid ""
"        // Host/IP on the container network plus the unmapped port\n"
"        String networkHostPort =\n"
"            container.getCurrentContainerInfo().getConfig().getHostName()\n"
"            + ':'\n"
"            + PostgreSQLContainer.POSTGRESQL_PORT;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1384
#, no-wrap
msgid ""
"        return jdbcUrl.replace(hostPort, networkHostPort);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1390
#, no-wrap
msgid ""
"    @Override\n"
"    public void stop() {\n"
"        // close container\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1393
#, fuzzy
msgid "`CustomResource` would be activated on a `@QuarkusIntegrationTest` using `@QuarkusTestResource` as is described in the corresponding section of this doc."
msgstr "`CustomResource` seria ativado em `@QuarkusIntegrationTest` utilizando `@QuarkusTestResource`, tal como descrito na secção correspondente deste documento."

#. type: Title ===
#: upstream/_guides/getting-started-testing.adoc:1394
#, fuzzy, no-wrap
msgid "Executing against a running application"
msgstr "Executar contra uma aplicação em execução"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1398
#, fuzzy
msgid "`@QuarkusIntegrationTest` supports executing tests against an already running instance of the application. This can be achieved by setting the `quarkus.http.test-host` system property when running the tests."
msgstr "`@QuarkusIntegrationTest` suporta a execução de testes contra uma instância já em execução da aplicação. Isto pode ser conseguido definindo a propriedade de sistema `quarkus.http.test-host` ao executar os testes."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1400
#, fuzzy
msgid "An example use of this could be the following Maven command, that forces `@QuarkusIntegrationTest` to execute against that is accessible at `http://1.2.3.4:4321`:"
msgstr "Um exemplo de utilização disto poderia ser o seguinte comando Maven, que força `@QuarkusIntegrationTest` a executar contra o que está acessível em `&lt;a href=\"http://1.2.3.4:4321\" class=\"bare\"&gt;http://1.2.3.4:4321&lt;/a&gt;`:"

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1404
#, no-wrap
msgid "./mvnw verify -Dquarkus.http.test-host=1.2.3.4 -Dquarkus.http.test-port=4321\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1407
#, fuzzy
msgid "To test against a running instance that only accepts SSL/TLS connection (example: `https://1.2.3.4:4321`) set the system property `quarkus.http.test-ssl-enabled` to `true`."
msgstr "Para testar contra uma instância em execução que só aceita ligação SSL/TLS (exemplo: `&lt;a href=\"https://1.2.3.4:4321\" class=\"bare\"&gt;https://1.2.3.4:4321&lt;/a&gt;`) defina a propriedade do sistema `quarkus.http.test-ssl-enabled` para `true`."

#. type: Title ==
#: upstream/_guides/getting-started-testing.adoc:1408
#, fuzzy, no-wrap
msgid "Mixing `@QuarkusTest` with other type of tests"
msgstr "Mistura de `@QuarkusTest` com outro tipo de testes"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1413
#, fuzzy
msgid "Mixing tests annotated with `@QuarkusTest` with tests annotated with either `@QuarkusDevModeTest`, `@QuarkusProdModeTest` or `@QuarkusUnitTest` is not allowed in a single execution run (in a single Maven Surefire Plugin execution, for instance), while the latter three can coexist."
msgstr "A mistura de testes anotados com `@QuarkusTest` com testes anotados com `@QuarkusDevModeTest`, `@QuarkusProdModeTest` ou `@QuarkusUnitTest` não é permitida numa única execução (numa única execução do plug-in Maven Surefire, por exemplo), enquanto os três últimos podem coexistir."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1416
#, fuzzy
msgid "The reason of this restriction is that `@QuarkusTest` starts a Quarkus server for the whole lifetime of the tests execution run, thus preventing the other tests to start their own Quarkus server."
msgstr "Esta restrição deve-se ao facto de o `@QuarkusTest` iniciar um servidor Quarkus durante todo o tempo de execução dos testes, impedindo assim que os outros testes iniciem o seu próprio servidor Quarkus."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1419
#, fuzzy
msgid "To alleviate this restriction, the `@QuarkusTest` annotation defines a JUnit 5 `@Tag`: `io.quarkus.test.junit.QuarkusTest`.  You can use this tag to isolate the `@QuarkusTest` test in a specific execution run, for example with the Maven Surefire Plugin:"
msgstr "Para aliviar essa restrição, a anotação `@QuarkusTest` define um JUnit 5 `@Tag`: `io.quarkus.test.junit.QuarkusTest`. É possível utilizar esta etiqueta para isolar o teste `@QuarkusTest` numa execução específica, por exemplo, com o plug-in Maven Surefire:"

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1451
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-surefire-plugin</artifactId>\n"
"    <version>${surefire-plugin.version}</version>\n"
"    <executions>\n"
"        <execution>\n"
"            <id>default-test</id>\n"
"            <goals>\n"
"                <goal>test</goal>\n"
"            </goals>\n"
"            <configuration>\n"
"                <excludedGroups>io.quarkus.test.junit.QuarkusTest</excludedGroups>\n"
"            </configuration>\n"
"        </execution>\n"
"        <execution>\n"
"            <id>quarkus-test</id>\n"
"            <goals>\n"
"                <goal>test</goal>\n"
"            </goals>\n"
"            <configuration>\n"
"                <groups>io.quarkus.test.junit.QuarkusTest</groups>\n"
"            </configuration>\n"
"        </execution>\n"
"    </executions>\n"
"    <configuration>\n"
"        <systemProperties>\n"
"            <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n"
"        </systemProperties>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/getting-started-testing.adoc:1454
#, fuzzy, no-wrap
msgid "Running `@QuarkusTest` from an IDE"
msgstr "Executando `@QuarkusTest` a partir de um IDE"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1457
#, fuzzy
msgid "Most IDEs offer the possibility to run a selected class as a JUnit test directly. For this you should set a few properties in the settings of your chosen IDE:"
msgstr "A maioria dos IDEs oferece a possibilidade de executar diretamente uma classe selecionada como um teste JUnit. Para isso, é necessário definir algumas propriedades nas definições do IDE escolhido:"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1459
#, fuzzy
msgid "`java.util.logging.manager` (see xref:logging.adoc[Logging Guide])"
msgstr "`java.util.logging.manager` (ver  link:logging.html[Guia de registo])"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1461
#, fuzzy
msgid "`maven.home` (only if there are any custom settings in `${maven.home}/conf/settings.xml`, see xref:maven-tooling.adoc[Maven Guide])"
msgstr "`maven.home` (apenas se existirem definições personalizadas em `${maven.home}/conf/settings.xml`, consulte  link:maven-tooling.html[o Guia Maven])"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1463
#, fuzzy
msgid "`maven.settings` (in case a custom version of `settings.xml` file should be used for the tests)"
msgstr "`maven.settings` (no caso de ser utilizada uma versão personalizada do ficheiro `settings.xml` para os testes)"

#. type: Title ===
#: upstream/_guides/getting-started-testing.adoc:1464
#, fuzzy, no-wrap
msgid "Eclipse separate JRE definition"
msgstr "Definição de JRE separado do Eclipse"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1467
#, fuzzy
msgid "Copy your current \"Installed JRE\" definition into a new one, where you will add the properties as a new VM arguments:"
msgstr "Copie a sua definição atual de \"Installed JRE\" para uma nova definição, onde irá adicionar as propriedades como novos argumentos da VM:"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1469
#, fuzzy
msgid "`-Djava.util.logging.manager=org.jboss.logmanager.LogManager`"
msgstr "`-Djava.util.logging.manager=org.jboss.logmanager.LogManager`"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1471
#, fuzzy
msgid "`-Dmaven.home=<path-to-your-maven-installation>`"
msgstr "`-Dmaven.home=&amp;lt;path-to-your-maven-installation&amp;gt;`"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1473
#, fuzzy
msgid "Use this JRE definition as your Quarkus project targeted runtime and the workaround will be applied to any \"Run as JUnit\" configuration."
msgstr "Utilize esta definição de JRE como o tempo de execução de destino do seu projeto Quarkus e a solução alternativa será aplicada a qualquer configuração \"Run as JUnit\"."

#. type: Title ===
#: upstream/_guides/getting-started-testing.adoc:1474
#, fuzzy, no-wrap
msgid "VSCode \"run with\" configuration"
msgstr "Configuração \"executar com\" do VSCode"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1477
#, fuzzy
msgid "The `settings.json` placed in the root of your project directory or in the workspace will need the following workaround in your test configuration:"
msgstr "O `settings.json` colocado na raiz do seu diretório de projeto ou no espaço de trabalho necessitará da seguinte solução alternativa na sua configuração de teste:"

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1487
#, no-wrap
msgid ""
"\"java.test.config\": [\n"
"    {\n"
"        \"name\": \"quarkusConfiguration\",\n"
"        \"vmargs\": [ \"-Djava.util.logging.manager=org.jboss.logmanager.LogManager -Dmaven.home=<path-to-your-maven-installation> ...\" ],\n"
"        ...\n"
"    },\n"
"  ...\n"
"]\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/getting-started-testing.adoc:1489
#, fuzzy, no-wrap
msgid "IntelliJ IDEA JUnit template"
msgstr "Modelo JUnit do IntelliJ IDEA"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1492
#, fuzzy
msgid "Nothing needed in IntelliJ IDEA because the IDE will pick the `systemPropertyVariables` from the surefire plugin configuration in `pom.xml`."
msgstr "Não é necessário nada no IntelliJ IDEA porque o IDE escolherá o `systemPropertyVariables` a partir da configuração do plug-in surefire em `pom.xml`."

#. type: Title ==
#: upstream/_guides/getting-started-testing.adoc:1493
#, fuzzy, no-wrap
msgid "Testing Dev Services"
msgstr "Serviços de desenvolvimento de testes"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1497
#, fuzzy
msgid "By default, tests should just work with xref:dev-services.adoc[Dev Services], however from some use cases you may need access to the automatically configured properties in your tests."
msgstr "Por predefinição, os testes devem funcionar apenas com os  link:dev-services.html[serviços de desenvolvimento], no entanto, em alguns casos de utilização, pode ser necessário aceder às propriedades configuradas automaticamente nos seus testes."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1502
#, fuzzy
msgid "You can do this with `io.quarkus.test.common.DevServicesContext`, which can be injected directly into any `@QuarkusTest` or `@QuarkusIntegrationTest`. All you need to do is define a field of type `DevServicesContext` and it will be automatically injected. Using this you can retrieve any properties that have been set. Generally this is used to directly connect to a resource from the test itself, e.g. to connect to kafka to send messages to the application under test."
msgstr "Pode fazê-lo com `io.quarkus.test.common.DevServicesContext`, que pode ser injetado diretamente em qualquer `@QuarkusTest` ou `@QuarkusIntegrationTest`. Basta definir um campo do tipo `DevServicesContext` e este será automaticamente injetado. Utilizando este campo, é possível recuperar quaisquer propriedades que tenham sido definidas. Geralmente, isto é utilizado para ligar diretamente a um recurso a partir do próprio teste, por exemplo, para ligar ao kafka para enviar mensagens para a aplicação em teste."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1507
#, fuzzy
msgid "Injection is also supported into objects that implement `io.quarkus.test.common.DevServicesContext.ContextAware`. If you have a field that implements `io.quarkus.test.common.DevServicesContext.ContextAware` Quarkus will call the `setIntegrationTestContext` method to pass the context into this object. This allows client logic to be encapsulated in a utility class."
msgstr "A injeção também é suportada em objectos que implementam `io.quarkus.test.common.DevServicesContext.ContextAware`. Se tiver um campo que implemente `io.quarkus.test.common.DevServicesContext.ContextAware`, o Quarkus chamará o método `setIntegrationTestContext` para passar o contexto para este objeto. Isto permite que a lógica do cliente seja encapsulada numa classe utilitária."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1510
#, fuzzy
msgid "`QuarkusTestResourceLifecycleManager` implementations can also implement `ContextAware` to get access to these properties, which allows you to set up the resource before Quarkus starts (e.g. configure a KeyCloak instance, add data to a database etc)."
msgstr "`QuarkusTestResourceLifecycleManager` podem também implementar `ContextAware` para ter acesso a estas propriedades, o que lhe permite configurar o recurso antes de o Quarkus arrancar (por exemplo, configurar uma instância KeyCloak, adicionar dados a uma base de dados, etc.)."

#. type: delimited block =
#: upstream/_guides/getting-started-testing.adoc:1516
#, fuzzy
msgid "For `@QuarkusIntegrationTest` tests that result in launcher the application as a container, `io.quarkus.test.common.DevServicesContext` also provides access to the id of the container network on which the application container was launched (via the `containerNetworkId` method).  This can be used by `QuarkusTestResourceLifecycleManager` that need to launch additional containers that the application will communicate with."
msgstr "Para os testes `@QuarkusIntegrationTest` que resultam no lançamento da aplicação como um contentor, `io.quarkus.test.common.DevServicesContext` também fornece acesso ao id da rede de contentores em que o contentor da aplicação foi lançado (através do método `containerNetworkId` ). Isto pode ser usado por `QuarkusTestResourceLifecycleManager` que precisa de lançar contentores adicionais com os quais a aplicação irá comunicar."

#. type: Title ==
#: upstream/_guides/getting-started-testing.adoc:1518
#, fuzzy, no-wrap
msgid "Testing Components"
msgstr "Componentes de teste"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1521
#, fuzzy
msgid "This feature is experimental and the API may change in the future."
msgstr "Esta funcionalidade é experimental e a API pode ser alterada no futuro."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1525
#, fuzzy
msgid "In Quarkus, the component model is built on top CDI.  Therefore, Quarkus provides the `QuarkusComponentTestExtension`, a JUnit extension to ease the testing of components and mocking of their dependencies.  This extension is available in the `quarkus-junit5-component` dependency."
msgstr "No Quarkus, o modelo de componentes é construído sobre o CDI. Por conseguinte, o Quarkus fornece o `QuarkusComponentTestExtension`, uma extensão JUnit para facilitar o teste de componentes e a simulação das suas dependências. Esta extensão está disponível na dependência `quarkus-junit5-component`."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1527
#, fuzzy
msgid "Let's have a component `Foo`:"
msgstr "Vamos ter um componente `Foo`:"

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1531
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1534
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.inject.Inject;\n"
msgstr ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.inject.Inject;\n"

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1537
#, no-wrap
msgid ""
"@ApplicationScoped <1>\n"
"public class Foo {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1540
#, no-wrap
msgid ""
"    @Inject\n"
"    Charlie charlie; <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1543
#, no-wrap
msgid ""
"    @ConfigProperty(name = \"bar\")\n"
"    boolean bar; <3>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1548
#, no-wrap
msgid ""
"    public String ping() {\n"
"        return bar ? charlie.ping() : \"nok\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1550
#, fuzzy
msgid "`Foo` is an `@ApplicationScoped` CDI bean."
msgstr "`Foo` é um feijão CDI `@ApplicationScoped`."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1551
#, fuzzy
msgid "`Foo` depends on `Charlie` which declares a method `ping()`."
msgstr "`Foo` depende de `Charlie` que declara um método `ping()`."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1552
#, fuzzy
msgid "`Foo` depends on the config property `bar`."
msgstr "`Foo` depende da propriedade de configuração `bar`."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1554
#, fuzzy
msgid "Then a component test could look like:"
msgstr "Então, um teste de componente poderia ter o seguinte aspeto:"

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1558
#: upstream/_guides/getting-started-testing.adoc:1595
#: upstream/_guides/getting-started-testing.adoc:1661
#: upstream/_guides/getting-started-testing.adoc:1710
#, no-wrap
msgid "import static org.junit.jupiter.api.Assertions.assertEquals;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1565
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import io.quarkus.test.InjectMock;\n"
"import io.quarkus.test.component.TestConfigProperty;\n"
"import io.quarkus.test.component.QuarkusComponentTest;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.mockito.Mockito;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1569
#, no-wrap
msgid ""
"@QuarkusComponentTest <1>\n"
"@TestConfigProperty(key = \"bar\", value = \"true\") <2>\n"
"public class FooTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1572
#, no-wrap
msgid ""
"    @Inject\n"
"    Foo foo; <3>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1575
#, no-wrap
msgid ""
"    @InjectMock\n"
"    Charlie charlieMock; <4>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1582
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPing() {\n"
"        Mockito.when(charlieMock.ping()).thenReturn(\"OK\"); <5>\n"
"        assertEquals(\"OK\", foo.ping());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1584
#, fuzzy
msgid "The `QuarkusComponentTest` annotation registers the JUnit extension."
msgstr "A anotação `QuarkusComponentTest` regista a extensão JUnit."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1585
#, fuzzy
msgid "Sets a configuration property for the test."
msgstr "Define uma propriedade de configuração para o teste."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1586
#, fuzzy
msgid "The test injects the component under the test. The types of all fields annotated with `@Inject` are considered the component types under test. You can also specify additional component classes via `@QuarkusComponentTest#value()`. Furthermore, the static nested classes declared on the test class are components too."
msgstr "O teste injecta o componente a ser testado. Os tipos de todos os campos anotados com `@Inject` são considerados os tipos de componentes em teste. Também pode especificar classes de componentes adicionais através de `@QuarkusComponentTest#value()`. Além disso, as classes aninhadas estáticas declaradas na classe de teste também são componentes."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1587
#, fuzzy
msgid "The test also injects `Charlie`, a dependency for which a synthetic `@Singleton` bean is registered automatically. The injected reference is an \"unconfigured\" Mockito mock."
msgstr "O teste também injeta `Charlie`, uma dependência para a qual um bean sintético `@Singleton` é registado automaticamente. A referência injectada é uma simulação \"não configurada\" do Mockito."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1588
#, fuzzy
msgid "We can leverage the Mockito API in a test method to configure the behavior."
msgstr "Podemos aproveitar a API do Mockito num método de teste para configurar o comportamento."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1591
#, fuzzy
msgid "If you need the full control over the `QuarkusComponentTestExtension` configuration then you can use the `@RegisterExtension` annotation and configure the extension programatically.  The test above could be rewritten like:"
msgstr "Se precisar de controlo total sobre a configuração de `QuarkusComponentTestExtension`, pode utilizar a anotação `@RegisterExtension` e configurar a extensão programaticamente. O teste acima poderia ser reescrito como:"

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1601
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import io.quarkus.test.InjectMock;\n"
"import io.quarkus.test.component.QuarkusComponentTestExtension;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.mockito.Mockito;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1603
#, no-wrap
msgid "public class FooTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1606
#, no-wrap
msgid ""
"    @RegisterExtension <1>\n"
"    static final QuarkusComponentTestExtension extension = QuarkusComponentTestExtension.builder().configProperty(\"bar\",\"true\").build();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1609
#: upstream/_guides/getting-started-testing.adoc:1671
#: upstream/_guides/getting-started-testing.adoc:1720
#, no-wrap
msgid ""
"    @Inject\n"
"    Foo foo;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1612
#, no-wrap
msgid ""
"    @InjectMock\n"
"    Charlie charlieMock;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1619
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPing() {\n"
"        Mockito.when(charlieMock.ping()).thenReturn(\"OK\");\n"
"        assertEquals(\"OK\", foo.ping());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1621
#, fuzzy
msgid "The `QuarkusComponentTestExtension` is configured in a static field of the test class."
msgstr "O `QuarkusComponentTestExtension` é configurado num campo estático da classe de teste."

#. type: Title ===
#: upstream/_guides/getting-started-testing.adoc:1622
#, fuzzy, no-wrap
msgid "Lifecycle"
msgstr "Ciclo de vida"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1630
#, fuzzy
msgid "So what exactly does the `QuarkusComponentTest` do? It starts the CDI container and registers a dedicated xref:config-reference.adoc[configuration object].  If the test instance lifecycle is `Lifecycle#PER_METHOD` (default) then the container is started during the `before each` test phase and stopped during the `after each` test phase.  However, if the test instance lifecycle is `Lifecycle#PER_CLASS` then the container is started during the `before all` test phase and stopped during the `after all` test phase.  The fields annotated with `@Inject` and `@InjectMock` are injected after a test instance is created.  Finally, the CDI request context is activated and terminated per each test method."
msgstr "Então, o que faz exatamente o `QuarkusComponentTest`? Inicia o contentor CDI e regista um  link:config-reference.html[objeto de configuração] dedicado durante a fase de teste `before all`. O contentor é parado e a configuração é libertada durante a fase de teste `after all`. Os campos anotados com `@Inject` e `@InjectMock` são injectados depois de uma instância de teste ser criada e desactivados antes de uma instância de teste ser destruída. Finalmente, o contexto de pedido CDI é ativado e terminado por cada método de teste."

#. type: Title ===
#: upstream/_guides/getting-started-testing.adoc:1631
#, fuzzy, no-wrap
msgid "Auto Mocking Unsatisfied Dependencies"
msgstr "Auto-micking de dependências insatisfeitas"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1638
#, fuzzy
msgid "Unlike in regular CDI environments the test does not fail if a component injects an unsatisfied dependency.  Instead, a synthetic bean is registered automatically for each combination of required type and qualifiers of an injection point that resolves to an unsatisfied dependency.  The bean has the `@Singleton` scope so it's shared across all injection points with the same required type and qualifiers.  The injected reference is an _unconfigured_ Mockito mock.  You can inject the mock in your test and leverage the Mockito API to configure the behavior."
msgstr "Ao contrário do que acontece em ambientes CDI normais, o teste não falha se um componente injetar uma dependência não satisfeita. Em vez disso, um bean sintético é registado automaticamente para cada combinação de tipo requerido e qualificadores de um ponto de injeção que resolve para uma dependência insatisfeita. O bean tem o âmbito `@Singleton`, pelo que é partilhado por todos os pontos de injeção com o mesmo tipo requerido e os mesmos qualificadores. A referência injectada é uma simulação do Mockito _não configurada_. Você pode injetar a simulação no seu teste e aproveitar a API do Mockito para configurar o comportamento."

#. type: Title ===
#: upstream/_guides/getting-started-testing.adoc:1639
#, fuzzy, no-wrap
msgid "Custom Mocks For Unsatisfied Dependencies"
msgstr "Mocks personalizados para dependências não satisfeitas"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1643
#, fuzzy
msgid "Sometimes you need the full control over the bean attributes and maybe even configure the default mock behavior.  You can use the mock configurator API via the `QuarkusComponentTestExtensionBuilder#mock()` method."
msgstr "Por vezes, é necessário ter controlo total sobre os atributos do bean e talvez até configurar o comportamento de simulação predefinido. Pode utilizar a API do configurador de simulação através do método `QuarkusComponentTestExtension#mock()`."

#. type: Title ===
#: upstream/_guides/getting-started-testing.adoc:1644
#, fuzzy, no-wrap
msgid "Configuration"
msgstr "Configuração"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1648
#, fuzzy
msgid "You can set the configuration properties for a test with the `@io.quarkus.test.component.TestConfigProperty` annotation or with the `QuarkusComponentTestExtensionBuilder#configProperty(String, String)` method.  If you only need to use the default values for missing config properties, then the `@QuarkusComponentTest#useDefaultConfigProperties()` or `QuarkusComponentTestExtensionBuilder#useDefaultConfigProperties()` might come in useful."
msgstr "Um `SmallRyeConfig` dedicado é registado durante a fase de teste `before all`. Além disso, é possível definir as propriedades de configuração através do método `QuarkusComponentTestExtension#configProperty(String, String)` ou da anotação `@TestConfigProperty`. Se só precisar de utilizar os valores predefinidos para as propriedades de configuração em falta, então o `QuarkusComponentTestExtension#useDefaultConfigProperties()` ou o `@QuarkusComponentTest#useDefaultConfigProperties()` podem ser úteis."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1651
msgid "It is also possible to set configuration properties for a test method with the `@io.quarkus.test.component.TestConfigProperty` annotation.  However, if the test instance lifecycle is `Lifecycle#_PER_CLASS` this annotation can only be used on the test class and is ignored on test methods."
msgstr ""

#. type: Title ===
#: upstream/_guides/getting-started-testing.adoc:1652
#, fuzzy, no-wrap
msgid "Mocking CDI Interceptors"
msgstr "Simulação de interceptores CDI"

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1657
#, fuzzy
msgid "If a tested component class declares an interceptor binding then you might need to mock the interception too.  There are two ways to accomplish this task.  First, you can define an interceptor class as a static nested class of the test class."
msgstr "Se uma classe de componente testada declarar uma ligação de intercetor, pode ser necessário simular a interceção também. Há duas maneiras de realizar essa tarefa. Primeiro, pode definir uma classe de intercetor como uma classe aninhada estática da classe de teste."

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1665
#: upstream/_guides/getting-started-testing.adoc:1714
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import io.quarkus.test.component.QuarkusComponentTest;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1668
#: upstream/_guides/getting-started-testing.adoc:1717
#, no-wrap
msgid ""
"@QuarkusComponentTest\n"
"public class FooTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1676
#: upstream/_guides/getting-started-testing.adoc:1725
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPing() {\n"
"        assertEquals(\"OK\", foo.ping());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1679
#: upstream/_guides/getting-started-testing.adoc:1734
#, no-wrap
msgid ""
"    @ApplicationScoped\n"
"    static class Foo {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1684
#: upstream/_guides/getting-started-testing.adoc:1739
#, no-wrap
msgid ""
"       @SimpleBinding <1>\n"
"       String ping() {\n"
"         return \"ok\";\n"
"       }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1690
#, no-wrap
msgid ""
"    @SimpleBinding\n"
"    @Interceptor\n"
"    static class SimpleInterceptor { <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1695
#, no-wrap
msgid ""
"        @AroundInvoke\n"
"        Object aroundInvoke(InvocationContext context) throws Exception {\n"
"            return context.proceed().toString().toUpperCase();\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1698
#: upstream/_guides/getting-started-testing.adoc:1742
#, no-wrap
msgid ""
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1700
#, fuzzy
msgid "`@SimpleBinding` is an interceptor binding."
msgstr "`@SimpleBinding` é uma ligação intercetora."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1701
#, fuzzy
msgid "The interceptor class is automatically considered a tested component."
msgstr "A classe intercetora é automaticamente considerada um componente testado."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1703
#, fuzzy
msgid "Static nested classed declared on a test class that is annotated with `@QuarkusComponentTest` are excluded from bean discovery when running a `@QuarkusTest` in order to prevent unintentional CDI conflicts."
msgstr "As classes aninhadas estáticas declaradas numa classe de teste anotada com `@QuarkusComponentTest` são excluídas da descoberta de feijões ao executar um `@QuarkusTest` para evitar conflitos CDI não intencionais."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1706
#, fuzzy
msgid "Furthermore, you can also declare a \"test interceptor method\" directly on the test class.  This method is then invoked in the relevant interception phase."
msgstr "Além disso, também é possível declarar um \"método intercetor de teste\" diretamente na classe de teste. Este método é então invocado na fase de interceção relevante."

#. type: delimited block -
#: upstream/_guides/getting-started-testing.adoc:1731
#, no-wrap
msgid ""
"    @SimpleBinding <1>\n"
"    @AroundInvoke <2>\n"
"    Object aroundInvoke(InvocationContext context) throws Exception {\n"
"       return context.proceed().toString().toUpperCase();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1744
#, fuzzy
msgid "The interceptor bindings of the resulting interceptor are specified by annotating the method with the interceptor binding types."
msgstr "As ligações de intercetor do intercetor resultante são especificadas anotando o método com os tipos de ligação de intercetor."

#. type: Plain text
#: upstream/_guides/getting-started-testing.adoc:1744
#, fuzzy
msgid "Defines the interception type."
msgstr "Define o tipo de interceção."
