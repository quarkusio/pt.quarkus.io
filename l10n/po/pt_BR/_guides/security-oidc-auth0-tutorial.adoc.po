# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-29 08:10+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:7
#, no-wrap
msgid "Protect Quarkus web application by using an Auth0 OpenID Connect provider"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:14
msgid "xref:security-architecture.adoc[Quarkus Security] provides comprehensive OpenId Connect (OIDC) and OAuth2 support with its `quarkus-oidc` extension, supporting both xref:security-oidc-code-flow-authentication.adoc[Authorization code flow] and xref:security-oidc-bearer-token-authentication.adoc[Bearer token] authentication mechanisms."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:16
msgid "With Quarkus, you can easily configure OIDC providers such as link:https://www.keycloak.org/documentation[Keycloak], link:https://developer.okta.com/[Okta], link:https://auth0.com/docs/[Auth0], and other xref:security-openid-connect-providers.adoc[well-known social OIDC and OAuth2 providers]."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:18
msgid "Learn how to use the Quarkus OpenID Connect extension (`quarkus-oidc`) together with the https://auth0.com/docs/[Auth0] OIDC provider to protect your API endpoints."
msgstr ""

#. type: Title ==
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:19
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:22
msgid "Please review the following documentation before you begin:"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:24
msgid "link:https://auth0.com/docs/[Auth0 docs site]"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:25
msgid "xref:security-oidc-code-flow-authentication.adoc[Quarkus OpenID Connect Authorization code flow mechanism for protecting web applications]"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:26
msgid "xref:security-oidc-bearer-token-authentication.adoc[Quarkus OpenID Connect (OIDC) Bearer token authentication]"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:27
#, no-wrap
msgid "Create an Auth0 application"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:31
msgid "Go to the Auth0 dashboard and create a regular web application.  For example, create an Auth0 application called `QuarkusAuth0`."
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:32
#, no-wrap
msgid "Create Auth0 application"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:32
#, no-wrap
msgid "auth0-create-application.png"
msgstr ""

#. type: Block title
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:34
#, no-wrap
msgid "Result"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:37
msgid "Your Auth0 application gets created with a client ID, secret, and HTTPS-based domain.  Make a note of these properties because you will need them to complete the Quarkus configuration in the next step."
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:38
#, no-wrap
msgid "Created Auth0 application"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:38
#, no-wrap
msgid "auth0-created-application.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:41
msgid "Next, while still in the Auth0 dashboard, add some users to your application."
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:42
#, no-wrap
msgid "Add Auth0 application users"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:42
#, no-wrap
msgid "auth0-add-user.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:46
msgid "Now that you have successfully created and configured your Auth0 application, you are ready to start creating and configuring a Quarkus endpoint.  In the steps that follow, you will continue to configure and update the Auth0 application as well."
msgstr ""

#. type: Title ==
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:47
#, no-wrap
msgid "Create a Quarkus application"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:50
msgid "Use the following Maven command to create a Quarkus RESTEasy Reactive application that can be secured with the Quarkus OIDC extension."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:57
msgid "Create the application workspace and import it into your favorite IDE.  Let's add a Jakarta REST endpoint that can only be accessed by authenticated users:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:61
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:244
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:314
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:422
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:545
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:662
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:703
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:765
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:853
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:894
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:981
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:63
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:246
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:316
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:424
#, no-wrap
msgid "import org.eclipse.microprofile.jwt.JsonWebToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:71
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:254
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:324
#, no-wrap
msgid ""
"import io.quarkus.oidc.IdToken;\n"
"import io.quarkus.security.Authenticated;\n"
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:74
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:257
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:327
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:435
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:556
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"public class GreetingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:78
#, no-wrap
msgid ""
"    @Inject\n"
"    @IdToken                                        <1>\n"
"    JsonWebToken idToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:86
#, no-wrap
msgid ""
"    @GET\n"
"    @Authenticated                                  <2>\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return \"Hello, \" + idToken.getName();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:89
msgid "The injected `JsonWebToken` (JWT) bean has an `@IdToken` qualifier, which means it represents not an access token but OIDC `ID token`.  `IdToken` provides information in the form of claims about the current user authenticated during the OIDC authorization code flow and you can use `JsonWebToken` API to access these claims."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:90
msgid "The `io.quarkus.security.Authenticated` annotation is added to the `hello()` method, which means that only authenticated users can access it."
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:95
msgid "The access token acquired during the authorization code flow, alongside the ID token, is not used directly by the endpoint but is used only to access downstream services on behalf of the currently authenticated user.  More to come on the topic of \"access tokens\", later in this tutorial."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:98
msgid "Configure OIDC in the Quarkus `application.properties` file by using the properties from the Auth0 application that you created earlier."
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:106
#, no-wrap
msgid ""
"# Make sure the application domain is prefixed with 'https://'\n"
"quarkus.oidc.auth-server-url=https://dev-3ve0cgn7.us.auth0.com\n"
"quarkus.oidc.application-type=web-app\n"
"quarkus.oidc.client-id=sKQu1dXjHB6r0sra0Y1YCqBZKWXqCkly\n"
"quarkus.oidc.credentials.secret=${client-secret}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:110
msgid "In completing this step, you have just configured Quarkus to use the domain, client ID, and secret of your Auth0 application.  Setting the property `quarkus.oidc.application-type=web-app` instructs Quarkus to use the OIDC authorization code flow, but there are also other methods, which are discussed later on in the tutorial."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:112
msgid "The endpoint address will be \\http://localhost:8080/hello, which must also be registered as an allowed callback URL in your Auth0 application."
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:113
#, no-wrap
msgid "Auth0 allowed callback URL"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:113
#, no-wrap
msgid "auth0-allowed-callback.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:116
msgid "After completing this step, when you access the Quarkus \\http://localhost:8080/hello endpoint from a browser, Auth0 redirects you back to the same address after the authentication is completed."
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:121
msgid "By default, Quarkus automatically uses the current request path as the callback path.  But you can override the default behavior and configure a specific callback path by setting the Quarkus `quarkus.oidc.authentication.redirect-path` property."
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:124
msgid "In production, your application will most likely have a larger URL space, with multiple endpoint addresses available.  In such cases, you can set a dedicated callback (redirect) path and register this URL in the provider's dashboard, as outlined in the following configuration example:"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:126
msgid "`quarkus.oidc.authentication.redirect-path=/authenticated-welcome`"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:129
msgid "In the example scenario, Quarkus calls `/authenticated-welcome` after accepting a redirect from Auth0, completing the authorization code flow, and creating the session cookie.  Successfully authenticated users are also allowed to access other parts of the secured application space, without needing to authenticate again. For example, the endpoint callback method can use a JAX-RS API to redirect users to other parts of the secured application where a session cookie will be verified."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:132
msgid "Now you are ready to start testing the endpoint."
msgstr ""

#. type: Title ==
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:133
#, no-wrap
msgid "Test the Quarkus endpoint"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:136
msgid "Start Quarkus in dev mode:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:140
#, no-wrap
msgid "$ mvn quarkus:dev\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:146
msgid "This is the only time during this tutorial when you are expected to manually start Quarkus in dev mode.  The configuration and code update steps in the remaining sections of this tutorial are automatically observed and processed by Quarkus without you needing to restart the application manually."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:149
msgid "Open the browser and access http://localhost:8080/hello."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:151
msgid "You will be redirected to Auth0 and prompted to log in:"
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:152
#, no-wrap
msgid "Auth0 Login"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:152
#, no-wrap
msgid "auth0-login.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:155
msgid "and authorize the `QuarkusAuth0` application to access your account:"
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:156
#, no-wrap
msgid "Auth0 Authorize"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:156
#, no-wrap
msgid "auth0-authorize.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:160
msgid "Finally, you will be redirected back to the Quarkus endpoint which will return the following response: `Hello, auth0|60e5a305e8da5a006aef5471`"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:165
msgid "Notice that the current username does not get returned.  To learn more about why this behavior occurs, you can use OIDC Dev UI as explained in the xref:security-openid-connect-dev-services.adoc#dev-ui-all-oidc-providers[Dev UI for all OpenID Connect Providers] section of the \"Dev Services and UI for OpenID Connect (OIDC)\" guide and the following section."
msgstr ""

#. type: Title ==
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:167
#, no-wrap
msgid "Looking at Auth0 tokens in the OIDC Dev UI"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:172
msgid "Quarkus provides a great xref:dev-ui-v2.adoc[Dev UI] experience.  Specifically, Quarkus offers built-in support for developing and testing OIDC endpoints with a Keycloak container.  xref:security-openid-connect-dev-services.adoc#dev-services-for-keycloak[DevService for Keycloak] is automatically started and used if the address of the OIDC provider is not specified for the Quarkus `quarkus.oidc.auth-server-url` configuration property."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:175
msgid "You can continue using the Quarkus OIDC Dev UI when the provider is already configured.  Use the following instructions to update your configuration:"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:177
msgid "First, change your Quarkus application type from `web-app` to `hybrid`, as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:184
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=https://dev-3ve0cgn7.us.auth0.com\n"
"quarkus.oidc.application-type=hybrid <1>\n"
"quarkus.oidc.client-id=sKQu1dXjHB6r0sra0Y1YCqBZKWXqCkly\n"
"quarkus.oidc.credentials.secret=${client-secret}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:187
msgid "Application type is changed to `hybrid` because OIDC Dev UI currently supports `SPA` (single-page application) mode only.  OIDC Dev UI single-page application, using its own Java Script, authenticates users to the OIDC provider and uses the access token as a Bearer token to access the Quarkus endpoint as a service."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:189
msgid "Typically, Quarkus must be configured with `quarkus.oidc.application-type=service` to support `Bearer` token authentication, but it also supports a `hybrid` application type, which means it can support both the authorization code and bearer token flows at the same time."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:192
msgid "You also need to configure the Auth0 application to allow the callbacks to the OIDC Dev UI.  Use the following URL format:"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:194
msgid "`http://localhost:8080/q/dev-ui/io.quarkus.quarkus-oidc/${provider-name}-provider`"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:196
msgid "Where in this example, the `${provider-name}` is `auth0`"
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:197
#, no-wrap
msgid "Auth0 Allowed Callbacks"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:197
#, no-wrap
msgid "auth0-allowed-callbacks.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:200
msgid "Now you are ready to use OIDC Dev UI with Auth0."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:202
msgid "Open http://localhost:8080/q/dev/ in a browser session. An OpenId Connect card that links to an Auth0 provider SPA displays, as follows:"
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:203
#, no-wrap
msgid "Auth0 DevUI"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:203
#, no-wrap
msgid "auth0-devui.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:206
msgid "Click *Auth0 provider* followed by *Login into Single Page Application*:"
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:207
#, no-wrap
msgid "Auth0 DevUI Login to SPA"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:207
#, no-wrap
msgid "auth0-devui-login-to-spa.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:211
msgid "You will be redirected to Auth0 to log in.  You will then be redirected to the OIDC Dev UI dashboard, as follows:"
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:212
#, no-wrap
msgid "Auth0 DevUI Dashboard Without Name"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:212
#, no-wrap
msgid "auth0-devui-dashboard-without-name.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:215
msgid "Here you can look at both ID and access tokens in the encoded and decoded formats, copy them to the clipboard or use them to test the service endpoint. We will test the endpoint later but for now let's check the ID token:"
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:216
#, no-wrap
msgid "Auth0 IdToken without name"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:216
#, no-wrap
msgid "auth0-idtoken-without-name.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:219
msgid "As you can see it does not have any claim representing a user name but if you check its `sub` (subject) claim you will see its value matches what you got in the response when you accessed the Quarkus endpoint directly from the browser, `auth0|60e5a305e8da5a006aef5471`."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:221
msgid "Fix it by configuring Quarkus to request a standard OIDC `profile` scope during the authentication process which should result in the ID token including more information:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:228
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=https://dev-3ve0cgn7.us.auth0.com\n"
"quarkus.oidc.application-type=hybrid\n"
"quarkus.oidc.client-id=sKQu1dXjHB6r0sra0Y1YCqBZKWXqCkly\n"
"quarkus.oidc.credentials.secret=${client-secret}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:230
#, no-wrap
msgid "quarkus.oidc.authentication.scopes=profile <1>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:232
msgid "Request `profile` scope in addition to the default `openid` scope."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:234
msgid "Go back to http://localhost:8080/q/dev/, repeat the process of logging in to `Auth0` and check the ID token again, now you should see the ID token containing the `name` claim:"
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:235
#, no-wrap
msgid "Auth0 IdToken with name"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:235
#, no-wrap
msgid "auth0-idtoken-with-name.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:238
msgid "You should get the name when you access the Quarkus endpoint directly from the browser. Clear the browser cookie cache, access http://localhost:8080/hello and yet again, you get `Hello, auth0|60e5a305e8da5a006aef5471` returned. Hmm, what is wrong ?"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:240
msgid "The answer lies with the specifics of the `org.eclipse.microprofile.jwt.JsonWebToken#getName()` implementation, which, according to the https://github.com/eclipse/microprofile-jwt-auth[MicroProfile MP JWT RBAC specification], checks an MP JWT specific `upn` claim, trying `preferred_username` next and finally `sub` which explains why you get the `Hello, auth0|60e5a305e8da5a006aef5471` answer even with the ID token containing the `name` claim. We can fix it easily by changing the endpoint `hello()` method's implementation to return a specific claim value:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:261
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:331
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:439
#, no-wrap
msgid ""
"    @Inject\n"
"    @IdToken\n"
"    JsonWebToken idToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:269
#, no-wrap
msgid ""
"    @GET\n"
"    @Authenticated\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return \"Hello, \" + idToken.getClaim(\"name\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:272
msgid "Now clear the browser cache, access http://localhost:8080/hello and finally the user name is returned."
msgstr ""

#. type: Title ==
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:273
#, no-wrap
msgid "Logout support"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:276
msgid "Now that you have the users signing in to Quarkus with the help from Auth0, you will likely would like to support a user initiated logout. Quarkus supports https://quarkus.io/guides/security-oidc-code-flow-authentication#logout-and-expiration[RP-initiated and other standard OIDC logout mechanisms, as well as the local session logout]."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:278
msgid "Currently, Auth0 does not support the standard OIDC RP-initiated logout and does not provide an end session endpoint URL in its discoverable metadata, but it provides its own logout mechanism which works nearly exactly the same as the standard one."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:280
msgid "It is easy to support it with Quarkus OIDC. You must configure an Auth0 end session endpoint URL and have Quarkus include both the `client-id` query parameter and the post logout URL as the `returnTo` query parameter in the RP-initated logout redirect request to Auth0:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:288
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=https://dev-3ve0cgn7.us.auth0.com\n"
"quarkus.oidc.application-type=hybrid\n"
"quarkus.oidc.client-id=sKQu1dXjHB6r0sra0Y1YCqBZKWXqCkly\n"
"quarkus.oidc.credentials.secret=${client-secret}\n"
"quarkus.oidc.authentication.scopes=openid,profile\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:294
#, no-wrap
msgid ""
"quarkus.oidc.end-session-path=v2/logout <1>\n"
"quarkus.oidc.logout.post-logout-uri-param=returnTo <2>\n"
"quarkus.oidc.logout.extra-params.client_id=${quarkus.oidc.client-id} <3>\n"
"quarkus.oidc.logout.path=/logout <4>\n"
"quarkus.oidc.logout.post-logout-path=/hello/post-logout <5>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:297
#, no-wrap
msgid ""
"quarkus.http.auth.permission.authenticated.paths=/logout\n"
"quarkus.http.auth.permission.authenticated.policy=authenticated <6>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:299
msgid "Auth0 does not include the end session URL in its metadata, so complement it with manually configuring the Auth0 end session endpoint URL."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:300
msgid "Auth0 will not recognize a standard `post_logout_redirect_uri` query parameter and expects a parameter `returnTo` instead."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:301
msgid "Auth0 expects `client-id` in the logout request."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:302
msgid "Authenticated requests to `/logout` path will be treated as RP-inititated logout requests."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:303
msgid "This is a public resource to where the logged out user should be returned to."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:304
msgid "Make sure the `/logout` path is protected."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:306
msgid "Here we have customized the Auth0 end session endpoint URL and indicated to Quarkus that an `http://localhost:8080/logout` request must trigger a logout of the currently authenticated user. An interesting thing about the `/logout` path is that it is `virtual`, it is not supported by any method in the JAX-RS endpoint, so for Quarkus OIDC to be able to react to `/logout` requests we attach an `authenticated` https://quarkus.io/guides/security-authorize-web-endpoints-reference#authorization-using-configuration[HTTP security policy] to this path directly in the configuration."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:308
msgid "We also have configured Quarkus to return the logged out user to the public `/hello/post-logout` resource, and this path is included in the logout request as the Auth0 specific `returnTo` query parameter. Finally, the Quarkus application's `client-id` is included in the logout URL as well."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:310
msgid "Update the endpoint to accept the post logout redirects:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:338
#, no-wrap
msgid ""
"    @GET\n"
"    @Authenticated\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return \"Hello, \" + idToken.getClaim(\"name\");\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:346
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:454
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:574
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:800
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"post-logout\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String postLogout() {\n"
"        return \"You were logged out\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:349
msgid "Note the addition of the public `/hello/post-logout` resource method."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:351
msgid "Before we test the logout, make sure the `Auth0` application is configured to allow this post logout redirect back to Quarkus after the user has been logged out:"
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:352
#, no-wrap
msgid "Auth0 Allowed Logout"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:352
#, no-wrap
msgid "auth0-allowed-logout.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:355
msgid "Now, clear the browser cookie cache, access http://localhost:8080/hello, login to Quarkus with Auth0, get the user name returned, and go to `http://localhost:8080/logout`. You'll see the `You were logged out` message displayed in the browser."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:357
msgid "Next, go to the http://localhost:8080/q/dev/, login to Auth0 from the Dev UI SPA and notice you can now logout from the OIDC Dev UI too, see the symbol representing the logout next to the `Logged in as Sergey Beryozkin` text:"
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:358
#, no-wrap
msgid "Auth0 Dashboard with name and Logout"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:358
#, no-wrap
msgid "auth0-devui-dashboard-with-name.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:361
msgid "For the logout to work from OIDC DevUI, the Auth0 application's list of allowed logout callbacks has to be updated to include the OIDC DevUI endpoint:"
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:362
#, no-wrap
msgid "Auth0 Allowed Logouts"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:362
#, no-wrap
msgid "auth0-allowed-logouts.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:365
msgid "Now logout directly from OIDC Dev UI and login as a new user - add more users to the registered Auth0 application if required."
msgstr ""

#. type: Title ==
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:367
#, no-wrap
msgid "Role Based Access Control"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:370
msgid "We have confirmed that the Quarkus endpoint can be accessed by users who have authenticated with the help of `Auth0`."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:372
msgid "The next step is to introduce Role Based Access Control (RBAC) to have users in a specific role only, such as `admin`, be able to access the endpoint."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:374
msgid "See also the xref:permission-based-access-control[Permission Based Access Control] section below."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:376
msgid "Auth0 tokens do not include any claims containing roles by default, so, first, you must customize the `Login` flow of the `Auth0` application with a custom action which will add the roles to tokens. Select `Actions/Flows/Login` in the `Auth0` dashboard, choose `Add Action/Build Custom`, name it as `AddRoleClaim`:"
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:377
#, no-wrap
msgid "Auth0 Add Role Action"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:377
#, no-wrap
msgid "auth0-add-role-action.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:380
msgid "Add the following action script to it:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:390
#, no-wrap
msgid ""
"exports.onExecutePostLogin = async (event, api) => {\n"
"  const namespace = 'https://quarkus-security.com';\n"
"  if (event.authorization) {\n"
"    api.idToken.setCustomClaim(`${namespace}/roles`, event.authorization.roles);\n"
"    api.accessToken.setCustomClaim(`${namespace}/roles`, event.authorization.roles);\n"
"  }\n"
"};\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:393
msgid "Note a custom Auth0 claim has to be namespace qualified, so the claim which will contain roles will be named as \"https://quarkus-security.com/roles\". Have a look at the ID token content we analyzed in the previous sections and you will see how this claim is represented, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:401
#, no-wrap
msgid ""
"{\n"
"  \"https://quarkus-security.com/roles\": [\n"
"      \"admin\"\n"
"  ]\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:404
msgid "The `Auth0` Login Flow diagramm should look like this now:"
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:405
#, no-wrap
msgid "Auth0 Login Flow"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:405
#, no-wrap
msgid "auth0-login-flow.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:408
msgid "You must add a role such as `admin` to the users registered in the `Auth0` application."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:410
msgid "Create an `admin` role:"
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:411
#, no-wrap
msgid "Auth0 Create Role"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:411
#, no-wrap
msgid "auth0-create-role.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:414
msgid "and add it to the registered user:"
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:415
#, no-wrap
msgid "Auth0 Add Role to User"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:415
#, no-wrap
msgid "auth0-add-role-to-user.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:418
msgid "Next, update the Quarkus endpoint to require that only users with the `admin` role can access the endpoint:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:432
#, no-wrap
msgid ""
"import io.quarkus.oidc.IdToken;\n"
"import jakarta.annotation.security.RolesAllowed;\n"
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:446
#, no-wrap
msgid ""
"    @GET\n"
"    @RolesAllowed(\"admin\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return \"Hello, \" + idToken.getClaim(\"name\");\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:457
msgid "Open http://localhost:8080/hello, authenticate to Auth0 and get `403`. The reason you get `403` is because Quarkus OIDC does not know which claim in the `Auth0` tokens represents the roles information, by default a `groups` claim is checked, while Auth0 tokens are now expected to have an \"https://quarkus-security.com/roles\" claim."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:459
msgid "Fix it by telling Quarkus OIDC which claim must be checked to enforce RBAC:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:467
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:523
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:939
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=https://dev-3ve0cgn7.us.auth0.com\n"
"quarkus.oidc.application-type=hybrid\n"
"quarkus.oidc.authentication.scopes=profile\n"
"quarkus.oidc.client-id=sKQu1dXjHB6r0sra0Y1YCqBZKWXqCkly\n"
"quarkus.oidc.credentials.secret=${client-secret}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:469
#, no-wrap
msgid "quarkus.oidc.roles.role-claim-path=\"https://quarkus-security.com/roles\" <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:478
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:535
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:746
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:841
#, no-wrap
msgid ""
"# Logout\n"
"quarkus.oidc.end-session-path=v2/logout\n"
"quarkus.oidc.logout.post-logout-uri-param=returnTo\n"
"quarkus.oidc.logout.extra-params.client_id=${quarkus.oidc.client-id}\n"
"quarkus.oidc.logout.path=/logout\n"
"quarkus.oidc.logout.post-logout-path=/hello/post-logout\n"
"quarkus.http.auth.permission.authenticated.paths=/logout\n"
"quarkus.http.auth.permission.authenticated.policy=authenticated\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:480
msgid "Point to the custom roles claim. The path to the roles claim is in double quotes because the claim is namespace qualified."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:482
msgid "Now, clear the browser cookie cache, access http://localhost:8080/hello again, authenticate to Auth0 and get an expected user name."
msgstr ""

#. type: Title ==
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:484
#, no-wrap
msgid "Access Quarkus with opaque Auth0 access tokens"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:489
msgid "The main goal of this section is to explain how Quarkus can be tuned to accept `opaque` bearer Auth0 access tokens as opposed to Auth0 JWT access tokens because Auth0 access tokens issued during the authorization code flow are opaque by default and they can only be used to request `UserInfo` in addition to the information about the current user which is already available in ID token. Learning how to verify opaque tokens can be useful because many OIDC and OAuth2 providers will issue opaque access tokens only."
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:491
msgid "Please see the xref:token-propagation[Propagate access tokens to microservices] and xref:jwt-access-tokens[Access tokens in JWT format] sections below for more information on how to configure Auth0 and Quarkus to have authorization code access tokens issued in the JWT format and propagated to service endpoints."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:494
msgid "So far we have only tested the Quarkus endpoint using OIDC authorization code flow. In this flow you use the browser to access the Quarkus endpoint, Quarkus itself manages the authorization code flow, a user is redirected to Auth0, logs in, is redirected back to Quarkus, Quarkus completes the flow by exchanging the code for the ID, access, and refresh tokens, and works with the ID token representing the successful user authentication. The access token is not relevant at the moment. As mentioned earlier, in the authorization code flow, Quarkus will only use the access token to access downstream services on behalf of the currently authenticated user."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:496
msgid "Lets imagine though that the Quarkus endpoint we have developed has to accept `Bearer` access tokens too: it may be that the other Quarkus endpoint which is propagating it to this endpoint or it can be SPA which uses the access token to access the Quarkus endpoint. And Quarkus OIDC DevUI SPA which we already used to analyze the ID token fits perfectly for using the access token available to SPA to test the Quarkus endpoint."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:498
msgid "Lets go again to http://localhost:8080/q/dev, select the `OpenId Connect` card, login to Auth0, and check the Access token content:"
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:499
#, no-wrap
msgid "Auth0 DevUI Access Token"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:499
#, no-wrap
msgid "auth0-devui-accesstoken.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:502
msgid "This access token, as opposed to the ID token we looked at earlier, can not be verified by Quarkus directly. This is because the access token is in `JWE` (encrypted) as opposed to `JWS` (signed) format. You can see from the decoded token headers that it has been encrypted directly with a secret key known to Auth0 only, and therefore its content can not be decrypted by Quarkus. From the Quarkus's perspective this access token is an `opaque` one, Quarkus can not use public Auth0 asymmetric verification keys to verify it."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:504
msgid "To confirm it, enter `/hello` as the `Service Address` in the `Test Service` area and press `With Access Token` and you will get the HTTP `401` status:"
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:505
#, no-wrap
msgid "Auth0 Dev UI Test Access token 401"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:505
#, no-wrap
msgid "auth0-devui-test-accesstoken-401.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:509
msgid "For Quarkus be able to accept such access tokens, one of the two options should be available.  The first option is to introspect the opaque token remotely using a provider's introspection endpoint. Token introspection is typically supported at the `OAuth2` level, and since `OIDC` is built on top of `OAuth2`, some OIDC providers such as Keycloak support the token introspection as well. However, Auth0 does not support the token introspection, you can check it by looking at the publicly available Auth0 metadata, add `/.well-known/openid-configuration` to the address of your configured Auth0 provider, and open the resulting URL, `https://dev-3ve0cgn7.us.auth0.com/.well-known/openid-configuration`. You will see that Auth0 does not have an introspection endpoint:"
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:510
#, no-wrap
msgid "Auth0 Well Known Config"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:510
#, no-wrap
msgid "auth0-well-known-config.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:513
msgid "Therefore the other option, indirect access token verification, where the access token is used to acquire `UserInfo` from Auth0 can be used to accept and verify opaque Auth0 tokens. This option works because OIDC providers have to verify access tokens before they can issue `UserInfo` and Auth0 has a `UserInfo` endpoint."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:515
msgid "So lets configure Quarkus to request that the access tokens must be verified by using them to acquite `UserInfo`:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:526
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:737
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:832
#, no-wrap
msgid ""
"# Point to the custom roles claim\n"
"quarkus.oidc.roles.role-claim-path=\"https://quarkus-security.com/roles\"\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:537
#, no-wrap
msgid "quarkus.oidc.token.verify-access-token-with-user-info=true <1>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:539
msgid "Verify access tokens indirectly by using them to request `UserInfo`."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:541
msgid "Update the endpoint code to expect `UserInfo` as opposed to `ID token`:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:553
#, no-wrap
msgid ""
"import io.quarkus.oidc.UserInfo;\n"
"import jakarta.annotation.security.RolesAllowed;\n"
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:559
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:785
#, no-wrap
msgid ""
"    @Inject\n"
"    UserInfo userInfo;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:566
#, no-wrap
msgid ""
"    @GET\n"
"    @RolesAllowed(\"admin\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return \"Hello, \" + userInfo.getName();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:577
msgid "This code will now work both for the authorization code and bearer access token flows."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:579
msgid "Let's go to the OIDC Dev UI where we looked at the access token, enter `/hello` as the `Service Address` in the `Test Service` area and press `With Access Token` and you will get `200`:"
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:580
#, no-wrap
msgid "Auth0 Dev UI Test Access token"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:580
#, no-wrap
msgid "auth0-devui-test-accesstoken-200.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:583
msgid "To confirm that it really does work, update the test endpoint to allow a `user` role only with `@RolesAllowed(\"user\")`. Try to access the endpoint from OIDC Dev UI again, and you will get the HTTP `403` error. Revert the code back to `@RolesAllowed(\"admin\")` to get the reassuring HTTP `200` status again."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:585
msgid "When verifying the opaque access token indirecly, by using it to request `UserInfo`, Quarkus will use `UserInfo` as the source of the roles information, if any. As it happens, Auth0 includes the custom role claim which was created earlier in the `UserInfo` response as well."
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:589
msgid "As has already been mentioned in the introduction to this section, the main goal of this section is to explain how Quarkus can verify opaque access tokens. In general, propagating access tokens whose only purpose is to allow retrieving `UserInfo` to services should be avoided unless the frontend JAX-RS endpoint or SPA prefers to delegate UserInfo retrieval to the trusted service."
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:591
msgid "Please see the following xref:token-propagation[Propagate access tokens to microservices] and xref:jwt-access-tokens[Access tokens in JWT format] sections for a recommended approach of working with Auth0 access tokens."
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:596
msgid "Typically one uses access tokens to access remote services but OIDC DevUI SPA dashboard also offers an option to test with the ID token. This option is only available to emulate the cases where SPA delegates to the endpoint to verify and retrieve some information from the ID token for SPA to use - but ID token will still be sent to the endpoint as Bearer token by OIDC DevUI. Prefer testing with the access token in most cases."
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:602
msgid "You can use SwaggerUI or GraphQL from OIDC DevUI for testing the service, instead of manually entering the service path to test.  For example, if you add"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:609
#, no-wrap
msgid ""
"<dependency>\n"
"   <groupId>io.quarkus</groupId>\n"
"   <artifactId>quarkus-smallrye-openapi</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:612
msgid "to your application's pom then you will see a Swagger link in OIDC Dev UI:"
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:613
#, no-wrap
msgid "Auth0 Dev UI Test with Swagger"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:613
#, no-wrap
msgid "auth0-devui-testservice-swagger.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:616
msgid "Click on the Swagger link and start testing the service."
msgstr ""

#. type: Title ==
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:619
#, no-wrap
msgid "Propagate access tokens to microservices"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:622
msgid "Now that we have managed to use OIDC authorization code flow and used both ID token and UserInfo to access the user information, the next typical task is to propagate the current Auth0 access token to access the downstream service on behalf of the currently authenticated user."
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:624
msgid "In fact, the last code example, showing the injected `UserInfo`, is a concrete example of the access token propagation, in this case, Quarkus propagates the Auth0 access token to the Auth0 `UserInfo` endpoint to acquire `UserInfo`. Quarkus does it without users having to do anything themselves."
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:626
msgid "But what about propagating access tokens to some custom services ? It is very easy to achieve in Quarkus, both for the authorization code and bearer token flows. All you need to do is to create a Reactive REST Client interface for calling the service requiring a Bearer token access and annotate it with `@AccessToken` and the access token arriving to the frontend endpoint as the Auth0 Bearer access token or acquired by Quarkus after completing the Auth0 authorization code flow, will be propagated to the target microservice. This is as easy as it can get."
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:628
msgid "Please see xref:security-openid-connect-client-reference.adoc#reactive-token-propagation[OIDC token propagation] for more information about the token propagation and the following sections in this tutorial for a concrete example."
msgstr ""

#. type: Title ===
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:630
#, no-wrap
msgid "Access tokens in JWT format"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:633
msgid "We have already looked in detail at how Quarkus OIDC can handle xref:opaque-access-tokens[Access Quarkus with opaque Auth0 access tokens], but we don't want to propagate Auth0 opaque tokens to micro services which do something useful on behalf on the currently authenticated user, beyond checking its UserInfo."
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:635
msgid "A microservice which the frontend Quarkus application will access by propagating authorization code flow access tokens to it is represented in the Auth0 dashboard as an `API`. Lets add it in the `Applications/APIs`:"
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:636
#, no-wrap
msgid "Auth0 API"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:636
#, no-wrap
msgid "auth0-api.png"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:639
msgid "The `https://quarkus-auth0` identifier of the created `QuarkusAuth0API` will serve as this API's `audience`. Providing this audience as a query parameter in the authorization code flow redirect to Auth0 will ensure that Auth0 issues access tokens in the JWT format."
msgstr ""

#. type: Title ===
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:640
#, no-wrap
msgid "API microservice"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:643
msgid "Add the following dependencies to the project to support OIDC token propagation and REST clients:"
msgstr ""

#. type: Block title
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:645
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:959
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:655
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-rest-client-reactive-jackson</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"   <groupId>io.quarkus</groupId>\n"
"   <artifactId>quarkus-oidc-token-propagation-reactive</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:658
msgid "Create `ApiEchoService` service class:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:668
#, no-wrap
msgid ""
"import io.quarkus.security.Authenticated;\n"
"import jakarta.ws.rs.POST;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:671
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:862
#, no-wrap
msgid ""
"@Path(\"/echo\")\n"
"public class ApiEchoService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:679
#, no-wrap
msgid ""
"    @POST\n"
"    @Authenticated\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String echoUserName(String username) {\n"
"        return username;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:683
msgid "And configure it as an OIDC `service` application which will only fetch public verification keys from Auth0.  The configuration for this microservice should only have a single line:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:687
#, no-wrap
msgid "quarkus.oidc.auth-server-url=https://dev-3ve0cgn7.us.auth0.com\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:690
msgid "which is all what is needed for the OIDC `service` application to fetch Auth0 public verification keys and use them to verify Auth0 access tokens in JWT format."
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:694
msgid "In this tutorial you have already configured the OIDC `hybrid` application which can handle both authorization code and bearer token authentication flows. In production you will run microservices as separate servers but for the sake of simplicity `ApiEchoService` will not have to be started as a second server with its own configuration containing `quarkus.oidc.auth-server-url=https://dev-3ve0cgn7.us.auth0.com` only, and therefore the current configuration which already has the Auth0 dev tenant address configured will be reused."
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:696
msgid "The `hybrid` OIDC application type will ensure that `http://localhost:8080/hello` requests to `GreetingResource` initiate an Authorization code flow while `http://localhost:8080/echo` requests to `ApiEchoService`, initiated by `GreetingResource`, will lead to the authorization code flow tokens being propagated and accepted by `ApiEchoService` as bearer JWT access tokens."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:699
msgid "Next, add a REST client interface representing `ApiEchoService`:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:708
#, no-wrap
msgid ""
"import jakarta.ws.rs.POST;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:711
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.AccessToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:716
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@AccessToken <1>\n"
"@Path(\"/echo\")\n"
"public interface ApiEchoServiceClient {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:721
#, no-wrap
msgid ""
"    @POST\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    String echoUserName(String username);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:723
msgid "Propagate access token as an HTTP `Authorization: Bearer accesstoken` header"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:725
msgid "And update the configuration for the Quarkus frontend application, `GreetingResource`, which has been created earlier, to request that an authorization code flow access token (as opposed to ID token) includes an `aud` (audience) claim targeting `ApiEchoService`, as well as configure the base URL for the `ApiEchoService` REST client:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:734
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=https://dev-3ve0cgn7.us.auth0.com\n"
"quarkus.oidc.application-type=hybrid\n"
"quarkus.oidc.authentication.scopes=profile\n"
"quarkus.oidc.authentication.extra-params.audience=https://quarkus-auth0 <1>\n"
"quarkus.oidc.client-id=sKQu1dXjHB6r0sra0Y1YCqBZKWXqCkly\n"
"quarkus.oidc.credentials.secret=${client-secret}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:748
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:843
#, no-wrap
msgid "quarkus.oidc.token.verify-access-token-with-user-info=true\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:750
#, no-wrap
msgid "org.acme.ApiEchoServiceClient/mp-rest/url=http://localhost:${port} <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:755
#, no-wrap
msgid ""
"quarkus.test.native-image-profile=test\n"
"%prod.port=8080\n"
"%dev.port=8080\n"
"%test.port=8081\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:758
msgid "Pass an extra `audience` query parameter to the Auth0 authorization endpoint during the authorization code flow redirect from Quarkus to Auth0.  It will ensure that the access token is issued in the JWT format and includes an `aud` (audience) claim which will contain `https://quarkus-auth0`."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:759
msgid "Point `ApiEchoServiceClient` to the `ApiEchoService` endpoint. HTTP port in the `org.acme.ApiEchoServiceClient/mp-rest/url=http://localhost:${port}` property is parameterized to ensure the correct URL is built in dev, test and prod modes."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:761
msgid "Finally update `GreetingResource` to request that `ApiEchoService` echoes a user name:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:774
#, no-wrap
msgid ""
"import io.quarkus.oidc.UserInfo;\n"
"import io.quarkus.security.Authenticated;\n"
"import jakarta.annotation.security.RolesAllowed;\n"
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:776
#, no-wrap
msgid "import org.eclipse.microprofile.rest.client.inject.RestClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:782
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"public class GreetingResource {\n"
"    @Inject\n"
"    @RestClient\n"
"    ApiEchoServiceClient echoClient; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:792
#, no-wrap
msgid ""
"    @GET\n"
"    @RolesAllowed(\"admin\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return \"Hello, \" + echoClient.echoUserName(userInfo.getName()); <2>\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:802
msgid "Inject `ApiEchoServiceClient` REST client"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:803
msgid "Use `ApiEchoServiceClient` to echo the user name."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:805
msgid "Open a browser, access http://localhost:8080/hello and get your name displayed in the browser."
msgstr ""

#. type: Title ===
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:807
#, no-wrap
msgid "Permission Based Access Control"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:810
msgid "We have discussed in the xref:role-based-access-control[Role Based Access Control] section how to get Quarkus to check a namespace qualified claim containing user roles and use this information to enforce Role Based Access Control. You have configured Auth0 to add the custom roles claim to both ID and access tokens."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:812
msgid "However, Permission Based Access Control is better suited to the case where an access token is propagated by the frontend endpoint to a microservice which will check if a given access token has been authorized for this service to perform a concrete action, as opposed to this token vouching for a user be in a specific role. For example, being in the admin role does not necessarily mean the user is allowed to have a read and write access to some of this microservice's content."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:814
msgid "Let's see how Permission Based Access Control constraints can be applied to `ApiEchoService`."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:816
msgid "Go to the Auth0 dashboard, add an `echo:name` permission to the `QuarkusAuth0API` API:"
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:817
#, no-wrap
msgid "Auth0 API permissions"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:817
#, no-wrap
msgid "auth0-api-permissions.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:820
msgid "The `echo:name` permission will be included in the access token as a standard OAuth2 `scope` claim value if this scope will also be requested during the authorization code flow. Update the configuration as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:829
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=https://dev-3ve0cgn7.us.auth0.com\n"
"quarkus.oidc.application-type=hybrid\n"
"quarkus.oidc.authentication.scopes=profile,echo:name <1>\n"
"quarkus.oidc.authentication.extra-params.audience=https://quarkus-auth0\n"
"quarkus.oidc.client-id=sKQu1dXjHB6r0sra0Y1YCqBZKWXqCkly\n"
"quarkus.oidc.credentials.secret=${client-secret}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:845
#, no-wrap
msgid "org.acme.ApiEchoServiceClient/mp-rest/url=http://localhost:8080\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:847
msgid "An extra `echo:name` scope will be requested during the authorization code flow."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:849
msgid "Now update `ApiEchoService` to enforce Permission Based Access Control:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:859
#, no-wrap
msgid ""
"import io.quarkus.security.PermissionsAllowed;\n"
"import jakarta.ws.rs.POST;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:870
#, no-wrap
msgid ""
"    @POST\n"
"    @PermissionsAllowed(\"echo:name\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    String echoUserName(String username) {\n"
"        return username;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:873
msgid "This is all what is needed as Quarkus OIDC automatically associates `scope` claim values as permissions with the current security identity."
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:877
msgid "You can enforce both Role Based and Permission Based Access Controls in Quarkus by combining `@RolesAllowed` and `@PermissionsAllowed` annotations."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:880
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:1053
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:1074
msgid "Open a browser, access http://localhost:8080/hello and get the name displayed in the browser."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:882
msgid "To confirm the permission is correctly enforced, change it to `echo.name`: `@PermissionsAllowed(\"echo.name\")`. Clear the browser cache, access http://localhost:8080/hello again and you will get `403` reported by `ApiEchoService`. Now revert it back to `@PermissionsAllowed(\"echo:name\")`."
msgstr ""

#. type: Title ==
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:883
#, no-wrap
msgid "Integration testing"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:886
msgid "You have already used OIDC DevUI SPA to login to Auth0 and test the Quarkus endpoint with the access token, updating the endpoint code along the way."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:888
msgid "However, running tests is also essential, lets see how we can test the endpoint and configuration which you have developed during the course of this tutorial, using xref:continuous-testing.adoc[Quarkus Continuous Testing] feature."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:890
msgid "Start with the following test code :"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:897
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:900
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:984
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.CoreMatchers.is;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:903
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:995
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class GreetingResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:912
#, no-wrap
msgid ""
"    @Test\n"
"    public void testHelloEndpoint() {\n"
"        given()\n"
"          .when().get(\"/hello\")\n"
"          .then()\n"
"             .statusCode(200)\n"
"             .body(is(\"Hello, Sergey Beryozkin\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:914
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:917
msgid "If you recall, when the application was started in devmode, the following could be seen in the CLI window:"
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:918
#, no-wrap
msgid "Auth0 DevMode started"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:918
#, no-wrap
msgid "auth0-devmode-started.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:921
msgid "Press `r` and notice this test failing with `403` which is expected because the test does not send a token to the endpoint:"
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:922
#, no-wrap
msgid "Auth0 test failure 403"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:922
#, no-wrap
msgid "auth0-test-failure-403.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:925
msgid "Before fixing the test, let's review the options available for testing Quarkus endpoints secured by OIDC. These options may vary depending on what flow your application supports and how you prefer to test. Endpoints which use OIDC authorization code flow can be tested using xref:security-oidc-code-flow-authentication#integration-testing[one of these options] and endpoints which use Bearer token authentication can be tested using xref:security-oidc-bearer-token-authentication#integration-testing[one of these options]."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:927
msgid "As you can see, testing of the endpoints secured with Auth0 can be done with the help of `Wiremock`, or `@TestSecurity` annotation. Please experiment with writing such tests on your own and reach out if you encounter any problems."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:929
msgid "In this tutorial though, we will use a recently added `OidcTestClient` to support testing endpoints which use live Auth0 development tenants."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:931
msgid "Here is a related fragment of the configuration:"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:942
msgid "In production, you will distinguish between prod and test level configuration with `%prod.` and `%test.` qualifiers. Lets assume that the above configuration will indeed be prefixed with `%test.` in your real application, with this configuration also including the `%prod.` qualified Auth0 production tenant configuration."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:944
msgid "Using `OidcTestClient` to test such configuration requires acquiring a token from the Auth0 dev tenant, using either OAuth2 `password` or `client_credentials` grant, we will try a `password` grant. Make sure the application registered in the Auth0 dashboard allows the `password` grant:"
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:945
#, no-wrap
msgid "Auth0 password grant"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:945
#, no-wrap
msgid "auth0-password-grant.png"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:950
msgid "It is important to clarify that we do not recommend using the deprecated OAuth2 `password` token grant in production. However using it can help testing the endpoint with tokens acquired from the live dev Auth0 tenant."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:953
msgid "`OidcTestClient` should be used to test applications accepting bearer tokens which will work for the endpoint developed in this tutorial as it supports both authorization code flow and bearer token authentication. You would need to use OIDC WireMock or `HtmlUnit` directly against the Auth0 dev tenant if only the authorization code flow was supported - in the latter case `HtmlUnit` test code would have to be aligned with how Auth0 challenges users to enter their credentials - please copy and paste an xref:security-oidc-code-flow-authentication#integration-testing-wiremock[HtmlUnit test fragment] from the documentation and experiment if you would like."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:955
msgid "In meantime we will now proceed with fixing the currently failing test using `OidcTestClient`."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:957
msgid "First you must add the following dependency:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:966
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-oidc-server</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:969
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:972
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-test-oidc-server\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:975
msgid "which provides a utility class `io.quarkus.test.oidc.client.OidcTestClient` which can be used in tests for acquiring access tokens (This dependency also offers an OIDC WireMock support - please review the documentation how to use it for testing if you would like)."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:977
msgid "Now update the test code like this:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:986
#, no-wrap
msgid "import java.util.Map;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:989
#, no-wrap
msgid ""
"import org.junit.jupiter.api.AfterAll;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:992
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.oidc.client.OidcTestClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:997
#, no-wrap
msgid "    static OidcTestClient oidcTestClient = new OidcTestClient();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:1002
#, no-wrap
msgid ""
"    @AfterAll\n"
"    public static void close() {\n"
"        client.close();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:1012
#, no-wrap
msgid ""
"    @Test\n"
"    public void testHelloEndpoint() {\n"
"        given()\n"
"          .auth().oauth2(getAccessToken(`sberyozkin@gmail.com`, \"userpassword\"))\n"
"          .when().get(\"/hello\")\n"
"          .then()\n"
"             .statusCode(200)\n"
"             .body(is(\"Hello, Sergey Beryozkin\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:1019
#, no-wrap
msgid ""
"    private String getAccessToken(String name, String secret) {\n"
"        return oidcTestClient.getAccessToken(name, secret, <1>\n"
"            Map.of(\"audience\", \"https://quarkus-auth0\",\n"
"\t           \"scope\", \"openid profile\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:1021
msgid "`OidcTestClient` is used to acquire an access token, using one of the registered user's name and password, as well as the `audience` and `scope` parameters."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:1023
msgid "`OidcTestClient` will itself find out the `Auth0` token endpoint address, client id and secret."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:1025
msgid "Press `r` again and have the test passing:"
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:1026
#, no-wrap
msgid "Auth0 test success"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:1026
#, no-wrap
msgid "auth0-test-success.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:1029
msgid "By the way, if you would like you can run the tests in Continuous mode directly from DevUI:"
msgstr ""

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:1030
#, no-wrap
msgid "Auth0 Continuous testing"
msgstr ""

#. type: Target for macro image
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:1030
#, no-wrap
msgid "auth0-continuous-testing.png"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:1033
#, no-wrap
msgid "Production mode"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:1038
msgid "You have developed and tested the Quarkus endpoint secured with Auth0 in the development mode.  The next step is to run your application in the production mode.  Choose between JVM and native modes."
msgstr ""

#. type: Title ===
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:1039
#, no-wrap
msgid "Run the Application in JVM mode"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:1042
msgid "Compile the application:"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:1046
msgid "Run the application:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:1050
#, no-wrap
msgid "java -jar target/quarkus-app/quarkus-run.jar\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:1054
#, no-wrap
msgid "Run the application in native mode"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:1059
msgid "You can compile this same demo into native mode without needing any modifications.  This implies that you no longer need to install a JVM on your production environment.  The runtime technology is included in the produced binary and optimized to run with minimal resources required."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:1061
msgid "Compilation takes a bit longer, so this step is disabled by default."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:1063
msgid "Build your application again by enabling the `native` profile:"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:1067
msgid "Next run the following binary directly:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:1071
#, no-wrap
msgid "./target/quarkus-auth0-1.0.0-SNAPSHOT-runner\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:1075
#, no-wrap
msgid "Troubleshooting"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:1078
msgid "The steps described in this tutorial should work exactly as the tutorial describes. You may have to clear the browser cookies when accessing the updated Quarkus endpoint if you have already completed the authentication. You might need to restart the Quarkus application manually in devmode but it is not expected. Please get in touch with the Quarkus team if you need help completing this tutorial."
msgstr ""

#. type: Title ==
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:1079
#, no-wrap
msgid "Summary"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:1088
msgid "This tutorial demonstrated how Quarkus endpoints can be secured with the `quarkus-oidc` extension and Auth0 using Authorization code and Bearer token authentication flows, with both flows being supported by the same endpoint code.  Without writing a single line of code, you have added support for the custom Auth0 logout flow and enabled role-based access control with a custom Auth0 namespace qualified claim.  Token propagation from the frontend endpoint to the microservice endpoint has been achieved by adding the `@AccessToken` annotation to the microservice REST client.  Microservice endpoint activated the permission-based access control with the `@PermissionsAllowed` annotation.  You used Quarkus dev mode to update the code and configuration without restarting the endpoint, and you also used the OIDC Dev UI to visualize and test Auth0 tokens.  You used the continuous testing feature of Quarkus to complement OIDC Dev UI tests with integration tests against the live Auth0 development tenant.  Finally, you have run the application in JVM and native modes."
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:1090
msgid "Enjoy!"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:1091
#, no-wrap
msgid "References"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:1093
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:1094
msgid "xref:security-oidc-code-flow-authentication.adoc[OIDC code flow mechanism for protecting web applications]"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-oidc-auth0-tutorial.adoc:1094
msgid "xref:security-openid-connect-providers.adoc[Configuring well-known OpenID Connect providers]"
msgstr ""
