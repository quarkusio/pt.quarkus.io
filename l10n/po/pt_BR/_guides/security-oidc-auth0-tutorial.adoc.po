# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-29 08:10+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy, no-wrap
msgid "Protect Quarkus web application by using an Auth0 OpenID Connect provider"
msgstr "Proteja o aplicativo da Web Quarkus usando um provedor Auth0 OpenID Connect"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "xref:security-architecture.adoc[Quarkus Security] provides comprehensive OpenId Connect (OIDC) and OAuth2 support with its `quarkus-oidc` extension, supporting both xref:security-oidc-code-flow-authentication.adoc[Authorization code flow] and xref:security-oidc-bearer-token-authentication.adoc[Bearer token] authentication mechanisms."
msgstr "link:security-architecture.html[A Quarkus Security] oferece suporte abrangente ao OpenId Connect (OIDC) e ao OAuth2 com sua extensão `quarkus-oidc`, suportando tanto o  link:security-oidc-code-flow-authentication.html[fluxo de código de autorização] quanto os mecanismos de autenticação  link:security-oidc-bearer-token-authentication.html[de token de portador]."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "With Quarkus, you can easily configure OIDC providers such as link:https://www.keycloak.org/documentation[Keycloak], link:https://developer.okta.com/[Okta], link:https://auth0.com/docs/[Auth0], and other xref:security-openid-connect-providers.adoc[well-known social OIDC and OAuth2 providers]."
msgstr "Com o Quarkus, você pode configurar facilmente provedores de OIDC, como  link:https://www.keycloak.org/documentation[Keycloak],  link:https://developer.okta.com/[Okta],  link:https://auth0.com/docs/[Auth0] e outros  link:security-openid-connect-providers.html[provedores de OIDC social e OAuth2 bem conhecidos]."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Learn how to use the Quarkus OpenID Connect extension (`quarkus-oidc`) together with the https://auth0.com/docs/[Auth0] OIDC provider to protect your API endpoints."
msgstr "Saiba como usar a extensão Quarkus OpenID Connect ( `quarkus-oidc`) junto com o provedor  link:https://auth0.com/docs/[Auth0] OIDC para proteger seus endpoints de API."

#. type: Title ==
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy, no-wrap
msgid "Prerequisites"
msgstr "Pré-requisitos"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Please review the following documentation before you begin:"
msgstr "Leia a documentação a seguir antes de começar:"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "link:https://auth0.com/docs/[Auth0 docs site]"
msgstr "link:https://auth0.com/docs/[Site de documentos do Auth0]"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "xref:security-oidc-code-flow-authentication.adoc[Quarkus OpenID Connect Authorization code flow mechanism for protecting web applications]"
msgstr "link:security-oidc-code-flow-authentication.html[Mecanismo de fluxo de código de autorização do Quarkus OpenID Connect para proteger aplicativos da Web]"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "xref:security-oidc-bearer-token-authentication.adoc[Quarkus OpenID Connect (OIDC) Bearer token authentication]"
msgstr "link:security-oidc-bearer-token-authentication.html[Autenticação de token de portador do Quarkus OpenID Connect (OIDC)]"

#. type: Title ==
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy, no-wrap
msgid "Create an Auth0 application"
msgstr "Criar um aplicativo Auth0"

#: _guides/security-oidc-auth0-tutorial.adoc
msgid ""
"Go to the Auth0 dashboard and create a regular web application.\n"
"For example, create an Auth0 application called `QuarkusAuth0`."
msgstr ""

#. type: Block title
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy, no-wrap
msgid "Result"
msgstr "Resultado"

#: _guides/security-oidc-auth0-tutorial.adoc
msgid ""
"Your Auth0 application gets created with a client ID, secret, and HTTPS-based domain.\n"
"Make a note of these properties because you will need them to complete the Quarkus configuration in the next step."
msgstr ""

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Next, while still in the Auth0 dashboard, add some users to your application."
msgstr "Em seguida, ainda no painel do Auth0, adicione alguns usuários ao seu aplicativo."

#: _guides/security-oidc-auth0-tutorial.adoc
msgid ""
"Now that you have successfully created and configured your Auth0 application, you are ready to start creating and configuring a Quarkus endpoint.\n"
"In the steps that follow, you will continue to configure and update the Auth0 application as well."
msgstr ""

#. type: Title ==
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy, no-wrap
msgid "Create a Quarkus application"
msgstr "Criar um aplicativo Quarkus"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Use the following Maven command to create a Quarkus RESTEasy Reactive application that can be secured with the Quarkus OIDC extension."
msgstr "Use o seguinte comando Maven para criar um aplicativo Quarkus RESTEasy Reactive que possa ser protegido com a extensão Quarkus OIDC."

#: _guides/security-oidc-auth0-tutorial.adoc
msgid ""
"Create the application workspace and import it into your favorite IDE.\n"
"Let's add a Jakarta REST endpoint that can only be accessed by authenticated users:"
msgstr ""

#: _guides/security-oidc-auth0-tutorial.adoc
msgid ""
"The injected `JsonWebToken` (JWT) bean has an `@IdToken` qualifier, which means it represents not an access token but OIDC `ID token`.\n"
"`IdToken` provides information in the form of claims about the current user authenticated during the OIDC authorization code flow and you can use `JsonWebToken` API to access these claims."
msgstr ""

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "The `io.quarkus.security.Authenticated` annotation is added to the `hello()` method, which means that only authenticated users can access it."
msgstr "A anotação `io.quarkus.security.Authenticated` é adicionada ao método `hello()`, o que significa que somente usuários autenticados podem acessá-lo."

#: _guides/security-oidc-auth0-tutorial.adoc
msgid ""
"The access token acquired during the authorization code flow, alongside the ID token, is not used directly by the endpoint but is used only to access downstream services on behalf of the currently authenticated user.\n"
"More to come on the topic of \"access tokens\", later in this tutorial."
msgstr ""

#: _guides/security-oidc-auth0-tutorial.adoc
msgid "Configure OIDC in the Quarkus `application.properties` file  by using the properties from the Auth0 application that you created earlier."
msgstr ""

#: _guides/security-oidc-auth0-tutorial.adoc
msgid ""
"In completing this step, you have just configured Quarkus to use the domain, client ID, and secret of your Auth0 application.\n"
"Setting the property `quarkus.oidc.application-type=web-app` instructs Quarkus to use the OIDC authorization code flow, but there are also other methods, which are discussed later on in the tutorial."
msgstr ""

#: _guides/security-oidc-auth0-tutorial.adoc
msgid "The endpoint address will be  \\http://localhost:8080/hello, which must also be registered as an allowed callback URL in your Auth0 application."
msgstr ""

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "After completing this step, when you access the Quarkus \\http://localhost:8080/hello endpoint from a browser, Auth0 redirects you back to the same address after the authentication is completed."
msgstr "Depois de concluir essa etapa, quando você acessa o ponto de extremidade do Quarkus http://localhost:8080/hello em um navegador, o Auth0 o redireciona para o mesmo endereço depois que a autenticação é concluída."

#: _guides/security-oidc-auth0-tutorial.adoc
msgid ""
"By default, Quarkus automatically uses the current request path as the callback path.\n"
"But you can override the default behavior and configure a specific callback path by setting the Quarkus `quarkus.oidc.authentication.redirect-path` property."
msgstr ""

#: _guides/security-oidc-auth0-tutorial.adoc
msgid ""
"In production, your application will most likely have a larger URL space, with multiple endpoint addresses available.\n"
"In such cases, you can set a dedicated callback (redirect) path and register this URL in the provider's dashboard, as outlined in the following configuration example:"
msgstr ""

#. type: delimited block =
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "`quarkus.oidc.authentication.redirect-path=/authenticated-welcome`"
msgstr "`quarkus.oidc.authentication.redirect-path=/authenticated-welcome`"

#: _guides/security-oidc-auth0-tutorial.adoc
msgid ""
"In the example scenario, Quarkus calls `/authenticated-welcome` after accepting a redirect from Auth0, completing the authorization code flow,  and creating the session cookie.\n"
"Successfully authenticated users are also allowed to access other parts of the secured application space, without needing to authenticate again. For example, the endpoint callback method can use a JAX-RS API to redirect users to other parts of the secured application where a session cookie will be verified."
msgstr ""

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Now you are ready to start testing the endpoint."
msgstr "Agora você está pronto para começar a testar o endpoint."

#. type: Title ==
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy, no-wrap
msgid "Test the Quarkus endpoint"
msgstr "Teste o ponto de extremidade do Quarkus"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Start Quarkus in dev mode:"
msgstr "Inicie o Quarkus no modo de desenvolvimento:"

#: _guides/security-oidc-auth0-tutorial.adoc
msgid ""
"This is the only time during this tutorial when you are expected to manually start Quarkus in dev mode.\n"
"The configuration and code update steps in the remaining sections of this tutorial are automatically observed and processed by Quarkus without you needing to restart the application manually."
msgstr ""

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Open the browser and access http://localhost:8080/hello."
msgstr "Abra o navegador e acesse  http://localhost:8080/hello"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "You will be redirected to Auth0 and prompted to log in:"
msgstr "Você será redirecionado para o Auth0 e será solicitado a fazer login:"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "and authorize the `QuarkusAuth0` application to access your account:"
msgstr "e autorizar o aplicativo `QuarkusAuth0` a acessar sua conta:"

#: _guides/security-oidc-auth0-tutorial.adoc
msgid ""
"Finally, you will be redirected back to the Quarkus endpoint which will return the following response:\n"
"`Hello, auth0|60e5a305e8da5a006aef5471`"
msgstr ""

#: _guides/security-oidc-auth0-tutorial.adoc
msgid ""
"Notice that the current username does not get returned.\n"
"To learn more about why this behavior occurs, you can use OIDC Dev UI as explained in the xref:security-openid-connect-dev-services.adoc#dev-ui-all-oidc-providers[Dev UI for all OpenID Connect Providers] section of the \"Dev Services and UI for OpenID Connect (OIDC)\" guide and the following section."
msgstr ""

#. type: Title ==
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy, no-wrap
msgid "Looking at Auth0 tokens in the OIDC Dev UI"
msgstr "Analisando os tokens Auth0 na interface de desenvolvimento do OIDC"

#: _guides/security-oidc-auth0-tutorial.adoc
msgid ""
"Quarkus provides a great xref:dev-ui-v2.adoc[Dev UI] experience.\n"
"Specifically, Quarkus offers built-in support for developing and testing OIDC endpoints with a Keycloak container.\n"
"xref:security-openid-connect-dev-services.adoc#dev-services-for-keycloak[DevService for Keycloak] is automatically started and used if the address of the OIDC provider is not specified for the Quarkus `quarkus.oidc.auth-server-url` configuration property."
msgstr ""

#: _guides/security-oidc-auth0-tutorial.adoc
msgid ""
"You can continue using the Quarkus OIDC Dev UI when the provider is already configured.\n"
"Use the following instructions to update your configuration:"
msgstr ""

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "First, change your Quarkus application type from `web-app` to `hybrid`, as follows:"
msgstr "Primeiro, altere o tipo de aplicativo Quarkus de `web-app` para `hybrid`, da seguinte forma:"

#: _guides/security-oidc-auth0-tutorial.adoc
msgid ""
"Application type is changed to `hybrid` because OIDC Dev UI currently supports `SPA` (single-page application) mode only.\n"
"OIDC Dev UI single-page application, using its own Java Script, authenticates users to the OIDC provider and uses the access token as a Bearer token to access the Quarkus endpoint as a service."
msgstr ""

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Typically, Quarkus must be configured with `quarkus.oidc.application-type=service` to support `Bearer` token authentication, but it also supports a `hybrid` application type, which means it can support both the authorization code and bearer token flows at the same time."
msgstr "Normalmente, o Quarkus deve ser configurado com `quarkus.oidc.application-type=service` para oferecer suporte à autenticação de token `Bearer`, mas também oferece suporte a um tipo de aplicativo `hybrid`, o que significa que ele pode oferecer suporte aos fluxos de código de autorização e de token de portador ao mesmo tempo."

#: _guides/security-oidc-auth0-tutorial.adoc
msgid ""
"You also need to configure the Auth0 application to allow the callbacks to the OIDC Dev UI.\n"
"Use the following URL format:"
msgstr ""

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "`http://localhost:8080/q/dev-ui/io.quarkus.quarkus-oidc/${provider-name}-provider`"
msgstr "`&lt;a href=\"http://localhost:8080/q/dev-ui/io.quarkus.quarkus-oidc/${provider-name}-provider\" class=\"bare\"&gt;http://localhost:8080/q/dev-ui/io.quarkus.quarkus-oidc/${provider-name}-provider&lt;/a&gt;`"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Where in this example, the `${provider-name}` is `auth0`"
msgstr "Neste exemplo, o site `${provider-name}` é `auth0`"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Now you are ready to use OIDC Dev UI with Auth0."
msgstr "Agora você está pronto para usar o OIDC Dev UI com o Auth0."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Open http://localhost:8080/q/dev/ in a browser session. An OpenId Connect card that links to an Auth0 provider SPA displays, as follows:"
msgstr "Abra o site  http://localhost:8080/q/dev/  em uma sessão do navegador. Um cartão OpenId Connect vinculado a um SPA do provedor Auth0 é exibido, como segue:"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Click *Auth0 provider* followed by *Login into Single Page Application*:"
msgstr "Clique no *provedor Auth0* seguido de *Login no aplicativo de página única*:"

#: _guides/security-oidc-auth0-tutorial.adoc
msgid ""
"You will be redirected to Auth0 to log in.\n"
"You will then be redirected to the OIDC Dev UI dashboard, as follows:"
msgstr ""

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Here you can look at both ID and access tokens in the encoded and decoded formats, copy them to the clipboard or use them to test the service endpoint. We will test the endpoint later but for now let's check the ID token:"
msgstr "Aqui você pode ver os tokens de ID e de acesso nos formatos codificado e decodificado, copiá-los para a área de transferência ou usá-los para testar o ponto de extremidade do serviço. Testaremos o endpoint mais tarde, mas, por enquanto, vamos verificar o token de ID:"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "As you can see it does not have any claim representing a user name but if you check its `sub` (subject) claim you will see its value matches what you got in the response when you accessed the Quarkus endpoint directly from the browser, `auth0|60e5a305e8da5a006aef5471`."
msgstr "Como você pode ver, ele não tem nenhuma reivindicação que represente um nome de usuário, mas se você verificar a reivindicação `sub` (subject), verá que o valor corresponde ao que você obteve na resposta quando acessou o endpoint do Quarkus diretamente do navegador, `auth0|60e5a305e8da5a006aef5471`."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Fix it by configuring Quarkus to request a standard OIDC `profile` scope during the authentication process which should result in the ID token including more information:"
msgstr "Para corrigi-lo, configure o Quarkus para solicitar um escopo padrão do OIDC `profile` durante o processo de autenticação, o que deve resultar em um token de ID que inclua mais informações:"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Request `profile` scope in addition to the default `openid` scope."
msgstr "Solicite o escopo `profile` além do escopo padrão `openid`."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Go back to http://localhost:8080/q/dev/, repeat the process of logging in to `Auth0` and check the ID token again, now you should see the ID token containing the `name` claim:"
msgstr "Volte para  http://localhost:8080/q/dev/  repita o processo de login em `Auth0` e verifique o token de ID novamente. Agora você deve ver o token de ID que contém a reivindicação de `name`:"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "You should get the name when you access the Quarkus endpoint directly from the browser. Clear the browser cookie cache, access http://localhost:8080/hello and yet again, you get `Hello, auth0|60e5a305e8da5a006aef5471` returned. Hmm, what is wrong ?"
msgstr "Você deve obter o nome ao acessar o ponto de extremidade do Quarkus diretamente do navegador. Limpe o cache de cookies do navegador, acesse  http://localhost:8080/hello  e, mais uma vez, você receberá o retorno de `Hello, auth0|60e5a305e8da5a006aef5471`. O que está errado?"

#: _guides/security-oidc-auth0-tutorial.adoc
msgid "The answer lies with the specifics of the `org.eclipse.microprofile.jwt.JsonWebToken#getName()` implementation, which, according to the https://github.com/eclipse/microprofile-jwt-auth[MicroProfile MP JWT RBAC  specification], checks an MP JWT specific `upn` claim, trying `preferred_username` next and finally `sub` which explains why you get the `Hello, auth0|60e5a305e8da5a006aef5471` answer even with the ID token containing the `name` claim. We can fix it easily by changing the endpoint `hello()` method's implementation to return a specific claim value:"
msgstr ""

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Now clear the browser cache, access http://localhost:8080/hello and finally the user name is returned."
msgstr "Agora, limpe o cache do navegador, acesse  http://localhost:8080/hello  e, por fim, o nome de usuário será retornado."

#. type: Title ==
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy, no-wrap
msgid "Logout support"
msgstr "Suporte para logout"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Now that you have the users signing in to Quarkus with the help from Auth0, you will likely would like to support a user initiated logout. Quarkus supports https://quarkus.io/guides/security-oidc-code-flow-authentication#logout-and-expiration[RP-initiated and other standard OIDC logout mechanisms, as well as the local session logout]."
msgstr "Agora que os usuários estão fazendo login no Quarkus com a ajuda do Auth0, você provavelmente gostaria de oferecer suporte a um logout iniciado pelo usuário. O Quarkus suporta  link:https://quarkus.io/guides/security-oidc-code-flow-authentication#logout-and-expiration[mecanismos de logout iniciados por RP e outros mecanismos padrão do OIDC, bem como o logout da sessão local]."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Currently, Auth0 does not support the standard OIDC RP-initiated logout and does not provide an end session endpoint URL in its discoverable metadata, but it provides its own logout mechanism which works nearly exactly the same as the standard one."
msgstr "Atualmente, o Auth0 não é compatível com o logout padrão iniciado por RP do OIDC e não fornece um URL de ponto de extremidade de sessão final em seus metadados detectáveis, mas fornece seu próprio mecanismo de logout que funciona quase exatamente da mesma forma que o padrão."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "It is easy to support it with Quarkus OIDC. You must configure an Auth0 end session endpoint URL and have Quarkus include both the `client-id` query parameter and the post logout URL as the `returnTo` query parameter in the RP-initated logout redirect request to Auth0:"
msgstr "É fácil dar suporte a isso com o Quarkus OIDC. Você deve configurar um URL de ponto de extremidade de sessão final Auth0 e fazer com que o Quarkus inclua o parâmetro de consulta `client-id` e o URL de pós-logout como o parâmetro de consulta `returnTo` na solicitação de redirecionamento de logout iniciada por RP para Auth0:"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Auth0 does not include the end session URL in its metadata, so complement it with manually configuring the Auth0 end session endpoint URL."
msgstr "O Auth0 não inclui o URL da sessão final em seus metadados, portanto, complemente-o configurando manualmente o URL do ponto final da sessão final do Auth0."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Auth0 will not recognize a standard `post_logout_redirect_uri` query parameter and expects a parameter `returnTo` instead."
msgstr "O Auth0 não reconhecerá um parâmetro de consulta padrão `post_logout_redirect_uri` e, em vez disso, espera um parâmetro `returnTo`."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Auth0 expects `client-id` in the logout request."
msgstr "Auth0 espera `client-id` na solicitação de logout."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Authenticated requests to `/logout` path will be treated as RP-inititated logout requests."
msgstr "As solicitações autenticadas para o caminho `/logout` serão tratadas como solicitações de logout iniciadas pelo RP."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "This is a public resource to where the logged out user should be returned to."
msgstr "Esse é um recurso público para o qual o usuário desconectado deve retornar."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Make sure the `/logout` path is protected."
msgstr "Certifique-se de que o caminho `/logout` esteja protegido."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Here we have customized the Auth0 end session endpoint URL and indicated to Quarkus that an `http://localhost:8080/logout` request must trigger a logout of the currently authenticated user. An interesting thing about the `/logout` path is that it is `virtual`, it is not supported by any method in the JAX-RS endpoint, so for Quarkus OIDC to be able to react to `/logout` requests we attach an `authenticated` https://quarkus.io/guides/security-authorize-web-endpoints-reference#authorization-using-configuration[HTTP security policy] to this path directly in the configuration."
msgstr "Aqui, personalizamos o URL do ponto final da sessão Auth0 e indicamos ao Quarkus que uma solicitação `&lt;a href=\"http://localhost:8080/logout\" class=\"bare\"&gt;http://localhost:8080/logout&lt;/a&gt;` deve acionar um logout do usuário autenticado no momento. Um aspecto interessante do caminho `/logout` é que ele é `virtual`, não é suportado por nenhum método no ponto de extremidade JAX-RS, portanto, para que o Quarkus OIDC possa reagir às solicitações `/logout`, anexamos uma  link:https://quarkus.io/guides/security-authorize-web-endpoints-reference#authorization-using-configuration[política de segurança HTTP] `authenticated` a esse caminho diretamente na configuração."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "We also have configured Quarkus to return the logged out user to the public `/hello/post-logout` resource, and this path is included in the logout request as the Auth0 specific `returnTo` query parameter. Finally, the Quarkus application's `client-id` is included in the logout URL as well."
msgstr "Também configuramos o Quarkus para retornar o usuário desconectado ao recurso público `/hello/post-logout`, e esse caminho está incluído na solicitação de logout como parâmetro de consulta `returnTo` específico do Auth0. Por fim, o endereço `client-id` do aplicativo Quarkus também está incluído no URL de logout."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Update the endpoint to accept the post logout redirects:"
msgstr "Atualize o ponto de extremidade para aceitar os redirecionamentos pós-logout:"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Note the addition of the public `/hello/post-logout` resource method."
msgstr "Observe a adição do método de recurso público `/hello/post-logout`."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Before we test the logout, make sure the `Auth0` application is configured to allow this post logout redirect back to Quarkus after the user has been logged out:"
msgstr "Antes de testarmos o logout, certifique-se de que o aplicativo `Auth0` esteja configurado para permitir esse redirecionamento pós-logout de volta ao Quarkus depois que o usuário tiver efetuado o logout:"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Now, clear the browser cookie cache, access http://localhost:8080/hello, login to Quarkus with Auth0, get the user name returned, and go to `http://localhost:8080/logout`. You'll see the `You were logged out` message displayed in the browser."
msgstr "Agora, limpe o cache de cookies do navegador, acesse  http://localhost:8080/hello  faça login no Quarkus com Auth0, obtenha o nome de usuário retornado e vá para `&lt;a href=\"http://localhost:8080/logout\" class=\"bare\"&gt;http://localhost:8080/logout&lt;/a&gt;`. Você verá a mensagem `You were logged out` exibida no navegador."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Next, go to the http://localhost:8080/q/dev/, login to Auth0 from the Dev UI SPA and notice you can now logout from the OIDC Dev UI too, see the symbol representing the logout next to the `Logged in as Sergey Beryozkin` text:"
msgstr "Em seguida, acesse  http://localhost:8080/q/dev/  faça login no Auth0 a partir do SPA da interface de desenvolvimento e observe que agora você também pode fazer logout a partir da interface de desenvolvimento do OIDC. Veja o símbolo que representa o logout ao lado do texto `Logged in as Sergey Beryozkin`:"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "For the logout to work from OIDC DevUI, the Auth0 application's list of allowed logout callbacks has to be updated to include the OIDC DevUI endpoint:"
msgstr "Para que o logout funcione a partir da OIDC DevUI, a lista de retornos de chamada de logout permitidos do aplicativo Auth0 deve ser atualizada para incluir o ponto de extremidade da OIDC DevUI:"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Now logout directly from OIDC Dev UI and login as a new user - add more users to the registered Auth0 application if required."
msgstr "Agora, faça logout diretamente da interface de usuário do OIDC Dev e faça login como um novo usuário - adicione mais usuários ao aplicativo Auth0 registrado, se necessário."

#. type: Title ==
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy, no-wrap
msgid "Role Based Access Control"
msgstr "Controle de acesso baseado em função"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "We have confirmed that the Quarkus endpoint can be accessed by users who have authenticated with the help of `Auth0`."
msgstr "Confirmamos que o ponto de extremidade do Quarkus pode ser acessado por usuários que se autenticaram com a ajuda do site `Auth0`."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "The next step is to introduce Role Based Access Control (RBAC) to have users in a specific role only, such as `admin`, be able to access the endpoint."
msgstr "A próxima etapa é introduzir o RBAC (Role Based Access Control, controle de acesso baseado em função) para que apenas usuários com uma função específica, como `admin`, possam acessar o endpoint."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "See also the xref:permission-based-access-control[Permission Based Access Control] section below."
msgstr "Consulte também a seção  link:#permission-based-access-control[Controle de acesso baseado em permissão] abaixo."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Auth0 tokens do not include any claims containing roles by default, so, first, you must customize the `Login` flow of the `Auth0` application with a custom action which will add the roles to tokens. Select `Actions/Flows/Login` in the `Auth0` dashboard, choose `Add Action/Build Custom`, name it as `AddRoleClaim`:"
msgstr "Os tokens Auth0 não incluem nenhuma reivindicação que contenha funções por padrão, portanto, primeiro, você deve personalizar o fluxo `Login` do aplicativo `Auth0` com uma ação personalizada que adicionará as funções aos tokens. Selecione `Actions/Flows/Login` no painel `Auth0`, escolha `Add Action/Build Custom`, nomeie-o como `AddRoleClaim`:"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Add the following action script to it:"
msgstr "Adicione o seguinte script de ação a ele:"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Note a custom Auth0 claim has to be namespace qualified, so the claim which will contain roles will be named as \"https://quarkus-security.com/roles\". Have a look at the ID token content we analyzed in the previous sections and you will see how this claim is represented, for example:"
msgstr "Observe que uma declaração Auth0 personalizada deve ser qualificada por namespace, portanto, a declaração que conterá funções será nomeada como \"https://quarkus-security.com/roles\". Dê uma olhada no conteúdo do token de ID que analisamos nas seções anteriores e você verá como essa declaração é representada, por exemplo:"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "The `Auth0` Login Flow diagramm should look like this now:"
msgstr "O diagrama do fluxo de login do site `Auth0` deve ter a seguinte aparência agora:"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "You must add a role such as `admin` to the users registered in the `Auth0` application."
msgstr "Você deve adicionar uma função como `admin` aos usuários registrados no aplicativo `Auth0`."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Create an `admin` role:"
msgstr "Crie uma função `admin`:"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "and add it to the registered user:"
msgstr "e adicioná-lo ao usuário registrado:"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Next, update the Quarkus endpoint to require that only users with the `admin` role can access the endpoint:"
msgstr "Em seguida, atualize o ponto de extremidade do Quarkus para exigir que apenas os usuários com a função `admin` possam acessar o ponto de extremidade:"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Open http://localhost:8080/hello, authenticate to Auth0 and get `403`. The reason you get `403` is because Quarkus OIDC does not know which claim in the `Auth0` tokens represents the roles information, by default a `groups` claim is checked, while Auth0 tokens are now expected to have an \"https://quarkus-security.com/roles\" claim."
msgstr "Abra  http://localhost:8080/hello  autentique-se em Auth0 e obtenha `403`. O motivo pelo qual você obtém `403` é porque o Quarkus OIDC não sabe qual reivindicação nos tokens `Auth0` representa as informações das funções; por padrão, uma reivindicação `groups` é verificada, enquanto os tokens Auth0 agora devem ter uma reivindicação \"https://quarkus-security.com/roles\"."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Fix it by telling Quarkus OIDC which claim must be checked to enforce RBAC:"
msgstr "Para corrigi-lo, informe ao Quarkus OIDC qual reivindicação deve ser verificada para aplicar o RBAC:"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Point to the custom roles claim. The path to the roles claim is in double quotes because the claim is namespace qualified."
msgstr "Aponte para a declaração de funções personalizadas. O caminho para a declaração de funções está entre aspas duplas porque a declaração é qualificada por namespace."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Now, clear the browser cookie cache, access http://localhost:8080/hello again, authenticate to Auth0 and get an expected user name."
msgstr "Agora, limpe o cache de cookies do navegador, acesse  http://localhost:8080/hello  novamente, autentique-se no Auth0 e obtenha um nome de usuário esperado."

#. type: Title ==
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy, no-wrap
msgid "Access Quarkus with opaque Auth0 access tokens"
msgstr "Acessar o Quarkus com tokens de acesso Auth0 opacos"

#. type: delimited block =
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "The main goal of this section is to explain how Quarkus can be tuned to accept `opaque` bearer Auth0 access tokens as opposed to Auth0 JWT access tokens because Auth0 access tokens issued during the authorization code flow are opaque by default and they can only be used to request `UserInfo` in addition to the information about the current user which is already available in ID token. Learning how to verify opaque tokens can be useful because many OIDC and OAuth2 providers will issue opaque access tokens only."
msgstr "O principal objetivo desta seção é explicar como o Quarkus pode ser ajustado para aceitar tokens de acesso Auth0 de portador `opaque` em vez de tokens de acesso Auth0 JWT porque os tokens de acesso Auth0 emitidos durante o fluxo do código de autorização são opacos por padrão e só podem ser usados para solicitar `UserInfo` além das informações sobre o usuário atual que já estão disponíveis no token de ID. Aprender a verificar os tokens opacos pode ser útil porque muitos provedores de OIDC e OAuth2 emitem apenas tokens de acesso opacos."

#. type: delimited block =
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Please see the xref:token-propagation[Propagate access tokens to microservices] and xref:jwt-access-tokens[Access tokens in JWT format] sections below for more information on how to configure Auth0 and Quarkus to have authorization code access tokens issued in the JWT format and propagated to service endpoints."
msgstr "Consulte as seções  link:#token-propagation[Propagar tokens de acesso aos microsserviços] e  link:#jwt-access-tokens[Tokens de acesso no formato JWT] abaixo para obter mais informações sobre como configurar o Auth0 e o Quarkus para que os tokens de acesso ao código de autorização sejam emitidos no formato JWT e propagados para os pontos de extremidade do serviço."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "So far we have only tested the Quarkus endpoint using OIDC authorization code flow. In this flow you use the browser to access the Quarkus endpoint, Quarkus itself manages the authorization code flow, a user is redirected to Auth0, logs in, is redirected back to Quarkus, Quarkus completes the flow by exchanging the code for the ID, access, and refresh tokens, and works with the ID token representing the successful user authentication. The access token is not relevant at the moment. As mentioned earlier, in the authorization code flow, Quarkus will only use the access token to access downstream services on behalf of the currently authenticated user."
msgstr "Até agora, só testamos o ponto de extremidade do Quarkus usando o fluxo de código de autorização OIDC. Nesse fluxo, você usa o navegador para acessar o ponto de extremidade do Quarkus, o próprio Quarkus gerencia o fluxo do código de autorização, um usuário é redirecionado para o Auth0, faz login, é redirecionado de volta para o Quarkus, o Quarkus conclui o fluxo trocando o código pelos tokens de ID, acesso e atualização e trabalha com o token de ID que representa a autenticação bem-sucedida do usuário. O token de acesso não é relevante no momento. Conforme mencionado anteriormente, no fluxo do código de autorização, o Quarkus só usará o token de acesso para acessar serviços downstream em nome do usuário autenticado no momento."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Lets imagine though that the Quarkus endpoint we have developed has to accept `Bearer` access tokens too: it may be that the other Quarkus endpoint which is propagating it to this endpoint or it can be SPA which uses the access token to access the Quarkus endpoint. And Quarkus OIDC DevUI SPA which we already used to analyze the ID token fits perfectly for using the access token available to SPA to test the Quarkus endpoint."
msgstr "Vamos imaginar que o endpoint do Quarkus que desenvolvemos tenha que aceitar `Bearer` tokens de acesso também: pode ser o outro endpoint do Quarkus que está propagando-o para este endpoint ou pode ser o SPA que usa o token de acesso para acessar o endpoint do Quarkus. E o Quarkus OIDC DevUI SPA que já usamos para analisar o token de ID se encaixa perfeitamente para usar o token de acesso disponível para o SPA para testar o endpoint do Quarkus."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Lets go again to http://localhost:8080/q/dev, select the `OpenId Connect` card, login to Auth0, and check the Access token content:"
msgstr "Vamos acessar novamente  http://localhost:8080/q/dev  selecionar o cartão `OpenId Connect`, fazer login no Auth0 e verificar o conteúdo do token de acesso:"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "This access token, as opposed to the ID token we looked at earlier, can not be verified by Quarkus directly. This is because the access token is in `JWE` (encrypted) as opposed to `JWS` (signed) format. You can see from the decoded token headers that it has been encrypted directly with a secret key known to Auth0 only, and therefore its content can not be decrypted by Quarkus. From the Quarkus's perspective this access token is an `opaque` one, Quarkus can not use public Auth0 asymmetric verification keys to verify it."
msgstr "Esse token de acesso, ao contrário do token de ID que vimos anteriormente, não pode ser verificado diretamente pelo Quarkus. Isso ocorre porque o token de acesso está no formato `JWE` (criptografado), em vez de `JWS` (assinado). Você pode ver nos cabeçalhos decodificados do token que ele foi criptografado diretamente com uma chave secreta conhecida apenas pelo Auth0 e, portanto, seu conteúdo não pode ser descriptografado pelo Quarkus. Do ponto de vista do Quarkus, esse token de acesso é um `opaque`. O Quarkus não pode usar chaves de verificação assimétricas públicas do Auth0 para verificá-lo."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "To confirm it, enter `/hello` as the `Service Address` in the `Test Service` area and press `With Access Token` and you will get the HTTP `401` status:"
msgstr "Para confirmar, digite `/hello` como `Service Address` na área `Test Service` e pressione `With Access Token` e você obterá o status HTTP `401`:"

#: _guides/security-oidc-auth0-tutorial.adoc
msgid ""
"For Quarkus be able to accept such access tokens, one of the two options should be available.\n"
"The first option is to introspect the opaque token remotely using a provider's introspection endpoint. Token introspection is typically supported at the `OAuth2` level, and since `OIDC` is built on top of `OAuth2`, some OIDC providers such as Keycloak support the token introspection as well. However, Auth0 does not support the token introspection, you can check it by looking at the publicly available Auth0 metadata, add `/.well-known/openid-configuration` to the address of your configured Auth0 provider, and open the resulting URL, `https://dev-3ve0cgn7.us.auth0.com/.well-known/openid-configuration`. You will see that Auth0 does not have an introspection endpoint:"
msgstr ""

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Therefore the other option, indirect access token verification, where the access token is used to acquire `UserInfo` from Auth0 can be used to accept and verify opaque Auth0 tokens. This option works because OIDC providers have to verify access tokens before they can issue `UserInfo` and Auth0 has a `UserInfo` endpoint."
msgstr "Portanto, a outra opção, a verificação indireta do token de acesso, em que o token de acesso é usado para adquirir `UserInfo` do Auth0, pode ser usada para aceitar e verificar os tokens opacos do Auth0. Essa opção funciona porque os provedores de OIDC precisam verificar os tokens de acesso antes de poderem emitir `UserInfo` e o Auth0 tem um ponto de extremidade `UserInfo`."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "So lets configure Quarkus to request that the access tokens must be verified by using them to acquite `UserInfo`:"
msgstr "Portanto, vamos configurar o Quarkus para solicitar que os tokens de acesso sejam verificados ao usá-los para adquirir `UserInfo`:"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Verify access tokens indirectly by using them to request `UserInfo`."
msgstr "Verifique os tokens de acesso indiretamente, usando-os para solicitar `UserInfo`."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Update the endpoint code to expect `UserInfo` as opposed to `ID token`:"
msgstr "Atualize o código do ponto de extremidade para esperar `UserInfo` em vez de `ID token`:"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "This code will now work both for the authorization code and bearer access token flows."
msgstr "Esse código agora funcionará tanto para o código de autorização quanto para os fluxos de token de acesso ao portador."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Let's go to the OIDC Dev UI where we looked at the access token, enter `/hello` as the `Service Address` in the `Test Service` area and press `With Access Token` and you will get `200`:"
msgstr "Vamos para a interface de desenvolvimento do OIDC, onde vimos o token de acesso, digite `/hello` como `Service Address` na área `Test Service` e pressione `With Access Token` para obter `200`:"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "To confirm that it really does work, update the test endpoint to allow a `user` role only with `@RolesAllowed(\"user\")`. Try to access the endpoint from OIDC Dev UI again, and you will get the HTTP `403` error. Revert the code back to `@RolesAllowed(\"admin\")` to get the reassuring HTTP `200` status again."
msgstr "Para confirmar que isso realmente funciona, atualize o endpoint de teste para permitir uma função `user` somente com `@RolesAllowed(\"user\")`. Tente acessar o ponto de extremidade da interface de desenvolvimento do OIDC novamente e você receberá o erro HTTP `403`. Reverta o código de volta para `@RolesAllowed(\"admin\")` para obter o status HTTP `200` reconfortante novamente."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "When verifying the opaque access token indirecly, by using it to request `UserInfo`, Quarkus will use `UserInfo` as the source of the roles information, if any. As it happens, Auth0 includes the custom role claim which was created earlier in the `UserInfo` response as well."
msgstr "Ao verificar o token de acesso opaco indiretamente, usando-o para solicitar `UserInfo`, o Quarkus usará `UserInfo` como a fonte das informações de função, se houver. Como acontece, o Auth0 inclui a reivindicação de função personalizada que foi criada anteriormente na resposta `UserInfo` também."

#. type: delimited block =
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "As has already been mentioned in the introduction to this section, the main goal of this section is to explain how Quarkus can verify opaque access tokens. In general, propagating access tokens whose only purpose is to allow retrieving `UserInfo` to services should be avoided unless the frontend JAX-RS endpoint or SPA prefers to delegate UserInfo retrieval to the trusted service."
msgstr "Como já foi mencionado na introdução desta seção, o principal objetivo desta seção é explicar como o Quarkus pode verificar tokens de acesso opacos. Em geral, a propagação de tokens de acesso cuja única finalidade é permitir a recuperação de `UserInfo` para os serviços deve ser evitada, a menos que o ponto de extremidade JAX-RS do frontend ou o SPA prefira delegar a recuperação de UserInfo ao serviço confiável."

#. type: delimited block =
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Please see the following xref:token-propagation[Propagate access tokens to microservices] and xref:jwt-access-tokens[Access tokens in JWT format] sections for a recommended approach of working with Auth0 access tokens."
msgstr "Consulte as seções  link:#token-propagation[Propagar tokens de acesso a microsserviços] e  link:#jwt-access-tokens[Tokens de acesso no formato JWT] para obter uma abordagem recomendada para trabalhar com tokens de acesso Auth0."

#. type: delimited block =
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Typically one uses access tokens to access remote services but OIDC DevUI SPA dashboard also offers an option to test with the ID token. This option is only available to emulate the cases where SPA delegates to the endpoint to verify and retrieve some information from the ID token for SPA to use - but ID token will still be sent to the endpoint as Bearer token by OIDC DevUI. Prefer testing with the access token in most cases."
msgstr "Normalmente, usa-se tokens de acesso para acessar serviços remotos, mas o painel do OIDC DevUI SPA também oferece uma opção para testar com o token de ID. Essa opção está disponível apenas para emular os casos em que o SPA delega ao ponto de extremidade para verificar e recuperar algumas informações do token de ID para o SPA usar - mas o token de ID ainda será enviado ao ponto de extremidade como token de portador pelo OIDC DevUI. Prefira testar com o token de acesso na maioria dos casos."

#: _guides/security-oidc-auth0-tutorial.adoc
msgid ""
"You can use SwaggerUI or GraphQL from OIDC DevUI for testing the service, instead of manually entering the service path to test.\n"
"For example, if you add"
msgstr ""

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "to your application's pom then you will see a Swagger link in OIDC Dev UI:"
msgstr "no pom do seu aplicativo, você verá um link do Swagger na interface de usuário do OIDC Dev:"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Click on the Swagger link and start testing the service."
msgstr "Clique no link do Swagger e comece a testar o serviço."

#. type: Title ==
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy, no-wrap
msgid "Propagate access tokens to microservices"
msgstr "Propagar tokens de acesso a microsserviços"

#. type: delimited block =
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Now that we have managed to use OIDC authorization code flow and used both ID token and UserInfo to access the user information, the next typical task is to propagate the current Auth0 access token to access the downstream service on behalf of the currently authenticated user."
msgstr "Agora que conseguimos usar o fluxo de código de autorização do OIDC e usamos o token de ID e o UserInfo para acessar as informações do usuário, a próxima tarefa típica é propagar o token de acesso Auth0 atual para acessar o serviço downstream em nome do usuário autenticado no momento."

#. type: delimited block =
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "In fact, the last code example, showing the injected `UserInfo`, is a concrete example of the access token propagation, in this case, Quarkus propagates the Auth0 access token to the Auth0 `UserInfo` endpoint to acquire `UserInfo`. Quarkus does it without users having to do anything themselves."
msgstr "De fato, o último exemplo de código, que mostra o `UserInfo` injetado, é um exemplo concreto da propagação do token de acesso; nesse caso, o Quarkus propaga o token de acesso Auth0 para o ponto de extremidade Auth0 `UserInfo` para adquirir o `UserInfo`. O Quarkus faz isso sem que os próprios usuários precisem fazer nada."

#. type: delimited block =
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "But what about propagating access tokens to some custom services ? It is very easy to achieve in Quarkus, both for the authorization code and bearer token flows. All you need to do is to create a Reactive REST Client interface for calling the service requiring a Bearer token access and annotate it with `@AccessToken` and the access token arriving to the frontend endpoint as the Auth0 Bearer access token or acquired by Quarkus after completing the Auth0 authorization code flow, will be propagated to the target microservice. This is as easy as it can get."
msgstr "Mas e quanto à propagação de tokens de acesso para alguns serviços personalizados? Isso é muito fácil de ser feito no Quarkus, tanto para o código de autorização quanto para os fluxos de token de portador. Tudo o que você precisa fazer é criar uma interface de cliente REST reativa para chamar o serviço que requer um acesso de token de portador e anotá-lo com `@AccessToken` e o token de acesso que chega ao endpoint de front-end como o token de acesso de portador Auth0 ou adquirido pelo Quarkus após a conclusão do fluxo de código de autorização Auth0 será propagado para o microsserviço de destino. Isso é o mais fácil possível."

#. type: delimited block =
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Please see xref:security-openid-connect-client-reference.adoc#reactive-token-propagation[OIDC token propagation] for more information about the token propagation and the following sections in this tutorial for a concrete example."
msgstr "Consulte  link:security-openid-connect-client-reference.html#reactive-token-propagation[Propagação de token do OIDC] para obter mais informações sobre a propagação de token e as seções a seguir neste tutorial para obter um exemplo concreto."

#. type: Title ===
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy, no-wrap
msgid "Access tokens in JWT format"
msgstr "Tokens de acesso no formato JWT"

#. type: delimited block =
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "We have already looked in detail at how Quarkus OIDC can handle xref:opaque-access-tokens[Access Quarkus with opaque Auth0 access tokens], but we don't want to propagate Auth0 opaque tokens to micro services which do something useful on behalf on the currently authenticated user, beyond checking its UserInfo."
msgstr "Já vimos em detalhes como o Quarkus OIDC pode lidar com o  link:#opaque-access-tokens[Access Quarkus com tokens de acesso Auth0 opacos], mas não queremos propagar tokens Auth0 opacos para microsserviços que fazem algo útil em nome do usuário autenticado no momento, além de verificar sua UserInfo."

#. type: delimited block =
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "A microservice which the frontend Quarkus application will access by propagating authorization code flow access tokens to it is represented in the Auth0 dashboard as an `API`. Lets add it in the `Applications/APIs`:"
msgstr "Um microsserviço que o aplicativo Quarkus de frontend acessará propagando tokens de acesso de fluxo de código de autorização para ele é representado no painel Auth0 como um `API`. Vamos adicioná-lo no `Applications/APIs`:"

#. type: delimited block =
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "The `https://quarkus-auth0` identifier of the created `QuarkusAuth0API` will serve as this API's `audience`. Providing this audience as a query parameter in the authorization code flow redirect to Auth0 will ensure that Auth0 issues access tokens in the JWT format."
msgstr "O identificador `&lt;a href=\"https://quarkus-auth0\" class=\"bare\"&gt;https://quarkus-auth0&lt;/a&gt;` identificador do `QuarkusAuth0API` criado servirá como o `audience` dessa API. O fornecimento desse público como parâmetro de consulta no redirecionamento do fluxo do código de autorização para o Auth0 garantirá que o Auth0 emita tokens de acesso no formato JWT."

#. type: Title ===
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy, no-wrap
msgid "API microservice"
msgstr "Microsserviço de API"

#. type: delimited block =
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Add the following dependencies to the project to support OIDC token propagation and REST clients:"
msgstr "Adicione as seguintes dependências ao projeto para dar suporte à propagação de token OIDC e aos clientes REST:"

#. type: Block title
#: _guides/security-oidc-auth0-tutorial.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Create `ApiEchoService` service class:"
msgstr "Crie a classe de serviço `ApiEchoService`:"

#: _guides/security-oidc-auth0-tutorial.adoc
msgid ""
"And configure it as an OIDC `service` application which will only fetch public verification keys from Auth0.\n"
"The configuration for this microservice should only have a single line:"
msgstr ""

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "which is all what is needed for the OIDC `service` application to fetch Auth0 public verification keys and use them to verify Auth0 access tokens in JWT format."
msgstr "que é tudo o que é necessário para que o aplicativo OIDC `service` obtenha as chaves de verificação pública Auth0 e as use para verificar os tokens de acesso Auth0 no formato JWT."

#. type: delimited block =
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "In this tutorial you have already configured the OIDC `hybrid` application which can handle both authorization code and bearer token authentication flows. In production you will run microservices as separate servers but for the sake of simplicity `ApiEchoService` will not have to be started as a second server with its own configuration containing `quarkus.oidc.auth-server-url=https://dev-3ve0cgn7.us.auth0.com` only, and therefore the current configuration which already has the Auth0 dev tenant address configured will be reused."
msgstr "Neste tutorial, você já configurou o aplicativo OIDC `hybrid` que pode lidar com os fluxos de autenticação de código de autorização e de token de portador. Na produção, você executará os microsserviços como servidores separados, mas, para simplificar, o `ApiEchoService` não precisará ser iniciado como um segundo servidor com sua própria configuração contendo apenas o `quarkus.oidc.auth-server-url=https://dev-3ve0cgn7.us.auth0.com` e, portanto, a configuração atual que já tem o endereço do locatário do desenvolvedor Auth0 configurado será reutilizada."

#. type: delimited block =
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "The `hybrid` OIDC application type will ensure that `http://localhost:8080/hello` requests to `GreetingResource` initiate an Authorization code flow while `http://localhost:8080/echo` requests to `ApiEchoService`, initiated by `GreetingResource`, will lead to the authorization code flow tokens being propagated and accepted by `ApiEchoService` as bearer JWT access tokens."
msgstr "O tipo de aplicativo `hybrid` OIDC garantirá que `&lt;a href=\"http://localhost:8080/hello\" class=\"bare\"&gt;http://localhost:8080/hello&lt;/a&gt;` as solicitações para `GreetingResource` iniciem um fluxo de código de autorização enquanto `&lt;a href=\"http://localhost:8080/echo\" class=\"bare\"&gt;http://localhost:8080/echo&lt;/a&gt;` as solicitações para `ApiEchoService`, iniciadas por `GreetingResource`, farão com que os tokens de fluxo de código de autorização sejam propagados e aceitos por `ApiEchoService` como tokens de acesso JWT portador."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Next, add a REST client interface representing `ApiEchoService`:"
msgstr "Em seguida, adicione uma interface de cliente REST representando `ApiEchoService`:"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Propagate access token as an HTTP `Authorization: Bearer accesstoken` header"
msgstr "Propagar o token de acesso como um cabeçalho HTTP `Authorization: Bearer accesstoken`"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "And update the configuration for the Quarkus frontend application, `GreetingResource`, which has been created earlier, to request that an authorization code flow access token (as opposed to ID token) includes an `aud` (audience) claim targeting `ApiEchoService`, as well as configure the base URL for the `ApiEchoService` REST client:"
msgstr "E atualize a configuração do aplicativo de front-end do Quarkus, `GreetingResource`, que foi criado anteriormente, para solicitar que um token de acesso de fluxo de código de autorização (em oposição ao token de ID) inclua uma reivindicação `aud` (público) direcionada a `ApiEchoService`, bem como configure o URL de base para o cliente REST `ApiEchoService`:"

#: _guides/security-oidc-auth0-tutorial.adoc
msgid ""
"Pass an extra `audience` query parameter to the Auth0 authorization endpoint during the authorization code flow redirect from Quarkus to Auth0.\n"
"It will ensure that the access token is issued in the JWT format and includes an `aud` (audience) claim which will contain `https://quarkus-auth0`."
msgstr ""

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Point `ApiEchoServiceClient` to the `ApiEchoService` endpoint. HTTP port in the `org.acme.ApiEchoServiceClient/mp-rest/url=http://localhost:${port}` property is parameterized to ensure the correct URL is built in dev, test and prod modes."
msgstr "Aponte `ApiEchoServiceClient` para o ponto de extremidade `ApiEchoService`. A porta HTTP na propriedade `org.acme.ApiEchoServiceClient/mp-rest/url=http://localhost:${port}` é parametrizada para garantir que o URL correto seja criado nos modos de desenvolvimento, teste e produção."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Finally update `GreetingResource` to request that `ApiEchoService` echoes a user name:"
msgstr "Por fim, atualize `GreetingResource` para solicitar que `ApiEchoService` ecoe um nome de usuário:"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Inject `ApiEchoServiceClient` REST client"
msgstr "Injetar o cliente `ApiEchoServiceClient` REST"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Use `ApiEchoServiceClient` to echo the user name."
msgstr "Use `ApiEchoServiceClient` para fazer eco ao nome do usuário."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Open a browser, access http://localhost:8080/hello and get your name displayed in the browser."
msgstr "Abra um navegador, acesse  http://localhost:8080/hello  e faça com que seu nome seja exibido no navegador."

#. type: Title ===
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy, no-wrap
msgid "Permission Based Access Control"
msgstr "Controle de acesso baseado em permissão"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "We have discussed in the xref:role-based-access-control[Role Based Access Control] section how to get Quarkus to check a namespace qualified claim containing user roles and use this information to enforce Role Based Access Control. You have configured Auth0 to add the custom roles claim to both ID and access tokens."
msgstr "Discutimos na seção  link:#role-based-access-control[Controle de acesso baseado em função] como fazer com que o Quarkus verifique uma reivindicação qualificada de namespace contendo funções de usuário e use essas informações para impor o controle de acesso baseado em função. Você configurou o Auth0 para adicionar a reivindicação de funções personalizadas aos tokens de ID e de acesso."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "However, Permission Based Access Control is better suited to the case where an access token is propagated by the frontend endpoint to a microservice which will check if a given access token has been authorized for this service to perform a concrete action, as opposed to this token vouching for a user be in a specific role. For example, being in the admin role does not necessarily mean the user is allowed to have a read and write access to some of this microservice's content."
msgstr "No entanto, o controle de acesso baseado em permissão é mais adequado para o caso em que um token de acesso é propagado pelo ponto de extremidade front-end para um microsserviço que verificará se um determinado token de acesso foi autorizado por esse serviço a executar uma ação concreta, em vez de esse token atestar que um usuário tem uma função específica. Por exemplo, estar na função de administrador não significa necessariamente que o usuário tenha permissão para ter acesso de leitura e gravação a algum conteúdo desse microsserviço."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Let's see how Permission Based Access Control constraints can be applied to `ApiEchoService`."
msgstr "Vejamos como as restrições de controle de acesso baseado em permissão podem ser aplicadas a `ApiEchoService`."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Go to the Auth0 dashboard, add an `echo:name` permission to the `QuarkusAuth0API` API:"
msgstr "Vá para o painel Auth0 e adicione uma permissão `echo:name` à API `QuarkusAuth0API`:"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "The `echo:name` permission will be included in the access token as a standard OAuth2 `scope` claim value if this scope will also be requested during the authorization code flow. Update the configuration as follows:"
msgstr "A permissão `echo:name` será incluída no token de acesso como um valor de reivindicação padrão do OAuth2 `scope` se esse escopo também for solicitado durante o fluxo do código de autorização. Atualize a configuração da seguinte forma:"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "An extra `echo:name` scope will be requested during the authorization code flow."
msgstr "Um escopo extra do `echo:name` será solicitado durante o fluxo do código de autorização."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Now update `ApiEchoService` to enforce Permission Based Access Control:"
msgstr "Agora, atualize o site `ApiEchoService` para aplicar o controle de acesso baseado em permissão:"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "This is all what is needed as Quarkus OIDC automatically associates `scope` claim values as permissions with the current security identity."
msgstr "Isso é tudo o que é necessário, pois o Quarkus OIDC associa automaticamente os valores de reivindicação `scope` como permissões com a identidade de segurança atual."

#. type: delimited block =
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "You can enforce both Role Based and Permission Based Access Controls in Quarkus by combining `@RolesAllowed` and `@PermissionsAllowed` annotations."
msgstr "É possível aplicar controles de acesso baseados em funções e permissões no Quarkus combinando as anotações `@RolesAllowed` e `@PermissionsAllowed`."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Open a browser, access http://localhost:8080/hello and get the name displayed in the browser."
msgstr "Abra um navegador, acesse  http://localhost:8080/hello  e obtenha o nome exibido no navegador."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "To confirm the permission is correctly enforced, change it to `echo.name`: `@PermissionsAllowed(\"echo.name\")`. Clear the browser cache, access http://localhost:8080/hello again and you will get `403` reported by `ApiEchoService`. Now revert it back to `@PermissionsAllowed(\"echo:name\")`."
msgstr "Para confirmar que a permissão está sendo aplicada corretamente, altere-a para `echo.name`: `@PermissionsAllowed(\"echo.name\")`. Limpe o cache do navegador, acesse  http://localhost:8080/hello  novamente e você verá `403` reportado por `ApiEchoService`. Agora, reverta para `@PermissionsAllowed(\"echo:name\")`."

#. type: Title ==
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy, no-wrap
msgid "Integration testing"
msgstr "Teste de integração"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "You have already used OIDC DevUI SPA to login to Auth0 and test the Quarkus endpoint with the access token, updating the endpoint code along the way."
msgstr "Você já usou o OIDC DevUI SPA para fazer login no Auth0 e testar o endpoint do Quarkus com o token de acesso, atualizando o código do endpoint ao longo do caminho."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "However, running tests is also essential, lets see how we can test the endpoint and configuration which you have developed during the course of this tutorial, using xref:continuous-testing.adoc[Quarkus Continuous Testing] feature."
msgstr "No entanto, a execução de testes também é essencial. Vamos ver como podemos testar o endpoint e a configuração que você desenvolveu durante este tutorial, usando o recurso de  link:continuous-testing.html[teste contínuo do Quarkus]."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Start with the following test code :"
msgstr "Comece com o seguinte código de teste:"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "If you recall, when the application was started in devmode, the following could be seen in the CLI window:"
msgstr "Se você se lembra, quando o aplicativo foi iniciado no modo de desenvolvimento, o seguinte pode ser visto na janela da CLI:"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Press `r` and notice this test failing with `403` which is expected because the test does not send a token to the endpoint:"
msgstr "Pressione `r` e observe a falha desse teste com `403`, o que é esperado porque o teste não envia um token para o endpoint:"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Before fixing the test, let's review the options available for testing Quarkus endpoints secured by OIDC. These options may vary depending on what flow your application supports and how you prefer to test. Endpoints which use OIDC authorization code flow can be tested using xref:security-oidc-code-flow-authentication#integration-testing[one of these options] and endpoints which use Bearer token authentication can be tested using xref:security-oidc-bearer-token-authentication#integration-testing[one of these options]."
msgstr "Antes de corrigir o teste, vamos analisar as opções disponíveis para testar os pontos de extremidade do Quarkus protegidos pelo OIDC. Essas opções podem variar dependendo do fluxo que seu aplicativo suporta e de como você prefere testar. Os pontos de extremidade que usam o fluxo de código de autorização OIDC podem ser testados usando  link:security-oidc-code-flow-authentication.html#integration-testing[uma dessas opções] e os pontos de extremidade que usam a autenticação de token do portador podem ser testados usando  link:security-oidc-bearer-token-authentication.html#integration-testing[uma dessas opções]."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "As you can see, testing of the endpoints secured with Auth0 can be done with the help of `Wiremock`, or `@TestSecurity` annotation. Please experiment with writing such tests on your own and reach out if you encounter any problems."
msgstr "Como você pode ver, o teste dos pontos de extremidade protegidos com Auth0 pode ser feito com a ajuda da anotação `Wiremock` ou `@TestSecurity`. Experimente escrever esses testes por conta própria e entre em contato se encontrar algum problema."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "In this tutorial though, we will use a recently added `OidcTestClient` to support testing endpoints which use live Auth0 development tenants."
msgstr "Neste tutorial, porém, usaremos um `OidcTestClient` adicionado recentemente para dar suporte a pontos de extremidade de teste que usam locatários de desenvolvimento Auth0 ativos."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Here is a related fragment of the configuration:"
msgstr "Aqui está um fragmento relacionado da configuração:"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "In production, you will distinguish between prod and test level configuration with `%prod.` and `%test.` qualifiers. Lets assume that the above configuration will indeed be prefixed with `%test.` in your real application, with this configuration also including the `%prod.` qualified Auth0 production tenant configuration."
msgstr "Na produção, você distinguirá entre a configuração de nível de produção e de teste com os qualificadores `%prod.` e `%test.`. Vamos supor que a configuração acima será de fato prefixada com `%test.` em seu aplicativo real, com essa configuração incluindo também a configuração de locatário de produção Auth0 qualificada como `%prod.`."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Using `OidcTestClient` to test such configuration requires acquiring a token from the Auth0 dev tenant, using either OAuth2 `password` or `client_credentials` grant, we will try a `password` grant. Make sure the application registered in the Auth0 dashboard allows the `password` grant:"
msgstr "O uso do `OidcTestClient` para testar essa configuração requer a aquisição de um token do locatário de desenvolvimento do Auth0, usando a concessão OAuth2 `password` ou `client_credentials`. Vamos tentar uma concessão `password`. Certifique-se de que o aplicativo registrado no painel do Auth0 permita a concessão `password`:"

#. type: delimited block =
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "It is important to clarify that we do not recommend using the deprecated OAuth2 `password` token grant in production. However using it can help testing the endpoint with tokens acquired from the live dev Auth0 tenant."
msgstr "É importante esclarecer que não recomendamos o uso da concessão de token OAuth2 `password` obsoleta na produção. No entanto, usá-lo pode ajudar a testar o endpoint com tokens adquiridos do locatário Auth0 de desenvolvimento ao vivo."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "`OidcTestClient` should be used to test applications accepting bearer tokens which will work for the endpoint developed in this tutorial as it supports both authorization code flow and bearer token authentication. You would need to use OIDC WireMock or `HtmlUnit` directly against the Auth0 dev tenant if only the authorization code flow was supported - in the latter case `HtmlUnit` test code would have to be aligned with how Auth0 challenges users to enter their credentials - please copy and paste an xref:security-oidc-code-flow-authentication#integration-testing-wiremock[HtmlUnit test fragment] from the documentation and experiment if you would like."
msgstr "`OidcTestClient` deve ser usado para testar aplicativos que aceitem tokens de portador, o que funcionará para o endpoint desenvolvido neste tutorial, pois ele é compatível com o fluxo do código de autorização e com a autenticação do token de portador. Você precisaria usar o WireMock do OIDC ou o `HtmlUnit` diretamente no locatário de desenvolvimento do Auth0 se apenas o fluxo do código de autorização fosse compatível - no último caso, o código de teste do `HtmlUnit` teria de estar alinhado com a forma como o Auth0 desafia os usuários a inserir suas credenciais - copie e cole um  link:security-oidc-code-flow-authentication.html#integration-testing-wiremock[fragmento de teste HtmlUnit] da documentação e faça a experiência, se desejar."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "In meantime we will now proceed with fixing the currently failing test using `OidcTestClient`."
msgstr "Enquanto isso, continuaremos corrigindo o teste que está falhando usando o site `OidcTestClient`."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "First you must add the following dependency:"
msgstr "Primeiro, você deve adicionar a seguinte dependência:"

#. type: Block title
#: _guides/security-oidc-auth0-tutorial.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "which provides a utility class `io.quarkus.test.oidc.client.OidcTestClient` which can be used in tests for acquiring access tokens (This dependency also offers an OIDC WireMock support - please review the documentation how to use it for testing if you would like)."
msgstr "que fornece uma classe de utilitário `io.quarkus.test.oidc.client.OidcTestClient` que pode ser usada em testes para adquirir tokens de acesso (essa dependência também oferece suporte ao OIDC WireMock - consulte a documentação sobre como usá-lo para testes, se desejar)."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Now update the test code like this:"
msgstr "Agora, atualize o código de teste da seguinte forma:"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "`OidcTestClient` is used to acquire an access token, using one of the registered user's name and password, as well as the `audience` and `scope` parameters."
msgstr "`OidcTestClient` é usado para adquirir um token de acesso, usando um dos nomes e a senha do usuário registrado, bem como os parâmetros `audience` e `scope`."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "`OidcTestClient` will itself find out the `Auth0` token endpoint address, client id and secret."
msgstr "`OidcTestClient` descobrirá o endereço do endpoint do token `Auth0`, o ID do cliente e o segredo."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Press `r` again and have the test passing:"
msgstr "Pressione `r` novamente e o teste será aprovado:"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "By the way, if you would like you can run the tests in Continuous mode directly from DevUI:"
msgstr "A propósito, se desejar, você pode executar os testes no modo contínuo diretamente da DevUI:"

#. type: Title ==
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy, no-wrap
msgid "Production mode"
msgstr "Modo de produção"

#: _guides/security-oidc-auth0-tutorial.adoc
msgid ""
"You have developed and tested the Quarkus endpoint secured with Auth0 in the development mode.\n"
"The next step is to run your application in the production mode.\n"
"Choose between JVM and native modes."
msgstr ""

#. type: Title ===
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy, no-wrap
msgid "Run the Application in JVM mode"
msgstr "Executar o aplicativo no modo JVM"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Compile the application:"
msgstr "Compile o aplicativo:"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Run the application:"
msgstr "Execute o aplicativo:"

#. type: Title ===
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy, no-wrap
msgid "Run the application in native mode"
msgstr "Executar o aplicativo no modo nativo"

#: _guides/security-oidc-auth0-tutorial.adoc
msgid ""
"You can compile this same demo into native mode without needing any modifications.\n"
"This implies that you no longer need to install a JVM on your production environment.\n"
"The runtime technology is included in the produced binary and optimized to run with minimal resources required."
msgstr ""

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Compilation takes a bit longer, so this step is disabled by default."
msgstr "A compilação demora um pouco mais, portanto, essa etapa é desativada por padrão."

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Build your application again by enabling the `native` profile:"
msgstr "Crie seu aplicativo novamente ativando o perfil `native`:"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Next run the following binary directly:"
msgstr "Em seguida, execute o seguinte binário diretamente:"

#. type: Title ==
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy, no-wrap
msgid "Troubleshooting"
msgstr "Solução de problemas"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "The steps described in this tutorial should work exactly as the tutorial describes. You may have to clear the browser cookies when accessing the updated Quarkus endpoint if you have already completed the authentication. You might need to restart the Quarkus application manually in devmode but it is not expected. Please get in touch with the Quarkus team if you need help completing this tutorial."
msgstr "As etapas descritas neste tutorial devem funcionar exatamente como o tutorial descreve. Talvez seja necessário limpar os cookies do navegador ao acessar o ponto de extremidade atualizado do Quarkus, caso já tenha concluído a autenticação. Talvez seja necessário reiniciar o aplicativo Quarkus manualmente no modo de desenvolvimento, mas isso não é esperado. Entre em contato com a equipe do Quarkus se precisar de ajuda para concluir este tutorial."

#. type: Title ==
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy, no-wrap
msgid "Summary"
msgstr "Resumo"

#: _guides/security-oidc-auth0-tutorial.adoc
msgid ""
"This tutorial demonstrated how Quarkus endpoints can be secured with the `quarkus-oidc` extension and Auth0 using Authorization code and Bearer token authentication flows, with both flows being supported by the same endpoint code.\n"
"Without writing a single line of code, you have added support for the custom Auth0 logout flow and enabled role-based access control with a custom Auth0 namespace qualified claim.\n"
"Token propagation from the frontend endpoint to the microservice endpoint has been achieved by adding the `@AccessToken` annotation to the microservice REST client.\n"
"Microservice endpoint activated the permission-based access control with the `@PermissionsAllowed` annotation.\n"
"You used Quarkus dev mode to update the code and configuration without restarting the endpoint, and you also used the OIDC Dev UI to visualize and test Auth0 tokens.\n"
"You used the continuous testing feature of Quarkus to complement OIDC Dev UI tests with integration tests against the live Auth0 development tenant.\n"
"Finally, you have run the application in JVM and native modes."
msgstr ""

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "Enjoy!"
msgstr "Aproveite!"

#. type: Title ==
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy, no-wrap
msgid "References"
msgstr "Referências"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "link:security-overview.html[Visão geral do Quarkus Security]"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "xref:security-oidc-code-flow-authentication.adoc[OIDC code flow mechanism for protecting web applications]"
msgstr "link:security-oidc-code-flow-authentication.html[Mecanismo de fluxo de código OIDC para proteger aplicativos da Web]"

#. type: Plain text
#: _guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "xref:security-openid-connect-providers.adoc[Configuring well-known OpenID Connect providers]"
msgstr "link:security-openid-connect-providers.html[Configuração de provedores conhecidos do OpenID Connect]"
