# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-29 08:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/vertx-reference.adoc:6
#, fuzzy, no-wrap
msgid "Vert.x Reference Guide"
msgstr "Guia de referência do Vert.x"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:13
#, fuzzy
msgid "https://vertx.io[Vert.x] is a toolkit for building reactive applications.  As described in the xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture], Quarkus uses Vert.x underneath."
msgstr "link:https://vertx.io[O Vert.x] é um conjunto de ferramentas para criar aplicações reactivas. Tal como descrito na  link:quarkus-reactive-architecture.html[Arquitetura Reactiva do Quarkus], o Quarkus utiliza o Vert.x como base."

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:16
#, fuzzy
msgid "This guide is the companion to the xref:vertx.adoc[Using Eclipse Vert.x API from a Quarkus Application] guide.  It provides more advanced details about the usage and the configuration of the Vert.x instance used by Quarkus."
msgstr "Este guia é o companheiro do guia  link:vertx.html[Utilizando a API do Eclipse Vert.x a partir de um aplicativo Quarkus]. Ele fornece detalhes mais avançados sobre o uso e a configuração da instância do Vert.x usada pelo Quarkus."

#. type: Title ==
#: upstream/_guides/vertx-reference.adoc:18
#, fuzzy, no-wrap
msgid "Access the Vert.x instance"
msgstr "Aceder à instância Vert.x"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:22
#, fuzzy
msgid "To access the managed Vert.x instance, add the `quarkus-vertx` extension to your project.  This dependency might already be available in your project (as a transitive dependency)."
msgstr "Para acessar a instância gerenciada do Vert.x, adicione a extensão `quarkus-vertx` ao seu projeto. Esta dependência pode já estar disponível no seu projeto (como uma dependência transitiva)."

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:24
#, fuzzy
msgid "With this extension, you can retrieve the managed instance of Vert.x using either field or constructor injection:"
msgstr "Com esta extensão, pode obter a instância gerida do Vert.x utilizando a injeção de campo ou de construtor:"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:31
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyBean {\n"
"// Field injection\n"
"@Inject Vertx vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:36
#, no-wrap
msgid ""
"// Constructor injection\n"
"MyBean(Vertx vertx) {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:38
#: upstream/_guides/vertx-reference.adoc:212
#: upstream/_guides/vertx-reference.adoc:821
#: upstream/_guides/vertx-reference.adoc:882
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:41
#, fuzzy
msgid "You can inject either the:"
msgstr "É possível injetar o:"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:43
#, fuzzy
msgid "`io.vertx.core.Vertx` instance exposing the _bare_ Vert.x API"
msgstr "`io.vertx.core.Vertx` instância que expõe a API Vert.x _simples_"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:44
#, fuzzy
msgid "`io.vertx.mutiny.core.Vertx` instance exposing the _Mutiny_ API"
msgstr "`io.vertx.mutiny.core.Vertx` instância que expõe a API _Mutiny_"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:46
#, fuzzy
msgid "We recommend using the Mutiny variant as it integrates with the other reactive APIs provided by Quarkus."
msgstr "Recomendamos a utilização da variante Mutiny, uma vez que se integra com as outras APIs reactivas fornecidas pela Quarkus."

#. type: Block title
#: upstream/_guides/vertx-reference.adoc:48
#: upstream/_guides/vertx-reference.adoc:546
#, fuzzy, no-wrap
msgid "Mutiny"
msgstr "Motim"

#. type: delimited block =
#: upstream/_guides/vertx-reference.adoc:51
#, fuzzy
msgid "If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr "Se não estiver familiarizado com o Mutiny, consulte  link:mutiny-primer.html[Mutiny - uma biblioteca de programação reactiva intuitiva]."

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:54
#, fuzzy
msgid "Documentation about the Vert.x Mutiny variant is available on https://smallrye.io/smallrye-mutiny-vertx-bindings."
msgstr "A documentação sobre a variante Vert.x Mutiny está disponível em  https://smallrye.io/smallrye-mutiny-vertx-bindings"

#. type: Title ==
#: upstream/_guides/vertx-reference.adoc:56
#, fuzzy, no-wrap
msgid "Configure the Vert.x instance"
msgstr "Configurar a instância do Vert.x"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:60
#, fuzzy
msgid "You can configure the Vert.x instance from the `application.properties` file.  The following table lists the supported properties:"
msgstr "É possível configurar a instância Vert.x a partir do ficheiro `application.properties`. A tabela a seguir lista as propriedades suportadas:"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:64
#, fuzzy
msgid "See xref:customizing-the-vert-x-configuration[Customize the Vert.x configuration] to configure the Vert.x instance using a programmatic approach."
msgstr "Consulte  link:#customizing-the-vert-x-configuration[Personalizar a configuração do Vert.x] para configurar a instância do Vert.x usando uma abordagem programática."

#. type: Title ==
#: upstream/_guides/vertx-reference.adoc:66
#, fuzzy, no-wrap
msgid "Use Vert.x clients"
msgstr "Utilizar clientes Vert.x"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:70
#, fuzzy
msgid "In addition to Vert.x core, you can use most Vert.x ecosystem libraries.  Some Quarkus extension already wraps Vert.x libraries."
msgstr "Para além do núcleo do Vert.x, pode utilizar a maioria das bibliotecas do ecossistema Vert.x. Algumas extensões do Quarkus já incluem as bibliotecas Vert.x."

#. type: Title ===
#: upstream/_guides/vertx-reference.adoc:71
#, fuzzy, no-wrap
msgid "Available APIs"
msgstr "APIs disponíveis"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:76
#, fuzzy
msgid "The following table lists the **most** used libraries from the Vert.x ecosystem.  To access these APIs, add the indicated extension or dependency to your project.  Check the associated documentation to learn how to use them."
msgstr "A tabela a seguir lista as bibliotecas *mais* usadas do ecossistema Vert.x. Para aceder a estas APIs, adicione a extensão ou dependência indicada ao seu projeto. Consulte a documentação associada para saber como usá-las."

#. type: Table
#: upstream/_guides/vertx-reference.adoc:80
#, fuzzy, no-wrap
msgid "API"
msgstr "API"

#. type: Table
#: upstream/_guides/vertx-reference.adoc:81
#, fuzzy, no-wrap
msgid "Extension or Dependency"
msgstr "Extensão ou dependência"

#. type: Table
#: upstream/_guides/vertx-reference.adoc:83
#, fuzzy, no-wrap
msgid "Documentation"
msgstr "Documentação"

#. type: Table
#: upstream/_guides/vertx-reference.adoc:84
#, fuzzy, no-wrap
msgid "AMQP Client"
msgstr "Cliente AMQP"

#. type: Table
#: upstream/_guides/vertx-reference.adoc:85
#, fuzzy, no-wrap
msgid "`io.quarkus:quarkus-smallrye-reactive-messaging-amqp` (extension)"
msgstr "`io.quarkus:quarkus-smallrye-reactive-messaging-amqp` (extensão)"

#. type: Table
#: upstream/_guides/vertx-reference.adoc:87
#, fuzzy, no-wrap
msgid "xref:amqp.adoc"
msgstr "xref:amqp.adoc"

#. type: Table
#: upstream/_guides/vertx-reference.adoc:88
#, fuzzy, no-wrap
msgid "Circuit Breaker"
msgstr "Disjuntor"

#. type: Table
#: upstream/_guides/vertx-reference.adoc:89
#, fuzzy, no-wrap
msgid "`io.smallrye.reactive:smallrye-mutiny-vertx-circuit-breaker` (external dependency)"
msgstr "`io.smallrye.reactive:smallrye-mutiny-vertx-circuit-breaker` (dependência externa)"

#. type: Table
#: upstream/_guides/vertx-reference.adoc:91
#, fuzzy, no-wrap
msgid "https://vertx.io/docs/vertx-circuit-breaker/java/"
msgstr "https://vertx.io/docs/vertx-circuit-breaker/java/"

#. type: Table
#: upstream/_guides/vertx-reference.adoc:92
#, fuzzy, no-wrap
msgid "Consul Client"
msgstr "Cliente Cônsul"

#. type: Table
#: upstream/_guides/vertx-reference.adoc:93
#, fuzzy, no-wrap
msgid "`io.smallrye.reactive:smallrye-mutiny-vertx-consul-client` (external dependency)"
msgstr "`io.smallrye.reactive:smallrye-mutiny-vertx-consul-client` (dependência externa)"

#. type: Table
#: upstream/_guides/vertx-reference.adoc:95
#, fuzzy, no-wrap
msgid "https://vertx.io/docs/vertx-consul-client/java/"
msgstr "https://vertx.io/docs/vertx-consul-client/java/"

#. type: Table
#: upstream/_guides/vertx-reference.adoc:96
#, fuzzy, no-wrap
msgid "DB2 Client"
msgstr "Cliente DB2"

#. type: Table
#: upstream/_guides/vertx-reference.adoc:97
#, fuzzy, no-wrap
msgid "`io.quarkus:quarkus-reactive-db2-client` (extension)"
msgstr "`io.quarkus:quarkus-reactive-db2-client` (extensão)"

#. type: Table
#: upstream/_guides/vertx-reference.adoc:99
#: upstream/_guides/vertx-reference.adoc:115
#: upstream/_guides/vertx-reference.adoc:119
#: upstream/_guides/vertx-reference.adoc:123
#: upstream/_guides/vertx-reference.adoc:127
#, fuzzy, no-wrap
msgid "xref:reactive-sql-clients.adoc"
msgstr "xref:reactive-sql-clients.adoc"

#. type: Table
#: upstream/_guides/vertx-reference.adoc:100
#, fuzzy, no-wrap
msgid "Kafka Client"
msgstr "Cliente Kafka"

#. type: Table
#: upstream/_guides/vertx-reference.adoc:101
#, fuzzy, no-wrap
msgid "`io.quarkus:quarkus-smallrye-reactive-messaging-kafka` (extension)"
msgstr "`io.quarkus:quarkus-smallrye-reactive-messaging-kafka` (extensão)"

#. type: Table
#: upstream/_guides/vertx-reference.adoc:103
#, fuzzy, no-wrap
msgid "xref:kafka.adoc"
msgstr "xref:kafka.adoc"

#. type: Table
#: upstream/_guides/vertx-reference.adoc:104
#, fuzzy, no-wrap
msgid "Mail Client"
msgstr "Cliente de correio eletrónico"

#. type: Table
#: upstream/_guides/vertx-reference.adoc:105
#, fuzzy, no-wrap
msgid "`io.quarkus:quarkus-mailer` (extension)"
msgstr "`io.quarkus:quarkus-mailer` (extensão)"

#. type: Table
#: upstream/_guides/vertx-reference.adoc:107
#, fuzzy, no-wrap
msgid "xref:mailer.adoc"
msgstr "xref:mailer.adoc"

#. type: Table
#: upstream/_guides/vertx-reference.adoc:108
#, fuzzy, no-wrap
msgid "MQTT Client"
msgstr "Cliente MQTT"

#. type: Table
#: upstream/_guides/vertx-reference.adoc:109
#, fuzzy, no-wrap
msgid "`io.quarkus:quarkus-smallrye-reactive-messaging-mqtt` (extension)"
msgstr "`io.quarkus:quarkus-smallrye-reactive-messaging-mqtt` (extensão)"

#. type: Table
#: upstream/_guides/vertx-reference.adoc:111
#, fuzzy, no-wrap
msgid "No guide yet"
msgstr "Nenhum guia ainda"

#. type: Table
#: upstream/_guides/vertx-reference.adoc:112
#, fuzzy, no-wrap
msgid "MS SQL Client"
msgstr "Cliente MS SQL"

#. type: Table
#: upstream/_guides/vertx-reference.adoc:113
#, fuzzy, no-wrap
msgid "`io.quarkus:quarkus-reactive-mssql-client` (extension)"
msgstr "`io.quarkus:quarkus-reactive-mssql-client` (extensão)"

#. type: Table
#: upstream/_guides/vertx-reference.adoc:116
#, fuzzy, no-wrap
msgid "MySQL Client"
msgstr "Cliente MySQL"

#. type: Table
#: upstream/_guides/vertx-reference.adoc:117
#, fuzzy, no-wrap
msgid "`io.quarkus:quarkus-reactive-mysql-client` (extension)"
msgstr "`io.quarkus:quarkus-reactive-mysql-client` (extensão)"

#. type: Table
#: upstream/_guides/vertx-reference.adoc:120
#, fuzzy, no-wrap
msgid "Oracle Client"
msgstr "Cliente Oracle"

#. type: Table
#: upstream/_guides/vertx-reference.adoc:121
#, fuzzy, no-wrap
msgid "`io.quarkus:quarkus-reactive-oracle-client` (extension)"
msgstr "`io.quarkus:quarkus-reactive-oracle-client` (extensão)"

#. type: Table
#: upstream/_guides/vertx-reference.adoc:124
#, fuzzy, no-wrap
msgid "PostgreSQL Client"
msgstr "Cliente PostgreSQL"

#. type: Table
#: upstream/_guides/vertx-reference.adoc:125
#, fuzzy, no-wrap
msgid "`io.quarkus:quarkus-reactive-pg-client` (extension)"
msgstr "`io.quarkus:quarkus-reactive-pg-client` (extensão)"

#. type: Table
#: upstream/_guides/vertx-reference.adoc:128
#, fuzzy, no-wrap
msgid "RabbitMQ Client"
msgstr "Cliente RabbitMQ"

#. type: Table
#: upstream/_guides/vertx-reference.adoc:129
#, fuzzy, no-wrap
msgid "`io.smallrye.reactive:smallrye-mutiny-vertx-rabbitmq-client` (external dependency)"
msgstr "`io.smallrye.reactive:smallrye-mutiny-vertx-rabbitmq-client` (dependência externa)"

#. type: Table
#: upstream/_guides/vertx-reference.adoc:131
#, fuzzy, no-wrap
msgid "https://vertx.io/docs/vertx-rabbitmq-client/java"
msgstr "https://vertx.io/docs/vertx-rabbitmq-client/java"

#. type: Table
#: upstream/_guides/vertx-reference.adoc:132
#, fuzzy, no-wrap
msgid "Redis Client"
msgstr "Cliente Redis"

#. type: Table
#: upstream/_guides/vertx-reference.adoc:133
#, fuzzy, no-wrap
msgid "`io.quarkus:quarkus-redis-client` (extension)"
msgstr "`io.quarkus:quarkus-redis-client` (extensão)"

#. type: Table
#: upstream/_guides/vertx-reference.adoc:135
#, fuzzy, no-wrap
msgid "xref:redis.adoc"
msgstr "xref:redis.adoc"

#. type: Table
#: upstream/_guides/vertx-reference.adoc:136
#, fuzzy, no-wrap
msgid "Web Client"
msgstr "Cliente Web"

#. type: Table
#: upstream/_guides/vertx-reference.adoc:137
#, fuzzy, no-wrap
msgid "`io.smallrye.reactive:smallrye-mutiny-vertx-web-client` (external dependency)"
msgstr "`io.smallrye.reactive:smallrye-mutiny-vertx-web-client` (dependência externa)"

#. type: Table
#: upstream/_guides/vertx-reference.adoc:139
#, fuzzy, no-wrap
msgid "https://vertx.io/docs/vertx-web-client/java/"
msgstr "https://vertx.io/docs/vertx-web-client/java/"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:142
#, fuzzy
msgid "To learn more about the usage of the Vert.x Mutiny API, refer to https://smallrye.io/smallrye-mutiny-vertx-bindings."
msgstr "Para saber mais sobre a utilização da API Vert.x Mutiny, consulte  https://smallrye.io/smallrye-mutiny-vertx-bindings"

#. type: Title ===
#: upstream/_guides/vertx-reference.adoc:143
#, fuzzy, no-wrap
msgid "Use the Vert.x Web Client"
msgstr "Utilizar o Cliente Web Vert.x"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:147
#, fuzzy
msgid "This section gives an example using the Vert.x `WebClient` in the context of a RESTEasy Reactive application.  As indicated in the table above, add the following dependency to your project:"
msgstr "Esta seção apresenta um exemplo de uso do Vert.x `WebClient` no contexto de um aplicativo RESTEasy Reactive. Conforme indicado na tabela acima, adicione a seguinte dependência ao seu projeto:"

#. type: Block title
#: upstream/_guides/vertx-reference.adoc:149
#: upstream/_guides/vertx-reference.adoc:935
#: upstream/_guides/vertx-reference.adoc:1117
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:155
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.smallrye.reactive</groupId>\n"
"    <artifactId>smallrye-mutiny-vertx-web-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/vertx-reference.adoc:158
#: upstream/_guides/vertx-reference.adoc:951
#: upstream/_guides/vertx-reference.adoc:1132
#, fuzzy, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:161
#, no-wrap
msgid "implementation(\"io.smallrye.reactive:smallrye-mutiny-vertx-web-client\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:164
#, fuzzy
msgid "Now, in your code, you can create an instance of `WebClient`:"
msgstr "Agora, no seu código, pode criar uma instância de `WebClient`:"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:168
#: upstream/_guides/vertx-reference.adoc:262
#: upstream/_guides/vertx-reference.adoc:488
#: upstream/_guides/vertx-reference.adoc:526
#: upstream/_guides/vertx-reference.adoc:651
#: upstream/_guides/vertx-reference.adoc:768
#: upstream/_guides/vertx-reference.adoc:807
#: upstream/_guides/vertx-reference.adoc:856
#, no-wrap
msgid "package org.acme.vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:176
#, no-wrap
msgid ""
"import jakarta.annotation.PostConstruct;\n"
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:178
#, no-wrap
msgid "import io.smallrye.mutiny.Uni;\n"
msgstr "import io.smallrye.mutiny.Uni;\n"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:183
#, no-wrap
msgid ""
"import io.vertx.mutiny.core.Vertx;\n"
"import io.vertx.mutiny.ext.web.client.WebClient;\n"
"import io.vertx.core.json.JsonObject;\n"
"import io.vertx.ext.web.client.WebClientOptions;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:186
#, no-wrap
msgid ""
"@Path(\"/fruit-data\")\n"
"public class ResourceUsingWebClient {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:188
#, no-wrap
msgid "    private final WebClient client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:193
#, no-wrap
msgid ""
"    @Inject\n"
"    VertxResource(Vertx vertx) {\n"
"        this.client = WebClient.create(vertx);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:210
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.APPLICATION_JSON)\n"
"    @Path(\"/{name}\")\n"
"    public Uni<JsonObject> getFruitData(String name) {\n"
"        return client.getAbs(\"https://.../api/fruit/\" + name)\n"
"                .send()\n"
"                .onItem().transform(resp -> {\n"
"                    if (resp.statusCode() == 200) {\n"
"                        return resp.bodyAsJsonObject();\n"
"                    } else {\n"
"                        return new JsonObject()\n"
"                                .put(\"code\", resp.statusCode())\n"
"                                .put(\"message\", resp.bodyAsString());\n"
"                    }\n"
"                });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:218
#, fuzzy
msgid "This resource creates a `WebClient` and, upon request, uses this client to invoke a remote HTTP API.  Depending on the result, the response is forwarded as received, or it creates a JSON object wrapping the error.  The `WebClient` is asynchronous (and non-blocking), to the endpoint returns a `Uni`."
msgstr "Este recurso cria um `WebClient` e, mediante pedido, utiliza este cliente para invocar uma API HTTP remota. Dependendo do resultado, a resposta é reencaminhada como recebida ou cria um objeto JSON que contém o erro. O `WebClient` é assíncrono (e não bloqueante) e o ponto final devolve um `Uni`."

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:222
#, fuzzy
msgid "The application can also run as a native executable.  But, first, we need to instruct Quarkus to enable _ssl_ (if the remote API uses HTTPS).  Open the `src/main/resources/application.properties` and add:"
msgstr "A aplicação também pode ser executada como um executável nativo. Mas, primeiro, precisamos de instruir o Quarkus para ativar o _SSL_ (se a API remota utilizar HTTPS). Abra o site `src/main/resources/application.properties` e adicione:"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:226
#, no-wrap
msgid "quarkus.ssl.native=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:229
#, fuzzy
msgid "Then, create the native executable with:"
msgstr "Em seguida, crie o executável nativo com:"

#. type: Title ==
#: upstream/_guides/vertx-reference.adoc:233
#, fuzzy, no-wrap
msgid "Use Vert.x JSON"
msgstr "Utilizar Vert.x JSON"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:237
#, fuzzy
msgid "Vert.x APIs often rely on JSON.  Vert.x provides two convenient classes to manipulate JSON document: `io.vertx.core.json.JsonObject` and `io.vertx.core.json.JsonArray`."
msgstr "As APIs do Vert.x dependem frequentemente do JSON. O Vert.x fornece duas classes convenientes para manipular documentos JSON: `io.vertx.core.json.JsonObject` e `io.vertx.core.json.JsonArray`."

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:239
#, fuzzy
msgid "`JsonObject` can be used to map an object into its JSON representation and build an object from a JSON document:"
msgstr "`JsonObject` pode ser utilizado para mapear um objeto para a sua representação JSON e construir um objeto a partir de um documento JSON:"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:245
#, no-wrap
msgid ""
"// Map an object into JSON\n"
"Person person = ...;\n"
"JsonObject json = JsonObject.mapFrom(person);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:249
#, no-wrap
msgid ""
"// Build an object from JSON\n"
"json = new JsonObject();\n"
"person = json.mapTo(Person.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:253
#, fuzzy
msgid "Note that these features use the mapper managed by the `quarkus-jackson` extension.  Refer to xref:rest-json.adoc#json[Jackson configuration] to customize the mapping."
msgstr "Note que estas funcionalidades utilizam o mapeador gerido pela extensão `quarkus-jackson`. Consulte a  link:rest-json.html#json[configuração Jackson] para personalizar o mapeamento."

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:257
#, fuzzy
msgid "JSON Object and JSON Array are both supported as Quarkus HTTP endpoint requests and response bodies (using classic RESTEasy and RESTEasy Reactive).  Consider these endpoints:"
msgstr "JSON Object e JSON Array são ambos suportados como pedidos de endpoint HTTP Quarkus e corpos de resposta (usando RESTEasy clássico e RESTEasy Reactive). Considere estes endpoints:"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:265
#, no-wrap
msgid ""
"import io.vertx.core.json.JsonObject;\n"
"import io.vertx.core.json.JsonArray;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:270
#, no-wrap
msgid ""
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:274
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"public class VertxJsonResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:280
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"{name}/object\")\n"
"    public JsonObject jsonObject(String name) {\n"
"        return new JsonObject().put(\"Hello\", name);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:287
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"{name}/array\")\n"
"    public JsonArray jsonArray(String name) {\n"
"        return new JsonArray().add(\"Hello\").add(name);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:290
#, fuzzy
msgid "http://localhost:8080/hello/Quarkus/object returns:"
msgstr "http://localhost:8080/hello/Quarkus/object  regressa:"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:294
#, no-wrap
msgid "{\"Hello\":\"Quarkus\"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:297
#, fuzzy
msgid "http://localhost:8080/hello/Quarkus/array returns:"
msgstr "http://localhost:8080/hello/Quarkus/array  regressa:"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:301
#, no-wrap
msgid "[\"Hello\",\"Quarkus\"]\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:304
#, fuzzy
msgid "This works equally well when the JSON content is a request body or is wrapped in a `Uni`, `Multi`, `CompletionStage` or `Publisher`."
msgstr "Isto funciona igualmente bem quando o conteúdo JSON é um corpo de pedido ou está envolvido num `Uni`, `Multi`, `CompletionStage` ou `Publisher`."

#. type: Title ==
#: upstream/_guides/vertx-reference.adoc:305
#, fuzzy, no-wrap
msgid "Use Verticles"
msgstr "Utilizar verticais"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:310
#, fuzzy
msgid "link:https://vertx.io/docs/vertx-core/java/#_verticles[Verticles] is \"a simple, scalable, actor-like deployment and concurrency model\" provided by _Vert.x_.  This model does not claim to be a strict actor-model implementation, but it shares similarities, especially concerning concurrency, scaling, and deployment.  To use this model, you write and _deploy_ verticles, communicating by sending messages on the event bus."
msgstr "link:https://vertx.io/docs/vertx-core/java/#&lt;em&gt;verticles[Verticles] é \"um modelo de implantação e concorrência simples, escalável e semelhante a um ator\" fornecido por _Vert.x. Este modelo não pretende ser uma implementação rigorosa do modelo de ator, mas partilha semelhanças, especialmente no que diz respeito à concorrência, escala e implantação. Para usar este modelo, escreve-se e _implanta-se_ partículas, que se comunicam enviando mensagens no barramento de eventos."

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:313
#, fuzzy
msgid "You can deploy _verticles_ in Quarkus.  It supports:"
msgstr "É possível implementar _vértices_ no Quarkus. É compatível:"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:315
#, fuzzy
msgid "_bare_ verticle - Java classes extending `io.vertx.core.AbstractVerticle`"
msgstr "_bare_ verticle - Classes Java que prolongam `io.vertx.core.AbstractVerticle`"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:316
#, fuzzy
msgid "_Mutiny_ verticle - Java classes extending `io.smallrye.mutiny.vertx.core.AbstractVerticle`"
msgstr "_Mutiny_ verticle - Classes Java que prolongam `io.smallrye.mutiny.vertx.core.AbstractVerticle`"

#. type: Title ===
#: upstream/_guides/vertx-reference.adoc:317
#, fuzzy, no-wrap
msgid "Deploy Verticles"
msgstr "Implementar Verticais"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:320
#, fuzzy
msgid "To deploy verticles, use the `deployVerticle` method:"
msgstr "Para implantar as verticais, utilize o método `deployVerticle`:"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:324
#, no-wrap
msgid "@Inject Vertx vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:328
#, no-wrap
msgid ""
"// ...\n"
"vertx.deployVerticle(MyVerticle.class.getName(), ar -> { });\n"
"vertx.deployVerticle(new MyVerticle(), ar -> { });\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:331
#, fuzzy
msgid "If you use the Mutiny-variant of Vert.x, be aware that the `deployVerticle` method returns a `Uni`, and you would need to trigger a subscription to make the actual deployment."
msgstr "Se utilizar a variante Mutiny do Vert.x, tenha em atenção que o método `deployVerticle` devolve um `Uni`, pelo que terá de acionar uma subscrição para efetuar a implementação efectiva."

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:333
#, fuzzy
msgid "An example explaining how to deploy verticles during the initialization of the application will follow."
msgstr "Segue-se um exemplo que explica como implantar os vértices durante a inicialização da aplicação."

#. type: Title ===
#: upstream/_guides/vertx-reference.adoc:334
#, fuzzy, no-wrap
msgid "Use @ApplicationScoped beans as Verticle"
msgstr "Utilizar feijões @ApplicationScoped como Verticle"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:340
#, fuzzy
msgid "In general, Vert.x verticles are not CDI beans.  And so cannot use injection.  However, in Quarkus, you can deploy verticles as beans.  Note that in this case, CDI (Arc in Quarkus) is responsible for creating the instance."
msgstr "De um modo geral, os vértices Vert.x não são beans CDI. Por isso, não podem utilizar a injeção. No entanto, no Quarkus, é possível implementar as partículas como beans. Note que, neste caso, o CDI (Arc no Quarkus) é responsável pela criação da instância."

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:342
#, fuzzy
msgid "The following snippet provides an example:"
msgstr "O seguinte excerto fornece um exemplo:"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:346
#: upstream/_guides/vertx-reference.adoc:374
#, no-wrap
msgid "package io.quarkus.vertx.verticles;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:350
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import io.smallrye.mutiny.vertx.core.AbstractVerticle;\n"
"import org.eclipse.microprofile.config.inject.ConfigProperty;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:352
#: upstream/_guides/vertx-reference.adoc:492
#: upstream/_guides/vertx-reference.adoc:811
#, no-wrap
msgid "import jakarta.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:355
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyBeanVerticle extends AbstractVerticle {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:357
#, no-wrap
msgid "    @ConfigProperty(name = \"address\") String address;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:365
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<Void> asyncStart() {\n"
"        return vertx.eventBus().consumer(address)\n"
"                .handler(m -> m.replyAndForget(\"hello\"))\n"
"                .completionHandler();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:368
#, fuzzy
msgid "You don't have to inject the `vertx` instance; instead, leverage the protected field from `AbstractVerticle`."
msgstr "Não é necessário injetar a instância `vertx`; em vez disso, utilize o campo protegido de `AbstractVerticle`."

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:370
#, fuzzy
msgid "Then, deploy the verticle instances with:"
msgstr "Em seguida, implemente as instâncias verticais com:"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:377
#, no-wrap
msgid ""
"import io.quarkus.runtime.StartupEvent;\n"
"import io.vertx.mutiny.core.Vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:380
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.enterprise.event.Observes;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:383
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class VerticleDeployer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:388
#, no-wrap
msgid ""
"    public void init(@Observes StartupEvent e, Vertx vertx, MyBeanVerticle verticle) {\n"
"         vertx.deployVerticle(verticle).await().indefinitely();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:391
#, fuzzy
msgid "If you want to deploy every exposed `AbstractVerticle`, you can use:"
msgstr "Se pretender implementar todos os `AbstractVerticle` expostos, pode utilizar:"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:399
#, no-wrap
msgid ""
"public void init(@Observes StartupEvent e, Vertx vertx, Instance<AbstractVerticle> verticles) {\n"
"    for (AbstractVerticle verticle : verticles) {\n"
"        vertx.deployVerticle(verticle).await().indefinitely();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/vertx-reference.adoc:401
#, fuzzy, no-wrap
msgid "Create multiple verticles instances"
msgstr "Criar várias instâncias de vértices"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:406
#, fuzzy
msgid "When using `@ApplicationScoped`, you will get a single instance for your verticle.  Having multiple instances of verticles can be helpful to share the load among them.  Each of them will be associated with a different I/O thread (Vert.x event loop)."
msgstr "Ao utilizar `@ApplicationScoped`, obterá uma única instância para o seu verticle. Ter várias instâncias de partículas pode ser útil para partilhar a carga entre elas. Cada uma delas será associada a uma thread de E/S diferente (loop de eventos Vert.x)."

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:408
#, fuzzy
msgid "To deploy multiple instances of your verticle, use the `@Dependent` scope instead of `@ApplicationScoped`:"
msgstr "Para implantar várias instâncias do seu artigo, use o escopo `@Dependent` em vez de `@ApplicationScoped`:"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:412
#: upstream/_guides/vertx-reference.adoc:436
#, no-wrap
msgid "package org.acme.verticle;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:415
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import io.smallrye.mutiny.vertx.core.AbstractVerticle;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:418
#, no-wrap
msgid ""
"import jakarta.enterprise.context.Dependent;\n"
"import jakarta.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:421
#, no-wrap
msgid ""
"@Dependent\n"
"public class MyVerticle extends AbstractVerticle {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:429
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<Void> asyncStart() {\n"
"        return vertx.eventBus().consumer(\"address\")\n"
"                .handler(m -> m.reply(\"Hello from \" + this))\n"
"                .completionHandler();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:432
#, fuzzy
msgid "Then, deploy your verticle as follows:"
msgstr "De seguida, implante o seu artigo da seguinte forma:"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:440
#, no-wrap
msgid ""
"import io.quarkus.runtime.StartupEvent;\n"
"import io.vertx.core.DeploymentOptions;\n"
"import io.vertx.mutiny.core.Vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:445
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.enterprise.event.Observes;\n"
"import jakarta.enterprise.inject.Instance;\n"
"import jakarta.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:448
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyApp {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:455
#, no-wrap
msgid ""
"    void init(@Observes StartupEvent ev, Vertx vertx, Instance<MyVerticle> verticles) {\n"
"        vertx\n"
"                .deployVerticle(verticles::get, new DeploymentOptions().setInstances(2))\n"
"                .await().indefinitely();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:464
#, fuzzy
msgid "The `init` method receives an `Instance<MyVerticle>`.  Then, you pass a supplier to the `deployVerticle` method.  The supplier is just calling the `get()` method.  Thanks to the `@Dependent` scope, it returns a new instance on every call.  Finally, you pass the desired number of instances to the `DeploymentOptions`, such as two in the previous example.  It will call the supplier twice, which will create two instances of your verticle."
msgstr "O método `init` recebe um `Instance&amp;lt;MyVerticle&amp;gt;`. De seguida, passa um fornecedor para o método `deployVerticle`. O fornecedor está apenas a chamar o método `get()`. Graças ao escopo `@Dependent`, ele retorna uma nova instância a cada chamada. Finalmente, você passa o número desejado de instâncias para o método `DeploymentOptions`, como duas no exemplo anterior. Ele chamará o fornecedor duas vezes, o que criará duas instâncias do seu verticle."

#. type: Title ==
#: upstream/_guides/vertx-reference.adoc:466
#, fuzzy, no-wrap
msgid "Use the Event Bus"
msgstr "Utilizar o Autocarro de Eventos"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:470
#, fuzzy
msgid "Vert.x comes with a built-in https://vertx.io/docs/vertx-core/java/#event_bus[event bus] that you can use from your Quarkus application.  So, your application components (CDI beans, resources...) can interact using asynchronous events, thus promoting loose-coupling."
msgstr "O Vert.x inclui um  link:https://vertx.io/docs/vertx-core/java/#event_bus[barramento de eventos] integrado que pode ser utilizado a partir da sua aplicação Quarkus. Assim, os componentes da sua aplicação (beans CDI, recursos...) podem interagir utilizando eventos assíncronos, promovendo assim um acoplamento flexível."

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:473
#, fuzzy
msgid "With the event bus, you send _messages_ to _virtual addresses_.  The event bus offers three types of delivery mechanisms:"
msgstr "Com o barramento de eventos, envia-se _mensagens_ para _endereços virtuais_. O barramento de eventos oferece três tipos de mecanismos de entrega:"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:475
#, fuzzy
msgid "point-to-point - send the message, one consumer receives it. If several consumers listen to the address, a round-robin is applied;"
msgstr "ponto-a-ponto - enviar a mensagem, um consumidor recebe-a. Se vários consumidores ouvirem o endereço, é aplicado um round-robin;"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:476
#, fuzzy
msgid "publish/subscribe - publish a message; all the consumers listening to the address are receiving the message;"
msgstr "publicar/subscrever - publicar uma mensagem; todos os consumidores que escutam o endereço estão a receber a mensagem;"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:477
#, fuzzy
msgid "request/reply - send the message and expect a response. The receiver can respond to the message in an asynchronous fashion."
msgstr "pedido/resposta - enviar a mensagem e esperar uma resposta. O recetor pode responder à mensagem de forma assíncrona."

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:479
#, fuzzy
msgid "All these delivery mechanisms are non-blocking and are providing one of the fundamental bricks to build reactive applications."
msgstr "Todos estes mecanismos de entrega são não bloqueantes e constituem uma das bases fundamentais para a construção de aplicações reactivas."

#. type: Title ===
#: upstream/_guides/vertx-reference.adoc:480
#, fuzzy, no-wrap
msgid "Consume events"
msgstr "Consumir eventos"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:484
#, fuzzy
msgid "While you can use the Vert.x API to register consumers, Quarkus comes with declarative support.  To consume events, use the `io.quarkus.vertx.ConsumeEvent` annotation:"
msgstr "Embora seja possível utilizar a API Vert.x para registar os consumidores, o Quarkus inclui suporte declarativo. Para consumir eventos, utilize a anotação `io.quarkus.vertx.ConsumeEvent`:"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:490
#: upstream/_guides/vertx-reference.adoc:528
#: upstream/_guides/vertx-reference.adoc:809
#, no-wrap
msgid "import io.quarkus.vertx.ConsumeEvent;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:495
#: upstream/_guides/vertx-reference.adoc:536
#: upstream/_guides/vertx-reference.adoc:814
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class GreetingService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:501
#, no-wrap
msgid ""
"    @ConsumeEvent                           // <1>\n"
"    public String consume(String name) {    // <2>\n"
"        return name.toUpperCase();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:503
#, fuzzy
msgid "If not set, the address is the fully qualified name of the bean; for instance, in this snippet, it's `org.acme.vertx.GreetingService`."
msgstr "Se não for definido, o endereço é o nome totalmente qualificado do bean; por exemplo, neste snippet, é `org.acme.vertx.GreetingService`."

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:504
#, fuzzy
msgid "The method parameter is the message body. If the method returns _something_, it's the message response."
msgstr "O parâmetro do método é o corpo da mensagem. Se o método devolver _algo_, é a resposta da mensagem."

#. type: Title ===
#: upstream/_guides/vertx-reference.adoc:505
#, fuzzy, no-wrap
msgid "Configure the address"
msgstr "Configurar o endereço"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:508
#, fuzzy
msgid "The `@ConsumeEvent` annotation can be configured to set the address:"
msgstr "A anotação `@ConsumeEvent` pode ser configurada para definir o endereço:"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:515
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")               // <1>\n"
"public String consume(String name) {\n"
"    return name.toUpperCase();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:517
#, fuzzy
msgid "Receive the messages sent to the `greeting` address"
msgstr "Receber as mensagens enviadas para o endereço `greeting`"

#. type: Title ===
#: upstream/_guides/vertx-reference.adoc:518
#, fuzzy, no-wrap
msgid "Process events asynchronously"
msgstr "Processar eventos de forma assíncrona"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:522
#, fuzzy
msgid "The previous examples use synchronous processing.  Asynchronous processing is also possible by returning either an `io.smallrye.mutiny.Uni` or a `java.util.concurrent.CompletionStage`:"
msgstr "Os exemplos anteriores utilizam o processamento síncrono. O processamento assíncrono também é possível, devolvendo um `io.smallrye.mutiny.Uni` ou um `java.util.concurrent.CompletionStage`:"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:533
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import java.util.concurrent.CompletableFuture;\n"
"import java.util.concurrent.CompletionStage;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:543
#, no-wrap
msgid ""
"    @ConsumeEvent\n"
"    public Uni<String> process(String name) {\n"
"        // return an Uni completed when the processing is finished.\n"
"        // You can also fail the Uni explicitly\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/vertx-reference.adoc:550
#, fuzzy
msgid "The previous example uses Mutiny reactive types.  If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr "O exemplo anterior utiliza tipos reactivos Mutiny. Se não estiver familiarizado com o Mutiny, consulte  link:mutiny-primer.html[Mutiny - uma biblioteca de programação reactiva intuitiva]."

#. type: Title ===
#: upstream/_guides/vertx-reference.adoc:552
#, fuzzy, no-wrap
msgid "Blocking processing of events"
msgstr "Bloqueio do processamento de eventos"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:556
#, fuzzy
msgid "By default, the code consuming the event must be _non-blocking_, as it's called on an I/O thread.  If your processing is blocking, use the `@io.smallrye.common.annotation.Blocking` annotation:"
msgstr "Por padrão, o código que consome o evento deve ser _não-bloqueante_, pois é chamado em um thread de E/S. Se o seu processamento for bloqueante, utilize a anotação `@io.smallrye.common.annotation.Blocking`:"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:564
#, no-wrap
msgid ""
"@ConsumeEvent(value = \"blocking-consumer\")\n"
"@Blocking\n"
"void consumeBlocking(String message) {\n"
"    // Something blocking\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:567
#, fuzzy
msgid "Alternatively, you can use the `blocking` attribute from the `@ConsumeEvent` annotation:"
msgstr "Em alternativa, pode utilizar o atributo `blocking` da anotação `@ConsumeEvent`:"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:574
#, no-wrap
msgid ""
"@ConsumeEvent(value = \"blocking-consumer\", blocking = true)\n"
"void consumeBlocking(String message) {\n"
"    // Something blocking\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:577
#, fuzzy
msgid "When using `@Blocking`, it ignores the value of the `blocking` attribute of `@ConsumeEvent`."
msgstr "Quando se utiliza `@Blocking`, ignora-se o valor do atributo `blocking` de `@ConsumeEvent`."

#. type: Title ===
#: upstream/_guides/vertx-reference.adoc:578
#, fuzzy, no-wrap
msgid "Reply to events"
msgstr "Responder a eventos"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:582
#, fuzzy
msgid "The _return_ value of a method annotated with `@ConsumeEvent` is used to respond to the incoming message.  For instance, in the following snippet, the returned `String` is the response."
msgstr "O valor de _retorno_ de um método anotado com `@ConsumeEvent` é utilizado para responder à mensagem recebida. Por exemplo, no trecho a seguir, o valor retornado `String` é a resposta."

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:589
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")\n"
"public String consume(String name) {\n"
"    return name.toUpperCase();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:592
#, fuzzy
msgid "You can also return a `Uni<T>` or a `CompletionStage<T>` to handle asynchronous reply:"
msgstr "Também pode devolver um `Uni&amp;lt;T&amp;gt;` ou um `CompletionStage&amp;lt;T&amp;gt;` para tratar a resposta assíncrona:"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:599
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")\n"
"public Uni<String> consume2(String name) {\n"
"    return Uni.createFrom().item(() -> name.toUpperCase()).emitOn(executor);\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/vertx-reference.adoc:604
#, fuzzy
msgid "You can inject an `executor` if you use the Context Propagation extension:"
msgstr "Pode injetar um `executor` se utilizar a extensão Context Propagation:"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:607
#, no-wrap
msgid "@Inject Executor executor;\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/vertx-reference.adoc:610
#, fuzzy, no-wrap
msgid "Implement fire-and-forget interactions"
msgstr "Implementar interacções do tipo \"disparar e esquecer"

#. type: delimited block =
#: upstream/_guides/vertx-reference.adoc:615
#, fuzzy
msgid "You don't have to reply to received messages.  Typically, for a _fire and forget_ interaction, the messages are consumed, and the sender does not need to know about it.  To implement this pattern, your consumer method returns `void`."
msgstr "Não é necessário responder às mensagens recebidas. Normalmente, para uma interação do tipo \" _disparar e esquecer_ \", as mensagens são consumidas e o remetente não precisa de saber disso. Para implementar este padrão, o seu método de consumidor devolve `void`."

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:622
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")\n"
"public void consume(String event) {\n"
"    // Do something with the event\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/vertx-reference.adoc:624
#, fuzzy, no-wrap
msgid "Consume messages (instead of events)"
msgstr "Consumir mensagens (em vez de eventos)"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:627
#, fuzzy
msgid "Unlike the previous example using the _payloads_ directly, you can also use `Message` directly:"
msgstr "Ao contrário do exemplo anterior que utiliza diretamente as _cargas úteis_, também pode utilizar diretamente `Message`:"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:635
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")\n"
"public void consume(Message<String> msg) {\n"
"    System.out.println(msg.address());\n"
"    System.out.println(msg.body());\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/vertx-reference.adoc:637
#, fuzzy, no-wrap
msgid "Handle failures"
msgstr "Lidar com falhas"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:640
#, fuzzy
msgid "If a method annotated with `@ConsumeEvent` throws an exception, then:"
msgstr "Se um método anotado com `@ConsumeEvent` lançar uma exceção, então:"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:642
#, fuzzy
msgid "if a reply handler is set, then the failure is propagated back to the sender via an `io.vertx.core.eventbus.ReplyException` with code `ConsumeEvent#FAILURE_CODE` and the exception message,"
msgstr "se for definido um manipulador de resposta, a falha é propagada de volta ao remetente através de um `io.vertx.core.eventbus.ReplyException` com o código `ConsumeEvent#FAILURE_CODE` e a mensagem de exceção,"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:643
#, fuzzy
msgid "if no reply handler is set, then the exception is rethrown (and wrapped in a `RuntimeException` if necessary) and can be handled by the default exception handler, _i.e._ `io.vertx.core.Vertx#exceptionHandler()`."
msgstr "Se não for definido um gestor de resposta, a exceção é novamente rejeitada (e envolvida num `RuntimeException` se necessário) e pode ser tratada pelo gestor de excepções predefinido, _ou seja_, `io.vertx.core.Vertx#exceptionHandler()`."

#. type: Title ===
#: upstream/_guides/vertx-reference.adoc:644
#, fuzzy, no-wrap
msgid "Send messages"
msgstr "Enviar mensagens"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:647
#, fuzzy
msgid "Sending and publishing messages use the Vert.x event bus:"
msgstr "O envio e a publicação de mensagens utilizam o barramento de eventos Vert.x:"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:655
#: upstream/_guides/vertx-reference.adoc:772
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import io.vertx.mutiny.core.eventbus.EventBus;\n"
"import io.vertx.mutiny.core.eventbus.Message;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:661
#: upstream/_guides/vertx-reference.adoc:778
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:664
#, no-wrap
msgid ""
"@Path(\"/async\")\n"
"public class EventResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:667
#, no-wrap
msgid ""
"    @Inject\n"
"    EventBus bus;                                            // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:676
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    @Path(\"{name}\")\n"
"    public Uni<String> greeting(String name) {\n"
"        return bus.<String>request(\"greeting\", name)        // <2>\n"
"                .onItem().transform(Message::body);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:678
#, fuzzy
msgid "Inject the Event bus"
msgstr "Injetar o barramento de eventos"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:679
#, fuzzy
msgid "Send a message to the address `greeting`. Message payload is `name`"
msgstr "Enviar uma mensagem para o endereço `greeting`. O conteúdo da mensagem é `name`"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:681
#, fuzzy
msgid "The `EventBus` object provides methods to:"
msgstr "O objeto `EventBus` fornece métodos para:"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:683
#, fuzzy
msgid "`send` a message to a specific address - one single consumer receives the message."
msgstr "`send` uma mensagem para um endereço específico - um único consumidor recebe a mensagem."

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:684
#, fuzzy
msgid "`publish` a message to a specific address - all consumers receive the messages."
msgstr "`publish` uma mensagem para um endereço específico - todos os consumidores recebem as mensagens."

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:685
#, fuzzy
msgid "`request` a message and expect a reply"
msgstr "`request` uma mensagem e esperar uma resposta"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:695
#, no-wrap
msgid ""
"// Case 1\n"
"bus.sendAndForget(\"greeting\", name)\n"
"// Case 2\n"
"bus.publish(\"greeting\", name)\n"
"// Case 3\n"
"Uni<String> response = bus.<String>request(\"address\", \"hello, how are you?\")\n"
"        .onItem().transform(Message::body);\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/vertx-reference.adoc:697
#, fuzzy, no-wrap
msgid "Process events on virtual threads"
msgstr "Processar eventos de forma assíncrona"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:702
#, fuzzy
msgid "Methods annotated with `@ConsumeEvent` can also be annotated with `@RunOnVirtualThread`.  In this case, the method is invoked on a virtual thread.  Each event is invoked on a different virtual thread."
msgstr "Os métodos anotados com `@ConsumeEvent` também podem ser anotados com `@RunOnVirtualThread`. Nesse caso, o método é chamado em um thread virtual. Cada evento é chamado em um thread virtual diferente."

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:704
#, fuzzy
msgid "To use this feature, make sure:"
msgstr "Para usar esse recurso, certifique-se de que:"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:706
#, fuzzy
msgid "Your Java runtime supports virtual threads."
msgstr "O tempo de execução do Java oferece suporte a threads virtuais."

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:707
#, fuzzy
msgid "Your method uses a blocking signature."
msgstr "Seu método usa uma assinatura de bloqueio."

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:710
#, fuzzy
msgid "The second point means only methods returning an object or `void` can use `@RunOnVirtualThread`.  Methods returning a `Uni` or a `CompletionStage` **cannot** run on virtual threads."
msgstr "O segundo ponto significa que somente os métodos que retornam um objeto ou `void` podem usar `@RunOnVirtualThread`. Os métodos que retornam um `Uni` ou um `CompletionStage` *não podem* ser executados em threads virtuais."

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:712
#, fuzzy
msgid "Read xref:./virtual-threads.adoc[the virtual thread guide] for more details."
msgstr "Leia  link:./virtual-threads.html[o guia de thread virtual] para obter mais detalhes."

#. type: Title ===
#: upstream/_guides/vertx-reference.adoc:713
#, fuzzy, no-wrap
msgid "Use codecs"
msgstr "Utilizar codecs"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:718
#, fuzzy
msgid "The https://vertx.io/docs/vertx-core/java/#event_bus[Vert.x Event Bus] uses codecs to _serialize_ and _deserialize_ objects.  Quarkus provides a default codec for local delivery.  So you can exchange objects as follows:"
msgstr "O  link:https://vertx.io/docs/vertx-core/java/#event_bus[Vert.x Event Bus] utiliza codecs para _serializar_ e _deserializar_ objectos. O Quarkus fornece um codec padrão para entrega local. Assim, é possível trocar objectos da seguinte forma:"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:728
#, no-wrap
msgid ""
"@GET\n"
"@Produces(MediaType.TEXT_PLAIN)\n"
"@Path(\"{name}\")\n"
"public Uni<String> greeting(String name) {\n"
"    return bus.<String>request(\"greeting\", new MyName(name))\n"
"        .onItem().transform(Message::body);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:733
#, no-wrap
msgid ""
"@ConsumeEvent(value = \"greeting\")\n"
"Uni<String> greeting(MyName name) {\n"
"    return Uni.createFrom().item(() -> \"Hello \" + name.getName());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:736
#, fuzzy
msgid "If you want to use a specific codec, you need to set it on both ends explicitly:"
msgstr "Se pretender utilizar um codec específico, tem de o definir explicitamente em ambas as extremidades:"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:747
#, no-wrap
msgid ""
"@GET\n"
"@Produces(MediaType.TEXT_PLAIN)\n"
"@Path(\"{name}\")\n"
"public Uni<String> greeting(String name) {\n"
"    return bus.<String>request(\"greeting\", name,\n"
"        new DeliveryOptions().setCodecName(MyNameCodec.class.getName())) // <1>\n"
"        .onItem().transform(Message::body);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:752
#, no-wrap
msgid ""
"@ConsumeEvent(value = \"greeting\", codec = MyNameCodec.class)            // <2>\n"
"Uni<String> greeting(MyName name) {\n"
"    return Uni.createFrom().item(() -> \"Hello \"+name.getName());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:754
#, fuzzy
msgid "Set the name of the codec to use to send the message"
msgstr "Definir o nome do codec a utilizar para enviar a mensagem"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:755
#, fuzzy
msgid "Set the codec to use to receive the message"
msgstr "Definir o codec a utilizar para receber a mensagem"

#. type: Title ===
#: upstream/_guides/vertx-reference.adoc:756
#, fuzzy, no-wrap
msgid "Combine HTTP and the Event Bus"
msgstr "Combinar HTTP e o barramento de eventos"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:762
#, fuzzy
msgid "Let's revisit a greeting HTTP endpoint and use asynchronous message passing to delegate the call to a separated bean.  It uses the request/reply dispatching mechanism.  Instead of implementing the business logic inside the Jakarta REST endpoint, we are sending a message.  Another bean consumes this message, and the response is sent using the _reply_ mechanism."
msgstr "Vamos revisitar um ponto de extremidade HTTP de saudação e usar a passagem de mensagem assíncrona para delegar a chamada a um bean separado. Ele usa o mecanismo de envio de solicitação/resposta. Em vez de implementar a lógica comercial dentro do ponto de extremidade Jakarta REST, estamos enviando uma mensagem. Outro bean consome essa mensagem e a resposta é enviada usando o mecanismo de _resposta_."

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:764
#, fuzzy
msgid "In your HTTP endpoint class, inject the event bus and uses the `request` method to send a message to the event bus and expect a response:"
msgstr "Na sua classe de ponto de extremidade HTTP, injecte o barramento de eventos e utilize o método `request` para enviar uma mensagem para o barramento de eventos e esperar uma resposta:"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:781
#, no-wrap
msgid ""
"@Path(\"/bus\")\n"
"public class EventResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:784
#, no-wrap
msgid ""
"    @Inject\n"
"    EventBus bus;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:793
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    @Path(\"{name}\")\n"
"    public Uni<String> greeting(String name) {\n"
"        return bus.<String>request(\"greeting\", name)            // <1>\n"
"                .onItem().transform(Message::body);            // <2>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:795
#, fuzzy
msgid "send the `name` to the `greeting` address and request a response"
msgstr "enviar o endereço `name` para o endereço `greeting` e solicitar uma resposta"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:796
#, fuzzy
msgid "when we get the response, extract the body and send it to the user"
msgstr "quando obtivermos a resposta, extraímos o corpo e enviamo-lo ao utilizador"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:800
#, fuzzy
msgid "the HTTP method returns a `Uni`.  If you are using RESTEasy Reactive, `Uni` support is built-in.  If you are using _classic_ RESTEasy, you need to add the `quarkus resteasy-mutiny` extension to your project."
msgstr "o método HTTP retorna um `Uni`. Se você estiver usando o RESTEasy Reactive, o suporte a `Uni` está embutido. Se estiver a utilizar o RESTEasy _clássico_, terá de adicionar a extensão `quarkus resteasy-mutiny` ao seu projeto."

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:803
#, fuzzy
msgid "We need a consumer listening on the `greeting` address.  This consumer can be in the same class or another bean such as:"
msgstr "Precisamos de um consumidor a ouvir o endereço `greeting`. Este consumidor pode estar na mesma classe ou noutro bean, por exemplo:"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:819
#, no-wrap
msgid ""
"    @ConsumeEvent(\"greeting\")\n"
"    public String greeting(String name) {\n"
"        return \"Hello \" + name;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:824
#, fuzzy
msgid "This bean receives the name and returns the greeting message."
msgstr "Este bean recebe o nome e devolve a mensagem de saudação."

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:826
#, fuzzy
msgid "With this in place, every HTTP request on `/bus/quarkus` sends a message to the event bus, waits for a reply, and when this one arrives, writes the HTTP response:"
msgstr "Com isto em vigor, cada pedido HTTP em `/bus/quarkus` envia uma mensagem para o barramento de eventos, espera por uma resposta e, quando esta chega, escreve a resposta HTTP:"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:830
#, no-wrap
msgid "Hello Quarkus\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:833
#, fuzzy
msgid "To better understand, let's detail how the HTTP request/response has been handled:"
msgstr "Para melhor compreendermos, vamos detalhar o modo como o pedido/resposta HTTP foi tratado:"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:835
#, fuzzy
msgid "The request is received by the `greeting` method"
msgstr "O pedido é recebido pelo método `greeting`"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:836
#, fuzzy
msgid "a message containing the _name_ is sent to the event bus"
msgstr "é enviada uma mensagem com o _nome_ para o barramento de eventos"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:837
#, fuzzy
msgid "Another bean receives this message and computes the response"
msgstr "Outro bean recebe esta mensagem e calcula a resposta"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:838
#, fuzzy
msgid "This response is sent back using the reply mechanism"
msgstr "Esta resposta é enviada de volta utilizando o mecanismo de resposta"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:839
#, fuzzy
msgid "Once the reply is received by the sender, the content is written to the HTTP response"
msgstr "Quando a resposta é recebida pelo remetente, o conteúdo é escrito na resposta HTTP"

#. type: Title ===
#: upstream/_guides/vertx-reference.adoc:841
#, fuzzy, no-wrap
msgid "Bidirectional communication with browsers by using SockJS"
msgstr "Comunicação bidirecional com os navegadores através da utilização de SockJS"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:847
#, fuzzy
msgid "The SockJS bridge provided by Vert.x allows browser applications and Quarkus applications to communicate using the event bus.  It connects both sides.  So, both sides can send messages received on the other side.  It supports the three delivery mechanisms."
msgstr "A ponte SockJS fornecida pelo Vert.x permite que os aplicativos do navegador e os aplicativos Quarkus se comuniquem usando o barramento de eventos. Ela conecta os dois lados. Assim, ambos os lados podem enviar mensagens recebidas do outro lado. Suporta os três mecanismos de entrega."

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:850
#, fuzzy
msgid "SockJS negotiates the communication channel between the Quarkus application and the browser.  If WebSockets are supported, it uses them; otherwise, it degrades to SSE, long polling, etc."
msgstr "O SockJS negoceia o canal de comunicação entre a aplicação Quarkus e o browser. Se os WebSockets forem suportados, utiliza-os; caso contrário, degrada-se para SSE, polling longo, etc."

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:852
#, fuzzy
msgid "So use SockJS, you need to configure the bridge, especially the addresses that will be used to communicate:"
msgstr "Para utilizar o SockJS, é necessário configurar a ponte, nomeadamente os endereços que serão utilizados para comunicar:"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:862
#, no-wrap
msgid ""
"import io.vertx.core.Vertx;\n"
"import io.vertx.ext.bridge.PermittedOptions;\n"
"import io.vertx.ext.web.Router;\n"
"import io.vertx.ext.web.handler.sockjs.SockJSBridgeOptions;\n"
"import io.vertx.ext.web.handler.sockjs.SockJSHandler;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:867
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.enterprise.event.Observes;\n"
"import jakarta.inject.Inject;\n"
"import java.util.concurrent.atomic.AtomicInteger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:870
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class SockJsExample {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:873
#, no-wrap
msgid ""
"    @Inject\n"
"    Vertx vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:880
#, no-wrap
msgid ""
"    public void init(@Observes Router router) {\n"
"        SockJSHandler sockJSHandler = SockJSHandler.create(vertx);\n"
"        sockJSHandler.bridge(new SockJSBridgeOptions()\n"
"                .addOutboundPermitted(new PermittedOptions().setAddress(\"ticks\")));\n"
"        router.route(\"/eventbus/*\").handler(sockJSHandler);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:886
#, fuzzy
msgid "This code configures the SockJS bridge to send all the messages targeting the `ticks` address to the connected browsers.  More detailed explanations about the configuration can be found on https://vertx.io/docs/vertx-web/java/#_sockjs_event_bus_bridge[the Vert.x SockJS Bridge documentation]."
msgstr "Esse código configura a ponte SockJS para enviar todas as mensagens direcionadas ao endereço `ticks` para os navegadores conectados. Explicações mais detalhadas sobre a configuração podem ser encontradas na  link:https://vertx.io/docs/vertx-web/java/#_sockjs_event_bus_bridge[documentação da ponte Vert.x SockJS]."

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:888
#, fuzzy
msgid "The browser must use the `vertx-eventbus` JavaScript library to consume the message:"
msgstr "O browser tem de utilizar a biblioteca JavaScript `vertx-eventbus` para consumir a mensagem:"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:902
#, no-wrap
msgid ""
"<!doctype html>\n"
"<html>\n"
"<head>\n"
"    <meta charset=\"utf-8\"/>\n"
"    <title>SockJS example - Quarkus</title>\n"
"    <script src=\"https://code.jquery.com/jquery-3.3.1.min.js\"\n"
"            integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\"></script>\n"
"    <script type=\"application/javascript\" src=\"https://cdn.jsdelivr.net/sockjs/0.3.4/sockjs.min.js\"></script>\n"
"    <script src=\"https://cdn.jsdelivr.net/npm/vertx3-eventbus-client@3.8.5/vertx-eventbus.min.js\"></script>\n"
"</head>\n"
"<body>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:904
#, no-wrap
msgid "<h1>SockJS Examples</h1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:906
#, no-wrap
msgid "<p><strong>Last Tick:</strong> <span id=\"tick\"></span></p>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:910
#, no-wrap
msgid ""
"</body>\n"
"<script>\n"
"    var eb = new EventBus('/eventbus');\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:912
#, no-wrap
msgid "    eb.onopen = function () {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:917
#, no-wrap
msgid ""
"        eb.registerHandler('ticks', function (error, message) {\n"
"            $(\"#tick\").html(message.body);\n"
"        });\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:920
#, no-wrap
msgid ""
"</script>\n"
"</html>\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/vertx-reference.adoc:923
#, fuzzy, no-wrap
msgid "Use native transports"
msgstr "Utilizar transportes nativos"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:926
#, fuzzy
msgid "Native transports are not supported in native executables."
msgstr "Os transportes nativos não são suportados em executáveis nativos."

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:928
#, fuzzy
msgid "To use `io_uring`, refer to the xref:use-io_uring[Use io_uring] section."
msgstr "Para utilizar `io_uring`, consulte a secção  link:#use-io_uring[Utilizar io_uring]."

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:933
#, fuzzy
msgid "Vert.x is capable of using https://netty.io/wiki/native-transports.html[Netty's native transports], which offers performance improvements on specific platforms.  To enable them, you must include the appropriate dependency for your platform.  It's usually a good idea to have both to keep your application platform-agnostic.  Netty is smart enough to use the correct one, that includes none at all on unsupported platforms:"
msgstr "O Vert.x é capaz de usar  link:https://netty.io/wiki/native-transports.html[os transportes nativos do Netty], o que oferece melhorias de desempenho em plataformas específicas. Para habilitá-los, é necessário incluir a dependência apropriada para sua plataforma. Geralmente é uma boa idéia ter ambas para manter seu aplicativo independente de plataforma. Netty é inteligente o suficiente para usar a correta, que inclui nenhuma em plataformas não suportadas:"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:942
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.netty</groupId>\n"
"  <artifactId>netty-transport-native-epoll</artifactId>\n"
"  <classifier>linux-x86_64</classifier>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:948
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.netty</groupId>\n"
"  <artifactId>netty-transport-native-kqueue</artifactId>\n"
"  <classifier>osx-x86_64</classifier>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:954
#, no-wrap
msgid "implementation(\"io.netty:netty-transport-native-epoll::linux-x86_64\")\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:956
#, no-wrap
msgid "implementation(\"io.netty:netty-transport-native-kqueue::osx-x86_64\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:960
#, fuzzy
msgid "You will also have to explicitly configure Vert.x to use the native transport.  In `application.properties` add:"
msgstr "Também terá de configurar explicitamente o Vert.x para utilizar o transporte nativo. Em `application.properties`, adicione:"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:964
#: upstream/_guides/vertx-reference.adoc:1073
#: upstream/_guides/vertx-reference.adoc:1144
#, no-wrap
msgid "quarkus.vertx.prefer-native-transport=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:967
#, fuzzy
msgid "Or in `application.yml`:"
msgstr "Ou em `application.yml`:"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:973
#, no-wrap
msgid ""
"quarkus:\n"
"  vertx:\n"
"    prefer-native-transport: true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:976
#, fuzzy
msgid "If all is well quarkus will log:"
msgstr "Se tudo estiver bem, o quarkus registar-se-á:"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:979
#, no-wrap
msgid "[io.qua.ver.cor.run.VertxCoreRecorder] (main) Vertx has Native Transport Enabled: true\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/vertx-reference.adoc:981
#, fuzzy, no-wrap
msgid "Native Linux transport"
msgstr "Transporte nativo do Linux"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:984
#, fuzzy
msgid "On Linux you can enable the following socket options:"
msgstr "No Linux, pode ativar as seguintes opções de socket:"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:986
#: upstream/_guides/vertx-reference.adoc:1007
#, fuzzy
msgid "SO_REUSEPORT"
msgstr "SO_REUSEPORT"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:988
#: upstream/_guides/vertx-reference.adoc:1009
#, no-wrap
msgid "quarkus.http.so-reuse-port=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:990
#, fuzzy
msgid "TCP_QUICKACK"
msgstr "TCP_QUICKACK"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:992
#, no-wrap
msgid "quarkus.http.tcp-quick-ack=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:994
#, fuzzy
msgid "TCP_CORK"
msgstr "TCP_CORK"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:996
#, no-wrap
msgid "quarkus.http.tcp-cork=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:998
#, fuzzy
msgid "TCP_FASTOPEN"
msgstr "TCP_FASTOPEN"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:1000
#, no-wrap
msgid "quarkus.http.tcp-fast-open=true\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/vertx-reference.adoc:1002
#, fuzzy, no-wrap
msgid "Native macOS transport"
msgstr "Transporte nativo do macOS"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:1005
#, fuzzy
msgid "On macOS Sierra and above you can enable the following socket options:"
msgstr "No macOS Sierra e superior, pode ativar as seguintes opções de socket:"

#. type: Title ==
#: upstream/_guides/vertx-reference.adoc:1011
#, fuzzy, no-wrap
msgid "Use a Vert.x context-aware scheduler"
msgstr "Use um agendador com reconhecimento de contexto Vert.x"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:1015
#, fuzzy
msgid "Some Mutiny operators need to schedule work on an executor thread pool.  A good example is `.onItem().delayIt().by(Duration.ofMillis(10)` as it needs such an executor to delay emissions."
msgstr "Alguns operadores do Mutiny precisam agendar o trabalho em um pool de threads de executores. Um bom exemplo é o `.onItem().delayIt().by(Duration.ofMillis(10)`, pois ele precisa desse executor para atrasar as emissões."

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:1017
#, fuzzy
msgid "The default executor is returned by `io.smallrye.mutiny.infrastructure.Infrastructure` and it is already configured and managed by Quarkus."
msgstr "O executor padrão é retornado por `io.smallrye.mutiny.infrastructure.Infrastructure` e já está configurado e gerenciado pelo Quarkus."

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:1019
#, fuzzy
msgid "That being said, there are cases where you need to make sure that an operation is run on a Vert.x (duplicated) context and not just on any random thread."
msgstr "Dito isso, há casos em que você precisa garantir que uma operação seja executada em um contexto Vert.x (duplicado) e não apenas em qualquer thread aleatório."

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:1022
#, fuzzy
msgid "The `io.smallrye.mutiny.vertx.core.ContextAwareScheduler` interface offers an API to obtain context-aware schedulers.  Such a scheduler is configured with:"
msgstr "A interface `io.smallrye.mutiny.vertx.core.ContextAwareScheduler` oferece uma API para obter agendadores com reconhecimento de contexto. Esse agendador é configurado com:"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:1024
#, fuzzy
msgid "a delegate `ScheduledExecutorService` of your choice (hint: you can reuse `Infrastructure.getDefaultWorkerPool()`), and"
msgstr "um delegado `ScheduledExecutorService` de sua escolha (dica: você pode reutilizar `Infrastructure.getDefaultWorkerPool()`), e"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:1025
#, fuzzy
msgid "a context fetching strategy among:"
msgstr "uma estratégia de busca de contexto entre:"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:1026
#, fuzzy
msgid "an explicit `Context`, or"
msgstr "um `Context` explícito, ou"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:1027
#, fuzzy
msgid "calling `Vertx::getOrCreateContext()` either on the current thread or later when the scheduling request happens, or"
msgstr "chamar `Vertx::getOrCreateContext()` no thread atual ou posteriormente, quando a solicitação de agendamento ocorrer, ou"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:1028
#, fuzzy
msgid "calling `Vertx::currentContext()`, which fails if the current thread is not a Vert.x thread."
msgstr "chamando `Vertx::currentContext()`, que falha se o thread atual não for um thread Vert.x."

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:1030
#, fuzzy
msgid "Here is a sample where `ContextAwareScheduler` is used:"
msgstr "Aqui está um exemplo em que `ContextAwareScheduler` é usado:"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:1034
#, no-wrap
msgid "class MyVerticle extends AbstractVerticle {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:1038
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<Void> asyncStart() {\n"
"        vertx.getOrCreateContext().put(\"foo\", \"bar\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:1042
#, no-wrap
msgid ""
"        var delegate = Infrastructure.getDefaultWorkerPool();\n"
"        var scheduler = ContextAwareScheduler.delegatingTo(delegate)\n"
"            .withCurrentContext();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:1052
#, no-wrap
msgid ""
"        return Uni.createFrom().voidItem()\n"
"                .onItem().delayIt().onExecutor(scheduler).by(Duration.ofMillis(10))\n"
"                .onItem().invoke(() -> {\n"
"                    // Prints \"bar\"\n"
"                    var ctx = vertx.getOrCreateContext();\n"
"                    System.out.println(ctx.get(\"foo\"));\n"
"                });\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:1056
#, fuzzy
msgid "In this example a scheduler is created by capturing the context of the Vert.x event-loop that calls `asyncStart()`.  The `delayIt` operator uses that scheduler, and we can check that the context that we get in `invoke` is a Vert.x duplicated context where the data for key `\"foo\"` has been propagated."
msgstr "Neste exemplo, um agendador é criado capturando o contexto do loop de eventos do Vert.x que chama `asyncStart()`. O operador `delayIt` usa esse agendador e podemos verificar que o contexto que obtemos em `invoke` é um contexto duplicado do Vert.x em que os dados da chave `\"foo\"` foram propagados."

#. type: Title ==
#: upstream/_guides/vertx-reference.adoc:1057
#, fuzzy, no-wrap
msgid "Use a Unix domain socket"
msgstr "Utilizar um socket de domínio Unix"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:1063
#, fuzzy
msgid "Listening on a Unix domain socket allows us to dispense with the overhead of TCP if the connection to the quarkus service is established from the same host.  This can happen if access to the service goes through a proxy which is often the case if you're setting up a service mesh with a proxy like Envoy."
msgstr "Escutar em um soquete de domínio Unix nos permite dispensar a sobrecarga do TCP se a conexão com o serviço quarkus for estabelecida a partir do mesmo host. Isto pode acontecer se o acesso ao serviço passar por um proxy, o que é frequentemente o caso se estiver a configurar um service mesh com um proxy como o Envoy."

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:1065
#, fuzzy
msgid "This will only work on platforms that support xref:native-transport[Use native transports]."
msgstr "Isto só funcionará em plataformas que suportem  link:#native-transport[os transportes nativos Use]."

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:1067
#, fuzzy
msgid "Enable the appropriate xref:native-transport[Use native transports] and set the following environment property:"
msgstr "Active a opção adequada  link:#native-transport[Utilizar transportes nativos] e defina a seguinte propriedade de ambiente:"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:1071
#, no-wrap
msgid ""
"quarkus.http.domain-socket=/var/run/io.quarkus.app.socket\n"
"quarkus.http.domain-socket-enabled=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:1077
#, fuzzy
msgid "By itself this will not disable the tcp socket which by default will open on `0.0.0.0:8080`. It can be explicitly disabled:"
msgstr "Por si só, isto não irá desativar o socket tcp que, por defeito, será aberto em `0.0.0.0:8080`. Pode ser explicitamente desativado:"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:1080
#, no-wrap
msgid "quarkus.http.host-enabled=false\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:1084
#, fuzzy
msgid "These properties can be set through Java's `-D` command line parameter or on `application.properties`."
msgstr "Estas propriedades podem ser definidas através do parâmetro de linha de comandos `-D` de Java ou em `application.properties`."

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:1087
#, fuzzy
msgid "Do not forget to add the native transport dependency.  See xref:native-transport[Use native transports] for details."
msgstr "Não se esqueça de adicionar a dependência do transporte nativo. Consulte  link:#native-transport[Usar transportes nativos] para obter detalhes."

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:1089
#, fuzzy
msgid "Make sure your application has the right permissions to write to the socket."
msgstr "Certifique-se de que a sua aplicação tem as permissões correctas para escrever no socket."

#. type: Title ==
#: upstream/_guides/vertx-reference.adoc:1091
#, fuzzy, no-wrap
msgid "Use io_uring"
msgstr "Utilizar io_uring"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:1094
#, fuzzy
msgid "`io_uring` is not supported in native executables."
msgstr "`io_uring` não é suportado em executáveis nativos."

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:1096
#, fuzzy
msgid "`io_uring` support is experimental"
msgstr "`io_uring` o apoio é experimental"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:1101
#, fuzzy
msgid "`io_uring` is a Linux kernel interface that allows you to send and receive data asynchronously.  It provides unified semantics for both file and network I/O.  It was originally designed to target block devices and files but has since gained the ability to work with things like network sockets.  It has the potential to provide modest performance benefits to network I/O on its own and greater benefits for mixed file and network I/O application workloads."
msgstr "`io_uring` é uma interface do kernel Linux que lhe permite enviar e receber dados de forma assíncrona. Fornece uma semântica unificada para E/S de ficheiros e de rede. Foi originalmente concebida para visar dispositivos de bloco e ficheiros, mas desde então ganhou a capacidade de trabalhar com coisas como sockets de rede. Tem o potencial de fornecer benefícios modestos de desempenho para E/S de rede por si só e maiores benefícios para cargas de trabalho de aplicações mistas de arquivo e E/S de rede."

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:1103
#, fuzzy
msgid "To learn more about `io_uring`, we recommend the following links:"
msgstr "Para saber mais sobre `io_uring`, recomendamos as seguintes ligações:"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:1107
#, fuzzy
msgid "https://developers.redhat.com/articles/2023/04/12/why-you-should-use-iouring-network-io[Why you should use io_uring for network I/O]: The main benefit of io_uring for network I/O is a modern asynchronous API that is straightforward to use and provides unified semantics for file and network I/O.  A potential performance benefit of io_uring for network I/O is reducing the number of syscalls.  This could provide the biggest benefit for high volumes of small operations where the overhead of system calls can be significant."
msgstr "link:https://developers.redhat.com/articles/2023/04/12/why-you-should-use-iouring-network-io[Por que você deve usar io_uring para E]/S de rede: A principal vantagem do io_uring para E/S de rede é uma API assíncrona moderna que é fácil de utilizar e fornece uma semântica unificada para E/S de ficheiro e de rede. Um potencial benefício de desempenho do io_uring para E/S de rede é a redução do número de syscalls. Isso poderia proporcionar o maior benefício para grandes volumes de pequenas operações onde a sobrecarga de chamadas de sistema pode ser significativa."

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:1109
#, fuzzy
msgid "https://dzone.com/articles/the-backend-revolution-or-why-io-uring-is-so-impor[The Backend Revolution and Why io_uring Is So Important]: The io_uring API uses two ring buffers for communication between application and kernel (hence the API name) and designed in a way that enables natural batching of requests and responses.  Besides, it provides a way to submit multiple requests in one system call, which can reduce overhead."
msgstr "A  link:https://dzone.com/articles/the-backend-revolution-or-why-io-uring-is-so-impor[revolução do backend e por que io_uring é tão importante]: A API io_uring usa dois buffers em anel para a comunicação entre o aplicativo e o kernel (daí o nome da API) e foi projetada de forma a permitir o agrupamento natural de solicitações e respostas. Além disso, ela fornece uma maneira de enviar várias solicitações em uma chamada de sistema, o que pode reduzir a sobrecarga."

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:1111
#, fuzzy
msgid "https://stackoverflow.com/questions/61767702/what-exactly-is-io-uring[What exactly is io_uring?]: io_uring is a Linux kernel interface to efficiently allow you to send and receive data asynchronously.  It was originally designed to target block devices and files but has since gained the ability to work with things like network sockets."
msgstr "O  link:https://stackoverflow.com/questions/61767702/what-exactly-is-io-uring[que é exatamente o io_uring?]: io_uring é uma interface do kernel Linux que permite enviar e receber dados de forma assíncrona. Foi originalmente concebida para dispositivos de bloco e ficheiros, mas desde então ganhou a capacidade de trabalhar com coisas como sockets de rede."

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:1115
#, fuzzy
msgid "To use `io_uring`, you need to add two dependencies to your project and enable native transport.  First add the following dependencies to your project:"
msgstr "Para utilizar o `io_uring`, é necessário adicionar duas dependências ao seu projeto e ativar o transporte nativo. Primeiro, adicione as seguintes dependências ao seu projeto:"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:1129
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.netty.incubator</groupId>\n"
"    <artifactId>netty-incubator-transport-native-io_uring</artifactId>\n"
"    <version>0.0.21.Final</version> <!-- Update this version (https://github.com/netty/netty-incubator-transport-io_uring/tags) -->\n"
"    <classifier>linux-x86_64</classifier>\n"
"</dependency>\n"
"<dependency>\n"
"      <groupId>io.vertx</groupId>\n"
"      <artifactId>vertx-io_uring-incubator</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:1137
#, no-wrap
msgid ""
"// Update the io_uring version by picking the latest from https://github.com/netty/netty-incubator-transport-io_uring/tags\n"
"implementation(\"io.netty.incubator:netty-incubator-transport-native-io_uring:0.0.21.Final\")\n"
"implementation(\"io.vertx:vertx-io_uring-incubator\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:1140
#, fuzzy
msgid "Then, in the `application.properties`, add:"
msgstr "Em seguida, no sítio `application.properties`, adicionar:"

#. type: Block title
#: upstream/_guides/vertx-reference.adoc:1147
#, fuzzy, no-wrap
msgid "Can I use io_uring on my Linux machine?"
msgstr "Posso utilizar o io_uring na minha máquina Linux?"

#. type: delimited block =
#: upstream/_guides/vertx-reference.adoc:1150
#, fuzzy
msgid "To check if you can use `io_uring` on your Linux machine, execute the following command:"
msgstr "Para verificar se pode utilizar `io_uring` na sua máquina Linux, execute o seguinte comando:"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:1167
#, no-wrap
msgid ""
"> grep io_uring_setup /proc/kallsyms\n"
"0000000000000000 t __pfx_io_uring_setup\n"
"0000000000000000 t io_uring_setup\n"
"0000000000000000 T __pfx___x64_sys_io_uring_setup\n"
"0000000000000000 T __x64_sys_io_uring_setup\n"
"0000000000000000 T __pfx___ia32_sys_io_uring_setup\n"
"0000000000000000 T __ia32_sys_io_uring_setup\n"
"0000000000000000 d event_exit__io_uring_setup\n"
"0000000000000000 d event_enter__io_uring_setup\n"
"0000000000000000 d __syscall_meta__io_uring_setup\n"
"0000000000000000 d args__io_uring_setup\n"
"0000000000000000 d types__io_uring_setup\n"
"0000000000000000 d __event_exit__io_uring_setup\n"
"0000000000000000 d __event_enter__io_uring_setup\n"
"0000000000000000 d __p_syscall_meta__io_uring_setup\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:1169
#, fuzzy
msgid "If it prints something like above, you can use `io_uring`."
msgstr "Se imprimir algo como acima, pode utilizar `io_uring`."

#. type: Block title
#: upstream/_guides/vertx-reference.adoc:1172
#, fuzzy, no-wrap
msgid "Troubleshooting"
msgstr "Resolução de problemas"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:1177
#, fuzzy
msgid "`io_uring` support is still experimental.  Check the https://github.com/netty/netty-incubator-transport-io_uring#faq[Netty io_uring FAQ] if you see some odd behavior.  Also, the https://github.com/netty/netty-incubator-transport-io_uring/issues/152[netty io_uring was slower than epoll] issue describes a few configuration mistakes."
msgstr "`io_uring` ainda é experimental. Verifique o  link:https://github.com/netty/netty-incubator-transport-io_uring#faq[FAQ do Netty io_uring] se você encontrar algum comportamento estranho. Além disso, o problema do  link:https://github.com/netty/netty-incubator-transport-io_uring/issues/152[netty io_uring era mais lento que o epoll] descreve alguns erros de configuração."

#. type: delimited block =
#: upstream/_guides/vertx-reference.adoc:1180
#, fuzzy
msgid "Domain sockets are not yet supported with io_uring."
msgstr "Os sockets de domínio ainda não são suportados pelo io_uring."

#. type: delimited block =
#: upstream/_guides/vertx-reference.adoc:1182
#, fuzzy
msgid "The Vert.x asynchronous file system API does not use io_uring yet."
msgstr "A API assíncrona do sistema de ficheiros Vert.x ainda não utiliza io_uring."

#. type: Title ==
#: upstream/_guides/vertx-reference.adoc:1184
#, fuzzy, no-wrap
msgid "Deploy on read-only environments"
msgstr "Implementar em ambientes só de leitura"

#. type: delimited block =
#: upstream/_guides/vertx-reference.adoc:1187
#, fuzzy
msgid "In environments with read only file systems you may receive errors of the form:"
msgstr "Em ambientes com sistemas de ficheiros só de leitura, pode receber erros do tipo:"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:1191
#, no-wrap
msgid "java.lang.IllegalStateException: Failed to create cache dir\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:1194
#, fuzzy
msgid "Assuming `/tmp/` is writable this can be fixed by setting the `vertx.cacheDirBase` property to point to a directory in `/tmp/` for instance in OpenShift by creating an environment variable `JAVA_OPTS` with the value `-Dvertx.cacheDirBase=/tmp/vertx`."
msgstr "Assumindo que `/tmp/` é gravável, isso pode ser corrigido definindo a propriedade `vertx.cacheDirBase` para apontar para um diretório em `/tmp/`, por exemplo, no OpenShift, criando uma variável de ambiente `JAVA_OPTS` com o valor `-Dvertx.cacheDirBase=/tmp/vertx`."

#. type: Title ==
#: upstream/_guides/vertx-reference.adoc:1196
#, fuzzy, no-wrap
msgid "Customize the Vert.x configuration"
msgstr "Personalizar a configuração do Vert.x"

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:1201
#, fuzzy
msgid "The configuration of the managed Vert.x instance can be provided using the `application.properties` file, but also using _special beans_.  CDI beans exposing the `io.quarkus.vertx.VertxOptionsCustomizer` interface can be used to customize the Vert.x configuration.  For example, the following customizer change the `tmp` base directory:"
msgstr "A configuração da instância gerida do Vert.x pode ser fornecida utilizando o ficheiro `application.properties`, mas também utilizando _beans especiais_. Os beans CDI que expõem a interface `io.quarkus.vertx.VertxOptionsCustomizer` podem ser utilizados para personalizar a configuração do Vert.x. Por exemplo, o seguinte personalizador altera o diretório base `tmp`:"

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:1206
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyCustomizer implements VertxOptionsCustomizer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx-reference.adoc:1212
#, no-wrap
msgid ""
"    @Override\n"
"    public void accept(VertxOptions options) {\n"
"        options.setFileSystemOptions(new FileSystemOptions().setFileCacheDir(\"target\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx-reference.adoc:1215
#, fuzzy
msgid "The _customizer_ beans received the `VertxOptions` (coming from the application configuration), and can modify them."
msgstr "Os beans _do personalizador_ receberam o `VertxOptions` (proveniente da configuração da aplicação) e podem modificá-lo."
