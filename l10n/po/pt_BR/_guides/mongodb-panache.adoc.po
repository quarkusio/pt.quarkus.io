# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:24+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/mongodb-panache.adoc:6
#, fuzzy, no-wrap
msgid "Simplified MongoDB with Panache"
msgstr "MongoDB simplificado com Panache"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:14
#, fuzzy
msgid "MongoDB is a well known NoSQL Database that is widely used, but using its raw API can be cumbersome as you need to express your entities and your queries as a MongoDB link:{mongodb-doc-root-url}/fundamentals/data-formats/documents/#document[`Document`]."
msgstr "A MongoDB é uma base de dados NoSQL bem conhecida e amplamente utilizada, mas a utilização da sua API em bruto pode ser complicada, uma vez que é necessário expressar as suas entidades e as suas consultas como uma  link:{mongodb-doc-root-url}/fundamentals/data-formats/documents/#document[`Document`]."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:16
#, fuzzy
msgid "MongoDB with Panache provides active record style entities (and repositories) like you have in xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache] and focuses on making your entities trivial and fun to write in Quarkus."
msgstr "O MongoDB com Panache fornece entidades de estilo de registo ativo (e repositórios) como no  link:hibernate-orm-panache.html[Hibernate ORM com Panache] e concentra-se em tornar as suas entidades triviais e divertidas de escrever no Quarkus."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:18
#, fuzzy
msgid "It is built on top of the xref:mongodb.adoc[MongoDB Client] extension."
msgstr "É construído com base na extensão do  link:mongodb.html[cliente MongoDB]."

#. type: Title ==
#: upstream/_guides/mongodb-panache.adoc:19
#, fuzzy, no-wrap
msgid "First: an example"
msgstr "Primeiro: um exemplo"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:22
#, fuzzy
msgid "Panache allows you to write your MongoDB entities like this:"
msgstr "O Panache permite-lhe escrever as suas entidades MongoDB desta forma:"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:29
#: upstream/_guides/mongodb-panache.adoc:288
#, no-wrap
msgid ""
"public class Person extends PanacheMongoEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:33
#: upstream/_guides/mongodb-panache.adoc:292
#, no-wrap
msgid ""
"    public static Person findByName(String name){\n"
"        return find(\"name\", name).firstResult();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:37
#: upstream/_guides/mongodb-panache.adoc:296
#, no-wrap
msgid ""
"    public static List<Person> findAlive(){\n"
"        return list(\"status\", Status.Alive);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:42
#: upstream/_guides/mongodb-panache.adoc:301
#, no-wrap
msgid ""
"    public static void deleteLoics(){\n"
"        delete(\"name\", \"Loïc\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:46
#, fuzzy
msgid "You have noticed how much more compact and readable the code is compared to using the MongoDB API? Does this look interesting? Read on!"
msgstr "Já reparou como o código é muito mais compacto e legível em comparação com a utilização da API MongoDB? Isto parece-lhe interessante? Continue a ler!"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:50
#, fuzzy
msgid "the `list()` method might be surprising at first. It takes fragments of PanacheQL queries (subset of JPQL) and contextualizes the rest.  That makes for very concise but yet readable code.  MongoDB native queries are also supported."
msgstr "o método `list()` pode ser surpreendente à primeira vista. Ele pega fragmentos de consultas PanacheQL (subconjunto de JPQL) e contextualiza o resto. Isso torna o código muito conciso, mas ainda assim legível. As consultas nativas do MongoDB também são suportadas."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:53
#, fuzzy
msgid "what was described above is essentially the link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[active record pattern], sometimes just called the entity pattern.  MongoDB with Panache also allows for the use of the more classical link:https://martinfowler.com/eaaCatalog/repository.html[repository pattern] via `PanacheMongoRepository`."
msgstr "o que foi descrito acima é essencialmente o  link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[padrão de registo ativo], por vezes chamado apenas de padrão de entidade. O MongoDB com Panache também permite a utilização do  link:https://martinfowler.com/eaaCatalog/repository.html[padrão de repositório] mais clássico através de `PanacheMongoRepository`."

#. type: Title ==
#: upstream/_guides/mongodb-panache.adoc:54
#, fuzzy, no-wrap
msgid "Solution"
msgstr "Solução"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:58
#, fuzzy
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "Recomendamos que siga as instruções nas secções seguintes e crie a aplicação passo a passo. No entanto, pode ir diretamente para o exemplo completo."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:60
#, fuzzy
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Clonar o repositório Git: `git clone {quickstarts-clone-url}`, ou descarregar um {quickstarts-archive-url}[arquivo]."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:62
#, fuzzy
msgid "The solution is located in the `mongodb-panache-quickstart` link:{quickstarts-tree-url}/mongodb-panache-quickstart[directory]."
msgstr "A solução está localizada no  link:{quickstarts-tree-url}/mongodb-panache-quickstart[diretório] `mongodb-panache-quickstart`."

#. type: Title ==
#: upstream/_guides/mongodb-panache.adoc:63
#, fuzzy, no-wrap
msgid "Creating the Maven project"
msgstr "Criar o projeto Maven"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:66
#, fuzzy
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "Primeiro, precisamos de um novo projeto. Crie um novo projeto com o seguinte comando:"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:73
#, fuzzy
msgid "This command generates a Maven structure importing the RESTEasy Reactive Jackson and MongoDB with Panache extensions.  After this, the `quarkus-mongodb-panache` extension has been added to your build file."
msgstr "Este comando gera uma estrutura Maven importando as extensões RESTEasy Reactive Jackson e MongoDB com Panache. Depois disso, a extensão `quarkus-mongodb-panache` foi adicionada ao seu arquivo de compilação."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:75
#, fuzzy
msgid "If you don't want to generate a new project, add the dependency in your build file:"
msgstr "Se não quiser gerar um novo projeto, adicione a dependência no seu ficheiro de compilação:"

#. type: Block title
#: upstream/_guides/mongodb-panache.adoc:77
#: upstream/_guides/mongodb-panache.adoc:96
#: upstream/_guides/mongodb-panache.adoc:1041
#: upstream/_guides/mongodb-panache.adoc:1128
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:83
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-mongodb-panache</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/mongodb-panache.adoc:86
#: upstream/_guides/mongodb-panache.adoc:116
#: upstream/_guides/mongodb-panache.adoc:1051
#: upstream/_guides/mongodb-panache.adoc:1138
#, fuzzy, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:89
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-mongodb-panache\")\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/mongodb-panache.adoc:94
#, fuzzy
msgid "If your project is already configured to use other annotation processors, you will need to additionally add the Panache annotation processor:"
msgstr "Se o seu projeto já estiver configurado para utilizar outros processadores de anotações, terá de adicionar adicionalmente o processador de anotações Panache:"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:113
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-compiler-plugin</artifactId>\n"
"    <version>${compiler-plugin.version}</version>\n"
"    <configuration>\n"
"        <parameters>${maven.compiler.parameters}</parameters>\n"
"        <annotationProcessorPaths>\n"
"            <!-- Your existing annotation processor(s)... -->\n"
"            <path>\n"
"                <groupId>io.quarkus</groupId>\n"
"                <artifactId>quarkus-panache-common</artifactId>\n"
"                <version>${quarkus.platform.version}</version>\n"
"            </path>\n"
"        </annotationProcessorPaths>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:119
#, no-wrap
msgid "annotationProcessor(\"io.quarkus:quarkus-panache-common\")\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/mongodb-panache.adoc:122
#, fuzzy, no-wrap
msgid "Setting up and configuring MongoDB with Panache"
msgstr "Instalação e configuração do MongoDB com o Panache"

#. type: delimited block =
#: upstream/_guides/mongodb-panache.adoc:125
#, fuzzy
msgid "To get started:"
msgstr "Para começar:"

#. type: delimited block =
#: upstream/_guides/mongodb-panache.adoc:127
#, fuzzy
msgid "add your settings in `{config-file}`"
msgstr "adicione as suas definições em `{config-file}`"

#. type: delimited block =
#: upstream/_guides/mongodb-panache.adoc:128
#, fuzzy
msgid "Make your entities extend `PanacheMongoEntity` (optional if you are using the repository pattern)"
msgstr "Faça com que suas entidades estendam `PanacheMongoEntity` (opcional se você estiver usando o padrão de repositório)"

#. type: delimited block =
#: upstream/_guides/mongodb-panache.adoc:129
#, fuzzy
msgid "Optionally, use the `@MongoEntity` annotation to specify the name of the collection, the name of the database or the name of the client."
msgstr "Opcionalmente, utilize a anotação `@MongoEntity` para especificar o nome da coleção, o nome da base de dados ou o nome do cliente."

#. type: delimited block =
#: upstream/_guides/mongodb-panache.adoc:131
#, fuzzy
msgid "Then add the relevant configuration properties in `{config-file}`."
msgstr "Em seguida, adicione as propriedades de configuração relevantes em `{config-file}`."

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:138
#, no-wrap
msgid ""
"# configure the MongoDB client for a replica set of two nodes\n"
"quarkus.mongodb.connection-string = mongodb://mongo1:27017,mongo2:27017\n"
"# mandatory if you don't specify the name of the database using @MongoEntity\n"
"quarkus.mongodb.database = person\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:141
#, fuzzy
msgid "The `quarkus.mongodb.database` property will be used by MongoDB with Panache to determine the name of the database where your entities will be persisted (if not overridden by `@MongoEntity`)."
msgstr "A propriedade `quarkus.mongodb.database` será utilizada pelo MongoDB com Panache para determinar o nome da base de dados onde as suas entidades serão persistidas (se não for substituída por `@MongoEntity`)."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:143
#, fuzzy
msgid "The `@MongoEntity` annotation allows configuring:"
msgstr "A anotação `@MongoEntity` permite a configuração:"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:145
#, fuzzy
msgid "the name of the client for multitenant application, see xref:mongodb.adoc#multiple-mongodb-clients[Multiple MongoDB Clients]. Otherwise, the default client will be used."
msgstr "o nome do cliente para a aplicação multitenant, consulte  link:mongodb.html#multiple-mongodb-clients[Vários clientes MongoDB]. Caso contrário, o cliente padrão será usado."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:146
#, fuzzy
msgid "the name of the database, otherwise the `quarkus.mongodb.database` property or a link:{mongodb-doc-root-url}#multitenancy[`MongoDatabaseResolver`] implementation will be used."
msgstr "o nome da base de dados; caso contrário, será utilizada a propriedade `quarkus.mongodb.database` ou uma  link:{mongodb-doc-root-url}#multitenancy[`MongoDatabaseResolver`] será utilizada."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:147
#, fuzzy
msgid "the name of the collection, otherwise the simple name of the class will be used."
msgstr "o nome da coleção; caso contrário, será utilizado o nome simples da classe."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:149
#, fuzzy
msgid "For advanced configuration of the MongoDB client, you can follow the xref:mongodb.adoc#configuring-the-mongodb-database[Configuring the MongoDB database guide]."
msgstr "Para uma configuração avançada do cliente MongoDB, pode seguir o  link:mongodb.html#configuring-the-mongodb-database[guia Configurar a base de dados MongoDB]."

#. type: Title ==
#: upstream/_guides/mongodb-panache.adoc:150
#, fuzzy, no-wrap
msgid "Solution 1: using the active record pattern"
msgstr "Solução 1: utilizar o padrão de registo ativo"

#. type: Title ===
#: upstream/_guides/mongodb-panache.adoc:152
#: upstream/_guides/mongodb-panache.adoc:305
#, fuzzy, no-wrap
msgid "Defining your entity"
msgstr "Definir a sua entidade"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:156
#, fuzzy
msgid "To define a Panache entity, simply extend `PanacheMongoEntity` and add your columns as public fields.  You can add the `@MongoEntity` annotation to your entity if you need to customize the name of the collection, the database, or the client."
msgstr "Para definir uma entidade Panache, basta estender `PanacheMongoEntity` e adicionar suas colunas como campos públicos. Pode adicionar a anotação `@MongoEntity` à sua entidade se precisar de personalizar o nome da coleção, a base de dados ou o cliente."

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:162
#, no-wrap
msgid ""
"@MongoEntity(collection=\"ThePerson\")\n"
"public class Person extends PanacheMongoEntity {\n"
"    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:166
#, no-wrap
msgid ""
"    // will be persisted as a 'birth' field in MongoDB\n"
"    @BsonProperty(\"birth\")\n"
"    public LocalDate birthDate;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:169
#, no-wrap
msgid ""
"    public Status status;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:172
#: upstream/_guides/mongodb-panache.adoc:322
#, fuzzy
msgid "Annotating with `@MongoEntity` is optional. Here the entity will be stored in the `ThePerson` collection instead of the default `Person` collection."
msgstr "Anotar com `@MongoEntity` é opcional. Neste caso, a entidade será armazenada na coleção `ThePerson` em vez da coleção predefinida `Person`."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:174
#, fuzzy
msgid "MongoDB with Panache uses the link:{mongodb-doc-root-url}/fundamentals/data-formats/document-data-format-pojo[PojoCodecProvider] to convert your entities to a MongoDB `Document`."
msgstr "MongoDB com Panache usa o  link:{mongodb-doc-root-url}/fundamentals/data-formats/document-data-format-pojo[PojoCodecProvider] para converter suas entidades para um MongoDB `Document`."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:176
#: upstream/_guides/mongodb-panache.adoc:326
#, fuzzy
msgid "You will be allowed to use the following annotations to customize this mapping:"
msgstr "Poderá utilizar as seguintes anotações para personalizar este mapeamento:"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:178
#: upstream/_guides/mongodb-panache.adoc:328
#, fuzzy
msgid "`@BsonId`: allows you to customize the ID field, see xref:custom-ids[Custom IDs]."
msgstr "`@BsonId`permite-lhe personalizar o campo ID, ver  link:#custom-ids[IDs personalizados]."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:179
#: upstream/_guides/mongodb-panache.adoc:329
#, fuzzy
msgid "`@BsonProperty`: customize the serialized name of the field."
msgstr "`@BsonProperty`personalizar o nome serializado do campo."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:180
#: upstream/_guides/mongodb-panache.adoc:330
#, fuzzy
msgid "`@BsonIgnore`: ignore a field during the serialization."
msgstr "`@BsonIgnore`: ignorar um campo durante a serialização."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:182
#, fuzzy
msgid "If you need to write accessors, you can:"
msgstr "Se precisar de escrever acessores, pode fazê-lo:"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:186
#: upstream/_guides/mongodb-panache.adoc:1061
#, no-wrap
msgid "public class Person extends PanacheMongoEntity {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:190
#, no-wrap
msgid ""
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:195
#: upstream/_guides/mongodb-panache.adoc:915
#, no-wrap
msgid ""
"    // return name as uppercase in the model\n"
"    public String getName(){\n"
"        return name.toUpperCase();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:201
#: upstream/_guides/mongodb-panache.adoc:921
#, no-wrap
msgid ""
"    // store all names in lowercase in the DB\n"
"    public void setName(String name){\n"
"        this.name = name.toLowerCase();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:205
#, fuzzy
msgid "And thanks to our field access rewrite, when your users read `person.name` they will actually call your `getName()` accessor, and similarly for field writes and the setter.  This allows for proper encapsulation at runtime as all fields calls will be replaced by the corresponding getter/setter calls."
msgstr "E graças à nossa reescrita de acesso a campos, quando os seus utilizadores lerem `person.name`, chamarão efetivamente o seu acessor `getName()` e, de forma semelhante, para as escritas de campo e o setter. Isso permite um encapsulamento adequado em tempo de execução, pois todas as chamadas de campos serão substituídas pelas chamadas de getter/setter correspondentes."

#. type: Title ===
#: upstream/_guides/mongodb-panache.adoc:206
#: upstream/_guides/mongodb-panache.adoc:374
#, fuzzy, no-wrap
msgid "Most useful operations"
msgstr "Operações mais úteis"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:209
#, fuzzy
msgid "Once you have written your entity, here are the most common operations you will be able to perform:"
msgstr "Depois de ter escrito a sua entidade, eis as operações mais comuns que poderá efetuar:"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:217
#: upstream/_guides/mongodb-panache.adoc:385
#, no-wrap
msgid ""
"// creating a person\n"
"Person person = new Person();\n"
"person.name = \"Loïc\";\n"
"person.birth = LocalDate.of(1910, Month.FEBRUARY, 1);\n"
"person.status = Status.Alive;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:220
#, no-wrap
msgid ""
"// persist it: if you keep the default ObjectId ID field, it will be populated by the MongoDB driver\n"
"person.persist();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:222
#: upstream/_guides/mongodb-panache.adoc:390
#: upstream/_guides/mongodb-panache.adoc:941
#, no-wrap
msgid "person.status = Status.Dead;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:225
#, no-wrap
msgid ""
"// Your must call update() in order to send your entity modifications to MongoDB\n"
"person.update();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:228
#, no-wrap
msgid ""
"// delete it\n"
"person.delete();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:231
#, no-wrap
msgid ""
"// getting a list of all Person entities\n"
"List<Person> allPersons = Person.listAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:236
#, no-wrap
msgid ""
"// finding a specific person by ID\n"
"// here we build a new ObjectId, but you can also retrieve it from the existing entity after being persisted\n"
"ObjectId personId = new ObjectId(idAsString);\n"
"person = Person.findById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:240
#, no-wrap
msgid ""
"// finding a specific person by ID via an Optional\n"
"Optional<Person> optional = Person.findByIdOptional(personId);\n"
"person = optional.orElseThrow(() -> new NotFoundException());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:243
#, no-wrap
msgid ""
"// finding all living persons\n"
"List<Person> livingPersons = Person.list(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:246
#, no-wrap
msgid ""
"// counting all persons\n"
"long countAll = Person.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:249
#, no-wrap
msgid ""
"// counting all living persons\n"
"long countAlive = Person.count(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:252
#, no-wrap
msgid ""
"// delete all living persons\n"
"Person.delete(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:255
#, no-wrap
msgid ""
"// delete all persons\n"
"Person.deleteAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:258
#, no-wrap
msgid ""
"// delete by id\n"
"boolean deleted = Person.deleteById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:261
#, no-wrap
msgid ""
"// set the name of all living persons to 'Mortal'\n"
"long updated = Person.update(\"name\", \"Mortal\").where(\"status\", Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:264
#: upstream/_guides/mongodb-panache.adoc:432
#, fuzzy
msgid "All `list` methods have equivalent `stream` versions."
msgstr "Todos os métodos `list` têm versões equivalentes `stream`."

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:272
#, no-wrap
msgid ""
"Stream<Person> persons = Person.streamAll();\n"
"List<String> namesButEmmanuels = persons\n"
"    .map(p -> p.name.toLowerCase() )\n"
"    .filter( n -> ! \"emmanuel\".equals(n) )\n"
"    .collect(Collectors.toList());\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:275
#: upstream/_guides/mongodb-panache.adoc:443
#, fuzzy
msgid "A `persistOrUpdate()` method exist that persist or update an entity in the database, it uses the __upsert__ capability of MongoDB to do it in a single query."
msgstr "Existe um método `persistOrUpdate()` que persiste ou actualiza uma entidade na base de dados e utiliza a capacidade de _upsert_ do MongoDB para o fazer numa única consulta."

#. type: Title ===
#: upstream/_guides/mongodb-panache.adoc:276
#, fuzzy, no-wrap
msgid "Adding entity methods"
msgstr "Adição de métodos de entidade"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:281
#, fuzzy
msgid "Add custom queries on your entities inside the entities themselves.  That way, you and your co-workers can find them easily, and queries are co-located with the object they operate on.  Adding them as static methods in your entity class is the Panache Active Record way."
msgstr "Adicione consultas personalizadas às suas entidades dentro das próprias entidades. Desta forma, você e os seus colegas de trabalho podem encontrá-las facilmente, e as consultas são localizadas juntamente com o objeto em que operam. Adicioná-las como métodos estáticos na sua classe de entidade é a forma de fazer o Panache Active Record."

#. type: Title ==
#: upstream/_guides/mongodb-panache.adoc:303
#, fuzzy, no-wrap
msgid "Solution 2: using the repository pattern"
msgstr "Solução 2: utilizar o padrão de repositório"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:309
#, fuzzy
msgid "You can define your entity as regular POJO.  You can add the `@MongoEntity` annotation to your entity if you need to customize the name of the collection, the database, or the client."
msgstr "Pode definir a sua entidade como um POJO normal. Pode adicionar a anotação `@MongoEntity` à sua entidade se precisar de personalizar o nome da coleção, da base de dados ou do cliente."

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:319
#, no-wrap
msgid ""
"@MongoEntity(collection=\"ThePerson\")\n"
"public class Person  {\n"
"    public ObjectId id; // used by MongoDB for the _id field\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:324
#, fuzzy
msgid "MongoDB with Panache uses the link:{mongodb-doc-root-url}/fundamentals/data-formats/document-data-format-pojo/[PojoCodecProvider] to convert your entities to a MongoDB `Document`."
msgstr "MongoDB com Panache usa o  link:{mongodb-doc-root-url}/fundamentals/data-formats/document-data-format-pojo/[PojoCodecProvider] para converter suas entidades para um MongoDB `Document`."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:333
#, fuzzy
msgid "You can use public fields or private fields with getters/setters.  If you don't want to manage the ID by yourself, you can make your entity extends `PanacheMongoEntity`."
msgstr "Pode utilizar campos públicos ou campos privados com getters/setters. Se não quiser gerir o ID por si próprio, pode fazer com que a sua entidade estenda `PanacheMongoEntity`."

#. type: Title ===
#: upstream/_guides/mongodb-panache.adoc:334
#, fuzzy, no-wrap
msgid "Defining your repository"
msgstr "Definir o seu repositório"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:338
#, fuzzy
msgid "When using Repositories, you can get the exact same convenient methods as with the active record pattern, injected in your Repository, by making them implements `PanacheMongoRepository`:"
msgstr "Ao utilizar Repositórios, pode obter exatamente os mesmos métodos convenientes do padrão de registo ativo, injectados no seu Repositório, tornando-os implements `PanacheMongoRepository`:"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:343
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheMongoRepository<Person> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:345
#, no-wrap
msgid "   // put your custom logic here as instance methods\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:349
#, no-wrap
msgid ""
"   public Person findByName(String name){\n"
"       return find(\"name\", name).firstResult();\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:353
#, no-wrap
msgid ""
"   public List<Person> findAlive(){\n"
"       return list(\"status\", Status.Alive);\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:358
#, no-wrap
msgid ""
"   public void deleteLoics(){\n"
"       delete(\"name\", \"Loïc\");\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:362
#, fuzzy
msgid "All the operations that are defined on `PanacheMongoEntityBase` are available on your repository, so using it is exactly the same as using the active record pattern, except you need to inject it:"
msgstr "Todas as operações definidas em `PanacheMongoEntityBase` estão disponíveis no seu repositório, pelo que a sua utilização é exatamente a mesma que a do padrão de registo ativo, exceto que é necessário injectá-lo:"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:367
#, no-wrap
msgid ""
"@Inject\n"
"PersonRepository personRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:372
#, no-wrap
msgid ""
"@GET\n"
"public long count(){\n"
"    return personRepository.count();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:377
#, fuzzy
msgid "Once you have written your repository, here are the most common operations you will be able to perform:"
msgstr "Depois de ter escrito o seu repositório, eis as operações mais comuns que poderá efetuar:"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:388
#, no-wrap
msgid ""
"// persist it: if you keep the default ObjectId ID field, it will be populated by the MongoDB driver\n"
"personRepository.persist(person);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:393
#, no-wrap
msgid ""
"// Your must call update() in order to send your entity modifications to MongoDB\n"
"personRepository.update(person);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:396
#, no-wrap
msgid ""
"// delete it\n"
"personRepository.delete(person);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:399
#, no-wrap
msgid ""
"// getting a list of all Person entities\n"
"List<Person> allPersons = personRepository.listAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:404
#, no-wrap
msgid ""
"// finding a specific person by ID\n"
"// here we build a new ObjectId, but you can also retrieve it from the existing entity after being persisted\n"
"ObjectId personId = new ObjectId(idAsString);\n"
"person = personRepository.findById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:408
#, no-wrap
msgid ""
"// finding a specific person by ID via an Optional\n"
"Optional<Person> optional = personRepository.findByIdOptional(personId);\n"
"person = optional.orElseThrow(() -> new NotFoundException());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:411
#, no-wrap
msgid ""
"// finding all living persons\n"
"List<Person> livingPersons = personRepository.list(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:414
#, no-wrap
msgid ""
"// counting all persons\n"
"long countAll = personRepository.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:417
#, no-wrap
msgid ""
"// counting all living persons\n"
"long countAlive = personRepository.count(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:420
#, no-wrap
msgid ""
"// delete all living persons\n"
"personRepository.delete(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:423
#, no-wrap
msgid ""
"// delete all persons\n"
"personRepository.deleteAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:426
#, no-wrap
msgid ""
"// delete by id\n"
"boolean deleted = personRepository.deleteById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:429
#, no-wrap
msgid ""
"// set the name of all living persons to 'Mortal'\n"
"long updated = personRepository.update(\"name\", \"Mortal\").where(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:440
#, no-wrap
msgid ""
"Stream<Person> persons = personRepository.streamAll();\n"
"List<String> namesButEmmanuels = persons\n"
"    .map(p -> p.name.toLowerCase() )\n"
"    .filter( n -> ! \"emmanuel\".equals(n) )\n"
"    .collect(Collectors.toList());\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:447
#, fuzzy
msgid "The rest of the documentation show usages based on the active record pattern only, but keep in mind that they can be performed with the repository pattern as well.  The repository pattern examples have been omitted for brevity."
msgstr "O resto da documentação mostra utilizações baseadas apenas no padrão de registo ativo, mas tenha em atenção que também podem ser executadas com o padrão de repositório. Os exemplos do padrão de repositório foram omitidos por brevidade."

#. type: Title ==
#: upstream/_guides/mongodb-panache.adoc:448
#, fuzzy, no-wrap
msgid "Writing a Jakarta REST resource"
msgstr "Escrever um recurso Jakarta REST"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:451
#, fuzzy
msgid "First, include one of the RESTEasy extensions to enable Jakarta REST endpoints, for example, add the `io.quarkus:quarkus-resteasy-reactive-jackson` dependency for Jakarta REST and JSON support."
msgstr "Primeiro, inclua uma das extensões do RESTEasy para habilitar os pontos de extremidade Jakarta REST, por exemplo, adicione a dependência `io.quarkus:quarkus-resteasy-reactive-jackson` para suporte a Jakarta REST e JSON."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:453
#, fuzzy
msgid "Then, you can create the following resource to create/read/update/delete your Person entity:"
msgstr "Em seguida, pode criar o seguinte recurso para criar/ler/atualizar/eliminar a sua entidade Pessoa:"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:460
#, no-wrap
msgid ""
"@Path(\"/persons\")\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"public class PersonResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:465
#, no-wrap
msgid ""
"    @GET\n"
"    public List<Person> list() {\n"
"        return Person.listAll();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:471
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/{id}\")\n"
"    public Person get(String id) {\n"
"        return Person.findById(new ObjectId(id));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:477
#, no-wrap
msgid ""
"    @POST\n"
"    public Response create(Person person) {\n"
"        person.persist();\n"
"        return Response.created(URI.create(\"/persons/\" + person.id)).build();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:483
#, no-wrap
msgid ""
"    @PUT\n"
"    @Path(\"/{id}\")\n"
"    public void update(String id, Person person) {\n"
"        person.update();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:493
#, no-wrap
msgid ""
"    @DELETE\n"
"    @Path(\"/{id}\")\n"
"    public void delete(String id) {\n"
"        Person person = Person.findById(new ObjectId(id));\n"
"        if(person == null) {\n"
"            throw new NotFoundException();\n"
"        }\n"
"        person.delete();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:499
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/search/{name}\")\n"
"    public Person search(String name) {\n"
"        return Person.findByName(name);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:506
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/count\")\n"
"    public Long count() {\n"
"        return Person.count();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/mongodb-panache.adoc:508
#, fuzzy, no-wrap
msgid "Advanced Query"
msgstr "Consulta avançada"

#. type: Title ===
#: upstream/_guides/mongodb-panache.adoc:510
#, fuzzy, no-wrap
msgid "Paging"
msgstr "Paging"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:514
#, fuzzy
msgid "You should only use `list` and `stream` methods if your collection contains small enough data sets. For larger data sets you can use the `find` method equivalents, which return a `PanacheQuery` on which you can do paging:"
msgstr "Só deve utilizar os métodos `list` e `stream` se a sua coleção contiver conjuntos de dados suficientemente pequenos. Para conjuntos de dados maiores, pode utilizar os equivalentes do método `find`, que devolvem um `PanacheQuery` no qual pode efetuar a paginação:"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:519
#: upstream/_guides/mongodb-panache.adoc:555
#, no-wrap
msgid ""
"// create a query for all living persons\n"
"PanacheQuery<Person> livingPersons = Person.find(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:522
#, no-wrap
msgid ""
"// make it use pages of 25 entries at a time\n"
"livingPersons.page(Page.ofSize(25));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:525
#, no-wrap
msgid ""
"// get the first page\n"
"List<Person> firstPage = livingPersons.list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:528
#, no-wrap
msgid ""
"// get the second page\n"
"List<Person> secondPage = livingPersons.nextPage().list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:531
#, no-wrap
msgid ""
"// get page 7\n"
"List<Person> page7 = livingPersons.page(Page.of(7, 25)).list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:534
#, no-wrap
msgid ""
"// get the number of pages\n"
"int numberOfPages = livingPersons.pageCount();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:537
#, no-wrap
msgid ""
"// get the total number of entities returned by this query without paging\n"
"int count = livingPersons.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:543
#, no-wrap
msgid ""
"// and you can chain methods of course\n"
"return Person.find(\"status\", Status.Alive)\n"
"    .page(Page.ofSize(25))\n"
"    .nextPage()\n"
"    .stream()\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:546
#, fuzzy
msgid "The `PanacheQuery` type has many other methods to deal with paging and returning streams."
msgstr "O tipo `PanacheQuery` tem muitos outros métodos para lidar com fluxos de paginação e de retorno."

#. type: Title ===
#: upstream/_guides/mongodb-panache.adoc:547
#, fuzzy, no-wrap
msgid "Using a range instead of pages"
msgstr "Utilizar um intervalo em vez de páginas"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:550
#, fuzzy
msgid "`PanacheQuery` also allows range-based queries."
msgstr "`PanacheQuery` também permite consultas baseadas em intervalos."

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:558
#, no-wrap
msgid ""
"// make it use a range: start at index 0 until index 24 (inclusive).\n"
"livingPersons.range(0, 24);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:561
#, no-wrap
msgid ""
"// get the range\n"
"List<Person> firstRange = livingPersons.list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:564
#, no-wrap
msgid ""
"// to get the next range, you need to call range again\n"
"List<Person> secondRange = livingPersons.range(25, 49).list();\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/mongodb-panache.adoc:570
#, fuzzy
msgid "You cannot mix ranges and pages: if you use a range, all methods that depend on having a current page will throw an `UnsupportedOperationException`; you can switch back to paging using `page(Page)` or `page(int, int)`."
msgstr "Não é possível misturar intervalos e páginas: se utilizar um intervalo, todos os métodos que dependem da existência de uma página atual lançarão um `UnsupportedOperationException`; pode voltar a utilizar a paginação utilizando `page(Page)` ou `page(int, int)`."

#. type: Title ===
#: upstream/_guides/mongodb-panache.adoc:572
#, fuzzy, no-wrap
msgid "Sorting"
msgstr "Ordenação"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:575
#, fuzzy
msgid "All methods accepting a query string also accept an optional `Sort` parameter, which allows you to abstract your sorting:"
msgstr "Todos os métodos que aceitam uma cadeia de consulta também aceitam um parâmetro opcional `Sort`, que lhe permite abstrair a sua ordenação:"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:579
#, no-wrap
msgid "List<Person> persons = Person.list(Sort.by(\"name\").and(\"birth\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:582
#, no-wrap
msgid ""
"// and with more restrictions\n"
"List<Person> persons = Person.list(\"status\", Sort.by(\"name\").and(\"birth\"), Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:585
#, fuzzy
msgid "The `Sort` class has plenty of methods for adding columns and specifying sort direction."
msgstr "A classe `Sort` tem muitos métodos para adicionar colunas e especificar a direção de ordenação."

#. type: Title ===
#: upstream/_guides/mongodb-panache.adoc:586
#, fuzzy, no-wrap
msgid "Simplified queries"
msgstr "Consultas simplificadas"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:589
#, fuzzy
msgid "Normally, MongoDB queries are of this form: `{'firstname': 'John', 'lastname':'Doe'}`, this is what we call MongoDB native queries."
msgstr "Normalmente, as consultas MongoDB têm este formato: `{'firstname': 'John', 'lastname':'Doe'}`, isto é o que chamamos de consultas nativas do MongoDB."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:592
#, fuzzy
msgid "You can use them if you want, but we also support what we call **PanacheQL** that can be seen as a subset of link:https://docs.oracle.com/javaee/7/tutorial/persistence-querylanguage.htm#BNBTG[JPQL] (or link:{hibernate-orm-docs-url}#hql[HQL]) and allows you to easily express a query.  MongoDB with Panache will then map it to a MongoDB native query."
msgstr "Pode usá-los se quiser, mas também suportamos o que chamamos de *PanacheQL*, que pode ser visto como um subconjunto de  link:https://docs.oracle.com/javaee/7/tutorial/persistence-querylanguage.htm#BNBTG[JPQL] (ou  link:{hibernate-orm-docs-url}#hql[HQL]) e permite expressar facilmente uma consulta. O MongoDB com Panache irá então mapeá-la para uma consulta nativa do MongoDB."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:594
#, fuzzy
msgid "If your query does not start with `{`, we will consider it a PanacheQL query:"
msgstr "Se a sua consulta não começar por `{`, considerá-la-emos uma consulta PanacheQL:"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:596
#, fuzzy
msgid "`<singlePropertyName>` (and single parameter) which will expand to `{'singleColumnName': '?1'}`"
msgstr "`&amp;lt;singlePropertyName&amp;gt;` (e um único parâmetro) que se expandirá para `{'singleColumnName': '?1'}`"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:597
#, fuzzy
msgid "`<query>` will expand to `{<query>}` where we will map the PanacheQL query to MongoDB native query form. We support the following operators that will be mapped to the corresponding MongoDB operators: 'and', 'or' ( mixing 'and' and 'or' is not currently supported), '=', '>', '>=', '<', '<=', '!=', 'is null', 'is not null', and 'like' that is mapped to the MongoDB `$regex` operator (both String and JavaScript patterns are supported)."
msgstr "`&amp;lt;query&amp;gt;` será expandido para `{&amp;lt;query&amp;gt;}`, onde mapearemos a consulta PanacheQL para a forma de consulta nativa do MongoDB. Suportamos os seguintes operadores que serão mapeados para os operadores correspondentes do MongoDB: 'and', 'or' ( misturando 'and' e 'or' não é suportado atualmente), '=', '&gt;', '&gt;=', '&lt;', '⇐', '!=', 'is null', 'is not null', e 'like' que é mapeado para o operador do MongoDB `$regex` (ambos os padrões String e JavaScript são suportados)."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:599
#, fuzzy
msgid "Here are some query examples:"
msgstr "Eis alguns exemplos de consultas:"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:601
#, fuzzy
msgid "`firstname = ?1 and status = ?2` will be mapped to `{'firstname': ?1, 'status': ?2}`"
msgstr "`firstname = ?1 and status = ?2` será mapeado para `{'firstname': ?1, 'status': ?2}`"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:602
#, fuzzy
msgid "`amount > ?1 and firstname != ?2` will be mapped to `{'amount': {'$gt': ?1}, 'firstname': {'$ne': ?2}}`"
msgstr "`amount &amp;gt; ?1 and firstname != ?2` será mapeado para `{'amount': {'$gt': ?1}, 'firstname': {'$ne': ?2}}`"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:603
#, fuzzy
msgid "`lastname like ?1` will be mapped to `{'lastname': {'$regex': ?1}}`. Be careful that this will be link:https://docs.mongodb.com/manual/reference/operator/query/regex/#op._S_regex[MongoDB regex] support and not SQL like pattern."
msgstr "`lastname like ?1` será mapeado para `{'lastname': {'$regex': ?1}}`. Tenha em atenção que este será o suporte de  link:https://docs.mongodb.com/manual/reference/operator/query/regex/#op._S_regex[regex do MongoDB] e não um padrão do tipo SQL."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:604
#, fuzzy
msgid "`lastname is not null` will be mapped to `{'lastname':{'$exists': true}}`"
msgstr "`lastname is not null` será mapeado para `{'lastname':{'$exists': true}}`"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:605
#, fuzzy
msgid "`status in ?1` will be mapped to `{'status':{$in: [?1]}}`"
msgstr "`status in ?1` será mapeado para `{'status':{$in: [?1]}}`"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:609
#, fuzzy
msgid "MongoDB queries must be valid JSON documents, using the same field multiple times in a query is not allowed using PanacheQL as it would generate an invalid JSON (see link:https://github.com/quarkusio/quarkus/issues/12086[this issue on GitHub])."
msgstr "As consultas MongoDB têm de ser documentos JSON válidos, a utilização do mesmo campo várias vezes numa consulta não é permitida utilizando o PanacheQL, uma vez que geraria um JSON inválido (ver  link:https://github.com/quarkusio/quarkus/issues/12086[este problema no GitHub])."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:613
#, fuzzy
msgid "We also handle some basic date type transformations: all fields of type `Date`, `LocalDate`, `LocalDateTime` or `Instant` will be mapped to the link:https://docs.mongodb.com/manual/reference/bson-types/#date[BSON Date] using the `ISODate` type (UTC datetime).  The MongoDB POJO codec doesn't support `ZonedDateTime` and `OffsetDateTime` so you should convert them prior usage."
msgstr "Também tratamos de algumas transformações básicas do tipo de data: todos os campos do tipo `Date`, `LocalDate`, `LocalDateTime` ou `Instant` serão mapeados para o  link:https://docs.mongodb.com/manual/reference/bson-types/#date[BSON Date] utilizando o tipo `ISODate` (UTC datetime). O codec POJO do MongoDB não suporta `ZonedDateTime` e `OffsetDateTime`, pelo que deve convertê-los antes da sua utilização."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:615
#, fuzzy
msgid "MongoDB with Panache also supports extended MongoDB queries by providing a `Document` query, this is supported by the find/list/stream/count/delete/update methods."
msgstr "O MongoDB com Panache também suporta consultas MongoDB alargadas, fornecendo uma consulta `Document`, que é suportada pelos métodos find/list/stream/count/delete/update."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:618
#, fuzzy
msgid "MongoDB with Panache offers operations to update multiple documents based on an update document and a query : `Person.update(\"foo = ?1 and bar = ?2\", fooName, barName).where(\"name = ?1\", name)`."
msgstr "O MongoDB com Panache oferece operações para atualizar vários documentos com base num documento de atualização e numa consulta: `Person.update(\"foo = ?1 and bar = ?2\", fooName, barName).where(\"name = ?1\", name)`."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:620
#, fuzzy
msgid "For these operations, you can express the update document the same way you express your queries, here are some examples:"
msgstr "Para estas operações, pode exprimir o documento de atualização da mesma forma que exprime as suas consultas:"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:622
#, fuzzy
msgid "`<singlePropertyName>` (and single parameter) which will expand to the update document `{'$set' : {'singleColumnName': '?1'}}`"
msgstr "`&amp;lt;singlePropertyName&amp;gt;` (e um único parâmetro) que se expandirá para o documento de atualização `{'$set' : {'singleColumnName': '?1'}}`"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:623
#, fuzzy
msgid "`firstname = ?1 and status = ?2` will be mapped to the update document `{'$set' : {'firstname': ?1, 'status': ?2}}`"
msgstr "`firstname = ?1 and status = ?2` será mapeado para o documento de atualização `{'$set' : {'firstname': ?1, 'status': ?2}}`"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:624
#, fuzzy
msgid "`firstname = :firstname and status = :status` will be mapped to the update document `{'$set' : {'firstname': :firstname, 'status': :status}}`"
msgstr "`firstname = :firstname and status = :status` será mapeado para o documento de atualização `{'$set' : {'firstname': :firstname, 'status': :status}}`"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:625
#, fuzzy
msgid "`{'firstname' : ?1 and 'status' : ?2}` will be mapped to the update document `{'$set' : {'firstname': ?1, 'status': ?2}}`"
msgstr "`{'firstname' : ?1 and 'status' : ?2}` será mapeado para o documento de atualização `{'$set' : {'firstname': ?1, 'status': ?2}}`"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:626
#, fuzzy
msgid "`{'firstname' : :firstname and 'status' : :status}` will be mapped to the update document `{'$set' : {'firstname': :firstname, 'status': :status}}`"
msgstr "`{'firstname' : :firstname and 'status' : :status}` será mapeado para o documento de atualização `{'$set' : {'firstname': :firstname, 'status': :status}}`"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:627
#, fuzzy
msgid "`{'$inc': {'cpt': ?1}}` will be used as-is"
msgstr "`{'$inc': {'cpt': ?1}}` será utilizado tal como está"

#. type: Title ===
#: upstream/_guides/mongodb-panache.adoc:628
#, fuzzy, no-wrap
msgid "Query parameters"
msgstr "Parâmetros de consulta"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:631
#, fuzzy
msgid "You can pass query parameters, for both native and PanacheQL queries, by index (1-based) as shown below:"
msgstr "Pode passar parâmetros de consulta, tanto para consultas nativas como para consultas PanacheQL, por índice (baseado em 1), como se mostra abaixo:"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:636
#, no-wrap
msgid ""
"Person.find(\"name = ?1 and status = ?2\", \"Loïc\", Status.Alive);\n"
"Person.find(\"{'name': ?1, 'status': ?2}\", \"Loïc\", Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:639
#, fuzzy
msgid "Or by name using a `Map`:"
msgstr "Ou pelo nome, utilizando um `Map`:"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:647
#, no-wrap
msgid ""
"Map<String, Object> params = new HashMap<>();\n"
"params.put(\"name\", \"Loïc\");\n"
"params.put(\"status\", Status.Alive);\n"
"Person.find(\"name = :name and status = :status\", params);\n"
"Person.find(\"{'name': :name, 'status', :status}\", params);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:650
#, fuzzy
msgid "Or using the convenience class `Parameters` either as is or to build a `Map`:"
msgstr "Ou utilizar a classe de conveniência `Parameters` como está ou para construir um `Map`:"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:656
#, no-wrap
msgid ""
"// generate a Map\n"
"Person.find(\"name = :name and status = :status\",\n"
"         Parameters.with(\"name\", \"Loïc\").and(\"status\", Status.Alive).map());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:660
#, no-wrap
msgid ""
"// use it as-is\n"
"Person.find(\"{'name': :name, 'status': :status}\",\n"
"         Parameters.with(\"name\", \"Loïc\").and(\"status\", Status.Alive));\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:663
#, fuzzy
msgid "Every query operation accepts passing parameters by index (`Object...`), or by name (`Map<String,Object>` or `Parameters`)."
msgstr "Cada operação de consulta aceita a passagem de parâmetros por índice ( `Object…​`), ou por nome ( `Map&amp;lt;String,Object&amp;gt;` ou `Parameters`)."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:665
#, fuzzy
msgid "When you use query parameters, be careful that PanacheQL queries will refer to the Object parameters name but native queries will refer to MongoDB field names."
msgstr "Quando utilizar parâmetros de consulta, tenha em atenção que as consultas PanacheQL irão referir-se ao nome dos parâmetros Object, mas as consultas nativas irão referir-se aos nomes dos campos MongoDB."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:667
#, fuzzy
msgid "Imagine the following entity:"
msgstr "Imagine a seguinte entidade:"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:675
#, no-wrap
msgid ""
"public class Person extends PanacheMongoEntity {\n"
"    @BsonProperty(\"lastname\")\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:679
#, no-wrap
msgid ""
"    public static Person findByNameWithPanacheQLQuery(String name){\n"
"        return find(\"name\", name).firstResult();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:684
#, no-wrap
msgid ""
"    public static Person findByNameWithNativeQuery(String name){\n"
"        return find(\"{'lastname': ?1}\", name).firstResult();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:688
#, fuzzy
msgid "Both `findByNameWithPanacheQLQuery()` and `findByNameWithNativeQuery()` methods will return the same result but query written in PanacheQL will use the entity field name: `name`, and native query will use the MongoDB field name: `lastname`."
msgstr "Ambos os métodos `findByNameWithPanacheQLQuery()` e `findByNameWithNativeQuery()` devolverão o mesmo resultado, mas a consulta escrita em PanacheQL utilizará o nome do campo da entidade: `name`, e a consulta nativa utilizará o nome do campo MongoDB: `lastname`."

#. type: Title ===
#: upstream/_guides/mongodb-panache.adoc:689
#, fuzzy, no-wrap
msgid "Query projection"
msgstr "Projeção de consulta"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:692
#, fuzzy
msgid "Query projection can be done with the `project(Class)` method on the `PanacheQuery` object that is returned by the `find()` methods."
msgstr "A projeção da consulta pode ser feita com o método `project(Class)` no objeto `PanacheQuery` que é devolvido pelos métodos `find()`."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:695
#, fuzzy
msgid "You can use it to restrict which fields will be returned by the database, the ID field will always be returned, but it's not mandatory to include it inside the projection class."
msgstr "Pode utilizá-lo para restringir os campos que serão devolvidos pela base de dados, o campo ID será sempre devolvido, mas não é obrigatório incluí-lo na classe de projeção."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:699
#, fuzzy
msgid "For this, you need to create a class (a POJO) that will only contain the projected fields.  This POJO needs to be annotated with `@ProjectionFor(Entity.class)` where `Entity` is the name of your entity class.  The field names, or getters, of the projection class will be used to restrict which properties will be loaded from the database."
msgstr "Para tal, é necessário criar uma classe (um POJO) que conterá apenas os campos projectados. Este POJO precisa de ser anotado com `@ProjectionFor(Entity.class)` onde `Entity` é o nome da sua classe de entidade. Os nomes dos campos, ou getters, da classe de projeção serão utilizados para restringir as propriedades que serão carregadas a partir da base de dados."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:701
#, fuzzy
msgid "Projection can be done for both PanacheQL and native queries."
msgstr "A projeção pode ser feita tanto para o PanacheQL como para as consultas nativas."

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:706
#, no-wrap
msgid ""
"import io.quarkus.mongodb.panache.common.ProjectionFor;\n"
"import org.bson.codecs.pojo.annotations.BsonProperty;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:712
#, no-wrap
msgid ""
"// using public fields\n"
"@ProjectionFor(Person.class)\n"
"public class PersonName {\n"
"    public String name;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:717
#, no-wrap
msgid ""
"// using getters\n"
"@ProjectionFor(Person.class)\n"
"public class PersonNameWithGetter {\n"
"    private String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:721
#, no-wrap
msgid ""
"    public String getName(){\n"
"        return name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:726
#, no-wrap
msgid ""
"    public void setName(String name){\n"
"        this.name = name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:731
#, no-wrap
msgid ""
"// only 'name' will be loaded from the database\n"
"PanacheQuery<PersonName> shortQuery = Person.find(\"status \", Status.Alive).project(PersonName.class);\n"
"PanacheQuery<PersonName> query = Person.find(\"'status': ?1\", Status.Alive).project(PersonNameWithGetter.class);\n"
"PanacheQuery<PersonName> nativeQuery = Person.find(\"{'status': 'ALIVE'}\", Status.Alive).project(PersonName.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:734
#, fuzzy
msgid "Using `@BsonProperty` is not needed to define custom column mappings, as the mappings from the entity class will be used."
msgstr "Não é necessário utilizar `@BsonProperty` para definir mapeamentos de colunas personalizados, uma vez que serão utilizados os mapeamentos da classe de entidade."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:736
#, fuzzy
msgid "You can have your projection class extends from another class. In this case, the parent class also needs to have use `@ProjectionFor` annotation."
msgstr "A sua classe de projeção pode ser estendida a partir de outra classe. Neste caso, a classe-mãe também precisa de ter a anotação use `@ProjectionFor`."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:738
#, fuzzy
msgid "If you run Java 17+, records are a good fit for projection classes."
msgstr "Se executar Java 17+, os registos são uma boa opção para as classes de projeção."

#. type: Title ==
#: upstream/_guides/mongodb-panache.adoc:739
#, fuzzy, no-wrap
msgid "Query debugging"
msgstr "Depuração de consultas"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:742
#, fuzzy
msgid "As MongoDB with Panache allows writing simplified queries, it is sometimes handy to log the generated native queries for debugging purpose."
msgstr "Como o MongoDB com Panache permite escrever consultas simplificadas, por vezes é útil registar as consultas nativas geradas para fins de depuração."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:744
#, fuzzy
msgid "This can be achieved by setting to DEBUG the following log category inside your `application.properties`:"
msgstr "Isto pode ser conseguido definindo para DEBUG a seguinte categoria de registo dentro do seu `application.properties`:"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:748
#, no-wrap
msgid "quarkus.log.category.\"io.quarkus.mongodb.panache.runtime\".level=DEBUG\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/mongodb-panache.adoc:750
#, fuzzy, no-wrap
msgid "The PojoCodecProvider: easy object to BSON document conversion."
msgstr "O PojoCodecProvider: conversão fácil de objectos para documentos BSON."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:754
#, fuzzy
msgid "MongoDB with Panache uses the link:{mongodb-doc-root-url}/fundamentals/data-formats/document-data-format-pojo/[PojoCodecProvider], with link:{mongodb-doc-root-url}/fundamentals/data-formats/document-data-format-pojo/#configure-the-driver-for-pojos[automatic POJO support], to automatically convert your object to a BSON document."
msgstr "MongoDB com Panache utiliza o  link:{mongodb-doc-root-url}/fundamentals/data-formats/document-data-format-pojo/[PojoCodecProvider], com  link:{mongodb-doc-root-url}/fundamentals/data-formats/document-data-format-pojo/#configure-the-driver-for-pojos[suporte automático de POJO], para converter automaticamente o seu objeto para um documento BSON."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:759
#, fuzzy
msgid "In case you encounter the `org.bson.codecs.configuration.CodecConfigurationException` exception, it means the codec is not able to automatically convert your object.  This codec obeys the Java Bean standard, so it will successfully convert a POJO using public fields or getters/setters.  You can use `@BsonIgnore` to make a field, or a getter/setter, ignored by the codec."
msgstr "Caso encontre a exceção `org.bson.codecs.configuration.CodecConfigurationException`, significa que o codec não é capaz de converter automaticamente o seu objeto. Este codec obedece à norma Java Bean, pelo que converterá com êxito um POJO que utilize campos públicos ou getters/setters. Pode utilizar `@BsonIgnore` para fazer com que um campo, ou um getter/setter, seja ignorado pelo codec."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:764
#, fuzzy
msgid "If your class doesn't obey these rules (for example by including a method that starts with `get` but is not a setter), you could provide a custom codec for it.  Your custom codec will be automatically discovered and registered inside the codec registry.  See xref:mongodb.adoc#simplifying-mongodb-client-usage-using-bson-codec[Using BSON codec]."
msgstr "Se a sua classe não obedecer a estas regras (por exemplo, ao incluir um método que começa por `get` mas não é um setter), pode fornecer-lhe um codec personalizado. O seu codec personalizado será automaticamente descoberto e registado no registo de codecs. Consulte  link:mongodb.html#simplifying-mongodb-client-usage-using-bson-codec[Usando o codec BSON]."

#. type: Title ==
#: upstream/_guides/mongodb-panache.adoc:765
#, fuzzy, no-wrap
msgid "Transactions"
msgstr "Transacções"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:768
#: upstream/_guides/mongodb-panache.adoc:1010
#, fuzzy
msgid "MongoDB offers ACID transactions since version 4.0."
msgstr "O MongoDB oferece transacções ACID desde a versão 4.0."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:770
#, fuzzy
msgid "To use them with MongoDB with Panache you need to annotate the method that starts the transaction with the `@Transactional` annotation."
msgstr "Para as utilizar com o MongoDB com Panache, é necessário anotar o método que inicia a transação com a anotação `@Transactional`."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:773
#: upstream/_guides/mongodb-panache.adoc:1027
#, fuzzy
msgid "In MongoDB, a transaction is only possible on a replicaset, luckily our xref:mongodb.adoc#dev-services[Dev Services for MongoDB] setups a single node replicaset so it is compatible with transactions."
msgstr "No MongoDB, uma transação só é possível num conjunto de réplicas. Felizmente,  link:mongodb.html#dev-services[os] nossos Dev  link:mongodb.html#dev-services[Services para MongoDB] configuram um conjunto de réplicas de nó único, pelo que é compatível com as transacções."

#. type: Title ==
#: upstream/_guides/mongodb-panache.adoc:774
#, fuzzy, no-wrap
msgid "Custom IDs"
msgstr "IDs personalizados"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:779
#, fuzzy
msgid "IDs are often a touchy subject. In MongoDB, they are usually auto-generated by the database with an `ObjectId` type.  In MongoDB with Panache the ID are defined by a field named `id` of the `org.bson.types.ObjectId` type, but if you want to customize them, once again we have you covered."
msgstr "Os IDs são frequentemente um assunto delicado. No MongoDB, eles geralmente são gerados automaticamente pelo banco de dados com um tipo `ObjectId`. No MongoDB com Panache, os IDs são definidos por um campo chamado `id` do tipo `org.bson.types.ObjectId`, mas se quiser personalizá-los, mais uma vez, temos tudo o que precisa."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:782
#, fuzzy
msgid "You can specify your own ID strategy by extending `PanacheMongoEntityBase` instead of `PanacheMongoEntity`. Then you just declare whatever ID you want as a public field by annotating it by `@BsonId`:"
msgstr "Pode especificar a sua própria estratégia de ID estendendo `PanacheMongoEntityBase` em vez de `PanacheMongoEntity`. Depois, basta declarar qualquer ID que pretenda como um campo público, anotando-o em `@BsonId`:"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:787
#, no-wrap
msgid ""
"@MongoEntity\n"
"public class Person extends PanacheMongoEntityBase {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:790
#, no-wrap
msgid ""
"    @BsonId\n"
"    public Integer myId;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:793
#, no-wrap
msgid ""
"    //...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:797
#, fuzzy
msgid "If you're using repositories, then you will want to extend `PanacheMongoRepositoryBase` instead of `PanacheMongoRepository` and specify your ID type as an extra type parameter:"
msgstr "Se estiver a utilizar repositórios, então vai querer estender `PanacheMongoRepositoryBase` em vez de `PanacheMongoRepository` e especificar o seu tipo de ID como um parâmetro de tipo extra:"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:804
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheMongoRepositoryBase<Person,Integer> {\n"
"    //...\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/mongodb-panache.adoc:810
#, fuzzy
msgid "When using `ObjectId`, MongoDB will automatically provide a value for you, but if you use a custom field type, you need to provide the value by yourself."
msgstr "Se utilizar `ObjectId`, o MongoDB fornecerá automaticamente um valor, mas se utilizar um tipo de campo personalizado, terá de ser o utilizador a fornecer o valor."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:814
#, fuzzy
msgid "`ObjectId` can be difficult to use if you want to expose its value in your REST service.  So we created Jackson and JSON-B providers to serialize/deserialize them as a `String` which are automatically registered if your project depends on either the RESTEasy Reactive Jackson extension or the RESTEasy Reactive JSON-B extension."
msgstr "`ObjectId` pode ser difícil de usar se você quiser expor seu valor em seu serviço REST. Por isso, criamos os provedores Jackson e JSON-B para serializá-los/desserializá-los como `String`, que são automaticamente registrados se o seu projeto depender da extensão RESTEasy Reactive Jackson ou da extensão RESTEasy Reactive JSON-B."

#. type: delimited block =
#: upstream/_guides/mongodb-panache.adoc:818
#, fuzzy
msgid "If you use the standard `ObjectId` ID type, don't forget to retrieve your entity by creating a new `ObjectId` when the identifier comes from a path parameter. For example:"
msgstr "Se utilizar o tipo de ID padrão `ObjectId`, não se esqueça de recuperar a sua entidade criando um novo `ObjectId` quando o identificador provém de um parâmetro de caminho. Por exemplo:"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:826
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/{id}\")\n"
"public Person findById(String id) {\n"
"    return Person.findById(new ObjectId(id));\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/mongodb-panache.adoc:829
#, fuzzy, no-wrap
msgid "Working with Kotlin Data classes"
msgstr "Trabalhar com classes de dados Kotlin"

#. type: delimited block =
#: upstream/_guides/mongodb-panache.adoc:832
#, fuzzy
msgid "Kotlin data classes are a very convenient way of defining data carrier classes, making them a great match to define an entity class."
msgstr "As classes de dados Kotlin são uma forma muito conveniente de definir classes de suporte de dados, o que as torna uma óptima combinação para definir uma classe de entidade."

#. type: delimited block =
#: upstream/_guides/mongodb-panache.adoc:835
#, fuzzy
msgid "But this type of class comes with some limitations: all fields needs to be initialized at construction time or be marked as nullable, and the generated constructor needs to have as parameters all the fields of the data class."
msgstr "Mas este tipo de classe tem algumas limitações: todos os campos têm de ser inicializados no momento da construção ou marcados como anuláveis, e o construtor gerado tem de ter como parâmetros todos os campos da classe de dados."

#. type: delimited block =
#: upstream/_guides/mongodb-panache.adoc:837
#, fuzzy
msgid "MongoDB with Panache uses the link:{mongodb-doc-root-url}/fundamentals/data-formats/document-data-format-pojo[PojoCodecProvider], a MongoDB codec which mandates the presence of a parameterless constructor."
msgstr "MongoDB com Panache usa o  link:{mongodb-doc-root-url}/fundamentals/data-formats/document-data-format-pojo[PojoCodecProvider], um codec MongoDB que exige a presença de um construtor sem parâmetros."

#. type: delimited block =
#: upstream/_guides/mongodb-panache.adoc:841
#, fuzzy
msgid "Therefore, if you want to use a data class as an entity class, you need a way to make Kotlin generate an empty constructor.  To do so, you need to provide default values for all the fields of your classes.  The following sentence from the Kotlin documentation explains it:"
msgstr "Portanto, se quiser usar uma classe de dados como uma classe de entidade, precisa de uma forma de fazer com que o Kotlin gere um construtor vazio. Para o fazer, é necessário fornecer valores por defeito para todos os campos das suas classes. A seguinte frase da documentação de Kotlin explica-o:"

#. type: delimited block =
#: upstream/_guides/mongodb-panache.adoc:843
#, fuzzy
msgid "__On the JVM, if the generated class needs to have a parameterless constructor, default values for all properties have to be specified (see Constructors).__"
msgstr "_Na JVM, se a classe gerada precisar de ter um construtor sem parâmetros, têm de ser especificados valores predefinidos para todas as propriedades (ver Construtores)._"

#. type: delimited block =
#: upstream/_guides/mongodb-panache.adoc:845
#, fuzzy
msgid "If for whatever reason, the aforementioned solution is deemed unacceptable, there are alternatives."
msgstr "Se, por qualquer razão, a solução acima referida for considerada inaceitável, existem alternativas."

#. type: delimited block =
#: upstream/_guides/mongodb-panache.adoc:848
#, fuzzy
msgid "First, you can create a BSON Codec which will be automatically registered by Quarkus and will be used instead of the `PojoCodecProvider`.  See this part of the documentation: xref:mongodb.adoc#simplifying-mongodb-client-usage-using-bson-codec[Using BSON codec]."
msgstr "Em primeiro lugar, pode criar um Codec BSON que será automaticamente registado pelo Quarkus e será utilizado em vez do `PojoCodecProvider`. Consulte esta parte da documentação:  link:mongodb.html#simplifying-mongodb-client-usage-using-bson-codec[Utilizar o codec BSON]."

#. type: delimited block =
#: upstream/_guides/mongodb-panache.adoc:851
#, fuzzy
msgid "Another option is to use the `@BsonCreator` annotation to tell the `PojoCodecProvider` to use the Kotlin data class default constructor, in this case all constructor parameters have to be annotated with `@BsonProperty`: see link:{mongodb-doc-root-url}/fundamentals/data-formats/pojo-customization/#pojos-without-no-argument-constructors[Supporting pojos without no args constructor]."
msgstr "Outra opção é utilizar a anotação `@BsonCreator` para dizer ao `PojoCodecProvider` para utilizar o construtor predefinido da classe de dados Kotlin. Neste caso, todos os parâmetros do construtor têm de ser anotados com `@BsonProperty`: ver  link:{mongodb-doc-root-url}/fundamentals/data-formats/pojo-customization/#pojos-without-no-argument-constructors[Supporting pojos without no args constructor]."

#. type: delimited block =
#: upstream/_guides/mongodb-panache.adoc:853
#, fuzzy
msgid "This will only work when the entity extends `PanacheMongoEntityBase` and not `PanacheMongoEntity`, as the ID field also needs to be included in the constructor."
msgstr "Isso só funcionará quando a entidade estender `PanacheMongoEntityBase` e não `PanacheMongoEntity`, pois o campo ID também precisa ser incluído no construtor."

#. type: delimited block =
#: upstream/_guides/mongodb-panache.adoc:855
#, fuzzy
msgid "An example of a `Person` class defined as a Kotlin data class would look like:"
msgstr "Um exemplo de uma classe `Person` definida como uma classe de dados Kotlin seria o seguinte:"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:864
#, no-wrap
msgid ""
"data class Person @BsonCreator constructor (\n"
"    @BsonId var id: ObjectId,\n"
"    @BsonProperty(\"name\") var name: String,\n"
"    @BsonProperty(\"birth\") var birth: LocalDate,\n"
"    @BsonProperty(\"status\") var status: Status\n"
"): PanacheMongoEntityBase()\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/mongodb-panache.adoc:869
#, fuzzy
msgid "Here we use `var` but note that `val` can also be used."
msgstr "Aqui utilizamos `var` mas note-se que `val` também pode ser utilizado."

#. type: delimited block =
#: upstream/_guides/mongodb-panache.adoc:871
#, fuzzy
msgid "The `@BsonId` annotation is used instead of `@BsonProperty(\"_id\")` for brevity's sake, but use of either is valid."
msgstr "A anotação `@BsonId` é utilizada em vez de `@BsonProperty(\"_id\")` por uma questão de brevidade, mas a utilização de qualquer uma delas é válida."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:875
#, fuzzy
msgid "The last option is to the use the link:https://kotlinlang.org/docs/reference/compiler-plugins.html#no-arg-compiler-plugin[no-arg] compiler plugin.  This plugin is configured with a list of annotations, and the end result is the generation of no-args constructor for each class annotated with them."
msgstr "A última opção é usar o plugin do compilador  link:https://kotlinlang.org/docs/reference/compiler-plugins.html#no-arg-compiler-plugin[no-arg]. Este plugin é configurado com uma lista de anotações, e o resultado final é a geração de um construtor no-args para cada classe anotada com elas."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:877
#, fuzzy
msgid "For MongoDB with Panache, you could use the `@MongoEntity` annotation on your data class for this:"
msgstr "Para MongoDB com Panache, pode utilizar a anotação `@MongoEntity` na sua classe de dados para este efeito:"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:886
#, no-wrap
msgid ""
"@MongoEntity\n"
"data class Person (\n"
"    var name: String,\n"
"    var birth: LocalDate,\n"
"    var status: Status\n"
"): PanacheMongoEntity()\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/mongodb-panache.adoc:889
#, fuzzy, no-wrap
msgid "Reactive Entities and Repositories"
msgstr "Entidades reactivas e repositórios"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:894
#, fuzzy
msgid "MongoDB with Panache allows using reactive style implementation for both entities and repositories.  For this, you need to use the Reactive variants when defining your entities : `ReactivePanacheMongoEntity` or `ReactivePanacheMongoEntityBase`, and when defining your repositories: `ReactivePanacheMongoRepository` or `ReactivePanacheMongoRepositoryBase`."
msgstr "O MongoDB com Panache permite utilizar uma implementação de estilo reativo tanto para entidades como para repositórios. Para tal, é necessário utilizar as variantes Reactive na definição das entidades: `ReactivePanacheMongoEntity` ou `ReactivePanacheMongoEntityBase`, e na definição dos repositórios: `ReactivePanacheMongoRepository` ou `ReactivePanacheMongoRepositoryBase`."

#. type: Block title
#: upstream/_guides/mongodb-panache.adoc:896
#, fuzzy, no-wrap
msgid "Mutiny"
msgstr "Motim"

#. type: delimited block =
#: upstream/_guides/mongodb-panache.adoc:900
#, fuzzy
msgid "The reactive API of MongoDB with Panache uses Mutiny reactive types.  If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr "A API reactiva do MongoDB com Panache utiliza tipos reactivos Mutiny. Se não estiver familiarizado com o Mutiny, consulte  link:mutiny-primer.html[Mutiny - uma biblioteca de programação reactiva intuitiva]."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:903
#, fuzzy
msgid "The reactive variant of the `Person` class will be:"
msgstr "A variante reactiva da classe `Person` será:"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:910
#, no-wrap
msgid ""
"public class ReactivePerson extends ReactivePanacheMongoEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:925
#, fuzzy
msgid "You will have access to the same functionalities of the _imperative_ variant inside the reactive one: bson annotations, custom ID, PanacheQL, ...  But the methods on your entities or repositories will all return reactive types."
msgstr "Terá acesso às mesmas funcionalidades da variante _imperativa_ na variante reactiva: anotações bson, ID personalizada, PanacheQL, ... Mas os métodos nas suas entidades ou repositórios devolverão todos tipos reactivos."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:927
#, fuzzy
msgid "See the equivalent methods from the imperative example with the reactive variant:"
msgstr "Ver os métodos equivalentes do exemplo imperativo com a variante reactiva:"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:935
#, no-wrap
msgid ""
"// creating a person\n"
"ReactivePerson person = new ReactivePerson();\n"
"person.name = \"Loïc\";\n"
"person.birth = LocalDate.of(1910, Month.FEBRUARY, 1);\n"
"person.status = Status.Alive;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:939
#, no-wrap
msgid ""
"// persist it: if you keep the default ObjectId ID field, it will be populated by the MongoDB driver,\n"
"// and accessible when uni1 will be resolved\n"
"Uni<ReactivePerson> uni1 = person.persist();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:944
#, no-wrap
msgid ""
"// Your must call update() in order to send your entity modifications to MongoDB\n"
"Uni<ReactivePerson> uni2 = person.update();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:947
#, no-wrap
msgid ""
"// delete it\n"
"Uni<Void> uni3 = person.delete();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:950
#, no-wrap
msgid ""
"// getting a list of all persons\n"
"Uni<List<ReactivePerson>> allPersons = ReactivePerson.listAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:955
#, no-wrap
msgid ""
"// finding a specific person by ID\n"
"// here we build a new ObjectId, but you can also retrieve it from the existing entity after being persisted\n"
"ObjectId personId = new ObjectId(idAsString);\n"
"Uni<ReactivePerson> personById = ReactivePerson.findById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:959
#, no-wrap
msgid ""
"// finding a specific person by ID via an Optional\n"
"Uni<Optional<ReactivePerson>> optional = ReactivePerson.findByIdOptional(personId);\n"
"personById = optional.map(o -> o.orElseThrow(() -> new NotFoundException()));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:962
#, no-wrap
msgid ""
"// finding all living persons\n"
"Uni<List<ReactivePerson>> livingPersons = ReactivePerson.list(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:965
#, no-wrap
msgid ""
"// counting all persons\n"
"Uni<Long> countAll = ReactivePerson.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:968
#, no-wrap
msgid ""
"// counting all living persons\n"
"Uni<Long> countAlive = ReactivePerson.count(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:971
#, no-wrap
msgid ""
"// delete all living persons\n"
"Uni<Long>  deleteCount = ReactivePerson.delete(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:974
#, no-wrap
msgid ""
"// delete all persons\n"
"deleteCount = ReactivePerson.deleteAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:977
#, no-wrap
msgid ""
"// delete by id\n"
"Uni<Boolean> deleted = ReactivePerson.deleteById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:980
#, no-wrap
msgid ""
"// set the name of all living persons to 'Mortal'\n"
"Uni<Long> updated = ReactivePerson.update(\"name\", \"Mortal\").where(\"status\", Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:983
#, fuzzy
msgid "If you use MongoDB with Panache in conjunction with RESTEasy Reactive, you can directly return a reactive type inside your Jakarta REST resource endpoint."
msgstr "Se utilizar MongoDB com Panache em conjunto com RESTEasy Reactive, pode devolver diretamente um tipo reativo dentro do seu ponto de extremidade de recurso Jakarta REST."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:985
#, fuzzy
msgid "The same query facility exists for the reactive types, but the `stream()` methods act differently: they return a `Multi` (which implement a reactive stream `Publisher`) instead of a `Stream`."
msgstr "Existe a mesma facilidade de consulta para os tipos reactivos, mas os métodos `stream()` funcionam de forma diferente: devolvem um `Multi` (que implementa um fluxo reativo `Publisher`) em vez de um `Stream`."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:987
#, fuzzy
msgid "It allows more advanced reactive use cases, for example, you can use it to send server-sent events (SSE) via RESTEasy Reactive:"
msgstr "Permite casos de utilização reactiva mais avançados, por exemplo, pode ser utilizado para enviar eventos enviados pelo servidor (SSE) através do RESTEasy Reactive:"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:995
#, no-wrap
msgid ""
"import org.jboss.resteasy.reactive.RestStreamElementType;\n"
"import org.reactivestreams.Publisher;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1003
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/stream\")\n"
"@Produces(MediaType.SERVER_SENT_EVENTS)\n"
"@RestStreamElementType(MediaType.APPLICATION_JSON)\n"
"public Multi<ReactivePerson> streamPersons() {\n"
"    return ReactivePerson.streamAll();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1006
#, fuzzy
msgid "`@RestStreamElementType(MediaType.APPLICATION_JSON)` tells RESTEasy Reactive to serialize the object in JSON."
msgstr "`@RestStreamElementType(MediaType.APPLICATION_JSON)` diz ao RESTEasy Reactive para serializar o objeto em JSON."

#. type: Title ===
#: upstream/_guides/mongodb-panache.adoc:1007
#, fuzzy, no-wrap
msgid "Reactive transactions"
msgstr "Transacções reactivas"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1012
#, fuzzy
msgid "To use them with reactive entities or repositories you need to use `io.quarkus.mongodb.panache.common.reactive.Panache.withTransaction()`."
msgstr "Para os utilizar com entidades ou repositórios reactivos, é necessário utilizar `io.quarkus.mongodb.panache.common.reactive.Panache.withTransaction()`."

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1023
#, no-wrap
msgid ""
"@POST\n"
"public Uni<Response> addPerson(ReactiveTransactionPerson person) {\n"
"    return Panache.withTransaction(() -> person.persist().map(v -> {\n"
"        //the ID is populated before sending it to the database\n"
"        String id = person.id.toString();\n"
"        return Response.created(URI.create(\"/reactive-transaction/\" + id)).build();\n"
"    }));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1029
#, fuzzy
msgid "Reactive transaction support inside MongoDB with Panache is still experimental."
msgstr "O suporte a transacções reactivas no MongoDB com o Panache ainda é experimental."

#. type: Title ==
#: upstream/_guides/mongodb-panache.adoc:1030
#, fuzzy, no-wrap
msgid "Mocking"
msgstr "Zombaria"

#. type: Title ===
#: upstream/_guides/mongodb-panache.adoc:1032
#, fuzzy, no-wrap
msgid "Using the active-record pattern"
msgstr "Utilizar o padrão de registo ativo"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1037
#, fuzzy
msgid "If you are using the active-record pattern you cannot use Mockito directly as it does not support mocking static methods, but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static methods, including your own."
msgstr "Se estiver a utilizar o padrão active-record, não pode utilizar o Mockito diretamente, uma vez que não suporta a simulação de métodos estáticos, mas pode utilizar o módulo `quarkus-panache-mock` que lhe permite utilizar o Mockito para simular todos os métodos estáticos fornecidos, incluindo os seus próprios métodos."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1039
#, fuzzy
msgid "Add this dependency to your `pom.xml`:"
msgstr "Adicione esta dependência ao seu `pom.xml`:"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1048
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-panache-mock</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1054
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-panache-mock\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1057
#: upstream/_guides/mongodb-panache.adoc:1144
#, fuzzy
msgid "Given this simple entity:"
msgstr "Dada esta entidade simples:"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1063
#, no-wrap
msgid "    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1068
#, no-wrap
msgid ""
"    public static List<Person> findOrdered() {\n"
"        return findAll(Sort.by(\"lastname\", \"firstname\")).list();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1071
#: upstream/_guides/mongodb-panache.adoc:1169
#, fuzzy
msgid "You can write your mocking test like this:"
msgstr "Pode escrever o seu teste de simulação da seguinte forma:"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1076
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheFunctionalityTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1080
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPanacheMocking() {\n"
"        PanacheMock.mock(Person.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1083
#, no-wrap
msgid ""
"        // Mocked classes always return a default value\n"
"        Assertions.assertEquals(0, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1087
#, no-wrap
msgid ""
"        // Now let's specify the return value\n"
"        Mockito.when(Person.count()).thenReturn(23L);\n"
"        Assertions.assertEquals(23, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1091
#, no-wrap
msgid ""
"        // Now let's change the return value\n"
"        Mockito.when(Person.count()).thenReturn(42L);\n"
"        Assertions.assertEquals(42, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1095
#, no-wrap
msgid ""
"        // Now let's call the original method\n"
"        Mockito.when(Person.count()).thenCallRealMethod();\n"
"        Assertions.assertEquals(0, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1098
#, no-wrap
msgid ""
"        // Check that we called it 4 times\n"
"        PanacheMock.verify(Person.class, Mockito.times(4)).count();// <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1104
#, no-wrap
msgid ""
"        // Mock only with specific parameters\n"
"        Person p = new Person();\n"
"        Mockito.when(Person.findById(12L)).thenReturn(p);\n"
"        Assertions.assertSame(p, Person.findById(12L));\n"
"        Assertions.assertNull(Person.findById(42L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1108
#, no-wrap
msgid ""
"        // Mock throwing\n"
"        Mockito.when(Person.findById(12L)).thenThrow(new WebApplicationException());\n"
"        Assertions.assertThrows(WebApplicationException.class, () -> Person.findById(12L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1112
#, no-wrap
msgid ""
"        // We can even mock your custom methods\n"
"        Mockito.when(Person.findOrdered()).thenReturn(Collections.emptyList());\n"
"        Assertions.assertTrue(Person.findOrdered().isEmpty());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1118
#, no-wrap
msgid ""
"        PanacheMock.verify(Person.class).findOrdered();\n"
"        PanacheMock.verify(Person.class, Mockito.atLeastOnce()).findById(Mockito.any());\n"
"        PanacheMock.verifyNoMoreInteractions(Person.class);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1121
#, fuzzy
msgid "Be sure to call your `verify` methods on `PanacheMock` rather than `Mockito`, otherwise you won't know what mock object to pass."
msgstr "Certifique-se de que chama os seus métodos `verify` em `PanacheMock` em vez de `Mockito`, caso contrário não saberá qual o objeto de simulação a passar."

#. type: Title ===
#: upstream/_guides/mongodb-panache.adoc:1122
#, fuzzy, no-wrap
msgid "Using the repository pattern"
msgstr "Utilizar o padrão de repositório"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1126
#, fuzzy
msgid "If you are using the repository pattern you can use Mockito directly, using the `quarkus-junit5-mockito` module, which makes mocking beans much easier:"
msgstr "Se estiver a utilizar o padrão de repositório, pode utilizar o Mockito diretamente, utilizando o módulo `quarkus-junit5-mockito`, o que torna a simulação de beans muito mais fácil:"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1135
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5-mockito</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1141
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-junit5-mockito\")\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1148
#, no-wrap
msgid "public class Person {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1151
#, no-wrap
msgid ""
"    @BsonId\n"
"    public Long id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1154
#, no-wrap
msgid ""
"    public String name;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1157
#, fuzzy
msgid "And this repository:"
msgstr "E este repositório:"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1166
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheMongoRepository<Person> {\n"
"    public List<Person> findOrdered() {\n"
"        return findAll(Sort.by(\"lastname\", \"firstname\")).list();\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1176
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheFunctionalityTest {\n"
"    @InjectMock\n"
"    PersonRepository personRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1181
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPanacheRepositoryMocking() throws Throwable {\n"
"        // Mocked classes always return a default value\n"
"        Assertions.assertEquals(0, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1185
#, no-wrap
msgid ""
"        // Now let's specify the return value\n"
"        Mockito.when(personRepository.count()).thenReturn(23L);\n"
"        Assertions.assertEquals(23, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1189
#, no-wrap
msgid ""
"        // Now let's change the return value\n"
"        Mockito.when(personRepository.count()).thenReturn(42L);\n"
"        Assertions.assertEquals(42, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1193
#, no-wrap
msgid ""
"        // Now let's call the original method\n"
"        Mockito.when(personRepository.count()).thenCallRealMethod();\n"
"        Assertions.assertEquals(0, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1196
#, no-wrap
msgid ""
"        // Check that we called it 4 times\n"
"        Mockito.verify(personRepository, Mockito.times(4)).count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1202
#, no-wrap
msgid ""
"        // Mock only with specific parameters\n"
"        Person p = new Person();\n"
"        Mockito.when(personRepository.findById(12L)).thenReturn(p);\n"
"        Assertions.assertSame(p, personRepository.findById(12L));\n"
"        Assertions.assertNull(personRepository.findById(42L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1206
#, no-wrap
msgid ""
"        // Mock throwing\n"
"        Mockito.when(personRepository.findById(12L)).thenThrow(new WebApplicationException());\n"
"        Assertions.assertThrows(WebApplicationException.class, () -> personRepository.findById(12L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1209
#, no-wrap
msgid ""
"        Mockito.when(personRepository.findOrdered()).thenReturn(Collections.emptyList());\n"
"        Assertions.assertTrue(personRepository.findOrdered().isEmpty());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1216
#, no-wrap
msgid ""
"        // We can even mock your custom methods\n"
"        Mockito.verify(personRepository).findOrdered();\n"
"        Mockito.verify(personRepository, Mockito.atLeastOnce()).findById(Mockito.any());\n"
"        Mockito.verifyNoMoreInteractions(personRepository);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/mongodb-panache.adoc:1219
#, fuzzy, no-wrap
msgid "How and why we simplify MongoDB API"
msgstr "Como e porquê simplificamos a API MongoDB"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1223
#, fuzzy
msgid "When it comes to writing MongoDB entities, there are a number of annoying things that users have grown used to reluctantly deal with, such as:"
msgstr "Quando se trata de escrever entidades MongoDB, há uma série de coisas irritantes com as quais os utilizadores se habituaram a lidar com relutância, tais como:"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1226
#, fuzzy
msgid "Duplicating ID logic: most entities need an ID, most people don't care how it's set, because it's not really relevant to your model."
msgstr "Duplicação da lógica de ID: a maioria das entidades precisa de um ID, a maioria das pessoas não quer saber como é definido, porque não é realmente relevante para o seu modelo."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1229
#, fuzzy
msgid "Dumb getters and setters: since Java lacks support for properties in the language, we have to create fields, then generate getters and setters for those fields, even if they don't actually do anything more than read/write the fields."
msgstr "Obtentores e definidores idiotas: uma vez que Java não suporta propriedades na linguagem, temos de criar campos e, em seguida, gerar obtentores e definidores para esses campos, mesmo que não façam mais do que ler/escrever os campos."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1232
#, fuzzy
msgid "Traditional EE patterns advise to split entity definition (the model) from the operations you can do on them (DAOs, Repositories), but really that requires an unnatural split between the state and its operations even though we would never do something like that for regular objects in the Object-Oriented architecture, where state and methods are in the same class. Moreover, this requires two classes per entity, and requires injection of the DAO or Repository where you need to do entity operations, which breaks your edit flow and requires you to get out of the code you're writing to set up an injection point before coming back to use it."
msgstr "Os padrões tradicionais de EE aconselham a separar a definição de entidades (o modelo) das operações que se podem fazer sobre elas (DAOs, Repositórios), mas na verdade isso requer uma separação não natural entre o estado e as suas operações, apesar de nunca fazermos algo assim para objectos normais na arquitetura Object-Oriented, onde o estado e os métodos estão na mesma classe. Além disso, isso requer duas classes por entidade, e requer a injeção do DAO ou Repositório onde você precisa fazer operações de entidade, o que quebra seu fluxo de edição e exige que você saia do código que está escrevendo para configurar um ponto de injeção antes de voltar para usá-lo."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1234
#, fuzzy
msgid "MongoDB queries are super powerful, but overly verbose for common operations, requiring you to write queries even when you don't need all the parts."
msgstr "As consultas MongoDB são muito poderosas, mas demasiado detalhadas para operações comuns, exigindo que escreva consultas mesmo quando não precisa de todas as partes."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1235
#, fuzzy
msgid "MongoDB queries are JSON based, so you will need some String manipulation or using the `Document` type, and it will need a lot of boilerplate code."
msgstr "As consultas MongoDB são baseadas em JSON, pelo que será necessária alguma manipulação de String ou a utilização do tipo `Document`, e será necessário muito código de base."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1237
#, fuzzy
msgid "With Panache, we took an opinionated approach to tackle all these problems:"
msgstr "Com a Panache, adoptámos uma abordagem de opinião para resolver todos estes problemas:"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1240
#, fuzzy
msgid "Make your entities extend `PanacheMongoEntity`: it has an ID field that is auto-generated. If you require a custom ID strategy, you can extend `PanacheMongoEntityBase` instead and handle the ID yourself."
msgstr "Faça as suas entidades estenderem `PanacheMongoEntity`: tem um campo de ID que é gerado automaticamente. Se necessitar de uma estratégia de ID personalizada, pode estender `PanacheMongoEntityBase` e tratar do ID você mesmo."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1243
#, fuzzy
msgid "Use public fields. Get rid of dumb getter and setters. Under the hood, we will generate all getters and setters that are missing, and rewrite every access to these fields to use the accessor methods. This way you can still write _useful_ accessors when you need them, which will be used even though your entity users still use field accesses."
msgstr "Utilizar campos públicos. Livrar-se de getters e setters idiotas. Sob o capô, vamos gerar todos os getters e setters que estão faltando, e reescrever cada acesso a esses campos para usar os métodos de acesso. Desta forma, pode continuar a escrever acessores _úteis_ quando precisar deles, que serão utilizados mesmo que os utilizadores da sua entidade continuem a utilizar acessos a campos."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1246
#, fuzzy
msgid "With the active record pattern: put all your entity logic in static methods in your entity class and don't create DAOs.  Your entity superclass comes with lots of super useful static methods, and you can add your own in your entity class.  Users can just start using your entity `Person` by typing `Person.` and getting completion for all the operations in a single place."
msgstr "Com o padrão de registo ativo: coloque toda a sua lógica de entidade em métodos estáticos na sua classe de entidade e não crie DAOs. A sua superclasse de entidade vem com muitos métodos estáticos super úteis, e você pode adicionar os seus próprios métodos na sua classe de entidade. Os usuários podem começar a usar sua entidade `Person` digitando `Person.` e obtendo a conclusão de todas as operações em um único lugar."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1248
#, fuzzy
msgid "Don't write parts of the query that you don't need: write `Person.find(\"order by name\")` or `Person.find(\"name = ?1 and status = ?2\", \"Loïc\", Status.Alive)` or even better `Person.find(\"name\", \"Loïc\")`."
msgstr "Não escreva partes da consulta de que não precisa: escreva `Person.find(\"order by name\")` ou `Person.find(\"name = ?1 and status = ?2\", \"Loïc\", Status.Alive)` ou, melhor ainda, `Person.find(\"name\", \"Loïc\")`."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1250
#, fuzzy
msgid "That's all there is to it: with Panache, MongoDB has never looked so trim and neat."
msgstr "É tudo: com o Panache, o MongoDB nunca teve um aspeto tão elegante e limpo."

#. type: Title ==
#: upstream/_guides/mongodb-panache.adoc:1251
#, fuzzy, no-wrap
msgid "Defining entities in external projects or jars"
msgstr "Definição de entidades em projectos externos ou jars"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1254
#, fuzzy
msgid "MongoDB with Panache relies on compile-time bytecode enhancements to your entities."
msgstr "O MongoDB com Panache depende de aprimoramentos de bytecode em tempo de compilação para suas entidades."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1260
#, fuzzy
msgid "It attempts to identity archives with Panache entities (and consumers of Panache entities)  by the presence of the marker file `META-INF/panache-archive.marker`. Panache includes an annotation processor that will automatically create this file in archives that depend on Panache (even indirectly). If you have disabled annotation processors you may need to create this file manually in some cases."
msgstr "Tenta identificar arquivos com entidades Panache (e consumidores de entidades Panache) pela presença do ficheiro de marcação `META-INF/panache-archive.marker`. O Panache inclui um processador de anotações que criará automaticamente este ficheiro em arquivos que dependem do Panache (mesmo indiretamente). Se tiver desativado os processadores de anotações, poderá ter de criar este ficheiro manualmente em alguns casos."

#. type: Title ==
#: upstream/_guides/mongodb-panache.adoc:1261
#, fuzzy, no-wrap
msgid "Multitenancy"
msgstr "Multitenancy"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1265
#, fuzzy
msgid "\"Multitenancy is a software architecture where a single software instance can serve multiple, distinct user groups. Software-as-a-service (SaaS)  offerings are an example of multitenant architecture.\" (link:https://www.redhat.com/en/topics/cloud-computing/what-is-multitenancy#:~:text=Multitenancy%20is%20a%20software%20architecture,an%20example%20of%20multitenant%20architecture.[Red Hat])."
msgstr "\"Multitenancy é uma arquitetura de software em que uma única instância de software pode servir vários grupos de utilizadores distintos. As ofertas de software como serviço (SaaS) são um exemplo de arquitetura multitenant.\" link:https://www.redhat.com/en/topics/cloud-computing/what-is-multitenancy#:~:text=Multitenancy%20is%20a%20software%20architecture,an%20example%20of%20multitenant%20architecture.[(Red Hat])."

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1267
#, fuzzy
msgid "MongoDB with Panache currently supports the database per tenant approach, it's similar to schema per tenant approach when compared to SQL databases."
msgstr "O MongoDB com Panache suporta atualmente a abordagem de base de dados por inquilino, que é semelhante à abordagem de esquema por inquilino quando comparada com as bases de dados SQL."

#. type: Title ===
#: upstream/_guides/mongodb-panache.adoc:1268
#, fuzzy, no-wrap
msgid "Writing the application"
msgstr "Escrever a aplicação"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1272
#, fuzzy
msgid "In order to resolve the tenant from incoming requests and map it to a specific database, you must create an implementation of the `io.quarkus.mongodb.panache.common.MongoDatabaseResolver` interface."
msgstr "Para resolver o inquilino dos pedidos recebidos e mapeá-lo para uma base de dados específica, é necessário criar uma implementação da interface `io.quarkus.mongodb.panache.common.MongoDatabaseResolver`."

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1277
#: upstream/_guides/mongodb-panache.adoc:1309
#, no-wrap
msgid ""
"import io.quarkus.mongodb.panache.common.MongoDatabaseResolver;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1280
#, no-wrap
msgid ""
"@RequestScoped // <1>\n"
"public class CustomMongoDatabaseResolver implements MongoDatabaseResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1283
#, no-wrap
msgid ""
"    @Inject\n"
"    RoutingContext context;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1288
#, no-wrap
msgid ""
"    @Override\n"
"    public String resolve() {\n"
"        return context.request().getHeader(\"X-Tenant\");\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1290
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1292
#, fuzzy
msgid "The bean is made `@RequestScoped` as the tenant resolution depends on the incoming request."
msgstr "O bean é feito `@RequestScoped`, uma vez que a resolução do inquilino depende do pedido recebido."

#. type: delimited block =
#: upstream/_guides/mongodb-panache.adoc:1297
#, fuzzy
msgid "The database selection priority order is as follow: `@MongoEntity(database=\"mizain\")`, `MongoDatabaseResolver`, and then `quarkus.mongodb.database` property."
msgstr "A ordem de prioridade da seleção da base de dados é a seguinte: `@MongoEntity(database=\"mizain\")`, `MongoDatabaseResolver`, e depois `quarkus.mongodb.database` propriedade."

#. type: delimited block =
#: upstream/_guides/mongodb-panache.adoc:1304
#, fuzzy
msgid "If you also use xref:security-openid-connect-multitenancy.adoc[OIDC multitenancy], then if the OIDC tenantID and MongoDB database are the same and must be extracted from the Vert.x `RoutingContext` you can pass the tenant id from the OIDC `TenantResolver` to the MongoDB with Panache `MongoDatabaseResolver` as a `RoutingContext` attribute, for example:"
msgstr "Se também utilizar o OIDC  link:security-openid-connect-multitenancy.html[multitenancy], se o tenantID do OIDC e a base de dados MongoDB forem os mesmos e tiverem de ser extraídos do Vert.x `RoutingContext`, pode passar o tenant id do OIDC `TenantResolver` para o MongoDB com Panache `MongoDatabaseResolver` como um atributo `RoutingContext`, por exemplo:"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1312
#, no-wrap
msgid ""
"@RequestScoped\n"
"public class CustomMongoDatabaseResolver implements MongoDatabaseResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1322
#, no-wrap
msgid ""
"    @Inject\n"
"    RoutingContext context;\n"
"    ...\n"
"    @Override\n"
"    public String resolve() {\n"
"        // OIDC TenantResolver has already calculated the tenant id and saved it as a RoutingContext `tenantId` attribute:\n"
"        return context.get(\"tenantId\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/mongodb-panache.adoc:1326
#, fuzzy
msgid "Given this entity:"
msgstr "Dada esta entidade:"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1331
#, no-wrap
msgid ""
"import org.bson.codecs.pojo.annotations.BsonId;\n"
"import io.quarkus.mongodb.panache.common.MongoEntity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1339
#, no-wrap
msgid ""
"@MongoEntity(collection = \"persons\")\n"
"public class Person extends PanacheMongoEntityBase {\n"
"    @BsonId\n"
"    public Long id;\n"
"    public String firstname;\n"
"    public String lastname;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1342
#, fuzzy
msgid "And this resource:"
msgstr "E este recurso:"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1346
#, no-wrap
msgid "import java.net.URI;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1352
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.POST;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.core.Response;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1355
#, no-wrap
msgid ""
"@Path(\"/persons\")\n"
"public class PersonResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1361
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/{id}\")\n"
"    public Person getById(Long id) {\n"
"        return Person.findById(id);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1368
#, no-wrap
msgid ""
"    @POST\n"
"    public Response create(Person person) {\n"
"        Person.persist(person);\n"
"        return Response.created(URI.create(String.format(\"/persons/%d\", person.id))).build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1371
#, fuzzy
msgid "From the classes above, we have enough to persist and fetch persons from different databases, so it's possible to see how it works."
msgstr "A partir das classes acima, temos o suficiente para persistir e buscar pessoas de diferentes bases de dados, por isso é possível ver como funciona."

#. type: Title ===
#: upstream/_guides/mongodb-panache.adoc:1372
#, fuzzy, no-wrap
msgid "Configuring the application"
msgstr "Configurar a aplicação"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1375
#, fuzzy
msgid "The same mongo connection will be used for all tenants, so a database has to be created for every tenant."
msgstr "A mesma ligação mongo será utilizada para todos os inquilinos, pelo que tem de ser criada uma base de dados para cada inquilino."

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1381
#, no-wrap
msgid ""
"quarkus.mongodb.connection-string=mongodb://login:pass@mongo:27017\n"
"# The default database\n"
"quarkus.mongodb.database=sanjoka\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/mongodb-panache.adoc:1383
#, fuzzy, no-wrap
msgid "Testing"
msgstr "Ensaios"

#. type: Plain text
#: upstream/_guides/mongodb-panache.adoc:1386
#, fuzzy
msgid "You can write your test like this:"
msgstr "Pode escrever o seu teste da seguinte forma:"

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1391
#, no-wrap
msgid ""
"import static org.junit.jupiter.api.Assertions.assertEquals;\n"
"import static org.junit.jupiter.api.Assertions.assertTrue;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1393
#, no-wrap
msgid "import java.util.Objects;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1396
#, no-wrap
msgid ""
"import org.apache.commons.lang3.builder.EqualsBuilder;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1402
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.restassured.RestAssured;\n"
"import io.restassured.http.Method;\n"
"import io.restassured.response.Response;\n"
"import io.restassured.specification.RequestSpecification;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1405
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheMongoMultiTenancyTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1409
#, no-wrap
msgid ""
"    public static final String TENANT_HEADER_NAME = \"X-Tenant\";\n"
"    private static final String TENANT_1 = \"Tenant1\";\n"
"    private static final String TENANT_2 = \"Tenant2\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1416
#, no-wrap
msgid ""
"    @Test\n"
"    public void testMongoDatabaseResolverUsingPersonResource() {\n"
"        Person person1 = new Person();\n"
"        person1.id = 1L;\n"
"        person1.firstname = \"Pedro\";\n"
"        person1.lastname = \"Pereira\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1421
#, no-wrap
msgid ""
"        Person person2 = new Person();\n"
"        person2.id = 2L;\n"
"        person2.firstname = \"Tibé\";\n"
"        person2.lastname = \"Venâncio\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1423
#, no-wrap
msgid "        String endpoint = \"/persons\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1427
#, no-wrap
msgid ""
"        // creating person 1\n"
"        Response createPerson1Response = callCreatePersonEndpoint(endpoint, TENANT_1, person1);\n"
"        assertResponse(createPerson1Response, 201);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1431
#, no-wrap
msgid ""
"        // checking person 1 creation\n"
"        Response getPerson1ByIdResponse = callGetPersonByIdEndpoint(endpoint, person1.id, TENANT_1);\n"
"        assertResponse(getPerson1ByIdResponse, 200, person1);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1435
#, no-wrap
msgid ""
"        // creating person 2\n"
"        Response createPerson2Response = callCreatePersonEndpoint(endpoint, TENANT_2, person2);\n"
"        assertResponse(createPerson2Response, 201);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1440
#, no-wrap
msgid ""
"        // checking person 2 creation\n"
"        Response getPerson2ByIdResponse = callGetPersonByIdEndpoint(endpoint, person2.id, TENANT_2);\n"
"        assertResponse(getPerson2ByIdResponse, 200, person2);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1449
#, no-wrap
msgid ""
"    protected Response callCreatePersonEndpoint(String endpoint, String tenant, Object person) {\n"
"        return RestAssured.given()\n"
"                .header(\"Content-Type\", \"application/json\")\n"
"                .header(TENANT_HEADER_NAME, tenant)\n"
"                .body(person)\n"
"                .post(endpoint)\n"
"                .andReturn();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1453
#, no-wrap
msgid ""
"    private Response callGetPersonByIdEndpoint(String endpoint, Long resourceId, String tenant) {\n"
"        RequestSpecification request = RestAssured.given()\n"
"                .header(\"Content-Type\", \"application/json\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1457
#, no-wrap
msgid ""
"        if (Objects.nonNull(tenant) && !tenant.isBlank()) {\n"
"            request.header(TENANT_HEADER_NAME, tenant);\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1462
#, no-wrap
msgid ""
"        return request.when()\n"
"                .request(Method.GET, endpoint.concat(\"/{id}\"), resourceId)\n"
"                .andReturn();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1466
#, no-wrap
msgid ""
"    private void assertResponse(Response response, Integer expectedStatusCode) {\n"
"        assertResponse(response, expectedStatusCode, null);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mongodb-panache.adoc:1474
#, no-wrap
msgid ""
"    private void assertResponse(Response response, Integer expectedStatusCode, Object expectedResponseBody) {\n"
"        assertEquals(expectedStatusCode, response.statusCode());\n"
"        if (Objects.nonNull(expectedResponseBody)) {\n"
"            assertTrue(EqualsBuilder.reflectionEquals(response.as(expectedResponseBody.getClass()), expectedResponseBody));\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""
