# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-29 08:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/quarkus-reactive-architecture.adoc:6
#, fuzzy, no-wrap
msgid "Quarkus Reactive Architecture"
msgstr "Arquitetura reactiva Quarkus"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:16
#, fuzzy
msgid "Quarkus is reactive.  It's even more than this: Quarkus unifies reactive and imperative programming.  You don't even have to choose: you can implement reactive components and imperative components then combine them inside the very **same** application.  No need to use different stacks, tooling or APIs; Quarkus bridges both worlds."
msgstr "O Quarkus é reativo. É ainda mais do que isso: Quarkus unifica a programação reactiva e imperativa. Nem sequer é preciso escolher: é possível implementar componentes reactivos e componentes imperativos e combiná-los na *mesma* aplicação. Não há necessidade de utilizar pilhas, ferramentas ou APIs diferentes; o Quarkus faz a ponte entre os dois mundos."

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:20
#, fuzzy
msgid "This page will explain what we mean by _Reactive_ and how Quarkus enables it.  We will also discuss execution and programming models.  Finally, we will list the Quarkus extensions offering reactive facets."
msgstr "Esta página explicará o que queremos dizer com _Reativo_ e como o Quarkus o permite. Também discutiremos os modelos de execução e de programação. Por fim, listaremos as extensões do Quarkus que oferecem facetas reactivas."

#. type: Title ==
#: upstream/_guides/quarkus-reactive-architecture.adoc:21
#, fuzzy, no-wrap
msgid "What is _Reactive_?"
msgstr "O que é _Reativo_?"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:25
#, fuzzy
msgid "The _Reactive_ word is overloaded and associated with many concepts such as back-pressure, monads, or event-driven architecture.  So, let's clarify what we mean by _Reactive_."
msgstr "A palavra _Reativo_ está sobrecarregada e associada a muitos conceitos, tais como pressão de retorno, mónadas ou arquitetura orientada por eventos. Por isso, vamos esclarecer o que queremos dizer com _Reativo_."

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:28
#, fuzzy
msgid "_Reactive_ is a set of principles and guidelines to build responsive distributed systems and applications.  The https://www.reactivemanifesto.org/[Reactive Manifesto] characterizes _Reactive Systems_ as distributed systems having four characteristics:"
msgstr "_Reativo_ é um conjunto de princípios e directrizes para construir sistemas e aplicações distribuídas com capacidade de resposta. O  link:https://www.reactivemanifesto.org/[Manifesto Re] ativo caracteriza os _Sistemas Reactivos_ como sistemas distribuídos com quatro características:"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:30
#, fuzzy
msgid "Responsive - they must respond in a timely fashion"
msgstr "Responsivos - devem responder em tempo útil"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:31
#, fuzzy
msgid "Elastic - they adapt themselves to the fluctuating load"
msgstr "Elásticos - adaptam-se à carga flutuante"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:32
#, fuzzy
msgid "Resilient - they handle failures gracefully"
msgstr "Resilientes - lidam com os fracassos de forma graciosa"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:33
#, fuzzy
msgid "Asynchronous message passing - the component of a reactive system interact using messages"
msgstr "Passagem assíncrona de mensagens - os componentes de um sistema reativo interagem através de mensagens"

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_guides/quarkus-reactive-architecture.adoc:34
#: upstream/_guides/quarkus-reactive-architecture.adoc:103
#, fuzzy, no-wrap
msgid "Reactive"
msgstr "Reativo"

#. type: Target for macro image
#: upstream/_guides/quarkus-reactive-architecture.adoc:34
#, no-wrap
msgid "reactive-systems.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:37
#, fuzzy
msgid "In addition to this, the https://principles.reactive.foundation/[Reactive Principles white paper] lists a set of rules and patterns to help the construction of reactive systems."
msgstr "Além disso, o  link:https://principles.reactive.foundation/[Livro Branco sobre Princípios Reactivos] enumera um conjunto de regras e padrões para ajudar na construção de sistemas reactivos."

#. type: Title ==
#: upstream/_guides/quarkus-reactive-architecture.adoc:38
#, fuzzy, no-wrap
msgid "Reactive Systems and Quarkus"
msgstr "Sistemas reactivos e Quarkus"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:47
#, fuzzy
msgid "Reactive System is an architectural style that can be summarized by: distributed systems done right.  Relying on asynchronous message passing helps enforce the loose coupling (both in terms of space and time) between the different components.  You send messages to virtual destinations. The receiver can be located anywhere, or even not yet exist at the time of the message dispatch.  The elasticity pillar allows scaling up and down individual components according to the load.  Elasticity also provides redundancy, which helps with the resilience pillar.  Failures are inevitable.  Components forming a reactive system must handle them gracefully, avoid cascading failures, and self-adapt themselves."
msgstr "O sistema reativo é um estilo de arquitetura que pode ser resumido da seguinte forma: sistemas distribuídos bem feitos. O facto de se basear na passagem assíncrona de mensagens ajuda a reforçar o acoplamento flexível (tanto em termos de espaço como de tempo) entre os diferentes componentes. As mensagens são enviadas para destinos virtuais. O recetor pode estar localizado em qualquer lugar, ou mesmo não existir no momento do envio da mensagem. O pilar da elasticidade permite aumentar e diminuir a escala de componentes individuais consoante a carga. A elasticidade também proporciona redundância, o que ajuda no pilar da resiliência. As falhas são inevitáveis. Os componentes que formam um sistema reativo devem tratá-las com elegância, evitar falhas em cascata e auto-adaptar-se."

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:51
#, fuzzy
msgid "A responsive system can continue to handle the request while facing failures and under fluctuating load.  Quarkus has been tailored for that.  It provides features that will help you design, implement and operate reactive systems."
msgstr "Um sistema com capacidade de resposta pode continuar a tratar o pedido enquanto enfrenta falhas e sob carga flutuante. O Quarkus foi concebido para isso. Fornece funcionalidades que o ajudarão a conceber, implementar e operar sistemas reactivos."

#. type: Title ==
#: upstream/_guides/quarkus-reactive-architecture.adoc:52
#, fuzzy, no-wrap
msgid "Reactive Applications"
msgstr "Aplicações reactivas"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:56
#, fuzzy
msgid "Quarkus is not only going to help you build reactive systems.  It's also going to make sure that each constituent enforces the reactive principles and is highly efficient."
msgstr "O Quarkus não vai apenas ajudá-lo a construir sistemas reactivos. Vai também certificar-se de que cada componente aplica os princípios reactivos e é altamente eficiente."

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:62
#, fuzzy
msgid "Efficiency is essential, especially in the Cloud and in containerized environments.  Resources, such as CPU and memory, are shared among multiple applications.  Greedy applications that consume lots of memory are inefficient and put penalties on sibling applications.  You may need to request more memory, CPU, or bigger virtual machines.  It either increases your monthly Cloud bill or decreases your deployment density."
msgstr "A eficiência é essencial, especialmente na Nuvem e em ambientes contentorizados. Os recursos, como CPU e memória, são partilhados entre várias aplicações. Aplicativos gananciosos que consomem muita memória são ineficientes e penalizam os aplicativos irmãos. Pode ser necessário solicitar mais memória, CPU ou máquinas virtuais maiores. Isso aumenta a sua fatura mensal da Cloud ou diminui a densidade da implementação."

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:68
#, fuzzy
msgid "I/O is an essential part of almost any modern system.  Whether it is to call a remote service, interact with a database, or send messages to a broker, there are all I/O-based operations.  Efficiently handling them is critical to avoid greedy applications.  For this reason, Quarkus uses non-blocking I/O, which allows a low number of OS threads to manage many concurrent I/Os.  As a result, Quarkus applications allow for higher concurrency, use less memory, and improve the deployment density."
msgstr "As E/S são uma parte essencial de quase todos os sistemas modernos. Quer se trate de chamar um serviço remoto, interagir com uma base de dados ou enviar mensagens para um corretor, todas estas operações são baseadas em E/S. O tratamento eficiente dessas operações é fundamental para evitar aplicações gananciosas. Por este motivo, o Quarkus utiliza E/S sem bloqueio, o que permite que um número reduzido de threads do SO gere muitas E/S simultâneas. Como resultado, as aplicações Quarkus permitem uma maior simultaneidade, utilizam menos memória e melhoram a densidade de implantação."

#. type: Title ==
#: upstream/_guides/quarkus-reactive-architecture.adoc:69
#, fuzzy, no-wrap
msgid "How does Quarkus enable Reactive?"
msgstr "Como é que o Quarkus ativa o Reactive?"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:73
#, fuzzy
msgid "Under the hood, Quarkus has a reactive engine.  This engine, powered by Eclipse Vert.x and Netty, handles the non-blocking I/O interactions."
msgstr "Por baixo do capô, o Quarkus tem um motor reativo. Este motor, alimentado pelo Eclipse Vert.x e Netty, trata das interacções de E/S sem bloqueio."

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_guides/quarkus-reactive-architecture.adoc:74
#, fuzzy, no-wrap
msgid "Quarkus Reactive Core"
msgstr "Núcleo Reativo Quarkus"

#. type: Target for macro image
#: upstream/_guides/quarkus-reactive-architecture.adoc:74
#, no-wrap
msgid "quarkus-reactive-core.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:77
#, fuzzy
msgid "Quarkus extensions and the application code can use this engine to orchestrate I/O interactions, interact with databases, send and receive messages, and so on."
msgstr "As extensões Quarkus e o código da aplicação podem utilizar este motor para orquestrar interacções de E/S, interagir com bases de dados, enviar e receber mensagens, etc."

#. type: Title ==
#: upstream/_guides/quarkus-reactive-architecture.adoc:78
#, fuzzy, no-wrap
msgid "Reactive execution model"
msgstr "Modelo de execução reativo"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:82
#, fuzzy
msgid "While using non-blocking I/O has tremendous benefits, it does not come for free.  Indeed, it introduces a new execution model quite different from the one used by classical frameworks."
msgstr "Embora a utilização de E/S sem bloqueio tenha enormes benefícios, não é gratuita. De facto, introduz um novo modelo de execução bastante diferente do utilizado pelas estruturas clássicas."

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:93
#, fuzzy
msgid "Traditional applications use blocking I/O and an imperative (sequential) execution model.  So, in an application exposing an HTTP endpoint, each HTTP request is associated with a thread.  In general, that thread is going to process the whole request and the thread is tied up serving only that request for the duration of that request.  When the processing requires interacting with a remote service, it uses blocking I/O.  The thread is blocked, waiting for the result of the I/O.  While that model is simple to develop with (as everything is sequential), it has a few drawbacks.  To handle concurrent requests, you need multiple threads, so, you need to introduce a worker thread pool.  The size of this pool constrains the concurrency of the application.  In addition, each thread has a cost in terms of memory and CPU.  Large thread pools result in greedy applications."
msgstr "As aplicações tradicionais utilizam E/S bloqueantes e um modelo de execução imperativo (sequencial). Assim, numa aplicação que expõe um ponto de extremidade HTTP, cada pedido HTTP está associado a uma thread. Em geral, essa thread vai processar todo o pedido e a thread está ligada a servir apenas esse pedido durante a sua duração. Quando o processamento exige a interação com um serviço remoto, é utilizada uma E/S bloqueante. A thread fica bloqueada, aguardando o resultado da E/S. Embora esse modelo seja simples de desenvolver (já que tudo é seqüencial), ele tem algumas desvantagens. Para lidar com pedidos simultâneos, são necessárias várias threads, portanto, é necessário introduzir um pool de threads de trabalho. O tamanho desse pool restringe a simultaneidade da aplicação. Além disso, cada thread tem um custo em termos de memória e CPU. Grandes pools de threads resultam em aplicações ávidas."

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_guides/quarkus-reactive-architecture.adoc:94
#, fuzzy, no-wrap
msgid "Imperative"
msgstr "Imperativo"

#. type: Target for macro image
#: upstream/_guides/quarkus-reactive-architecture.adoc:94
#, no-wrap
msgid "blocking-threads.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:102
#, fuzzy
msgid "As we have seen above, non-blocking I/O avoids that problem.  A few threads can handle many concurrent I/O.  If we go back to the HTTP endpoint example, the request processing is executed on one of these I/O threads.  Because there are only a few of them, you need to use them wisely.  When the request processing needs to call a remote service, you can't block the thread anymore.  You schedule the I/O and pass a continuation, i.e., the code to execute once the I/O completes."
msgstr "Como vimos acima, as E/S sem bloqueio evitam esse problema. Algumas threads podem lidar com muitas E/S simultâneas. Se voltarmos ao exemplo do ponto de extremidade HTTP, o processamento da solicitação é executado em uma dessas threads de E/S. Como existem poucas threads, é preciso usá-las com sabedoria. Como há apenas algumas delas, é preciso usá-las com sabedoria. Quando o processamento da solicitação precisa chamar um serviço remoto, não é mais possível bloquear a thread. Você agenda o E/S e passa uma continuação, ou seja, o código a ser executado quando o E/S for concluído."

#. type: Target for macro image
#: upstream/_guides/quarkus-reactive-architecture.adoc:103
#, no-wrap
msgid "reactive-thread.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:106
#, fuzzy
msgid "This model is much more efficient, but we need a way to write code to express these continuations."
msgstr "Este modelo é muito mais eficiente, mas precisamos de uma forma de escrever código para exprimir estas continuações."

#. type: Title ==
#: upstream/_guides/quarkus-reactive-architecture.adoc:107
#, fuzzy, no-wrap
msgid "Reactive Programming Models"
msgstr "Modelos de programação reactiva"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:111
#, fuzzy
msgid "The Quarkus architecture, based on non-blocking I/O and message passing, allows multiple supporting reactive development models that are all different in how they express continuations.  The two main ways to write reactive code with Quarkus are:"
msgstr "A arquitetura Quarkus, baseada em E/S sem bloqueio e na passagem de mensagens, permite vários modelos de desenvolvimento reativo de apoio, todos diferentes na forma como expressam as continuações. As duas principais formas de escrever código reativo com o Quarkus são:"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:113
#, fuzzy
msgid "Reactive Programming with https://smallrye.io/smallrye-mutiny[Mutiny], and"
msgstr "Programação reactiva com  link:https://smallrye.io/smallrye-mutiny[Mutiny], e"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:114
#, fuzzy
msgid "Coroutines with Kotlin"
msgstr "Corrotinas com Kotlin"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:119
#, fuzzy
msgid "First, https://smallrye.io/smallrye-mutiny[Mutiny] is an intuitive, event-driven reactive programming library.  With Mutiny, you write event-driven code.  Your code is a pipeline receiving events and processing them.  Each stage in your pipeline can be seen as a continuation, as Mutiny invokes them when the upstream part of the pipeline emits an event."
msgstr "Em primeiro lugar,  link:https://smallrye.io/smallrye-mutiny[o Mutiny] é uma biblioteca de programação reactiva intuitiva e orientada para eventos. Com Mutiny, você escreve código orientado a eventos. Seu código é um pipeline que recebe eventos e os processa. Cada etapa do seu pipeline pode ser vista como uma continuação, pois o Mutiny as invoca quando a parte anterior do pipeline emite um evento."

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:123
#, fuzzy
msgid "The Mutiny API has been tailored to improve the readability and maintenance of the codebase.  Mutiny provides everything you need to orchestrate asynchronous actions, including concurrent execution.  It also offers a large set of operators to manipulate individual events and streams of events."
msgstr "A API do Mutiny foi adaptada para melhorar a legibilidade e a manutenção da base de código. O Mutiny fornece tudo o que é necessário para orquestrar acções assíncronas, incluindo a execução simultânea. Ele também oferece um grande conjunto de operadores para manipular eventos individuais e fluxos de eventos."

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:126
#, fuzzy
msgid "Find more info about Mutiny and its usage in Quarkus on xref:mutiny-primer.adoc[Mutiny support documentation]."
msgstr "Para mais informações sobre o Mutiny e a sua utilização no Quarkus, consulte a  link:mutiny-primer.html[documentação de apoio do Mutiny]."

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:130
#, fuzzy
msgid "Co-routines are a way to write asynchronous code sequentially.  It suspends the execution of the code during I/O and registers the rest of the code as the continuation.  Kotlin coroutines are great when developing in Kotlin and only need to express sequential compositions (chain of co-dependent asynchronous tasks)."
msgstr "As co-rotinas são uma forma de escrever código assíncrono sequencialmente. Suspende a execução do código durante a E/S e regista o resto do código como a continuação. As corrotinas Kotlin são óptimas quando se desenvolve em Kotlin e só é necessário exprimir composições sequenciais (cadeia de tarefas assíncronas co-dependentes)."

#. type: Title ==
#: upstream/_guides/quarkus-reactive-architecture.adoc:131
#, fuzzy, no-wrap
msgid "Unification of Imperative and Reactive"
msgstr "Unificação do imperativo e do reativo"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:136
#, fuzzy
msgid "Changing your development model is not simple.  It requires relearning and restructuring code in a non-blocking fashion.  Fortunately, you don't have to do it!"
msgstr "Mudar o seu modelo de desenvolvimento não é simples. Requer reaprender e reestruturar o código de uma forma não bloqueante. Felizmente, não tem de o fazer!"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:143
#, fuzzy
msgid "Quarkus is inherently reactive thanks to its reactive engine.  But, you, as an application developer, don't have to write reactive code.  Quarkus unifies reactive and imperative.  It means that you can write traditional blocking applications on Quarkus.  But how do you avoid blocking the I/O threads? Quarkus implements a https://en.wikipedia.org/wiki/Proactor_pattern[proactor pattern] that switches to worker thread when needed."
msgstr "O Quarkus é inerentemente reativo graças ao seu motor reativo. Mas, como programador de aplicações, não tem de escrever código reativo. O Quarkus unifica o reativo e o imperativo. Isto significa que pode escrever aplicações tradicionais de bloqueio no Quarkus. Mas como é que se evita o bloqueio das threads de E/S? O Quarkus implementa um  link:https://en.wikipedia.org/wiki/Proactor_pattern[padrão proactor] que muda para uma thread de trabalho quando necessário."

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_guides/quarkus-reactive-architecture.adoc:144
#, fuzzy, no-wrap
msgid "The proactor pattern in Quarkus"
msgstr "O padrão proactor no Quarkus"

#. type: Target for macro image
#: upstream/_guides/quarkus-reactive-architecture.adoc:144
#, no-wrap
msgid "proactor-pattern.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:151
#, fuzzy
msgid "Thanks to hints in your code (such as the `@Blocking` and `@NonBlocking` annotations), Quarkus extensions can decide when the application logic is blocking or non-blocking.  If we go back to the HTTP endpoint example from above, the HTTP request is always received on an I/O thread.  Then, the extension dispatching that request to your code decides whether to call it on the I/O thread, avoiding thread switches, or on a worker thread.  This decision depends on the extension.  For example, the RESTEasy Reactive extension uses the `@Blocking` annotation to determine if the method needs to be invoked using a worker thread, or if it can be invoked using the I/O thread."
msgstr "Graças às dicas no seu código (como as anotações `@Blocking` e `@NonBlocking` ), as extensões Quarkus podem decidir quando a lógica da aplicação é bloqueante ou não bloqueante. Se voltarmos ao exemplo do ponto de extremidade HTTP acima, o pedido HTTP é sempre recebido numa thread de E/S. Em seguida, a extensão que despacha esse pedido para o seu código decide se deve chamá-lo na thread de E/S, evitando trocas de thread, ou em uma thread de trabalho. Essa decisão depende da extensão. Por exemplo, a extensão RESTEasy Reactive usa a anotação `@Blocking` para determinar se o método precisa ser chamado usando um thread de trabalho ou se pode ser chamado usando o thread de E/S."

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:155
#, fuzzy
msgid "Quarkus is pragmatic and versatile.  You decide how to develop and execute your application.  You can use the imperative way, the reactive way, or mix them, using reactive on the parts of the application under high concurrency."
msgstr "O Quarkus é pragmático e versátil. O utilizador decide como desenvolver e executar a sua aplicação. Pode utilizar o modo imperativo, o modo reativo ou misturá-los, utilizando o modo reativo nas partes da aplicação com elevada simultaneidade."

#. type: Title ==
#: upstream/_guides/quarkus-reactive-architecture.adoc:157
#, fuzzy, no-wrap
msgid "Quarkus Extensions enabling Reactive"
msgstr "Extensões Quarkus que permitem a reatividade"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:162
#, fuzzy
msgid "Quarkus offers a large set of reactive APIs and features.  This section lists the most important, but it's not an exhaustive list.  Quarkus adds new features in every release, and the https://github.com/quarkiverse[Quarkiverse] proposes many extensions enabling _Reactive_."
msgstr "O Quarkus oferece um grande conjunto de APIs e funcionalidades reactivas. Esta secção lista as mais importantes, mas não é uma lista exaustiva. O Quarkus adiciona novas funcionalidades em cada versão, e o  link:https://github.com/quarkiverse[Quarkiverse] propõe muitas extensões que permitem a _reatividade_."

#. type: Title ===
#: upstream/_guides/quarkus-reactive-architecture.adoc:163
#, fuzzy, no-wrap
msgid "HTTP"
msgstr "HTTP"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:167
#, fuzzy
msgid "RESTEasy Reactive: an implementation of Jakarta REST tailored for the Quarkus architecture.  It follows a reactive-first approach but allows imperative code using the `@Blocking` annotation."
msgstr "RESTEasy Reactive: uma implementação do Jakarta REST adaptada à arquitetura Quarkus. Segue uma abordagem reactiva em primeiro lugar, mas permite código imperativo utilizando a anotação `@Blocking`."

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:168
#, fuzzy
msgid "Reactive Routes: a declarative way to register HTTP routes directly on the Vert.x router used by Quarkus to route HTTP requests to methods."
msgstr "Rotas Reactivas: uma forma declarativa de registar rotas HTTP diretamente no router Vert.x utilizado pelo Quarkus para encaminhar pedidos HTTP para métodos."

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:170
#, fuzzy
msgid "Reactive Rest Client: allows consuming HTTP endpoints.  Under the hood, it uses the non-blocking I/O features from Quarkus."
msgstr "Reactive Rest Client: permite consumir endpoints HTTP. Na sua estrutura, utiliza as funcionalidades de E/S não bloqueantes do Quarkus."

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:171
#, fuzzy
msgid "Qute - the Qute template engine exposes a reactive API to render templates in a non-blocking manner."
msgstr "Qute - o motor de modelos Qute expõe uma API reactiva para renderizar modelos de uma forma não bloqueante."

#. type: Title ===
#: upstream/_guides/quarkus-reactive-architecture.adoc:172
#, fuzzy, no-wrap
msgid "Data"
msgstr "Dados"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:175
#, fuzzy
msgid "Hibernate Reactive: a version of Hibernate ORM using asynchronous and non-blocking clients to interact with the database."
msgstr "Hibernate Reactive: uma versão do Hibernate ORM que utiliza clientes assíncronos e sem bloqueio para interagir com a base de dados."

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:176
#, fuzzy
msgid "Hibernate Reactive with Panache: provide active record and repository support on top of Hibernate Reactive."
msgstr "Hibernate Reactive with Panache: suporte de registos activos e repositórios sobre o Hibernate Reactive."

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:177
#, fuzzy
msgid "Reactive PostgreSQL client: an asynchronous and non-blocking client interacting with a PostgreSQL database, allowing high concurrency."
msgstr "Cliente PostgreSQL reativo: um cliente assíncrono e não bloqueante que interage com uma base de dados PostgreSQL, permitindo uma elevada simultaneidade."

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:178
#, fuzzy
msgid "Reactive MySQL client: an asynchronous and non-blocking client interacting with a MySQL database"
msgstr "Cliente MySQL reativo: um cliente assíncrono e sem bloqueios que interage com uma base de dados MySQL"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:179
#, fuzzy
msgid "The MongoDB extension: exposes an imperative and reactive (Mutiny) APIs to interact with MongoDB."
msgstr "A extensão MongoDB: expõe uma API imperativa e reactiva (Mutiny) para interagir com o MongoDB."

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:180
#, fuzzy
msgid "Mongo with Panache offers active record support for both the imperative and reactive APIs."
msgstr "O Mongo with Panache oferece suporte de registo ativo para APIs imperativas e reactivas."

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:181
#, fuzzy
msgid "The Cassandra extension: exposes an imperative and reactive (Mutiny) APIs to interact with Cassandra"
msgstr "A extensão Cassandra: expõe uma API imperativa e reactiva (Mutiny) para interagir com o Cassandra"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:182
#, fuzzy
msgid "The Redis extension: exposes an imperative and reactive (Mutiny) APIs to store and retrieve data from a Redis key-value store."
msgstr "A extensão Redis: expõe uma API imperativa e reactiva (Mutiny) para armazenar e recuperar dados de um armazenamento de valores chave Redis."

#. type: Title ===
#: upstream/_guides/quarkus-reactive-architecture.adoc:183
#, fuzzy, no-wrap
msgid "Event-Driven Architecture"
msgstr "Arquitetura orientada para eventos"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:186
#, fuzzy
msgid "Reactive Messaging: allows implementing event-driven applications using reactive and imperative code."
msgstr "Mensagens reactivas: permite implementar aplicações orientadas para eventos utilizando código reativo e imperativo."

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:187
#, fuzzy
msgid "Kafka Connector for Reactive Messaging: allows implementing applications consuming and writing Kafka records"
msgstr "Conector Kafka para mensagens reactivas: permite implementar aplicações que consomem e escrevem registos Kafka"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:188
#, fuzzy
msgid "AMQP 1.0 Connector for Reactive Message: allows implementing applications sending and receiving AMQP messages."
msgstr "AMQP 1.0 Connector for Reactive Message: permite implementar aplicações que enviam e recebem mensagens AMQP."

#. type: Title ===
#: upstream/_guides/quarkus-reactive-architecture.adoc:189
#, fuzzy, no-wrap
msgid "Network Protocols and Utilities"
msgstr "Protocolos e utilitários de rede"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:193
#, fuzzy
msgid "gRPC: implement and consume gRPC services.  Offer reactive and imperative programming interfaces."
msgstr "gRPC: implementar e consumir serviços gRPC. Oferece interfaces de programação reactivas e imperativas."

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:194
#, fuzzy
msgid "GraphQL: implement and query (client) data store using GraphQL. Offers Mutiny APIs and subscriptions as event streams."
msgstr "GraphQL: implementar e consultar o armazenamento de dados (cliente) utilizando GraphQL. Oferece APIs Mutiny e subscrições como fluxos de eventos."

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:195
#, fuzzy
msgid "Fault Tolerance: provide retry, fallback, circuit breakers abilities to your application.It can be used with Mutiny types."
msgstr "Tolerância a falhas: fornece capacidades de repetição, de recuperação de falhas e de disjuntores para a sua aplicação, podendo ser utilizado com tipos Mutiny."

#. type: Title ===
#: upstream/_guides/quarkus-reactive-architecture.adoc:197
#, fuzzy, no-wrap
msgid "Engine"
msgstr "Motor"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:201
#, fuzzy
msgid "Vert.x : the underlying reactive engine of Quarkus.  The extension allows accessing to the managed Vert.x instance, as well as its Mutiny variant (exposing the Vert.x API using Mutiny types)"
msgstr "Vert.x : o motor reativo subjacente do Quarkus. A extensão permite aceder à instância gerida do Vert.x, bem como à sua variante Mutiny (expondo a API do Vert.x utilizando tipos Mutiny)"

#. type: Plain text
#: upstream/_guides/quarkus-reactive-architecture.adoc:201
#, fuzzy
msgid "Context Propagation: capture and propagate contextual objects (transaction, principal…) in a reactive pipeline"
msgstr "Propagação de contexto: capturar e propagar objectos contextuais (transação, principal...) num pipeline reativo"
