# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-29 08:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/hibernate-reactive-panache.adoc:6
#, fuzzy, no-wrap
msgid "Simplified Hibernate Reactive with Panache"
msgstr "Hibernate Reativo Simplificado com Panache"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:18
#, fuzzy
msgid "link:https://hibernate.org/reactive/[Hibernate Reactive] is the only reactive Jakarta Persistence (formerly known as JPA) implementation and offers you the full breadth of an Object Relational Mapper allowing you to access your database over reactive drivers.  It makes complex mappings possible, but it does not make simple and common mappings trivial.  Hibernate Reactive with Panache focuses on making your entities trivial and fun to write in Quarkus."
msgstr "link:https://hibernate.org/reactive/[O Hibernate Reactive] é a única implementação reactiva da Jakarta Persistence (anteriormente conhecida como JPA) e oferece-lhe toda a amplitude de um Object Relational Mapper, permitindo-lhe aceder à sua base de dados através de controladores reactivos. Torna possíveis mapeamentos complexos, mas não torna triviais os mapeamentos simples e comuns. O Hibernate Reactive with Panache concentra-se em tornar as suas entidades triviais e divertidas de escrever no Quarkus."

#. type: delimited block =
#: upstream/_guides/hibernate-reactive-panache.adoc:23
#, fuzzy
msgid "Hibernate Reactive is not a replacement for xref:hibernate-orm-panache.adoc[Hibernate ORM] or the future of Hibernate ORM.  It is a different stack tailored for reactive use cases where you need high-concurrency."
msgstr "O Hibernate Reactive não é um substituto para o  link:hibernate-orm-panache.html[Hibernate ORM] nem o futuro do Hibernate ORM. É uma pilha diferente adaptada para casos de uso reativos em que você precisa de alta simultaneidade."

#. type: delimited block =
#: upstream/_guides/hibernate-reactive-panache.adoc:27
#, fuzzy
msgid "Furthermore, using RESTEasy Reactive, our default REST layer, does not require the use of Hibernate Reactive.  It is perfectly valid to use RESTEasy Reactive with Hibernate ORM, and if you do not need high-concurrency, or are not accustomed to the reactive paradigm, it is recommended to use Hibernate ORM."
msgstr "Além disso, o uso do RESTEasy Reactive, nossa camada REST padrão, não requer o uso do Hibernate Reactive. É perfeitamente válido usar o RESTEasy Reactive com o Hibernate ORM e, se você não precisar de alta simultaneidade ou não estiver acostumado com o paradigma reativo, é recomendável usar o Hibernate ORM."

#. type: Title ==
#: upstream/_guides/hibernate-reactive-panache.adoc:29
#, fuzzy, no-wrap
msgid "First: an example"
msgstr "Primeiro: um exemplo"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:32
#, fuzzy
msgid "What we're doing in Panache allows you to write your Hibernate Reactive entities like this:"
msgstr "O que estamos a fazer no Panache permite-lhe escrever as suas entidades reactivas do Hibernate desta forma:"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:36
#, no-wrap
msgid "import io.quarkus.hibernate.reactive.panache.PanacheEntity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:42
#: upstream/_guides/hibernate-reactive-panache.adoc:189
#: upstream/_guides/hibernate-reactive-panache.adoc:271
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:46
#: upstream/_guides/hibernate-reactive-panache.adoc:275
#, no-wrap
msgid ""
"    public static Uni<Person> findByName(String name){\n"
"        return find(\"name\", name).firstResult();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:50
#: upstream/_guides/hibernate-reactive-panache.adoc:279
#, no-wrap
msgid ""
"    public static Uni<List<Person>> findAlive(){\n"
"        return list(\"status\", Status.Alive);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:55
#: upstream/_guides/hibernate-reactive-panache.adoc:284
#, no-wrap
msgid ""
"    public static Uni<Long> deleteStefs(){\n"
"        return delete(\"name\", \"Stef\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:59
#, fuzzy
msgid "You have noticed how much more compact and readable the code is? Does this look interesting? Read on!"
msgstr "Já reparou como o código está mais compacto e legível? Isto parece-lhe interessante? Continue a ler!"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:61
#, fuzzy
msgid "The `list()` method might be surprising at first. It takes fragments of HQL (JP-QL) queries and contextualizes the rest. That makes for very concise but yet readable code."
msgstr "O método `list()` pode ser surpreendente à primeira vista. Ele pega fragmentos de consultas HQL (JP-QL) e contextualiza o resto. Isso torna o código muito conciso, mas ainda assim legível."

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:64
#, fuzzy
msgid "What was described above is essentially the link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[active record pattern], sometimes just called the entity pattern.  Hibernate with Panache also allows for the use of the more classical link:https://martinfowler.com/eaaCatalog/repository.html[repository pattern] via `PanacheRepository`."
msgstr "O que foi descrito acima é essencialmente o  link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[padrão de registo ativo], por vezes designado apenas por padrão de entidade. O Hibernate com Panache também permite a utilização do  link:https://martinfowler.com/eaaCatalog/repository.html[padrão de repositório] mais clássico através de `PanacheRepository`."

#. type: Title ==
#: upstream/_guides/hibernate-reactive-panache.adoc:65
#, fuzzy, no-wrap
msgid "Solution"
msgstr "Solução"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:69
#, fuzzy
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "Recomendamos que siga as instruções nas secções seguintes e crie a aplicação passo a passo. No entanto, pode ir diretamente para o exemplo completo."

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:71
#, fuzzy
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Clonar o repositório Git: `git clone {quickstarts-clone-url}`, ou descarregar um {quickstarts-archive-url}[arquivo]."

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:73
#, fuzzy
msgid "The solution is located in the `hibernate-reactive-panache-quickstart` link:{quickstarts-tree-url}/hibernate-reactive-panache-quickstart[directory]."
msgstr "A solução está localizada no  link:{quickstarts-tree-url}/hibernate-reactive-panache-quickstart[diretório] `hibernate-reactive-panache-quickstart`."

#. type: delimited block =
#: upstream/_guides/hibernate-reactive-panache.adoc:77
#, fuzzy
msgid "If your project is already configured to use other annotation processors, you will need to additionally add the Panache annotation processor:"
msgstr "Se o seu projeto já estiver configurado para utilizar outros processadores de anotações, terá de adicionar adicionalmente o processador de anotações Panache:"

#. type: Block title
#: upstream/_guides/hibernate-reactive-panache.adoc:79
#: upstream/_guides/hibernate-reactive-panache.adoc:123
#: upstream/_guides/hibernate-reactive-panache.adoc:910
#: upstream/_guides/hibernate-reactive-panache.adoc:1020
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:96
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-compiler-plugin</artifactId>\n"
"    <version>${compiler-plugin.version}</version>\n"
"    <configuration>\n"
"        <parameters>${maven.compiler.parameters}</parameters>\n"
"        <annotationProcessorPaths>\n"
"            <!-- Your existing annotation processor(s)... -->\n"
"            <path>\n"
"                <groupId>io.quarkus</groupId>\n"
"                <artifactId>quarkus-panache-common</artifactId>\n"
"                <version>${quarkus.platform.version}</version>\n"
"            </path>\n"
"        </annotationProcessorPaths>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/hibernate-reactive-panache.adoc:99
#: upstream/_guides/hibernate-reactive-panache.adoc:139
#: upstream/_guides/hibernate-reactive-panache.adoc:920
#: upstream/_guides/hibernate-reactive-panache.adoc:1030
#, fuzzy, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:102
#, no-wrap
msgid "annotationProcessor(\"io.quarkus:quarkus-panache-common\")\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/hibernate-reactive-panache.adoc:105
#, fuzzy, no-wrap
msgid "Setting up and configuring Hibernate Reactive with Panache"
msgstr "Instalação e configuração do Hibernate Reactive com o Panache"

#. type: delimited block =
#: upstream/_guides/hibernate-reactive-panache.adoc:108
#, fuzzy
msgid "To get started:"
msgstr "Para começar:"

#. type: delimited block =
#: upstream/_guides/hibernate-reactive-panache.adoc:110
#, fuzzy
msgid "add your settings in `{config-file}`"
msgstr "adicione as suas definições em `{config-file}`"

#. type: delimited block =
#: upstream/_guides/hibernate-reactive-panache.adoc:111
#, fuzzy
msgid "annotate your entities with `@Entity`"
msgstr "anotar as suas entidades com `@Entity`"

#. type: delimited block =
#: upstream/_guides/hibernate-reactive-panache.adoc:112
#, fuzzy
msgid "make your entities extend `PanacheEntity` (optional if you are using the repository pattern)"
msgstr "fazer com que as suas entidades estendam `PanacheEntity` (opcional se estiver a utilizar o padrão de repositório)"

#. type: delimited block =
#: upstream/_guides/hibernate-reactive-panache.adoc:114
#, fuzzy
msgid "Follow the xref:hibernate-orm.adoc#setting-up-and-configuring-hibernate-orm[Hibernate set-up guide for all configuration]."
msgstr "Siga o  link:hibernate-orm.html#setting-up-and-configuring-hibernate-orm[guia de configuração do Hibernate para toda a configuração]."

#. type: delimited block =
#: upstream/_guides/hibernate-reactive-panache.adoc:116
#, fuzzy
msgid "In your `pom.xml`, add the following dependencies:"
msgstr "Em `pom.xml`, adicione as seguintes dependências:"

#. type: delimited block =
#: upstream/_guides/hibernate-reactive-panache.adoc:118
#, fuzzy
msgid "the Hibernate Reactive with Panache extension"
msgstr "a extensão Hibernate Reactive with Panache"

#. type: delimited block =
#: upstream/_guides/hibernate-reactive-panache.adoc:119
#, fuzzy
msgid "your reactive driver extension (`quarkus-reactive-pg-client`, `quarkus-reactive-mysql-client`, `quarkus-reactive-db2-client`, ...)"
msgstr "a sua extensão de condutor reativo ( `quarkus-reactive-pg-client`, `quarkus-reactive-mysql-client`, `quarkus-reactive-db2-client`, ...)"

#. type: delimited block =
#: upstream/_guides/hibernate-reactive-panache.adoc:121
#, fuzzy
msgid "For instance:"
msgstr "Por exemplo:"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:130
#, no-wrap
msgid ""
"<!-- Hibernate Reactive dependency -->\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-hibernate-reactive-panache</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:136
#, no-wrap
msgid ""
"<!-- Reactive SQL client for PostgreSQL -->\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-reactive-pg-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:143
#, no-wrap
msgid ""
"// Hibernate Reactive dependency\n"
"implementation(\"io.quarkus:quarkus-hibernate-reactive-panache\")\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:146
#, no-wrap
msgid ""
"Reactive SQL client for PostgreSQL\n"
"implementation(\"io.quarkus:quarkus-reactive-pg-client\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:149
#, fuzzy
msgid "Then add the relevant configuration properties in `{config-file}`."
msgstr "Em seguida, adicione as propriedades de configuração relevantes em `{config-file}`."

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:157
#, no-wrap
msgid ""
"# configure your datasource\n"
"quarkus.datasource.db-kind = postgresql\n"
"quarkus.datasource.username = sarah\n"
"quarkus.datasource.password = connor\n"
"quarkus.datasource.reactive.url = vertx-reactive:postgresql://localhost:5432/mydatabase\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:160
#, no-wrap
msgid ""
"# drop and create the database at startup (use `update` to only update the schema)\n"
"quarkus.hibernate-orm.database.generation = drop-and-create\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/hibernate-reactive-panache.adoc:162
#, fuzzy, no-wrap
msgid "Solution 1: using the active record pattern"
msgstr "Solução 1: utilizar o padrão de registo ativo"

#. type: Title ===
#: upstream/_guides/hibernate-reactive-panache.adoc:164
#: upstream/_guides/hibernate-reactive-panache.adoc:289
#, fuzzy, no-wrap
msgid "Defining your entity"
msgstr "Definir a sua entidade"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:168
#, fuzzy
msgid "To define a Panache entity, simply extend `PanacheEntity`, annotate it with `@Entity` and add your columns as public fields:"
msgstr "Para definir uma entidade Panache, basta estender `PanacheEntity`, anotá-la com `@Entity` e adicionar as suas colunas como campos públicos:"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:177
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:181
#, fuzzy
msgid "You can put all your Jakarta Persistence column annotations on the public fields. If you need a field to not be persisted, use the `@Transient` annotation on it. If you need to write accessors, you can:"
msgstr "Pode colocar todas as suas anotações de coluna da Persistência de Jacarta nos campos públicos. Se precisar que um campo não seja persistido, use a anotação `@Transient` nele. Se precisar de escrever acessores, pode fazê-lo:"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:194
#, no-wrap
msgid ""
"    // return name as uppercase in the model\n"
"    public String getName(){\n"
"        return name.toUpperCase();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:200
#, no-wrap
msgid ""
"    // store all names in lowercase in the DB\n"
"    public void setName(String name){\n"
"        this.name = name.toLowerCase();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:205
#, fuzzy
msgid "And thanks to our field access rewrite, when your users read `person.name` they will actually call your `getName()` accessor, and similarly for field writes and the setter.  This allows for proper encapsulation at runtime as all fields calls will be replaced by the corresponding getter/setter calls."
msgstr "E, graças à nossa reescrita de acesso a campos, quando os seus utilizadores lerem `person.name`, chamarão efetivamente o seu acessor `getName()` e, de forma semelhante, para as escritas de campo e o setter. Isso permite um encapsulamento adequado em tempo de execução, pois todas as chamadas de campos serão substituídas pelas chamadas de getter/setter correspondentes."

#. type: Title ===
#: upstream/_guides/hibernate-reactive-panache.adoc:206
#: upstream/_guides/hibernate-reactive-panache.adoc:372
#, fuzzy, no-wrap
msgid "Most useful operations"
msgstr "Operações mais úteis"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:209
#, fuzzy
msgid "Once you have written your entity, here are the most common operations you will be able to perform:"
msgstr "Depois de ter escrito a sua entidade, eis as operações mais comuns que poderá efetuar:"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:217
#, no-wrap
msgid ""
"// creating a person\n"
"Person person = new Person();\n"
"person.name = \"Stef\";\n"
"person.birth = LocalDate.of(1910, Month.FEBRUARY, 1);\n"
"person.status = Status.Alive;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:220
#, no-wrap
msgid ""
"// persist it\n"
"Uni<Void> persistOperation = person.persist();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:223
#: upstream/_guides/hibernate-reactive-panache.adoc:389
#, no-wrap
msgid ""
"// note that once persisted, you don't need to explicitly save your entity: all\n"
"// modifications are automatically persisted on transaction commit.\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:229
#, no-wrap
msgid ""
"// check if it is persistent\n"
"if(person.isPersistent()){\n"
"    // delete it\n"
"    Uni<Void> deleteOperation = person.delete();\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:232
#, no-wrap
msgid ""
"// getting a list of all Person entities\n"
"Uni<List<Person>> allPersons = Person.listAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:235
#, no-wrap
msgid ""
"// finding a specific person by ID\n"
"Uni<Person> personById = Person.findById(23L);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:238
#, no-wrap
msgid ""
"// finding all living persons\n"
"Uni<List<Person>> livingPersons = Person.list(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:241
#, no-wrap
msgid ""
"// counting all persons\n"
"Uni<Long> countAll = Person.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:244
#, no-wrap
msgid ""
"// counting all living persons\n"
"Uni<Long> countAlive = Person.count(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:247
#, no-wrap
msgid ""
"// delete all living persons\n"
"Uni<Long> deleteAliveOperation = Person.delete(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:250
#, no-wrap
msgid ""
"// delete all persons\n"
"Uni<Long> deleteAllOperation = Person.deleteAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:253
#, no-wrap
msgid ""
"// delete by id\n"
"Uni<Boolean> deleteByIdOperation = Person.deleteById(23L);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:256
#, no-wrap
msgid ""
"// set the name of all living persons to 'Mortal'\n"
"Uni<Integer> updateOperation = Person.update(\"name = 'Mortal' where status = ?1\", Status.Alive);\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/hibernate-reactive-panache.adoc:258
#, fuzzy, no-wrap
msgid "Adding entity methods"
msgstr "Adição de métodos de entidade"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:263
#, fuzzy
msgid "Add custom queries on your entities inside the entities themselves.  That way, you and your co-workers can find them easily, and queries are co-located with the object they operate on.  Adding them as static methods in your entity class is the Panache Active Record way."
msgstr "Adicione consultas personalizadas às suas entidades dentro das próprias entidades. Desta forma, você e os seus colegas de trabalho podem encontrá-las facilmente, e as consultas são localizadas juntamente com o objeto em que operam. Adicioná-las como métodos estáticos na sua classe de entidade é a forma de fazer o Panache Active Record."

#. type: Title ==
#: upstream/_guides/hibernate-reactive-panache.adoc:286
#, fuzzy, no-wrap
msgid "Solution 2: using the repository pattern"
msgstr "Solução 2: utilizar o padrão de repositório"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:292
#, fuzzy
msgid "When using the repository pattern, you can define your entities as regular Jakarta Persistence entities."
msgstr "Ao utilizar o padrão de repositório, pode definir as suas entidades como entidades normais da Jakarta Persistence."

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:301
#, no-wrap
msgid ""
"@Entity\n"
"public class Person {\n"
"    @Id @GeneratedValue private Long id;\n"
"    private String name;\n"
"    private LocalDate birth;\n"
"    private Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:327
#, no-wrap
msgid ""
"    public Long getId(){\n"
"        return id;\n"
"    }\n"
"    public void setId(Long id){\n"
"        this.id = id;\n"
"    }\n"
"    public String getName() {\n"
"        return name;\n"
"    }\n"
"    public void setName(String name) {\n"
"        this.name = name;\n"
"    }\n"
"    public LocalDate getBirth() {\n"
"        return birth;\n"
"    }\n"
"    public void setBirth(LocalDate birth) {\n"
"        this.birth = birth;\n"
"    }\n"
"    public Status getStatus() {\n"
"        return status;\n"
"    }\n"
"    public void setStatus(Status status) {\n"
"        this.status = status;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:331
#, fuzzy
msgid "If you don't want to bother defining getters/setters for your entities, you can make them extend `PanacheEntityBase` and Quarkus will generate them for you. You can even extend `PanacheEntity` and take advantage of the default ID it provides."
msgstr "If you don’t want to bother defining getters/setters for your entities, you can make them extend `PanacheEntityBase` and Quarkus will generate them for you. Pode até estender `PanacheEntity` e tirar partido da ID predefinida que fornece."

#. type: Title ===
#: upstream/_guides/hibernate-reactive-panache.adoc:332
#, fuzzy, no-wrap
msgid "Defining your repository"
msgstr "Definir o seu repositório"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:336
#, fuzzy
msgid "When using Repositories, you get the exact same convenient methods as with the active record pattern, injected in your Repository, by making them implements `PanacheRepository`:"
msgstr "Ao utilizar Repositórios, obtém exatamente os mesmos métodos convenientes do padrão de registo ativo, injectados no seu Repositório, tornando-os implements `PanacheRepository`:"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:341
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheRepository<Person> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:343
#, no-wrap
msgid "   // put your custom logic here as instance methods\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:347
#, no-wrap
msgid ""
"   public Uni<Person> findByName(String name){\n"
"       return find(\"name\", name).firstResult();\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:351
#, no-wrap
msgid ""
"   public Uni<List<Person>> findAlive(){\n"
"       return list(\"status\", Status.Alive);\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:356
#, no-wrap
msgid ""
"   public Uni<Long> deleteStefs(){\n"
"       return delete(\"name\", \"Stef\");\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:360
#, fuzzy
msgid "All the operations that are defined on `PanacheEntityBase` are available on your repository, so using it is exactly the same as using the active record pattern, except you need to inject it:"
msgstr "Todas as operações definidas em `PanacheEntityBase` estão disponíveis no seu repositório, pelo que a sua utilização é exatamente a mesma que a do padrão de registo ativo, exceto que é necessário injectá-lo:"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:365
#, no-wrap
msgid ""
"@Inject\n"
"PersonRepository personRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:370
#, no-wrap
msgid ""
"@GET\n"
"public Uni<Long> count(){\n"
"    return personRepository.count();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:375
#, fuzzy
msgid "Once you have written your repository, here are the most common operations you will be able to perform:"
msgstr "Depois de ter escrito o seu repositório, eis as operações mais comuns que poderá efetuar:"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:383
#, no-wrap
msgid ""
"// creating a person\n"
"Person person = new Person();\n"
"person.setName(\"Stef\");\n"
"person.setBirth(LocalDate.of(1910, Month.FEBRUARY, 1));\n"
"person.setStatus(Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:386
#, no-wrap
msgid ""
"// persist it\n"
"Uni<Void> persistOperation = personRepository.persist(person);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:395
#, no-wrap
msgid ""
"// check if it is persistent\n"
"if(personRepository.isPersistent(person)){\n"
"    // delete it\n"
"    Uni<Void> deleteOperation = personRepository.delete(person);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:398
#, no-wrap
msgid ""
"// getting a list of all Person entities\n"
"Uni<List<Person>> allPersons = personRepository.listAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:401
#, no-wrap
msgid ""
"// finding a specific person by ID\n"
"Uni<Person> personById = personRepository.findById(23L);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:404
#, no-wrap
msgid ""
"// finding all living persons\n"
"Uni<List<Person>> livingPersons = personRepository.list(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:407
#, no-wrap
msgid ""
"// counting all persons\n"
"Uni<Long> countAll = personRepository.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:410
#, no-wrap
msgid ""
"// counting all living persons\n"
"Uni<Long> countAlive = personRepository.count(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:413
#, no-wrap
msgid ""
"// delete all living persons\n"
"Uni<Long> deleteLivingOperation = personRepository.delete(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:416
#, no-wrap
msgid ""
"// delete all persons\n"
"Uni<Long> deleteAllOperation = personRepository.deleteAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:419
#, no-wrap
msgid ""
"// delete by id\n"
"Uni<Boolean> deleteByIdOperation = personRepository.deleteById(23L);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:422
#, no-wrap
msgid ""
"// set the name of all living persons to 'Mortal'\n"
"Uni<Integer> updateOperation = personRepository.update(\"name = 'Mortal' where status = ?1\", Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:427
#, fuzzy
msgid "The rest of the documentation show usages based on the active record pattern only, but keep in mind that they can be performed with the repository pattern as well.  The repository pattern examples have been omitted for brevity."
msgstr "O resto da documentação mostra utilizações baseadas apenas no padrão de registo ativo, mas tenha em atenção que também podem ser executadas com o padrão de repositório. Os exemplos do padrão de repositório foram omitidos por brevidade."

#. type: Title ==
#: upstream/_guides/hibernate-reactive-panache.adoc:428
#, fuzzy, no-wrap
msgid "Advanced Query"
msgstr "Consulta avançada"

#. type: Title ===
#: upstream/_guides/hibernate-reactive-panache.adoc:430
#, fuzzy, no-wrap
msgid "Paging"
msgstr "Paging"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:434
#, fuzzy
msgid "You should only use the `list` methods if your table contains small enough data sets. For larger data sets you can use the `find` method equivalents, which return a `PanacheQuery` on which you can do paging:"
msgstr "Só deve utilizar os métodos `list` se a sua tabela contiver conjuntos de dados suficientemente pequenos. Para conjuntos de dados maiores, pode utilizar os equivalentes do método `find`, que devolvem um `PanacheQuery` no qual pode efetuar a paginação:"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:439
#: upstream/_guides/hibernate-reactive-panache.adoc:475
#, no-wrap
msgid ""
"// create a query for all living persons\n"
"PanacheQuery<Person> livingPersons = Person.find(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:442
#, no-wrap
msgid ""
"// make it use pages of 25 entries at a time\n"
"livingPersons.page(Page.ofSize(25));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:445
#, no-wrap
msgid ""
"// get the first page\n"
"Uni<List<Person>> firstPage = livingPersons.list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:448
#, no-wrap
msgid ""
"// get the second page\n"
"Uni<List<Person>> secondPage = livingPersons.nextPage().list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:451
#, no-wrap
msgid ""
"// get page 7\n"
"Uni<List<Person>> page7 = livingPersons.page(Page.of(7, 25)).list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:454
#, no-wrap
msgid ""
"// get the number of pages\n"
"Uni<Integer> numberOfPages = livingPersons.pageCount();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:457
#, no-wrap
msgid ""
"// get the total number of entities returned by this query without paging\n"
"Uni<Long> count = livingPersons.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:463
#, no-wrap
msgid ""
"// and you can chain methods of course\n"
"Uni<List<Person>> persons = Person.find(\"status\", Status.Alive)\n"
"        .page(Page.ofSize(25))\n"
"        .nextPage()\n"
"        .list();\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:466
#, fuzzy
msgid "The `PanacheQuery` type has many other methods to deal with paging and returning streams."
msgstr "O tipo `PanacheQuery` tem muitos outros métodos para lidar com fluxos de paginação e de retorno."

#. type: Title ===
#: upstream/_guides/hibernate-reactive-panache.adoc:467
#, fuzzy, no-wrap
msgid "Using a range instead of pages"
msgstr "Utilizar um intervalo em vez de páginas"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:470
#, fuzzy
msgid "`PanacheQuery` also allows range-based queries."
msgstr "`PanacheQuery` também permite consultas baseadas em intervalos."

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:478
#, no-wrap
msgid ""
"// make it use a range: start at index 0 until index 24 (inclusive).\n"
"livingPersons.range(0, 24);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:481
#, no-wrap
msgid ""
"// get the range\n"
"Uni<List<Person>> firstRange = livingPersons.list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:484
#, no-wrap
msgid ""
"// to get the next range, you need to call range again\n"
"Uni<List<Person>> secondRange = livingPersons.range(25, 49).list();\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/hibernate-reactive-panache.adoc:490
#, fuzzy
msgid "You cannot mix ranges and pages: if you use a range, all methods that depend on having a current page will throw an `UnsupportedOperationException`; you can switch back to paging using `page(Page)` or `page(int, int)`."
msgstr "Não é possível misturar intervalos e páginas: se utilizar um intervalo, todos os métodos que dependem da existência de uma página atual lançarão um `UnsupportedOperationException`; pode voltar a utilizar a paginação utilizando `page(Page)` ou `page(int, int)`."

#. type: Title ===
#: upstream/_guides/hibernate-reactive-panache.adoc:492
#, fuzzy, no-wrap
msgid "Sorting"
msgstr "Ordenação"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:495
#, fuzzy
msgid "All methods accepting a query string also accept the following simplified query form:"
msgstr "Todos os métodos que aceitam uma cadeia de consulta também aceitam o seguinte formulário de consulta simplificado:"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:499
#, no-wrap
msgid "Uni<List<Person>> persons = Person.list(\"order by name,birth\");\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:502
#, fuzzy
msgid "But these methods also accept an optional `Sort` parameter, which allows you to abstract your sorting:"
msgstr "Mas estes métodos também aceitam um parâmetro opcional `Sort`, que lhe permite abstrair a sua ordenação:"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:506
#, no-wrap
msgid "Uni<List<Person>> persons = Person.list(Sort.by(\"name\").and(\"birth\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:509
#, no-wrap
msgid ""
"// and with more restrictions\n"
"Uni<List<Person>> persons = Person.list(\"status\", Sort.by(\"name\").and(\"birth\"), Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:512
#, no-wrap
msgid ""
"// and list first the entries with null values in the field \"birth\"\n"
"Uni<List<Person>> persons = Person.list(Sort.by(\"birth\", Sort.NullPrecedence.NULLS_FIRST));\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:515
#, fuzzy
msgid "The `Sort` class has plenty of methods for adding columns and specifying sort direction or the null precedence."
msgstr "A classe `Sort` tem muitos métodos para adicionar colunas e especificar a direção de ordenação ou a precedência nula."

#. type: Title ===
#: upstream/_guides/hibernate-reactive-panache.adoc:516
#, fuzzy, no-wrap
msgid "Simplified queries"
msgstr "Consultas simplificadas"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:520
#, fuzzy
msgid "Normally, HQL queries are of this form: `from EntityName [where ...] [order by ...]`, with optional elements at the end."
msgstr "Normalmente, as consultas HQL têm este formato: `from EntityName [where …​] [order by …​]`, com elementos opcionais no final."

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:522
#, fuzzy
msgid "If your select query does not start with `from`, we support the following additional forms:"
msgstr "Se a sua consulta de seleção não começar por `from`, suportamos os seguintes formulários adicionais:"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:524
#, fuzzy
msgid "`order by ...` which will expand to `from EntityName order by ...`"
msgstr "`order by …​` que se expandirá para `from EntityName order by …​`"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:525
#, fuzzy
msgid "`<singleColumnName>` (and single parameter) which will expand to `from EntityName where <singleColumnName> = ?`"
msgstr "`&amp;lt;singleColumnName&amp;gt;` (e um único parâmetro) que se expandirá para `from EntityName where &amp;lt;singleColumnName&amp;gt; = ?`"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:526
#, fuzzy
msgid "`<query>` will expand to `from EntityName where <query>`"
msgstr "`&amp;lt;query&amp;gt;` irá expandir-se para `from EntityName where &amp;lt;query&amp;gt;`"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:528
#, fuzzy
msgid "If your update query does not start with `update`, we support the following additional forms:"
msgstr "Se a sua consulta de atualização não começar por `update`, suportamos os seguintes formulários adicionais:"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:530
#, fuzzy
msgid "`from EntityName ...` which will expand to `update from EntityName ...`"
msgstr "`from EntityName …​` que se expandirá para `update from EntityName …​`"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:531
#, fuzzy
msgid "`set? <singleColumnName>` (and single parameter) which will expand to `update from EntityName set <singleColumnName> = ?`"
msgstr "`set? &amp;lt;singleColumnName&amp;gt;` (e um único parâmetro) que se expandirá para `update from EntityName set &amp;lt;singleColumnName&amp;gt; = ?`"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:532
#, fuzzy
msgid "`set? <update-query>` will expand to `update from EntityName set <update-query>`"
msgstr "`set? &amp;lt;update-query&amp;gt;` irá expandir-se para `update from EntityName set &amp;lt;update-query&amp;gt;`"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:534
#, fuzzy
msgid "If your delete query does not start with `delete`, we support the following additional forms:"
msgstr "Se a sua consulta de eliminação não começar por `delete`, suportamos os seguintes formulários adicionais:"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:536
#, fuzzy
msgid "`from EntityName ...` which will expand to `delete from EntityName ...`"
msgstr "`from EntityName …​` que se expandirá para `delete from EntityName …​`"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:537
#, fuzzy
msgid "`<singleColumnName>` (and single parameter) which will expand to `delete from EntityName where <singleColumnName> = ?`"
msgstr "`&amp;lt;singleColumnName&amp;gt;` (e um único parâmetro) que se expandirá para `delete from EntityName where &amp;lt;singleColumnName&amp;gt; = ?`"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:538
#, fuzzy
msgid "`<query>` will expand to `delete from EntityName where <query>`"
msgstr "`&amp;lt;query&amp;gt;` irá expandir-se para `delete from EntityName where &amp;lt;query&amp;gt;`"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:541
#, fuzzy
msgid "You can also write your queries in plain link:{hibernate-orm-docs-url}#hql[HQL]:"
msgstr "Também pode escrever as suas consultas em  link:{hibernate-orm-docs-url}#hql[HQL] simples:"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:546
#, no-wrap
msgid ""
"Order.find(\"select distinct o from Order o left join fetch o.lineItems\");\n"
"Order.update(\"update from Person set name = 'Mortal' where status = ?\", Status.Alive);\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/hibernate-reactive-panache.adoc:548
#, fuzzy, no-wrap
msgid "Named queries"
msgstr "Consultas nomeadas"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:551
#, fuzzy
msgid "You can reference a named query instead of a (simplified) HQL query by prefixing its name with the '#' character. You can also use named queries for count, update and delete queries."
msgstr "Pode fazer referência a uma consulta nomeada em vez de uma consulta HQL (simplificada), prefixando o seu nome com o carácter '#'. Também pode utilizar consultas nomeadas para consultas de contagem, atualização e eliminação."

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:565
#, no-wrap
msgid ""
"@Entity\n"
"@NamedQueries({\n"
"    @NamedQuery(name = \"Person.getByName\", query = \"from Person where name = ?1\"),\n"
"    @NamedQuery(name = \"Person.countByStatus\", query = \"select count(*) from Person p where p.status = :status\"),\n"
"    @NamedQuery(name = \"Person.updateStatusById\", query = \"update Person p set p.status = :status where p.id = :id\"),\n"
"    @NamedQuery(name = \"Person.deleteById\", query = \"delete from Person p where p.id = ?1\")\n"
"})\n"
"public class Person extends PanacheEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:569
#, no-wrap
msgid ""
"    public static Uni<Person> findByName(String name){\n"
"        return find(\"#Person.getByName\", name).firstResult();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:573
#, no-wrap
msgid ""
"    public static Uni<Long> countByStatus(Status status) {\n"
"        return count(\"#Person.countByStatus\", Parameters.with(\"status\", status).map());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:577
#, no-wrap
msgid ""
"    public static Uni<Long> updateStatusById(Status status, Long id) {\n"
"        return update(\"#Person.updateStatusById\", Parameters.with(\"status\", status).and(\"id\", id));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:582
#, no-wrap
msgid ""
"    public static Uni<Long> deleteById(Long id) {\n"
"        return delete(\"#Person.deleteById\", id);\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/hibernate-reactive-panache.adoc:588
#, fuzzy
msgid "Named queries can only be defined inside your Jakarta Persistence entity classes (being the Panache entity class, or the repository parameterized type), or on one of its super classes."
msgstr "As consultas nomeadas só podem ser definidas dentro das suas classes de entidade Jakarta Persistence (sendo a classe de entidade Panache, ou o tipo parametrizado do repositório), ou numa das suas super classes."

#. type: Title ===
#: upstream/_guides/hibernate-reactive-panache.adoc:590
#, fuzzy, no-wrap
msgid "Query parameters"
msgstr "Parâmetros de consulta"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:593
#, fuzzy
msgid "You can pass query parameters by index (1-based) as shown below:"
msgstr "Pode passar parâmetros de consulta por índice (baseado em 1), como se mostra abaixo:"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:597
#, no-wrap
msgid "Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:600
#, fuzzy
msgid "Or by name using a `Map`:"
msgstr "Ou pelo nome, utilizando um `Map`:"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:607
#, no-wrap
msgid ""
"Map<String, Object> params = new HashMap<>();\n"
"params.put(\"name\", \"stef\");\n"
"params.put(\"status\", Status.Alive);\n"
"Person.find(\"name = :name and status = :status\", params);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:610
#, fuzzy
msgid "Or using the convenience class `Parameters` either as is or to build a `Map`:"
msgstr "Ou utilizar a classe de conveniência `Parameters` como está ou para construir um `Map`:"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:616
#, no-wrap
msgid ""
"// generate a Map\n"
"Person.find(\"name = :name and status = :status\",\n"
"         Parameters.with(\"name\", \"stef\").and(\"status\", Status.Alive).map());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:620
#, no-wrap
msgid ""
"// use it as-is\n"
"Person.find(\"name = :name and status = :status\",\n"
"         Parameters.with(\"name\", \"stef\").and(\"status\", Status.Alive));\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:623
#, fuzzy
msgid "Every query operation accepts passing parameters by index (`Object...`), or by name (`Map<String,Object>` or `Parameters`)."
msgstr "Cada operação de consulta aceita a passagem de parâmetros por índice ( `Object…​`), ou por nome ( `Map&amp;lt;String,Object&amp;gt;` ou `Parameters`)."

#. type: Title ===
#: upstream/_guides/hibernate-reactive-panache.adoc:624
#, fuzzy, no-wrap
msgid "Query projection"
msgstr "Projeção de consulta"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:627
#, fuzzy
msgid "Query projection can be done with the `project(Class)` method on the `PanacheQuery` object that is returned by the `find()` methods."
msgstr "A projeção da consulta pode ser feita com o método `project(Class)` no objeto `PanacheQuery` que é devolvido pelos métodos `find()`."

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:629
#, fuzzy
msgid "You can use it to restrict which fields will be returned by the database."
msgstr "Pode ser utilizado para restringir os campos que serão devolvidos pela base de dados."

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:633
#, fuzzy
msgid "Hibernate will use **DTO projection** and generate a SELECT clause with the attributes from the projection class.  This is also called **dynamic instantiation** or **constructor expression**, more info can be found on the Hibernate guide: link:{hibernate-orm-docs-url}#hql-select-clause[hql select clause]"
msgstr "O Hibernate irá utilizar *a projeção DTO* e gerar uma cláusula SELECT com os atributos da classe de projeção. Isto também é chamado de *instanciação dinâmica* ou *expressão de construtor*, mais informações podem ser encontradas no guia do Hibernate:  link:{hibernate-orm-docs-url}#hql-select-clause[hql select clause]"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:636
#, fuzzy
msgid "The projection class needs to be a valid Java Bean and have a constructor that contains all its attributes, this constructor will be used to instantiate the projection DTO instead of using the entity class. This must be the only constructor of the class."
msgstr "A classe de projeção tem de ser um Java Bean válido e ter um construtor que contenha todos os seus atributos, este construtor será utilizado para instanciar a DTO de projeção em vez de utilizar a classe de entidade. Este deve ser o único construtor da classe."

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:640
#: upstream/_guides/hibernate-reactive-panache.adoc:699
#, no-wrap
msgid "import io.quarkus.runtime.annotations.RegisterForReflection;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:644
#, no-wrap
msgid ""
"@RegisterForReflection // <1>\n"
"public class PersonName {\n"
"    public final String name; // <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:649
#, no-wrap
msgid ""
"    public PersonName(String name){ // <3>\n"
"        this.name = name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:652
#, no-wrap
msgid ""
"// only 'name' will be loaded from the database\n"
"PanacheQuery<PersonName> query = Person.find(\"status\", Status.Alive).project(PersonName.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:654
#, fuzzy
msgid "The `@RegisterForReflection` annotation instructs Quarkus to keep the class and its members during the native compilation. More details about the `@RegisterForReflection` annotation can be found on the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr "A anotação `@RegisterForReflection` instrui o Quarkus a manter a classe e seus membros durante a compilação nativa. Mais detalhes sobre a anotação `@RegisterForReflection` podem ser encontrados na página de  link:writing-native-applications-tips.html#registerForReflection[dicas de aplicações nativas]."

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:655
#, fuzzy
msgid "We use public fields here, but you can use private fields and getters/setters if you prefer."
msgstr "Utilizamos aqui campos públicos, mas pode utilizar campos privados e getters/setters se preferir."

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:656
#, fuzzy
msgid "This constructor will be used by Hibernate, and it must have a matching constructor with all the class attributes as parameters."
msgstr "Este construtor será utilizado pelo Hibernate e deve ter um construtor correspondente com todos os atributos da classe como parâmetros."

#. type: delimited block =
#: upstream/_guides/hibernate-reactive-panache.adoc:663
#, fuzzy
msgid "The implementation of the `project(Class)` method uses the constructor's parameter names to build the select clause of the query, so the compiler must be configured to store parameter names inside the compiled class.  This is enabled by default if you are using the Quarkus Maven archetype. If you are not using it, add the property `<maven.compiler.parameters>true</maven.compiler.parameters>` to your pom.xml."
msgstr "A implementação do método `project(Class)` utiliza os nomes dos parâmetros do construtor para construir a cláusula select da consulta, pelo que o compilador deve ser configurado para armazenar nomes de parâmetros dentro da classe compilada. Isto está ativado por predefinição se estiver a utilizar o arquétipo Quarkus Maven. Se não o estiver a utilizar, adicione a propriedade `&amp;lt;maven.compiler.parameters&amp;gt;true&amp;lt;/maven.compiler.parameters&amp;gt;` ao seu pom.xml."

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:666
#, fuzzy
msgid "If in the DTO projection object you have a field from a referenced entity, you can use the `@ProjectedFieldName` annotation to provide the path for the SELECT statement."
msgstr "Se no objeto de projeção DTO tiver um campo de uma entidade referenciada, pode utilizar a anotação `@ProjectedFieldName` para fornecer o caminho para a instrução SELECT."

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:677
#, no-wrap
msgid ""
"@Entity\n"
"public class Dog extends PanacheEntity {\n"
"    public String name;\n"
"    public String race;\n"
"    public Double weight;\n"
"    @ManyToOne\n"
"    public Person owner;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:682
#, no-wrap
msgid ""
"@RegisterForReflection\n"
"public class DogDto {\n"
"    public String name;\n"
"    public String ownerName;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:688
#, no-wrap
msgid ""
"    public DogDto(String name, @ProjectedFieldName(\"owner.name\") String ownerName) {  // <1>\n"
"        this.name = name;\n"
"        this.ownerName = ownerName;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:690
#, no-wrap
msgid "PanacheQuery<DogDto> query = Dog.findAll().project(DogDto.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:692
#, fuzzy
msgid "The `ownerName` DTO constructor's parameter will be loaded from the `owner.name` HQL property."
msgstr "O parâmetro do construtor `ownerName` DTO será carregado a partir da propriedade `owner.name` HQL."

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:695
#, fuzzy
msgid "It is also possible to specify a HQL query with a select clause. In this case, the projection class must have a constructor matching the values returned by the select clause:"
msgstr "Também é possível especificar uma consulta HQL com uma cláusula select. Neste caso, a classe de projeção tem de ter um construtor que corresponda aos valores devolvidos pela cláusula select:"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:704
#, no-wrap
msgid ""
"@RegisterForReflection\n"
"public class RaceWeight {\n"
"    public final String race;\n"
"    public final Double weight\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:708
#, no-wrap
msgid ""
"    public RaceWeight(String race) {\n"
"        this(race, null);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:714
#, no-wrap
msgid ""
"    public RaceWeight(String race, Double weight) { // <1>\n"
"        this.race = race;\n"
"        this.weight = weight;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:717
#, no-wrap
msgid ""
"// Only the race and the average weight will be loaded\n"
"PanacheQuery<RaceWeight> query = Person.find(\"select d.race, AVG(d.weight) from Dog d group by d.race\").project(RaceWeight.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:719
#, fuzzy
msgid "Hibernate Reactive will use this constructor. When the query has a select clause, it is possible to have multiple constructors."
msgstr "O Hibernate Reactive utilizará este construtor. Quando a consulta tem uma cláusula select, é possível ter vários construtores."

#. type: delimited block =
#: upstream/_guides/hibernate-reactive-panache.adoc:723
#, fuzzy
msgid "It is not possible to have a HQL `select new` query and `.project(Class)` at the same time - you need to pick one approach."
msgstr "Não é possível ter uma consulta HQL `select new` e `.project(Class)` ao mesmo tempo - é necessário escolher uma abordagem."

#. type: delimited block =
#: upstream/_guides/hibernate-reactive-panache.adoc:725
#, fuzzy
msgid "For example, this will fail:"
msgstr "Por exemplo, isto falhará:"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:728
#, no-wrap
msgid "PanacheQuery<RaceWeight> query = Person.find(\"select new MyView(d.race, AVG(d.weight)) from Dog d group by d.race\").project(AnotherView.class);\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/hibernate-reactive-panache.adoc:731
#, fuzzy, no-wrap
msgid "Multiple Persistence Units"
msgstr "Unidades de persistência múltiplas"

#. type: delimited block =
#: upstream/_guides/hibernate-reactive-panache.adoc:734
#, fuzzy
msgid "Hibernate Reactive in Quarkus currently does not support multiple persistence units."
msgstr "Atualmente, o Hibernate Reactive no Quarkus não suporta múltiplas unidades de persistência."

#. type: Title ==
#: upstream/_guides/hibernate-reactive-panache.adoc:736
#, fuzzy, no-wrap
msgid "Sessions and Transactions"
msgstr "Sessões e transacções"

#. type: delimited block =
#: upstream/_guides/hibernate-reactive-panache.adoc:745
#, fuzzy
msgid "First of all, most of the methods of a Panache entity must be invoked within the scope of a reactive `Mutiny.Session`.  In some cases, the session is opened automatically on demand.  For example, if a Panache entity method is invoked in a Jakarta REST resource method in an application that includes the `quarkus-resteasy-reactive` extension.  For other cases, there are both a declarative and a programmatic way to ensure the session is opened.  You can annotate a CDI business method that returns `Uni` with the `@WithSession` annotation.  The method will be intercepted and the returned `Uni` will be triggered within a scope of a reactive session.  Alternatively, you can use the `Panache.withSession()` method to achieve the same effect."
msgstr "Em primeiro lugar, a maioria dos métodos de uma entidade Panache deve ser invocada no âmbito de uma sessão reactiva `Mutiny.Session`. Em alguns casos, a sessão é aberta automaticamente a pedido. Por exemplo, se um método de entidade Panache for invocado num método de recurso Jakarta REST numa aplicação que inclua a extensão `quarkus-resteasy-reactive`. Noutros casos, existe uma forma declarativa e uma forma programática de garantir que a sessão é aberta. Você pode anotar um método comercial CDI que retorna `Uni` com a anotação `@WithSession`. O método será intercetado e o `Uni` devolvido será acionado num âmbito de uma sessão reactiva. Em alternativa, pode utilizar o método `Panache.withSession()` para obter o mesmo efeito."

#. type: delimited block =
#: upstream/_guides/hibernate-reactive-panache.adoc:747
#, fuzzy
msgid "Note that a Panache entity may not be used from a blocking thread. See also xref:getting-started-reactive.adoc[Getting Started With Reactive] guide that explains the basics of reactive principles in Quarkus."
msgstr "Note que uma entidade Panache não pode ser utilizada a partir de uma thread bloqueante. Veja também o guia  link:getting-started-reactive.html[Getting Started With Reactive] que explica os princípios básicos de reatividade no Quarkus."

#. type: delimited block =
#: upstream/_guides/hibernate-reactive-panache.adoc:752
#, fuzzy
msgid "Also make sure to wrap methods that modify the database or involve multiple queries (e.g. `entity.persist()`) within a transaction.  You can annotate a CDI business method that returns `Uni` with the `@WithTransaction` annotation.  The method will be intercepted and the returned `Uni` is triggered within a transaction boundary.  Alternatively, you can use the `Panache.withTransaction()` method for the same effect."
msgstr "Certifique-se também de que envolve métodos que modificam a base de dados ou que envolvem várias consultas (por exemplo, `entity.persist()`) numa transação. Pode anotar um método empresarial CDI que devolve `Uni` com a anotação `@WithTransaction`. O método será intercetado e o `Uni` devolvido é acionado dentro de um limite de transação. Em alternativa, pode utilizar o método `Panache.withTransaction()` para o mesmo efeito."

#. type: delimited block =
#: upstream/_guides/hibernate-reactive-panache.adoc:754
#, fuzzy
msgid "You cannot use the `@Transactional` annotation with Hibernate Reactive for your transactions: you must use `@WithTransaction`, and your annotated method must return a `Uni` to be non-blocking."
msgstr "Não pode utilizar a anotação `@Transactional` com o Hibernate Reactive para as suas transacções: tem de utilizar `@WithTransaction`, e o seu método anotado tem de devolver um `Uni` para ser não bloqueante."

#. type: delimited block =
#: upstream/_guides/hibernate-reactive-panache.adoc:760
#, fuzzy
msgid "Hibernate Reactive batches changes you make to your entities and sends changes (it is called flush) at the end of the transaction or before a query.  This is usually a good thing as it is more efficient.  But if you want to check optimistic locking failures, do object validation right away or generally want to get immediate feedback, you can force the flush operation by calling `entity.flush()` or even use `entity.persistAndFlush()` to make it a single method call. This will allow you to catch any `PersistenceException` that could occur when Hibernate Reactive send those changes to the database.  Remember, this is less efficient so don't abuse it.  And your transaction still has to be committed."
msgstr "O Hibernate Reactive agrupa as alterações que faz às suas entidades e envia as alterações (chama-se flush) no final da transação ou antes de uma consulta. Normalmente, isto é positivo, uma vez que é mais eficiente. Mas se você quiser verificar falhas de bloqueio otimistas, fazer validação de objetos imediatamente ou, em geral, quiser obter feedback imediato, você pode forçar a operação de flush chamando `entity.flush()` ou até mesmo usar `entity.persistAndFlush()` para torná-la uma única chamada de método. Isso permitirá que você capture qualquer `PersistenceException` que possa ocorrer quando o Hibernate Reactive enviar essas alterações para o banco de dados. Lembre-se, isso é menos eficiente, portanto não abuse. E sua transação ainda precisa ser confirmada."

#. type: delimited block =
#: upstream/_guides/hibernate-reactive-panache.adoc:762
#, fuzzy
msgid "Here is an example of the usage of the flush method to allow making a specific action in case of `PersistenceException`:"
msgstr "Eis um exemplo de utilização do método flush para permitir a realização de uma ação específica no caso de `PersistenceException`:"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:776
#, no-wrap
msgid ""
"@WithTransaction\n"
"public Uni<Void> create(Person person){\n"
"    // Here we use the persistAndFlush() shorthand method on a Panache repository to persist to database then flush the changes.\n"
"    return person.persistAndFlush()\n"
"            .onFailure(PersistenceException.class)\n"
"            .recoverWithItem(() -> {\n"
"                LOG.error(\"Unable to create the parameter\", pe);\n"
"                //in case of error, I save it to disk\n"
"                diskPersister.save(person);\n"
"                return null;\n"
"            });\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:783
#, fuzzy
msgid "The `@WithTransaction` annotation will also work for testing.  This means that changes done during the test will be propagated to the database.  If you want any changes made to be rolled back at the end of the test you can use the `io.quarkus.test.TestReactiveTransaction` annotation.  This will run the test method in a transaction, but roll it back once the test method is complete to revert any database changes."
msgstr "A anotação `@WithTransaction` também funcionará para testes. Isto significa que as alterações efectuadas durante o teste serão propagadas para a base de dados. Se quiser que quaisquer alterações efectuadas sejam revertidas no final do teste, pode utilizar a anotação `io.quarkus.test.TestReactiveTransaction`. Isto irá executar o método de teste numa transação, mas irá revertê-lo assim que o método de teste estiver concluído para reverter quaisquer alterações na base de dados."

#. type: Title ==
#: upstream/_guides/hibernate-reactive-panache.adoc:784
#, fuzzy, no-wrap
msgid "Lock management"
msgstr "Gestão de bloqueios"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:787
#, fuzzy
msgid "Panache provides direct support for database locking with your entity/repository, using `findById(Object, LockModeType)` or `find().withLock(LockModeType)`."
msgstr "A Panache fornece suporte direto para o bloqueio da base de dados com a sua entidade/repositório, utilizando `findById(Object, LockModeType)` ou `find().withLock(LockModeType)`."

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:789
#, fuzzy
msgid "The following examples are for the active record pattern, but the same can be used with repositories."
msgstr "Os exemplos seguintes referem-se ao padrão de registo ativo, mas o mesmo pode ser utilizado com repositórios."

#. type: Title ===
#: upstream/_guides/hibernate-reactive-panache.adoc:790
#, fuzzy, no-wrap
msgid "First: Locking using findById()."
msgstr "Primeiro: Bloqueio utilizando findById()."

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:795
#: upstream/_guides/hibernate-reactive-panache.adoc:813
#, no-wrap
msgid "public class PersonEndpoint {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:806
#, no-wrap
msgid ""
"    @GET\n"
"    public Uni<Person> findByIdForUpdate(Long id){\n"
"        return Panache.withTransaction(() -> {\n"
"            return Person.<Person>findById(id, LockModeType.PESSIMISTIC_WRITE)\n"
"                    .invoke(person -> {\n"
"                        //do something useful, the lock will be released when the transaction ends.\n"
"                    });\n"
"        });\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/hibernate-reactive-panache.adoc:808
#, fuzzy, no-wrap
msgid "Second: Locking in a find()."
msgstr "Segundo: Bloqueio de um find()."

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:823
#, no-wrap
msgid ""
"    @GET\n"
"    public Uni<Person> findByNameForUpdate(String name){\n"
"        return Panache.withTransaction(() -> {\n"
"            return Person.<Person>find(\"name\", name).withLock(LockModeType.PESSIMISTIC_WRITE).firstResult()\n"
"                    .invoke(person -> {\n"
"                        //do something useful, the lock will be released when the transaction ends.\n"
"                    });\n"
"        });\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:825
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:828
#, fuzzy
msgid "Be careful that locks are released when the transaction ends, so the method that invokes the lock query must be called within a transaction."
msgstr "Tenha em atenção que os bloqueios são libertados quando a transação termina, pelo que o método que invoca a consulta de bloqueio deve ser chamado dentro de uma transação."

#. type: Title ==
#: upstream/_guides/hibernate-reactive-panache.adoc:829
#, fuzzy, no-wrap
msgid "Custom IDs"
msgstr "IDs personalizados"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:833
#, fuzzy
msgid "IDs are often a touchy subject, and not everyone's up for letting them handled by the framework, once again we have you covered."
msgstr "Os IDs são muitas vezes um assunto delicado e nem toda a gente está disposta a deixá-los ser tratados pela estrutura."

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:836
#, fuzzy
msgid "You can specify your own ID strategy by extending `PanacheEntityBase` instead of `PanacheEntity`. Then you just declare whatever ID you want as a public field:"
msgstr "Pode especificar a sua própria estratégia de ID estendendo `PanacheEntityBase` em vez de `PanacheEntity`. Depois, basta declarar o ID que quiser como um campo público:"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:841
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntityBase {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:850
#, no-wrap
msgid ""
"    @Id\n"
"    @SequenceGenerator(\n"
"            name = \"personSequence\",\n"
"            sequenceName = \"person_id_seq\",\n"
"            allocationSize = 1,\n"
"            initialValue = 4)\n"
"    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"personSequence\")\n"
"    public Integer id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:853
#, no-wrap
msgid ""
"    //...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:857
#, fuzzy
msgid "If you're using repositories, then you will want to extend `PanacheRepositoryBase` instead of `PanacheRepository` and specify your ID type as an extra type parameter:"
msgstr "Se estiver a utilizar repositórios, então vai querer estender `PanacheRepositoryBase` em vez de `PanacheRepository` e especificar o seu tipo de ID como um parâmetro de tipo extra:"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:864
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheRepositoryBase<Person,Integer> {\n"
"    //...\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/hibernate-reactive-panache.adoc:866
#, fuzzy, no-wrap
msgid "Testing"
msgstr "Ensaios"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:869
#, fuzzy
msgid "Testing reactive Panache entities in a `@QuarkusTest` is slightly more complicated than testing regular Panache entities due to the asynchronous nature of the APIs and the fact that all operations need to run on a Vert.x event loop."
msgstr "Testar entidades Panache reactivas em `@QuarkusTest` é um pouco mais complicado do que testar entidades Panache normais, devido à natureza assíncrona das APIs e ao facto de todas as operações terem de ser executadas num ciclo de eventos Vert.x."

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:872
#, fuzzy
msgid "The `quarkus-test-vertx` dependency provides the `@io.quarkus.test.vertx.RunOnVertxContext` annotation and the `io.quarkus.test.vertx.UniAsserter` class which are intended precisely for this purpose.  The usage is described in the xref:hibernate-reactive.adoc#testing[Hibernate Reactive] guide."
msgstr "A dependência `quarkus-test-vertx` fornece a anotação `@io.quarkus.test.vertx.RunOnVertxContext` e a classe `io.quarkus.test.vertx.UniAsserter` que se destinam exatamente a este fim. A utilização é descrita no guia  link:hibernate-reactive.html#testing[Hibernate Reactive]."

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:875
#, fuzzy
msgid "Moreover, the `quarkus-test-hibernate-reactive-panache` dependency provides the `io.quarkus.test.hibernate.reactive.panache.TransactionalUniAsserter` that can be injected as a method parameter of a test method annotated with `@RunOnVertxContext`.  The `TransactionalUniAsserter` is a `io.quarkus.test.vertx.UniAsserterInterceptor` that wraps each assert method within a separate reactive transaction."
msgstr "Além disso, a dependência `quarkus-test-hibernate-reactive-panache` fornece o `io.quarkus.test.hibernate.reactive.panache.TransactionalUniAsserter` que pode ser injetado como um parâmetro de método de um método de teste anotado com `@RunOnVertxContext`. O `TransactionalUniAsserter` é um `io.quarkus.test.vertx.UniAsserterInterceptor` que envolve cada método de afirmação numa transação reactiva separada."

#. type: Block title
#: upstream/_guides/hibernate-reactive-panache.adoc:876
#, fuzzy, no-wrap
msgid "`TransactionalUniAsserter` Example"
msgstr "`TransactionalUniAsserter` Exemplo"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:880
#, no-wrap
msgid "import io.quarkus.test.hibernate.reactive.panache.TransactionalUniAsserter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:883
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class SomeTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:892
#, no-wrap
msgid ""
"    @Test\n"
"    @RunOnVertxContext\n"
"    public void testEntity(TransactionalUniAsserter asserter) {\n"
"        asserter.execute(() -> new MyEntity().persist()); <1>\n"
"        asserter.assertEquals(() -> MyEntity.count(), 1l); <2>\n"
"        asserter.execute(() -> MyEntity.deleteAll()); <3>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:894
#, fuzzy
msgid "The first reactive transaction is used to persist the entity."
msgstr "A primeira transação reactiva é utilizada para persistir a entidade."

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:895
#, fuzzy
msgid "The second reactive transaction is used to count the entities."
msgstr "A segunda transação reactiva é utilizada para contar as entidades."

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:896
#, fuzzy
msgid "The third reactive transaction is used to delete all entities."
msgstr "A terceira transação reactiva é utilizada para eliminar todas as entidades."

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:898
#, fuzzy
msgid "Of course, you can also define a custom `UniAsserterInterceptor` to wrap the injected `UniAsserter` and customize the behavior."
msgstr "É claro que também é possível definir um `UniAsserterInterceptor` personalizado para envolver o `UniAsserter` injetado e personalizar o comportamento."

#. type: Title ==
#: upstream/_guides/hibernate-reactive-panache.adoc:899
#, fuzzy, no-wrap
msgid "Mocking"
msgstr "Zombaria"

#. type: Title ===
#: upstream/_guides/hibernate-reactive-panache.adoc:901
#, fuzzy, no-wrap
msgid "Using the active record pattern"
msgstr "Utilizar o padrão de registo ativo"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:906
#, fuzzy
msgid "If you are using the active record pattern you cannot use Mockito directly as it does not support mocking static methods, but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static methods, including your own."
msgstr "Se estiver a utilizar o padrão de registo ativo, não pode utilizar diretamente o Mockito, uma vez que este não suporta a simulação de métodos estáticos, mas pode utilizar o módulo `quarkus-panache-mock`, que lhe permite utilizar o Mockito para simular todos os métodos estáticos fornecidos, incluindo os seus próprios métodos."

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:908
#, fuzzy
msgid "Add this dependency to your build file:"
msgstr "Adicione esta dependência ao seu ficheiro de compilação:"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:917
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-panache-mock</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:923
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-panache-mock\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:926
#: upstream/_guides/hibernate-reactive-panache.adoc:1036
#, fuzzy
msgid "Given this simple entity:"
msgstr "Dada esta entidade simples:"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:931
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntity {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:933
#, no-wrap
msgid "    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:938
#, no-wrap
msgid ""
"    public static Uni<List<Person>> findOrdered() {\n"
"        return find(\"ORDER BY name\").list();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:941
#: upstream/_guides/hibernate-reactive-panache.adoc:1063
#, fuzzy
msgid "You can write your mocking test like this:"
msgstr "Pode escrever o seu teste de simulação da seguinte forma:"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:946
#: upstream/_guides/hibernate-reactive-panache.adoc:1068
#, no-wrap
msgid ""
"import io.quarkus.test.vertx.UniAsserter;\n"
"import io.quarkus.test.vertx.RunOnVertxContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:949
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheFunctionalityTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:954
#, no-wrap
msgid ""
"    @RunOnVertxContext // <1>\n"
"    @Test\n"
"    public void testPanacheMocking(UniAsserter asserter) { // <2>\n"
"        asserter.execute(() -> PanacheMock.mock(Person.class));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:957
#, no-wrap
msgid ""
"        // Mocked classes always return a default value\n"
"        asserter.assertEquals(() -> Person.count(), 0l);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:961
#, no-wrap
msgid ""
"        // Now let's specify the return value\n"
"        asserter.execute(() -> Mockito.when(Person.count()).thenReturn(Uni.createFrom().item(23l)));\n"
"        asserter.assertEquals(() -> Person.count(), 23l);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:965
#, no-wrap
msgid ""
"        // Now let's change the return value\n"
"        asserter.execute(() -> Mockito.when(Person.count()).thenReturn(Uni.createFrom().item(42l)));\n"
"        asserter.assertEquals(() -> Person.count(), 42l);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:969
#, no-wrap
msgid ""
"        // Now let's call the original method\n"
"        asserter.execute(() -> Mockito.when(Person.count()).thenCallRealMethod());\n"
"        asserter.assertEquals(() -> Person.count(), 0l);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:974
#, no-wrap
msgid ""
"        // Check that we called it 4 times\n"
"        asserter.execute(() -> {\n"
"            PanacheMock.verify(Person.class, Mockito.times(4)).count(); // <3>\n"
"        });\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:983
#, no-wrap
msgid ""
"        // Mock only with specific parameters\n"
"        asserter.execute(() -> {\n"
"            Person p = new Person();\n"
"            Mockito.when(Person.findById(12l)).thenReturn(Uni.createFrom().item(p));\n"
"            asserter.putData(key, p);\n"
"        });\n"
"        asserter.assertThat(() -> Person.findById(12l), p -> Assertions.assertSame(p, asserter.getData(key)));\n"
"        asserter.assertNull(() -> Person.findById(42l));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:993
#, no-wrap
msgid ""
"        // Mock throwing\n"
"        asserter.execute(() -> Mockito.when(Person.findById(12l)).thenThrow(new WebApplicationException()));\n"
"        asserter.assertFailedWith(() -> {\n"
"            try {\n"
"                return Person.findById(12l);\n"
"            } catch (Exception e) {\n"
"                return Uni.createFrom().failure(e);\n"
"            }\n"
"        }, t -> assertEquals(WebApplicationException.class, t.getClass()));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:997
#, no-wrap
msgid ""
"        // We can even mock your custom methods\n"
"        asserter.execute(() -> Mockito.when(Person.findOrdered()).thenReturn(Uni.createFrom().item(Collections.emptyList())));\n"
"        asserter.assertThat(() -> Person.findOrdered(), list -> list.isEmpty());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:1003
#, no-wrap
msgid ""
"        asserter.execute(() -> {\n"
"            PanacheMock.verify(Person.class).findOrdered();\n"
"            PanacheMock.verify(Person.class, Mockito.atLeastOnce()).findById(Mockito.any());\n"
"            PanacheMock.verifyNoMoreInteractions(Person.class);\n"
"        });\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:1008
#: upstream/_guides/hibernate-reactive-panache.adoc:1133
#, no-wrap
msgid ""
"        // IMPORTANT: We need to execute the asserter within a reactive session\n"
"        asserter.surroundWith(u -> Panache.withSession(() -> u));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:1010
#: upstream/_guides/hibernate-reactive-panache.adoc:1135
#, fuzzy
msgid "Make sure the test method is run on the Vert.x event loop."
msgstr "Certifique-se de que o método de teste é executado no ciclo de eventos Vert.x."

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:1011
#, fuzzy
msgid "The injected `UniAsserter` argument is used to make assertions."
msgstr "O argumento injetado `UniAsserter` é utilizado para fazer afirmações."

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:1013
#, fuzzy
msgid "Be sure to call your `verify` and `do*` methods on `PanacheMock` rather than `Mockito`, otherwise you won't know what mock object to pass."
msgstr "Certifique-se de que chama os seus métodos `verify` e `do*` em `PanacheMock` em vez de `Mockito`, caso contrário não saberá qual o objeto de simulação a passar."

#. type: Title ===
#: upstream/_guides/hibernate-reactive-panache.adoc:1014
#, fuzzy, no-wrap
msgid "Using the repository pattern"
msgstr "Utilizar o padrão de repositório"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:1018
#, fuzzy
msgid "If you are using the repository pattern you can use Mockito directly, using the `quarkus-junit5-mockito` module, which makes mocking beans much easier:"
msgstr "Se estiver a utilizar o padrão de repositório, pode utilizar o Mockito diretamente, utilizando o módulo `quarkus-junit5-mockito`, o que torna a simulação de beans muito mais fácil:"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:1027
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5-mockito</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:1033
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-junit5-mockito\")\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:1041
#, no-wrap
msgid ""
"@Entity\n"
"public class Person {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:1045
#, no-wrap
msgid ""
"    @Id\n"
"    @GeneratedValue\n"
"    public Long id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:1048
#, no-wrap
msgid ""
"    public String name;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:1051
#, fuzzy
msgid "And this repository:"
msgstr "E este repositório:"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:1060
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheRepository<Person> {\n"
"    public Uni<List<Person>> findOrdered() {\n"
"        return find(\"ORDER BY name\").list();\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:1073
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheFunctionalityTest {\n"
"    @InjectMock\n"
"    PersonRepository personRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:1077
#, no-wrap
msgid ""
"    @RunOnVertxContext // <1>\n"
"    @Test\n"
"    public void testPanacheRepositoryMocking(UniAsserter asserter) { // <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:1080
#, no-wrap
msgid ""
"        // Mocked classes always return a default value\n"
"        asserter.assertEquals(() -> mockablePersonRepository.count(), 0l);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:1084
#, no-wrap
msgid ""
"        // Now let's specify the return value\n"
"        asserter.execute(() -> Mockito.when(mockablePersonRepository.count()).thenReturn(Uni.createFrom().item(23l)));\n"
"        asserter.assertEquals(() -> mockablePersonRepository.count(), 23l);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:1088
#, no-wrap
msgid ""
"        // Now let's change the return value\n"
"        asserter.execute(() -> Mockito.when(mockablePersonRepository.count()).thenReturn(Uni.createFrom().item(42l)));\n"
"        asserter.assertEquals(() -> mockablePersonRepository.count(), 42l);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:1092
#, no-wrap
msgid ""
"        // Now let's call the original method\n"
"        asserter.execute(() -> Mockito.when(mockablePersonRepository.count()).thenCallRealMethod());\n"
"        asserter.assertEquals(() -> mockablePersonRepository.count(), 0l);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:1097
#, no-wrap
msgid ""
"        // Check that we called it 4 times\n"
"        asserter.execute(() -> {\n"
"            Mockito.verify(mockablePersonRepository, Mockito.times(4)).count();\n"
"        });\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:1106
#, no-wrap
msgid ""
"        // Mock only with specific parameters\n"
"        asserter.execute(() -> {\n"
"            Person p = new Person();\n"
"            Mockito.when(mockablePersonRepository.findById(12l)).thenReturn(Uni.createFrom().item(p));\n"
"            asserter.putData(key, p);\n"
"        });\n"
"        asserter.assertThat(() -> mockablePersonRepository.findById(12l), p -> Assertions.assertSame(p, asserter.getData(key)));\n"
"        asserter.assertNull(() -> mockablePersonRepository.findById(42l));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:1116
#, no-wrap
msgid ""
"        // Mock throwing\n"
"        asserter.execute(() -> Mockito.when(mockablePersonRepository.findById(12l)).thenThrow(new WebApplicationException()));\n"
"        asserter.assertFailedWith(() -> {\n"
"            try {\n"
"                return mockablePersonRepository.findById(12l);\n"
"            } catch (Exception e) {\n"
"                return Uni.createFrom().failure(e);\n"
"            }\n"
"        }, t -> assertEquals(WebApplicationException.class, t.getClass()));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:1121
#, no-wrap
msgid ""
"        // We can even mock your custom methods\n"
"        asserter.execute(() -> Mockito.when(mockablePersonRepository.findOrdered())\n"
"                .thenReturn(Uni.createFrom().item(Collections.emptyList())));\n"
"        asserter.assertThat(() -> mockablePersonRepository.findOrdered(), list -> list.isEmpty());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:1128
#, no-wrap
msgid ""
"        asserter.execute(() -> {\n"
"            Mockito.verify(mockablePersonRepository).findOrdered();\n"
"            Mockito.verify(mockablePersonRepository, Mockito.atLeastOnce()).findById(Mockito.any());\n"
"            Mockito.verify(mockablePersonRepository).persist(Mockito.<Person> any());\n"
"            Mockito.verifyNoMoreInteractions(mockablePersonRepository);\n"
"        });\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:1136
#, fuzzy
msgid "The injected `UniAsserter` agrument is used to make assertions."
msgstr "O agrumento `UniAsserter` injetado é utilizado para fazer afirmações."

#. type: Title ==
#: upstream/_guides/hibernate-reactive-panache.adoc:1137
#, fuzzy, no-wrap
msgid "How and why we simplify Hibernate Reactive mappings"
msgstr "Como e porquê simplificamos os mapeamentos reactivos do Hibernate"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:1141
#, fuzzy
msgid "When it comes to writing Hibernate Reactive entities, there are a number of annoying things that users have grown used to reluctantly deal with, such as:"
msgstr "Quando se trata de escrever entidades reactivas do Hibernate, há uma série de coisas irritantes com as quais os utilizadores se habituaram a lidar com relutância, tais como:"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:1144
#, fuzzy
msgid "Duplicating ID logic: most entities need an ID, most people don't care how it is set, because it is not really relevant to your model."
msgstr "Duplicação da lógica de ID: a maioria das entidades precisa de um ID, a maioria das pessoas não se importa com a forma como é definido, porque não é realmente relevante para o seu modelo."

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:1147
#, fuzzy
msgid "Dumb getters and setters: since Java lacks support for properties in the language, we have to create fields, then generate getters and setters for those fields, even if they don't actually do anything more than read/write the fields."
msgstr "Obtentores e definidores idiotas: uma vez que Java não suporta propriedades na linguagem, temos de criar campos e, em seguida, gerar obtentores e definidores para esses campos, mesmo que não façam mais do que ler/escrever os campos."

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:1153
#, fuzzy
msgid "Traditional EE patterns advise to split entity definition (the model) from the operations you can do on them (DAOs, Repositories), but really that requires an unnatural split between the state and its operations even though we would never do something like that for regular objects in the Object-Oriented architecture, where state and methods are in the same class. Moreover, this requires two classes per entity, and requires injection of the DAO or Repository where you need to do entity operations, which breaks your edit flow and requires you to get out of the code you're writing to set up an injection point before coming back to use it."
msgstr "Os padrões tradicionais de EE aconselham a separar a definição de entidades (o modelo) das operações que se podem fazer sobre elas (DAOs, Repositórios), mas na verdade isso requer uma separação não natural entre o estado e as suas operações, apesar de nunca fazermos algo assim para objectos normais na arquitetura Object-Oriented, onde o estado e os métodos estão na mesma classe. Além disso, isso requer duas classes por entidade, e requer a injeção do DAO ou Repositório onde você precisa fazer operações de entidade, o que quebra seu fluxo de edição e exige que você saia do código que está escrevendo para configurar um ponto de injeção antes de voltar para usá-lo."

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:1155
#, fuzzy
msgid "Hibernate queries are super powerful, but overly verbose for common operations, requiring you to write queries even when you don't need all the parts."
msgstr "As consultas do Hibernate são muito poderosas, mas demasiado detalhadas para operações comuns, exigindo que escreva consultas mesmo quando não precisa de todas as partes."

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:1157
#, fuzzy
msgid "Hibernate is very general-purpose, but does not make it trivial to do trivial operations that make up 90% of our model usage."
msgstr "O Hibernate tem um objetivo muito geral, mas não facilita a realização de operações triviais que constituem 90% da utilização do nosso modelo."

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:1159
#, fuzzy
msgid "With Panache, we took an opinionated approach to tackle all these problems:"
msgstr "Com a Panache, adoptámos uma abordagem de opinião para resolver todos estes problemas:"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:1162
#, fuzzy
msgid "Make your entities extend `PanacheEntity`: it has an ID field that is auto-generated. If you require a custom ID strategy, you can extend `PanacheEntityBase` instead and handle the ID yourself."
msgstr "Faça as suas entidades estenderem `PanacheEntity`: tem um campo de ID que é gerado automaticamente. Se necessitar de uma estratégia de ID personalizada, pode estender `PanacheEntityBase` e tratar do ID você mesmo."

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:1165
#, fuzzy
msgid "Use public fields. Get rid of dumb getter and setters. Under the hood, we will generate all getters and setters that are missing, and rewrite every access to these fields to use the accessor methods. This way you can still write _useful_ accessors when you need them, which will be used even though your entity users still use field accesses."
msgstr "Utilizar campos públicos. Livrar-se de getters e setters idiotas. Sob o capô, vamos gerar todos os getters e setters que estão faltando, e reescrever cada acesso a esses campos para usar os métodos de acesso. Desta forma, pode continuar a escrever acessores _úteis_ quando precisar deles, que serão utilizados mesmo que os utilizadores da sua entidade continuem a utilizar acessos a campos."

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:1168
#, fuzzy
msgid "With the active record pattern: put all your entity logic in static methods in your entity class and don't create DAOs.  Your entity superclass comes with lots of super useful static methods, and you can add your own in your entity class.  Users can just start using your entity `Person` by typing `Person.` and getting completion for all the operations in a single place."
msgstr "Com o padrão de registo ativo: coloque toda a sua lógica de entidade em métodos estáticos na sua classe de entidade e não crie DAOs. A sua superclasse de entidade vem com muitos métodos estáticos super úteis, e você pode adicionar os seus próprios métodos na sua classe de entidade. Os usuários podem começar a usar sua entidade `Person` digitando `Person.` e obtendo a conclusão de todas as operações em um único lugar."

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:1171
#, fuzzy
msgid "Don't write parts of the query that you don't need: write `Person.find(\"order by name\")` or `Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive)` or even better `Person.find(\"name\", \"stef\")`."
msgstr "Não escreva partes da consulta de que não precisa: escreva `Person.find(\"order by name\")` ou `Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive)` ou, melhor ainda, `Person.find(\"name\", \"stef\")`."

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:1173
#, fuzzy
msgid "That's all there is to it: with Panache, Hibernate Reactive has never looked so trim and neat."
msgstr "E é tudo: com o Panache, o Hibernate Reactive nunca teve um aspeto tão elegante e limpo."

#. type: Title ==
#: upstream/_guides/hibernate-reactive-panache.adoc:1174
#, fuzzy, no-wrap
msgid "Defining entities in external projects or jars"
msgstr "Definição de entidades em projectos externos ou jars"

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:1177
#, fuzzy
msgid "Hibernate Reactive with Panache relies on compile-time bytecode enhancements to your entities."
msgstr "O Hibernate Reactive with Panache baseia-se em melhorias de bytecode em tempo de compilação para as suas entidades."

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:1183
#, fuzzy
msgid "It attempts to identify archives with Panache entities (and consumers of Panache entities)  by the presence of the marker file `META-INF/panache-archive.marker`. Panache includes an annotation processor that will automatically create this file in archives that depend on Panache (even indirectly). If you have disabled annotation processors you may need to create this file manually in some cases."
msgstr "Tenta identificar arquivos com entidades Panache (e consumidores de entidades Panache) pela presença do ficheiro marcador `META-INF/panache-archive.marker`. O Panache inclui um processador de anotações que criará automaticamente este ficheiro nos arquivos que dependem do Panache (mesmo indiretamente). Se tiver desativado os processadores de anotações, poderá ter de criar este ficheiro manualmente em alguns casos."

#. type: Plain text
#: upstream/_guides/hibernate-reactive-panache.adoc:1187
#, fuzzy
msgid "If you include the jpa-modelgen annotation processor this will exclude the Panache annotation processor by default. If you do this you should either create the marker file yourself, or add the `quarkus-panache-common` as well, as shown below:"
msgstr "Se incluir o processador de anotações jpa-modelgen, este excluirá o processador de anotações Panache por defeito. Se o fizer, deve criar o ficheiro de marcadores ou adicionar também o `quarkus-panache-common`, como se mostra abaixo:"

#. type: delimited block -
#: upstream/_guides/hibernate-reactive-panache.adoc:1208
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-compiler-plugin</artifactId>\n"
"    <version>${compiler-plugin.version}</version>\n"
"    <configuration>\n"
"      <annotationProcessorPaths>\n"
"        <annotationProcessorPath>\n"
"          <groupId>org.hibernate</groupId>\n"
"          <artifactId>hibernate-jpamodelgen</artifactId>\n"
"          <version>${hibernate.version}</version>\n"
"        </annotationProcessorPath>\n"
"        <annotationProcessorPath>\n"
"          <groupId>io.quarkus</groupId>\n"
"          <artifactId>quarkus-panache-common</artifactId>\n"
"          <version>${quarkus.platform.version}</version>\n"
"        </annotationProcessorPath>\n"
"      </annotationProcessorPaths>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""
