# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-29 08:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/init-tasks.adoc:6
#, no-wrap
msgid "Initialization tasks"
msgstr ""

#. type: Plain text
#: upstream/_guides/init-tasks.adoc:16
msgid "There are often initialization tasks performed by Quarkus extensions that are meant to be run once.  For example, Flyway or Liquibase initialization falls into that category. But what happens when the scaling needs of an application requires more instances of the application to run? Or what happens when the application restarts ?"
msgstr ""

#. type: Plain text
#: upstream/_guides/init-tasks.adoc:21
msgid "A common environment where both of these cases are pretty common is Kubernetes. To address these challenges, Quarkus allows externalization of such tasks as Kubernetes https://kubernetes.io/docs/concepts/workloads/controllers/job/[Jobs] and uses https://kubernetes.io/docs/concepts/workloads/pods/init-containers/[init containers] to ensure that an application instance only starts once the initialization jobs have finished. With this approach even if an application has multiple replicas, the initialization logic will only run once."
msgstr ""

#. type: Plain text
#: upstream/_guides/init-tasks.adoc:23
msgid "This approach is reflected in the manifests generated by xref:kubernetes.adoc[Kubernetes extension]."
msgstr ""

#. type: Title ==
#: upstream/_guides/init-tasks.adoc:24
#, no-wrap
msgid "Disabling the feature"
msgstr ""

#. type: Plain text
#: upstream/_guides/init-tasks.adoc:28
msgid "The feature can be explictily disabled per task (enabled by default).  The default behavior can change by setting the following property to `false`:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/init-tasks.adoc:32
#, no-wrap
msgid "quarkus.kubernetes.init-task-defaults.enabled=false\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/init-tasks.adoc:35
msgid "or on Openshift:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/init-tasks.adoc:39
#, no-wrap
msgid "quarkus.openshift.init-task-defaults.enabled=false\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/init-tasks.adoc:43
#, no-wrap
msgid ""
"**Note**: All the configuration options in this guide are available on both OpenShift and Kubernetes. The rest of the guide will use Kubernetes(`quarkus.kubernetes` prefix)\n"
"configuration prefix, but all the configuration options are also available for OpenShift(`quarkus.openshift` prefix) too.\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/init-tasks.adoc:45
msgid "In the case where we need to disable a particular task, we can use the following property:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/init-tasks.adoc:49
#, no-wrap
msgid "quarkus.kubernetes.init-tasks.\"<task name>\".enabled=false\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/init-tasks.adoc:53
msgid "The task name is the name of the extension that performs the initialization.  Examples:"
msgstr ""

#. type: Plain text
#: upstream/_guides/init-tasks.adoc:55
msgid "For Flyway:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/init-tasks.adoc:59
#, no-wrap
msgid "quarkus.kubernetes.init-tasks.flyway.enabled=false\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/init-tasks.adoc:62
msgid "For Liquibase:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/init-tasks.adoc:66
#, no-wrap
msgid "quarkus.kubernets.init-tasks.liquibase.enabled=false\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/init-tasks.adoc:69
msgid "For Liquibase Mongodb:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/init-tasks.adoc:73
#, no-wrap
msgid "quarkus.kubernetes.init-tasks.liquibase-mongodb.enabled=false\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/init-tasks.adoc:76
#, no-wrap
msgid "Controlling the generated job"
msgstr ""

#. type: Plain text
#: upstream/_guides/init-tasks.adoc:80
msgid "The job container is pretty similar to the application container, and the only thing that changes is the configured environment variables.  More specifically, the following environment variable is added, to tell the job to exit right after initialization."
msgstr ""

#. type: delimited block -
#: upstream/_guides/init-tasks.adoc:84
#, no-wrap
msgid "QUARKUS_INIT_AND_EXIT=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/init-tasks.adoc:88
msgid "The image, image pull policy, service account, volumes, mounts and additional environment variables are inherited/copied from the deployment resource.  Any customization to the original deployment resource (via configuration or extension) will also be reflected in the job."
msgstr ""

#. type: Title ==
#: upstream/_guides/init-tasks.adoc:89
#, no-wrap
msgid "Controlling the generated init container"
msgstr ""

#. type: Plain text
#: upstream/_guides/init-tasks.adoc:94
msgid "The name of the generated init container is `wait-for-${task name}` by default.  Given that the init container is part of the same pod as the actual application it will get the same service account (and therefore permissions) and volumes as the application.  Further customization to the container can be done using using the configuration options for init containers (see `quarkus.kubernetes.init-containers` or `quarkus.openshift.init-containers`)."
msgstr ""

#. type: Plain text
#: upstream/_guides/init-tasks.adoc:96
msgid "Examples:"
msgstr ""

#. type: Plain text
#: upstream/_guides/init-tasks.adoc:98
msgid "To set the imagePullPolicy to `IfNotPresent` on the init container that waits for the `flyway` job:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/init-tasks.adoc:102
#, no-wrap
msgid "quarkus.kubernetes.init-containers.wait-for-flyway.image-pull-policy=IfNotPresent\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/init-tasks.adoc:105
msgid "To set custom command (say `custom-wait-for`) on the init container that waits for the `flyway` job:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/init-tasks.adoc:109
#, no-wrap
msgid "quarkus.kubernetes.init-containers.wait-for-flyway.command=custom-wait-for\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/init-tasks.adoc:112
#, no-wrap
msgid "Orchestration of the initialization tasks"
msgstr ""

#. type: Plain text
#: upstream/_guides/init-tasks.adoc:116
msgid "The deployment resource should not start until the job has been completed. The typical pattern that is used among Kubernetes users is the use of init containers to achieve this. An init container that `wait for` the job to complete is enough to enforce that requirement."
msgstr ""

#. type: Title ===
#: upstream/_guides/init-tasks.adoc:117
#, no-wrap
msgid "Using a custom wait-for container image"
msgstr ""

#. type: Plain text
#: upstream/_guides/init-tasks.adoc:120
msgid "To change the `wait-for` image which by default is `groundnuty/k8s-wait-for:no-root-v1.7` you can use:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/init-tasks.adoc:124
#, no-wrap
msgid "quarkus.kubernetes.init-task-defaults.wait-for-container.image=my/wait-for-image:1.0\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/init-tasks.adoc:127
msgid "To change the `wait-for` image for a particular init container (e.g. `wait-for-flway`) you can use:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/init-tasks.adoc:131
#, no-wrap
msgid "quarkus.kubernetes.init-containers.wait-for-flyway=my/wait-for-image:1.0\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/init-tasks.adoc:133
#, no-wrap
msgid "Configuring permissions"
msgstr ""

#. type: Plain text
#: upstream/_guides/init-tasks.adoc:137
msgid "For an init container to be able to perform the `wait for job` it needs to be able to perform `get` operations on the job resource.  This is done automatically and the generated manifests include the required `Role` and `RoleBinding` resources."
msgstr ""

#. type: Plain text
#: upstream/_guides/init-tasks.adoc:139
msgid "If for any reason additional permissions are required either by the init container or the job, they can be configured with through the xref:deploying-to-kuberentes.adoc#generating-rbac-resources[Kubernetes RBAC configuration]."
msgstr ""

#. type: Plain text
#: upstream/_guides/init-tasks.adoc:141
#, no-wrap
msgid "**Note**: The application, the init container and the job use the same `ServiceAccount` and therefore, share the same permissions.\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/init-tasks.adoc:142
#, no-wrap
msgid "Extension providing Initialization Tasks"
msgstr ""

#. type: Plain text
#: upstream/_guides/init-tasks.adoc:145
msgid "Currently, this feature is used by the following extensions:"
msgstr ""

#. type: Plain text
#: upstream/_guides/init-tasks.adoc:146
msgid "xref:flyway.adoc[Flyway]"
msgstr ""

#. type: Plain text
#: upstream/_guides/init-tasks.adoc:147
msgid "xref:liquibase.adoc[Liquibase]"
msgstr ""

#. type: Plain text
#: upstream/_guides/init-tasks.adoc:147
msgid "xref:liquibase-mongodb.adoc[Liquibase MongoDB]"
msgstr ""
