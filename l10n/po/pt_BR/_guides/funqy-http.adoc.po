# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:24+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/funqy-http.adoc:6
#, fuzzy, no-wrap
msgid "Funqy HTTP Binding (Standalone)"
msgstr "Funqy HTTP Binding (Autónomo)"

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:14
#, fuzzy
msgid "The guide walks through quickstart code to show you how you can deploy Funqy as a standalone service and invoke on Funqy functions using HTTP."
msgstr "O guia apresenta um código de início rápido para mostrar como é possível implantar o Funqy como um serviço autônomo e invocar as funções do Funqy usando HTTP."

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:21
#, fuzzy
msgid "The Funqy HTTP binding is not a replacement for REST over HTTP.  Because Funqy needs to be portable across a lot of different protocols and function providers its HTTP binding is very minimalistic and you will lose REST features like linking and the ability to leverage HTTP features like cache-control and conditional GETs.  You may want to consider using Quarkus's Jakarta REST, Spring MVC, or Vert.x Web Reactive Routes support instead, although Funqy will have less overhead than these alternatives (except Vert.x which is still super fast)."
msgstr "A ligação HTTP do Funqy não é um substituto para REST sobre HTTP. Como o Funqy precisa ser portátil em vários protocolos e provedores de funções diferentes, seu binding HTTP é muito minimalista e você perderá recursos REST como links e a capacidade de aproveitar recursos HTTP como controle de cache e GETs condicionais. Você pode considerar usar o suporte a Jakarta REST, Spring MVC ou Vert.x Web Reactive Routes do Quarkus, embora o Funqy tenha menos sobrecarga do que essas alternativas (exceto o Vert.x, que ainda é super rápido)."

#. type: Title ==
#: upstream/_guides/funqy-http.adoc:22
#, fuzzy, no-wrap
msgid "Prerequisites"
msgstr "Pré-requisitos"

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:27
#, fuzzy
msgid "Read about xref:funqy.adoc[Funqy Basics].  This is a short read!"
msgstr "Ler sobre os  link:funqy.html[princípios básicos da Funqy]. Esta é uma leitura curta!"

#. type: Title ==
#: upstream/_guides/funqy-http.adoc:28
#, fuzzy, no-wrap
msgid "The Quickstart"
msgstr "O início rápido"

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:31
#, fuzzy
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Clonar o repositório Git: `git clone {quickstarts-clone-url}`, ou descarregar um {quickstarts-archive-url}[arquivo]."

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:33
#, fuzzy
msgid "The solution is located in the `funqy-http-quickstart` link:{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart[directory]."
msgstr "A solução está localizada no  link:{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart[diretório] `funqy-http-quickstart`."

#. type: Title ==
#: upstream/_guides/funqy-http.adoc:34
#, fuzzy, no-wrap
msgid "The Code"
msgstr "O Código"

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:38
#, fuzzy
msgid "If you look at the Java code, you'll see that there is no HTTP specific API.  Its just simple Java methods annotated with `@Funq`.  Simple, easy, straightforward."
msgstr "Se olhar para o código Java, verá que não existe uma API específica para HTTP. São apenas métodos Java simples anotados com `@Funq`. Simples, fácil e direto."

#. type: Title ==
#: upstream/_guides/funqy-http.adoc:39
#, fuzzy, no-wrap
msgid "Maven Dependencies"
msgstr "Dependências Maven"

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:42
#, fuzzy
msgid "To write Funqy HTTP functions, simply include the `quarkus-funqy-http` dependency into your Quarkus `pom.xml` file:"
msgstr "Para escrever funções HTTP Funqy, basta incluir a dependência `quarkus-funqy-http` no seu ficheiro Quarkus `pom.xml`:"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:49
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-funqy-http</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/funqy-http.adoc:51
#, fuzzy, no-wrap
msgid "Build Project"
msgstr "Construir projeto"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:56
#, no-wrap
msgid "mvn clean quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:59
#, fuzzy
msgid "This starts your functions in Quarkus dev mode."
msgstr "Isto inicia as suas funções no modo de desenvolvimento Quarkus."

#. type: Title ==
#: upstream/_guides/funqy-http.adoc:60
#, fuzzy, no-wrap
msgid "Execute Funqy HTTP functions"
msgstr "Executar funções HTTP do Funqy"

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:64
#, fuzzy
msgid "The URL path to execute a function is the function name.  For example if your function name is `foo` then the URL path to execute the function would be `/foo`."
msgstr "O caminho URL para executar uma função é o nome da função. Por exemplo, se o nome da função for `foo`, o caminho URL para a executar será `/foo`."

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:68
#, fuzzy
msgid "The HTTP POST or GET methods can be used to invoke on a function.  The return value of the function is marshalled to JSON using the Jackson JSON library.  Jackson annotations can be used.  If your function has an input parameter, a POST invocation must use JSON as the input type.  Jackson is also used here for unmarshalling."
msgstr "Os métodos HTTP POST ou GET podem ser utilizados para invocar uma função. O valor de retorno da função é transformado em JSON utilizando a biblioteca Jackson JSON. Podem ser utilizadas anotações Jackson. Se a sua função tiver um parâmetro de entrada, uma invocação POST deve utilizar JSON como tipo de entrada. A Jackson também é utilizada aqui para desmarcar."

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:71
#, fuzzy
msgid "You can invoke the `hello` function defined in link:{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/PrimitiveFunctions.java[PrimitiveFunctions.java] by pointing your browser to http://localhost:8080/hello"
msgstr "Pode invocar a função `hello` definida em  link:{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/PrimitiveFunctions.java[PrimitiveFunctions.java] apontando o seu browser para  http://localhost:8080/hello"

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:75
#, fuzzy
msgid "Invoking the other functions in the quickstart requires an HTTP POST.  To execute the `greet` function defined in link:{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/GreetingFunction.java[GreetingFunction.java] invoke this curl script."
msgstr "A invocação das outras funções no início rápido requer um HTTP POST. Para executar a função `greet` definida em  link:{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/GreetingFunction.java[GreetingFunction.java], invoque este script curl."

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:82
#, no-wrap
msgid ""
"curl \"http://localhost:8080/greet\" \\\n"
"-X POST \\\n"
"-H \"Content-Type: application/json\" \\\n"
"-d '{\"name\":\"Bill\"}'\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:87
#, fuzzy
msgid "Primitive types can also be passed as input using the standard JSON mapping for them.  To execute the `toLowerCase` function defined in link:{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/PrimitiveFunctions.java[PrimitiveFunctions.java] invoke this curl script:"
msgstr "Os tipos primitivos também podem ser passados como entrada usando o mapeamento JSON padrão para eles. Para executar a função `toLowerCase` definida em  link:{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/PrimitiveFunctions.java[PrimitiveFunctions.java], invoque este script curl:"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:94
#, no-wrap
msgid ""
"curl \"http://localhost:8080/toLowerCase\" \\\n"
"-X POST \\\n"
"-H \"Content-Type: application/json\" \\\n"
"-d '\"HELLO WORLD\"'\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:98
#, fuzzy
msgid "To execute the `double` function defined in link:{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/PrimitiveFunctions.java[PrimitiveFunctions.java] invoke this curl script:"
msgstr "Para executar a função `double` definida em  link:{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/PrimitiveFunctions.java[PrimitiveFunctions.java], invoque este script curl:"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:105
#, no-wrap
msgid ""
"curl \"http://localhost:8080/double\" \\\n"
"-X POST \\\n"
"-H \"Content-Type: application/json\" \\\n"
"-d '2'\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/funqy-http.adoc:107
#, fuzzy, no-wrap
msgid "GET Query Parameter Mapping"
msgstr "Mapeamento de parâmetros da consulta GET"

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:113
#, fuzzy
msgid "For GET requests, the Funqy HTTP Binding also has a query parameter mapping for function input parameters.  Only bean style classes and `java.util.Map` can be used for your input parameter.  For bean style classes, query parameter names are mapped to properties on the bean class.  Here's an example of a simple `Map`:"
msgstr "Para pedidos GET, o Funqy HTTP Binding também tem um mapeamento de parâmetro de consulta para parâmetros de entrada de função. Apenas as classes de estilo bean e `java.util.Map` podem ser utilizadas para o seu parâmetro de entrada. Para classes de estilo de feijão, os nomes dos parâmetros de consulta são mapeados para propriedades na classe de feijão. Aqui está um exemplo de um simples `Map`:"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:120
#, no-wrap
msgid ""
"@Funq\n"
"public String hello(Map<String, Integer> map) {\n"
"...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:124
#, fuzzy
msgid "Key values must be a primitive type (except char) or `String`.  Values can be primitives (except char), `String`, `OffsetDateTime` or a complex bean style class.  For the above example, here's the corresponding curl request:"
msgstr "Os valores-chave têm de ser um tipo primitivo (exceto char) ou `String`. Os valores podem ser primitivos (exceto char), `String`, `OffsetDateTime` ou uma classe complexa de estilo bean. Para o exemplo acima, aqui está o pedido curl correspondente:"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:128
#, no-wrap
msgid "curl \"http://localhost:8080/a=1&b=2\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:131
#, fuzzy
msgid "The `map` input parameter of the `hello` function would have the key value pairs: `a`->1, `b`->2."
msgstr "O parâmetro de entrada `map` da função `hello` teria os pares de valores-chave: `a`→1, `b`→2."

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:133
#, fuzzy
msgid "Bean style classes can also be use as the input parameter type.  Here's an example:"
msgstr "As classes de estilo de feijão também podem ser utilizadas como o tipo de parâmetro de entrada. Aqui está um exemplo:"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:139
#, no-wrap
msgid ""
"public class Person {\n"
"    String first;\n"
"    String last;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:145
#, no-wrap
msgid ""
"    public String getFirst() { return first; }\n"
"    public void setFirst(String first) { this.first = first; }\n"
"    public String getLast() { return last; }\n"
"    public void setLast(String last) { this.last = last; }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:152
#, no-wrap
msgid ""
"public class MyFunctions {\n"
"    @Funq\n"
"    public String greet(Person p) {\n"
"       return \"Hello \" + p.getFirst() + \" \" + p.getLast();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:156
#, fuzzy
msgid "Property values can be any primitive type except `char`. It can also be `String`, and `OffsetDateTime`.  `OffsetDateTime` query param values must be in ISO-8601 format."
msgstr "Os valores de propriedade podem ser de qualquer tipo primitivo, exceto `char`. Também podem ser `String` e `OffsetDateTime`. Os valores dos parâmetros de consulta `OffsetDateTime` têm de estar no formato ISO-8601."

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:158
#, fuzzy
msgid "You can invoke on this using an HTTP GET and query parameters:"
msgstr "Pode invocá-lo utilizando um HTTP GET e parâmetros de consulta:"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:162
#, no-wrap
msgid "curl \"http://localhost:8080/greet?first=Bill&last=Burke\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:165
#, fuzzy
msgid "In the above request, the query parameter names are mapped to corresponding properties in the input class."
msgstr "No pedido acima, os nomes dos parâmetros de consulta são mapeados para as propriedades correspondentes na classe de entrada."

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:167
#, fuzzy
msgid "The input class can also have nested bean classes.  Expanding on the previous example:"
msgstr "A classe de entrada também pode ter classes bean aninhadas. Expandindo o exemplo anterior:"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:173
#, no-wrap
msgid ""
"public class Family {\n"
"    private Person dad;\n"
"    private Person mom;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:179
#, no-wrap
msgid ""
"    public Person getDad() { return dad; }\n"
"    public void setDad(Person dad) { this.dad = dad; }\n"
"    public Person getMom() { return mom; }\n"
"    public void setMom(Person mom) { this.mom = mom; }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:186 upstream/_guides/funqy-http.adoc:212
#: upstream/_guides/funqy-http.adoc:239 upstream/_guides/funqy-http.adoc:271
#: upstream/_guides/funqy-http.adoc:296
#, no-wrap
msgid ""
"public class MyFunctions {\n"
"    @Funq\n"
"    public String greet(Family family) {\n"
"       ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:190
#, fuzzy
msgid "In this case, query parameters for nested values use the `.` notation.  For example:"
msgstr "Neste caso, os parâmetros de consulta para valores aninhados utilizam a notação `.`. Por exemplo:"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:194
#, no-wrap
msgid "curl \"http://localhost:8080/greet?dad.first=John&dad.last=Smith&mom.first=Martha&mom.last=Smith\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:197
#, fuzzy
msgid "`java.util.List` and `Set` are also supported as property values.  For example:"
msgstr "`java.util.List` e `Set` também são suportados como valores de propriedade. Por exemplo:"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:202 upstream/_guides/funqy-http.adoc:229
#: upstream/_guides/funqy-http.adoc:261 upstream/_guides/funqy-http.adoc:286
#, no-wrap
msgid ""
"public class Family {\n"
"    ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:205
#, no-wrap
msgid ""
"    List<String> pets;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:216
#, fuzzy
msgid "To invoke a GET request, just list the `pets` query parameter multiple times."
msgstr "Para invocar um pedido GET, basta listar o parâmetro de consulta `pets` várias vezes."

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:220
#, no-wrap
msgid "curl \"http://localhost:8080/greet?pets=itchy&pets=scratchy\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:224
#, fuzzy
msgid "For more complex types, `List` and `Set` members must have an identifier in the query parameter.  For example:"
msgstr "Para tipos mais complexos, os membros `List` e `Set` devem ter um identificador no parâmetro de consulta. Por exemplo:"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:232
#, no-wrap
msgid ""
"    List<Person> kids;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:245
#, fuzzy
msgid "Each `kids` query parameter must identify the kid they are referencing so that the runtime can figure out which property values go to which members in the list.  Here's the curl request:"
msgstr "Cada parâmetro da consulta `kids` deve identificar o filho que está a referenciar, para que o tempo de execução possa descobrir que valores de propriedade correspondem a que membros da lista. Aqui está o pedido curl:"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:249
#, no-wrap
msgid "curl \"http://localhost:8080/greet?kids.1.first=Buffy&kids.2.first=Charlie\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:253
#, fuzzy
msgid "The above URL uses the value `1` and `2` to identity the target member of the list, but any unique string can be used."
msgstr "O URL acima utiliza o valor `1` e `2` para identificar o membro alvo da lista, mas pode ser utilizada qualquer cadeia de caracteres única."

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:256
#, fuzzy
msgid "A property can also be a `java.util.Map`.  The key of the map can be any primitive type and `String`.  For example:"
msgstr "Uma propriedade também pode ser um `java.util.Map`. A chave do mapa pode ser qualquer tipo primitivo e `String`. Por exemplo:"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:264
#, no-wrap
msgid ""
"    Map<String, String> address;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:274
#, fuzzy
msgid "The corresponding call would look like this:"
msgstr "A chamada correspondente teria o seguinte aspeto:"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:278
#, no-wrap
msgid "curl \"http://localhost:8080/greet?address.state=MA&address.city=Boston\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:281
#, fuzzy
msgid "If your `Map` value is a complex type, then just continue the notation by adding the property to set at the end."
msgstr "Se o seu valor `Map` for um tipo complexo, basta continuar a notação adicionando a propriedade a definir no final."

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:289
#, no-wrap
msgid ""
"    Map<String, Address> addresses;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:301
#, no-wrap
msgid "curl \"http://localhost:8080/greet?addresses.home.state=MA&addresses.home.city=Boston\"\n"
msgstr ""
