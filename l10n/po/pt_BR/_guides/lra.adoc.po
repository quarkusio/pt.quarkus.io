# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:24+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/lra.adoc:6
#, fuzzy, no-wrap
msgid "Narayana LRA Participant Support"
msgstr "Apoio ao participante do Narayana LRA"

#. type: Title ==
#: upstream/_guides/lra.adoc:11
#, fuzzy, no-wrap
msgid "Introduction"
msgstr "Introdução"

#. type: Plain text
#: upstream/_guides/lra.adoc:15
#, fuzzy
msgid "The LRA (short for Long Running Action) participant extension is useful in microservice based designs where different services can benefit from a relaxed notion of distributed consistency."
msgstr "A extensão do participante LRA (abreviatura de Long Running Action) é útil em concepções baseadas em microsserviços, em que diferentes serviços podem beneficiar de uma noção relaxada de consistência distribuída."

#. type: Plain text
#: upstream/_guides/lra.adoc:20
#, fuzzy
msgid "The idea is for multiple services to perform different computations/actions in concert, whilst retaining the option to compensate for any actions performed during the computation.  This kind of loose coupling of services bridges the gap between strong consistency models such as JTA/XA and \"home-grown\" ad hoc consistency solutions."
msgstr "A ideia é que vários serviços realizem diferentes cálculos/acções em conjunto, mantendo a opção de compensar quaisquer acções realizadas durante o cálculo. Este tipo de acoplamento flexível de serviços preenche a lacuna entre modelos de consistência fortes, como o JTA/XA, e soluções de consistência ad hoc \"caseiras\"."

#. type: Plain text
#: upstream/_guides/lra.adoc:43
#, fuzzy
msgid "The model is based on the https://github.com/eclipse/microprofile-lra/blob/master/spec/src/main/asciidoc/microprofile-lra-spec.asciidoc[Eclipse MicroProfile LRA specification].  The approach is for the developer to annotate a business method with a Java annotation (https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/[`@LRA`]).  When such a method is called, an LRA context is created (if one is not already present) which is passed along with subsequent Jakarta REST invocations until a method is reached which also contains an `@LRA` annotation with an attribute that indicates that the LRA should be closed or cancelled. The default is for the LRA to be closed in the same method that started the LRA (which itself may have propagated the context during method execution).  The Jakarta REST resource indicates that it wishes to participate in the interaction by, minimally, marking one of the methods with an https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/[`@Compensate`] annotation. If the context is later cancelled, then this `@Compensate` action is guaranteed to be called even in the presence of failures and is the trigger for the resource to compensate for any activities it performed in the context of the LRA. This guarantee enables services to operate reliably with the assurance of eventual consistency (when all compensation activities have ran to completion). The participant can ask to be reliably notified when the LRA it is participating in is closed by marking one of the methods with an https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/[`@Complete`] annotation. In this way cancelling an LRA causes all participants to be notified via their Compensate callback and closing an LRA causes all participants to be notified via their Complete callback (if they have one).  Other annotations for controlling participants are documented in the https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/[MicroProfile LRA API v1.0 javadoc]."
msgstr "O modelo é baseado na  link:https://github.com/eclipse/microprofile-lra/blob/master/spec/src/main/asciidoc/microprofile-lra-spec.asciidoc[especificação Eclipse MicroProfile LRA]. A abordagem consiste em o programador anotar um método empresarial com uma anotação Java ( link:https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/[`@LRA`]). Quando esse método é chamado, é criado um contexto LRA (se ainda não existir um), que é transmitido com as invocações Jakarta REST subsequentes até chegar a um método que também contém uma anotação `@LRA` com um atributo que indica que o LRA deve ser encerrado ou cancelado. A predefinição é que o LRA seja encerrado no mesmo método que iniciou o LRA (que pode ter propagado o contexto durante a execução do método). O recurso REST de Jacarta indica que pretende participar na interação, no mínimo, marcando um dos métodos com uma anotação  link:https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/[`@Compensate`] anotação. Se o contexto for posteriormente cancelado, então esta ação `@Compensate` é garantidamente chamada mesmo na presença de falhas e é o gatilho para o recurso compensar quaisquer actividades que tenha realizado no contexto do LRA. Esta garantia permite que os serviços funcionem de forma fiável com a garantia de uma eventual coerência (quando todas as actividades de compensação tiverem sido concluídas). O participante pode pedir para ser notificado de forma fiável quando a LRA em que está a participar for encerrada, marcando um dos métodos com uma anotação  link:https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/[`@Complete`] . Deste modo, a anulação de uma LRA faz com que todos os participantes sejam notificados através da sua chamada de retorno Compensar e o encerramento de uma LRA faz com que todos os participantes sejam notificados através da sua chamada de retorno Completar (se tiverem uma). Outras anotações para controlar os participantes estão documentadas no  link:https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/[javadoc da API MicroProfile LRA v1.0]."

#. type: Title ==
#: upstream/_guides/lra.adoc:44
#, fuzzy, no-wrap
msgid "Configuration"
msgstr "Configuração"

#. type: Plain text
#: upstream/_guides/lra.adoc:48
#, fuzzy
msgid "Once you have your Quarkus Maven project configured you can add the `narayana-lra` extension by running the following command in your project base directory:"
msgstr "Depois de ter o seu projeto Quarkus Maven configurado, pode adicionar a extensão `narayana-lra` executando o seguinte comando no diretório base do seu projeto:"

#. type: Plain text
#: upstream/_guides/lra.adoc:53
#, fuzzy
msgid "This will add the following to your build file:"
msgstr "Isto irá adicionar o seguinte ao seu ficheiro de compilação:"

#. type: Block title
#: upstream/_guides/lra.adoc:55
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/lra.adoc:69
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-narayana-lra</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-jackson</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-rest-client-jackson</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/lra.adoc:72
#, fuzzy, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/lra.adoc:77
#, no-wrap
msgid ""
"implementation(\"io.quarkus:quarkus-narayana-lra\")\n"
"implementation(\"io.quarkus:quarkus-resteasy-jackson\")\n"
"implementation(\"io.quarkus:quarkus-rest-client-jackson\")\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/lra.adoc:83
#, fuzzy
msgid "`quarkus-narayana-lra` needs to be complemented with a server Jakarta REST implementation and a REST Client implementation in order to work.  This means that users should also have either `quarkus-resteasy-jackson` and `quarkus-rest-client-jackson` or `quarkus-resteasy-reactive-jackson` and `quarkus-rest-client-reactive-jackson` dependencies in their application."
msgstr "`quarkus-narayana-lra` precisa de ser complementado com uma implementação do servidor Jakarta REST e uma implementação do cliente REST para funcionar. Isto significa que os utilizadores também devem ter dependências `quarkus-resteasy-jackson` e `quarkus-rest-client-jackson` ou `quarkus-resteasy-reactive-jackson` e `quarkus-rest-client-reactive-jackson` na sua aplicação."

#. type: Plain text
#: upstream/_guides/lra.adoc:87
#, fuzzy
msgid "If there is a running coordinator then this is all you need in order to create new LRAs and to enlist participants with them."
msgstr "Se houver um coordenador em exercício, é tudo o que precisa para criar novos órgãos de poder local e regional e recrutar participantes para os mesmos."

#. type: Plain text
#: upstream/_guides/lra.adoc:92
#, fuzzy
msgid "The LRA extension can be configured by updating an `application.properties` file in the `src/main/resources` directory. The only LRA specific property is `quarkus.lra.coordinator-url=<url>` which specifies the HTTP endpoint of an external coordinator, for example:"
msgstr "A extensão LRA pode ser configurada actualizando um ficheiro `application.properties` no diretório `src/main/resources`. A única propriedade específica do LRA é `quarkus.lra.coordinator-url=&amp;lt;url&amp;gt;`, que especifica o ponto de extremidade HTTP de um coordenador externo, por exemplo:"

#. type: delimited block -
#: upstream/_guides/lra.adoc:96
#, no-wrap
msgid "quarkus.lra.coordinator-url=http://localhost:8080/lra-coordinator\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/lra.adoc:104
#, fuzzy
msgid "For a Narayana coordinator the path component of the url is normally `lra-coordinator`.  Coordinators can be obtained from https://quay.io/repository/jbosstm/lra-coordinator or you can build your own coordinator using a maven pom that includes the appropriate dependencies. A Quarkus quickstart will be provided to show how to do this, or you can take a look at one of the https://github.com/jbosstm/quickstart/tree/master/rts/lra-examples/lra-coordinator[Narayana quickstarts].  Another option would be to run it managed inside a WildFly application server."
msgstr "Para um coordenador Narayana, o componente de caminho do url é normalmente `lra-coordinator`. Os coordenadores podem ser obtidos em  https://quay.io/repository/jbosstm/lra-coordinator  ou pode construir o seu próprio coordenador utilizando um maven pom que inclua as dependências apropriadas. Um quickstart do Quarkus será fornecido para mostrar como fazer isso, ou você pode dar uma olhada em um dos  link:https://github.com/jbosstm/quickstart/tree/master/rts/lra-examples/lra-coordinator[quickstarts do Narayana]. Outra opção seria executá-lo gerenciado dentro de um servidor de aplicativos WildFly."

#. type: Title ==
#: upstream/_guides/lra.adoc:105
#, fuzzy, no-wrap
msgid "Handling failures"
msgstr "Tratamento de falhas"

#. type: Plain text
#: upstream/_guides/lra.adoc:114
#, fuzzy
msgid "When an LRA is told to finish, i.e. when a method annotated with `@LRA(end = true, ...)` is invoked, the coordinator will instruct all services involved in the interaction to finish. If a service is unavailable (or still finishing) then the coordinator will retry periodically. It is the user's responsibility to restart failed services on the same endpoint that they used when they first joined the LRA, or to tell the coordinator that they wish to be notified on new endpoints. An LRA is not deemed finished until *all* participants have acknowledged that they have finished."
msgstr "Quando é dito a um LRA para terminar, ou seja, quando é invocado um método anotado com `@LRA(end = true, …​)`, o coordenador dará instruções a todos os serviços envolvidos na interação para terminarem. Se um serviço não estiver disponível (ou ainda estiver a terminar), o coordenador tentará de novo periodicamente. É da responsabilidade do utilizador reiniciar os serviços que falharam no mesmo ponto final que utilizaram quando se juntaram pela primeira vez à LRA, ou informar o coordenador de que desejam ser notificados em novos pontos finais. Um LRA não é considerado terminado até que *todos os* participantes tenham reconhecido que terminaram."

#. type: Plain text
#: upstream/_guides/lra.adoc:122
#, fuzzy
msgid "The coordinator is responsible for reliably creating and ending LRAs and for managing participant enlistment, and it therefore must be available (for example if it or the network fail then something in the environment is responsible for restarting the coordinator or for repairing the network, respectively). To fulfill this task the coordinator must have access to durable storage for its logs (via a filesystem or in a database).  At the time of writing, managing coordinators is the responsibility of the user. An \"out-of-the-box\" solution will be forthcoming."
msgstr "O coordenador é responsável por criar e terminar LRAs de forma fiável e por gerir a inscrição dos participantes, pelo que deve estar disponível (por exemplo, se ele ou a rede falharem, algo no ambiente é responsável por reiniciar o coordenador ou por reparar a rede, respetivamente). Para cumprir esta tarefa, o coordenador deve ter acesso a um armazenamento duradouro para os seus registos (através de um sistema de ficheiros ou numa base de dados). No momento em que escrevo, a gestão dos coordenadores é da responsabilidade do utilizador. Uma solução \"out-of-the-box\" será apresentada em breve."

#. type: Title ==
#: upstream/_guides/lra.adoc:123
#, fuzzy, no-wrap
msgid "Examples"
msgstr "Exemplos"

#. type: Plain text
#: upstream/_guides/lra.adoc:128
#, fuzzy
msgid "The following is a simple example of how to start an LRA and how to receive a notification when the LRA is later cancelled (the `@Compensate` annotated method is called) or closed (`@Complete` is called):"
msgstr "Segue-se um exemplo simples de como iniciar uma LRA e como receber uma notificação quando a LRA é posteriormente cancelada (o método anotado `@Compensate` é chamado) ou fechada ( `@Complete` é chamado):"

#. type: delimited block -
#: upstream/_guides/lra.adoc:148
#, no-wrap
msgid ""
"@Path(\"/\")\n"
"@ApplicationScoped\n"
"public class SimpleLRAParticipant\n"
"{\n"
"    @LRA(LRA.Type.REQUIRES_NEW) // a new LRA is created on method entry\n"
"    @Path(\"/work\")\n"
"    @PUT\n"
"    public void doInNewLongRunningAction(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI lraId)\n"
"    {\n"
"        /*\n"
"         * Perform business actions in the context of the LRA identified by the\n"
"         * value in the injected Jakarta REST header. This LRA was started just before\n"
"         * the method was entered (REQUIRES_NEW) and will be closed when the\n"
"         * method finishes at which point the completeWork method below will be\n"
"         * invoked.\n"
"         */\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/lra.adoc:164
#, no-wrap
msgid ""
"    @org.eclipse.microprofile.lra.annotation.Complete\n"
"    @Path(\"/complete\")\n"
"    @PUT\n"
"    public Response completeWork(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI lraId,\n"
"                                 String userData)\n"
"    {\n"
"        /*\n"
"         * Free up resources allocated in the context of the LRA identified by the\n"
"         * value in the injected Jakarta REST header.\n"
"         *\n"
"         * Since there is no @Status method in this class, completeWork MUST be\n"
"         * idempotent and MUST return the status.\n"
"         */\n"
"         return Response.ok(ParticipantStatus.Completed.name()).build();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/lra.adoc:182
#, no-wrap
msgid ""
"    @org.eclipse.microprofile.lra.annotation.Compensate\n"
"    @Path(\"/compensate\")\n"
"    @PUT\n"
"    public Response compensateWork(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI lraId,\n"
"                                   String userData)\n"
"    {\n"
"        /*\n"
"         * The LRA identified by the value in the injected Jakarta REST header was\n"
"         * cancelled so the business logic should compensate for any actions\n"
"         * that have been performed while running in its context.\n"
"         *\n"
"         * Since there is no @Status method in this class, compensateWork MUST be\n"
"         * idempotent and MUST return the status\n"
"         */\n"
"         return Response.ok(ParticipantStatus.Compensated.name()).build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/lra.adoc:186
#, fuzzy
msgid "The example also shows that when an LRA is present its identifier can be obtained by reading the request headers via the `@HeaderParam` Jakarta REST annotation type."
msgstr "O exemplo também mostra que, quando um LRA está presente, o seu identificador pode ser obtido lendo os cabeçalhos do pedido através do tipo de anotação `@HeaderParam` Jakarta REST."

#. type: Plain text
#: upstream/_guides/lra.adoc:192
#, fuzzy
msgid "And here's an example of how to start an LRA in one resource method and close it in a different resource method using the `end` element of the `LRA` annotation. It also shows how to configure the LRA to be automatically cancelled if the business method returns the particular HTTP status codes identified in the `cancelOn` and `cancelOnFamily` elements:"
msgstr "Eis um exemplo de como iniciar uma LRA num método de recurso e fechá-la num método de recurso diferente utilizando o elemento `end` da anotação `LRA`. Mostra também como configurar a LRA para ser automaticamente cancelada se o método comercial devolver os códigos de estado HTTP específicos identificados nos elementos `cancelOn` e `cancelOnFamily`:"

#. type: delimited block -
#: upstream/_guides/lra.adoc:206
#, no-wrap
msgid ""
"  @LRA(value = LRA.Type.REQUIRED, // if there is no incoming context a new one is created\n"
"       cancelOn = {\n"
"           Response.Status.INTERNAL_SERVER_ERROR // cancel on a 500 code\n"
"       },\n"
"       cancelOnFamily = {\n"
"           Response.Status.Family.CLIENT_ERROR // cancel on any 4xx code\n"
"       },\n"
"       end = false) // the LRA will continue to run when the method finishes\n"
"  @Path(\"/book\")\n"
"  @POST\n"
"  public Response bookTrip(...) { ... }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/lra.adoc:212
#, no-wrap
msgid ""
"  @LRA(value = LRA.Type.MANDATORY, // requires an active context before method can be executed\n"
"       end = true) // end the LRA started by the bookTrip method\n"
"  @Path(\"/confirm\")\n"
"  @PUT\n"
"  public Booking confirmTrip(Booking booking) throws BookingException { ... }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/lra.adoc:219
#, fuzzy
msgid "The `end = false` element on the bookTrip method forces the LRA to continue running when the method finishes and the `end = true` element on the confirmTrip method forces the LRA (started by the bookTrip method) to be closed when the method finishes. Note that this end element can be placed on any Jakarta REST resource (ie one service can start the LRA whilst a different service ends it). There are many more examples in the https://github.com/eclipse/microprofile-lra/blob/master/spec/src/main/asciidoc/microprofile-lra-spec.asciidoc#java-annotations-for-lras[Microprofile LRA specification document] and in the https://github.com/eclipse/microprofile-lra/tree/master/tck/src/main/java/org/eclipse/microprofile/lra/tck[Microprofile LRA TCK]."
msgstr "O elemento `end = false` no método bookTrip força o LRA a continuar em execução quando o método termina e o elemento `end = true` no método confirmTrip força o LRA (iniciado pelo método bookTrip) a ser fechado quando o método termina. Note que este elemento de fim pode ser colocado em qualquer recurso REST de Jacarta (ou seja, um serviço pode iniciar o LRA enquanto outro serviço o termina). Existem muitos outros exemplos no  link:https://github.com/eclipse/microprofile-lra/blob/master/spec/src/main/asciidoc/microprofile-lra-spec.asciidoc#java-annotations-for-lras[documento de especificação do Microprofile LRA] e no  link:https://github.com/eclipse/microprofile-lra/tree/master/tck/src/main/java/org/eclipse/microprofile/lra/tck[Microprofile LRA TCK]."
