# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-29 08:10+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/hibernate-orm-panache.adoc:6
#, fuzzy, no-wrap
msgid "Simplified Hibernate ORM with Panache"
msgstr "ORM do Hibernate simplificado com Panache"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:17
#, fuzzy
msgid "Hibernate ORM is the de facto Jakarta Persistence (formerly known as JPA) implementation and offers you the full breadth of an Object Relational Mapper.  It makes complex mappings possible, but it does not make simple and common mappings trivial.  Hibernate ORM with Panache focuses on making your entities trivial and fun to write in Quarkus."
msgstr "O Hibernate ORM é a implementação de facto da Jakarta Persistence (anteriormente conhecida como JPA) e oferece-lhe toda a amplitude de um Mapeador Relacional de Objectos. Torna possíveis mapeamentos complexos, mas não torna triviais os mapeamentos simples e comuns. O Hibernate ORM com Panache concentra-se em tornar as suas entidades triviais e divertidas de escrever no Quarkus."

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:18
#, fuzzy, no-wrap
msgid "First: an example"
msgstr "Primeiro: um exemplo"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:21
#, fuzzy
msgid "What we're doing in Panache is to allow you to write your Hibernate ORM entities like this:"
msgstr "O que estamos a fazer na Panache é permitir-lhe escrever as suas entidades ORM do Hibernate desta forma:"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:25
#: upstream/_guides/hibernate-orm-panache.adoc:35
#: upstream/_guides/hibernate-orm-panache.adoc:174
#: upstream/_guides/hibernate-orm-panache.adoc:194
#: upstream/_guides/hibernate-orm-panache.adoc:313
#: upstream/_guides/hibernate-orm-panache.adoc:349
#: upstream/_guides/hibernate-orm-panache.adoc:399
#: upstream/_guides/hibernate-orm-panache.adoc:532
#: upstream/_guides/hibernate-orm-panache.adoc:783
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:30
#, no-wrap
msgid ""
"public enum Status {\n"
"    Alive,\n"
"    Deceased\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:40
#: upstream/_guides/hibernate-orm-panache.adoc:179
#: upstream/_guides/hibernate-orm-panache.adoc:199
#: upstream/_guides/hibernate-orm-panache.adoc:318
#, no-wrap
msgid ""
"import java.time.LocalDate;\n"
"import java.util.List;\n"
"import jakarta.persistence.Entity;\n"
"import io.quarkus.hibernate.orm.panache.PanacheEntity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:46
#: upstream/_guides/hibernate-orm-panache.adoc:205
#: upstream/_guides/hibernate-orm-panache.adoc:324
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:50
#: upstream/_guides/hibernate-orm-panache.adoc:328
#, no-wrap
msgid ""
"    public static Person findByName(String name){\n"
"        return find(\"name\", name).firstResult();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:54
#: upstream/_guides/hibernate-orm-panache.adoc:332
#, no-wrap
msgid ""
"    public static List<Person> findAlive(){\n"
"        return list(\"status\", Status.Alive);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:59
#: upstream/_guides/hibernate-orm-panache.adoc:337
#, no-wrap
msgid ""
"    public static void deleteStefs(){\n"
"        delete(\"name\", \"Stef\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:63
#, fuzzy
msgid "You have noticed how much more compact and readable the code is? Does this look interesting? Read on!"
msgstr "Já reparou como o código está mais compacto e legível? Isto parece-lhe interessante? Continue a ler!"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:65
#, fuzzy
msgid "the `list()` method might be surprising at first. It takes fragments of HQL (JP-QL) queries and contextualizes the rest. That makes for very concise but yet readable code."
msgstr "o método `list()` pode ser surpreendente à primeira vista. Ele pega fragmentos de consultas HQL (JP-QL) e contextualiza o resto. Isso torna o código muito conciso, mas ainda assim legível."

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:68
#, fuzzy
msgid "what was described above is essentially the link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[active record pattern], sometimes just called the entity pattern.  Hibernate with Panache also allows for the use of the more classical link:https://martinfowler.com/eaaCatalog/repository.html[repository pattern] via `PanacheRepository`."
msgstr "o que foi descrito acima é essencialmente o  link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[padrão de registo ativo], por vezes chamado apenas de padrão de entidade. O Hibernate com Panache também permite a utilização do  link:https://martinfowler.com/eaaCatalog/repository.html[padrão de repositório] mais clássico através de `PanacheRepository`."

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:69
#, fuzzy, no-wrap
msgid "Solution"
msgstr "Solução"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:73
#, fuzzy
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "Recomendamos que siga as instruções nas secções seguintes e crie a aplicação passo a passo. No entanto, pode ir diretamente para o exemplo completo."

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:75
#, fuzzy
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Clonar o repositório Git: `git clone {quickstarts-clone-url}`, ou descarregar um {quickstarts-archive-url}[arquivo]."

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:77
#, fuzzy
msgid "The solution is located in the `hibernate-orm-panache-quickstart` link:{quickstarts-tree-url}/hibernate-orm-panache-quickstart[directory]."
msgstr "A solução está localizada no  link:{quickstarts-tree-url}/hibernate-orm-panache-quickstart[diretório] `hibernate-orm-panache-quickstart`."

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:81
#, fuzzy
msgid "If your project is already configured to use other annotation processors, you will need to additionally add the Panache annotation processor:"
msgstr "Se o seu projeto já estiver configurado para utilizar outros processadores de anotações, terá de adicionar adicionalmente o processador de anotações Panache:"

#. type: Block title
#: upstream/_guides/hibernate-orm-panache.adoc:83
#: upstream/_guides/hibernate-orm-panache.adoc:125
#: upstream/_guides/hibernate-orm-panache.adoc:639
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:100
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-compiler-plugin</artifactId>\n"
"    <version>${compiler-plugin.version}</version>\n"
"    <configuration>\n"
"        <parameters>${maven.compiler.parameters}</parameters>\n"
"        <annotationProcessorPaths>\n"
"            <!-- Your existing annotation processor(s)... -->\n"
"            <path>\n"
"                <groupId>io.quarkus</groupId>\n"
"                <artifactId>quarkus-panache-common</artifactId>\n"
"                <version>${quarkus.platform.version}</version>\n"
"            </path>\n"
"        </annotationProcessorPaths>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/hibernate-orm-panache.adoc:103
#: upstream/_guides/hibernate-orm-panache.adoc:141
#, fuzzy, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:106
#, no-wrap
msgid "annotationProcessor(\"io.quarkus:quarkus-panache-common\")\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:109
#, fuzzy, no-wrap
msgid "Setting up and configuring Hibernate ORM with Panache"
msgstr "Instalação e configuração do Hibernate ORM com o Panache"

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:112
#, fuzzy
msgid "To get started:"
msgstr "Para começar:"

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:114
#, fuzzy
msgid "add your settings in `{config-file}`"
msgstr "adicione as suas definições em `{config-file}`"

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:115
#, fuzzy
msgid "annotate your entities with `@Entity`"
msgstr "anotar as suas entidades com `@Entity`"

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:116
#, fuzzy
msgid "make your entities extend `PanacheEntity` (optional if you are using the repository pattern)"
msgstr "fazer com que as suas entidades estendam `PanacheEntity` (opcional se estiver a utilizar o padrão de repositório)"

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:118
#, fuzzy
msgid "Follow the xref:hibernate-orm.adoc#setting-up-and-configuring-hibernate-orm[Hibernate set-up guide for all configuration]."
msgstr "Siga o  link:hibernate-orm.html#setting-up-and-configuring-hibernate-orm[guia de configuração do Hibernate para todas as configurações]."

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:120
#, fuzzy
msgid "In your build file, add the following dependencies:"
msgstr "No seu ficheiro de compilação, adicione as seguintes dependências:"

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:122
#, fuzzy
msgid "the Hibernate ORM with Panache extension"
msgstr "o Hibernate ORM com a extensão Panache"

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:123
#, fuzzy
msgid "your JDBC driver extension (`quarkus-jdbc-postgresql`, `quarkus-jdbc-h2`, `quarkus-jdbc-mariadb`, ...)"
msgstr "a extensão do seu controlador JDBC ( `quarkus-jdbc-postgresql`, `quarkus-jdbc-h2`, `quarkus-jdbc-mariadb`, ...)"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:132
#, no-wrap
msgid ""
"<!-- Hibernate ORM specific dependencies -->\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-hibernate-orm-panache</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:138
#, no-wrap
msgid ""
"<!-- JDBC driver dependencies -->\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-jdbc-postgresql</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:145
#, no-wrap
msgid ""
"// Hibernate ORM specific dependencies\n"
"implementation(\"io.quarkus:quarkus-hibernate-orm-panache\")\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:148
#, no-wrap
msgid ""
"// JDBC driver dependencies\n"
"implementation(\"io.quarkus:quarkus-jdbc-postgresql\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:151
#, fuzzy
msgid "Then add the relevant configuration properties in `{config-file}`."
msgstr "Em seguida, adicione as propriedades de configuração relevantes em `{config-file}`."

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:159
#, no-wrap
msgid ""
"# configure your datasource\n"
"quarkus.datasource.db-kind = postgresql\n"
"quarkus.datasource.username = sarah\n"
"quarkus.datasource.password = connor\n"
"quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/mydatabase\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:162
#, no-wrap
msgid ""
"# drop and create the database at startup (use `update` to only update the schema)\n"
"quarkus.hibernate-orm.database.generation = drop-and-create\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:164
#, fuzzy, no-wrap
msgid "Solution 1: using the active record pattern"
msgstr "Solução 1: utilizar o padrão de registo ativo"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:166
#: upstream/_guides/hibernate-orm-panache.adoc:342
#, fuzzy, no-wrap
msgid "Defining your entity"
msgstr "Definir a sua entidade"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:170
#, fuzzy
msgid "To define a Panache entity, simply extend `PanacheEntity`, annotate it with `@Entity` and add your columns as public fields:"
msgstr "Para definir uma entidade Panache, basta estender `PanacheEntity`, anotá-la com `@Entity` e adicionar as suas colunas como campos públicos:"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:186
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:190
#, fuzzy
msgid "You can put all your Jakarta Persistence column annotations on the public fields. If you need a field to not be persisted, use the `@Transient` annotation on it. If you need to write accessors, you can:"
msgstr "Pode colocar todas as suas anotações de coluna da Persistência de Jacarta nos campos públicos. Se precisar que um campo não seja persistido, use a anotação `@Transient` nele. Se precisar de escrever acessores, pode fazê-lo:"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:210
#, no-wrap
msgid ""
"    // return name as uppercase in the model\n"
"    public String getName(){\n"
"        return name.toUpperCase();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:216
#, no-wrap
msgid ""
"    // store all names in lowercase in the DB\n"
"    public void setName(String name){\n"
"        this.name = name.toLowerCase();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:221
#, fuzzy
msgid "And thanks to our field access rewrite, when your users read `person.name` they will actually call your `getName()` accessor, and similarly for field writes and the setter.  This allows for proper encapsulation at runtime as all fields calls will be replaced by the corresponding getter/setter calls."
msgstr "E graças à nossa reescrita de acesso a campos, quando os seus utilizadores lerem `person.name`, chamarão efetivamente o seu acessor `getName()` e, de forma semelhante, para as escritas de campo e o setter. Isso permite um encapsulamento adequado em tempo de execução, pois todas as chamadas de campos serão substituídas pelas chamadas de getter/setter correspondentes."

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:222
#: upstream/_guides/hibernate-orm-panache.adoc:440
#, fuzzy, no-wrap
msgid "Most useful operations"
msgstr "Operações mais úteis"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:225
#, fuzzy
msgid "Once you have written your entity, here are the most common operations you will be able to perform:"
msgstr "Depois de ter escrito a sua entidade, eis as operações mais comuns que poderá efetuar:"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:232
#: upstream/_guides/hibernate-orm-panache.adoc:450
#, no-wrap
msgid ""
"import java.time.LocalDate;\n"
"import java.time.Month;\n"
"import java.util.List;\n"
"import java.util.Optional;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:238
#, no-wrap
msgid ""
"// creating a person\n"
"Person person = new Person();\n"
"person.name = \"Stef\";\n"
"person.birth = LocalDate.of(1910, Month.FEBRUARY, 1);\n"
"person.status = Status.Alive;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:241
#, no-wrap
msgid ""
"// persist it\n"
"person.persist();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:244
#: upstream/_guides/hibernate-orm-panache.adoc:462
#, no-wrap
msgid ""
"// note that once persisted, you don't need to explicitly save your entity: all\n"
"// modifications are automatically persisted on transaction commit.\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:250
#, no-wrap
msgid ""
"// check if it is persistent\n"
"if(person.isPersistent()){\n"
"    // delete it\n"
"    person.delete();\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:253
#, no-wrap
msgid ""
"// getting a list of all Person entities\n"
"List<Person> allPersons = Person.listAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:256
#, no-wrap
msgid ""
"// finding a specific person by ID\n"
"person = Person.findById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:260
#, no-wrap
msgid ""
"// finding a specific person by ID via an Optional\n"
"Optional<Person> optional = Person.findByIdOptional(personId);\n"
"person = optional.orElseThrow(() -> new NotFoundException());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:263
#, no-wrap
msgid ""
"// finding all living persons\n"
"List<Person> livingPersons = Person.list(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:266
#, no-wrap
msgid ""
"// counting all persons\n"
"long countAll = Person.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:269
#, no-wrap
msgid ""
"// counting all living persons\n"
"long countAlive = Person.count(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:272
#, no-wrap
msgid ""
"// delete all living persons\n"
"Person.delete(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:275
#, no-wrap
msgid ""
"// delete all persons\n"
"Person.deleteAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:278
#, no-wrap
msgid ""
"// delete by id\n"
"boolean deleted = Person.deleteById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:281
#, no-wrap
msgid ""
"// set the name of all living persons to 'Mortal'\n"
"Person.update(\"name = 'Mortal' where status = ?1\", Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:285
#: upstream/_guides/hibernate-orm-panache.adoc:503
#, fuzzy
msgid "All `list` methods have equivalent `stream` versions."
msgstr "Todos os métodos `list` têm versões equivalentes `stream`."

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:291
#: upstream/_guides/hibernate-orm-panache.adoc:509
#, no-wrap
msgid ""
"import java.util.List;\n"
"import java.util.stream.Collectors;\n"
"import java.util.stream.Stream;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:298
#, no-wrap
msgid ""
"try (Stream<Person> persons = Person.streamAll()) {\n"
"    List<String> namesButEmmanuels = persons\n"
"        .map(p -> p.name.toLowerCase() )\n"
"        .filter( n -> ! \"emmanuel\".equals(n) )\n"
"        .collect(Collectors.toList());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:303
#, fuzzy
msgid "The `stream` methods require a transaction to work. + As they perform I/O operations, they should be closed via the `close()` method or via a try-with-resource to close the underlying `ResultSet`.  If not, you will see warnings from Agroal that will close the underlying `ResultSet` for you."
msgstr "Os métodos `stream` requerem uma transação para funcionar. + Como efectuam operações de E/S, devem ser fechados através do método `close()` ou através de um try-with-resource para fechar o `ResultSet` subjacente. Caso contrário, verá avisos do Agroal que fecharão o `ResultSet` subjacente por si."

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:304
#, fuzzy, no-wrap
msgid "Adding entity methods"
msgstr "Adição de métodos de entidade"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:309
#, fuzzy
msgid "Add custom queries on your entities inside the entities themselves.  That way, you and your co-workers can find them easily, and queries are co-located with the object they operate on.  Adding them as static methods in your entity class is the Panache Active Record way."
msgstr "Adicione consultas personalizadas às suas entidades dentro das próprias entidades. Desta forma, você e os seus colegas de trabalho podem encontrá-las facilmente, e as consultas são localizadas juntamente com o objeto em que operam. Adicioná-las como métodos estáticos na sua classe de entidade é a forma de fazer o Panache Active Record."

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:339
#, fuzzy, no-wrap
msgid "Solution 2: using the repository pattern"
msgstr "Solução 2: utilizar o padrão de repositório"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:345
#, fuzzy
msgid "When using the repository pattern, you can define your entities as regular Jakarta Persistence entities."
msgstr "Ao utilizar o padrão de repositório, pode definir as suas entidades como entidades normais da Jakarta Persistence."

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:353
#, no-wrap
msgid ""
"import jakarta.persistence.GeneratedValue;\n"
"import jakarta.persistence.Id;\n"
"import java.time.LocalDate;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:360
#, no-wrap
msgid ""
"@Entity\n"
"public class Person {\n"
"    @Id @GeneratedValue private Long id;\n"
"    private String name;\n"
"    private LocalDate birth;\n"
"    private Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:386
#, no-wrap
msgid ""
"    public Long getId(){\n"
"        return id;\n"
"    }\n"
"    public void setId(Long id){\n"
"        this.id = id;\n"
"    }\n"
"    public String getName() {\n"
"        return name;\n"
"    }\n"
"    public void setName(String name) {\n"
"        this.name = name;\n"
"    }\n"
"    public LocalDate getBirth() {\n"
"        return birth;\n"
"    }\n"
"    public void setBirth(LocalDate birth) {\n"
"        this.birth = birth;\n"
"    }\n"
"    public Status getStatus() {\n"
"        return status;\n"
"    }\n"
"    public void setStatus(Status status) {\n"
"        this.status = status;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:390
#, fuzzy
msgid "If you don't want to bother defining getters/setters for your entities, you can make them extend `PanacheEntityBase` and Quarkus will generate them for you. You can even extend `PanacheEntity` and take advantage of the default ID it provides."
msgstr "Se não se quiser dar ao trabalho de definir getters/setters para as suas entidades, pode fazê-las estender `PanacheEntityBase` e a Quarkus gerá-las-á por si. Pode até estender `PanacheEntity` e tirar partido da ID predefinida que fornece."

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:391
#, fuzzy, no-wrap
msgid "Defining your repository"
msgstr "Definir o seu repositório"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:395
#, fuzzy
msgid "When using Repositories, you get the exact same convenient methods as with the active record pattern, injected in your Repository, by making them implements `PanacheRepository`:"
msgstr "Ao utilizar Repositórios, obtém exatamente os mesmos métodos convenientes do padrão de registo ativo, injectados no seu Repositório, tornando-os implements `PanacheRepository`:"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:401
#, no-wrap
msgid "import io.quarkus.hibernate.orm.panache.PanacheRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:404
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:407
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheRepository<Person> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:409
#, no-wrap
msgid "   // put your custom logic here as instance methods\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:413
#, no-wrap
msgid ""
"   public Person findByName(String name){\n"
"       return find(\"name\", name).firstResult();\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:417
#, no-wrap
msgid ""
"   public List<Person> findAlive(){\n"
"       return list(\"status\", Status.Alive);\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:422
#, no-wrap
msgid ""
"   public void deleteStefs(){\n"
"       delete(\"name\", \"Stef\");\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:426
#, fuzzy
msgid "All the operations that are defined on `PanacheEntityBase` are available on your repository, so using it is exactly the same as using the active record pattern, except you need to inject it:"
msgstr "Todas as operações definidas em `PanacheEntityBase` estão disponíveis no seu repositório, pelo que a sua utilização é exatamente a mesma que a do padrão de registo ativo, exceto que é necessário injectá-lo:"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:430
#, no-wrap
msgid "import jakarta.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:433
#, no-wrap
msgid ""
"@Inject\n"
"PersonRepository personRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:438
#, no-wrap
msgid ""
"@GET\n"
"public long count(){\n"
"    return personRepository.count();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:443
#, fuzzy
msgid "Once you have written your repository, here are the most common operations you will be able to perform:"
msgstr "Depois de ter escrito o seu repositório, eis as operações mais comuns que poderá efetuar:"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:456
#, no-wrap
msgid ""
"// creating a person\n"
"Person person = new Person();\n"
"person.setName(\"Stef\");\n"
"person.setBirth(LocalDate.of(1910, Month.FEBRUARY, 1));\n"
"person.setStatus(Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:459
#, no-wrap
msgid ""
"// persist it\n"
"personRepository.persist(person);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:468
#, no-wrap
msgid ""
"// check if it is persistent\n"
"if(personRepository.isPersistent(person)){\n"
"    // delete it\n"
"    personRepository.delete(person);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:471
#, no-wrap
msgid ""
"// getting a list of all Person entities\n"
"List<Person> allPersons = personRepository.listAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:474
#, no-wrap
msgid ""
"// finding a specific person by ID\n"
"person = personRepository.findById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:478
#, no-wrap
msgid ""
"// finding a specific person by ID via an Optional\n"
"Optional<Person> optional = personRepository.findByIdOptional(personId);\n"
"person = optional.orElseThrow(() -> new NotFoundException());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:481
#, no-wrap
msgid ""
"// finding all living persons\n"
"List<Person> livingPersons = personRepository.list(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:484
#, no-wrap
msgid ""
"// counting all persons\n"
"long countAll = personRepository.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:487
#, no-wrap
msgid ""
"// counting all living persons\n"
"long countAlive = personRepository.count(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:490
#, no-wrap
msgid ""
"// delete all living persons\n"
"personRepository.delete(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:493
#, no-wrap
msgid ""
"// delete all persons\n"
"personRepository.deleteAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:496
#, no-wrap
msgid ""
"// delete by id\n"
"boolean deleted = personRepository.deleteById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:499
#, no-wrap
msgid ""
"// set the name of all living persons to 'Mortal'\n"
"personRepository.update(\"name = 'Mortal' where status = ?1\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:515
#, no-wrap
msgid ""
"Stream<Person> persons = personRepository.streamAll();\n"
"List<String> namesButEmmanuels = persons\n"
"    .map(p -> p.name.toLowerCase() )\n"
"    .filter( n -> ! \"emmanuel\".equals(n) )\n"
"    .collect(Collectors.toList());\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:518
#, fuzzy
msgid "The `stream` methods require a transaction to work."
msgstr "Os métodos `stream` requerem uma transação para funcionar."

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:522
#, fuzzy
msgid "The rest of the documentation show usages based on the active record pattern only, but keep in mind that they can be performed with the repository pattern as well.  The repository pattern examples have been omitted for brevity."
msgstr "O resto da documentação mostra utilizações baseadas apenas no padrão de registo ativo, mas tenha em atenção que também podem ser executadas com o padrão de repositório. Os exemplos do padrão de repositório foram omitidos por brevidade."

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:523
#, fuzzy, no-wrap
msgid "Writing a Jakarta REST resource"
msgstr "Escrever um recurso Jakarta REST"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:526
#, fuzzy
msgid "First, include one of the RESTEasy Reactive extensions to enable Jakarta REST endpoints, for example, add the `io.quarkus:quarkus-resteasy-reactive-jackson` dependency for Jakarta REST and JSON support."
msgstr "Primeiro, inclua uma das extensões RESTEasy Reactive para habilitar os pontos de extremidade Jakarta REST, por exemplo, adicione a dependência `io.quarkus:quarkus-resteasy-reactive-jackson` para suporte a Jakarta REST e JSON."

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:528
#, fuzzy
msgid "Then, you can create the following resource to create/read/update/delete your Person entity:"
msgstr "Em seguida, pode criar o seguinte recurso para criar/ler/atualizar/eliminar a sua entidade Pessoa:"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:546
#, no-wrap
msgid ""
"import java.net.URI;\n"
"import java.util.List;\n"
"import jakarta.transaction.Transactional;\n"
"import jakarta.ws.rs.Consumes;\n"
"import jakarta.ws.rs.DELETE;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.NotFoundException;\n"
"import jakarta.ws.rs.POST;\n"
"import jakarta.ws.rs.PUT;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
"import jakarta.ws.rs.core.Response;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:551
#, no-wrap
msgid ""
"@Path(\"/persons\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"public class PersonResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:556
#, no-wrap
msgid ""
"    @GET\n"
"    public List<Person> list() {\n"
"        return Person.listAll();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:562
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/{id}\")\n"
"    public Person get(Long id) {\n"
"        return Person.findById(id);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:569
#, no-wrap
msgid ""
"    @POST\n"
"    @Transactional\n"
"    public Response create(Person person) {\n"
"        person.persist();\n"
"        return Response.created(URI.create(\"/persons/\" + person.id)).build();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:578
#, no-wrap
msgid ""
"    @PUT\n"
"    @Path(\"/{id}\")\n"
"    @Transactional\n"
"    public Person update(Long id, Person person) {\n"
"        Person entity = Person.findById(id);\n"
"        if(entity == null) {\n"
"            throw new NotFoundException();\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:581
#, no-wrap
msgid ""
"        // map all fields from the person parameter to the existing entity\n"
"        entity.name = person.name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:584
#, no-wrap
msgid ""
"        return entity;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:595
#, no-wrap
msgid ""
"    @DELETE\n"
"    @Path(\"/{id}\")\n"
"    @Transactional\n"
"    public void delete(Long id) {\n"
"        Person entity = Person.findById(id);\n"
"        if(entity == null) {\n"
"            throw new NotFoundException();\n"
"        }\n"
"        entity.delete();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:601
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/search/{name}\")\n"
"    public Person search(String name) {\n"
"        return Person.findByName(name);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:608
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/count\")\n"
"    public Long count() {\n"
"        return Person.count();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:612
#, fuzzy
msgid "Be careful to use the `@Transactional` annotation on the operations that modify the database, you can add the annotation at the class level for simplicity purpose."
msgstr "Tenha o cuidado de utilizar a anotação `@Transactional` nas operações que modificam a base de dados. Pode adicionar a anotação ao nível da classe para simplificar."

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:614
#, fuzzy
msgid "To make it easier to showcase some capabilities of Hibernate ORM with Panache on Quarkus with Dev mode, some test data should be inserted into the database by adding the following content to a new file named src/main/resources/import.sql:"
msgstr "Para facilitar a demonstração de algumas capacidades do Hibernate ORM com o Panache no Quarkus com o modo Dev, alguns dados de teste devem ser inseridos na base de dados, adicionando o seguinte conteúdo a um novo ficheiro chamado src/main/resources/import.sql:"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:619
#, no-wrap
msgid ""
"INSERT INTO person (id, birth, name, status) VALUES (1, '1995-09-12', 'Emily Brown', 0);\n"
"ALTER SEQUENCE person_seq RESTART WITH 2;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:622
#, fuzzy
msgid "If you would like to initialize the DB when you start the Quarkus app in your production environment, add `quarkus.hibernate-orm.database.generation=drop-and-create` to the Quarkus startup options in addition to `import.sql`."
msgstr "Se pretender inicializar a BD quando iniciar a aplicação Quarkus no seu ambiente de produção, adicione `quarkus.hibernate-orm.database.generation=drop-and-create` às opções de arranque do Quarkus, para além de `import.sql`."

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:624
#, fuzzy
msgid "After that, you can see the people list and add new person as followings:"
msgstr "Depois disso, pode ver a lista de pessoas e adicionar novas pessoas como seguidores:"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:629
#, no-wrap
msgid ""
"$ curl -w \"\\n\" http://localhost:8080/persons\n"
"[{\"id\":1,\"name\":\"Emily Brown\",\"birth\":\"1995-09-12\",\"status\":\"Alive\"}]\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:631
#, no-wrap
msgid "$ curl -X POST -H \"Content-Type: application/json\" -d '{\"name\" : \"William Davis\" , \"birth\" : \"1988-07-04\", \"status\" : \"Alive\"}' http://localhost:8080/persons\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:634
#, no-wrap
msgid ""
"$ curl -w \"\\n\" http://localhost:8080/persons\n"
"[{\"id\":1,\"name\":\"Emily Brown\",\"birth\":\"1995-09-12\",\"status\":\"Alive\"}, {\"id\":2,\"name\":\"William Davis\",\"birth\":\"1988-07-04\",\"status\":\"Alive\"}]\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:637
#, fuzzy
msgid "If you see the Person object as Person<1>, then the object has not been converted. In this case, add the dependency `quarkus-resteasy-reactive-jackson` in `pom.xml`."
msgstr "Se vir o objeto Person como Person&lt;1&gt;, então o objeto não foi convertido. Neste caso, adicione a dependência `quarkus-resteasy-reactive-jackson` em `pom.xml`."

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:645
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-reactive-jackson</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:647
#, fuzzy, no-wrap
msgid "Advanced Query"
msgstr "Consulta avançada"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:649
#, fuzzy, no-wrap
msgid "Paging"
msgstr "Paging"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:653
#, fuzzy
msgid "You should only use `list` and `stream` methods if your table contains small enough data sets. For larger data sets you can use the `find` method equivalents, which return a `PanacheQuery` on which you can do paging:"
msgstr "Só deve utilizar os métodos `list` e `stream` se a sua tabela contiver conjuntos de dados suficientemente pequenos. Para conjuntos de dados maiores, pode utilizar os equivalentes do método `find`, que devolvem um `PanacheQuery` no qual pode efetuar a paginação:"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:659
#, no-wrap
msgid ""
"import io.quarkus.hibernate.orm.panache.PanacheQuery;\n"
"import io.quarkus.panache.common.Page;\n"
"import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:662
#: upstream/_guides/hibernate-orm-panache.adoc:701
#, no-wrap
msgid ""
"// create a query for all living persons\n"
"PanacheQuery<Person> livingPersons = Person.find(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:665
#, no-wrap
msgid ""
"// make it use pages of 25 entries at a time\n"
"livingPersons.page(Page.ofSize(25));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:668
#, no-wrap
msgid ""
"// get the first page\n"
"List<Person> firstPage = livingPersons.list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:671
#, no-wrap
msgid ""
"// get the second page\n"
"List<Person> secondPage = livingPersons.nextPage().list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:674
#, no-wrap
msgid ""
"// get page 7\n"
"List<Person> page7 = livingPersons.page(Page.of(7, 25)).list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:677
#, no-wrap
msgid ""
"// get the number of pages\n"
"int numberOfPages = livingPersons.pageCount();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:680
#, no-wrap
msgid ""
"// get the total number of entities returned by this query without paging\n"
"long count = livingPersons.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:686
#, no-wrap
msgid ""
"// and you can chain methods of course\n"
"return Person.find(\"status\", Status.Alive)\n"
"    .page(Page.ofSize(25))\n"
"    .nextPage()\n"
"    .stream()\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:689
#, fuzzy
msgid "The `PanacheQuery` type has many other methods to deal with paging and returning streams."
msgstr "O tipo `PanacheQuery` tem muitos outros métodos para lidar com fluxos de paginação e de retorno."

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:690
#, fuzzy, no-wrap
msgid "Using a range instead of pages"
msgstr "Utilizar um intervalo em vez de páginas"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:693
#, fuzzy
msgid "`PanacheQuery` also allows range-based queries."
msgstr "`PanacheQuery` também permite consultas baseadas em intervalos."

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:698
#, no-wrap
msgid ""
"import io.quarkus.hibernate.orm.panache.PanacheQuery;\n"
"import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:704
#, no-wrap
msgid ""
"// make it use a range: start at index 0 until index 24 (inclusive).\n"
"livingPersons.range(0, 24);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:707
#, no-wrap
msgid ""
"// get the range\n"
"List<Person> firstRange = livingPersons.list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:710
#, no-wrap
msgid ""
"// to get the next range, you need to call range again\n"
"List<Person> secondRange = livingPersons.range(25, 49).list();\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:716
#, fuzzy
msgid "You cannot mix ranges and pages: if you use a range, all methods that depend on having a current page will throw an `UnsupportedOperationException`; you can switch back to paging using `page(Page)` or `page(int, int)`."
msgstr "Não é possível misturar intervalos e páginas: se utilizar um intervalo, todos os métodos que dependem da existência de uma página atual lançarão um `UnsupportedOperationException`; pode voltar a utilizar a paginação utilizando `page(Page)` ou `page(int, int)`."

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:718
#, fuzzy, no-wrap
msgid "Sorting"
msgstr "Ordenação"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:721
#, fuzzy
msgid "All methods accepting a query string also accept the following simplified query form:"
msgstr "Todos os métodos que aceitam uma cadeia de consulta também aceitam o seguinte formulário de consulta simplificado:"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:725
#, no-wrap
msgid "List<Person> persons = Person.list(\"order by name,birth\");\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:728
#, fuzzy
msgid "But these methods also accept an optional `Sort` parameter, which allows you to abstract your sorting:"
msgstr "Mas estes métodos também aceitam um parâmetro opcional `Sort`, que lhe permite abstrair a sua ordenação:"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:732
#, no-wrap
msgid "import io.quarkus.panache.common.Sort;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:734
#, no-wrap
msgid "List<Person> persons = Person.list(Sort.by(\"name\").and(\"birth\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:737
#, no-wrap
msgid ""
"// and with more restrictions\n"
"List<Person> persons = Person.list(\"status\", Sort.by(\"name\").and(\"birth\"), Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:740
#, no-wrap
msgid ""
"// and list first the entries with null values in the field \"birth\"\n"
"List<Person> persons = Person.list(Sort.by(\"birth\", Sort.NullPrecedence.NULLS_FIRST));\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:743
#, fuzzy
msgid "The `Sort` class has plenty of methods for adding columns and specifying sort direction or the null precedence."
msgstr "A classe `Sort` tem muitos métodos para adicionar colunas e especificar a direção de ordenação ou a precedência nula."

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:744
#, fuzzy, no-wrap
msgid "Simplified queries"
msgstr "Consultas simplificadas"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:748
#, fuzzy
msgid "Normally, HQL queries are of this form: `from EntityName [where ...] [order by ...]`, with optional elements at the end."
msgstr "Normalmente, as consultas HQL têm este formato: `from EntityName [where …​] [order by …​]`, com elementos opcionais no final."

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:750
#, fuzzy
msgid "If your select query does not start with `from`, we support the following additional forms:"
msgstr "Se a sua consulta de seleção não começar por `from`, suportamos os seguintes formulários adicionais:"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:752
#, fuzzy
msgid "`order by ...` which will expand to `from EntityName order by ...`"
msgstr "`order by …​` que se expandirá para `from EntityName order by …​`"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:753
#, fuzzy
msgid "`<singleColumnName>` (and single parameter) which will expand to `from EntityName where <singleColumnName> = ?`"
msgstr "`&amp;lt;singleColumnName&amp;gt;` (e um único parâmetro) que se expandirá para `from EntityName where &amp;lt;singleColumnName&amp;gt; = ?`"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:754
#, fuzzy
msgid "`<query>` will expand to `from EntityName where <query>`"
msgstr "`&amp;lt;query&amp;gt;` irá expandir-se para `from EntityName where &amp;lt;query&amp;gt;`"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:756
#, fuzzy
msgid "If your update query does not start with `update`, we support the following additional forms:"
msgstr "Se a sua consulta de atualização não começar por `update`, suportamos os seguintes formulários adicionais:"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:758
#, fuzzy
msgid "`from EntityName ...` which will expand to `update EntityName ...`"
msgstr "`from EntityName …​` que se expandirá para `update EntityName …​`"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:759
#, fuzzy
msgid "`set? <singleColumnName>` (and single parameter) which will expand to `update EntityName set <singleColumnName> = ?`"
msgstr "`set? &amp;lt;singleColumnName&amp;gt;` (e um único parâmetro) que se expandirá para `update EntityName set &amp;lt;singleColumnName&amp;gt; = ?`"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:760
#, fuzzy
msgid "`set? <update-query>` will expand to `update EntityName set <update-query>`"
msgstr "`set? &amp;lt;update-query&amp;gt;` irá expandir-se para `update EntityName set &amp;lt;update-query&amp;gt;`"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:762
#, fuzzy
msgid "If your delete query does not start with `delete`, we support the following additional forms:"
msgstr "Se a sua consulta de eliminação não começar por `delete`, suportamos os seguintes formulários adicionais:"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:764
#, fuzzy
msgid "`from EntityName ...` which will expand to `delete from EntityName ...`"
msgstr "`from EntityName …​` que se expandirá para `delete from EntityName …​`"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:765
#, fuzzy
msgid "`<singleColumnName>` (and single parameter) which will expand to `delete from EntityName where <singleColumnName> = ?`"
msgstr "`&amp;lt;singleColumnName&amp;gt;` (e um único parâmetro) que se expandirá para `delete from EntityName where &amp;lt;singleColumnName&amp;gt; = ?`"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:766
#, fuzzy
msgid "`<query>` will expand to `delete from EntityName where <query>`"
msgstr "`&amp;lt;query&amp;gt;` irá expandir-se para `delete from EntityName where &amp;lt;query&amp;gt;`"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:769
#, fuzzy
msgid "You can also write your queries in plain link:{hibernate-orm-docs-url}#hql[HQL]:"
msgstr "Também pode escrever as suas consultas em  link:{hibernate-orm-docs-url}#hql[HQL] simples:"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:774
#, no-wrap
msgid ""
"Order.find(\"select distinct o from Order o left join fetch o.lineItems\");\n"
"Order.update(\"update Person set name = 'Mortal' where status = ?\", Status.Alive);\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:776
#, fuzzy, no-wrap
msgid "Named queries"
msgstr "Consultas nomeadas"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:779
#, fuzzy
msgid "You can reference a named query instead of a (simplified) HQL query by prefixing its name with the '#' character. You can also use named queries for count, update and delete queries."
msgstr "Pode fazer referência a uma consulta nomeada em vez de uma consulta HQL (simplificada), prefixando o seu nome com o carácter '#'. Também pode utilizar consultas nomeadas para consultas de contagem, atualização e eliminação."

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:788
#, no-wrap
msgid ""
"import java.time.LocalDate;\n"
"import jakarta.persistence.Entity;\n"
"import jakarta.persistence.NamedQueries;\n"
"import jakarta.persistence.NamedQuery;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:791
#, no-wrap
msgid ""
"import io.quarkus.hibernate.orm.panache.PanacheEntity;\n"
"import io.quarkus.panache.common.Parameters;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:799
#, no-wrap
msgid ""
"@Entity\n"
"@NamedQueries({\n"
"    @NamedQuery(name = \"Person.getByName\", query = \"from Person where name = ?1\"),\n"
"    @NamedQuery(name = \"Person.countByStatus\", query = \"select count(*) from Person p where p.status = :status\"),\n"
"    @NamedQuery(name = \"Person.updateStatusById\", query = \"update Person p set p.status = :status where p.id = :id\"),\n"
"    @NamedQuery(name = \"Person.deleteById\", query = \"delete from Person p where p.id = ?1\")\n"
"})\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:804
#, no-wrap
msgid ""
"public class Person extends PanacheEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:808
#, no-wrap
msgid ""
"    public static Person findByName(String name){\n"
"        return find(\"#Person.getByName\", name).firstResult();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:812
#, no-wrap
msgid ""
"    public static long countByStatus(Status status) {\n"
"        return count(\"#Person.countByStatus\", Parameters.with(\"status\", status).map());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:816
#, no-wrap
msgid ""
"    public static long updateStatusById(Status status, long id) {\n"
"        return update(\"#Person.updateStatusById\", Parameters.with(\"status\", status).and(\"id\", id));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:821
#, no-wrap
msgid ""
"    public static long deleteById(long id) {\n"
"        return delete(\"#Person.deleteById\", id);\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:827
#, fuzzy
msgid "Named queries can only be defined inside your Jakarta Persistence entity classes (being the Panache entity class, or the repository parameterized type), or on one of its super classes."
msgstr "As consultas nomeadas só podem ser definidas dentro das suas classes de entidade Jakarta Persistence (sendo a classe de entidade Panache, ou o tipo parametrizado do repositório), ou numa das suas super classes."

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:829
#, fuzzy, no-wrap
msgid "Query parameters"
msgstr "Parâmetros de consulta"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:832
#, fuzzy
msgid "You can pass query parameters by index (1-based) as shown below:"
msgstr "Pode passar parâmetros de consulta por índice (baseado em 1), como se mostra abaixo:"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:836
#, no-wrap
msgid "Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:839
#, fuzzy
msgid "Or by name using a `Map`:"
msgstr "Ou pelo nome, utilizando um `Map`:"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:844
#, no-wrap
msgid ""
"import java.util.HashMap;\n"
"import java.util.Map;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:849
#, no-wrap
msgid ""
"Map<String, Object> params = new HashMap<>();\n"
"params.put(\"name\", \"stef\");\n"
"params.put(\"status\", Status.Alive);\n"
"Person.find(\"name = :name and status = :status\", params);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:852
#, fuzzy
msgid "Or using the convenience class `Parameters` either as is or to build a `Map`:"
msgstr "Ou utilizar a classe de conveniência `Parameters` como está ou para construir um `Map`:"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:858
#, no-wrap
msgid ""
"// generate a Map\n"
"Person.find(\"name = :name and status = :status\",\n"
"         Parameters.with(\"name\", \"stef\").and(\"status\", Status.Alive).map());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:862
#, no-wrap
msgid ""
"// use it as-is\n"
"Person.find(\"name = :name and status = :status\",\n"
"         Parameters.with(\"name\", \"stef\").and(\"status\", Status.Alive));\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:865
#, fuzzy
msgid "Every query operation accepts passing parameters by index (`Object...`), or by name (`Map<String,Object>` or `Parameters`)."
msgstr "Cada operação de consulta aceita a passagem de parâmetros por índice ( `Object…​`), ou por nome ( `Map&amp;lt;String,Object&amp;gt;` ou `Parameters`)."

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:866
#, fuzzy, no-wrap
msgid "Query projection"
msgstr "Projeção de consulta"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:869
#, fuzzy
msgid "Query projection can be done with the `project(Class)` method on the `PanacheQuery` object that is returned by the `find()` methods."
msgstr "A projeção da consulta pode ser feita com o método `project(Class)` no objeto `PanacheQuery` que é devolvido pelos métodos `find()`."

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:871
#, fuzzy
msgid "You can use it to restrict which fields will be returned by the database."
msgstr "Pode ser utilizado para restringir os campos que serão devolvidos pela base de dados."

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:875
#, fuzzy
msgid "Hibernate will use **DTO projection** and generate a SELECT clause with the attributes from the projection class.  This is also called **dynamic instantiation** or **constructor expression**, more info can be found on the Hibernate guide: link:{hibernate-orm-docs-url}#hql-select-clause[hql select clause]"
msgstr "O Hibernate irá utilizar *a projeção DTO* e gerar uma cláusula SELECT com os atributos da classe de projeção. Isto também é chamado de *instanciação dinâmica* ou *expressão de construtor*, mais informações podem ser encontradas no guia do Hibernate:  link:{hibernate-orm-docs-url}#hql-select-clause[hql select clause]"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:878
#, fuzzy
msgid "The projection class needs to have a constructor that contains all its attributes, this constructor will be used to instantiate the projection DTO instead of using the entity class. This class must have a matching constructor with all the class attributes as parameters."
msgstr "A classe de projeção tem de ter um construtor que contenha todos os seus atributos, este construtor será utilizado para instanciar a DTO de projeção em vez de utilizar a classe de entidade. Esta classe tem de ter um construtor correspondente com todos os atributos da classe como parâmetros."

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:884
#, no-wrap
msgid ""
"import io.quarkus.runtime.annotations.RegisterForReflection;\n"
"import io.quarkus.hibernate.orm.panache.PanacheQuery;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:888
#, no-wrap
msgid ""
"@RegisterForReflection // <1>\n"
"public class PersonName {\n"
"    public final String name; // <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:893
#, no-wrap
msgid ""
"    public PersonName(String name){ // <3>\n"
"        this.name = name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:896
#, no-wrap
msgid ""
"// only 'name' will be loaded from the database\n"
"PanacheQuery<PersonName> query = Person.find(\"status\", Status.Alive).project(PersonName.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:898
#, fuzzy
msgid "The `@RegisterForReflection` annotation instructs Quarkus to keep the class and its members during the native compilation. More details about the `@RegisterForReflection` annotation can be found on the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr "A anotação `@RegisterForReflection` instrui o Quarkus a manter a classe e seus membros durante a compilação nativa. Mais detalhes sobre a anotação `@RegisterForReflection` podem ser encontrados na página de  link:writing-native-applications-tips.html#registerForReflection[dicas de aplicações nativas]."

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:899
#, fuzzy
msgid "We use public fields here, but you can use private fields and getters/setters if you prefer."
msgstr "Utilizamos aqui campos públicos, mas pode utilizar campos privados e getters/setters se preferir."

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:900
#, fuzzy
msgid "This constructor will be used by Hibernate, it must be the only constructor in your class and have all the class attributes as parameters."
msgstr "Este construtor será utilizado pelo Hibernate, deve ser o único construtor da sua classe e ter todos os atributos da classe como parâmetros."

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:907
#, fuzzy
msgid "The implementation of the `project(Class)` method uses the constructor's parameter names to build the select clause of the query, so the compiler must be configured to store parameter names inside the compiled class.  This is enabled by default if you are using the Quarkus Maven archetype. If you are not using it, add the property `<maven.compiler.parameters>true</maven.compiler.parameters>` to your `pom.xml`."
msgstr "A implementação do método `project(Class)` utiliza os nomes dos parâmetros do construtor para construir a cláusula select da consulta, pelo que o compilador deve ser configurado para armazenar nomes de parâmetros dentro da classe compilada. Isto está ativado por predefinição se estiver a utilizar o arquétipo Quarkus Maven. Se não o estiver a utilizar, adicione a propriedade `&amp;lt;maven.compiler.parameters&amp;gt;true&amp;lt;/maven.compiler.parameters&amp;gt;` ao seu `pom.xml`."

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:910
#, fuzzy
msgid "If you run Java 17+, records are a good fit for projection classes."
msgstr "Se executar Java 17+, os registos são uma boa opção para as classes de projeção."

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:912
#, fuzzy
msgid "If in the DTO projection object you have a field from a referenced entity, you can use the `@ProjectedFieldName` annotation to provide the path for the SELECT statement."
msgstr "Se no objeto de projeção DTO tiver um campo de uma entidade referenciada, pode utilizar a anotação `@ProjectedFieldName` para fornecer o caminho para a instrução SELECT."

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:917
#, no-wrap
msgid ""
"import jakarta.persistence.ManyToOne;\n"
"import io.quarkus.hibernate.orm.panache.common.ProjectedFieldName;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:926
#, no-wrap
msgid ""
"@Entity\n"
"public class Dog extends PanacheEntity {\n"
"    public String name;\n"
"    public String race;\n"
"    public Double weight;\n"
"    @ManyToOne\n"
"    public Person owner;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:931
#, no-wrap
msgid ""
"@RegisterForReflection\n"
"public class DogDto {\n"
"    public String name;\n"
"    public String ownerName;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:937
#, no-wrap
msgid ""
"    public DogDto(String name, @ProjectedFieldName(\"owner.name\") String ownerName) {  // <1>\n"
"        this.name = name;\n"
"        this.ownerName = ownerName;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:939
#, no-wrap
msgid "PanacheQuery<DogDto> query = Dog.findAll().project(DogDto.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:941
#, fuzzy
msgid "The `ownerName` DTO constructor's parameter will be loaded from the `owner.name` HQL property."
msgstr "O parâmetro do construtor `ownerName` DTO será carregado a partir da propriedade `owner.name` HQL."

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:944
#, fuzzy
msgid "It is also possible to specify a HQL query with a select clause. In this case, the projection class must have a constructor matching the values returned by the select clause:"
msgstr "Também é possível especificar uma consulta HQL com uma cláusula select. Neste caso, a classe de projeção tem de ter um construtor que corresponda aos valores devolvidos pela cláusula select:"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:948
#, no-wrap
msgid "import io.quarkus.runtime.annotations.RegisterForReflection;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:953
#, no-wrap
msgid ""
"@RegisterForReflection\n"
"public class RaceWeight {\n"
"    public final String race;\n"
"    public final Double weight;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:957
#, no-wrap
msgid ""
"    public RaceWeight(String race) {\n"
"        this(race, null);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:963
#, no-wrap
msgid ""
"    public RaceWeight(String race, Double weight) { // <1>\n"
"        this.race = race;\n"
"        this.weight = weight;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:966
#, no-wrap
msgid ""
"// Only the race and the average weight will be loaded\n"
"PanacheQuery<RaceWeight> query = Person.find(\"select d.race, AVG(d.weight) from Dog d group by d.race\").project(RaceWeight.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:968
#, fuzzy
msgid "Hibernate ORM will use this constructor. When the query has a select clause, it is possible to have multiple constructors."
msgstr "O Hibernate ORM utilizará este construtor. Quando a consulta tem uma cláusula select, é possível ter vários construtores."

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:972
#, fuzzy
msgid "It is not possible to have a HQL `select new` query and `.project(Class)` at the same time - you need to pick one approach."
msgstr "Não é possível ter uma consulta HQL `select new` e `.project(Class)` ao mesmo tempo - é necessário escolher uma abordagem."

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:974
#, fuzzy
msgid "For example, this will fail:"
msgstr "Por exemplo, isto falhará:"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:978
#, no-wrap
msgid "PanacheQuery<RaceWeight> query = Person.find(\"select new MyView(d.race, AVG(d.weight)) from Dog d group by d.race\").project(AnotherView.class);\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:981
#, fuzzy, no-wrap
msgid "Multiple Persistence Units"
msgstr "Unidades de persistência múltiplas"

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:984
#, fuzzy
msgid "The support for multiple persistence units is described in detail in xref:hibernate-orm.adoc#multiple-persistence-units[the Hibernate ORM guide]."
msgstr "O suporte para várias unidades de persistência é descrito em pormenor no  link:hibernate-orm.html#multiple-persistence-units[guia Hibernate ORM]."

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:986
#, fuzzy
msgid "When using Panache, things are simple:"
msgstr "Ao utilizar a Panache, as coisas são simples:"

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:988
#, fuzzy
msgid "A given Panache entity can be attached to only a single persistence unit."
msgstr "Uma determinada entidade Panache só pode ser associada a uma única unidade de persistência."

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:989
#, fuzzy
msgid "Given that, Panache already provides the necessary plumbing to transparently find the appropriate `EntityManager` associated to a Panache entity."
msgstr "Assim sendo, a Panache já fornece a canalização necessária para encontrar de forma transparente o `EntityManager` adequado associado a uma entidade Panache."

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:990
#, fuzzy, no-wrap
msgid "Transactions"
msgstr "Transacções"

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:995
#, fuzzy
msgid "Make sure to wrap methods modifying your database (e.g. `entity.persist()`) within a transaction. Marking a CDI bean method `@Transactional` will do that for you and make that method a transaction boundary. We recommend doing so at your application entry point boundaries like your REST endpoint controllers."
msgstr "Certifique-se de que envolve os métodos que modificam a sua base de dados (por exemplo, `entity.persist()`) numa transação. Marcar um método do bean CDI `@Transactional` fará isso para você e tornará esse método um limite de transação. Recomendamos que o faça nos limites do ponto de entrada da aplicação, como os controladores do ponto de extremidade REST."

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:1001
#, fuzzy
msgid "Hibernate ORM batches changes you make to your entities and sends changes (it is called flush) at the end of the transaction or before a query.  This is usually a good thing as it is more efficient.  But if you want to check optimistic locking failures, do object validation right away or generally want to get immediate feedback, you can force the flush operation by calling `entity.flush()` or even use `entity.persistAndFlush()` to make it a single method call. This will allow you to catch any `PersistenceException` that could occur when Hibernate ORM sends those changes to the database.  Remember, this is less efficient so don't abuse it.  And your transaction still has to be committed."
msgstr "O Hibernate ORM agrupa as alterações que faz às suas entidades e envia as alterações (chama-se flush) no final da transação ou antes de uma consulta. Normalmente, isto é positivo, uma vez que é mais eficiente. Mas se quiser verificar falhas de bloqueio optimistas, fazer a validação de objectos imediatamente ou, de um modo geral, quiser obter feedback imediato, pode forçar a operação de descarga chamando `entity.flush()` ou mesmo utilizar `entity.persistAndFlush()` para a tornar uma única chamada de método. Isso permitirá que você capture qualquer `PersistenceException` que possa ocorrer quando o Hibernate ORM enviar essas alterações para a base de dados. Lembre-se, isso é menos eficiente, portanto não abuse. E sua transação ainda precisa ser confirmada."

#. type: delimited block =
#: upstream/_guides/hibernate-orm-panache.adoc:1003
#, fuzzy
msgid "Here is an example of the usage of the flush method to allow making a specific action in case of `PersistenceException`:"
msgstr "Eis um exemplo de utilização do método flush para permitir a realização de uma ação específica no caso de `PersistenceException`:"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1006
#, no-wrap
msgid "import jakarta.persistence.PersistenceException;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1019
#, no-wrap
msgid ""
"@Transactional\n"
"public void create(Parameter parameter){\n"
"    try {\n"
"        //Here I use the persistAndFlush() shorthand method on a Panache repository to persist to database then flush the changes.\n"
"        return parameterRepository.persistAndFlush(parameter);\n"
"    }\n"
"    catch(PersistenceException pe){\n"
"        LOG.error(\"Unable to create the parameter\", pe);\n"
"        //in case of error, I save it to disk\n"
"        diskPersister.save(parameter);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:1021
#, fuzzy, no-wrap
msgid "Lock management"
msgstr "Gestão de bloqueios"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1024
#, fuzzy
msgid "Panache provides direct support for database locking with your entity/repository, using `findById(Object, LockModeType)` or `find().withLock(LockModeType)`."
msgstr "A Panache fornece suporte direto para o bloqueio da base de dados com a sua entidade/repositório, utilizando `findById(Object, LockModeType)` ou `find().withLock(LockModeType)`."

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1026
#, fuzzy
msgid "The following examples are for the active record pattern, but the same can be used with repositories."
msgstr "Os exemplos seguintes referem-se ao padrão de registo ativo, mas o mesmo pode ser utilizado com repositórios."

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:1027
#, fuzzy, no-wrap
msgid "First: Locking using findById()."
msgstr "Primeiro: Bloqueio utilizando findById()."

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1034
#: upstream/_guides/hibernate-orm-panache.adoc:1055
#, no-wrap
msgid ""
"import jakarta.persistence.LockModeType;\n"
"import jakarta.transaction.Transactional;\n"
"import jakarta.ws.rs.GET;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1036
#: upstream/_guides/hibernate-orm-panache.adoc:1057
#, no-wrap
msgid "public class PersonEndpoint {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1044
#, no-wrap
msgid ""
"    @GET\n"
"    @Transactional\n"
"    public Person findByIdForUpdate(Long id){\n"
"        Person p = Person.findById(id, LockModeType.PESSIMISTIC_WRITE);\n"
"        //do something useful, the lock will be released when the transaction ends.\n"
"        return person;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1046
#: upstream/_guides/hibernate-orm-panache.adoc:1067
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:1048
#, fuzzy, no-wrap
msgid "Second: Locking in a find()."
msgstr "Segundo: Bloqueio de um find()."

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1065
#, no-wrap
msgid ""
"    @GET\n"
"    @Transactional\n"
"    public Person findByNameForUpdate(String name){\n"
"        Person p = Person.find(\"name\", name).withLock(LockModeType.PESSIMISTIC_WRITE).findOne();\n"
"        //do something useful, the lock will be released when the transaction ends.\n"
"        return person;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1070
#, fuzzy
msgid "Be careful that locks are released when the transaction ends, so the method that invokes the lock query must be annotated with the `@Transactional` annotation."
msgstr "Tenha em atenção que os bloqueios são libertados quando a transação termina, pelo que o método que invoca a consulta de bloqueio deve ser anotado com a anotação `@Transactional`."

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:1071
#, fuzzy, no-wrap
msgid "Custom IDs"
msgstr "IDs personalizados"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1075
#, fuzzy
msgid "IDs are often a touchy subject, and not everyone's up for letting them handled by the framework, once again we have you covered."
msgstr "Os IDs são muitas vezes um assunto delicado e nem toda a gente está disposta a deixá-los ser tratados pela estrutura."

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1078
#, fuzzy
msgid "You can specify your own ID strategy by extending `PanacheEntityBase` instead of `PanacheEntity`. Then you just declare whatever ID you want as a public field:"
msgstr "Pode especificar a sua própria estratégia de ID estendendo `PanacheEntityBase` em vez de `PanacheEntity`. Depois, basta declarar o ID que quiser como um campo público:"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1087
#, no-wrap
msgid ""
"import jakarta.persistence.Entity;\n"
"import jakarta.persistence.GeneratedValue;\n"
"import jakarta.persistence.GenerationType;\n"
"import jakarta.persistence.Id;\n"
"import jakarta.persistence.SequenceGenerator;\n"
"import io.quarkus.hibernate.orm.panache.PanacheEntityBase;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1090
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntityBase {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1099
#, no-wrap
msgid ""
"    @Id\n"
"    @SequenceGenerator(\n"
"            name = \"personSequence\",\n"
"            sequenceName = \"person_id_seq\",\n"
"            allocationSize = 1,\n"
"            initialValue = 4)\n"
"    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"personSequence\")\n"
"    public Integer id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1102
#, no-wrap
msgid ""
"    //...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1106
#, fuzzy
msgid "If you're using repositories, then you will want to extend `PanacheRepositoryBase` instead of `PanacheRepository` and specify your ID type as an extra type parameter:"
msgstr "Se estiver a utilizar repositórios, então vai querer estender `PanacheRepositoryBase` em vez de `PanacheRepository` e especificar o seu tipo de ID como um parâmetro de tipo extra:"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1111
#, no-wrap
msgid ""
"import io.quarkus.hibernate.orm.panache.PanacheRepositoryBase;\n"
"import jakarta.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1116
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheRepositoryBase<Person,Integer> {\n"
"    //...\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:1118
#, fuzzy, no-wrap
msgid "Mocking"
msgstr "Zombaria"

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:1120
#, fuzzy, no-wrap
msgid "Using the active record pattern"
msgstr "Utilizar o padrão de registo ativo"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1125
#, fuzzy
msgid "If you are using the active record pattern you cannot use Mockito directly as it does not support mocking static methods, but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static methods, including your own."
msgstr "Se estiver a utilizar o padrão de registo ativo, não pode utilizar diretamente o Mockito, uma vez que este não suporta a simulação de métodos estáticos, mas pode utilizar o módulo `quarkus-panache-mock`, que lhe permite utilizar o Mockito para simular todos os métodos estáticos fornecidos, incluindo os seus próprios métodos."

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1127
#, fuzzy
msgid "Add this dependency to your `pom.xml`:"
msgstr "Adicione esta dependência ao seu `pom.xml`:"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1135
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-panache-mock</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1139
#: upstream/_guides/hibernate-orm-panache.adoc:1295
#, fuzzy
msgid "Given this simple entity:"
msgstr "Dada esta entidade simples:"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1144
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntity {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1146
#, no-wrap
msgid "    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1151
#, no-wrap
msgid ""
"    public static List<Person> findOrdered() {\n"
"        return find(\"ORDER BY name\").list();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1154
#: upstream/_guides/hibernate-orm-panache.adoc:1322
#, fuzzy
msgid "You can write your mocking test like this:"
msgstr "Pode escrever o seu teste de simulação da seguinte forma:"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1164
#, no-wrap
msgid ""
"import io.quarkus.panache.mock.PanacheMock;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.junit.jupiter.api.Assertions;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.mockito.Mockito;\n"
"import jakarta.ws.rs.WebApplicationException;\n"
"import java.util.Collections;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1167
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheFunctionalityTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1171
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPanacheMocking() {\n"
"        PanacheMock.mock(Person.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1174
#, no-wrap
msgid ""
"        // Mocked classes always return a default value\n"
"        Assertions.assertEquals(0, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1178
#, no-wrap
msgid ""
"        // Now let's specify the return value\n"
"        Mockito.when(Person.count()).thenReturn(23L);\n"
"        Assertions.assertEquals(23, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1182
#, no-wrap
msgid ""
"        // Now let's change the return value\n"
"        Mockito.when(Person.count()).thenReturn(42L);\n"
"        Assertions.assertEquals(42, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1186
#, no-wrap
msgid ""
"        // Now let's call the original method\n"
"        Mockito.when(Person.count()).thenCallRealMethod();\n"
"        Assertions.assertEquals(0, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1189
#, no-wrap
msgid ""
"        // Check that we called it 4 times\n"
"        PanacheMock.verify(Person.class, Mockito.times(4)).count();// <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1195
#, no-wrap
msgid ""
"        // Mock only with specific parameters\n"
"        Person p = new Person();\n"
"        Mockito.when(Person.findById(12L)).thenReturn(p);\n"
"        Assertions.assertSame(p, Person.findById(12L));\n"
"        Assertions.assertNull(Person.findById(42L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1199
#, no-wrap
msgid ""
"        // Mock throwing\n"
"        Mockito.when(Person.findById(12L)).thenThrow(new WebApplicationException());\n"
"        Assertions.assertThrows(WebApplicationException.class, () -> Person.findById(12L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1203
#, no-wrap
msgid ""
"        // We can even mock your custom methods\n"
"        Mockito.when(Person.findOrdered()).thenReturn(Collections.emptyList());\n"
"        Assertions.assertTrue(Person.findOrdered().isEmpty());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1206
#, no-wrap
msgid ""
"        // Mocking a void method\n"
"        Person.voidMethod();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1215
#, no-wrap
msgid ""
"        // Make it throw\n"
"        PanacheMock.doThrow(new RuntimeException(\"Stef2\")).when(Person.class).voidMethod();\n"
"        try {\n"
"            Person.voidMethod();\n"
"            Assertions.fail();\n"
"        } catch (RuntimeException x) {\n"
"            Assertions.assertEquals(\"Stef2\", x.getMessage());\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1219
#, no-wrap
msgid ""
"        // Back to doNothing\n"
"        PanacheMock.doNothing().when(Person.class).voidMethod();\n"
"        Person.voidMethod();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1228
#, no-wrap
msgid ""
"        // Make it call the real method\n"
"        PanacheMock.doCallRealMethod().when(Person.class).voidMethod();\n"
"        try {\n"
"            Person.voidMethod();\n"
"            Assertions.fail();\n"
"        } catch (RuntimeException x) {\n"
"            Assertions.assertEquals(\"void\", x.getMessage());\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1235
#, no-wrap
msgid ""
"        PanacheMock.verify(Person.class).findOrdered();\n"
"        PanacheMock.verify(Person.class, Mockito.atLeast(4)).voidMethod();\n"
"        PanacheMock.verify(Person.class, Mockito.atLeastOnce()).findById(Mockito.any());\n"
"        PanacheMock.verifyNoMoreInteractions(Person.class);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1238
#, fuzzy
msgid "Be sure to call your `verify` and `do*` methods on `PanacheMock` rather than `Mockito`, otherwise you won't know what mock object to pass."
msgstr "Certifique-se de que chama os seus métodos `verify` e `do*` em `PanacheMock` em vez de `Mockito`, caso contrário não saberá qual o objeto de simulação a passar."

#. type: Title ====
#: upstream/_guides/hibernate-orm-panache.adoc:1239
#, fuzzy, no-wrap
msgid "Mocking `EntityManager`, `Session` and entity instance methods"
msgstr "Mocking `EntityManager`, `Session` e métodos de instância de entidade"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1242
#, fuzzy
msgid "If you need to mock entity instance methods, such as `persist()` you can do it by mocking the Hibernate ORM `Session` object:"
msgstr "Se precisar de simular métodos de instância de entidade, como `persist()`, pode fazê-lo simulando o objeto Hibernate ORM `Session`:"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1253
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.junit.mockito.InjectMock;\n"
"import org.hibernate.Session;\n"
"import org.hibernate.query.Query;\n"
"import org.junit.jupiter.api.Assertions;\n"
"import org.junit.jupiter.api.BeforeEach;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.mockito.Mockito;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1256
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheMockingTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1259
#, no-wrap
msgid ""
"    @InjectMock\n"
"    Session session;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1267
#, no-wrap
msgid ""
"    @BeforeEach\n"
"    public void setup() {\n"
"        Query mockQuery = Mockito.mock(Query.class);\n"
"        Mockito.doNothing().when(session).persist(Mockito.any());\n"
"        Mockito.when(session.createQuery(Mockito.anyString())).thenReturn(mockQuery);\n"
"        Mockito.when(mockQuery.getSingleResult()).thenReturn(0l);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1274
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPanacheMocking() {\n"
"        Person p = new Person();\n"
"        // mocked via EntityManager mocking\n"
"        p.persist();\n"
"        Assertions.assertNull(p.id);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1278
#, no-wrap
msgid ""
"        Mockito.verify(session, Mockito.times(1)).persist(Mockito.any());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/hibernate-orm-panache.adoc:1280
#, fuzzy, no-wrap
msgid "Using the repository pattern"
msgstr "Utilizar o padrão de repositório"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1284
#, fuzzy
msgid "If you are using the repository pattern you can use Mockito directly, using the `quarkus-junit5-mockito` module, which makes mocking beans much easier:"
msgstr "Se estiver a utilizar o padrão de repositório, pode utilizar o Mockito diretamente, utilizando o módulo `quarkus-junit5-mockito`, o que torna a simulação de beans muito mais fácil:"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1292
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5-mockito</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1300
#, no-wrap
msgid ""
"@Entity\n"
"public class Person {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1304
#, no-wrap
msgid ""
"    @Id\n"
"    @GeneratedValue\n"
"    public Long id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1307
#, no-wrap
msgid ""
"    public String name;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1310
#, fuzzy
msgid "And this repository:"
msgstr "E este repositório:"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1319
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheRepository<Person> {\n"
"    public List<Person> findOrdered() {\n"
"        return find(\"ORDER BY name\").list();\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1332
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.junit.mockito.InjectMock;\n"
"import org.junit.jupiter.api.Assertions;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.mockito.Mockito;\n"
"import jakarta.ws.rs.WebApplicationException;\n"
"import java.util.Collections;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1337
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheFunctionalityTest {\n"
"    @InjectMock\n"
"    PersonRepository personRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1342
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPanacheRepositoryMocking() throws Throwable {\n"
"        // Mocked classes always return a default value\n"
"        Assertions.assertEquals(0, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1346
#, no-wrap
msgid ""
"        // Now let's specify the return value\n"
"        Mockito.when(personRepository.count()).thenReturn(23L);\n"
"        Assertions.assertEquals(23, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1350
#, no-wrap
msgid ""
"        // Now let's change the return value\n"
"        Mockito.when(personRepository.count()).thenReturn(42L);\n"
"        Assertions.assertEquals(42, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1354
#, no-wrap
msgid ""
"        // Now let's call the original method\n"
"        Mockito.when(personRepository.count()).thenCallRealMethod();\n"
"        Assertions.assertEquals(0, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1357
#, no-wrap
msgid ""
"        // Check that we called it 4 times\n"
"        Mockito.verify(personRepository, Mockito.times(4)).count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1363
#, no-wrap
msgid ""
"        // Mock only with specific parameters\n"
"        Person p = new Person();\n"
"        Mockito.when(personRepository.findById(12L)).thenReturn(p);\n"
"        Assertions.assertSame(p, personRepository.findById(12L));\n"
"        Assertions.assertNull(personRepository.findById(42L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1367
#, no-wrap
msgid ""
"        // Mock throwing\n"
"        Mockito.when(personRepository.findById(12L)).thenThrow(new WebApplicationException());\n"
"        Assertions.assertThrows(WebApplicationException.class, () -> personRepository.findById(12L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1370
#, no-wrap
msgid ""
"        Mockito.when(personRepository.findOrdered()).thenReturn(Collections.emptyList());\n"
"        Assertions.assertTrue(personRepository.findOrdered().isEmpty());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1377
#, no-wrap
msgid ""
"        // We can even mock your custom methods\n"
"        Mockito.verify(personRepository).findOrdered();\n"
"        Mockito.verify(personRepository, Mockito.atLeastOnce()).findById(Mockito.any());\n"
"        Mockito.verifyNoMoreInteractions(personRepository);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:1379
#, fuzzy, no-wrap
msgid "How and why we simplify Hibernate ORM mappings"
msgstr "Como e porquê simplificamos os mapeamentos ORM do Hibernate"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1383
#, fuzzy
msgid "When it comes to writing Hibernate ORM entities, there are a number of annoying things that users have grown used to reluctantly deal with, such as:"
msgstr "Quando se trata de escrever entidades ORM do Hibernate, há uma série de coisas irritantes com as quais os utilizadores se habituaram a lidar com relutância, tais como:"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1386
#, fuzzy
msgid "Duplicating ID logic: most entities need an ID, most people don't care how it is set, because it is not really relevant to your model."
msgstr "Duplicação da lógica de ID: a maioria das entidades precisa de um ID, a maioria das pessoas não se importa com a forma como é definido, porque não é realmente relevante para o seu modelo."

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1392
#, fuzzy
msgid "Traditional EE patterns advise to split entity definition (the model) from the operations you can do on them (DAOs, Repositories), but really that requires a split between the state and its operations even though we would never do something like that for regular objects in the Object-Oriented architecture, where state and methods are in the same class. Moreover, this requires two classes per entity, and requires injection of the DAO or Repository where you need to do entity operations, which breaks your edit flow and requires you to get out of the code you're writing to set up an injection point before coming back to use it."
msgstr "Os padrões tradicionais de EE aconselham a separar a definição de entidades (o modelo) das operações que se podem fazer sobre elas (DAOs, Repositórios), mas na verdade isso requer uma separação entre o estado e as suas operações, apesar de nunca fazermos algo assim para objectos normais na arquitetura orientada a objectos, onde o estado e os métodos estão na mesma classe. Além disso, isto requer duas classes por entidade, e requer a injeção do DAO ou Repositório onde precisa de fazer operações de entidade, o que quebra o seu fluxo de edição e requer que saia do código que está a escrever para definir um ponto de injeção antes de voltar a usá-lo."

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1394
#, fuzzy
msgid "Hibernate queries are super powerful, but overly verbose for common operations, requiring you to write queries even when you don't need all the parts."
msgstr "As consultas do Hibernate são muito poderosas, mas demasiado detalhadas para operações comuns, exigindo que escreva consultas mesmo quando não precisa de todas as partes."

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1396
#, fuzzy
msgid "Hibernate is very general-purpose, but does not make it trivial to do trivial operations that make up 90% of our model usage."
msgstr "O Hibernate tem um objetivo muito geral, mas não facilita a realização de operações triviais que constituem 90% da utilização do nosso modelo."

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1398
#, fuzzy
msgid "With Panache, we took an opinionated approach to tackle all these problems:"
msgstr "Com a Panache, adoptámos uma abordagem de opinião para resolver todos estes problemas:"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1401
#, fuzzy
msgid "Make your entities extend `PanacheEntity`: it has an ID field that is auto-generated. If you require a custom ID strategy, you can extend `PanacheEntityBase` instead and handle the ID yourself."
msgstr "Faça as suas entidades estenderem `PanacheEntity`: tem um campo de ID que é gerado automaticamente. Se necessitar de uma estratégia de ID personalizada, pode estender `PanacheEntityBase` e tratar do ID você mesmo."

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1404
#, fuzzy
msgid "Use public fields. Get rid of dumb getter and setters. Hibernate ORM w/o Panache also doesn't require you to use getters and setters, but Panache will additionally generate all getters and setters that are missing, and rewrite every access to these fields to use the accessor methods. This way you can still write _useful_ accessors when you need them, which will be used even though your entity users still use field accesses. This implies that from the Hibernate perspective you're using accessors via getters and setters even while it looks like field accessors."
msgstr "Utilizar campos públicos. Livrar-se de getters e setters idiotas. O Hibernate ORM sem Panache também não exige que você use getters e setters, mas o Panache gerará adicionalmente todos os getters e setters que estiverem faltando e reescreverá todos os acessos a esses campos para usar os métodos de acesso. Desta forma, pode continuar a escrever acessores _úteis_ quando precisar deles, que serão utilizados mesmo que os utilizadores da sua entidade continuem a utilizar os acessos aos campos. Isto implica que, na perspetiva do Hibernate, está a utilizar os acessores através de getters e setters, mesmo que pareçam ser acessores de campo."

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1407
#, fuzzy
msgid "With the active record pattern: put all your entity logic in static methods in your entity class and don't create DAOs.  Your entity superclass comes with lots of super useful static methods, and you can add your own in your entity class.  Users can just start using your entity `Person` by typing `Person.` and getting completion for all the operations in a single place."
msgstr "Com o padrão de registo ativo: coloque toda a sua lógica de entidade em métodos estáticos na sua classe de entidade e não crie DAOs. A sua superclasse de entidade vem com muitos métodos estáticos super úteis, e você pode adicionar os seus próprios métodos na sua classe de entidade. Os usuários podem começar a usar sua entidade `Person` digitando `Person.` e obtendo a conclusão de todas as operações em um único lugar."

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1410
#, fuzzy
msgid "Don't write parts of the query that you don't need: write `Person.find(\"order by name\")` or `Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive)` or even better `Person.find(\"name\", \"stef\")`."
msgstr "Não escreva partes da consulta de que não precisa: escreva `Person.find(\"order by name\")` ou `Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive)` ou, melhor ainda, `Person.find(\"name\", \"stef\")`."

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1412
#, fuzzy
msgid "That's all there is to it: with Panache, Hibernate ORM has never looked so trim and neat."
msgstr "É tudo: com o Panache, o Hibernate ORM nunca teve um aspeto tão elegante e limpo."

#. type: Title ==
#: upstream/_guides/hibernate-orm-panache.adoc:1413
#, fuzzy, no-wrap
msgid "Defining entities in external projects or jars"
msgstr "Definição de entidades em projectos externos ou jars"

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1416
#, fuzzy
msgid "Hibernate ORM with Panache relies on compile-time bytecode enhancements to your entities."
msgstr "O Hibernate ORM com Panache baseia-se em melhorias de bytecode em tempo de compilação para as suas entidades."

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1422
#, fuzzy
msgid "It attempts to identify archives with Panache entities (and consumers of Panache entities)  by the presence of the marker file `META-INF/panache-archive.marker`. Panache includes an annotation processor that will automatically create this file in archives that depend on Panache (even indirectly). If you have disabled annotation processors you may need to create this file manually in some cases."
msgstr "Tenta identificar arquivos com entidades Panache (e consumidores de entidades Panache) pela presença do ficheiro marcador `META-INF/panache-archive.marker`. O Panache inclui um processador de anotações que criará automaticamente este ficheiro nos arquivos que dependem do Panache (mesmo indiretamente). Se tiver desativado os processadores de anotações, poderá ter de criar este ficheiro manualmente em alguns casos."

#. type: Plain text
#: upstream/_guides/hibernate-orm-panache.adoc:1426
#, fuzzy
msgid "If you include the jpa-modelgen annotation processor this will exclude the Panache annotation processor by default. If you do this you should either create the marker file yourself, or add the `quarkus-panache-common` as well, as shown below:"
msgstr "Se incluir o processador de anotações jpa-modelgen, este excluirá o processador de anotações Panache por defeito. Se o fizer, deve criar o ficheiro de marcadores ou adicionar também o `quarkus-panache-common`, como se mostra abaixo:"

#. type: delimited block -
#: upstream/_guides/hibernate-orm-panache.adoc:1447
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-compiler-plugin</artifactId>\n"
"    <version>${compiler-plugin.version}</version>\n"
"    <configuration>\n"
"      <annotationProcessorPaths>\n"
"        <annotationProcessorPath>\n"
"          <groupId>org.hibernate</groupId>\n"
"          <artifactId>hibernate-jpamodelgen</artifactId>\n"
"          <version>${hibernate.version}</version>\n"
"        </annotationProcessorPath>\n"
"        <annotationProcessorPath>\n"
"          <groupId>io.quarkus</groupId>\n"
"          <artifactId>quarkus-panache-common</artifactId>\n"
"          <version>${quarkus.platform.version}</version>\n"
"        </annotationProcessorPath>\n"
"      </annotationProcessorPaths>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""
