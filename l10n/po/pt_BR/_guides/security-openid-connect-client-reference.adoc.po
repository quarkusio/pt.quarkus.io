# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-29 08:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/security-openid-connect-client-reference.adoc:6
#, fuzzy, no-wrap
msgid "OpenID Connect (OIDC) and OAuth2 Client and Filters Reference Guide"
msgstr "Guia de referência para clientes e filtros OpenID Connect (OIDC) e OAuth2"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:13
#, fuzzy
msgid "This reference guide explains how to use:"
msgstr "Este guia de referência explica como utilizar:"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:15
#, fuzzy
msgid "`quarkus-oidc-client`, `quarkus-oidc-client-reactive-filter` and `quarkus-oidc-client-filter` extensions to acquire and refresh access tokens from OpenID Connect and OAuth 2.0 compliant Authorization Servers such as link:https://www.keycloak.org[Keycloak]"
msgstr "`quarkus-oidc-client` `quarkus-oidc-client-reactive-filter` e extensões para adquirir e atualizar tokens de acesso a partir de OpenID Connect e servidores de autorização compatíveis com OAuth 2.0, como `quarkus-oidc-client-filter`  link:https://www.keycloak.org[Keycloak]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:16
#, fuzzy
msgid "`quarkus-oidc-token-propagation-reactive` and `quarkus-oidc-token-propagation` extensions to propagate the current `Bearer` or `Authorization Code Flow` access tokens"
msgstr "`quarkus-oidc-token-propagation-reactive` e `quarkus-oidc-token-propagation` extensões para propagar os actuais tokens de acesso `Bearer` ou `Authorization Code Flow`"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:18
#, fuzzy
msgid "The access tokens managed by these extensions can be used as HTTP Authorization Bearer tokens to access the remote services."
msgstr "Os tokens de acesso geridos por estas extensões podem ser utilizados como tokens de portador de autorização HTTP para aceder aos serviços remotos."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:20
#, fuzzy
msgid "Please also see xref:security-openid-connect-client.adoc[OpenID Connect Client and Token Propagation Quickstart]."
msgstr "Consulte também  link:security-openid-connect-client.html[Início Rápido do Cliente OpenID Connect e Propagação de Token]."

#. type: Title ==
#: upstream/_guides/security-openid-connect-client-reference.adoc:21
#, fuzzy, no-wrap
msgid "OidcClient"
msgstr "OidcCliente"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:24
#, fuzzy
msgid "Add the following dependency:"
msgstr "Adicione a seguinte dependência:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:31
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:34
#, fuzzy
msgid "`quarkus-oidc-client` extension provides a reactive `io.quarkus.oidc.client.OidcClient` which can be used to acquire and refresh tokens using SmallRye Mutiny `Uni` and `Vert.x WebClient`."
msgstr "`quarkus-oidc-client` A extensão fornece um `io.quarkus.oidc.client.OidcClient` reativo que pode ser utilizado para adquirir e atualizar fichas utilizando SmallRye Mutiny `Uni` e `Vert.x WebClient`."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:36
#, fuzzy
msgid "`OidcClient` is initialized at the build time with the IDP token endpoint URL which can be auto-discovered or manually configured and uses this endpoint to acquire access tokens using the token grants such as `client_credentials` or `password` and refresh the tokens using a `refresh_token` grant."
msgstr "`OidcClient` é inicializado no momento da construção com o URL do ponto de extremidade do token IDP, que pode ser descoberto automaticamente ou configurado manualmente, e usa esse ponto de extremidade para adquirir tokens de acesso usando as concessões de token, como `client_credentials` ou `password`, e atualizar os tokens usando uma concessão `refresh_token`."

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:37
#, fuzzy, no-wrap
msgid "Token Endpoint Configuration"
msgstr "Configuração do ponto final do Token"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:40
#, fuzzy
msgid "By default, the token endpoint address is discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc-client.auth-server-url`."
msgstr "Por defeito, o endereço do ponto final do token é descoberto adicionando um caminho `/.well-known/openid-configuration` ao `quarkus.oidc-client.auth-server-url` configurado."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:42
#, fuzzy
msgid "For example, given this Keycloak URL:"
msgstr "Por exemplo, dado este URL do Keycloak:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:46
#, no-wrap
msgid "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:49
#, fuzzy
msgid "`OidcClient` will discover that the token endpoint URL is `http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens`."
msgstr "`OidcClient` descobrirá que o URL do ponto de extremidade do token é `&lt;a href=\"http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens\" class=\"bare\"&gt;http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens&lt;/a&gt;`."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:51
#, fuzzy
msgid "Alternatively, if the discovery endpoint is not available or you would like to save on the discovery endpoint round-trip, you can disable the discovery and configure the token endpoint address with a relative path value, for example:"
msgstr "Em alternativa, se o ponto final de descoberta não estiver disponível ou se pretender poupar na viagem de ida e volta do ponto final de descoberta, pode desativar a descoberta e configurar o endereço do ponto final do token com um valor de caminho relativo, por exemplo:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:58
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
"quarkus.oidc-client.discovery-enabled=false\n"
"# Token endpoint: http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens\n"
"quarkus.oidc-client.token-path=/protocol/openid-connect/tokens\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:61
#, fuzzy
msgid "A more compact way to configure the token endpoint URL without the discovery is to set `quarkus.oidc-client.token-path` to an absolute URL:"
msgstr "Uma forma mais compacta de configurar o URL do ponto final do token sem a descoberta é definir `quarkus.oidc-client.token-path` como um URL absoluto:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:65
#, no-wrap
msgid "quarkus.oidc-client.token-path=http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:68
#, fuzzy
msgid "Setting 'quarkus.oidc-client.auth-server-url' and 'quarkus.oidc-client.discovery-enabled' is not required in this case."
msgstr "A definição de 'quarkus.oidc-client.auth-server-url' e 'quarkus.oidc-client.discovery-enabled' não é necessária neste caso."

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:69
#, fuzzy, no-wrap
msgid "Supported Token Grants"
msgstr "Subvenções Token apoiadas"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:72
#, fuzzy
msgid "The main token grants which `OidcClient` can use to acquire the tokens are the `client_credentials` (default) and `password` grants."
msgstr "As principais concessões de token que `OidcClient` pode utilizar para adquirir os tokens são as concessões `client_credentials` (predefinição) e `password`."

#. type: Title ====
#: upstream/_guides/security-openid-connect-client-reference.adoc:73
#, fuzzy, no-wrap
msgid "Client Credentials Grant"
msgstr "Concessão de credenciais de cliente"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:76
#, fuzzy
msgid "Here is how `OidcClient` can be configured to use the `client_credentials` grant:"
msgstr "Eis como `OidcClient` pode ser configurado para utilizar a concessão `client_credentials`:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:82
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:85
#, fuzzy
msgid "The `client_credentials` grant allows to set extra parameters to the token request via `quarkus.oidc-client.grant-options.client.<param-name>=<value>`. Here is how to set the intended token recipient via the `audience` parameter:"
msgstr "A concessão `client_credentials` permite definir parâmetros extra para o pedido de token através de `quarkus.oidc-client.grant-options.client.&amp;lt;param-name&amp;gt;=&amp;lt;value&amp;gt;`. Eis como definir o destinatário do token pretendido através do parâmetro `audience`:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:94
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"# 'client' is a shortcut for `client_credentials`\n"
"quarkus.oidc-client.grant.type=client\n"
"quarkus.oidc-client.grant-options.client.audience=https://example.com/api\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/security-openid-connect-client-reference.adoc:96
#, fuzzy, no-wrap
msgid "Password Grant"
msgstr "Concessão de palavra-passe"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:99
#, fuzzy
msgid "Here is how `OidcClient` can be configured to use the `password` grant:"
msgstr "Eis como `OidcClient` pode ser configurado para utilizar a concessão `password`:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:108
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=password\n"
"quarkus.oidc-client.grant-options.password.username=alice\n"
"quarkus.oidc-client.grant-options.password.password=alice\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:111
#, fuzzy
msgid "It can be further customized using a `quarkus.oidc-client.grant-options.password` configuration prefix, similarly to how the client credentials grant can be customized."
msgstr "Pode ser ainda mais personalizado utilizando um prefixo de configuração `quarkus.oidc-client.grant-options.password`, de forma semelhante à forma como a concessão de credenciais de cliente pode ser personalizada."

#. type: Title ====
#: upstream/_guides/security-openid-connect-client-reference.adoc:112
#, fuzzy, no-wrap
msgid "Other Grants"
msgstr "Outras subvenções"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:115
#, fuzzy
msgid "`OidcClient` can also help with acquiring the tokens using the grants which require some extra input parameters which can not be captured in the configuration. These grants are `refresh_token` (with the external refresh token), `authorization_code`, as well as two grants which can be used to exchange the current access token, `urn:ietf:params:oauth:grant-type:token-exchange` and `urn:ietf:params:oauth:grant-type:jwt-bearer`."
msgstr "`OidcClient` também pode ajudar a adquirir os tokens utilizando as concessões que requerem alguns parâmetros de entrada extra que não podem ser capturados na configuração. Estas concessões são `refresh_token` (com o token de atualização externo), `authorization_code`, bem como duas concessões que podem ser utilizadas para trocar o token de acesso atual, `urn:ietf:params:oauth:grant-type:token-exchange` e `urn:ietf:params:oauth:grant-type:jwt-bearer`."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:117
#, fuzzy
msgid "Using the `refresh_token` grant which uses an out-of-band refresh token to acquire a new set of tokens will be required if the existing refresh token has been posted to the current Quarkus endpoint for it to acquire the access token. In this case `OidcClient` needs to be configured as follows:"
msgstr "A utilização da concessão `refresh_token`, que utiliza um token de atualização fora de banda para adquirir um novo conjunto de tokens, será necessária se o token de atualização existente tiver sido colocado no ponto de extremidade Quarkus atual para que este adquira o token de acesso. Neste caso, `OidcClient` precisa de ser configurado da seguinte forma:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:124
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=refresh\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:127
#, fuzzy
msgid "and then you can use `OidcClient.refreshTokens` method with a provided refresh token to get the access token."
msgstr "e depois pode utilizar o método `OidcClient.refreshTokens` com um token de atualização fornecido para obter o token de acesso."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:129
#, fuzzy
msgid "Using the `urn:ietf:params:oauth:grant-type:token-exchange` or `urn:ietf:params:oauth:grant-type:jwt-bearer` grants may be required if you are building a complex microservices application and would like to avoid the same `Bearer` token be propagated to and used by more than one service. Please see xref:token-propagation-reactive[Token Propagation in MicroProfile RestClient Reactive filter] and xref:token-propagation[Token Propagation in MicroProfile RestClient filter] for more details."
msgstr "O uso das concessões `urn:ietf:params:oauth:grant-type:token-exchange` ou `urn:ietf:params:oauth:grant-type:jwt-bearer` pode ser necessário se você estiver criando um aplicativo de microsserviços complexo e quiser evitar que o mesmo token `Bearer` seja propagado e usado por mais de um serviço. Consulte  link:#token-propagation-reactive[Propagação de token no filtro MicroProfile RestClient Reactive] e  link:#token-propagation[Propagação de token no filtro MicroProfile RestClient] para obter mais detalhes."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:131
#, fuzzy
msgid "Using `OidcClient` to support the `authorization code` grant might be required if for some reason you cannot use the xref:security-oidc-code-flow-authentication.adoc[Quarkus OIDC extension] to support Authorization Code Flow. If there is a very good reason for you to implement Authorization Code Flow then you can configure `OidcClient` as follows:"
msgstr "A utilização de `OidcClient` para suportar a concessão `authorization code` pode ser necessária se, por alguma razão, não puder utilizar a  link:security-oidc-code-flow-authentication.html[extensão Quarkus OIDC] para suportar o Fluxo de Códigos de Autorização. Se houver uma boa razão para implementar o Fluxo de Códigos de Autorização, pode configurar `OidcClient` da seguinte forma:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:138
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=code\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:141
#, fuzzy
msgid "and then you can use `OidcClient.accessTokens` method accepting a Map of extra properties and pass the current `code` and `redirect_uri` parameters to exchange the authorization code for the tokens."
msgstr "e, em seguida, pode utilizar o método `OidcClient.accessTokens` que aceita um mapa de propriedades adicionais e passa os parâmetros actuais `code` e `redirect_uri` para trocar o código de autorização pelos tokens."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:143
#, fuzzy
msgid "`OidcClient` also supports the `urn:openid:params:grant-type:ciba` grant:"
msgstr "`OidcClient` também apoia a subvenção `urn:openid:params:grant-type:ciba`:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:150
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=ciba\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:153
#, fuzzy
msgid "and then you can use `OidcClient.accessTokens` method accepting a Map of extra properties and pass `auth_req_id` parameter to exchange the authorization code for the tokens."
msgstr "e depois pode utilizar o método `OidcClient.accessTokens` que aceita um mapa de propriedades extra e passa o parâmetro `auth_req_id` para trocar o código de autorização pelos tokens."

#. type: Title ====
#: upstream/_guides/security-openid-connect-client-reference.adoc:154
#, fuzzy, no-wrap
msgid "Grant scopes"
msgstr "Objectivos de subvenção"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:158
#, fuzzy
msgid "You may need to request that a specific set of scopes is associated with an issued access token.  Use a dedicated `quarkus.oidc-client.scopes` list property, for example: `quarkus.oidc-client.scopes=email,phone`"
msgstr "Poderá ser necessário solicitar que um conjunto específico de âmbitos seja associado a um token de acesso emitido. Utilize uma propriedade de lista `quarkus.oidc-client.scopes` dedicada, por exemplo: `quarkus.oidc-client.scopes=email,phone`"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:159
#, fuzzy, no-wrap
msgid "Use OidcClient directly"
msgstr "Utilizar diretamente o OidcClient"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:162
#, fuzzy
msgid "One can use `OidcClient` directly as follows:"
msgstr "É possível utilizar `OidcClient` diretamente da seguinte forma:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:168
#: upstream/_guides/security-openid-connect-client-reference.adoc:208
#, no-wrap
msgid ""
"import jakarta.inject.PostConstruct;\n"
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:171
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.Tokens;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:174
#: upstream/_guides/security-openid-connect-client-reference.adoc:213
#, no-wrap
msgid ""
"@Path(\"/service\")\n"
"public class OidcClientResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:177
#, no-wrap
msgid ""
"    @Inject\n"
"    OidcClient client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:179
#, no-wrap
msgid "    volatile Tokens currentTokens;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:184
#, no-wrap
msgid ""
"    @PostConstruct\n"
"    public void init() {\n"
"        currentTokens = client.getTokens().await().indefinitely();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:187
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:197
#, no-wrap
msgid ""
"        Tokens tokens = currentTokens;\n"
"        if (tokens.isAccessTokenExpired()) {\n"
"            // Add @Blocking method annotation if this code is used with Reactive RestClient\n"
"            tokens = client.refreshTokens(tokens.getRefreshToken()).await().indefinitely();\n"
"            currentTokens = tokens;\n"
"        }\n"
"        // Use tokens.getAccessToken() to configure MP RestClient Authorization header/etc\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:199
#, fuzzy, no-wrap
msgid "Inject Tokens"
msgstr "Injetar Tokens"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:202
#, fuzzy
msgid "You can inject `Tokens` which uses `OidcClient` internally. `Tokens` can be used to acquire the access tokens and refresh them if necessary:"
msgstr "Pode injetar `Tokens` que utiliza `OidcClient` internamente. `Tokens` pode ser utilizado para adquirir os tokens de acesso e actualizá-los, se necessário:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:210
#: upstream/_guides/security-openid-connect-client-reference.adoc:539
#, no-wrap
msgid "import io.quarkus.oidc.client.Tokens;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:215
#, no-wrap
msgid "    @Inject Tokens tokens;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:223
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        //  Get the access token which may have been refreshed.\n"
"        String accessToken = tokens.getAccessToken();\n"
"        // Use the access token to configure MP RestClient Authorization header/etc\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:226
#, fuzzy, no-wrap
msgid "Use OidcClients"
msgstr "Utilizar OidcClients"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:229
#, fuzzy
msgid "`io.quarkus.oidc.client.OidcClients` is a container of ``OidcClient``s - it includes a default `OidcClient` and named clients which can be configured like this:"
msgstr "`io.quarkus.oidc.client.OidcClients` é um contentor de `OidcClient`s - inclui um `OidcClient` predefinido e clientes nomeados que podem ser configurados desta forma:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:233
#, no-wrap
msgid "quarkus.oidc-client.client-enabled=false\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:237
#, no-wrap
msgid ""
"quarkus.oidc-client.jwt-secret.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.jwt-secret.client-id=quarkus-app\n"
"quarkus.oidc-client.jwt-secret.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:240
#, fuzzy
msgid "Note in this case the default client is disabled with a `client-enabled=false` property. The `jwt-secret` client can be accessed like this:"
msgstr "Note-se que, neste caso, o cliente predefinido está desativado com uma propriedade `client-enabled=false`. O cliente `jwt-secret` pode ser acedido da seguinte forma:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:246
#: upstream/_guides/security-openid-connect-client-reference.adoc:273
#: upstream/_guides/security-openid-connect-client-reference.adoc:304
#: upstream/_guides/security-openid-connect-client-reference.adoc:342
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:249
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.OidcClients;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:252
#: upstream/_guides/security-openid-connect-client-reference.adoc:280
#: upstream/_guides/security-openid-connect-client-reference.adoc:313
#: upstream/_guides/security-openid-connect-client-reference.adoc:345
#, no-wrap
msgid ""
"@Path(\"/clients\")\n"
"public class OidcClientResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:255
#: upstream/_guides/security-openid-connect-client-reference.adoc:316
#, no-wrap
msgid ""
"    @Inject\n"
"    OidcClients clients;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:262
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        OidcClient client = clients.getClient(\"jwt-secret\");\n"
"        // use this client to get the token\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-openid-connect-client-reference.adoc:267
#, fuzzy
msgid "If you also use xref:security-openid-connect-multitenancy.adoc[OIDC multitenancy] and each OIDC tenant has its own associated `OidcClient` then you can use a Vert.x `RoutingContext` `tenantId` attribute, for example:"
msgstr "Se também utilizar o OIDC  link:security-openid-connect-multitenancy.html[multitenancy] e cada inquilino OIDC tiver o seu próprio `OidcClient` associado, pode utilizar um atributo Vert.x `RoutingContext` `tenantId` , por exemplo:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:277
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.OidcClients;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:285
#, no-wrap
msgid ""
"    @Inject\n"
"    OidcClients clients;\n"
"    @Inject\n"
"    RoutingContext context;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:294
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        String tenantId = context.get(\"tenantId\");\n"
"        // named OIDC tenant and client configurations use the same key:\n"
"        OidcClient client = clients.getClient(tenantId);\n"
"        // use this client to get the token\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-openid-connect-client-reference.adoc:298
#, fuzzy
msgid "If you need you can also create new `OidcClient` programmatically like this:"
msgstr "Se necessário, também pode criar um novo `OidcClient` programaticamente, da seguinte forma:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:308
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.OidcClients;\n"
"import io.quarkus.oidc.client.OidcClientConfig;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:310
#, no-wrap
msgid "import io.smallrye.mutiny.Uni;\n"
msgstr "import io.smallrye.mutiny.Uni;\n"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:328
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        OidcClientConfig cfg = new OidcClientConfig();\n"
"        cfg.setId(\"myclient\");\n"
"        cfg.setAuthServerUrl(\"http://localhost:8081/auth/realms/quarkus/\");\n"
"        cfg.setClientId(\"quarkus\");\n"
"        cfg.getCredentials().setSecret(\"secret\");\n"
"        Uni<OidcClient> client = clients.newClient(cfg);\n"
"        // use this client to get the token\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:331
#, fuzzy, no-wrap
msgid "Inject named OidcClient and Tokens"
msgstr "Injetar o nome OidcClient e os Tokens"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:334
#, fuzzy
msgid "In case of multiple configured ``OidcClient``s you can specify the `OidcClient` injection target by the extra qualifier `@NamedOidcClient` instead of working with `OidcClients`:"
msgstr "No caso de múltiplos `OidcClient`s configurados, pode especificar o alvo de injeção `OidcClient` através do qualificador extra `@NamedOidcClient` em vez de trabalhar com `OidcClients`:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:338
#, no-wrap
msgid "package io.quarkus.oidc.client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:349
#, no-wrap
msgid ""
"    @Inject\n"
"    @NamedOidcClient(\"jwt-secret\")\n"
"    OidcClient client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:355
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        // use client to get the token\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:358
#, fuzzy
msgid "The same qualifier can be used to specify the `OidcClient` used for a `Tokens` injection:"
msgstr "O mesmo qualificador pode ser utilizado para especificar o `OidcClient` utilizado para uma injeção `Tokens`:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:365
#, no-wrap
msgid ""
"@Provider\n"
"@Priority(Priorities.AUTHENTICATION)\n"
"@RequestScoped\n"
"public class OidcClientRequestCustomFilter implements ClientRequestFilter {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:369
#, no-wrap
msgid ""
"    @Inject\n"
"    @NamedOidcClient(\"jwt-secret\")\n"
"    Tokens tokens;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:375
#: upstream/_guides/security-openid-connect-client-reference.adoc:552
#, no-wrap
msgid ""
"    @Override\n"
"    public void filter(ClientRequestContext requestContext) throws IOException {\n"
"        requestContext.getHeaders().add(HttpHeaders.AUTHORIZATION, \"Bearer \" + tokens.getAccessToken());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:378
#, fuzzy, no-wrap
msgid "Use OidcClient in RestClient Reactive ClientFilter"
msgstr "Usar o OidcClient no RestClient Reactive ClientFilter"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:381
#: upstream/_guides/security-openid-connect-client-reference.adoc:461
#: upstream/_guides/security-openid-connect-client-reference.adoc:1109
#, fuzzy
msgid "Add the following Maven Dependency:"
msgstr "Adicione a seguinte dependência Maven:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:388
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc-client-reactive-filter</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:391
#: upstream/_guides/security-openid-connect-client-reference.adoc:471
#, fuzzy
msgid "Note it will also bring `io.quarkus:quarkus-oidc-client`."
msgstr "Note-se que também irá trazer `io.quarkus:quarkus-oidc-client`."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:393
#, fuzzy
msgid "`quarkus-oidc-client-reactive-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestReactiveFilter`."
msgstr "`quarkus-oidc-client-reactive-filter` A extensão fornece `io.quarkus.oidc.client.filter.OidcClientRequestReactiveFilter`."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:395
#, fuzzy
msgid "It works similarly to the way `OidcClientRequestFilter` does (see xref:oidc-client-filter[Use OidcClient in MicroProfile RestClient client filter]) - it uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization` `Bearer` scheme value. The difference is that it works with xref:rest-client-reactive.adoc[Reactive RestClient] and implements a non-blocking client filter which does not block the current IO thread when acquiring or refreshing the tokens."
msgstr "Funciona de forma semelhante à forma como `OidcClientRequestFilter` faz (ver  link:#oidc-client-filter[Use OidcClient in MicroProfile RestClient client filter]) - usa `OidcClient` para adquirir o token de acesso, actualizá-lo se necessário, e defini-lo como um valor de esquema HTTP `Authorization` `Bearer` . A diferença é que ele funciona com o  link:rest-client-reactive.html[RestClient reativo] e implementa um filtro de cliente sem bloqueio que não bloqueia a thread IO atual ao adquirir ou atualizar os tokens."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:397
#, fuzzy
msgid "`OidcClientRequestReactiveFilter` delays an initial token acquisition until it is executed to avoid blocking an IO thread."
msgstr "`OidcClientRequestReactiveFilter` atrasa a aquisição de um token inicial até ser executado para evitar o bloqueio de um thread IO."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:399
#, fuzzy
msgid "You can selectively register `OidcClientRequestReactiveFilter` by using either io.quarkus.oidc.client.reactive.filter.OidcClientFilter or org.eclipse.microprofile.rest.client.annotation.RegisterProvider annotations:"
msgstr "É possível registar seletivamente `OidcClientRequestReactiveFilter` utilizando as anotações io.quarkus.oidc.client.reactive.filter.OidcClientFilter ou org.eclipse.microprofile.rest.client.annotation.RegisterProvider:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:406
#: upstream/_guides/security-openid-connect-client-reference.adoc:446
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.client.filter.OidcClientFilter;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:411
#: upstream/_guides/security-openid-connect-client-reference.adoc:487
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@OidcClientFilter\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:415
#: upstream/_guides/security-openid-connect-client-reference.adoc:434
#: upstream/_guides/security-openid-connect-client-reference.adoc:455
#, no-wrap
msgid ""
"    @GET\n"
"    Uni<String> getUserName();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:418
#: upstream/_guides/security-openid-connect-client-reference.adoc:494
#: upstream/_guides/security-openid-connect-client-reference.adoc:593
#: upstream/_guides/security-openid-connect-client-reference.adoc:898
#: upstream/_guides/security-openid-connect-client-reference.adoc:986
#: upstream/_guides/security-openid-connect-client-reference.adoc:1062
#, fuzzy
msgid "or"
msgstr "ou"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:425
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.client.reactive.filter.OidcClientRequestReactiveFilter;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:430
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(OidcClientRequestReactiveFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:439
#, fuzzy
msgid "`OidcClientRequestReactiveFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-client-reactive-filter.client-name` configuration property.  You can also select `OidcClient` by setting `value` attribute of the `@OidcClientFilter` annotation. The client name set through annotation has higher priority than the `quarkus.oidc-client-reactive-filter.client-name` configuration property.  For example, given xref:use-oidc-clients[this] `jwt-secret` named OIDC client declaration, you can refer to this client like this:"
msgstr "`OidcClientRequestReactiveFilter` utiliza um `OidcClient` por defeito. Um `OidcClient` nomeado pode ser selecionado com uma propriedade de configuração `quarkus.oidc-client-reactive-filter.client-name`. Também pode selecionar `OidcClient` definindo o atributo `value` da anotação `@OidcClientFilter`. O nome do cliente definido através da anotação tem maior prioridade do que a propriedade de configuração `quarkus.oidc-client-reactive-filter.client-name`. Por exemplo, dada  link:#use-oidc-clients[esta] declaração de cliente OIDC com o nome `jwt-secret`, pode referir-se a este cliente da seguinte forma:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:451
#: upstream/_guides/security-openid-connect-client-reference.adoc:526
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@OidcClientFilter(\"jwt-secret\")\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:458
#, fuzzy, no-wrap
msgid "Use OidcClient in RestClient ClientFilter"
msgstr "Utilizar OidcClient em RestClient ClientFilter"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:468
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc-client-filter</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:473
#, fuzzy
msgid "`quarkus-oidc-client-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestFilter` Jakarta REST ClientRequestFilter which uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization` `Bearer` scheme value."
msgstr "`quarkus-oidc-client-filter` A extensão fornece `io.quarkus.oidc.client.filter.OidcClientRequestFilter` Jakarta REST ClientRequestFilter que utiliza `OidcClient` para adquirir o token de acesso, actualizá-lo, se necessário, e defini-lo como um valor de esquema HTTP `Authorization` `Bearer` ."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:475
#, fuzzy
msgid "By default, this filter will get `OidcClient` to acquire the first pair of access and refresh tokens at its initialization time. If the access tokens are short-lived and refresh tokens are not available then the token acquisition should be delayed with `quarkus.oidc-client.early-tokens-acquisition=false`."
msgstr "Por predefinição, este filtro irá obter `OidcClient` para adquirir o primeiro par de tokens de acesso e de atualização no momento da sua inicialização. Se os tokens de acesso forem de curta duração e os tokens de atualização não estiverem disponíveis, a aquisição de tokens deve ser atrasada com `quarkus.oidc-client.early-tokens-acquisition=false`."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:477
#, fuzzy
msgid "You can selectively register `OidcClientRequestFilter` by using either `io.quarkus.oidc.client.filter.OidcClientFilter` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotations:"
msgstr "É possível registar seletivamente `OidcClientRequestFilter` utilizando as anotações `io.quarkus.oidc.client.filter.OidcClientFilter` ou `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:482
#: upstream/_guides/security-openid-connect-client-reference.adoc:521
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.client.filter.OidcClientFilter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:491
#: upstream/_guides/security-openid-connect-client-reference.adoc:509
#: upstream/_guides/security-openid-connect-client-reference.adoc:530
#: upstream/_guides/security-openid-connect-client-reference.adoc:895
#: upstream/_guides/security-openid-connect-client-reference.adoc:913
#: upstream/_guides/security-openid-connect-client-reference.adoc:984
#: upstream/_guides/security-openid-connect-client-reference.adoc:1001
#: upstream/_guides/security-openid-connect-client-reference.adoc:1060
#: upstream/_guides/security-openid-connect-client-reference.adoc:1077
#, no-wrap
msgid ""
"    @GET\n"
"    String getUserName();\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:500
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.client.filter.OidcClientRequestFilter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:505
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(OidcClientRequestFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:512
#, fuzzy
msgid "Alternatively, `OidcClientRequestFilter` can be registered automatically with all MP Rest or Jakarta REST clients if `quarkus.oidc-client-filter.register-filter=true` property is set."
msgstr "Em alternativa, `OidcClientRequestFilter` pode ser registado automaticamente com todos os clientes MP Rest ou Jakarta REST se a propriedade `quarkus.oidc-client-filter.register-filter=true` estiver definida."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:516
#, fuzzy
msgid "`OidcClientRequestFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-client-filter.client-name` configuration property.  You can also select `OidcClient` by setting `value` attribute of the `@OidcClientFilter` annotation. The client name set through annotation has higher priority than the `quarkus.oidc-client-filter.client-name` configuration property.  For example, given xref:use-oidc-clients[this] `jwt-secret` named OIDC client declaration, you can refer to this client like this:"
msgstr "`OidcClientRequestFilter` utiliza um `OidcClient` por defeito. Um `OidcClient` nomeado pode ser selecionado com uma propriedade de configuração `quarkus.oidc-client-filter.client-name`. Também pode selecionar `OidcClient` definindo o atributo `value` da anotação `@OidcClientFilter`. O nome do cliente definido através da anotação tem maior prioridade do que a propriedade de configuração `quarkus.oidc-client-filter.client-name`. Por exemplo, dada  link:#use-oidc-clients[esta] declaração de cliente OIDC com o nome `jwt-secret`, pode referir-se a este cliente da seguinte forma:"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:532
#, fuzzy, no-wrap
msgid "Use Custom RestClient ClientFilter"
msgstr "Utilizar ClientFilter personalizado do RestClient"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:535
#, fuzzy
msgid "If you prefer you can use your own custom filter and inject `Tokens`:"
msgstr "Se preferir, pode utilizar o seu próprio filtro personalizado e injetar `Tokens`:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:543
#, no-wrap
msgid ""
"@Provider\n"
"@Priority(Priorities.AUTHENTICATION)\n"
"public class OidcClientRequestCustomFilter implements ClientRequestFilter {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:546
#, no-wrap
msgid ""
"    @Inject\n"
"    Tokens tokens;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:555
#, fuzzy
msgid "The `Tokens` producer will acquire and refresh the tokens, and the custom filter will decide how and when to use the token."
msgstr "O produtor `Tokens` adquire e actualiza os tokens, e o filtro personalizado decide como e quando utilizar o token."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:557
#, fuzzy
msgid "You can also inject named `Tokens`, see xref:named-oidc-clients[Inject named OidcClient and Tokens]"
msgstr "Também é possível injetar o nome `Tokens`, ver  link:#named-oidc-clients[Injetar o nome OidcClient e Tokens]"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:559
#, fuzzy, no-wrap
msgid "Refreshing Access Tokens"
msgstr "Atualização dos tokens de acesso"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:563
#, fuzzy
msgid "`OidcClientRequestReactiveFilter`, `OidcClientRequestFilter` and `Tokens` producers will refresh the current expired access token if the refresh token is available.  Additionally, `quarkus.oidc-client.refresh-token-time-skew` property can be used for a preemptive access token refreshment to avoid sending nearly expired access tokens which may cause HTTP 401 errors. For example if this property is set to `3S` and the access token will expire in less than 3 seconds then this token will be auto-refreshed."
msgstr "`OidcClientRequestReactiveFilter`Os produtores `OidcClientRequestFilter` e `Tokens` actualizarão o token de acesso atualmente expirado se o token de atualização estiver disponível. Além disso, a propriedade `quarkus.oidc-client.refresh-token-time-skew` pode ser utilizada para uma atualização preventiva do token de acesso para evitar o envio de tokens de acesso quase expirados que podem causar erros HTTP 401. Por exemplo, se esta propriedade estiver definida para `3S` e o token de acesso expirar em menos de 3 segundos, este token será atualizado automaticamente."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:565
#, fuzzy
msgid "If the access token needs to be refreshed but no refresh token is available then an attempt will be made to acquire a new token using the configured grant such as `client_credentials`."
msgstr "Se o token de acesso precisar de ser atualizado mas não estiver disponível nenhum token de atualização, será feita uma tentativa de adquirir um novo token utilizando a concessão configurada, como `client_credentials`."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:567
#, fuzzy
msgid "Please note that some OpenID Connect Providers will not return a refresh token in a `client_credentials` grant response. For example, starting from Keycloak 12 a refresh token will not be returned by default for `client_credentials`. The providers may also restrict a number of times a refresh token can be used."
msgstr "Tenha em atenção que alguns fornecedores OpenID Connect não devolverão um token de atualização numa resposta de concessão `client_credentials`. Por exemplo, a partir do Keycloak 12, um token de atualização não será devolvido por predefinição para `client_credentials`. Os fornecedores podem também restringir o número de vezes que um token de atualização pode ser utilizado."

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:569
#, fuzzy, no-wrap
msgid "Revoking Access Tokens"
msgstr "Revogação de tokens de acesso"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:572
#, fuzzy
msgid "If your OpenId Connect provider such as Keycloak supports a token revocation endpoint then `OidcClient#revokeAccessToken` can be used to revoke the current access token. The revocation endpoint URL will be discovered alongside the token request URI or can be configured with `quarkus.oidc-client.revoke-path`."
msgstr "Se o seu fornecedor OpenId Connect, como o Keycloak, suportar um ponto final de revogação de token, então `OidcClient#revokeAccessToken` pode ser utilizado para revogar o token de acesso atual. O URL do ponto final de revogação será descoberto juntamente com o URI do pedido de token ou pode ser configurado com `quarkus.oidc-client.revoke-path`."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:574
#, fuzzy
msgid "You may want to have the access token revoked if using this token with a REST client fails with HTTP `401` or the access token has already been used for a long time and you'd like to refresh it."
msgstr "Pode querer que o token de acesso seja revogado se a utilização deste token com um cliente REST falhar com HTTP `401` ou se o token de acesso já tiver sido utilizado há muito tempo e quiser actualizá-lo."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:576
#, fuzzy
msgid "This can be achieved by requesting a token refresh using a refresh token. However, if the refresh token is not available then you can refresh it by revoking it first and then request a new access token."
msgstr "Isto pode ser conseguido solicitando uma atualização do token utilizando um token de atualização. No entanto, se o token de atualização não estiver disponível, pode actualizá-lo revogando-o primeiro e, em seguida, solicitar um novo token de acesso."

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:578
#, fuzzy, no-wrap
msgid "OidcClient Authentication"
msgstr "Autenticação OidcClient"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:582
#, fuzzy
msgid "`OidcClient` has to authenticate to the OpenID Connect Provider for the `client_credentials` and other grant requests to succeed.  All the https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] options are supported, for example:"
msgstr "`OidcClient` tem de se autenticar no fornecedor OpenID Connect para que o `client_credentials` e outros pedidos de concessão sejam bem sucedidos. Todas as opções  link:https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[de autenticação de cliente OIDC] são suportadas, por exemplo:"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:584
#, fuzzy
msgid "`client_secret_basic`:"
msgstr "`client_secret_basic`:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:590
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=mysecret\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:599
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.client-secret.value=mysecret\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:602
#, fuzzy
msgid "or with the secret retrieved from a xref:credentials-provider.adoc[CredentialsProvider]:"
msgstr "ou com o segredo obtido a partir de um  link:credentials-provider.html[CredentialsProvider]:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:607
#: upstream/_guides/security-openid-connect-client-reference.adoc:639
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:612
#, no-wrap
msgid ""
"# This is a key which will be used to retrieve a secret from the map of credentials returned from CredentialsProvider\n"
"quarkus.oidc-client.credentials.client-secret.provider.key=mysecret-key\n"
"# Set it only if more than one CredentialsProvider can be registered\n"
"quarkus.oidc-client.credentials.client-secret.provider.name=oidc-credentials-provider\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:615
#, fuzzy
msgid "`client_secret_post`:"
msgstr "`client_secret_post`:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:622
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.client-secret.value=mysecret\n"
"quarkus.oidc-client.credentials.client-secret.method=post\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:625
#, fuzzy
msgid "`client_secret_jwt`, signature algorithm is `HS256`:"
msgstr "`client_secret_jwt`, o algoritmo de assinatura é `HS256`:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:631
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:634
#, fuzzy
msgid "or with the secret retrieved from a xref:credentials-provider.adoc[CredentialsProvider], signature algorithm is `HS256`:"
msgstr "ou com o segredo recuperado de um  link:credentials-provider.html[CredentialsProvider], o algoritmo de assinatura é `HS256`:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:644
#, no-wrap
msgid ""
"# This is a key which will be used to retrieve a secret from the map of credentials returned from CredentialsProvider\n"
"quarkus.oidc-client.credentials.jwt.secret-provider.key=mysecret-key\n"
"# Set it only if more than one CredentialsProvider can be registered\n"
"quarkus.oidc-client.credentials.jwt.secret-provider.name=oidc-credentials-provider\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:647
#, fuzzy
msgid "`private_key_jwt` with the PEM key file, signature algorithm is `RS256`:"
msgstr "`private_key_jwt` com o ficheiro de chave PEM, o algoritmo de assinatura é `RS256`:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:653
#: upstream/_guides/security-openid-connect-client-reference.adoc:682
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.jwt.key-file=privateKey.pem\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:656
#, fuzzy
msgid "`private_key_jwt` with the key store file, signature algorithm is `RS256`:"
msgstr "`private_key_jwt` com o ficheiro de armazenamento de chaves, o algoritmo de assinatura é `RS256`:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:664
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.jwt.key-store-file=keystore.jks\n"
"quarkus.oidc-client.credentials.jwt.key-store-password=mypassword\n"
"quarkus.oidc-client.credentials.jwt.key-password=mykeypassword\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:667
#, no-wrap
msgid ""
"# Private key alias inside the keystore\n"
"quarkus.oidc-client.credentials.jwt.key-id=mykeyAlias\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:670
#, fuzzy
msgid "Using `client_secret_jwt` or `private_key_jwt` authentication methods ensures that no client secret goes over the wire."
msgstr "A utilização dos métodos de autenticação `client_secret_jwt` ou `private_key_jwt` garante que nenhum segredo do cliente passa pelo fio."

#. type: Title ====
#: upstream/_guides/security-openid-connect-client-reference.adoc:671
#, fuzzy, no-wrap
msgid "Additional JWT Authentication options"
msgstr "Opções adicionais de autenticação JWT"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:674
#, fuzzy
msgid "If either `client_secret_jwt` or `private_key_jwt` authentication methods are used then the JWT signature algorithm, key identifier, audience, subject and issuer can be customized, for example:"
msgstr "Se forem utilizados os métodos de autenticação `client_secret_jwt` ou `private_key_jwt`, o algoritmo de assinatura JWT, o identificador de chave, o público, o assunto e o emissor podem ser personalizados, por exemplo:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:678
#, no-wrap
msgid "# private_key_jwt client authentication\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:687
#, no-wrap
msgid ""
"# This is a token key identifier 'kid' header - set it if your OpenID Connect provider requires it.\n"
"# Note if the key is represented in a JSON Web Key (JWK) format with a `kid` property then\n"
"# using 'quarkus.oidc-client.credentials.jwt.token-key-id' is not necessary.\n"
"quarkus.oidc-client.credentials.jwt.token-key-id=mykey\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:690
#, no-wrap
msgid ""
"# Use RS512 signature algorithm instead of the default RS256\n"
"quarkus.oidc-client.credentials.jwt.signature-algorithm=RS512\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:693
#, no-wrap
msgid ""
"# The token endpoint URL is the default audience value, use the base address URL instead:\n"
"quarkus.oidc-client.credentials.jwt.audience=${quarkus.oidc-client.auth-server-url}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:696
#, no-wrap
msgid ""
"# custom subject instead of the client id :\n"
"quarkus.oidc-client.credentials.jwt.subject=custom-subject\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:699
#, no-wrap
msgid ""
"# custom issuer instead of the client id :\n"
"quarkus.oidc-client.credentials.jwt.issuer=custom-issuer\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/security-openid-connect-client-reference.adoc:701
#, fuzzy, no-wrap
msgid "Apple POST JWT"
msgstr "Apple POST JWT"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:704
#, fuzzy
msgid "Apple OpenID Connect Provider uses a `client_secret_post` method where a secret is a JWT produced with a `private_key_jwt` authentication method but with Apple account specific issuer and subject properties."
msgstr "O Apple OpenID Connect Provider utiliza um método `client_secret_post` em que um segredo é um JWT produzido com um método de autenticação `private_key_jwt`, mas com propriedades específicas do emissor e do sujeito da conta Apple."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:706
#, fuzzy
msgid "`quarkus-oidc-client` supports a non-standard `client_secret_post_jwt` authentication method which can be configured as follows:"
msgstr "`quarkus-oidc-client` suporta um método de autenticação `client_secret_post_jwt` não normalizado que pode ser configurado da seguinte forma:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:712
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=${apple.url}\n"
"quarkus.oidc-client.client-id=${apple.client-id}\n"
"quarkus.oidc-client.credentials.client-secret.method=post-jwt\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:717
#, no-wrap
msgid ""
"quarkus.oidc-client.credentials.jwt.key-file=ecPrivateKey.pem\n"
"quarkus.oidc-client.credentials.jwt.signature-algorithm=ES256\n"
"quarkus.oidc-client.credentials.jwt.subject=${apple.subject}\n"
"quarkus.oidc-client.credentials.jwt.issuer=${apple.issuer}\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/security-openid-connect-client-reference.adoc:719
#, fuzzy, no-wrap
msgid "Mutual TLS"
msgstr "TLS mútuo"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:722
#, fuzzy
msgid "Some OpenID Connect Providers may require that a client is authenticated as part of the `Mutual TLS` (`mTLS`) authentication process."
msgstr "Alguns fornecedores OpenID Connect podem exigir que um cliente seja autenticado como parte do processo de autenticação `Mutual TLS` ( `mTLS`)."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:724
#, fuzzy
msgid "`quarkus-oidc-client` can be configured as follows to support `mTLS`:"
msgstr "`quarkus-oidc-client` pode ser configurado da seguinte forma para suportar `mTLS`:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:728
#, no-wrap
msgid "quarkus.oidc.tls.verification=certificate-validation\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:732
#, no-wrap
msgid ""
"# Keystore configuration\n"
"quarkus.oidc.client.tls.key-store-file=client-keystore.jks\n"
"quarkus.oidc.client.tls.key-store-password=${key-store-password}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:736
#, no-wrap
msgid ""
"# Add more keystore properties if needed:\n"
"#quarkus.oidc.client.tls.key-store-alias=keyAlias\n"
"#quarkus.oidc.client.tls.key-store-alias-password=keyAliasPassword\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:742
#, no-wrap
msgid ""
"# Truststore configuration\n"
"quarkus.oidc-client.tls.trust-store-file=client-truststore.jks\n"
"quarkus.oidc-client.tls.trust-store-password=${trust-store-password}\n"
"# Add more truststore properties if needed:\n"
"#quarkus.oidc.client.tls.trust-store-alias=certAlias\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:745
#: upstream/_guides/security-openid-connect-client-reference.adoc:1100
#, fuzzy, no-wrap
msgid "Testing"
msgstr "Ensaios"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:748
#, fuzzy
msgid "Start by adding the following dependencies to your test project:"
msgstr "Comece por adicionar as seguintes dependências ao seu projeto de teste:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:761
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>org.awaitility</groupId>\n"
"    <artifactId>awaitility</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/security-openid-connect-client-reference.adoc:764
#, fuzzy, no-wrap
msgid "Wiremock"
msgstr "Wiremock"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:767
#, fuzzy
msgid "Add the following dependencies to your test project:"
msgstr "Adicione as seguintes dependências ao seu projeto de teste:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:775
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>org.wiremock</groupId>\n"
"    <artifactId>wiremock</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:778
#, fuzzy
msgid "Write Wiremock based `QuarkusTestResourceLifecycleManager`, for example:"
msgstr "Escrever Wiremock com base em `QuarkusTestResourceLifecycleManager`, por exemplo:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:781
#, no-wrap
msgid "package io.quarkus.it.keycloak;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:784
#, no-wrap
msgid ""
"import static com.github.tomakehurst.wiremock.client.WireMock.matching;\n"
"import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.wireMockConfig;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:787
#, no-wrap
msgid ""
"import java.util.HashMap;\n"
"import java.util.Map;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:791
#, no-wrap
msgid ""
"import com.github.tomakehurst.wiremock.WireMockServer;\n"
"import com.github.tomakehurst.wiremock.client.WireMock;\n"
"import com.github.tomakehurst.wiremock.core.Options.ChunkedEncodingPolicy;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:793
#, no-wrap
msgid "import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:796
#, no-wrap
msgid ""
"public class KeycloakRealmResourceManager implements QuarkusTestResourceLifecycleManager {\n"
"    private WireMockServer server;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:799
#, no-wrap
msgid ""
"    @Override\n"
"    public Map<String, String> start() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:802
#, no-wrap
msgid ""
"        server = new WireMockServer(wireMockConfig().dynamicPort().useChunkedTransferEncoding(ChunkedEncodingPolicy.NEVER));\n"
"        server.start();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:817
#, no-wrap
msgid ""
"        server.stubFor(WireMock.post(\"/tokens\")\n"
"                .withRequestBody(matching(\"grant_type=password&username=alice&password=alice\"))\n"
"                .willReturn(WireMock\n"
"                        .aResponse()\n"
"                        .withHeader(\"Content-Type\", \"application/json\")\n"
"                        .withBody(\n"
"                                \"{\\\"access_token\\\":\\\"access_token_1\\\", \\\"expires_in\\\":4, \\\"refresh_token\\\":\\\"refresh_token_1\\\"}\")));\n"
"        server.stubFor(WireMock.post(\"/tokens\")\n"
"                .withRequestBody(matching(\"grant_type=refresh_token&refresh_token=refresh_token_1\"))\n"
"                .willReturn(WireMock\n"
"                        .aResponse()\n"
"                        .withHeader(\"Content-Type\", \"application/json\")\n"
"                        .withBody(\n"
"                                \"{\\\"access_token\\\":\\\"access_token_2\\\", \\\"expires_in\\\":4, \\\"refresh_token\\\":\\\"refresh_token_1\\\"}\")));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:823
#, no-wrap
msgid ""
"        Map<String, String> conf = new HashMap<>();\n"
"        conf.put(\"keycloak.url\", server.baseUrl());\n"
"        return conf;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:832
#, no-wrap
msgid ""
"    @Override\n"
"    public synchronized void stop() {\n"
"        if (server != null) {\n"
"            server.stop();\n"
"            server = null;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:835
#, fuzzy
msgid "Prepare the REST test endpoints, you can have the test frontend endpoint which uses the injected MP REST client with a registered OidcClient filter to invoke on the downstream endpoint which echoes the token back, for example, see the `integration-tests/oidc-client-wiremock` in the `main` Quarkus repository."
msgstr "Prepare os pontos de extremidade de teste REST, pode ter o ponto de extremidade de teste frontend que utiliza o cliente MP REST injetado com um filtro OidcClient registado para invocar o ponto de extremidade a jusante que faz eco do token de volta, por exemplo, ver o `integration-tests/oidc-client-wiremock` no repositório `main` Quarkus."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:837
#, fuzzy
msgid "Set `application.properties`, for example:"
msgstr "Definir `application.properties`, por exemplo:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:849
#, no-wrap
msgid ""
"# Use 'keycloak.url' property set by the test KeycloakRealmResourceManager\n"
"quarkus.oidc-client.auth-server-url=${keycloak.url}\n"
"quarkus.oidc-client.discovery-enabled=false\n"
"quarkus.oidc-client.token-path=/tokens\n"
"quarkus.oidc-client.client-id=quarkus-service-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=password\n"
"quarkus.oidc-client.grant-options.password.username=alice\n"
"quarkus.oidc-client.grant-options.password.password=alice\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:852
#, fuzzy
msgid "and finally write the test code. Given the Wiremock-based resource above, the first test invocation should return `access_token_1` access token which will expire in 4 seconds. Use `awaitility` to wait for about 5 seconds, and now the next test invocation should return `access_token_2` access token which confirms the expired `access_token_1` access token has been refreshed."
msgstr "e, finalmente, escrever o código de teste. Dado o recurso baseado em Wiremock acima, a primeira invocação de teste deve retornar o token de acesso `access_token_1`, que expirará em 4 segundos. Utilize `awaitility` para aguardar cerca de 5 segundos e, agora, a próxima invocação de teste deve devolver o token de acesso `access_token_2`, que confirma que o token de acesso expirado `access_token_1` foi atualizado."

#. type: Title ====
#: upstream/_guides/security-openid-connect-client-reference.adoc:853
#, fuzzy, no-wrap
msgid "Keycloak"
msgstr "Capa de chave"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:856
#, fuzzy
msgid "If you work with Keycloak then you can use the same approach as described in the xref:security-oidc-bearer-token-authentication.adoc#integration-testing-keycloak[OpenID Connect Bearer Token Integration testing] Keycloak section."
msgstr "Se trabalhar com o Keycloak, pode utilizar a mesma abordagem descrita na secção  link:security-oidc-bearer-token-authentication.html#integration-testing-keycloak[Integração do Token de Portador OpenID Connect para testar] o Keycloak."

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:857
#, fuzzy, no-wrap
msgid "How to check the errors in the logs"
msgstr "Como verificar os erros nos registos"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:860
#, fuzzy
msgid "Please enable `io.quarkus.oidc.client.runtime.OidcClientImpl` `TRACE` level logging to see more details about the token acquisition and refresh errors:"
msgstr "Active o registo de nível `io.quarkus.oidc.client.runtime.OidcClientImpl` `TRACE` para ver mais detalhes sobre a aquisição do token e os erros de atualização:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:865
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.oidc.client.runtime.OidcClientImpl\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.oidc.client.runtime.OidcClientImpl\".min-level=TRACE\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:868
#, fuzzy
msgid "Please enable `io.quarkus.oidc.client.runtime.OidcClientRecorder` `TRACE` level logging to see more details about the OidcClient initialization errors:"
msgstr "Ative `io.quarkus.oidc.client.runtime.OidcClientRecorder` `TRACE` level logging para ver mais detalhes sobre os erros de inicialização do OidcClient:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:873
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.oidc.client.runtime.OidcClientRecorder\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.oidc.client.runtime.OidcClientRecorder\".min-level=TRACE\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-client-reference.adoc:876
#: upstream/_guides/security-openid-connect-client-reference.adoc:1106
#, fuzzy, no-wrap
msgid "Token Propagation Reactive"
msgstr "Propagação de Token Reativo"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:879
#, fuzzy
msgid "The `quarkus-oidc-token-propagation-reactive` extension provides RestEasy Reactive Client `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter` that simplifies the propagation of authentication information by propagating the xref:security-oidc-bearer-token-authentication.adoc[Bearer token] present in the current active request or the token acquired from the xref:security-oidc-code-flow-authentication.adoc[Authorization code flow mechanism], as the HTTP `Authorization` header's `Bearer` scheme value."
msgstr "A extensão `quarkus-oidc-token-propagation-reactive` fornece o cliente reativo RestEasy `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter` que simplifica a propagação de informações de autenticação, propagando o  link:security-oidc-bearer-token-authentication.html[token do portador] presente no pedido ativo atual ou o token adquirido a partir do  link:security-oidc-code-flow-authentication.html[mecanismo de fluxo do código de autorização], como o valor do esquema `Bearer` do cabeçalho HTTP `Authorization`."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:881
#, fuzzy
msgid "You can selectively register `AccessTokenRequestReactiveFilter` by using either `io.quarkus.oidc.token.propagation.AccessToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotation, for example:"
msgstr "É possível registar seletivamente `AccessTokenRequestReactiveFilter` utilizando, por exemplo, a anotação `io.quarkus.oidc.token.propagation.AccessToken` ou `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:886
#: upstream/_guides/security-openid-connect-client-reference.adoc:975
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.AccessToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:891
#: upstream/_guides/security-openid-connect-client-reference.adoc:980
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@AccessToken\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:904
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:909
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(AccessTokenRequestReactiveFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:917
#, fuzzy
msgid "Additionally, `AccessTokenRequestReactiveFilter` can support a complex application that needs to exchange the tokens before propagating them."
msgstr "Além disso, `AccessTokenRequestReactiveFilter` pode suportar uma aplicação complexa que necessita de trocar os tokens antes de os propagar."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:919
#, fuzzy
msgid "If you work with link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] or other OpenID Connect Providers which support a link:https://tools.ietf.org/html/rfc8693[Token Exchange] token grant then you can configure `AccessTokenRequestReactiveFilter` to exchange the token like this:"
msgstr "Se trabalhar com o  link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] ou outros fornecedores de ligação OpenID que suportem uma concessão de token de  link:https://tools.ietf.org/html/rfc8693[troca de] token, pode configurar `AccessTokenRequestReactiveFilter` para trocar o token desta forma:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:927
#: upstream/_guides/security-openid-connect-client-reference.adoc:1016
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=exchange\n"
"quarkus.oidc-client.grant-options.exchange.audience=quarkus-app-exchange\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:929
#: upstream/_guides/security-openid-connect-client-reference.adoc:1018
#: upstream/_guides/security-openid-connect-client-reference.adoc:1033
#, no-wrap
msgid "quarkus.oidc-token-propagation.exchange-token=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:932
#, fuzzy
msgid "Note `AccessTokenRequestReactiveFilter` will use `OidcClient` to exchange the current token, and you can use `quarkus.oidc-client.grant-options.exchange` to set the additional exchange properties expected by your OpenID Connect Provider."
msgstr "Nota `AccessTokenRequestReactiveFilter` irá utilizar `OidcClient` para trocar o token atual e pode utilizar `quarkus.oidc-client.grant-options.exchange` para definir as propriedades de troca adicionais esperadas pelo seu fornecedor OpenID Connect."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:934
#, fuzzy
msgid "If you work with providers such as `Azure` that link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[require using] link:https://www.rfc-editor.org/rfc/rfc7523#section-2.1[JWT bearer token grant] to exhange the current token then you can configure `AccessTokenRequestReactiveFilter` to exchange the token like this:"
msgstr "Se trabalhar com fornecedores como `Azure` que  link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[requerem a utilização da]  link:https://www.rfc-editor.org/rfc/rfc7523#section-2.1[concessão do token portador JWT] para trocar o token atual, pode configurar `AccessTokenRequestReactiveFilter` para trocar o token desta forma:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:940
#: upstream/_guides/security-openid-connect-client-reference.adoc:1027
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=${azure.provider.url}\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:944
#: upstream/_guides/security-openid-connect-client-reference.adoc:1031
#, no-wrap
msgid ""
"quarkus.oidc-client.grant.type=jwt\n"
"quarkus.oidc-client.grant-options.jwt.requested_token_use=on_behalf_of\n"
"quarkus.oidc-client.scopes=https://graph.microsoft.com/user.read,offline_access\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:946
#, no-wrap
msgid "quarkus.oidc-token-propagation-reactive.exchange-token=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:949
#, fuzzy
msgid "`AccessTokenRequestReactiveFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-token-propagation-reactive.client-name` configuration property."
msgstr "`AccessTokenRequestReactiveFilter` utiliza um `OidcClient` por defeito. Um `OidcClient` nomeado pode ser selecionado com uma propriedade de configuração `quarkus.oidc-token-propagation-reactive.client-name`."

#. type: Title ==
#: upstream/_guides/security-openid-connect-client-reference.adoc:951
#, fuzzy, no-wrap
msgid "Token Propagation"
msgstr "Propagação de tokens"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:956
#, fuzzy
msgid "The `quarkus-oidc-token-propagation` extension provides two Jakarta REST `jakarta.ws.rs.client.ClientRequestFilter` class implementations that simplify the propagation of authentication information.  `io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` propagates the xref:security-oidc-bearer-token-authentication.adoc[Bearer token] present in the current active request or the token acquired from the xref:security-oidc-code-flow-authentication.adoc[Authorization code flow mechanism], as the HTTP `Authorization` header's `Bearer` scheme value.  The `io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter` provides the same functionality, but in addition provides support for JWT tokens."
msgstr "A extensão `quarkus-oidc-token-propagation` fornece duas implementações da classe Jakarta REST `jakarta.ws.rs.client.ClientRequestFilter` que simplificam a propagação de informações de autenticação. `io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` propaga o  link:security-oidc-bearer-token-authentication.html[token do Portador] presente no pedido ativo atual ou o token adquirido a partir do  link:security-oidc-code-flow-authentication.html[mecanismo de fluxo do código de Autorização], como o valor do esquema `Bearer` do cabeçalho HTTP `Authorization`. O `io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter` fornece a mesma funcionalidade, mas, além disso, fornece suporte para tokens JWT."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:958
#, fuzzy
msgid "When you need to propagate the current Authorization Code Flow access token then the immediate token propagation will work well - as the code flow access tokens (as opposed to ID tokens) are meant to be propagated for the current Quarkus endpoint to access the remote services on behalf of the currently authenticated user."
msgstr "Quando for necessário propagar o token de acesso ao fluxo de código de autorização atual, a propagação imediata do token funcionará bem, uma vez que os tokens de acesso ao fluxo de código (em oposição aos tokens de ID) devem ser propagados para que o ponto final atual do Quarkus aceda aos serviços remotos em nome do utilizador atualmente autenticado."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:960
#, fuzzy
msgid "However, the direct end to end Bearer token propagation should be avoided if possible. For example, `Client -> Service A -> Service B` where `Service B` receives a token sent by `Client` to `Service A`. In such cases `Service B` will not be able to distinguish if the token came from `Service A` or from `Client` directly. For `Service B` to verify the token came from `Service A` it should be able to assert a new issuer and audience claims."
msgstr "No entanto, a propagação direta do token do portador de extremo a extremo deve ser evitada, se possível. Por exemplo, `Client → Service A → Service B` onde `Service B` recebe um token enviado por `Client` para `Service A`. Nesses casos, `Service B` não conseguirá distinguir se o token veio de `Service A` ou de `Client` diretamente. Para que `Service B` possa verificar se o token veio de `Service A`, deve ser capaz de afirmar um novo emissor e reivindicações de audiência."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:962
#, fuzzy
msgid "Additionally, a complex application may need to exchange or update the tokens before propagating them. For example, the access context might be different when `Service A` is accessing `Service B`. In this case, `Service A` might be granted a narrow or a completely different set of scopes to access `Service B`."
msgstr "Além disso, uma aplicação complexa pode precisar de trocar ou atualizar os tokens antes de os propagar. Por exemplo, o contexto de acesso pode ser diferente quando `Service A` está a aceder a `Service B`. Neste caso, pode ser concedido a `Service A` um conjunto de âmbitos restrito ou completamente diferente para aceder a `Service B`."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:964
#, fuzzy
msgid "The following sections show how `AccessTokenRequestFilter` and `JsonWebTokenRequestFilter` can help."
msgstr "As secções seguintes mostram como `AccessTokenRequestFilter` e `JsonWebTokenRequestFilter` podem ajudar."

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:965
#, fuzzy, no-wrap
msgid "RestClient AccessTokenRequestFilter"
msgstr "RestClient AccessTokenRequestFilter"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:968
#, fuzzy
msgid "`AccessTokenRequestFilter` treats all tokens as Strings and as such it can work with both JWT and opaque tokens."
msgstr "`AccessTokenRequestFilter` trata todos os tokens como Strings e, como tal, pode trabalhar com tokens JWT e opacos."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:970
#, fuzzy
msgid "You can selectively register `AccessTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.AccessToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
msgstr "É possível registar seletivamente `AccessTokenRequestFilter` utilizando `io.quarkus.oidc.token.propagation.AccessToken` ou `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, por exemplo:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:992
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.AccessTokenRequestFilter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:997
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(AccessTokenRequestFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:1004
#, fuzzy
msgid "Alternatively, `AccessTokenRequestFilter` can be registered automatically with all MP Rest or Jakarta REST clients if `quarkus.oidc-token-propagation.register-filter` property is set to `true` and `quarkus.oidc-token-propagation.json-web-token` property is set to `false` (which is a default value)."
msgstr "Em alternativa, `AccessTokenRequestFilter` pode ser registado automaticamente com todos os clientes MP Rest ou Jakarta REST se a propriedade `quarkus.oidc-token-propagation.register-filter` estiver definida para `true` e a propriedade `quarkus.oidc-token-propagation.json-web-token` estiver definida para `false` (que é um valor predefinido)."

#. type: Title ====
#: upstream/_guides/security-openid-connect-client-reference.adoc:1005
#, fuzzy, no-wrap
msgid "Exchange Token Before Propagation"
msgstr "Trocar o Token antes da propagação"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:1008
#, fuzzy
msgid "If the current access token needs to be exchanged before propagation and you work with link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] or other OpenID Connect Provider which supports a link:https://tools.ietf.org/html/rfc8693[Token Exchange] token grant then you can configure `AccessTokenRequestFilter` like this:"
msgstr "Se o token de acesso atual precisar de ser trocado antes da propagação e trabalhar com o  link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] ou outro fornecedor OpenID Connect que suporte uma concessão de token  link:https://tools.ietf.org/html/rfc8693[de troca de] token, pode configurar `AccessTokenRequestFilter` da seguinte forma:"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:1021
#, fuzzy
msgid "If you work with providers such as `Azure` that link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[require using] link:https://www.rfc-editor.org/rfc/rfc7523#section-2.1[JWT bearer token grant] to exhange the current token then you can configure `AccessTokenRequestFilter` to exchange the token like this:"
msgstr "Se trabalhar com fornecedores como `Azure` que  link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[requerem a utilização da]  link:https://www.rfc-editor.org/rfc/rfc7523#section-2.1[concessão do token portador JWT] para trocar o token atual, pode configurar `AccessTokenRequestFilter` para trocar o token desta forma:"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:1036
#, fuzzy
msgid "Note `AccessTokenRequestFilter` will use `OidcClient` to exchange the current token, and you can use `quarkus.oidc-client.grant-options.exchange` to set the additional exchange properties expected by your OpenID Connect Provider."
msgstr "Nota `AccessTokenRequestFilter` irá utilizar `OidcClient` para trocar o token atual e pode utilizar `quarkus.oidc-client.grant-options.exchange` para definir as propriedades de troca adicionais esperadas pelo seu fornecedor OpenID Connect."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:1038
#, fuzzy
msgid "`AccessTokenRequestFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-token-propagation.client-name` configuration property."
msgstr "`AccessTokenRequestFilter` utiliza um `OidcClient` por defeito. Um `OidcClient` nomeado pode ser selecionado com uma propriedade de configuração `quarkus.oidc-token-propagation.client-name`."

#. type: Title ===
#: upstream/_guides/security-openid-connect-client-reference.adoc:1039
#, fuzzy, no-wrap
msgid "RestClient JsonWebTokenRequestFilter"
msgstr "RestClient JsonWebTokenRequestFilter"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:1042
#, fuzzy
msgid "Using `JsonWebTokenRequestFilter` is recommended if you work with Bearer JWT tokens where these tokens can have their claims such as `issuer` and `audience` modified and the updated tokens secured (for example, re-signed) again. It expects an injected `org.eclipse.microprofile.jwt.JsonWebToken` and therefore will not work with the opaque tokens. Also, if your OpenID Connect Provider supports a Token Exchange protocol then it is recommended to use `AccessTokenRequestFilter` instead - as both JWT and opaque bearer tokens can be securely exchanged with `AccessTokenRequestFilter`."
msgstr "Recomenda-se a utilização de `JsonWebTokenRequestFilter` se trabalhar com tokens JWT ao portador, em que estes tokens podem ter as suas declarações, como `issuer` e `audience`, modificadas e os tokens actualizados protegidos (por exemplo, novamente assinados). Ele espera um `org.eclipse.microprofile.jwt.JsonWebToken` injetado e, portanto, não funcionará com os tokens opacos. Além disso, se o seu fornecedor OpenID Connect suportar um protocolo de troca de tokens, recomenda-se a utilização de `AccessTokenRequestFilter` - uma vez que tanto os tokens JWT como os tokens portadores opacos podem ser trocados de forma segura com `AccessTokenRequestFilter`."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:1044
#, fuzzy
msgid "`JsonWebTokenRequestFilter` makes it easy for `Service A` implementations to update the injected `org.eclipse.microprofile.jwt.JsonWebToken` with the new `issuer` and `audience` claim values and secure the updated token again with a new signature. The only difficult step is to ensure `Service A` has a signing key - it should be provisioned from a secure file system or from the remote secure storage such as Vault."
msgstr "`JsonWebTokenRequestFilter` facilita às implementações do `Service A` atualizar o `org.eclipse.microprofile.jwt.JsonWebToken` injetado com os novos valores de reivindicação `issuer` e `audience` e proteger novamente o token atualizado com uma nova assinatura. O único passo difícil é garantir que `Service A` tem uma chave de assinatura - esta deve ser fornecida a partir de um sistema de ficheiros seguro ou do armazenamento seguro remoto, como o Vault."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:1046
#, fuzzy
msgid "You can selectively register `JsonWebTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.JsonWebToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
msgstr "É possível registar seletivamente `JsonWebTokenRequestFilter` utilizando `io.quarkus.oidc.token.propagation.JsonWebToken` ou `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, por exemplo:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:1051
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.JsonWebToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:1056
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@JsonWebToken\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:1068
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:1073
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(JsonWebTokenRequestFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:1080
#, fuzzy
msgid "Alternatively, `JsonWebTokenRequestFilter` can be registered automatically with all MicroProfile REST or Jakarta REST clients if both `quarkus.oidc-token-propagation.register-filter` and `quarkus.oidc-token-propagation.json-web-token` properties are set to `true`."
msgstr "Em alternativa, `JsonWebTokenRequestFilter` pode ser registado automaticamente com todos os clientes MicroProfile REST ou Jakarta REST se as propriedades `quarkus.oidc-token-propagation.register-filter` e `quarkus.oidc-token-propagation.json-web-token` estiverem definidas para `true`."

#. type: Title ====
#: upstream/_guides/security-openid-connect-client-reference.adoc:1081
#, fuzzy, no-wrap
msgid "Update Token Before Propagation"
msgstr "Atualizar o Token antes da propagação"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:1084
#, fuzzy
msgid "If the injected token needs to have its `iss` (issuer) and/or `aud` (audience) claims updated and secured again with a new signature then you can configure `JsonWebTokenRequestFilter` like this:"
msgstr "Se o token injetado necessitar que as suas declarações `iss` (emissor) e/ou `aud` (público) sejam actualizadas e novamente protegidas com uma nova assinatura, pode configurar `JsonWebTokenRequestFilter` da seguinte forma:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:1095
#, no-wrap
msgid ""
"quarkus.oidc-token-propagation.secure-json-web-token=true\n"
"smallrye.jwt.sign.key.location=/privateKey.pem\n"
"# Set a new issuer\n"
"smallrye.jwt.new-token.issuer=http://frontend-resource\n"
"# Set a new audience\n"
"smallrye.jwt.new-token.audience=http://downstream-resource\n"
"# Override the existing token issuer and audience claims if they are already set\n"
"smallrye.jwt.new-token.override-matching-claims=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:1098
#, fuzzy
msgid "As already noted above, please use `AccessTokenRequestFilter` if you work with Keycloak or OpenID Connect Provider which supports a Token Exchange protocol."
msgstr "Como já foi referido anteriormente, utilize `AccessTokenRequestFilter` se trabalhar com o Keycloak ou o OpenID Connect Provider, que suporta um protocolo de troca de tokens."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:1104
#, fuzzy
msgid "You can generate the tokens as described in xref:security-oidc-bearer-token-authentication.adoc#integration-testing[OpenID Connect Bearer Token Integration testing] section.  Prepare the REST test endpoints, you can have the test frontend endpoint which uses the injected MP REST client with a registered token propagation filter to invoke on the downstream endpoint, for example, see the `integration-tests/oidc-token-propagation` in the `main` Quarkus repository."
msgstr "Pode gerar os tokens conforme descrito na secção  link:security-oidc-bearer-token-authentication.html#integration-testing[de testes de integração de token de portador OpenID Connect]. Prepare os pontos de extremidade de teste REST, pode ter o ponto de extremidade de frontend de teste que utiliza o cliente MP REST injetado com um filtro de propagação de token registado para invocar no ponto de extremidade a jusante, por exemplo, consulte `integration-tests/oidc-token-propagation` no repositório `main` Quarkus."

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client-reference.adoc:1116
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc-token-propagation-reactive</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:1119
#, fuzzy
msgid "The `quarkus-oidc-token-propagation-reactive` extension provides `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter` which can be used to propagate the current `Bearer` or `Authorization Code Flow` access tokens."
msgstr "A extensão `quarkus-oidc-token-propagation-reactive` fornece `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter` que pode ser utilizado para propagar os actuais tokens de acesso `Bearer` ou `Authorization Code Flow`."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:1122
#, fuzzy
msgid "The `quarkus-oidc-token-propagation-reactive` extension (as opposed to the non-reactive `quarkus-oidc-token-propagation` extension) does not currently support the exchanging or resigning the tokens before the propagation.  However, these features may be added in the future."
msgstr "A extensão `quarkus-oidc-token-propagation-reactive` (por oposição à extensão não reactiva `quarkus-oidc-token-propagation` ) não suporta atualmente a troca ou a renúncia dos tokens antes da propagação. No entanto, estas funcionalidades podem ser adicionadas no futuro."

#. type: Title ==
#: upstream/_guides/security-openid-connect-client-reference.adoc:1123
#, fuzzy, no-wrap
msgid "References"
msgstr "Referências"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:1126
#, fuzzy
msgid "xref:security-openid-connect-client.adoc[OpenID Connect Client and Token Propagation Quickstart]"
msgstr "link:security-openid-connect-client.html[Início Rápido do Cliente OpenID Connect e da Propagação de Token]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:1127
#, fuzzy
msgid "xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication]"
msgstr "link:security-oidc-bearer-token-authentication.html[Autenticação de token de portador OIDC]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:1128
#, fuzzy
msgid "xref:security-oidc-code-flow-authentication.adoc[OIDC code flow mechanism for protecting web applications]"
msgstr "link:security-oidc-code-flow-authentication.html[Mecanismo de fluxo de código OIDC para proteção de aplicações Web]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client-reference.adoc:1128
#, fuzzy
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "link:security-overview.html[Visão geral do Quarkus Security]"
