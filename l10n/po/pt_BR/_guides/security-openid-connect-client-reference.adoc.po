# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-29 08:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "OpenID Connect (OIDC) and OAuth2 client and filters"
msgstr "Cliente e filtros OpenID Connect (OIDC) e OAuth2"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You can use Quarkus extensions for OpenID Connect and OAuth 2.0 access token management, focusing on acquiring, refreshing, and propagating tokens."
msgstr "O senhor pode usar as extensões do Quarkus para o gerenciamento de tokens de acesso OpenID Connect e OAuth 2.0, concentrando-se na aquisição, atualização e propagação de tokens."

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "This includes the following:"
msgstr "Isso inclui o seguinte:"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Using `quarkus-oidc-client`, `quarkus-oidc-client-reactive-filter` and `quarkus-oidc-client-filter` extensions to acquire and refresh access tokens from OpenID Connect and OAuth 2.0 compliant Authorization Servers such as link:https://www.keycloak.org[Keycloak]."
msgstr "Usar as extensões `quarkus-oidc-client` , `quarkus-oidc-client-reactive-filter` e `quarkus-oidc-client-filter` para adquirir e atualizar tokens de acesso do OpenID Connect e de servidores de autorização compatíveis com OAuth 2.0, como o link:https://www.keycloak.org[Keycloak] ."

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Using `quarkus-oidc-token-propagation-reactive` and `quarkus-oidc-token-propagation` extensions to propagate the current `Bearer` or `Authorization Code Flow` access tokens."
msgstr "Usando as extensões `quarkus-oidc-token-propagation-reactive` e `quarkus-oidc-token-propagation` para propagar os tokens de acesso atuais `Bearer` ou `Authorization Code Flow` ."

#. type: Plain text
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "The access tokens managed by these extensions can be used as HTTP Authorization Bearer tokens to access the remote services."
msgstr "Os tokens de acesso gerenciados por essas extensões podem ser usados como tokens de portador de autorização HTTP para acessar os serviços remotos."

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Also see xref:security-openid-connect-client.adoc[OpenID Connect client and token propagation quickstart]."
msgstr "Consulte também o xref:security-openid-connect-client.adoc[início rápido do cliente OpenID Connect e da propagação de tokens] ."

#. type: Title ==
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "OidcClient"
msgstr "OidcClient"

#. type: Plain text
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Add the following dependency:"
msgstr "Adicione a seguinte dependência:"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "The `quarkus-oidc-client` extension provides a reactive `io.quarkus.oidc.client.OidcClient`, which can be used to acquire and refresh tokens using SmallRye Mutiny `Uni` and `Vert.x WebClient`."
msgstr "A extensão `quarkus-oidc-client` fornece um `io.quarkus.oidc.client.OidcClient` reativo, que pode ser usado para adquirir e atualizar tokens usando SmallRye Mutiny `Uni` e `Vert.x WebClient` ."

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`OidcClient` is initialized at build time with the IDP token endpoint URL, which can be auto-discovered or manually configured. `OidcClient` uses this endpoint to acquire access tokens by using token grants such as `client_credentials` or `password` and refresh the tokens by using a `refresh_token` grant."
msgstr "`OidcClient` é inicializado no momento da compilação com o URL do endpoint de token do IDP, que pode ser descoberto automaticamente ou configurado manualmente. O site `OidcClient` usa esse endpoint para adquirir tokens de acesso usando concessões de token como `client_credentials` ou `password` e atualizar os tokens usando uma concessão `refresh_token` ."

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Token endpoint configuration"
msgstr "Configuração do ponto de extremidade do token"

#. type: Plain text
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "By default, the token endpoint address is discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc-client.auth-server-url`."
msgstr "Por padrão, o endereço do endpoint do token é descoberto adicionando um caminho `/.well-known/openid-configuration` ao `quarkus.oidc-client.auth-server-url` configurado."

#. type: Plain text
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "For example, given this Keycloak URL:"
msgstr "Por exemplo, dado este URL do Keycloak:"

#. type: Plain text
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`OidcClient` will discover that the token endpoint URL is `http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens`."
msgstr "`OidcClient` descobrirá que o URL do ponto de extremidade do token é `http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens` ."

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Alternatively, if the discovery endpoint is unavailable or you want to save on the discovery endpoint round-trip, you can disable the discovery and configure the token endpoint address with a relative path value. For example:"
msgstr "Como alternativa, se o endpoint de descoberta não estiver disponível ou se o senhor quiser economizar na viagem de ida e volta do endpoint de descoberta, poderá desativar a descoberta e configurar o endereço do endpoint do token com um valor de caminho relativo. Por exemplo:"

#. type: Plain text
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "A more compact way to configure the token endpoint URL without the discovery is to set `quarkus.oidc-client.token-path` to an absolute URL:"
msgstr "Uma maneira mais compacta de configurar o URL do endpoint do token sem a descoberta é definir `quarkus.oidc-client.token-path` como um URL absoluto:"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Setting `quarkus.oidc-client.auth-server-url` and `quarkus.oidc-client.discovery-enabled` is not required in this case."
msgstr "A configuração de `quarkus.oidc-client.auth-server-url` e `quarkus.oidc-client.discovery-enabled` não é necessária nesse caso."

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Supported token grants"
msgstr "Subsídios de token com suporte"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "The main token grants that `OidcClient` can use to acquire the tokens are the `client_credentials` (default) and `password` grants."
msgstr "As principais concessões de token que o site `OidcClient` pode usar para adquirir os tokens são as concessões `client_credentials` (padrão) e `password` ."

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Client credentials grant"
msgstr "Concessão de credenciais de cliente"

#. type: Plain text
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Here is how `OidcClient` can be configured to use the `client_credentials` grant:"
msgstr "Veja como o site `OidcClient` pode ser configurado para usar a concessão `client_credentials` :"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "The `client_credentials` grant allows setting extra parameters for the token request by using `quarkus.oidc-client.grant-options.client.<param-name>=<value>`. Here is how to set the intended token recipient by using the `audience` parameter:"
msgstr "A concessão `client_credentials` permite definir parâmetros extras para a solicitação de token usando `quarkus.oidc-client.grant-options.client.<param-name>=<value>` . Veja como definir o destinatário do token pretendido usando o parâmetro `audience` :"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Password grant"
msgstr "Concessão de senha"

#. type: Plain text
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Here is how `OidcClient` can be configured to use the `password` grant:"
msgstr "Veja como o site `OidcClient` pode ser configurado para usar a concessão `password` :"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "It can be further customized by using a `quarkus.oidc-client.grant-options.password` configuration prefix, similar to how the client credentials grant can be customized."
msgstr "Ele pode ser personalizado ainda mais com o uso de um prefixo de configuração `quarkus.oidc-client.grant-options.password` , semelhante à forma como a concessão de credenciais do cliente pode ser personalizada."

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Other grants"
msgstr "Outros subsídios"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`OidcClient` can also help acquire the tokens by using grants that require some extra input parameters that cannot be captured in the configuration. These grants are `refresh_token` (with the external refresh token), `authorization_code`, and two grants which can be used to exchange the current access token, namely, `urn:ietf:params:oauth:grant-type:token-exchange` and `urn:ietf:params:oauth:grant-type:jwt-bearer`."
msgstr "`OidcClient` também pode ajudar a adquirir os tokens usando concessões que exigem alguns parâmetros de entrada adicionais que não podem ser capturados na configuração. Essas concessões são `refresh_token` (com o token de atualização externa), `authorization_code` , e duas concessões que podem ser usadas para trocar o token de acesso atual, a saber, `urn:ietf:params:oauth:grant-type:token-exchange` e `urn:ietf:params:oauth:grant-type:jwt-bearer` ."

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"If you need to acquire an access token and have posted an existing refresh token to the current Quarkus endpoint, you must use the `refresh_token` grant. This grant employs an out-of-band refresh token to obtain a new token set.\n"
"In this case, configure `OidcClient` as follows:"
msgstr "Se o senhor precisar adquirir um token de acesso e tiver postado um token de atualização existente no endpoint atual do Quarkus, deverá usar a concessão `refresh_token` . Essa concessão emprega um token de atualização fora de banda para obter um novo conjunto de tokens. Nesse caso, configure `OidcClient` da seguinte forma:"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Then you can use the `OidcClient.refreshTokens` method with a provided refresh token to get the access token."
msgstr "Em seguida, o senhor pode usar o método `OidcClient.refreshTokens` com um token de atualização fornecido para obter o token de acesso."

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Using the `urn:ietf:params:oauth:grant-type:token-exchange` or `urn:ietf:params:oauth:grant-type:jwt-bearer` grants might be required if you are building a complex microservices application and want to avoid the same `Bearer` token be propagated to and used by more than one service. See <<token-propagation-reactive,Token Propagation in MicroProfile RestClient Reactive filter>> and <<token-propagation,Token Propagation in MicroProfile RestClient filter>> for more details."
msgstr "O uso das concessões `urn:ietf:params:oauth:grant-type:token-exchange` ou `urn:ietf:params:oauth:grant-type:jwt-bearer` pode ser necessário se o senhor estiver criando um aplicativo de microsserviços complexo e quiser evitar que o mesmo token `Bearer` seja propagado e usado por mais de um serviço. Consulte xref:token-propagation-reactive[Propagação de token no filtro MicroProfile RestClient Reactive] e xref:token-propagation[Propagação de token no filtro MicroProfile RestClient] para obter mais detalhes."

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Using `OidcClient` to support the `authorization code` grant might be required if, for some reason, you cannot use the xref:security-oidc-code-flow-authentication.adoc[Quarkus OIDC extension] to support Authorization Code Flow. If there is a very good reason for you to implement Authorization Code Flow, then you can configure `OidcClient` as follows:"
msgstr "O uso do site `OidcClient` para dar suporte à concessão `authorization code` pode ser necessário se, por algum motivo, o senhor não puder usar a xref:security-oidc-code-flow-authentication.adoc[extensão OIDC do Quarkus] para dar suporte ao fluxo do código de autorização. Se houver um bom motivo para implementar o fluxo do código de autorização, o senhor poderá configurar `OidcClient` da seguinte forma:"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Then, you can use the `OidcClient.accessTokens` method to accept a Map of extra properties and pass the current `code` and `redirect_uri` parameters to exchange the authorization code for the tokens."
msgstr "Em seguida, o senhor pode usar o método `OidcClient.accessTokens` para aceitar um mapa de propriedades adicionais e passar os parâmetros `code` e `redirect_uri` atuais para trocar o código de autorização pelos tokens."

#. type: Plain text
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`OidcClient` also supports the `urn:openid:params:grant-type:ciba` grant:"
msgstr "`OidcClient` também apóia o subsídio `urn:openid:params:grant-type:ciba` :"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Then, you can use the `OidcClient.accessTokens` method to accept a Map of extra properties and pass the `auth_req_id` parameter to exchange the token authorization code."
msgstr "Em seguida, o senhor pode usar o método `OidcClient.accessTokens` para aceitar um mapa de propriedades adicionais e passar o parâmetro `auth_req_id` para trocar o código de autorização do token."

#. type: Title ====
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Grant scopes"
msgstr "Escopos de concessão"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"You might need to request that a specific set of scopes be associated with an issued access token.\n"
"Use a dedicated `quarkus.oidc-client.scopes` list property, for example: `quarkus.oidc-client.scopes=email,phone`"
msgstr "Talvez o senhor precise solicitar que um conjunto específico de escopos seja associado a um token de acesso emitido. Por exemplo, use uma propriedade dedicada da lista `quarkus.oidc-client.scopes` : `quarkus.oidc-client.scopes=email,phone`"

#. type: Title ===
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Use OidcClient directly"
msgstr "Usar o OidcClient diretamente"

#. type: Plain text
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "One can use `OidcClient` directly as follows:"
msgstr "É possível usar o site `OidcClient` diretamente da seguinte forma:"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Inject tokens"
msgstr "Injetar tokens"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You can inject `Tokens` that use `OidcClient` internally. `Tokens` can be used to acquire the access tokens and refresh them if necessary:"
msgstr "O senhor pode injetar `Tokens` que usa `OidcClient` internamente. `Tokens` pode ser usado para adquirir os tokens de acesso e atualizá-los, se necessário:"

#. type: Title ===
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Use OidcClients"
msgstr "Usar OidcClients"

#. type: Plain text
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`io.quarkus.oidc.client.OidcClients` is a container of ``OidcClient``s - it includes a default `OidcClient` and named clients which can be configured like this:"
msgstr "`io.quarkus.oidc.client.OidcClients` é um contêiner de `OidcClient` s - inclui um `OidcClient` padrão e clientes nomeados que podem ser configurados desta forma:"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "In this case, the default client is disabled with a `client-enabled=false` property. The `jwt-secret` client can be accessed like this:"
msgstr "Nesse caso, o cliente padrão é desativado com uma propriedade `client-enabled=false` . O cliente `jwt-secret` pode ser acessado da seguinte forma:"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If you also use xref:security-openid-connect-multitenancy.adoc[OIDC multitenancy], and each OIDC tenant has its own associated `OidcClient`, you can use a Vert.x `RoutingContext` `tenantId` attribute. For example:"
msgstr "Se o senhor também usar o xref:security-openid-connect-multitenancy.adoc[OIDC multitenancy] e cada tenant do OIDC tiver seu próprio `OidcClient` associado, poderá usar um atributo Vert.x `RoutingContext` `tenantId` . Por exemplo:"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If you need, you can also create a new `OidcClient` programmatically like this:"
msgstr "Se necessário, o senhor também pode criar um novo `OidcClient` programaticamente, da seguinte forma:"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Inject named OidcClient and tokens"
msgstr "Injetar o nome OidcClient e os tokens"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "In case of multiple configured `OidcClient` objects, you can specify the `OidcClient` injection target by the extra qualifier `@NamedOidcClient` instead of working with `OidcClients`:"
msgstr "No caso de vários objetos `OidcClient` configurados, o senhor pode especificar o alvo de injeção `OidcClient` com o qualificador extra `@NamedOidcClient` em vez de trabalhar com `OidcClients` :"

#. type: Plain text
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "The same qualifier can be used to specify the `OidcClient` used for a `Tokens` injection:"
msgstr "O mesmo qualificador pode ser usado para especificar o `OidcClient` usado para uma injeção `Tokens` :"

#. type: Title ===
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Use OidcClient in RestClient Reactive ClientFilter"
msgstr "Usar o OidcClient no RestClient Reactive ClientFilter"

#. type: Plain text
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Add the following Maven Dependency:"
msgstr "Adicione a seguinte dependência Maven:"

#. type: Plain text
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Note it will also bring `io.quarkus:quarkus-oidc-client`."
msgstr "Observe que ele também trará `io.quarkus:quarkus-oidc-client` ."

#. type: Plain text
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`quarkus-oidc-client-reactive-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestReactiveFilter`."
msgstr "`quarkus-oidc-client-reactive-filter` A extensão fornece `io.quarkus.oidc.client.filter.OidcClientRequestReactiveFilter` ."

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "It works similarly to the way `OidcClientRequestFilter` does (see <<oidc-client-filter,Use OidcClient in MicroProfile RestClient client filter>>) - it uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization` `Bearer` scheme value. The difference is that it works with xref:rest-client-reactive.adoc[Reactive RestClient] and implements a non-blocking client filter that does not block the current IO thread when acquiring or refreshing the tokens."
msgstr "Ele funciona de forma semelhante ao `OidcClientRequestFilter` (consulte xref:oidc-client-filter[Use OidcClient in MicroProfile RestClient client filter] ) - ele usa o `OidcClient` para adquirir o token de acesso, atualizá-lo, se necessário, e defini-lo como um valor de esquema HTTP `Authorization` `Bearer` . A diferença é que ele funciona com o xref:rest-client-reactive.adoc[Reactive RestClient] e implementa um filtro de cliente sem bloqueio que não bloqueia o thread de E/S atual ao adquirir ou atualizar os tokens."

#. type: Plain text
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`OidcClientRequestReactiveFilter` delays an initial token acquisition until it is executed to avoid blocking an IO thread."
msgstr "`OidcClientRequestReactiveFilter` atrasa a aquisição de um token inicial até que ele seja executado para evitar o bloqueio de um thread de IO."

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You can selectively register `OidcClientRequestReactiveFilter` by using either `io.quarkus.oidc.client.reactive.filter.OidcClientFilter` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotations:"
msgstr "O senhor pode registrar seletivamente `OidcClientRequestReactiveFilter` usando as anotações `io.quarkus.oidc.client.reactive.filter.OidcClientFilter` ou `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` :"

#. type: Plain text
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "or"
msgstr "ou"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"`OidcClientRequestReactiveFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-client-reactive-filter.client-name` configuration property.\n"
"You can also select `OidcClient` by setting the `value` attribute of the `@OidcClientFilter` annotation. The client name set through annotation has higher priority than the `quarkus.oidc-client-reactive-filter.client-name` configuration property.\n"
"For example, given <<use-oidc-clients,this>> `jwt-secret` named OIDC client declaration, you can refer to this client like this:"
msgstr "`OidcClientRequestReactiveFilter` usa um `OidcClient` padrão por padrão. Um `OidcClient` nomeado pode ser selecionado com uma propriedade de configuração `quarkus.oidc-client-reactive-filter.client-name` . O senhor também pode selecionar `OidcClient` definindo o atributo `value` da anotação `@OidcClientFilter` . O nome do cliente definido por meio da anotação tem prioridade mais alta do que a propriedade de configuração `quarkus.oidc-client-reactive-filter.client-name` . Por exemplo, dada xref:use-oidc-clients[essa] declaração de cliente OIDC chamada `jwt-secret` , o senhor pode se referir a esse cliente da seguinte forma:"

#. type: Title ===
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Use OidcClient in RestClient ClientFilter"
msgstr "Usar o OidcClient no RestClient ClientFilter"

#. type: Plain text
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`quarkus-oidc-client-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestFilter` Jakarta REST ClientRequestFilter which uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization` `Bearer` scheme value."
msgstr "`quarkus-oidc-client-filter` A extensão fornece `io.quarkus.oidc.client.filter.OidcClientRequestFilter` Jakarta REST ClientRequestFilter que usa `OidcClient` para adquirir o token de acesso, atualizá-lo, se necessário, e defini-lo como um valor de esquema HTTP `Authorization` `Bearer` ."

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "By default, this filter will get `OidcClient` to acquire the first pair of access and refresh tokens at its initialization time. If the access tokens are short-lived and refresh tokens are unavailable, then the token acquisition should be delayed with `quarkus.oidc-client.early-tokens-acquisition=false`."
msgstr "Por padrão, esse filtro receberá `OidcClient` para adquirir o primeiro par de tokens de acesso e atualização no momento da inicialização. Se os tokens de acesso tiverem vida curta e os tokens de atualização não estiverem disponíveis, a aquisição do token deverá ser adiada com `quarkus.oidc-client.early-tokens-acquisition=false` ."

#. type: Plain text
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You can selectively register `OidcClientRequestFilter` by using either `io.quarkus.oidc.client.filter.OidcClientFilter` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotations:"
msgstr "O senhor pode registrar seletivamente `OidcClientRequestFilter` usando as anotações `io.quarkus.oidc.client.filter.OidcClientFilter` ou `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` :"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Alternatively, `OidcClientRequestFilter` can be registered automatically with all MP Rest or Jakarta REST clients if the `quarkus.oidc-client-filter.register-filter=true` property is set."
msgstr "Como alternativa, `OidcClientRequestFilter` pode ser registrado automaticamente com todos os clientes MP Rest ou Jakarta REST se a propriedade `quarkus.oidc-client-filter.register-filter=true` estiver definida."

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"`OidcClientRequestFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-client-filter.client-name` configuration property.\n"
"You can also select `OidcClient` by setting the `value` attribute of the `@OidcClientFilter` annotation. The client name set through annotation has higher priority than the `quarkus.oidc-client-filter.client-name` configuration property.\n"
"For example, given <<use-oidc-clients,this>> `jwt-secret` named OIDC client declaration, you can refer to this client like this:"
msgstr "`OidcClientRequestFilter` usa um `OidcClient` padrão por padrão. Um `OidcClient` nomeado pode ser selecionado com uma propriedade de configuração `quarkus.oidc-client-filter.client-name` . O senhor também pode selecionar `OidcClient` definindo o atributo `value` da anotação `@OidcClientFilter` . O nome do cliente definido por meio da anotação tem prioridade mais alta do que a propriedade de configuração `quarkus.oidc-client-filter.client-name` . Por exemplo, dada xref:use-oidc-clients[essa] declaração de cliente OIDC chamada `jwt-secret` , o senhor pode se referir a esse cliente da seguinte forma:"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Use a custom RestClient ClientFilter"
msgstr "Usar um RestClient ClientFilter personalizado"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If you prefer, you can use your own custom filter and inject `Tokens`:"
msgstr "Se preferir, o senhor pode usar seu próprio filtro personalizado e injetar `Tokens` :"

#. type: Plain text
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "The `Tokens` producer will acquire and refresh the tokens, and the custom filter will decide how and when to use the token."
msgstr "O produtor do `Tokens` adquirirá e atualizará os tokens, e o filtro personalizado decidirá como e quando usar o token."

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You can also inject named `Tokens`, see <<named-oidc-clients,Inject named OidcClient and Tokens>>"
msgstr "O senhor também pode injetar o nome `Tokens` , consulte xref:named-oidc-clients[Injetar o nome OidcClient e Tokens]"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Refreshing access tokens"
msgstr "Atualização de tokens de acesso"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"`OidcClientRequestReactiveFilter`, `OidcClientRequestFilter` and `Tokens` producers will refresh the current expired access token if the refresh token is available.\n"
"Additionally, the `quarkus.oidc-client.refresh-token-time-skew` property can be used for a preemptive access token refreshment to avoid sending nearly expired access tokens that might cause HTTP 401 errors. For example, if this property is set to `3S` and the access token will expire in less than 3 seconds, then this token will be auto-refreshed."
msgstr "`OidcClientRequestReactiveFilter` Os produtores `OidcClientRequestFilter` e `Tokens` atualizarão o token de acesso expirado atual se o token de atualização estiver disponível. Além disso, a propriedade `quarkus.oidc-client.refresh-token-time-skew` pode ser usada para uma atualização preventiva do token de acesso para evitar o envio de tokens de acesso quase expirados que possam causar erros HTTP 401. Por exemplo, se essa propriedade for definida como `3S` e o token de acesso expirar em menos de 3 segundos, esse token será atualizado automaticamente."

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If the access token needs to be refreshed, but no refresh token is available, then an attempt is made to acquire a new token by using a configured grant, such as `client_credentials`."
msgstr "Se o token de acesso precisar ser atualizado, mas nenhum token de atualização estiver disponível, será feita uma tentativa de adquirir um novo token usando uma concessão configurada, como `client_credentials` ."

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Some OpenID Connect Providers will not return a refresh token in a `client_credentials` grant response. For example, starting from Keycloak 12, a refresh token will not be returned by default for `client_credentials`. The providers might also restrict the number of times a refresh token can be used."
msgstr "Alguns provedores OpenID Connect não retornarão um token de atualização em uma resposta de concessão `client_credentials` . Por exemplo, a partir do Keycloak 12, um token de atualização não será retornado por padrão para `client_credentials` . Os provedores também podem restringir o número de vezes que um token de atualização pode ser usado."

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Revoking access tokens"
msgstr "Revogação de tokens de acesso"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If your OpenId Connect provider, such as Keycloak, supports a token revocation endpoint, then `OidcClient#revokeAccessToken` can be used to revoke the current access token. The revocation endpoint URL will be discovered alongside the token request URI or can be configured with `quarkus.oidc-client.revoke-path`."
msgstr "Se o provedor do OpenId Connect, como o Keycloak, for compatível com um ponto de extremidade de revogação de token, o site `OidcClient#revokeAccessToken` poderá ser usado para revogar o token de acesso atual. O URL do endpoint de revogação será descoberto junto com o URI de solicitação de token ou pode ser configurado com `quarkus.oidc-client.revoke-path` ."

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You might want to have the access token revoked if using this token with a REST client fails with an HTTP `401` status code or if the access token has already been used for a long time and you would like to refresh it."
msgstr "Talvez o senhor queira revogar o token de acesso se o uso desse token com um cliente REST falhar com um código de status HTTP `401` ou se o token de acesso já tiver sido usado por muito tempo e o senhor quiser atualizá-lo."

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "This can be achieved by requesting a token refresh by using a refresh token. However, if the refresh token is unavailable, you can refresh it by revoking it first and then requesting a new access token."
msgstr "Isso pode ser feito solicitando uma atualização do token usando um token de atualização. No entanto, se o token de atualização não estiver disponível, o senhor poderá atualizá-lo revogando-o primeiro e, em seguida, solicitando um novo token de acesso."

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "OidcClient authentication"
msgstr "Autenticação do OidcClient"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"`OidcClient` has to authenticate to the OpenID Connect Provider for the `client_credentials` and other grant requests to succeed.\n"
"All the https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] options are supported, for example:"
msgstr "`OidcClient` precisa se autenticar no provedor OpenID Connect para que o `client_credentials` e outras solicitações de concessão sejam bem-sucedidas. Todas as opções de link:https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[autenticação de cliente do OIDC] são compatíveis, por exemplo:"

#. type: Plain text
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`client_secret_basic`:"
msgstr "`client_secret_basic` :"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Or with the secret retrieved from a xref:credentials-provider.adoc[CredentialsProvider]:"
msgstr "Ou com o segredo recuperado de um xref:credentials-provider.adoc[CredentialsProvider] :"

#. type: Plain text
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`client_secret_post`:"
msgstr "`client_secret_post` :"

#. type: Plain text
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`client_secret_jwt`, signature algorithm is `HS256`:"
msgstr "`client_secret_jwt` O algoritmo de assinatura é `HS256` :"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Or with the secret retrieved from a xref:credentials-provider.adoc[CredentialsProvider], signature algorithm is `HS256`:"
msgstr "Ou, com o segredo recuperado de um xref:credentials-provider.adoc[CredentialsProvider] , o algoritmo de assinatura é `HS256` :"

#. type: Plain text
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`private_key_jwt` with the PEM key file, signature algorithm is `RS256`:"
msgstr "`private_key_jwt` Com o arquivo de chave PEM, o algoritmo de assinatura é `RS256` :"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`private_key_jwt` with the keystore file, signature algorithm is `RS256`:"
msgstr "`private_key_jwt` Com o arquivo keystore, o algoritmo de assinatura é `RS256` :"

#. type: Plain text
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Using `client_secret_jwt` or `private_key_jwt` authentication methods ensures that no client secret goes over the wire."
msgstr "O uso dos métodos de autenticação `client_secret_jwt` ou `private_key_jwt` garante que nenhum segredo do cliente passe pelo fio."

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Additional JWT authentication options"
msgstr "Opções adicionais de autenticação JWT"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If either `client_secret_jwt` or `private_key_jwt` authentication methods are used, then the JWT signature algorithm, key identifier, audience, subject, and issuer can be customized, for example:"
msgstr "Se os métodos de autenticação `client_secret_jwt` ou `private_key_jwt` forem usados, o algoritmo de assinatura JWT, o identificador de chave, o público, o assunto e o emissor poderão ser personalizados, por exemplo:"

#. type: Title ====
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Apple POST JWT"
msgstr "Apple POST JWT"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Apple OpenID Connect Provider uses a `client_secret_post` method where a secret is a JWT produced with a `private_key_jwt` authentication method but with Apple account-specific issuer and subject properties."
msgstr "O provedor Apple OpenID Connect usa um método `client_secret_post` em que um segredo é um JWT produzido com um método de autenticação `private_key_jwt` , mas com propriedades de emissor e assunto específicas da conta Apple."

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`quarkus-oidc-client` supports a non-standard `client_secret_post_jwt` authentication method, which can be configured as follows:"
msgstr "`quarkus-oidc-client` suporta um método de autenticação não padrão `client_secret_post_jwt` , que pode ser configurado da seguinte forma:"

#. type: Title ====
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Mutual TLS"
msgstr "TLS mútuo"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Some OpenID Connect Providers require that a client is authenticated as part of the mutual TLS (`mTLS`) authentication process."
msgstr "Alguns provedores OpenID Connect exigem que um cliente seja autenticado como parte do processo de autenticação mútua TLS ( `mTLS` )."

#. type: Plain text
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`quarkus-oidc-client` can be configured as follows to support `mTLS`:"
msgstr "`quarkus-oidc-client` pode ser configurado da seguinte forma para suportar `mTLS` :"

#. type: Title ===
#: _guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Testing"
msgstr "Testando"

#. type: Plain text
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Start by adding the following dependencies to your test project:"
msgstr "Comece adicionando as seguintes dependências ao seu projeto de teste:"

#. type: Title ====
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Wiremock"
msgstr "Wiremock"

#. type: Plain text
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Add the following dependencies to your test project:"
msgstr "Adicione as seguintes dependências ao seu projeto de teste:"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Write a Wiremock-based `QuarkusTestResourceLifecycleManager`, for example:"
msgstr "Escreva um `QuarkusTestResourceLifecycleManager` baseado em Wiremock, por exemplo:"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Prepare the REST test endpoints. You can have the test front-end endpoint, which uses the injected MP REST client with a registered OidcClient filter, call the downstream endpoint. This endpoint echoes the token back. For example, see the `integration-tests/oidc-client-wiremock` in the `main` Quarkus repository."
msgstr "Prepare os endpoints de teste REST. O senhor pode fazer com que o endpoint front-end de teste, que usa o cliente MP REST injetado com um filtro OidcClient registrado, chame o endpoint downstream. Esse endpoint ecoa o token de volta. Por exemplo, consulte o site `integration-tests/oidc-client-wiremock` no repositório `main` Quarkus."

#. type: Plain text
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Set `application.properties`, for example:"
msgstr "Defina `application.properties` , por exemplo:"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "And finally, write the test code. Given the Wiremock-based resource above, the first test invocation should return the `access_token_1` access token, which will expire in 4 seconds. Use `awaitility` to wait for about 5 seconds, and now the next test invocation should return the `access_token_2` access token, which confirms the expired `access_token_1` access token has been refreshed."
msgstr "E, por fim, escreva o código de teste. Considerando o recurso baseado em Wiremock acima, a primeira invocação de teste deve retornar o token de acesso `access_token_1` , que expirará em 4 segundos. Use `awaitility` para aguardar cerca de 5 segundos e, agora, a próxima invocação de teste deverá retornar o token de acesso `access_token_2` , o que confirma que o token de acesso `access_token_1` expirado foi atualizado."

#. type: Title ====
#: _guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Keycloak"
msgstr "Keycloak"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If you work with Keycloak, you can use the same approach described in the xref:security-oidc-bearer-token-authentication.adoc#integration-testing-keycloak[OpenID Connect Bearer Token Integration testing] Keycloak section."
msgstr "Se o senhor trabalha com o Keycloak, pode usar a mesma abordagem descrita na seção xref:security-oidc-bearer-token-authentication.adoc#integration-testing-keycloak[Integração do token de portador do OpenID Connect testando] o Keycloak."

#. type: Title ===
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "How to check the errors in the logs"
msgstr "Como verificar os erros nos logs"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Enable `io.quarkus.oidc.client.runtime.OidcClientImpl` `TRACE` level logging to see more details about the token acquisition and refresh errors:"
msgstr "Ative o registro de nível `io.quarkus.oidc.client.runtime.OidcClientImpl` `TRACE` para ver mais detalhes sobre os erros de aquisição e atualização de token:"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Enable `io.quarkus.oidc.client.runtime.OidcClientRecorder` `TRACE` level logging to see more details about the OidcClient initialization errors:"
msgstr "Ative o registro de nível `io.quarkus.oidc.client.runtime.OidcClientRecorder` `TRACE` para ver mais detalhes sobre os erros de inicialização do OidcClient:"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "OIDC request filters"
msgstr "Filtros de solicitação do OIDC"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You can filter OIDC requests made by Quarkus to the OIDC provider by registering one or more `OidcRequestFiler` implementations, which can update or add new request headers. For example, a filter can analyze the request body and add its digest as a new header value:"
msgstr "O senhor pode filtrar as solicitações do OIDC feitas pelo Quarkus ao provedor do OIDC registrando uma ou mais implementações do `OidcRequestFiler` , que podem atualizar ou adicionar novos cabeçalhos de solicitação. Por exemplo, um filtro pode analisar o corpo da solicitação e adicionar seu resumo como um novo valor de cabeçalho:"

#. type: Title ==
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Token Propagation Reactive"
msgstr "Propagação de token Reativo"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "The `quarkus-oidc-token-propagation-reactive` extension provides a RestEasy Reactive Client, `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter`, that simplifies the propagation of authentication information. This client propagates the xref:security-oidc-bearer-token-authentication.adoc[bearer token] present in the currently active request or the token acquired from the xref:security-oidc-code-flow-authentication.adoc[authorization code flow mechanism] as the HTTP `Authorization` header's `Bearer` scheme value."
msgstr "A extensão `quarkus-oidc-token-propagation-reactive` fornece um cliente reativo RestEasy, `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter` , que simplifica a propagação das informações de autenticação. Esse cliente propaga o xref:security-oidc-bearer-token-authentication.adoc[token de portador] presente na solicitação ativa no momento ou o token adquirido do xref:security-oidc-code-flow-authentication.adoc[mecanismo de fluxo de código de autorização] como o valor do esquema `Bearer` do cabeçalho HTTP `Authorization` ."

#. type: Plain text
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You can selectively register `AccessTokenRequestReactiveFilter` by using either `io.quarkus.oidc.token.propagation.AccessToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotation, for example:"
msgstr "O senhor pode registrar seletivamente `AccessTokenRequestReactiveFilter` usando a anotação `io.quarkus.oidc.token.propagation.AccessToken` ou `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` , por exemplo:"

#. type: Plain text
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Additionally, `AccessTokenRequestReactiveFilter` can support a complex application that needs to exchange the tokens before propagating them."
msgstr "Além disso, o site `AccessTokenRequestReactiveFilter` pode oferecer suporte a um aplicativo complexo que precisa trocar os tokens antes de propagá-los."

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If you work with link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] or another OIDC provider that supports a link:https://tools.ietf.org/html/rfc8693[Token Exchange] token grant, then you can configure `AccessTokenRequestReactiveFilter` to exchange the token like this:"
msgstr "Se o senhor trabalha com o link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] ou outro provedor de OIDC compatível com uma concessão de token de link:https://tools.ietf.org/html/rfc8693[troca de] token, poderá configurar o site `AccessTokenRequestReactiveFilter` para trocar o token da seguinte forma:"

#. type: Plain text
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Note `AccessTokenRequestReactiveFilter` will use `OidcClient` to exchange the current token, and you can use `quarkus.oidc-client.grant-options.exchange` to set the additional exchange properties expected by your OpenID Connect Provider."
msgstr "Observação: `AccessTokenRequestReactiveFilter` usará `OidcClient` para trocar o token atual, e o senhor pode usar `quarkus.oidc-client.grant-options.exchange` para definir as propriedades adicionais de troca esperadas pelo seu provedor OpenID Connect."

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If you work with providers such as `Azure` that link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[require using] link:https://www.rfc-editor.org/rfc/rfc7523#section-2.1[JWT bearer token grant] to exchange the current token, then you can configure `AccessTokenRequestReactiveFilter` to exchange the token like this:"
msgstr "Se o senhor trabalha com provedores como `Azure` , que link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[exigem o uso de] link:https://www.rfc-editor.org/rfc/rfc7523#section-2.1[concessão de token de portador JWT] para trocar o token atual, poderá configurar `AccessTokenRequestReactiveFilter` para trocar o token da seguinte forma:"

#. type: Plain text
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`AccessTokenRequestReactiveFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-token-propagation-reactive.client-name` configuration property."
msgstr "`AccessTokenRequestReactiveFilter` usa um `OidcClient` padrão por padrão. Um `OidcClient` nomeado pode ser selecionado com uma propriedade de configuração `quarkus.oidc-token-propagation-reactive.client-name` ."

#. type: Title ==
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "Token Propagation"
msgstr "Propagação de token"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"The `quarkus-oidc-token-propagation` extension provides two Jakarta REST `jakarta.ws.rs.client.ClientRequestFilter` class implementations that simplify the propagation of authentication information.\n"
"`io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` propagates the xref:security-oidc-bearer-token-authentication.adoc[Bearer token] present in the current active request or the token acquired from the xref:security-oidc-code-flow-authentication.adoc[Authorization code flow mechanism], as the HTTP `Authorization` header's `Bearer` scheme value.\n"
"The `io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter` provides the same functionality but, in addition, provides support for JWT tokens."
msgstr "A extensão `quarkus-oidc-token-propagation` fornece duas implementações da classe Jakarta REST `jakarta.ws.rs.client.ClientRequestFilter` que simplificam a propagação das informações de autenticação. `io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` propaga o xref:security-oidc-bearer-token-authentication.adoc[token do portador] presente na solicitação ativa atual ou o token adquirido do xref:security-oidc-code-flow-authentication.adoc[mecanismo de fluxo do código de autorização] como o valor do esquema `Bearer` do cabeçalho HTTP `Authorization` . O `io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter` oferece a mesma funcionalidade, mas, além disso, oferece suporte a tokens JWT."

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "When you need to propagate the current Authorization Code Flow access token, then the immediate token propagation will work well - as the code flow access tokens (as opposed to ID tokens) are meant to be propagated for the current Quarkus endpoint to access the remote services on behalf of the currently authenticated user."
msgstr "Quando o senhor precisar propagar o token de acesso ao fluxo de código de autorização atual, a propagação imediata do token funcionará bem, pois os tokens de acesso ao fluxo de código (em oposição aos tokens de ID) devem ser propagados para que o endpoint atual do Quarkus acesse os serviços remotos em nome do usuário autenticado no momento."

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "However, the direct end-to-end Bearer token propagation should be avoided. For example, `Client -> Service A -> Service B` where `Service B` receives a token sent by `Client` to `Service A`. In such cases, `Service B` cannot distinguish if the token came from `Service A` or from `Client` directly. For `Service B` to verify the token came from `Service A`, it should be able to assert a new issuer and audience claims."
msgstr "No entanto, a propagação direta do token do portador de ponta a ponta deve ser evitada. Por exemplo, `Client → Service A → Service B` onde `Service B` recebe um token enviado por `Client` para `Service A` . Nesses casos, `Service B` não consegue distinguir se o token veio de `Service A` ou de `Client` diretamente. Para que o `Service B` verifique se o token veio do `Service A` , ele deve ser capaz de afirmar um novo emissor e reivindicações de público-alvo."

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Additionally, a complex application might need to exchange or update the tokens before propagating them. For example, the access context might be different when `Service A` is accessing `Service B`. In this case, `Service A` might be granted a narrow or completely different set of scopes to access `Service B`."
msgstr "Além disso, um aplicativo complexo pode precisar trocar ou atualizar os tokens antes de propagá-los. Por exemplo, o contexto de acesso pode ser diferente quando `Service A` estiver acessando `Service B` . Nesse caso, pode ser concedido a `Service A` um conjunto de escopos restrito ou completamente diferente para acessar `Service B` ."

#. type: Plain text
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "The following sections show how `AccessTokenRequestFilter` and `JsonWebTokenRequestFilter` can help."
msgstr "As seções a seguir mostram como `AccessTokenRequestFilter` e `JsonWebTokenRequestFilter` podem ajudar."

#. type: Title ===
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "RestClient AccessTokenRequestFilter"
msgstr "RestClient AccessTokenRequestFilter"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`AccessTokenRequestFilter` treats all tokens as Strings, and as such, it can work with both JWT and opaque tokens."
msgstr "`AccessTokenRequestFilter` trata todos os tokens como Strings e, como tal, pode trabalhar com tokens JWT e opacos."

#. type: Plain text
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You can selectively register `AccessTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.AccessToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
msgstr "O senhor pode registrar seletivamente `AccessTokenRequestFilter` usando `io.quarkus.oidc.token.propagation.AccessToken` ou `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` , por exemplo:"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Alternatively, `AccessTokenRequestFilter` can be registered automatically with all MP Rest or Jakarta REST clients if the `quarkus.oidc-token-propagation.register-filter` property is set to `true` and `quarkus.oidc-token-propagation.json-web-token` property is set to `false` (which is a default value)."
msgstr "Como alternativa, `AccessTokenRequestFilter` pode ser registrado automaticamente com todos os clientes MP Rest ou Jakarta REST se a propriedade `quarkus.oidc-token-propagation.register-filter` for definida como `true` e a propriedade `quarkus.oidc-token-propagation.json-web-token` for definida como `false` (que é um valor padrão)."

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Exchange token before propagation"
msgstr "Trocar o token antes da propagação"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If the current access token needs to be exchanged before propagation and you work with link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] or other OpenID Connect Provider which supports a link:https://tools.ietf.org/html/rfc8693[Token Exchange] token grant, then you can configure `AccessTokenRequestFilter` like this:"
msgstr "Se o token de acesso atual precisar ser trocado antes da propagação e o senhor trabalhar com o link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] ou outro provedor OpenID Connect que ofereça suporte a uma concessão de token de link:https://tools.ietf.org/html/rfc8693[troca de] token, poderá configurar o site `AccessTokenRequestFilter` da seguinte forma:"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If you work with providers such as `Azure` that link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[require using] link:https://www.rfc-editor.org/rfc/rfc7523#section-2.1[JWT bearer token grant] to exchange the current token, then you can configure `AccessTokenRequestFilter` to exchange the token like this:"
msgstr "Se o senhor trabalha com provedores como `Azure` , que link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[exigem o uso de] link:https://www.rfc-editor.org/rfc/rfc7523#section-2.1[concessão de token de portador JWT] para trocar o token atual, poderá configurar `AccessTokenRequestFilter` para trocar o token da seguinte forma:"

#. type: Plain text
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Note `AccessTokenRequestFilter` will use `OidcClient` to exchange the current token, and you can use `quarkus.oidc-client.grant-options.exchange` to set the additional exchange properties expected by your OpenID Connect Provider."
msgstr "Observação: `AccessTokenRequestFilter` usará `OidcClient` para trocar o token atual, e o senhor pode usar `quarkus.oidc-client.grant-options.exchange` para definir as propriedades adicionais de troca esperadas pelo seu provedor OpenID Connect."

#. type: Plain text
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`AccessTokenRequestFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-token-propagation.client-name` configuration property."
msgstr "`AccessTokenRequestFilter` usa um `OidcClient` padrão por padrão. Um `OidcClient` nomeado pode ser selecionado com uma propriedade de configuração `quarkus.oidc-token-propagation.client-name` ."

#. type: Title ===
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy, no-wrap
msgid "RestClient JsonWebTokenRequestFilter"
msgstr "RestClient JsonWebTokenRequestFilter"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Using `JsonWebTokenRequestFilter` is recommended if you work with Bearer JWT tokens where these tokens can have their claims, such as `issuer` and `audience` modified and the updated tokens secured (for example, re-signed) again. It expects an injected `org.eclipse.microprofile.jwt.JsonWebToken` and, therefore, will not work with the opaque tokens. Also, if your OpenID Connect Provider supports a Token Exchange protocol, then it is recommended to use `AccessTokenRequestFilter` instead - as both JWT and opaque bearer tokens can be securely exchanged with `AccessTokenRequestFilter`."
msgstr "Recomenda-se o uso do `JsonWebTokenRequestFilter` se o senhor trabalhar com tokens JWT de portador, em que esses tokens podem ter suas declarações, como `issuer` e `audience` , modificadas e os tokens atualizados protegidos (por exemplo, assinados novamente). Ele espera um `org.eclipse.microprofile.jwt.JsonWebToken` injetado e, portanto, não funcionará com os tokens opacos. Além disso, se o seu provedor OpenID Connect for compatível com um protocolo de troca de tokens, é recomendável usar `AccessTokenRequestFilter` , pois os tokens JWT e opacos podem ser trocados com segurança com `AccessTokenRequestFilter` ."

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`JsonWebTokenRequestFilter` makes it easy for `Service A` implementations to update the injected `org.eclipse.microprofile.jwt.JsonWebToken` with the new `issuer` and `audience` claim values and secure the updated token again with a new signature. The only difficult step is ensuring that `Service A` has a signing key; it should be provisioned from a secure file system or remote secure storage such as Vault."
msgstr "`JsonWebTokenRequestFilter` torna fácil para as implementações do `Service A` atualizar o `org.eclipse.microprofile.jwt.JsonWebToken` injetado com os novos valores de reivindicação `issuer` e `audience` e proteger o token atualizado novamente com uma nova assinatura. A única etapa difícil é garantir que o `Service A` tenha uma chave de assinatura; ela deve ser provisionada a partir de um sistema de arquivos seguro ou de um armazenamento remoto seguro, como o Vault."

#. type: Plain text
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You can selectively register `JsonWebTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.JsonWebToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
msgstr "O senhor pode registrar seletivamente `JsonWebTokenRequestFilter` usando `io.quarkus.oidc.token.propagation.JsonWebToken` ou `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` , por exemplo:"

#. type: Plain text
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Alternatively, `JsonWebTokenRequestFilter` can be registered automatically with all MicroProfile REST or Jakarta REST clients if both `quarkus.oidc-token-propagation.register-filter` and `quarkus.oidc-token-propagation.json-web-token` properties are set to `true`."
msgstr "Como alternativa, `JsonWebTokenRequestFilter` pode ser registrado automaticamente com todos os clientes MicroProfile REST ou Jakarta REST se as propriedades `quarkus.oidc-token-propagation.register-filter` e `quarkus.oidc-token-propagation.json-web-token` estiverem definidas como `true` ."

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Update token before propagation"
msgstr "Atualizar o token antes da propagação"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If the injected token needs to have its `iss` (issuer) or `aud` (audience) claims updated and secured again with a new signature, then you can configure `JsonWebTokenRequestFilter` like this:"
msgstr "Se o token injetado precisar ter suas reivindicações `iss` (emissor) ou `aud` (público) atualizadas e protegidas novamente com uma nova assinatura, o senhor poderá configurar `JsonWebTokenRequestFilter` da seguinte forma:"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "As mentioned, use `AccessTokenRequestFilter` if you work with Keycloak or an OpenID Connect Provider that supports a Token Exchange protocol."
msgstr "Conforme mencionado, use `AccessTokenRequestFilter` se o senhor trabalhar com o Keycloak ou com um provedor OpenID Connect que ofereça suporte a um protocolo de troca de tokens."

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"You can generate the tokens as described in xref:security-oidc-bearer-token-authentication.adoc#integration-testing[OpenID Connect Bearer Token Integration testing] section.\n"
"Prepare the REST test endpoints. You can have the test front-end endpoint, which uses the injected MP REST client with a registered token propagation filter, call the downstream endpoint. For example, see the `integration-tests/oidc-token-propagation` in the `main` Quarkus repository."
msgstr "É possível gerar os tokens conforme descrito na seção xref:security-oidc-bearer-token-authentication.adoc#integration-testing[Teste de integração do token de portador do OpenID Connect] . Prepare os endpoints de teste REST. O senhor pode fazer com que o endpoint de front-end de teste, que usa o cliente MP REST injetado com um filtro de propagação de token registrado, chame o endpoint downstream. Por exemplo, consulte o site `integration-tests/oidc-token-propagation` no repositório `main` Quarkus."

#. type: Plain text
#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "The `quarkus-oidc-token-propagation-reactive` extension provides `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter` which can be used to propagate the current `Bearer` or `Authorization Code Flow` access tokens."
msgstr "A extensão `quarkus-oidc-token-propagation-reactive` fornece `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter` , que pode ser usado para propagar os tokens de acesso atuais `Bearer` ou `Authorization Code Flow` ."

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"The `quarkus-oidc-token-propagation-reactive` extension (as opposed to the non-reactive `quarkus-oidc-token-propagation` extension) does not currently support the exchanging or resigning of the tokens before the propagation.\n"
"However, these features might be added in the future."
msgstr "No momento, a extensão `quarkus-oidc-token-propagation-reactive` (em oposição à extensão não reativa `quarkus-oidc-token-propagation` ) não oferece suporte à troca ou à renúncia dos tokens antes da propagação. No entanto, esses recursos podem ser adicionados no futuro."

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "GraphQL client integration"
msgstr "Integração do cliente GraphQL"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"The `quarkus-oidc-client-graphql` extension provides a way to integrate an OIDC client into xref:smallrye-graphql-client.adoc[GraphQL clients] paralleling the approach used with REST clients.\n"
"When this extension is active, any GraphQL client configured through properties (rather than programmatically by the builder) will use the OIDC client to acquire an access token, which it will then set as the `Authorization` header value.\n"
"The OIDC client will also refresh expired access tokens."
msgstr "A extensão `quarkus-oidc-client-graphql` fornece uma maneira de integrar um cliente OIDC aos xref:smallrye-graphql-client.adoc[clientes GraphQL] , em paralelo à abordagem usada com os clientes REST. Quando essa extensão estiver ativa, qualquer cliente GraphQL configurado por meio de propriedades (em vez de programaticamente pelo construtor) usará o cliente OIDC para adquirir um token de acesso, que será definido como o valor do cabeçalho `Authorization` . O cliente OIDC também atualizará os tokens de acesso expirados."

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "To configure which OIDC client should be used by the GraphQL client, select one of the configured OIDC clients with the `quarkus.oidc-client-graphql.client-name` property, for example:"
msgstr "Para configurar qual cliente OIDC deve ser usado pelo cliente GraphQL, selecione um dos clientes OIDC configurados com a propriedade `quarkus.oidc-client-graphql.client-name` , por exemplo:"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"quarkus.oidc-client-graphql.client-name=oidc-client-for-graphql\n"
"\n"
"# example declaration of the OIDC client itself\n"
"quarkus.oidc-client.oidc-client-for-graphql.auth-server-url=${keycloak.url}\n"
"quarkus.oidc-client.oidc-client-for-graphql.grant.type=password\n"
"quarkus.oidc-client.oidc-client-for-graphql.grant-options.password.username=${username}\n"
"quarkus.oidc-client.oidc-client-for-graphql.grant-options.password.password=${password}\n"
"quarkus.oidc-client.oidc-client-for-graphql.client-id=${quarkus.oidc.client-id}\n"
"quarkus.oidc-client.oidc-client-for-graphql.credentials.client-secret.value=${keycloak.credentials.secret}\n"
"quarkus.oidc-client.oidc-client-for-graphql.credentials.client-secret.method=POST"
msgstr "quarkus.oidc-client-graphql.client-name=oidc-client-for-graphql"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"If you don't specify the `quarkus.oidc-client-graphql.client-name` property,\n"
"GraphQL clients will use the default OIDC client (without an explicit name)."
msgstr "Se o senhor não especificar a propriedade `quarkus.oidc-client-graphql.client-name` , os clientes GraphQL usarão o cliente OIDC padrão (sem um nome explícito)."

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"Specifically for type-safe GraphQL clients, you can override this on a\n"
"per-client basis by annotating the `GraphQLClientApi` interface with\n"
"`@io.quarkus.oidc.client.filter.OidcClientFilter`. For example:"
msgstr "Especificamente para clientes GraphQL type-safe, o senhor pode substituir isso por cliente, anotando a interface `GraphQLClientApi` com `@io.quarkus.oidc.client.filter.OidcClientFilter` . Por exemplo:"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"To be able to use this with a programmatically created GraphQL client, both\n"
"builders (`VertxDynamicGraphQLClientBuilder` and\n"
"`VertxTypesafeGraphQLClientBuilder`) contain a method `dynamicHeader(String,\n"
"Uni<String>`) that allows you to plug in a header that might change for\n"
"every request. To plug an OIDC client into it, use"
msgstr "Para poder usar isso com um cliente GraphQL criado programaticamente, ambos os construtores ( `VertxDynamicGraphQLClientBuilder` e `VertxTypesafeGraphQLClientBuilder` ) contêm um método ( `dynamicHeader(String, Uni<String>` ) que permite que o senhor insira um cabeçalho que pode mudar a cada solicitação. Para conectar um cliente OIDC a ele, use"

#. type: Title ==
#: _guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "References"
msgstr "Referências"

#: _guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "xref:security-openid-connect-client.adoc[OpenID Connect client and token propagation quickstart]."
msgstr "xref:security-openid-connect-client.adoc[Início rápido do cliente OpenID Connect e da propagação de tokens] ."

#. type: Plain text
#: _guides/security-openid-connect-client-reference.adoc
msgid "xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication]"
msgstr "link:security-oidc-bearer-token-authentication.html[Autenticação de Token Bearer OIDC]"

#. type: Plain text
#: _guides/security-openid-connect-client-reference.adoc
msgid "xref:security-oidc-code-flow-authentication.adoc[OIDC code flow mechanism for protecting web applications]"
msgstr "xref:security-oidc-code-flow-authentication.adoc[Mecanismo de fluxo de código OIDC para proteger aplicações Web]"

#. type: Plain text
#: _guides/security-openid-connect-client-reference.adoc
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "xref:security-overview.adoc[Visão geral do Quarkus Security]"
