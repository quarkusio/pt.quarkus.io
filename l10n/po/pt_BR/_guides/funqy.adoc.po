# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:24+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/funqy.adoc:6
#, fuzzy, no-wrap
msgid "Funqy"
msgstr "Funqy"

#. type: Plain text
#: upstream/_guides/funqy.adoc:15
#, fuzzy
msgid "Quarkus Funqy is part of Quarkus's serverless strategy and aims to provide a portable Java API to write functions deployable to various FaaS environments like AWS Lambda, Azure Functions, Google Cloud Functions, Knative, and Knative Events (Cloud Events).  It is also usable as a standalone service."
msgstr "O Quarkus Funqy faz parte da estratégia sem servidor da Quarkus e tem como objetivo fornecer uma API Java portátil para escrever funções implantáveis em vários ambientes FaaS, como AWS Lambda, Azure Functions, Google Cloud Functions, Knative e Knative Events (Cloud Events). Também é utilizável como um serviço autónomo."

#. type: Plain text
#: upstream/_guides/funqy.adoc:21
#, fuzzy
msgid "Because Funqy is an abstraction that spans multiple different cloud/function providers and protocols it has to be a very simple API and thus, might not have all the features you are used to in other remoting abstractions.  A nice side effect though is that Funqy is as optimized and as small as possible.  This means that because Funqy sacrifices a little on flexibility, you'll get a framework that has little to no overhead."
msgstr "Como o Funqy é uma abstração que abrange vários provedores e protocolos de nuvem/função diferentes, ele tem que ser uma API muito simples e, portanto, pode não ter todos os recursos com os quais você está acostumado em outras abstrações de remoting. Um bom efeito colateral é que o Funqy é tão otimizado e tão pequeno quanto possível. Isso significa que, como o Funqy sacrifica um pouco da flexibilidade, você terá um framework que tem pouco ou nenhum overhead."

#. type: Title ==
#: upstream/_guides/funqy.adoc:22
#, fuzzy, no-wrap
msgid "Funqy Basics"
msgstr "Noções básicas sobre o Funqy"

#. type: Plain text
#: upstream/_guides/funqy.adoc:26
#, fuzzy
msgid "The Funqy API is simple.  Annotate a method with `@Funq`.  This method may only have one optional input parameter and may or may not return a response."
msgstr "A API Funqy é simples. Anotar um método com `@Funq`. Esse método pode ter apenas um parâmetro de entrada opcional e pode ou não retornar uma resposta."

#. type: delimited block -
#: upstream/_guides/funqy.adoc:30 upstream/_guides/funqy.adoc:100
#: upstream/_guides/funqy.adoc:120
#, no-wrap
msgid "import io.quarkus.funqy.Funq;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy.adoc:37
#, no-wrap
msgid ""
"public class GreetingFunction {\n"
"    @Funq\n"
"    public String greet(String name) {\n"
"       return \"Hello \" + name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy.adoc:43
#, fuzzy
msgid "Java classes can also be used as input and output and must follow the Java bean convention and have a default constructor.  The Java type that is declared as the parameter or return type is the type that will be expected by the Funqy runtime.  Funqy does type introspection at build time to speed up boot time, so any derived types will not be noticed by the Funqy marshalling layer at runtime."
msgstr "As classes Java também podem ser usadas como entrada e saída e devem seguir a convenção Java bean e ter um construtor padrão. O tipo Java que é declarado como parâmetro ou tipo de retorno é o tipo que será esperado pelo tempo de execução do Funqy. O Funqy faz a introspeção de tipos em tempo de construção para acelerar o tempo de inicialização, então qualquer tipo derivado não será percebido pela camada de marshalling do Funqy em tempo de execução."

#. type: Plain text
#: upstream/_guides/funqy.adoc:45
#, fuzzy
msgid "Here's an example of using a POJO as input and output types."
msgstr "Eis um exemplo de utilização de um POJO como tipos de entrada e saída."

#. type: delimited block -
#: upstream/_guides/funqy.adoc:51
#, no-wrap
msgid ""
"public class GreetingFunction {\n"
"    public static class Friend {\n"
"        String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy.adoc:55
#, no-wrap
msgid ""
"        public String getName() { return name; }\n"
"        public void setName(String name) { this.name = name; }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy.adoc:58
#, no-wrap
msgid ""
"    public static class Greeting {\n"
"        String msg;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy.adoc:61
#, no-wrap
msgid ""
"        public Greeting() {}\n"
"        public Greeting(String msg) { this.msg = msg }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy.adoc:65
#, no-wrap
msgid ""
"        public String getMessage() { return msg; }\n"
"        public void setMessage(String msg) { this.msg = msg; }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy.adoc:71
#, no-wrap
msgid ""
"    @Funq\n"
"    public Greeting greet(Friend friend) {\n"
"       return new Greeting(\"Hello \" + friend.getName());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/funqy.adoc:73
#, fuzzy, no-wrap
msgid "Async Reactive Types"
msgstr "Tipos reactivos assíncronos"

#. type: Plain text
#: upstream/_guides/funqy.adoc:77
#, fuzzy
msgid "Funqy supports the https://smallrye.io/smallrye-mutiny[Smallrye Mutiny] `Uni` reactive type as a return type.  The only requirement is that the `Uni` must fill out the generic type."
msgstr "Funqy suporta o tipo reativo  link:https://smallrye.io/smallrye-mutiny[Smallrye Mutiny] `Uni` como um tipo de retorno. O único requisito é que o `Uni` preencha o tipo genérico."

#. type: delimited block -
#: upstream/_guides/funqy.adoc:82
#, no-wrap
msgid ""
"import io.quarkus.funqy.Funq;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy.adoc:84 upstream/_guides/funqy.adoc:102
#: upstream/_guides/funqy.adoc:159
#, no-wrap
msgid "public class GreetingFunction {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy.adoc:90
#, no-wrap
msgid ""
"    @Funq\n"
"    public Uni<Greeting> reactiveGreeting(String name) {\n"
"       ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/funqy.adoc:92
#, fuzzy, no-wrap
msgid "Function Names"
msgstr "Nomes de funções"

#. type: Plain text
#: upstream/_guides/funqy.adoc:96
#, fuzzy
msgid "The function name defaults to the method name and is case-sensitive.  If you want your function referenced by a different name, parameterize the `@Funq` annotation as follows:"
msgstr "O nome da função é predefinido como o nome do método e é sensível a maiúsculas e minúsculas. Se quiser que a sua função seja referenciada por um nome diferente, parametrize a anotação `@Funq` da seguinte forma:"

#. type: delimited block -
#: upstream/_guides/funqy.adoc:108
#, no-wrap
msgid ""
"    @Funq(\"HelloWorld\")\n"
"    public String greet(String name) {\n"
"       return \"Hello \" + name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/funqy.adoc:110
#, fuzzy, no-wrap
msgid "Funqy DI"
msgstr "Funqy DI"

#. type: Plain text
#: upstream/_guides/funqy.adoc:114
#, fuzzy
msgid "Each Funqy Java class is a Quarkus Arc component and supports dependency injection through CDI or Spring DI.  Spring DI requires including the `quarkus-spring-di` dependency in your build."
msgstr "Cada classe Java Funqy é um componente Quarkus Arc e suporta injeção de dependência através de CDI ou Spring DI. O Spring DI requer a inclusão da dependência `quarkus-spring-di` na sua construção."

#. type: Plain text
#: upstream/_guides/funqy.adoc:116
#, fuzzy
msgid "The default object lifecycle for a Funqy class is `@Dependent`."
msgstr "O ciclo de vida do objeto predefinido para uma classe Funqy é `@Dependent`."

#. type: delimited block -
#: upstream/_guides/funqy.adoc:123
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy.adoc:126
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class GreetingFunction {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy.adoc:129
#, no-wrap
msgid ""
"    @Inject\n"
"    GreetingService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy.adoc:137
#, no-wrap
msgid ""
"    @Funq\n"
"    public Greeting greet(Friend friend) {\n"
"        Greeting greeting = new Greeting();\n"
"        greeting.setMessage(service.greet(friend.getName()));\n"
"        return greeting;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/funqy.adoc:139
#, fuzzy, no-wrap
msgid "Context injection"
msgstr "Injeção de contexto"

#. type: Plain text
#: upstream/_guides/funqy.adoc:145
#, fuzzy
msgid "The Funqy API will usually not allow you to inject or use abstractions that are specific to a protocol (i.e. HTTP) or function API (i.e. AWS Lambda).  There are exceptions to the rule though, and you may be able to inject contextual information that is specific to the environment you are deploying in."
msgstr "A API do Funqy geralmente não permite injetar ou usar abstrações específicas de um protocolo (por exemplo, HTTP) ou API de função (por exemplo, AWS Lambda). No entanto, existem excepções a esta regra e poderá ser possível injetar informações contextuais específicas do ambiente em que está a ser implementado."

#. type: Plain text
#: upstream/_guides/funqy.adoc:147
#, fuzzy
msgid "We do not recommend injecting contextual information specific to a runtime.  Keep your functions portable."
msgstr "Não recomendamos a injeção de informações contextuais específicas de um tempo de execução. Mantenha as suas funções portáteis."

#. type: Plain text
#: upstream/_guides/funqy.adoc:151
#, fuzzy
msgid "Contextual information is injected via the `@Context` annotation which can be used on a function parameter or a class field.  A good example is the `io.quarkus.funqy.knative.events.CloudEvent` interface that comes with our Funqy Knative Cloud Events integration:"
msgstr "As informações contextuais são injectadas através da anotação `@Context`, que pode ser utilizada num parâmetro de função ou num campo de classe. Um bom exemplo é a interface `io.quarkus.funqy.knative.events.CloudEvent` que vem com nossa integração Funqy Knative Cloud Events:"

#. type: delimited block -
#: upstream/_guides/funqy.adoc:157
#, no-wrap
msgid ""
"import io.quarkus.funqy.Funq;\n"
"import io.quarkus.funqy.Context;\n"
"import io.quarkus.funqy.knative.events.CloudEvent;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy.adoc:163
#, no-wrap
msgid ""
"    @Funq\n"
"    public Greeting greet(Friend friend, @Context CloudEvent eventInfo) {\n"
"        System.out.println(\"Received greeting request from: \" eventInfo.getSource());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy.adoc:169
#, no-wrap
msgid ""
"        Greeting greeting = new Greeting();\n"
"        greeting.setMessage(\"Hello \" + friend.getName()));\n"
"        return greeting;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/funqy.adoc:171
#, fuzzy, no-wrap
msgid "Should I Use Funqy?"
msgstr "Devo utilizar o Funqy?"

#. type: Plain text
#: upstream/_guides/funqy.adoc:184
#, fuzzy, no-wrap
msgid ""
"REST over HTTP has become a very common way to write services over the past decade.  While Funqy\n"
"has an HTTP binding it is not a replacement for REST.  Because Funqy has to work across a variety\n"
"of protocols and function cloud platforms, it is very minimalistic and constrained.  For example, if you\n"
"use Funqy you lose the ability to link (think URIs) to the data your functions spit out.  You also\n"
"lose the ability to leverage cool HTTP features like `cache-control` and conditional GETs.  Many\n"
"developers will be ok with that as many won't be using these REST/HTTP features or styles. You'll\n"
"have to make the decision on what camp you are in.  Quarkus does support REST integration (through Jakarta REST,\n"
" Spring MVC, Vert.x Web, and Servlet) with\n"
"various cloud/function providers, but there are some disadvantages of using that approach as well.  For example,\n"
"if you want to do xref:aws-lambda-http.adoc[HTTP with AWS Lambda], this requires you to use the AWS API Gateway which may\n"
"slow down deployment and cold start time or even cost you more.\n"
msgstr "REST sobre HTTP se tornou uma forma muito comum de escrever serviços na última década. Embora o Funqy tenha uma ligação HTTP, ele não é um substituto para o REST. Como o Funqy tem que trabalhar em uma variedade de protocolos e plataformas de nuvem de funções, ele é muito minimalista e restrito. Por exemplo, se você usar Funqy, você perde a capacidade de vincular (pense em URIs) aos dados que suas funções cospem. Também perde a capacidade de aproveitar recursos HTTP legais como `cache-control` e GETs condicionais. Muitos desenvolvedores não se importarão com isso, pois muitos não usarão esses recursos ou estilos REST/HTTP. Terá de decidir em que campo se encontra. O Quarkus suporta a integração REST (por meio de Jakarta REST, Spring MVC, Vert.x Web e Servlet) com vários provedores de nuvem/função, mas também há algumas desvantagens de usar essa abordagem. Por exemplo, se quiser fazer  link:aws-lambda-http.html[HTTP com o AWS Lambda], isso exige o uso do Gateway de API do AWS, o que pode atrasar a implantação e o tempo de inicialização a frio ou até mesmo custar mais."

#. type: Plain text
#: upstream/_guides/funqy.adoc:190
#, fuzzy
msgid "The purpose of Funqy is to allow you to write cross-provider functions so that you can move off of your current function provider if, for instance, they start charging you a lot more for their service.  Another reason you might not want to use Funqy is if you need access specific APIs of the target function environment.  For example, developers often want access to the AWS Context on Lambda.  In this case, we tell them they may be better off using the xref:aws-lambda.adoc[Quarkus AWS Lambda] integration instead."
msgstr "O objetivo do Funqy é permitir-lhe escrever funções entre fornecedores para que possa abandonar o seu fornecedor de funções atual se, por exemplo, este começar a cobrar muito mais pelo seu serviço. Outra razão para não querer usar o Funqy é se precisar de aceder a APIs específicas do ambiente de funções de destino. Por exemplo, os programadores querem frequentemente aceder ao AWS Context no Lambda. Neste caso, dizemos-lhes que talvez seja melhor utilizarem a integração  link:aws-lambda.html[Quarkus AWS Lambda]."
