# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-29 08:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/reactive-event-bus.adoc:6
#, fuzzy, no-wrap
msgid "Using the event bus"
msgstr "Utilizar o barramento de eventos"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:16
#, fuzzy
msgid "Quarkus allows different beans to interact using asynchronous events, thus promoting loose-coupling.  The messages are sent to _virtual addresses_.  It offers 3 types of delivery mechanism:"
msgstr "O Quarkus permite que diferentes beans interajam usando eventos assíncronos, promovendo assim o acoplamento frouxo. As mensagens são enviadas para _endereços virtuais_. Oferece 3 tipos de mecanismos de entrega:"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:18
#, fuzzy
msgid "point-to-point - send the message, one consumer receives it. If several consumers listen to the address, a round-robin is applied;"
msgstr "ponto-a-ponto - enviar a mensagem, um consumidor recebe-a. Se vários consumidores ouvirem o endereço, é aplicado um round-robin;"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:19
#, fuzzy
msgid "publish/subscribe - publish a message, all the consumers listening to the address are receiving the message;"
msgstr "publicar/subscrever - publicar uma mensagem, todos os consumidores que estão a ouvir o endereço estão a receber a mensagem;"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:20
#, fuzzy
msgid "request/reply - send the message and expect a response. The receiver can respond to the message in an asynchronous-fashion"
msgstr "pedido/resposta - enviar a mensagem e esperar uma resposta. O recetor pode responder à mensagem de forma assíncrona"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:22
#, fuzzy
msgid "All these delivery mechanisms are non-blocking, and are providing one of the fundamental brick to build reactive applications."
msgstr "Todos estes mecanismos de entrega são não bloqueantes e constituem um dos elementos fundamentais para a criação de aplicações reactivas."

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:25
#, fuzzy
msgid "The asynchronous message passing feature allows replying to messages which is not supported by Reactive Messaging.  However, it is limited to single-event behavior (no stream) and to local messages."
msgstr "A funcionalidade de passagem assíncrona de mensagens permite responder a mensagens que não são suportadas pelo Reactive Messaging. No entanto, está limitada a um comportamento de evento único (sem fluxo) e a mensagens locais."

#. type: Title ==
#: upstream/_guides/reactive-event-bus.adoc:26
#, fuzzy, no-wrap
msgid "Installing"
msgstr "Instalação"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:30
#, fuzzy
msgid "This mechanism uses the Vert.x EventBus, so you need to enable the `vertx` extension to use this feature.  If you are creating a new project, set the `extensions` parameter are follows:"
msgstr "Este mecanismo utiliza o Vert.x EventBus, pelo que é necessário ativar a extensão `vertx` para utilizar esta funcionalidade. Se estiver a criar um novo projeto, defina o parâmetro `extensions` da seguinte forma:"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:37
#, fuzzy
msgid "If you have an already created project, the `vertx` extension can be added to an existing Quarkus project with the `add-extension` command:"
msgstr "Se tiver um projeto já criado, a extensão `vertx` pode ser adicionada a um projeto Quarkus existente com o comando `add-extension`:"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:42
#, fuzzy
msgid "Otherwise, you can manually add this to the dependencies section of your build file:"
msgstr "Caso contrário, pode adicioná-lo manualmente à secção de dependências do seu ficheiro de compilação:"

#. type: Block title
#: upstream/_guides/reactive-event-bus.adoc:44
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:50
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-vertx</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/reactive-event-bus.adoc:53
#, fuzzy, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:56
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-vertx\")\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/reactive-event-bus.adoc:58
#, fuzzy, no-wrap
msgid "Consuming events"
msgstr "Eventos de consumo"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:61
#, fuzzy
msgid "To consume events, use the `io.quarkus.vertx.ConsumeEvent` annotation:"
msgstr "Para consumir eventos, utilize a anotação `io.quarkus.vertx.ConsumeEvent`:"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:65
#: upstream/_guides/reactive-event-bus.adoc:114
#: upstream/_guides/reactive-event-bus.adoc:240
#: upstream/_guides/reactive-event-bus.adoc:312
#: upstream/_guides/reactive-event-bus.adoc:348
#, no-wrap
msgid "package org.acme.vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:67
#: upstream/_guides/reactive-event-bus.adoc:116
#: upstream/_guides/reactive-event-bus.adoc:350
#, no-wrap
msgid "import io.quarkus.vertx.ConsumeEvent;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:69
#: upstream/_guides/reactive-event-bus.adoc:352
#, no-wrap
msgid "import jakarta.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:72
#: upstream/_guides/reactive-event-bus.adoc:124
#: upstream/_guides/reactive-event-bus.adoc:355
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class GreetingService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:78
#, no-wrap
msgid ""
"    @ConsumeEvent                           // <1>\n"
"    public String consume(String name) {    // <2>\n"
"        return name.toUpperCase();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:80
#, fuzzy
msgid "If not set, the address is the fully qualified name of the bean, for instance, in this snippet it's `org.acme.vertx.GreetingService`."
msgstr "Se não for definido, o endereço é o nome totalmente qualificado do bean, por exemplo, neste excerto é `org.acme.vertx.GreetingService`."

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:81
#, fuzzy
msgid "The method parameter is the message body. If the method returns _something_ it's the message response."
msgstr "O parâmetro do método é o corpo da mensagem. Se o método devolver _algo_, é a resposta da mensagem."

#. type: delimited block =
#: upstream/_guides/reactive-event-bus.adoc:86
#, fuzzy
msgid "By default, the code consuming the event must be _non-blocking_, as it's called on the Vert.x event loop.  If your processing is blocking, use the `blocking` attribute:"
msgstr "Por defeito, o código que consome o evento tem de ser _não bloqueante_, uma vez que é chamado no ciclo de eventos Vert.x. Se o seu processamento for bloqueante, use o atributo `blocking`:"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:93
#, no-wrap
msgid ""
"@ConsumeEvent(value = \"blocking-consumer\", blocking = true)\n"
"void consumeBlocking(String message) {\n"
"    // Something blocking\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:96
#, fuzzy
msgid "Alternatively, you can annotate your method with `@io.smallrye.common.annotation.Blocking`:"
msgstr "Em alternativa, pode anotar o seu método com `@io.smallrye.common.annotation.Blocking`:"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:103
#, no-wrap
msgid ""
"@ConsumeEvent(value = \"blocking-consumer\")\n"
"@Blocking\n"
"void consumeBlocking(String message) {\n"
"    // Something blocking\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:107
#, fuzzy
msgid "When using `@Blocking`, it ignores the value of the `blocking` attribute of `@ConsumeEvent`.  See the xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture documentation] for further details on this topic."
msgstr "Ao utilizar `@Blocking`, ignora o valor do atributo `blocking` de `@ConsumeEvent`. Consulte a  link:quarkus-reactive-architecture.html[documentação da Arquitetura Reactiva Quarkus] para obter mais informações sobre este tópico."

#. type: delimited block =
#: upstream/_guides/reactive-event-bus.adoc:110
#, fuzzy
msgid "Asynchronous processing is also possible by returning either an `io.smallrye.mutiny.Uni` or a `java.util.concurrent.CompletionStage`:"
msgstr "O processamento assíncrono também é possível devolvendo um `io.smallrye.mutiny.Uni` ou um `java.util.concurrent.CompletionStage`:"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:121
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import java.util.concurrent.CompletableFuture;\n"
"import java.util.concurrent.CompletionStage;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:130
#, no-wrap
msgid ""
"    @ConsumeEvent\n"
"    public CompletionStage<String> consume(String name) {\n"
"        // return a CompletionStage completed when the processing is finished.\n"
"        // You can also fail the CompletionStage explicitly\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:137
#, no-wrap
msgid ""
"    @ConsumeEvent\n"
"    public Uni<String> process(String name) {\n"
"        // return an Uni completed when the processing is finished.\n"
"        // You can also fail the Uni explicitly\n"
"    }\n"
"}\n"
msgstr ""

#. type: Block title
#: upstream/_guides/reactive-event-bus.adoc:140
#, fuzzy, no-wrap
msgid "Mutiny"
msgstr "Motim"

#. type: delimited block =
#: upstream/_guides/reactive-event-bus.adoc:144
#, fuzzy
msgid "The previous example uses Mutiny reactive types.  If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr "O exemplo anterior utiliza tipos reactivos Mutiny. Se não estiver familiarizado com o Mutiny, consulte  link:mutiny-primer.html[Mutiny - uma biblioteca de programação reactiva intuitiva]."

#. type: Title ===
#: upstream/_guides/reactive-event-bus.adoc:146
#, fuzzy, no-wrap
msgid "Configuring the address"
msgstr "Configurar o endereço"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:149
#, fuzzy
msgid "The `@ConsumeEvent` annotation can be configured to set the address:"
msgstr "A anotação `@ConsumeEvent` pode ser configurada para definir o endereço:"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:156
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")               // <1>\n"
"public String consume(String name) {\n"
"    return name.toUpperCase();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:158
#, fuzzy
msgid "Receive the messages sent to the `greeting` address"
msgstr "Receber as mensagens enviadas para o endereço `greeting`"

#. type: Title ===
#: upstream/_guides/reactive-event-bus.adoc:159
#, fuzzy, no-wrap
msgid "Replying"
msgstr "Responder"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:163
#, fuzzy
msgid "The _return_ value of a method annotated with `@ConsumeEvent` is used as response to the incoming message.  For instance, in the following snippet, the returned `String` is the response."
msgstr "O valor de _retorno_ de um método anotado com `@ConsumeEvent` é utilizado como resposta à mensagem recebida. Por exemplo, no trecho a seguir, o valor retornado `String` é a resposta."

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:170
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")\n"
"public String consume(String name) {\n"
"    return name.toUpperCase();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:173
#, fuzzy
msgid "You can also return a `Uni<T>` or a `CompletionStage<T>` to handle asynchronous reply:"
msgstr "Também pode devolver um `Uni&amp;lt;T&amp;gt;` ou um `CompletionStage&amp;lt;T&amp;gt;` para tratar a resposta assíncrona:"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:180
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")\n"
"public Uni<String> consume2(String name) {\n"
"    return Uni.createFrom().item(() -> name.toUpperCase()).emitOn(executor);\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/reactive-event-bus.adoc:185
#, fuzzy
msgid "You can inject an `executor` if you use the Context Propagation extension:"
msgstr "Pode injetar um `executor` se utilizar a extensão Context Propagation:"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:188
#, no-wrap
msgid "@Inject ManagedExecutor executor;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:191
#, fuzzy
msgid "Alternatively, you can use the default Quarkus worker pool using:"
msgstr "Em alternativa, pode utilizar o pool de trabalhadores predefinido do Quarkus:"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:195
#, no-wrap
msgid "Executor executor = Infrastructure.getDefaultWorkerPool();\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/reactive-event-bus.adoc:198
#, fuzzy, no-wrap
msgid "Implementing fire and forget interactions"
msgstr "Implementação de interacções \"disparar e esquecer"

#. type: delimited block =
#: upstream/_guides/reactive-event-bus.adoc:203
#, fuzzy
msgid "You don't have to reply to received messages.  Typically, for a _fire and forget_ interaction, the messages are consumed and the sender does not need to know about it.  To implement this, your consumer method just returns `void`"
msgstr "Não é necessário responder às mensagens recebidas. Normalmente, para uma interação do tipo \" _disparar e esquecer_ \", as mensagens são consumidas e o remetente não precisa de saber disso. Para implementar isto, o seu método de consumidor apenas devolve `void`"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:210
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")\n"
"public void consume(String event) {\n"
"    // Do something with the event\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/reactive-event-bus.adoc:212
#, fuzzy, no-wrap
msgid "Dealing with messages"
msgstr "Lidar com mensagens"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:215
#, fuzzy
msgid "As said above, this mechanism is based on the Vert.x event bus. So, you can also use `Message` directly:"
msgstr "Como já foi referido, este mecanismo baseia-se no barramento de eventos Vert.x. Assim, também é possível utilizar diretamente o `Message`:"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:223
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")\n"
"public void consume(Message<String> msg) {\n"
"    System.out.println(msg.address());\n"
"    System.out.println(msg.body());\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/reactive-event-bus.adoc:225
#, fuzzy, no-wrap
msgid "Handling Failures"
msgstr "Tratamento de falhas"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:228
#, fuzzy
msgid "If a method annotated with `@ConsumeEvent` throws an exception then:"
msgstr "Se um método anotado com `@ConsumeEvent` lançar uma exceção, então:"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:230
#, fuzzy
msgid "if a reply handler is set then the failure is propagated back to the sender via an `io.vertx.core.eventbus.ReplyException` with code `ConsumeEvent#FAILURE_CODE` and the exception message,"
msgstr "se for definido um manipulador de resposta, a falha é propagada de volta ao remetente através de um `io.vertx.core.eventbus.ReplyException` com o código `ConsumeEvent#FAILURE_CODE` e a mensagem de exceção,"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:231
#, fuzzy
msgid "if no reply handler is set then the exception is rethrown (and wrapped in a `RuntimeException` if necessary) and can be handled by the default exception handler, i.e. `io.vertx.core.Vertx#exceptionHandler()`."
msgstr "Se não for definido um gestor de resposta, a exceção é novamente lançada (e envolvida num `RuntimeException` se necessário) e pode ser tratada pelo gestor de excepções predefinido, ou seja, `io.vertx.core.Vertx#exceptionHandler()`."

#. type: Title ==
#: upstream/_guides/reactive-event-bus.adoc:232
#, fuzzy, no-wrap
msgid "Sending messages"
msgstr "Envio de mensagens"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:236
#, fuzzy
msgid "Ok, we have seen how to receive messages, let's now switch to the _other side_: the sender.  Sending and publishing messages use the Vert.x event bus:"
msgstr "Ok, já vimos como receber mensagens, vamos agora passar para o _outro lado_: o remetente. O envio e a publicação de mensagens utilizam o barramento de eventos Vert.x:"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:244
#: upstream/_guides/reactive-event-bus.adoc:316
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import io.vertx.mutiny.core.eventbus.EventBus;\n"
"import io.vertx.mutiny.core.eventbus.Message;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:250
#: upstream/_guides/reactive-event-bus.adoc:322
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:253
#: upstream/_guides/reactive-event-bus.adoc:325
#, no-wrap
msgid ""
"@Path(\"/async\")\n"
"public class EventResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:256
#, no-wrap
msgid ""
"    @Inject\n"
"    EventBus bus;                                       // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:265
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    @Path(\"{name}\")\n"
"    public Uni<String> greeting(String name) {\n"
"        return bus.<String>request(\"greeting\", name)        // <2>\n"
"                .onItem().transform(Message::body);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:267
#, fuzzy
msgid "Inject the Event bus"
msgstr "Injetar o barramento de eventos"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:268
#, fuzzy
msgid "Send a message to the address `greeting`. Message payload is `name`"
msgstr "Enviar uma mensagem para o endereço `greeting`. O conteúdo da mensagem é `name`"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:270
#, fuzzy
msgid "The `EventBus` object provides methods to:"
msgstr "O objeto `EventBus` fornece métodos para:"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:272
#, fuzzy
msgid "`send` a message to a specific address - one single consumer receives the message."
msgstr "`send` uma mensagem para um endereço específico - um único consumidor recebe a mensagem."

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:273
#, fuzzy
msgid "`publish` a message to a specific address - all consumers receive the messages."
msgstr "`publish` uma mensagem para um endereço específico - todos os consumidores recebem as mensagens."

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:274
#, fuzzy
msgid "`send` a message and expect reply asynchronously"
msgstr "`send` uma mensagem e esperar resposta de forma assíncrona"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:275
#, fuzzy
msgid "`send` a message and expect reply in a blocking manner"
msgstr "`send` uma mensagem e esperar resposta de uma forma bloqueadora"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:287
#, no-wrap
msgid ""
"// Case 1\n"
"bus.<String>requestAndForget(\"greeting\", name);\n"
"// Case 2\n"
"bus.publish(\"greeting\", name);\n"
"// Case 3\n"
"Uni<String> response = bus.<String>request(\"address\", \"hello, how are you?\")\n"
"        .onItem().transform(Message::body);\n"
"// Case 4\n"
"String response = bus.<String>requestAndAwait(\"greeting\", name).body();\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/reactive-event-bus.adoc:289
#, fuzzy, no-wrap
msgid "Putting things together - bridging HTTP and messages"
msgstr "Juntar as coisas - estabelecer uma ponte entre HTTP e mensagens"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:295
#, fuzzy
msgid "Let's revisit a greeting HTTP endpoint and use asynchronous message passing to delegate the call to a separated bean.  It uses the request/reply dispatching mechanism.  Instead of implementing the business logic inside the Jakarta REST endpoint, we are sending a message.  This message is consumed by another bean and the response is sent using the _reply_ mechanism."
msgstr "Vamos revisitar um ponto de extremidade HTTP de saudação e usar a passagem de mensagem assíncrona para delegar a chamada a um bean separado. Ele usa o mecanismo de envio de solicitação/resposta. Em vez de implementar a lógica comercial dentro do ponto de extremidade Jakarta REST, estamos a enviar uma mensagem. Essa mensagem é consumida por outro bean e a resposta é enviada usando o mecanismo de _resposta_."

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:297
#, fuzzy
msgid "First create a new project using:"
msgstr "Primeiro, crie um novo projeto utilizando:"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:303
#, fuzzy
msgid "You can already start the application in _dev mode_ using:"
msgstr "Já é possível iniciar a aplicação no _modo_ de desenvolvimento utilizando:"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:307
#, fuzzy
msgid "Then, creates a new Jakarta REST resource with the following content:"
msgstr "Em seguida, cria um novo recurso Jakarta REST com o seguinte conteúdo:"

#. type: Block title
#: upstream/_guides/reactive-event-bus.adoc:309
#, fuzzy, no-wrap
msgid "src/main/java/org/acme/vertx/EventResource.java"
msgstr "src/main/java/org/acme/vertx/EventResource.java"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:328
#, no-wrap
msgid ""
"    @Inject\n"
"    EventBus bus;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:337
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    @Path(\"{name}\")\n"
"    public Uni<String> greeting(String name) {\n"
"        return bus.<String>request(\"greeting\", name)            // <1>\n"
"                .onItem().transform(Message::body);            // <2>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:339
#, fuzzy
msgid "send the `name` to the `greeting` address and request a response"
msgstr "enviar o endereço `name` para o endereço `greeting` e solicitar uma resposta"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:340
#, fuzzy
msgid "when we get the response, extract the body and send it to the user"
msgstr "quando obtivermos a resposta, extraímos o corpo e enviamo-lo ao utilizador"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:343
#, fuzzy
msgid "If you call this endpoint, you will wait and get a timeout. Indeed, no one is listening.  So, we need a consumer listening on the `greeting` address. Create a `GreetingService` bean with the following content:"
msgstr "Se chamar este ponto de extremidade, ficará à espera e obterá um timeout. De facto, ninguém está a ouvir. Por isso, precisamos de um consumidor que esteja à escuta no endereço `greeting`. Crie um bean `GreetingService` com o seguinte conteúdo:"

#. type: Block title
#: upstream/_guides/reactive-event-bus.adoc:345
#, fuzzy, no-wrap
msgid "src/main/java/org/acme/vertx/GreetingService.java"
msgstr "src/main/java/org/acme/vertx/GreetingService.java"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:360
#, no-wrap
msgid ""
"    @ConsumeEvent(\"greeting\")\n"
"    public String greeting(String name) {\n"
"        return \"Hello \" + name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:362
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:365
#, fuzzy
msgid "This bean receives the name, and returns the greeting message."
msgstr "Este bean recebe o nome e devolve a mensagem de saudação."

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:367
#, fuzzy
msgid "Now, open your browser to http://localhost:8080/async/Quarkus, and you should see:"
msgstr "Agora, abra o seu browser em  http://localhost:8080/async/Quarkus  e deverá ver:"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:371
#, no-wrap
msgid "Hello Quarkus\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:374
#, fuzzy
msgid "To better understand, let's detail how the HTTP request/response has been handled:"
msgstr "Para melhor compreendermos, vamos detalhar o modo como o pedido/resposta HTTP foi tratado:"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:376
#, fuzzy
msgid "The request is received by the `hello` method"
msgstr "O pedido é recebido pelo método `hello`"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:377
#, fuzzy
msgid "a message containing the _name_ is sent to the event bus"
msgstr "é enviada uma mensagem com o _nome_ para o barramento de eventos"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:378
#, fuzzy
msgid "Another bean receives this message and computes the response"
msgstr "Outro bean recebe esta mensagem e calcula a resposta"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:379
#, fuzzy
msgid "This response is sent back using the reply mechanism"
msgstr "Esta resposta é enviada de volta utilizando o mecanismo de resposta"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:380
#, fuzzy
msgid "Once the reply is received by the sender, the content is written to the HTTP response"
msgstr "Quando a resposta é recebida pelo remetente, o conteúdo é escrito na resposta HTTP"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:382
#, fuzzy
msgid "This application can be packaged using:"
msgstr "Esta aplicação pode ser empacotada utilizando:"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:386
#, fuzzy
msgid "You can also compile it as a native executable with:"
msgstr "Também é possível compilá-lo como um executável nativo com:"

#. type: Title ==
#: upstream/_guides/reactive-event-bus.adoc:389
#, fuzzy, no-wrap
msgid "Using codecs"
msgstr "Utilizar codecs"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:394
#, fuzzy
msgid "The https://vertx.io/docs/vertx-core/java/#event_bus[Vert.x Event Bus] uses codecs to _serialize_ and _deserialize_ objects.  Quarkus provides a default codec for local delivery.  So you can exchange objects as follows:"
msgstr "O  link:https://vertx.io/docs/vertx-core/java/#event_bus[Vert.x Event Bus] utiliza codecs para _serializar_ e _deserializar_ objectos. O Quarkus fornece um codec padrão para entrega local. Assim, é possível trocar objectos da seguinte forma:"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:404
#, no-wrap
msgid ""
"@GET\n"
"@Produces(MediaType.TEXT_PLAIN)\n"
"@Path(\"{name}\")\n"
"public Uni<String> greeting(String name) {\n"
"    return bus.<String>request(\"greeting\", new MyName(name))\n"
"        .onItem().transform(Message::body);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:409
#, no-wrap
msgid ""
"@ConsumeEvent(value = \"greeting\")\n"
"Uni<String> greeting(MyName name) {\n"
"    return Uni.createFrom().item(() -> \"Hello \" + name.getName());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:412
#, fuzzy
msgid "If you want to use a specific codec, you need to explicitly set it on both ends:"
msgstr "Se pretender utilizar um codec específico, tem de o definir explicitamente em ambas as extremidades:"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:423
#, no-wrap
msgid ""
"@GET\n"
"@Produces(MediaType.TEXT_PLAIN)\n"
"@Path(\"{name}\")\n"
"public Uni<String> greeting(String name) {\n"
"    return bus.<String>request(\"greeting\", name,\n"
"        new DeliveryOptions().setCodecName(MyNameCodec.class.getName())) // <1>\n"
"        .onItem().transform(Message::body);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:428
#, no-wrap
msgid ""
"@ConsumeEvent(value = \"greeting\", codec = MyNameCodec.class)            // <2>\n"
"Uni<String> greeting(MyName name) {\n"
"    return Uni.createFrom().item(() -> \"Hello \"+name.getName());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:430
#, fuzzy
msgid "Set the name of the codec to use to send the message"
msgstr "Definir o nome do codec a utilizar para enviar a mensagem"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:430
#, fuzzy
msgid "Set the codec to use to receive the message"
msgstr "Definir o codec a utilizar para receber a mensagem"
