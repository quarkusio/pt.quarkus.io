# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-29 08:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/spring-di.adoc:6
#, fuzzy, no-wrap
msgid "Quarkus Extension for Spring DI API"
msgstr "Extensão Quarkus para a API Spring DI"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:14
#, fuzzy
msgid "While users are encouraged to use CDI annotations for injection, Quarkus provides a compatibility layer for Spring dependency injection in the form of the `spring-di` extension."
msgstr "Embora os utilizadores sejam encorajados a utilizar anotações CDI para injeção, o Quarkus fornece uma camada de compatibilidade para a injeção de dependências do Spring sob a forma da extensão `spring-di`."

#. type: Plain text
#: upstream/_guides/spring-di.adoc:16
#, fuzzy
msgid "This guide explains how a Quarkus application can leverage the well known Dependency Injection annotations included in the Spring Framework."
msgstr "Este guia explica como uma aplicação Quarkus pode aproveitar as bem conhecidas anotações de injeção de dependência incluídas na estrutura Spring."

#. type: Title ==
#: upstream/_guides/spring-di.adoc:17
#, fuzzy, no-wrap
msgid "Prerequisites"
msgstr "Pré-requisitos"

#. type: Title ==
#: upstream/_guides/spring-di.adoc:21
#, fuzzy, no-wrap
msgid "Solution"
msgstr "Solução"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:25
#, fuzzy
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "Recomendamos que siga as instruções nas secções seguintes e crie a aplicação passo a passo. No entanto, pode ir diretamente para o exemplo completo."

#. type: Plain text
#: upstream/_guides/spring-di.adoc:27
#, fuzzy
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Clonar o repositório Git: `git clone {quickstarts-clone-url}`, ou descarregar um {quickstarts-archive-url}[arquivo]."

#. type: Plain text
#: upstream/_guides/spring-di.adoc:29
#, fuzzy
msgid "The solution is located in the `spring-di-quickstart` link:{quickstarts-tree-url}/spring-di-quickstart[directory]."
msgstr "A solução está localizada no  link:{quickstarts-tree-url}/spring-di-quickstart[diretório] `spring-di-quickstart`."

#. type: Title ==
#: upstream/_guides/spring-di.adoc:30
#, fuzzy, no-wrap
msgid "Creating the Maven project"
msgstr "Criar o projeto Maven"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:33
#, fuzzy
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "Primeiro, precisamos de um novo projeto. Crie um novo projeto com o seguinte comando:"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:39
#, fuzzy
msgid "This command generates a project which imports the `spring-di` extension."
msgstr "Este comando gera um projeto que importa a extensão `spring-di`."

#. type: Plain text
#: upstream/_guides/spring-di.adoc:42
#, fuzzy
msgid "If you already have your Quarkus project configured, you can add the `spring-di` extension to your project by running the following command in your project base directory:"
msgstr "Se já tiver o seu projeto Quarkus configurado, pode adicionar a extensão `spring-di` ao seu projeto executando o seguinte comando no diretório de base do seu projeto:"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:47
#, fuzzy
msgid "This will add the following to your build file:"
msgstr "Isto irá adicionar o seguinte ao seu ficheiro de compilação:"

#. type: Block title
#: upstream/_guides/spring-di.adoc:49
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:55
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-spring-di</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/spring-di.adoc:58
#, fuzzy, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:61
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-spring-di\")\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/spring-di.adoc:63
#, fuzzy, no-wrap
msgid "Add beans using Spring annotations"
msgstr "Adicionar beans utilizando anotações do Spring"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:66
#, fuzzy
msgid "Let's proceed to create some beans using various Spring annotations."
msgstr "Vamos continuar a criar alguns beans utilizando várias anotações do Spring."

#. type: Plain text
#: upstream/_guides/spring-di.adoc:69
#, fuzzy
msgid "First we will create a `StringFunction` interface that some of our beans will implement and which will be injected into another bean later on.  Create a `src/main/java/org/acme/spring/di/StringFunction.java` file and set the following content:"
msgstr "Em primeiro lugar, vamos criar uma interface `StringFunction` que alguns dos nossos beans irão implementar e que será injectada noutro bean mais tarde. Crie um ficheiro `src/main/java/org/acme/spring/di/StringFunction.java` e defina o seguinte conteúdo:"

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:73 upstream/_guides/spring-di.adoc:88
#: upstream/_guides/spring-di.adoc:111 upstream/_guides/spring-di.adoc:139
#: upstream/_guides/spring-di.adoc:161 upstream/_guides/spring-di.adoc:205
#, no-wrap
msgid "package org.acme.spring.di;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:75
#, no-wrap
msgid "import java.util.function.Function;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:77
#, no-wrap
msgid "public interface StringFunction extends Function<String, String> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:79 upstream/_guides/spring-di.adoc:254
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-di.adoc:84
#, fuzzy
msgid "With the interface in place, we will add an `AppConfiguration` class which will use the Spring's Java Config style for defining a bean.  It will be used to create a `StringFunction` bean that will capitalize the text passed as parameter.  Create a `src/main/java/org/acme/spring/di/AppConfiguration.java` file with the following content:"
msgstr "Com a interface implementada, adicionaremos uma classe `AppConfiguration` que usará o estilo Java Config do Spring para definir um bean. Ela será usada para criar um bean `StringFunction` que capitalizará o texto passado como parâmetro. Crie um arquivo `src/main/java/org/acme/spring/di/AppConfiguration.java` com o seguinte conteúdo:"

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:91
#, no-wrap
msgid ""
"import org.springframework.context.annotation.Bean;\n"
"import org.springframework.context.annotation.Configuration;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:94
#, no-wrap
msgid ""
"@Configuration\n"
"public class AppConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:100
#, no-wrap
msgid ""
"    @Bean(name = \"capitalizeFunction\")\n"
"    public StringFunction capitalizer() {\n"
"        return String::toUpperCase;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-di.adoc:103
#, fuzzy
msgid "As a Spring developer, you might be tempted to add the `@ComponentScan` annotation in order to define specific packages to scan for additional beans. Do note that `@ComponentScan` is entirely unnecessary since Quarkus performs xref:cdi-reference.adoc#bean_discovery[bean discovery] only in `annotated` mode with no visibility boundaries. Moreover, note that the bean discovery in Quarkus happens at build time.  In the same vein, Quarkus does not support the Spring `@Import` annotation."
msgstr "Como programador Spring, pode sentir-se tentado a adicionar a anotação `@ComponentScan` para definir pacotes específicos para procurar beans adicionais. Observe que `@ComponentScan` é totalmente desnecessário, pois o Quarkus executa  link:cdi-reference.html#bean_discovery[a descoberta de beans] apenas no modo `annotated` sem limites de visibilidade. Além disso, note que a descoberta de beans no Quarkus acontece em tempo de construção. Na mesma linha, o Quarkus não suporta a anotação Spring `@Import`."

#. type: Plain text
#: upstream/_guides/spring-di.adoc:107
#, fuzzy
msgid "Now we define another bean that will implement `StringFunction` using Spring's stereotype annotation style.  This bean will effectively be a no-op bean that simply returns the input as is.  Create a `src/main/java/org/acme/spring/di/NoOpSingleStringFunction.java` file and set the following content:"
msgstr "Agora definimos outro bean que implementará `StringFunction` usando o estilo de anotação de estereótipo do Spring. Esse bean será efetivamente um bean sem operação que simplesmente retorna a entrada como está. Crie um arquivo `src/main/java/org/acme/spring/di/NoOpSingleStringFunction.java` e defina o seguinte conteúdo:"

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:113
#, no-wrap
msgid "import org.springframework.stereotype.Component;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:116
#, no-wrap
msgid ""
"@Component(\"noopFunction\")\n"
"public class NoOpSingleStringFunction implements StringFunction {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:122
#, no-wrap
msgid ""
"    @Override\n"
"    public String apply(String s) {\n"
"        return s;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-di.adoc:126
#, fuzzy
msgid "Quarkus also provides support for injecting configuration values using Spring's `@Value` annotation.  To see that in action, first edit the `src/main/resources/application.properties` with the following content:"
msgstr "O Quarkus também oferece suporte para injetar valores de configuração usando a anotação `@Value` do Spring. Para ver isso em ação, primeiro edite o `src/main/resources/application.properties` com o seguinte conteúdo:"

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:131
#, no-wrap
msgid ""
"# Your configuration properties\n"
"greeting.message = hello\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-di.adoc:134
#, fuzzy
msgid "Next create a new Spring bean in `src/main/java/org/acme/spring/di/MessageProducer.java` with the following content:"
msgstr "Em seguida, crie um novo bean Spring em `src/main/java/org/acme/spring/di/MessageProducer.java` com o seguinte conteúdo:"

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:142
#, no-wrap
msgid ""
"import org.springframework.beans.factory.annotation.Value;\n"
"import org.springframework.stereotype.Service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:145
#, no-wrap
msgid ""
"@Service\n"
"public class MessageProducer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:148
#, no-wrap
msgid ""
"    @Value(\"${greeting.message}\")\n"
"    String message;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:153
#, no-wrap
msgid ""
"    public String getPrefix() {\n"
"        return message;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-di.adoc:157
#, fuzzy
msgid "The final bean we will create ties together all the previous beans.  Create a `src/main/java/org/acme/spring/di/GreeterBean.java` file and copy the following content:"
msgstr "O último bean que vamos criar une todos os beans anteriores. Crie um ficheiro `src/main/java/org/acme/spring/di/GreeterBean.java` e copie o seguinte conteúdo:"

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:166
#, no-wrap
msgid ""
"import org.springframework.beans.factory.annotation.Autowired;\n"
"import org.springframework.beans.factory.annotation.Qualifier;\n"
"import org.springframework.beans.factory.annotation.Value;\n"
"import org.springframework.stereotype.Component;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:169
#, no-wrap
msgid ""
"@Component\n"
"public class GreeterBean {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:171
#, no-wrap
msgid "    private final MessageProducer messageProducer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:175
#, no-wrap
msgid ""
"    @Autowired\n"
"    @Qualifier(\"noopFunction\")\n"
"    StringFunction noopStringFunction;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:179
#, no-wrap
msgid ""
"    @Autowired\n"
"    @Qualifier(\"capitalizeFunction\")\n"
"    StringFunction capitalizerStringFunction;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:182
#, no-wrap
msgid ""
"    @Value(\"${greeting.suffix:!}\")\n"
"    String suffix;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:186
#, no-wrap
msgid ""
"    public GreeterBean(MessageProducer messageProducer) {\n"
"        this.messageProducer = messageProducer;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:192
#, no-wrap
msgid ""
"    public String greet(String name) {\n"
"        final String initialValue = messageProducer.getPrefix() + \" \" + name + suffix;\n"
"        return noopStringFunction.andThen(capitalizerStringFunction).apply(initialValue);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-di.adoc:196
#, fuzzy
msgid "In the code above, we see that both field injection and constructor injection are being used (note that constructor injection does not need the `@Autowired` annotation since there is a single constructor).  Furthermore, the `@Value` annotation on `suffix` has also a default value defined, which in this case will be used since we have not defined `greeting.suffix` in `application.properties`."
msgstr "No código acima, vemos que tanto a injeção de campo quanto a injeção de construtor estão sendo usadas (observe que a injeção de construtor não precisa da anotação `@Autowired`, pois há um único construtor). Além disso, a anotação `@Value` em `suffix` também tem um valor padrão definido, que neste caso será usado, pois não definimos `greeting.suffix` em `application.properties`."

#. type: Title ===
#: upstream/_guides/spring-di.adoc:198
#, fuzzy, no-wrap
msgid "Create the Jakarta REST resource"
msgstr "Criar o recurso Jakarta REST"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:201
#, fuzzy
msgid "Create the `src/main/java/org/acme/spring/di/GreeterResource.java` file with the following content:"
msgstr "Criar o ficheiro `src/main/java/org/acme/spring/di/GreeterResource.java` com o seguinte conteúdo:"

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:207
#, no-wrap
msgid "import org.springframework.beans.factory.annotation.Autowired;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:212
#, no-wrap
msgid ""
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:215
#, no-wrap
msgid ""
"@Path(\"/greeting\")\n"
"public class GreeterResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:218
#, no-wrap
msgid ""
"    @Autowired\n"
"    GreeterBean greeterBean;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:225
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return greeterBean.greet(\"world\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/spring-di.adoc:227
#, fuzzy, no-wrap
msgid "Update the test"
msgstr "Atualizar o teste"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:231
#, fuzzy
msgid "We also need to update the functional test to reflect the changes made to the endpoint.  Edit the `src/test/java/org/acme/spring/di/GreetingResourceTest.java` file and change the content of the `testHelloEndpoint` method to:"
msgstr "Também precisamos atualizar o teste funcional para refletir as alterações feitas no ponto de extremidade. Edite o arquivo `src/test/java/org/acme/spring/di/GreetingResourceTest.java` e altere o conteúdo do método `testHelloEndpoint` para:"

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:237
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:240
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.CoreMatchers.is;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:243
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class GreetingResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-di.adoc:252
#, no-wrap
msgid ""
"    @Test\n"
"    public void testHelloEndpoint() {\n"
"        given()\n"
"            .when().get(\"/greeting\")\n"
"            .then()\n"
"                .statusCode(200)\n"
"                .body(is(\"HELLO WORLD!\"));\n"
"    }\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/spring-di.adoc:256
#, fuzzy, no-wrap
msgid "Package and run the application"
msgstr "Empacotar e executar a aplicação"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:259
#, fuzzy
msgid "Run the application with:"
msgstr "Executar a aplicação com:"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:263
#, fuzzy
msgid "Open your browser to http://localhost:8080/greeting."
msgstr "Abra o seu browser em  http://localhost:8080/greeting"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:265
#, fuzzy
msgid "The result should be: `HELLO WORLD!`."
msgstr "O resultado deve ser: `HELLO WORLD!`."

#. type: Title ==
#: upstream/_guides/spring-di.adoc:266
#, fuzzy, no-wrap
msgid "Run the application as a native"
msgstr "Executar a aplicação como uma aplicação nativa"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:269
#, fuzzy
msgid "You can of course create a native image using instructions similar to xref:building-native-image.adoc[this] guide."
msgstr "É claro que pode criar uma imagem nativa utilizando instruções semelhantes às  link:building-native-image.html[deste] guia."

#. type: Title ==
#: upstream/_guides/spring-di.adoc:270
#, fuzzy, no-wrap
msgid "Important Technical Note"
msgstr "Nota técnica importante"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:278
#, fuzzy
msgid "Please note that the Spring support in Quarkus does not start a Spring Application Context nor are any Spring infrastructure classes run.  Spring classes and annotations are only used for reading metadata and / or are used as user code method return types or parameter types.  What that means for end users, is that adding arbitrary Spring libraries will not have any effect. Moreover, Spring infrastructure classes (like `org.springframework.beans.factory.config.BeanPostProcessor` , `org.springframework.context.ApplicationContext` for example) will not be executed.  Regarding the dependency injection in particular, Quarkus uses a Dependency Injection mechanism (called ArC) based on the https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html[Contexts and Dependency Injection for Java 2.0] specification. If you want to learn more about it, we recommend you to read the xref:cdi.adoc[Quarkus introduction to CDI] and the xref:cdi-reference.adoc#arc-configuration-reference[CDI reference guide] The various Spring Boot test features are not supported by Quarkus. For testing purposes, please, check the xref:getting-started-testing.adoc[Quarkus testing guide]."
msgstr "Tenha em atenção que o suporte do Spring no Quarkus não inicia um contexto de aplicação do Spring nem são executadas quaisquer classes de infraestrutura do Spring. As classes e anotações do Spring são apenas utilizadas para ler metadados e/ou são utilizadas como tipos de retorno de métodos de código do utilizador ou tipos de parâmetros. O que isso significa para os utilizadores finais é que adicionar bibliotecas arbitrárias do Spring não terá qualquer efeito. Além disso, as classes de infraestrutura do Spring (como `org.springframework.beans.factory.config.BeanPostProcessor`, `org.springframework.context.ApplicationContext`, por exemplo) não serão executadas. No que diz respeito à injeção de dependências em particular, o Quarkus utiliza um mecanismo de injeção de dependências (denominado ArC) baseado na especificação  link:https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html[Contexts and Dependency Injection for Java 2.0]. Se quiser saber mais sobre isso, recomendamos que leia a  link:cdi.html[introdução do Quarkus ao CDI] e o  link:cdi-reference.html#arc-configuration-reference[guia de referência do CDI] Os vários recursos de teste do Spring Boot não são suportados pelo Quarkus. Para fins de teste, consulte o  link:getting-started-testing.html[guia de teste do Quarkus]."

#. type: Plain text
#: upstream/_guides/spring-di.adoc:280
#, fuzzy
msgid "Some known limitations:"
msgstr "Algumas limitações conhecidas:"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:282
#, fuzzy
msgid "In case of ambiguity, Spring uses a fallback match of the bean name against the injection point field name or parameter name."
msgstr "Em caso de ambiguidade, o Spring utiliza uma correspondência de fallback do nome do bean contra o nome do campo do ponto de injeção ou o nome do parâmetro."

#. type: Plain text
#: upstream/_guides/spring-di.adoc:283
#, fuzzy
msgid "This is not supported, thus `@Named` annotation needs to be used to explicitly solve any ambiguity."
msgstr "Isto não é suportado, pelo que é necessário utilizar a anotação `@Named` para resolver explicitamente qualquer ambiguidade."

#. type: Plain text
#: upstream/_guides/spring-di.adoc:284
#, fuzzy
msgid "Injecting all beans of a particular type is limited to `List<Bean>`. Injecting `Set<Bean>` or `Map<String, Bean>` is not supported."
msgstr "A injeção de todos os beans de um determinado tipo está limitada a `List&amp;lt;Bean&amp;gt;`. A injeção de `Set&amp;lt;Bean&amp;gt;` ou `Map&amp;lt;String, Bean&amp;gt;` não é suportada."

#. type: Plain text
#: upstream/_guides/spring-di.adoc:285
#, fuzzy
msgid "Optional injection using `@Autowired(required=false)` is not supported. Use `javax.enterprise.inject.Instance` and then test `Instance.isResolvable()`."
msgstr "A injeção opcional utilizando `@Autowired(required=false)` não é suportada. Utilize `javax.enterprise.inject.Instance` e, em seguida, teste `Instance.isResolvable()`."

#. type: Plain text
#: upstream/_guides/spring-di.adoc:286
#, fuzzy
msgid "`@Conditional` is ignored, since dependency injection gets resolved at build time. An alternative is to use xref:cdi-reference.adoc#enable_build_profile[conditional build profiles]."
msgstr "`@Conditional` é ignorado, uma vez que a injeção de dependência é resolvida em tempo de construção. Uma alternativa é usar  link:cdi-reference.html#enable_build_profile[perfis de compilação condicionais]."

#. type: Title ==
#: upstream/_guides/spring-di.adoc:287
#, fuzzy, no-wrap
msgid "Conversion Table"
msgstr "Tabela de conversão"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:290
#, fuzzy
msgid "The following table shows how Spring DI annotations can be converted to CDI and / or MicroProfile annotations."
msgstr "A tabela seguinte mostra como as anotações Spring DI podem ser convertidas em anotações CDI e/ou MicroProfile."

#. type: Table
#: upstream/_guides/spring-di.adoc:292
#, fuzzy, no-wrap
msgid "Spring"
msgstr "primavera"

#. type: Table
#: upstream/_guides/spring-di.adoc:292
#, fuzzy, no-wrap
msgid "CDI / MicroProfile"
msgstr "CDI / Microperfil"

#. type: Table
#: upstream/_guides/spring-di.adoc:294
#, fuzzy, no-wrap
msgid "Comments"
msgstr "Comentários"

#. type: Table
#: upstream/_guides/spring-di.adoc:295
#, fuzzy, no-wrap
msgid "@Autowired"
msgstr "@Autowired"

#. type: Table
#: upstream/_guides/spring-di.adoc:296
#, fuzzy, no-wrap
msgid "@Inject"
msgstr "@Injetar"

#. type: Table
#: upstream/_guides/spring-di.adoc:298
#, fuzzy, no-wrap
msgid "If the type is `java.util.List`, the `io.quarkus.arc.All` qualifier is added."
msgstr "Se o tipo for `java.util.List`, é acrescentado o qualificador `io.quarkus.arc.All`."

#. type: Table
#: upstream/_guides/spring-di.adoc:299
#, fuzzy, no-wrap
msgid "@Qualifier"
msgstr "@Qualificador"

#. type: Table
#: upstream/_guides/spring-di.adoc:300
#, fuzzy, no-wrap
msgid "@Named"
msgstr "@Nomeado"

#. type: Table
#: upstream/_guides/spring-di.adoc:303
#, fuzzy, no-wrap
msgid "@Value"
msgstr "@Valor"

#. type: Table
#: upstream/_guides/spring-di.adoc:304
#, fuzzy, no-wrap
msgid "@ConfigProperty"
msgstr "@ConfigProperty"

#. type: Table
#: upstream/_guides/spring-di.adoc:306
#, fuzzy, no-wrap
msgid "@ConfigProperty doesn't support an expression language the way @Value does, but makes the typical use cases much easier to handle"
msgstr "@ConfigProperty não suporta uma linguagem de expressão como @Value, mas torna os casos de utilização típicos muito mais fáceis de tratar"

#. type: Table
#: upstream/_guides/spring-di.adoc:307
#, fuzzy, no-wrap
msgid "@Component"
msgstr "@Componente"

#. type: Table
#: upstream/_guides/spring-di.adoc:308 upstream/_guides/spring-di.adoc:312
#: upstream/_guides/spring-di.adoc:316
#, fuzzy, no-wrap
msgid "@Singleton"
msgstr "@Singleton"

#. type: Table
#: upstream/_guides/spring-di.adoc:310 upstream/_guides/spring-di.adoc:314
#: upstream/_guides/spring-di.adoc:318
#, fuzzy, no-wrap
msgid "By default Spring stereotype annotations are singleton beans"
msgstr "Por predefinição, as anotações de estereótipo do Spring são feijões únicos"

#. type: Table
#: upstream/_guides/spring-di.adoc:311
#, fuzzy, no-wrap
msgid "@Service"
msgstr "@Serviço"

#. type: Table
#: upstream/_guides/spring-di.adoc:315
#, fuzzy, no-wrap
msgid "@Repository"
msgstr "@Repositório"

#. type: Table
#: upstream/_guides/spring-di.adoc:319
#, fuzzy, no-wrap
msgid "@Configuration"
msgstr "@Configuração"

#. type: Table
#: upstream/_guides/spring-di.adoc:320
#, fuzzy, no-wrap
msgid "@ApplicationScoped"
msgstr "@ApplicationScoped"

#. type: Table
#: upstream/_guides/spring-di.adoc:322
#, fuzzy, no-wrap
msgid "In CDI a producer bean isn't limited to the application scope, it could just as well be @Singleton or @Dependent"
msgstr "Em CDI, um bean produtor não se limita ao âmbito da aplicação, podendo também ser @Singleton ou @Dependent"

#. type: Table
#: upstream/_guides/spring-di.adoc:323
#, fuzzy, no-wrap
msgid "@Bean"
msgstr "@Bean"

#. type: Table
#: upstream/_guides/spring-di.adoc:324
#, fuzzy, no-wrap
msgid "@Produces"
msgstr "@Produz"

#. type: Table
#: upstream/_guides/spring-di.adoc:327
#, fuzzy, no-wrap
msgid "@Scope"
msgstr "@Scope"

#. type: Table
#: upstream/_guides/spring-di.adoc:330
#, fuzzy, no-wrap
msgid "Doesn't have a one-to-one mapping to a CDI annotation. Depending on the value of @Scope, one of the @Singleton, @ApplicationScoped, @SessionScoped, @RequestScoped, @Dependent could be used"
msgstr "Não tem um mapeamento um-para-um para uma anotação CDI. Dependendo do valor de @Scope, poderá ser utilizada uma das anotações @Singleton, @ApplicationScoped, @SessionScoped, @RequestScoped, @Dependent"

#. type: Table
#: upstream/_guides/spring-di.adoc:331
#, fuzzy, no-wrap
msgid "@ComponentScan"
msgstr "@ComponentScan"

#. type: Table
#: upstream/_guides/spring-di.adoc:334
#, fuzzy, no-wrap
msgid "Doesn't have a one-to-one mapping to a CDI annotation. It is not used in Quarkus because Quarkus does all classpath scanning at build time."
msgstr "Não tem um mapeamento um-para-um para uma anotação CDI. Não é utilizado no Quarkus porque o Quarkus efectua toda a pesquisa de classpath em tempo de construção."

#. type: Table
#: upstream/_guides/spring-di.adoc:335
#, fuzzy, no-wrap
msgid "@Import"
msgstr "@Importar"

#. type: Table
#: upstream/_guides/spring-di.adoc:337
#, fuzzy, no-wrap
msgid "Doesn't have a one-to-one mapping to a CDI annotation."
msgstr "Não tem um mapeamento um-para-um para uma anotação CDI."

#. type: Title ==
#: upstream/_guides/spring-di.adoc:339
#, fuzzy, no-wrap
msgid "Spring DI Configuration Reference"
msgstr "Referência de configuração Spring DI"

#. type: Title ==
#: upstream/_guides/spring-di.adoc:343
#, fuzzy, no-wrap
msgid "More Spring guides"
msgstr "Mais guias da primavera"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:346
#, fuzzy
msgid "Quarkus has more Spring compatibility features. See the following guides for more details:"
msgstr "O Quarkus tem mais funcionalidades de compatibilidade com o Spring. Para mais informações, consulte os seguintes guias:"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:348
#, fuzzy
msgid "xref:spring-web.adoc[Quarkus - Extension for Spring Web]"
msgstr "link:spring-web.html[Quarkus - Extensão para Spring Web]"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:349
#, fuzzy
msgid "xref:spring-data-jpa.adoc[Quarkus - Extension for Spring Data JPA]"
msgstr "link:spring-data-jpa.html[Quarkus - Extensão para Spring Data JPA]"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:350
#, fuzzy
msgid "xref:spring-data-rest.adoc[Quarkus - Extension for Spring Data REST]"
msgstr "link:spring-data-rest.html[Quarkus - Extensão para Spring Data REST]"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:351
#, fuzzy
msgid "xref:spring-security.adoc[Quarkus - Extension for Spring Security]"
msgstr "link:spring-security.html[Quarkus - Extensão para segurança do Spring]"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:352
#, fuzzy
msgid "xref:spring-cloud-config-client.adoc[Quarkus - Reading properties from Spring Cloud Config Server]"
msgstr "link:spring-cloud-config-client.html[Quarkus - Leitura de propriedades do servidor de configuração do Spring Cloud]"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:353
#, fuzzy
msgid "xref:spring-boot-properties.adoc[Quarkus - Extension for Spring Boot properties]"
msgstr "link:spring-boot-properties.html[Quarkus - Extensão para propriedades do Spring Boot]"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:354
#, fuzzy
msgid "xref:spring-cache.adoc[Quarkus - Extension for Spring Cache]"
msgstr "link:spring-cache.html[Quarkus - Extensão para o Spring Cache]"

#. type: Plain text
#: upstream/_guides/spring-di.adoc:354
#, fuzzy
msgid "xref:spring-scheduled.adoc[Quarkus - Extension for Spring Scheduled]"
msgstr "link:spring-scheduled.html[Quarkus - Extensão para a primavera programada]"
