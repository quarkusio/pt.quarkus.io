# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-29 08:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/mutiny-primer.adoc:6
#, fuzzy, no-wrap
msgid "Mutiny - Async for bare mortal"
msgstr "Mutiny - Assíncrono para mortais nus"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:14
#, fuzzy
msgid "https://smallrye.io/smallrye-mutiny[Mutiny] is an intuitive, reactive programming library.  It is the primary model to write reactive applications with Quarkus."
msgstr "link:https://smallrye.io/smallrye-mutiny[Mutiny] é uma biblioteca de programação intuitiva e reactiva. É o principal modelo para escrever aplicações reactivas com o Quarkus."

#. type: Title ==
#: upstream/_guides/mutiny-primer.adoc:15
#, fuzzy, no-wrap
msgid "An event-driven reactive programming API"
msgstr "Uma API de programação reactiva orientada para eventos"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:21
#, fuzzy
msgid "Mutiny is very different from the other reactive programming libraries.  It takes a different approach to design your program.  With Mutiny everything is event-driven: you receive events, and you react to them.  This event-driven aspect embraces the asynchronous nature of distributed systems and provides an elegant and precise way to express continuation."
msgstr "O Mutiny é muito diferente das outras bibliotecas de programação reactiva. Ela adota uma abordagem diferente para projetar seu programa. Com Mutiny tudo é orientado a eventos: você recebe eventos e reage a eles. Este aspeto orientado a eventos abraça a natureza assíncrona dos sistemas distribuídos e fornece uma maneira elegante e precisa de expressar a continuação."

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:23
#, fuzzy
msgid "Mutiny offers two types that are both event-driven and lazy:"
msgstr "O Mutiny oferece dois tipos que são controlados por eventos e preguiçosos:"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:27
#, fuzzy
msgid "A `Uni` emits a single event (an item or a failure).  Unis are convenient to represent asynchronous actions that return 0 or 1 result.  A good example is the result of sending a message to a message broker queue."
msgstr "Um `Uni` emite um único evento (um item ou uma falha). Os Unis são convenientes para representar acções assíncronas que devolvem 0 ou 1 resultado. Um bom exemplo é o resultado do envio de uma mensagem para uma fila de um corretor de mensagens."

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:30
#, fuzzy
msgid "A `Multi` emits multiple events (n items, 1 failure or 1 completion).  Multis can represent streams of items, potentially unbounded.  A good example is receiving messages from a message broker queue."
msgstr "Um `Multi` emite múltiplos eventos (n itens, 1 falha ou 1 conclusão). Os Multis podem representar fluxos de itens, potencialmente ilimitados. Um bom exemplo é a receção de mensagens de uma fila de um corretor de mensagens."

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:36
#, fuzzy
msgid "These two types allow representing any type of interactions.  They are event sources.  You observe them (_subscription_) and you get notified when they emit an item, a failure, or, in the case of a bounded Multi, a completion event.  When you (the subscriber) receive the event, you can process it (e.g., transform it, filter it).  With Mutiny, you are going to write code like _onX().action()_, which reads as “on item X do action”."
msgstr "Estes dois tipos permitem representar qualquer tipo de interação. São fontes de eventos. O utilizador observa-os _(subscrição_) e é notificado quando eles emitem um item, uma falha ou, no caso de um Multi limitado, um evento de conclusão. Quando você (o assinante) recebe o evento, pode processá-lo (por exemplo, transformá-lo, filtrá-lo). Com o Mutiny, vai escrever código como _onX().action()_, que se lê como \"on item X do action\"."

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:38
#, fuzzy
msgid "If you want to know more about Mutiny, and the concepts behind it, check https://smallrye.io/smallrye-mutiny/latest/reference/why-is-asynchronous-important[the Mutiny Reference documentation]."
msgstr "Se quiser saber mais sobre o Mutiny e os conceitos por trás dele, consulte  link:https://smallrye.io/smallrye-mutiny/latest/reference/why-is-asynchronous-important[a documentação de referência do Mutiny]."

#. type: Title ==
#: upstream/_guides/mutiny-primer.adoc:39
#, fuzzy, no-wrap
msgid "Mutiny in Quarkus"
msgstr "Motim em Quarkus"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:43
#, fuzzy
msgid "Mutiny is the primary API when dealing with the reactive features from Quarkus.  It means that most extensions support Mutiny either by exposing an API returning Unis and Multis (such as reactive data sources or rest clients) or understanding when your methods return a Uni or a Multi (such as RESTEasy Reactive or Reactive Messaging)."
msgstr "O Mutiny é a API principal quando se lida com as funcionalidades reactivas do Quarkus. Isto significa que a maioria das extensões suporta Mutiny, quer expondo uma API que devolve Unis e Multis (como fontes de dados reactivas ou clientes rest), quer compreendendo quando os seus métodos devolvem um Uni ou um Multi (como RESTEasy Reactive ou Reactive Messaging)."

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:46
#, fuzzy
msgid "These integrations make Mutiny a prominent and cohesive model for every reactive application developed with Quarkus.  In addition, Mutiny architecture allows fine-grain dead-code elimination which improves the memory usage when compiled to native (such as with Quarkus native mode or GraalVM native image compiler)."
msgstr "Estas integrações tornam o Mutiny um modelo proeminente e coeso para todas as aplicações reactivas desenvolvidas com o Quarkus. Além disso, a arquitetura Mutiny permite a eliminação de código morto de grão fino, o que melhora a utilização de memória quando compilado para nativo (tal como com o modo nativo Quarkus ou o compilador de imagem nativa GraalVM)."

#. type: Title ==
#: upstream/_guides/mutiny-primer.adoc:47
#, fuzzy, no-wrap
msgid "Why another reactive programming API?"
msgstr "Porquê outra API de programação reactiva?"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:51
#, fuzzy
msgid "Seasoned reactive developers may wonder why Quarkus introduced yet another reactive programming APIs while there are existing ones.  Mutiny is taking a very different angle:"
msgstr "Os programadores reactivos experientes podem perguntar-se porque é que a Quarkus introduziu mais uma API de programação reactiva quando já existem outras. A Mutiny está a adotar um ângulo muito diferente:"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:56
#, fuzzy, no-wrap
msgid ""
"**Event-Driven** -\n"
"Mutiny places events at the core of its design.\n"
"With Mutiny, you observe events, react to them, and create elegant and readable processing pipelines.\n"
"A Ph.D. in functional programming is not required.\n"
msgstr "*Orientado* a eventos - O Mutiny coloca os eventos no centro do seu design. Com Mutiny, você observa eventos, reage a eles e cria pipelines de processamento elegantes e legíveis. Não é necessário um Ph.D. em programação funcional."

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:59
#, fuzzy, no-wrap
msgid ""
"**Navigable** - Even with intelligent code completion, classes with hundreds of methods are confusing.\n"
"Mutiny provides a navigable and explicit API driving you towards the operator you need.\n"
msgstr "*Navegável* - Mesmo com o recurso inteligente de autocompletar código, classes com centenas de métodos são confusas. O Mutiny fornece uma API navegável e explícita que o conduz ao operador de que necessita."

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:62
#, fuzzy, no-wrap
msgid ""
"**Non-Blocking I/O** - Mutiny is the perfect companion to tame the asynchronous nature of applications with non-blocking I/O (which powers xref:quarkus-reactive-architecture.adoc[Quarkus]).\n"
"Declaratively compose operations, transform data, enforce progress, recover from failures, and more.\n"
msgstr "*E/S sem bloqueio* - O Mutiny é o companheiro perfeito para domar a natureza assíncrona das aplicações com E/S sem bloqueio (que alimenta  link:quarkus-reactive-architecture.html[o Quarkus]). Componha operações de forma declarativa, transforme dados, imponha progresso, recupere-se de falhas e muito mais."

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:64
#, fuzzy, no-wrap
msgid "**Made for an asynchronous world** - Mutiny can be used in any asynchronous application such as event-driven microservices, message-based applications, network utilities, data stream processing, and of course... reactive applications!\n"
msgstr "*Criado para um mundo assíncrono* - o Mutiny pode ser utilizado em qualquer aplicação assíncrona, como microsserviços orientados para eventos, aplicações baseadas em mensagens, utilitários de rede, processamento de fluxos de dados e, claro... aplicações reactivas!"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:67
#, fuzzy, no-wrap
msgid ""
"**Reactive Streams and Converters Built-In** - Mutiny is based on the https://www.reactive-streams.org/[Reactive Streams] specification, and so it can be integrated with any other reactive programming library.\n"
"In addition, it proposes converters to interact with other popular libraries.\n"
msgstr "Fluxos *Reactivos e Conversores Integrados* - O Mutiny é baseado na especificação de  link:https://www.reactive-streams.org/[Fluxos Reactivos], pelo que pode ser integrado com qualquer outra biblioteca de programação reactiva. Além disso, propõe conversores para interagir com outras bibliotecas populares."

#. type: Title ==
#: upstream/_guides/mutiny-primer.adoc:68
#, fuzzy, no-wrap
msgid "Mutiny and the I/O Threads"
msgstr "Motim e os fios de E/S"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:74
#, fuzzy
msgid "Quarkus is powered by a xref:quarkus-reactive-architecture.adoc#engine[reactive engine], and when developing a reactive application, your code is executed on one of the few I/O threads.  Remember, you must never block these threads, and the model would collapse if you do.  So, you can't use blocking I/O.  Instead, you need to schedule the I/O operation and pass a continuation."
msgstr "O Quarkus é alimentado por um  link:quarkus-reactive-architecture.html#engine[motor reativo] e, ao desenvolver uma aplicação reactiva, o seu código é executado numa das poucas threads de E/S. Lembre-se de que nunca deve bloquear estas threads e o modelo entrará em colapso se o fizer. Portanto, não é possível usar E/S de bloqueio. Em vez disso, é necessário agendar a operação de E/S e passar uma continuação."

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_guides/mutiny-primer.adoc:75
#, fuzzy, no-wrap
msgid "Reactive"
msgstr "Reativo"

#. type: Target for macro image
#: upstream/_guides/mutiny-primer.adoc:75
#, no-wrap
msgid "reactive-thread.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:81
#, fuzzy
msgid "The Mutiny event-driven paradigm is tailored for this.  When the I/O operation completes successfully, the Uni that represents it emits an item event.  When it fails, it emits a failure event.  The continuation is simply and naturally expressed using the event-driven API."
msgstr "O paradigma orientado a eventos do Mutiny é feito sob medida para isso. Quando a operação de E/S é concluída com êxito, o Uni que a representa emite um evento de item. Quando falha, emite um evento de falha. A continuação é expressa de forma simples e natural usando a API orientada a eventos."

#. type: Title ==
#: upstream/_guides/mutiny-primer.adoc:82
#, fuzzy, no-wrap
msgid "Mutiny through Examples"
msgstr "O motim através de exemplos"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:85
#, fuzzy
msgid "Many Quarkus extensions expose Mutiny APIs. In this section, we use the MongoDB extension to illustrate how to use Mutiny."
msgstr "Muitas extensões do Quarkus expõem as APIs do Mutiny. Nesta secção, utilizamos a extensão MongoDB para ilustrar como utilizar o Mutiny."

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:87
#, fuzzy
msgid "Let's imagine a simple structure representing an element from the https://en.wikipedia.org/wiki/Periodic_table[periodic table]:"
msgstr "Imaginemos uma estrutura simples que representa um elemento da  link:https://en.wikipedia.org/wiki/Periodic_table[tabela periód]ica:"

#. type: delimited block -
#: upstream/_guides/mutiny-primer.adoc:91
#, no-wrap
msgid "public class Element {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mutiny-primer.adoc:95
#, no-wrap
msgid ""
"   public String name;\n"
"   public String symbol;\n"
"   public int position;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mutiny-primer.adoc:101
#, no-wrap
msgid ""
"   public Element(String name, String symbol, int position) {\n"
"       this.name = name;\n"
"       this.symbol = symbol;\n"
"       this.position = position;\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mutiny-primer.adoc:106
#, no-wrap
msgid ""
"   public Element() {\n"
"        // Use by JSON mappers\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:110
#, fuzzy
msgid "This structure contains the name, symbol, and position of the element.  To retrieve and store elements into a Mongo collection, you can use the following code:"
msgstr "Esta estrutura contém o nome, o símbolo e a posição do elemento. Para recuperar e armazenar elementos numa coleção Mongo, pode utilizar o seguinte código:"

#. type: delimited block -
#: upstream/_guides/mutiny-primer.adoc:115
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class ElementService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mutiny-primer.adoc:117
#, no-wrap
msgid "   final ReactiveMongoCollection<Element> collection;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mutiny-primer.adoc:123
#, no-wrap
msgid ""
"   @Inject\n"
"   ElementService(ReactiveMongoClient client) {\n"
"       collection = client.getDatabase(\"quarkus\")\n"
"               .getCollection(\"elements\", Element.class);\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mutiny-primer.adoc:132
#, no-wrap
msgid ""
"   public void add(Element element) {\n"
"       Uni<InsertOneResult> insertion = collection.insertOne(element);\n"
"       insertion\n"
"           .onItem().transform(r -> r.getInsertedId().asString())\n"
"           .subscribe().with(\n"
"               result -> System.out.println(\"inserted \" + result),\n"
"               failure -> System.out.println(\"D'oh\" + failure));\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mutiny-primer.adoc:141
#, no-wrap
msgid ""
"   public void getAll() {\n"
"       collection.find()\n"
"           .subscribe().with(\n"
"              element -> System.out.println(\"Element: \" + element),\n"
"             failure -> System.out.println(\"D'oh! \" + failure),\n"
"             () -> System.out.println(\"No more elements\")\n"
"       );\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mutiny-primer.adoc:143
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:148
#, fuzzy
msgid "First, the Mongo client is injected.  Note that it uses the reactive variant (`io.quarkus.mongodb.reactive.ReactiveMongoClient`).  In the initialize method, we retrieve and store the collection in which elements will be inserted."
msgstr "Primeiro, o cliente Mongo é injetado. Note-se que utiliza a variante reactiva ( `io.quarkus.mongodb.reactive.ReactiveMongoClient`). No método initialize, recuperamos e armazenamos a coleção na qual os elementos serão inseridos."

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:161
#, fuzzy
msgid "The `add` method inserts an element in the collection.  It receives the element as a parameter and uses the reactive API of the collection.  Interacting with the database involves I/Os.  The reactive principles forbid blocking while waiting for the interaction to complete.  Instead, we schedule the operation and pass a continuation.  The `insertOne` method returns a Uni, i.e., an asynchronous operation.  That's the scheduled I/O. We now need to express the continuation, which is done using the `.onItem()` method.  `.onItem()` allows configuring what needs to happen when the observed Uni emits an item, in our case when the scheduled I/Os completes.  In this example, we extract the inserted document id.  The final step is the subscription.  Without it, nothing would ever happen. Subscribing triggers the operation.  The subscription method can also define handlers: the `id` value on success, or a failure when the insertion fails."
msgstr "O método `add` insere um elemento na coleção. Recebe o elemento como parâmetro e utiliza a API reactiva da coleção. A interação com a base de dados envolve I/Os. Os princípios reactivos proíbem o bloqueio enquanto se aguarda a conclusão da interação. Em vez disso, programamos a operação e passamos uma continuação. O método `insertOne` devolve um Uni, ou seja, uma operação assíncrona. Essa é a E/S programada. Agora precisamos de expressar a continuação, o que é feito utilizando o método `.onItem()`. `.onItem()` permite configurar o que precisa de acontecer quando a Uni observada emite um item, no nosso caso quando as E/S agendadas terminam. Neste exemplo, extraímos o ID do documento inserido. O passo final é a subscrição. Sem ela, nada aconteceria. A subscrição desencadeia a operação. O método de subscrição também pode definir manipuladores: o valor `id` em caso de sucesso, ou uma falha quando a inserção falhar."

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:169
#, fuzzy
msgid "Let's now look at the second method.  It retrieves all the stored elements.  In this case, it returns multiple items (one per stored element), so we are using a `Multi`.  As for the insertion, getting the stored elements involves I/Os.  The `find` is our operation.  As for Uni, you need to subscribe to trigger the operation.  The subscriber receives item events, a failure event, or a completion event when all the elements have been received."
msgstr "Vejamos agora o segundo método. Este recupera todos os elementos armazenados. Neste caso, devolve vários itens (um por elemento armazenado), pelo que estamos a utilizar um `Multi`. Quanto à inserção, a obtenção dos elementos armazenados envolve E/S. O `find` é a nossa operação. Quanto à Uni, é necessário subscrever para acionar a operação. O subscritor recebe eventos de itens, um evento de falha ou um evento de conclusão quando todos os elementos tiverem sido recebidos."

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:173
#, fuzzy
msgid "Subscribing to a Uni or a Multi is essential, as without it, the operation is never executed.  In Quarkus some extensions deal with the subscription for you.  For example, in RESTEasy Reactive your HTTP methods can return a Uni or a Multi, and RESTEasy Reactive handles the subscription."
msgstr "A subscrição de uma Uni ou de um Multi é essencial, pois sem ela a operação nunca é executada. No Quarkus, algumas extensões tratam da subscrição por si. Por exemplo, no RESTEasy Reactive os seus métodos HTTP podem devolver um Uni ou um Multi, e o RESTEasy Reactive trata da subscrição."

#. type: Title ==
#: upstream/_guides/mutiny-primer.adoc:174
#, fuzzy, no-wrap
msgid "Mutiny Patterns"
msgstr "Padrões de motim"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:178
#, fuzzy
msgid "The example from the last section was simplistic on purpose.  Let's have a look at a few common patterns."
msgstr "O exemplo da última secção foi simplista de propósito. Vejamos alguns padrões comuns."

#. type: Title ===
#: upstream/_guides/mutiny-primer.adoc:179
#, fuzzy, no-wrap
msgid "Observing events"
msgstr "Observação de eventos"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:182
#, fuzzy
msgid "You can observe the various kind of events using:"
msgstr "Pode observar os vários tipos de eventos utilizando:"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:184
#, fuzzy
msgid "`on{event}().invoke(ev -> System.out.println(ev));`"
msgstr "`on{event}().invoke(ev → System.out.println(ev));`"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:187
#, fuzzy
msgid "For example, for items use: `onItem().invoke(item -> ...);`"
msgstr "Por exemplo, para itens utilizar: `onItem().invoke(item → …​);`"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:190
#, fuzzy
msgid "For failure, use: `onFailure().invoke(failure -> ...)`"
msgstr "Em caso de falha, utilizar: `onFailure().invoke(failure → …​)`"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:195
#, fuzzy
msgid "The `invoke` method is synchronous.  Sometimes you need to execute an asynchronous action.  In this case use `call`, as in: `onItem().call(item -> someAsyncAction(item))`.  Note that `call` does not change the item, it just calls an asynchronous action, and when this one completes, it emits the original item downstream."
msgstr "O método `invoke` é síncrono. Por vezes, é necessário executar uma ação assíncrona. Nesse caso, use `call`, como em: `onItem().call(item → someAsyncAction(item))`. Note que `call` não altera o item, apenas chama uma ação assíncrona e, quando esta termina, emite o item original a jusante."

#. type: Title ===
#: upstream/_guides/mutiny-primer.adoc:196
#, fuzzy, no-wrap
msgid "Transforming item"
msgstr "Item de transformação"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:200
#, fuzzy
msgid "The first instrumental pattern consists of transforming the item events you receive.  As we have seen in the previous section, it could indicate the successful insertion, or the elements stored in the database."
msgstr "O primeiro padrão instrumental consiste em transformar os eventos de item que recebe. Como vimos na secção anterior, pode indicar a inserção bem sucedida ou os elementos armazenados na base de dados."

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:202
#, fuzzy
msgid "Transforming an item is done using: `onItem().transform(item -> ....)`."
msgstr "A transformação de um item é efectuada através de: `onItem().transform(item → …​.)`."

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:204
#, fuzzy
msgid "More details about transformation can be found in the https://smallrye.io/smallrye-mutiny/latest/tutorials/transforming-items/[Mutiny documentation]."
msgstr "Mais pormenores sobre a transformação podem ser encontrados na  link:https://smallrye.io/smallrye-mutiny/latest/tutorials/transforming-items/[documentação do Mutiny]."

#. type: Title ===
#: upstream/_guides/mutiny-primer.adoc:205
#, fuzzy, no-wrap
msgid "Sequential composition"
msgstr "Composição sequencial"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:209
#, fuzzy
msgid "Sequential composition allows chaining dependent asynchronous operations. This is achieved using `onItem().transformToUni(item -> ...)`.  Unlike `transform`, the function passed to `transformToUni` returns a Uni."
msgstr "A composição sequencial permite encadear operações assíncronas dependentes. Isto é conseguido utilizando `onItem().transformToUni(item → …​)`. Ao contrário de `transform`, a função passada para `transformToUni` devolve uma Uni."

#. type: delimited block -
#: upstream/_guides/mutiny-primer.adoc:215
#, no-wrap
msgid ""
"Uni<String> uni1 = …\n"
"uni1\n"
".onItem().transformToUni(item -> anotherAsynchronousAction(item));\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:218
#, fuzzy
msgid "More details about asynchronous transformation can be found in the https://smallrye.io/smallrye-mutiny/latest/tutorials/transforming-items-asynchronously/[Mutiny documentation]."
msgstr "Mais pormenores sobre a transformação assíncrona podem ser encontrados na  link:https://smallrye.io/smallrye-mutiny/latest/tutorials/transforming-items-asynchronously/[documentação do Mutiny]."

#. type: Title ===
#: upstream/_guides/mutiny-primer.adoc:219
#, fuzzy, no-wrap
msgid "Failure handling"
msgstr "Tratamento de falhas"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:222
#, fuzzy
msgid "So far we only handle the item events, but handling failure is essential. You can handle failures using `onFailure()`."
msgstr "Até agora, apenas tratámos os eventos de itens, mas o tratamento de falhas é essencial. Pode tratar as falhas utilizando `onFailure()`."

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:224
#, fuzzy
msgid "For example, you can recover with a fallback item using `onFailure().recoverWithItem(fallback)`:"
msgstr "Por exemplo, é possível recuperar com um item de reserva utilizando `onFailure().recoverWithItem(fallback)`:"

#. type: delimited block -
#: upstream/_guides/mutiny-primer.adoc:230
#, no-wrap
msgid ""
"Uni<String> uni1 = …\n"
"uni1\n"
".onFailure().recoverWithItem(“my fallback value”);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:233
#, fuzzy
msgid "You can also retry the operation such as in:"
msgstr "Também é possível tentar novamente a operação, como em:"

#. type: delimited block -
#: upstream/_guides/mutiny-primer.adoc:239
#, no-wrap
msgid ""
"Uni<String> uni1 = …\n"
"uni1\n"
".onFailure().retry().atMost(5);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:242
#, fuzzy
msgid "More info about failure recovery can be found on https://smallrye.io/smallrye-mutiny/latest/tutorials/handling-failures/[the handling failure documentation] and https://smallrye.io/smallrye-mutiny/latest/tutorials/retrying/[the retrying on failures documentation]."
msgstr "Para mais informações sobre a recuperação de falhas, consulte  link:https://smallrye.io/smallrye-mutiny/latest/tutorials/handling-failures/[a documentação sobre o tratamento de falhas] e  link:https://smallrye.io/smallrye-mutiny/latest/tutorials/retrying/[a documentação sobre a repetição de tentativas em caso de falhas]."

#. type: Title ==
#: upstream/_guides/mutiny-primer.adoc:243
#, fuzzy, no-wrap
msgid "Events and Actions"
msgstr "Eventos e acções"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:246
#, fuzzy
msgid "The following tables list the events that you can receive for Uni and Multi. Each of them is associated with its own group (onX). The second table lists the classic action you can do upon an event. Note that some groups offer more possibilities."
msgstr "As tabelas seguintes listam os eventos que pode receber para Uni e Multi. Cada um deles está associado ao seu próprio grupo (onX). A segunda tabela enumera a ação clássica que pode ser executada após um evento. Note que alguns grupos oferecem mais possibilidades."

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:250
#, fuzzy, no-wrap
msgid "Events from the upstream"
msgstr "Eventos a montante"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:252
#, fuzzy, no-wrap
msgid "Events from the downstream"
msgstr "Eventos a jusante"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:253
#, fuzzy, no-wrap
msgid "Uni"
msgstr "Uni"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:254
#, fuzzy, no-wrap
msgid "Subscription (1), Item (0..1), failure (0..1)"
msgstr "Assinatura (1), Item (0...1), falha (0...1)"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:256
#, fuzzy, no-wrap
msgid "Cancellation"
msgstr "Cancelamento"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:257
#, fuzzy, no-wrap
msgid "Multi"
msgstr "Múltiplos"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:258
#, fuzzy, no-wrap
msgid "Subscription (1), Item (0..n), failure (0..1), completion (0..1)"
msgstr "Assinatura (1), Item (0..n), falha (0..1), conclusão (0..1)"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:259
#, fuzzy, no-wrap
msgid "Cancellation, Request"
msgstr "Cancelamento, pedido"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:262
#, fuzzy
msgid "Check the full list of events on https://smallrye.io/smallrye-mutiny/latest/tutorials/observing-events/[the event documentation]."
msgstr "Consulte a lista completa de eventos na  link:https://smallrye.io/smallrye-mutiny/latest/tutorials/observing-events/[documentação do evento]."

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:264
#, fuzzy, no-wrap
msgid "Action"
msgstr "Ação"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:264
#, fuzzy, no-wrap
msgid "API"
msgstr "API"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:266
#, fuzzy, no-wrap
msgid "Comment"
msgstr "Comentário"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:266
#, fuzzy, no-wrap
msgid "transform"
msgstr "transformar"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:266
#, fuzzy, no-wrap
msgid "`onItem().transform(Function<I, O> function);`"
msgstr "`onItem().transform(Function&amp;lt;I, O&amp;gt; function);`"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:268
#, fuzzy, no-wrap
msgid ""
"Transform the event into another event using a synchronous function.\n"
"The downstream receives the result of the function (or a failure if the transformation failed)."
msgstr "Transforma o evento noutro evento utilizando uma função síncrona. O downstream recebe o resultado da função (ou uma falha se a transformação falhar)."

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:268
#, fuzzy, no-wrap
msgid "transformToUni"
msgstr "transformToUni"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:268
#, fuzzy, no-wrap
msgid "`onItem().transformToUni(Function<I, Uni<O>> function);`"
msgstr "`onItem().transformToUni(Function&amp;lt;I, Uni&amp;lt;O&amp;gt;&amp;gt; function);`"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:269
#, fuzzy, no-wrap
msgid "Transform the event into another event using an asynchronous function. The downstream receives the item emitted by the produced Uni (or a failure if the transformation failed). If the produced Uni emits a failure, that failure is passed to the downstream."
msgstr "Transforma o evento num outro evento utilizando uma função assíncrona. A jusante recebe o item emitido pela Uni produzida (ou uma falha se a transformação falhar). Se a Uni produzida emitir uma falha, essa falha é transmitida para o downstream."

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:269
#, fuzzy, no-wrap
msgid "invoke"
msgstr "invocar"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:269
#, fuzzy, no-wrap
msgid "`onItem().invoke(Consumer<I> consumer)`"
msgstr "`onItem().invoke(Consumer&amp;lt;I&amp;gt; consumer)`"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:270
#, fuzzy, no-wrap
msgid "Invokes the synchronous consumer. This is particularly convenient to execute side effects actions. The downstream receives the original event, or a failure if the consumer throws an exception"
msgstr "Invoca o consumidor síncrono. Isto é particularmente conveniente para executar acções com efeitos secundários. O downstream recebe o evento original, ou uma falha se o consumidor lançar uma exceção"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:270
#, fuzzy, no-wrap
msgid "call"
msgstr "chamada"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:270
#, fuzzy, no-wrap
msgid "`onItem().call(Function<I, Uni<?>>)`"
msgstr "`onItem().call(Function&amp;lt;I, Uni&amp;lt;?&amp;gt;&amp;gt;)`"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:271
#, fuzzy, no-wrap
msgid "Invokes the asynchronous function. This is particularly convenient to execute asynchronous side effect actions.The downstream receives the original event, or a failure if the consumer throws an exception or if the produced Uni emits a failure."
msgstr "Invoca a função assíncrona. A jusante recebe o evento original, ou uma falha se o consumidor lançar uma exceção ou se a Uni produzida emitir uma falha."

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:271
#, fuzzy, no-wrap
msgid "fail"
msgstr "falhar"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:271
#, fuzzy, no-wrap
msgid "`onItem().failWith(Function<I, Throwable>)`"
msgstr "`onItem().failWith(Function&amp;lt;I, Throwable&amp;gt;)`"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:272
#, fuzzy, no-wrap
msgid "Emits a failure when it receives the event."
msgstr "Emite uma falha quando recebe o evento."

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:272
#, fuzzy, no-wrap
msgid "complete (Multi only)"
msgstr "completo (apenas Multi)"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:272
#, fuzzy, no-wrap
msgid "`onItem().complete()`"
msgstr "`onItem().complete()`"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:273
#, fuzzy, no-wrap
msgid "Emits the completion event when it receives the event."
msgstr "Emite o evento de conclusão quando recebe o evento."

#. type: Title ===
#: upstream/_guides/mutiny-primer.adoc:275
#, fuzzy, no-wrap
msgid "Other patterns"
msgstr "Outros padrões"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:279
#, fuzzy
msgid "Mutiny provides lots of other features.  Head over to the https://smallrye.io/smallrye-mutiny[Mutiny documentation] to see many more examples, including the whole list of events and how to handle them."
msgstr "O Mutiny oferece muitos outros recursos. Vá até a  link:https://smallrye.io/smallrye-mutiny[documentação do Mutiny] para ver muitos outros exemplos, incluindo a lista completa de eventos e como lidar com eles."

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:281
#, fuzzy
msgid "Some frequently asked guides are the following:"
msgstr "Alguns guias frequentemente solicitados são os seguintes:"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:283
#, fuzzy
msgid "merge vs. concatenation - https://smallrye.io/smallrye-mutiny/latest/guides/merging-and-concatenating-streams/"
msgstr "fusão vs. concatenação -  https://smallrye.io/smallrye-mutiny/latest/guides/merging-and-concatenating-streams/"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:284
#, fuzzy
msgid "controlling the emission thread - https://smallrye.io/smallrye-mutiny/latest/guides/emit-on-vs-run-subscription-on/"
msgstr "controlo do fio de emissão -  https://smallrye.io/smallrye-mutiny/latest/guides/emit-on-vs-run-subscription-on/"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:285
#, fuzzy
msgid "explicit blocking - https://smallrye.io/smallrye-mutiny/latest/guides/imperative-to-reactive/"
msgstr "bloqueio explícito -  https://smallrye.io/smallrye-mutiny/latest/guides/imperative-to-reactive/"

#. type: Title ==
#: upstream/_guides/mutiny-primer.adoc:286
#, fuzzy, no-wrap
msgid "Shortcuts"
msgstr "Atalhos"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:290
#, fuzzy
msgid "When using Uni, having to write `onItem()` can be cumbersome.  Fortunately, Mutiny provides a set of shortcut to make your code more concise:"
msgstr "Ao usar Uni, ter que escrever `onItem()` pode ser complicado. Felizmente, o Mutiny fornece um conjunto de atalhos para tornar o seu código mais conciso:"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:293
#, fuzzy, no-wrap
msgid "Shortcut"
msgstr "Atalho"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:295
#, fuzzy, no-wrap
msgid "Equivalent"
msgstr "Equivalente"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:296
#, fuzzy, no-wrap
msgid "`uni.map(x -> y)`"
msgstr "`uni.map(x → y)`"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:298
#, fuzzy, no-wrap
msgid "`uni.onItem().transform(x -> y)`"
msgstr "`uni.onItem().transform(x → y)`"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:299
#, fuzzy, no-wrap
msgid "`uni.flatMap(x -> uni2)`"
msgstr "`uni.flatMap(x → uni2)`"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:301
#: upstream/_guides/mutiny-primer.adoc:304
#, fuzzy, no-wrap
msgid "`uni.onItem().transformToUni(x -> uni2)`"
msgstr "`uni.onItem().transformToUni(x → uni2)`"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:302
#, fuzzy, no-wrap
msgid "`uni.chain(x -> uni2)`"
msgstr "`uni.chain(x → uni2)`"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:305
#, fuzzy, no-wrap
msgid "`uni.invoke(x -> System.out.println(x))`"
msgstr "`uni.invoke(x → System.out.println(x))`"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:307
#, fuzzy, no-wrap
msgid "`uni.onItem().invoke(x -> System.out.println(x))`"
msgstr "`uni.onItem().invoke(x → System.out.println(x))`"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:308
#, fuzzy, no-wrap
msgid "`uni.call(x -> uni2)`"
msgstr "`uni.call(x → uni2)`"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:310
#, fuzzy, no-wrap
msgid "`uni.onItem().call(x -> uni2)`"
msgstr "`uni.onItem().call(x → uni2)`"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:311
#, fuzzy, no-wrap
msgid "`uni.eventually\\(() -> System.out.println(\"eventually\"))`"
msgstr "`uni.eventually(() → System.out.println(\"eventually\"))`"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:313
#, fuzzy, no-wrap
msgid "`uni.onItemOrFailure().invoke\\((ignoredItem, ignoredException) -> System.out.println(\"eventually\"))`"
msgstr "`uni.onItemOrFailure().invoke((ignoredItem, ignoredException) → System.out.println(\"eventually\"))`"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:314
#, fuzzy, no-wrap
msgid "`uni.eventually(() -> uni2)`"
msgstr "`uni.eventually(() → uni2)`"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:316
#, fuzzy, no-wrap
msgid "`uni.onItemOrFailure().call((ignoredItem, ignoredException) -> uni2)`"
msgstr "`uni.onItemOrFailure().call((ignoredItem, ignoredException) → uni2)`"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:317
#, fuzzy, no-wrap
msgid "`uni.replaceWith(x)`"
msgstr "`uni.replaceWith(x)`"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:319
#, fuzzy, no-wrap
msgid "`uni.onItem().transform(ignored -> x)`"
msgstr "`uni.onItem().transform(ignored → x)`"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:320
#, fuzzy, no-wrap
msgid "`uni.replaceWith(uni2)`"
msgstr "`uni.replaceWith(uni2)`"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:322
#, fuzzy, no-wrap
msgid "`uni.onItem().transformToUni(ignored -> uni2)`"
msgstr "`uni.onItem().transformToUni(ignored → uni2)`"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:323
#, fuzzy, no-wrap
msgid "`uni.replaceIfNullWith(x)`"
msgstr "`uni.replaceIfNullWith(x)`"

#. type: Table
#: upstream/_guides/mutiny-primer.adoc:324
#, fuzzy, no-wrap
msgid "`uni.onItem().ifNull().continueWith(x)`"
msgstr "`uni.onItem().ifNull().continueWith(x)`"

#. type: Title ==
#: upstream/_guides/mutiny-primer.adoc:326
#, fuzzy, no-wrap
msgid "Reactive Streams"
msgstr "Fluxos reactivos"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:334
#, fuzzy
msgid "Mutiny uses https://www.reactive-streams.org/[Reactive Streams].  `Multi` implements `Publisher` and enforces the back-pressure protocol.  Emissions are constrained by the request emitted from the downstream subscribers.  Thus, it does not overload the subscribers.  Note that in some cases, you can’t follow this protocol (because the Multi emits events that can’t be controlled, such as time, or measures sensors).  In this case, Mutiny provides a way to control the overflow using `onOverflow()`."
msgstr "O Mutiny utiliza  link:https://www.reactive-streams.org/[fluxos reactivos]. O `Multi` implementa o `Publisher` e aplica o protocolo de contrapressão. As emissões são limitadas pelo pedido emitido pelos subscritores a jusante. Assim, não sobrecarrega os subscritores. Note-se que, em alguns casos, não é possível seguir este protocolo (porque o Multi emite eventos que não podem ser controlados, como o tempo, ou mede sensores). Nesse caso, o Mutiny fornece uma maneira de controlar o transbordamento usando `onOverflow()`."

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:337
#, fuzzy
msgid "`Uni` does not implement Reactive Streams `Publisher`.  A `Uni` can only emit one event, so subscribing to the `Uni` is enough to express your intent to use the result and does not need the request protocol ceremony."
msgstr "`Uni` não implementa Fluxos Reactivos `Publisher`. Um `Uni` só pode emitir um evento, pelo que a subscrição do `Uni` é suficiente para expressar a sua intenção de utilizar o resultado e não necessita da cerimónia do protocolo de pedido."

#. type: Title ==
#: upstream/_guides/mutiny-primer.adoc:338
#, fuzzy, no-wrap
msgid "Mutiny and Vert.x"
msgstr "Motim e Vert.x"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:343
#, fuzzy
msgid "Vert.x is a toolkit to build reactive applications and systems.  It provides a huge ecosystem of libraries following the reactive principles (i.e., non-blocking and asynchronous).  Vert.x is an essential part of Quarkus, as it provides its reactive capabilities."
msgstr "O Vert.x é um conjunto de ferramentas para construir aplicações e sistemas reactivos. Fornece um enorme ecossistema de bibliotecas que seguem os princípios reactivos (ou seja, não bloqueantes e assíncronos). O Vert.x é uma parte essencial do Quarkus, uma vez que fornece as suas capacidades reactivas."

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:346
#, fuzzy
msgid "In addition, the whole Vert.x API can be used with Quarkus.  To provide a cohesive experience, the Vert.x API is also available using a Mutiny variant, i.e., returns Uni and Multi."
msgstr "Além disso, toda a API Vert.x pode ser utilizada com o Quarkus. Para proporcionar uma experiência coesa, a API Vert.x também está disponível usando uma variante Mutiny, ou seja, retorna Uni e Multi."

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:348
#, fuzzy
msgid "More details about this API can be found on: https://quarkus.io/blog/mutiny-vertx/."
msgstr "Para mais informações sobre esta API, consultar:  https://quarkus.io/blog/mutiny-vertx/"

#. type: Title ==
#: upstream/_guides/mutiny-primer.adoc:349
#, fuzzy, no-wrap
msgid "Mutiny Integration in Quarkus"
msgstr "Integração de motim em Quarkus"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:353
#, fuzzy
msgid "The integration of Mutiny in Quarkus goes beyond just the library.  Mutiny exposes hooks that allow Quarkus and Mutiny to be closely integrated:"
msgstr "A integração do Mutiny no Quarkus vai para além da biblioteca. A Mutiny expõe ganchos que permitem uma integração estreita entre o Quarkus e a Mutiny:"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:355
#, fuzzy
msgid "Calling `await` or `toIterable` would fail if you are running on an I/O thread, preventing blocking the I/O thread;"
msgstr "Chamar `await` ou `toIterable` falharia se estivesse a correr numa thread de E/S, impedindo o bloqueio da thread de E/S;"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:356
#, fuzzy
msgid "The `log()` operator use the Quarkus logger;"
msgstr "O operador do `log()` utiliza o registador Quarkus;"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:357
#, fuzzy
msgid "The default Mutiny thread pool is the Quarkus worker thread pool;"
msgstr "O pool de threads padrão do Mutiny é o pool de threads de trabalho do Quarkus;"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:358
#, fuzzy
msgid "Context Propagation is enabled by default when using Mutiny Uni and Multi"
msgstr "A propagação de contexto é activada por predefinição quando se utiliza Mutiny Uni e Multi"

#. type: Plain text
#: upstream/_guides/mutiny-primer.adoc:360
#, fuzzy
msgid "More details about the infrastructure integration can be found on https://smallrye.io/smallrye-mutiny/latest/guides/framework-integration/."
msgstr "Para mais informações sobre a integração das infra-estruturas, consultar  https://smallrye.io/smallrye-mutiny/latest/guides/framework-integration/"
