# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-29 08:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/software-transactional-memory.adoc:6
#, fuzzy, no-wrap
msgid "Using Software Transactional Memory in Quarkus"
msgstr "Utilização da memória transacional de software no Quarkus"

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:23
#, fuzzy
msgid "Software Transactional Memory (STM) has been around in research environments since the late 1990's and has relatively recently started to appear in products and various programming languages. We won't go into all the details behind STM but the interested reader could look at https://groups.csail.mit.edu/tds/papers/Shavit/ShavitTouitou-podc95.pdf[this paper].  However, suffice it to say that STM offers an approach to developing transactional applications in a highly concurrent environment with some of the same characteristics of ACID transactions, which you've probably already used through JTA. Importantly though, the Durability property is relaxed (removed) within STM implementations, or at least made optional. This is not the situation with JTA, where state changes are made durable to a relational database which supports https://pubs.opengroup.org/onlinepubs/009680699/toc.pdf[the X/Open XA standard]."
msgstr "A Memória Transacional de Software (STM) tem estado presente em ambientes de investigação desde o final dos anos 90 e, há relativamente pouco tempo, começou a aparecer em produtos e em várias linguagens de programação. Não vamos entrar em todos os pormenores da STM, mas o leitor interessado pode consultar  link:https://groups.csail.mit.edu/tds/papers/Shavit/ShavitTouitou-podc95.pdf[este documento]. No entanto, basta dizer que o STM oferece uma abordagem para desenvolver aplicações transaccionais num ambiente altamente concorrente com algumas das mesmas características das transacções ACID, que provavelmente já utilizou através do JTA. No entanto, é importante salientar que a propriedade Durability é relaxada (removida) nas implementações STM ou, pelo menos, tornada opcional. Esta não é a situação com o JTA, onde as alterações de estado são tornadas duráveis para uma base de dados relacional que suporta  link:https://pubs.opengroup.org/onlinepubs/009680699/toc.pdf[a norma X/Open XA]."

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:27
#, fuzzy
msgid "Note that the STM implementation provided by Quarkus is based on the https://narayana.io/docs/project/index.html#d0e16066[Narayana STM] implementation. This document isn't meant to be a replacement for that project's documentation, so you may want to look at it for more detail. However, we will try to focus more on how you can combine some key capabilities into Quarkus when developing Kubernetes native applications and microservices."
msgstr "Note que a implementação do STM fornecida pela Quarkus é baseada na implementação do  link:https://narayana.io/docs/project/index.html#d0e16066[Narayana STM]. Este documento não pretende ser um substituto para a documentação desse projeto, portanto, você pode querer consultá-lo para obter mais detalhes. No entanto, tentaremos focar mais em como você pode combinar alguns recursos principais no Quarkus ao desenvolver aplicativos e microsserviços nativos do Kubernetes."

#. type: Title ==
#: upstream/_guides/software-transactional-memory.adoc:28
#, fuzzy, no-wrap
msgid "Why use STM with Quarkus?"
msgstr "Porquê utilizar o STM com o Quarkus?"

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:34
#, fuzzy
msgid "Now you may still be asking yourself \"Why STM instead of JTA?\" or \"What are the benefits to STM that I don't get from JTA?\" Let's try to answer those or similar questions, with a particular focus on why we think they're great for Quarkus, microservices and Kubernetes native applications. So in no specific order ..."
msgstr "Agora você ainda pode estar se perguntando \"Por que STM em vez de JTA?\" ou \"Quais são os benefícios do STM que não recebo do JTA?\" Vamos tentar responder a essas ou outras perguntas semelhantes, com um foco particular em por que achamos que eles são ótimos para Quarkus, microsserviços e aplicativos nativos do Kubernetes. Portanto, sem uma ordem específica ..."

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:43
#, fuzzy
msgid "The goal of STM is to simplify object reads and writes from multiple threads/protect state from concurrent updates. The Quarkus STM implementation will safely manage any conflicts between these threads using whatever isolation model has been chosen to protect that specific state instance (object in the case of Quarkus). In Quarkus STM, there are two isolation implementations, pessimistic (the default), which would cause conflicting threads to be blocked until the original has completed its updates (committed or aborted the transaction); then there's the optimistic approach which allows all the threads to proceed and checks for conflicts at commit time, where one or more of the threads may be forced to abort if there have been conflicting updates."
msgstr "O objetivo do STM é simplificar a leitura e escrita de objectos a partir de várias threads/proteger o estado de actualizações simultâneas. A implementação do STM do Quarkus gerenciará com segurança quaisquer conflitos entre esses threads usando qualquer modelo de isolamento escolhido para proteger essa instância de estado específica (objeto no caso do Quarkus). No Quarkus STM, existem duas implementações de isolamento: a pessimista (a predefinição), que bloqueia as threads em conflito até que a original tenha completado as suas actualizações (confirmada ou abortada a transação); e a abordagem otimista, que permite que todas as threads prossigam e verifica os conflitos no momento da confirmação, em que uma ou mais threads podem ser forçadas a abortar se houver actualizações em conflito."

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:57
#, fuzzy
msgid "STM objects have state, but it doesn't need to be persistent (durable). In fact the default behaviour is for objects managed within transactional memory to be volatile, such that if the service or microservice within which they are being used crashes or is spawned elsewhere, e.g., by a scheduler, all state in memory is lost and the objects start from scratch. But surely you get this and more with JTA (and a suitable transactional datastore) and don't need to worry about restarting your application? Not quite. There's a trade-off here: we're doing away with persistent state and the overhead of reading from and then writing (and sync-ing) to the datastore during each transaction. This makes updates to (volatile) state very fast, but you still get the benefits of atomic updates across multiple STM objects (e.g., objects your team wrote then calling objects you inherited from another team and requiring them to make all-or-nothing updates), as well as consistency and isolation in the presence of concurrent threads/users (common in distributed microservices architectures).  Furthermore, not all stateful applications need to be durable - even when JTA transactions are used, it tends to be the exception and not the rule. And as you'll see later, because applications can optionally start and control transactions, it's possible to build microservices which can undo state changes and try alternative paths."
msgstr "Os objectos STM têm estado, mas este não precisa de ser persistente (durável). Na verdade, o comportamento padrão é que os objetos gerenciados na memória transacional sejam voláteis, de modo que, se o serviço ou microsserviço no qual eles estão sendo usados falhar ou for gerado em outro lugar, por exemplo, por um agendador, todo o estado na memória será perdido e os objetos começarão do zero. Mas, certamente, obtém-se isto e muito mais com o JTA (e um datastore transacional adequado) e não é necessário preocupar-se em reiniciar a aplicação? Não é bem assim. Há um trade-off aqui: estamos eliminando o estado persistente e a sobrecarga de ler e depois escrever (e sincronizar) no datastore durante cada transação. Isso faz com que as atualizações de estado (volátil) sejam muito rápidas, mas você ainda obtém os benefícios de atualizações atômicas em vários objetos STM (por exemplo, objetos que sua equipe escreveu e, em seguida, chamando objetos que você herdou de outra equipe e exigindo que eles façam atualizações tudo ou nada), bem como consistência e isolamento na presença de threads/usuários concorrentes (comum em arquiteturas de microsserviços distribuídos). Além disso, nem todos os aplicativos com estado precisam ser duráveis - mesmo quando as transações JTA são usadas, elas tendem a ser a exceção e não a regra. E, como verá mais tarde, como as aplicações podem opcionalmente iniciar e controlar transacções, é possível construir microsserviços que podem desfazer alterações de estado e tentar caminhos alternativos."

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:64
#, fuzzy
msgid "Another benefit of STM is composability and modularity. You can write concurrent Quarkus objects/services that can be easily composed with any other services built using STM, without exposing the details of how the objects/services are implemented. As we discussed earlier, this ability to compose objects you wrote with those other teams may have written weeks, months or years earlier, and have A, C and I properties can be hugely beneficial. Furthermore, some STM implementations, including the one Quarkus uses, support nested transactions and these allow changes made within the context of a nested (sub) transaction to later be rolled back by the parent transaction."
msgstr "Outra vantagem do STM é a capacidade de composição e a modularidade. É possível escrever objectos/serviços Quarkus concorrentes que podem ser facilmente compostos com quaisquer outros serviços construídos com STM, sem expor os detalhes de como os objectos/serviços são implementados. Como discutimos anteriormente, esta capacidade de compor objectos que escreveu com aqueles que outras equipas podem ter escrito semanas, meses ou anos antes, e que têm propriedades A, C e I, pode ser extremamente benéfica. Além disso, algumas implementações STM, incluindo a que a Quarkus utiliza, suportam transacções aninhadas, o que permite que as alterações efectuadas no contexto de uma (sub)transação aninhada sejam posteriormente anuladas pela transação principal."

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:69
#, fuzzy
msgid "Although the default for STM object state is volatile, it is possible to configure the STM implementation such that an object's state is durable. Although it's possible to configure Narayana such that different backend datastores can be used, including relational databases, the default is the local operating system file system, which means you don't need to configure anything else with Quarkus such as a database."
msgstr "Embora a predefinição para o estado dos objectos STM seja volátil, é possível configurar a implementação STM de modo a que o estado de um objeto seja duradouro. Embora seja possível configurar o Narayana de modo a que possam ser utilizados diferentes datastores de backend, incluindo bases de dados relacionais, a predefinição é o sistema de ficheiros do sistema operativo local, o que significa que não é necessário configurar mais nada com o Quarkus, como uma base de dados."

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:73
#, fuzzy
msgid "Many STM implementations allow \"plain old language objects\" to be made STM-aware with little or no changes to the application code. You can build, test and deploy applications without wanting them to be STM-aware and then later add those capabilities if they become necessary and without much development overhead at all."
msgstr "Muitas implementações STM permitem que \"objectos de linguagem simples e antiga\" sejam tornados compatíveis com STM com poucas ou nenhumas alterações ao código da aplicação. É possível criar, testar e implementar aplicações sem pretender que sejam compatíveis com STM e, posteriormente, adicionar essas capacidades, se necessário, sem grandes despesas de desenvolvimento."

#. type: Title ==
#: upstream/_guides/software-transactional-memory.adoc:74
#, fuzzy, no-wrap
msgid "Building STM applications"
msgstr "Criação de aplicações STM"

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:81
#, fuzzy
msgid "There is also a fully worked example in the quickstarts which you may access by cloning the Git repository: `git clone {quickstarts-clone-url}`, or by downloading an {quickstarts-archive-url}[archive].  Look for the `software-transactional-memory-quickstart` example. This will help to understand how you can build STM-aware applications with Quarkus. However, before we do so there are a few basic concepts which we need to cover."
msgstr "Existe também um exemplo totalmente funcional nos quickstarts a que pode aceder clonando o repositório Git: `git clone {quickstarts-clone-url}` ou descarregando um {quickstarts-archive-url}[arquivo]. Procure o exemplo `software-transactional-memory-quickstart`. Isto ajudará a compreender como pode construir aplicações sensíveis ao STM com o Quarkus. No entanto, antes de o fazermos, há alguns conceitos básicos que temos de abordar."

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:87
#, fuzzy
msgid "Note, as you will see, STM in Quarkus relies on a number of annotations to define behaviours. The lack of these annotations causes sensible defaults to be assumed, but it is important for the developer to understand what these may be. Please refer to the https://narayana.io/docs/project/index.html#d0e16066[Narayana STM manual] and the https://narayana.io//docs/project/index.html#d0e16133[STM annotations guide] for more details on all the annotations Narayana STM provides."
msgstr "Note que, como verá, o STM no Quarkus depende de uma série de anotações para definir comportamentos. A falta destas anotações faz com que sejam assumidas predefinições sensatas, mas é importante que o programador compreenda quais são essas predefinições. Consulte o  link:https://narayana.io/docs/project/index.html#d0e16066[manual do Narayana STM] e o  link:https://narayana.io//docs/project/index.html#d0e16133[guia de anotações do STM] para obter mais pormenores sobre todas as anotações que o Narayana STM fornece."

#. type: Title ==
#: upstream/_guides/software-transactional-memory.adoc:90
#, fuzzy, no-wrap
msgid "Setting it up"
msgstr "Configuração"

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:93
#, fuzzy
msgid "To use the extension include it as a dependency in your build file:"
msgstr "Para utilizar a extensão, inclua-a como uma dependência no seu ficheiro de compilação:"

#. type: Block title
#: upstream/_guides/software-transactional-memory.adoc:95
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/software-transactional-memory.adoc:101
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-narayana-stm</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/software-transactional-memory.adoc:104
#, fuzzy, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/software-transactional-memory.adoc:107
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-narayana-stm\")\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/software-transactional-memory.adoc:109
#, fuzzy, no-wrap
msgid "Defining STM-aware classes"
msgstr "Definição de classes com reconhecimento STM"

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:117
#, fuzzy
msgid "In order for the STM subsystem to have knowledge about which classes are to be managed within the context of transactional memory it is necessary to provide a minimal level of instrumentation. This occurs by categorising STM-aware and STM-unaware classes through an interface boundary; specifically all STM-aware objects must be instances of classes which inherit from interfaces that themselves have been annotated to identify them as STM-aware. Any other objects (and their classes) which do not follow this rule will not be managed by the STM subsystem and hence any of their state changes will not be rolled back, for example."
msgstr "Para que o subsistema STM tenha conhecimento das classes que devem ser geridas no contexto da memória transacional, é necessário fornecer um nível mínimo de instrumentação. Isto ocorre através da categorização das classes sensíveis e não sensíveis ao STM através de um limite de interface; especificamente, todos os objectos sensíveis ao STM devem ser instâncias de classes que herdam de interfaces que foram anotadas para as identificar como sensíveis ao STM. Quaisquer outros objectos (e respectivas classes) que não sigam esta regra não serão geridos pelo subsistema STM e, por conseguinte, quaisquer alterações do seu estado não serão revertidas, por exemplo."

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:120
#, fuzzy
msgid "The specific annotation that STM-aware application interfaces must use is `org.jboss.stm.annotations.Transactional`.  For example:"
msgstr "A anotação específica que as interfaces de aplicação sensíveis ao STM devem utilizar é `org.jboss.stm.annotations.Transactional`. Por exemplo:"

#. type: delimited block -
#: upstream/_guides/software-transactional-memory.adoc:128
#, no-wrap
msgid ""
"@Transactional\n"
"public interface FlightService {\n"
"    int getNumberOfBookings();\n"
"    void makeBooking(String details);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:135
#, fuzzy
msgid "Classes which implement this interface are able to use additional annotations from Narayana to tell the STM subsystem about things such as whether a method will modify the state of the object, or what state variables within the class should be managed transactionally, e.g., some instance variables may not need to be rolled back if a transaction aborts. As mentioned earlier, if those annotations are not present then defaults are chosen to guarantee safety, such as assuming all methods will modify state."
msgstr "As classes que implementam esta interface podem usar anotações adicionais do Narayana para informar o subsistema STM sobre coisas como se um método irá modificar o estado do objeto, ou que variáveis de estado dentro da classe devem ser geridas transaccionalmente, por exemplo, algumas variáveis de instância podem não precisar de ser revertidas se uma transação for cancelada. Como mencionado anteriormente, se essas anotações não estiverem presentes, então os padrões são escolhidos para garantir a segurança, como assumir que todos os métodos modificarão o estado."

#. type: delimited block -
#: upstream/_guides/software-transactional-memory.adoc:142
#, no-wrap
msgid ""
"public class FlightServiceImpl implements FlightService {\n"
"    @ReadLock\n"
"    public int getNumberOfBookings() { ... }\n"
"    public void makeBooking(String details) {...}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/software-transactional-memory.adoc:146
#, no-wrap
msgid ""
"    @NotState\n"
"    private int timesCalled;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:152
#, fuzzy
msgid "For example, by using the `@ReadLock` annotation on the `getNumberOfBookings` method, we are able to tell the STM subsystem that no state modifications will occur in this object when it is used in the transactional memory. Also, the `@NotState` annotation tells the system to ignore `timesCalled` when transactions commit or abort, so this value only changes due to application code."
msgstr "Por exemplo, ao utilizar a anotação `@ReadLock` no método `getNumberOfBookings`, podemos dizer ao subsistema STM que não ocorrerão modificações de estado neste objeto quando este for utilizado na memória transacional. Além disso, a anotação `@NotState` diz ao sistema para ignorar `timesCalled` quando as transacções são confirmadas ou abortadas, pelo que este valor só é alterado devido ao código da aplicação."

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:155
#, fuzzy
msgid "Please refer to the Narayana guide for details of how to exert finer grained control over the transactional behaviour of objects that implement interfaces marked with the `@Transactional` annotation."
msgstr "Consulte o guia Narayana para obter pormenores sobre como exercer um controlo mais refinado sobre o comportamento transacional dos objectos que implementam interfaces marcadas com a anotação `@Transactional`."

#. type: Title ==
#: upstream/_guides/software-transactional-memory.adoc:156
#, fuzzy, no-wrap
msgid "Creating STM objects"
msgstr "Criação de objectos STM"

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:162
#, fuzzy
msgid "The STM subsystem needs to be told about which objects it should be managing. The Quarkus (aka Narayana) STM implementation does this by providing containers of transactional memory within which these object instances reside. Until an object is placed within one of these STM containers it cannot be managed within transactions and any state changes will not possess the A, C, I (or even D) properties."
msgstr "O subsistema STM precisa ser informado sobre quais objetos ele deve gerenciar. A implementação do STM do Quarkus (também conhecido como Narayana) faz isso fornecendo contêineres de memória transacional nos quais essas instâncias de objeto residem. Até que um objeto seja colocado dentro de um destes contentores STM, não pode ser gerido no âmbito de transacções e quaisquer alterações de estado não possuirão as propriedades A, C, I (ou mesmo D)."

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:166
#, fuzzy
msgid "Note, the term \"container\" was defined within the STM implementation years before Linux containers came along. It may be confusing to use especially in a Kubernetes native environment such as Quarkus, but hopefully the reader can do the mental mapping."
msgstr "Observe que o termo \"contêiner\" foi definido na implementação do STM anos antes do surgimento dos contêineres do Linux. Pode ser confuso de usar, especialmente em um ambiente nativo do Kubernetes, como o Quarkus, mas esperamos que o leitor possa fazer o mapeamento mental."

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:172
#, fuzzy
msgid "The default STM container (`org.jboss.stm.Container`) provides support for volatile objects that can only be shared between threads in the same microservice/JVM instance. When an STM-aware object is placed into the container it returns a handle through which that object should then be used in the future. It is important to use this handle as continuing to access the object through the original reference will not allow the STM subsystem to track access and manage state and concurrency control."
msgstr "O contentor STM predefinido ( `org.jboss.stm.Container`) oferece suporte para objectos voláteis que só podem ser partilhados entre threads na mesma instância de microsserviço/JVM. Quando um objeto STM é colocado no contentor, este devolve um identificador através do qual esse objeto deve ser utilizado no futuro. É importante utilizar este identificador, uma vez que continuar a aceder ao objeto através da referência original não permitirá ao subsistema STM seguir o acesso e gerir o estado e o controlo da concorrência."

#. type: delimited block -
#: upstream/_guides/software-transactional-memory.adoc:176
#, no-wrap
msgid "    import org.jboss.stm.Container;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/software-transactional-memory.adoc:178
#, no-wrap
msgid "    ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/software-transactional-memory.adoc:182
#, no-wrap
msgid ""
"    Container<FlightService> container = new Container<>(); <1>\n"
"    FlightServiceImpl instance = new FlightServiceImpl(); <2>\n"
"    FlightService flightServiceProxy = container.create(instance); <3>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:186
#, fuzzy
msgid "You need to tell each Container about the type of objects for which it will be responsible. In this example it will be instances that implement the FlightService interface."
msgstr "É necessário informar cada Container sobre o tipo de objectos pelos quais será responsável. Neste exemplo, serão instâncias que implementam a interface FlightService."

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:188
#, fuzzy
msgid "Then you create an instance that implements `FlightService`. You should not use it directly at this stage because access to it is not being managed by the STM subsystem."
msgstr "Em seguida, cria-se uma instância que implementa `FlightService`. Não se deve utilizá-la diretamente nesta fase porque o acesso à mesma não está a ser gerido pelo subsistema STM."

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:190
#, fuzzy
msgid "To obtain a managed instance, pass the original object to the STM `container` which then returns a reference through which you will be able to perform transactional operations. This reference can be used safely from multiple threads."
msgstr "Para obter uma instância gerida, passe o objeto original para o STM `container` que, em seguida, devolve uma referência através da qual poderá efetuar operações transaccionais. Esta referência pode ser utilizada em segurança a partir de várias threads."

#. type: Title ==
#: upstream/_guides/software-transactional-memory.adoc:191
#, fuzzy, no-wrap
msgid "Defining transaction boundaries"
msgstr "Definição dos limites da transação"

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:196
#, fuzzy
msgid "Once an object is placed within an STM container the application developer can manage the scope of transactions within which it is used. There are some annotations which can be applied to the STM-aware class to have the container automatically create a transaction whenever a specific method is invoked."
msgstr "Quando um objeto é colocado num contentor STM, o programador da aplicação pode gerir o âmbito das transacções em que é utilizado. Existem algumas anotações que podem ser aplicadas à classe sensível ao STM para que o contentor crie automaticamente uma transação sempre que um método específico seja invocado."

#. type: Title ===
#: upstream/_guides/software-transactional-memory.adoc:197
#, fuzzy, no-wrap
msgid "Declarative approach"
msgstr "Abordagem declarativa"

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:206
#, fuzzy
msgid "If the `@NestedTopLevel` or `@Nested` annotation is placed on a method signature then the STM container will start a new transaction when that method is invoked and attempt to commit it when the method returns. If there is a transaction already associated with the calling thread then each of these annotations behaves slightly differently: the former annotation will always create a new top-level transaction within which the method will execute, so the enclosing transaction does not behave as a parent, i.e., the nested top-level transaction will commit or abort independently; the latter annotation will create a transaction with is properly nested within the calling transaction, i.e., that transaction acts as the parent of this newly created transaction."
msgstr "Se a anotação `@NestedTopLevel` ou `@Nested` for colocada na assinatura de um método, o contentor STM iniciará uma nova transação quando esse método for invocado e tentará confirmá-la quando o método regressar. Se já existir uma transação associada à thread que efectua a chamada, cada uma destas anotações terá um comportamento ligeiramente diferente: a primeira anotação criará sempre uma nova transação de nível superior no âmbito da qual o método será executado, pelo que a transação envolvente não se comportará como um pai, ou seja, a transação de nível superior aninhada será confirmada ou abortada independentemente; a última anotação criará uma transação devidamente aninhada na transação que efectua a chamada, ou seja, essa transação actuará como pai desta transação recém-criada."

#. type: Title ===
#: upstream/_guides/software-transactional-memory.adoc:207
#, fuzzy, no-wrap
msgid "Programmatic approach"
msgstr "Abordagem programática"

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:210
#, fuzzy
msgid "The application can programmatically start a transaction before accessing the methods of STM objects:"
msgstr "A aplicação pode iniciar programaticamente uma transação antes de aceder aos métodos dos objectos STM:"

#. type: delimited block -
#: upstream/_guides/software-transactional-memory.adoc:214
#, no-wrap
msgid "AtomicAction aa = new AtomicAction(); <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/software-transactional-memory.adoc:227
#, no-wrap
msgid ""
"aa.begin(); <2>\n"
"{\n"
"    try {\n"
"        flightService.makeBooking(\"BA123 ...\");\n"
"        taxiService.makeBooking(\"East Coast Taxis ...\"); <3>\n"
"        <4>\n"
"        aa.commit();\n"
"        <5>\n"
"    } catch (Exception e) {\n"
"        aa.abort(); <6>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:232
#, fuzzy
msgid "An object for manually controlling transaction boundaries (AtomicAction and many other useful classes are included in the extension).  Refer https://narayana.io//docs/api/com/arjuna/ats/arjuna/AtomicAction.html[to the javadoc] for more detail."
msgstr "Um objeto para controlar manualmente os limites da transação (AtomicAction e muitas outras classes úteis estão incluídas na extensão). Consulte  link:https://narayana.io//docs/api/com/arjuna/ats/arjuna/AtomicAction.html[o javadoc] para mais pormenores."

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:233
#, fuzzy
msgid "Programmatically begin a transaction."
msgstr "Iniciar programaticamente uma transação."

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:236
#, fuzzy
msgid "Notice that object updates can be composed which means that updates to multiple objects can be committed together as a single action.  [Note that it is also possible to begin nested transactions so that you can perform speculative work which may then be abandoned without abandoning other work performed by the outer transaction]."
msgstr "Repare que as actualizações de objectos podem ser compostas, o que significa que as actualizações de vários objectos podem ser confirmadas em conjunto como uma única ação. [Note-se que também é possível iniciar transacções aninhadas de modo a poder realizar trabalho especulativo que pode depois ser abandonado sem abandonar outro trabalho realizado pela transação externa]."

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:237
#, fuzzy
msgid "Since the transaction has not yet been committed the changes made by the flight and taxi services are not visible outside the transaction."
msgstr "Uma vez que a transação ainda não foi confirmada, as alterações efectuadas pelos serviços de voo e de táxi não são visíveis fora da transação."

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:240
#, fuzzy
msgid "Since the commit was successful the changes made by the flight and taxi services are now visible to other threads.  Note that other transactions that relied on the old state may or may not now incur conflicts when they commit (the STM library provides a number of features for managing conflicting behaviour and these are covered in the Narayana STM manual)."
msgstr "Uma vez que o commit foi bem sucedido, as alterações feitas pelos serviços de voo e táxi são agora visíveis para outras threads. Note-se que outras transacções que dependiam do estado antigo podem ou não incorrer em conflitos quando se confirmam (a biblioteca STM fornece uma série de funcionalidades para gerir comportamentos conflituosos e estas são abordadas no manual Narayana STM)."

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:241
#, fuzzy
msgid "Programmatically decide to abort the transaction which means that the changes made by the flight and taxi services are discarded."
msgstr "Decidir programaticamente abortar a transação, o que significa que as alterações feitas pelos serviços de voo e de táxi são descartadas."

#. type: Title ==
#: upstream/_guides/software-transactional-memory.adoc:242
#, fuzzy, no-wrap
msgid "Distributed transactions"
msgstr "Transacções distribuídas"

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:247
#, fuzzy
msgid "Sharing a transaction between multiple services is possible but is currently an advanced use case only and the Narayana documentation should be consulted if this behaviour is required. In particular, STM does not yet support the features described in the xref:context-propagation.adoc[Context Propagation guide]."
msgstr "A partilha de uma transação entre vários serviços é possível, mas, atualmente, trata-se apenas de um caso de utilização avançada e a documentação Narayana deve ser consultada se este comportamento for necessário. Em particular, o STM ainda não suporta as funcionalidades descritas no  link:context-propagation.html[guia Propagação de Contexto]."
