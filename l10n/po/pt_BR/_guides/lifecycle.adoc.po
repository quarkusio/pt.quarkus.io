# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-29 08:09+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/lifecycle.adoc:6
#, fuzzy, no-wrap
msgid "Application Initialization and Termination"
msgstr "Inicialização e encerramento da aplicação"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:16
#, fuzzy
msgid "You often need to execute custom actions when the application starts and clean up everything when the application stops.  This guide explains how to:"
msgstr "Muitas vezes é necessário executar acções personalizadas quando a aplicação é iniciada e limpar tudo quando a aplicação pára. Este guia explica como:"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:18
#, fuzzy
msgid "Write a Quarkus application with a main method"
msgstr "Escrever uma aplicação Quarkus com um método principal"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:19
#, fuzzy
msgid "Write command mode applications that run a task and then terminate"
msgstr "Escrever aplicações de modo de comando que executam uma tarefa e depois terminam"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:20
#, fuzzy
msgid "Be notified when the application starts"
msgstr "Ser notificado quando a aplicação começar"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:21
#, fuzzy
msgid "Be notified when the application stops"
msgstr "Ser notificado quando a aplicação parar"

#. type: Title ==
#: upstream/_guides/lifecycle.adoc:22
#, fuzzy, no-wrap
msgid "Prerequisites"
msgstr "Pré-requisitos"

#. type: Title ==
#: upstream/_guides/lifecycle.adoc:26
#, fuzzy, no-wrap
msgid "Solution"
msgstr "Solução"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:30
#, fuzzy
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "Recomendamos que siga as instruções nas secções seguintes e crie a aplicação passo a passo. No entanto, pode ir diretamente para o exemplo completo."

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:32
#, fuzzy
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Clonar o repositório Git: `git clone {quickstarts-clone-url}`, ou descarregar um {quickstarts-archive-url}[arquivo]."

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:34
#, fuzzy
msgid "The solution is located in the `lifecycle-quickstart` link:{quickstarts-tree-url}/lifecycle-quickstart[directory]."
msgstr "A solução está localizada no  link:{quickstarts-tree-url}/lifecycle-quickstart[diretório] `lifecycle-quickstart`."

#. type: Title ==
#: upstream/_guides/lifecycle.adoc:35
#, fuzzy, no-wrap
msgid "Creating the Maven project"
msgstr "Criar o projeto Maven"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:38
#, fuzzy
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "Primeiro, precisamos de um novo projeto. Crie um novo projeto com o seguinte comando:"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:43
#, fuzzy
msgid "It generates:"
msgstr "Gera:"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:45
#, fuzzy
msgid "the Maven structure"
msgstr "a estrutura Maven"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:46
#, fuzzy
msgid "example `Dockerfile` files for both `native` and `jvm` modes"
msgstr "exemplo de ficheiros `Dockerfile` para os modos `native` e `jvm`"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:47
#, fuzzy
msgid "the application configuration file"
msgstr "o ficheiro de configuração da aplicação"

#. type: Title ==
#: upstream/_guides/lifecycle.adoc:48
#, fuzzy, no-wrap
msgid "The main method"
msgstr "O método principal"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:52
#, fuzzy
msgid "By default, Quarkus will automatically generate a main method, that will bootstrap Quarkus and then just wait for shutdown to be initiated. Let's provide our own main method:"
msgstr "Por padrão, o Quarkus gerará automaticamente um método principal, que inicializará o Quarkus e, em seguida, apenas aguardará o desligamento ser iniciado. Vamos criar nosso próprio método principal:"

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:55 upstream/_guides/lifecycle.adoc:91
#, no-wrap
msgid "package com.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:58
#, no-wrap
msgid ""
"import io.quarkus.runtime.annotations.QuarkusMain;\n"
"import io.quarkus.runtime.Quarkus;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:61
#, no-wrap
msgid ""
"@QuarkusMain  <1>\n"
"public class Main {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:67
#, no-wrap
msgid ""
"    public static void main(String ... args) {\n"
"        System.out.println(\"Running main method\");\n"
"        Quarkus.run(args); <2>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:69
#, fuzzy
msgid "This annotation tells Quarkus to use this as the main method, unless it is overridden in the config"
msgstr "Esta anotação diz ao Quarkus para utilizar este método como método principal, exceto se for substituído na configuração"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:70
#, fuzzy
msgid "This launches Quarkus"
msgstr "Isto lança o Quarkus"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:74
#, fuzzy
msgid "This main class will bootstrap Quarkus and run it until it stops. This is no different to the automatically generated main class, but has the advantage that you can just launch it directly from the IDE without needing to run a Maven or Gradle command."
msgstr "Essa classe principal inicializará o Quarkus e o executará até que ele pare. Isso não é diferente da classe principal gerada automaticamente, mas tem a vantagem de poder iniciá-la diretamente do IDE sem precisar executar um comando Maven ou Gradle."

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:78
#, fuzzy
msgid "It is not recommenced to do any business logic in this main method, as Quarkus has not been set up yet, and Quarkus may run in a different ClassLoader. If you want to perform logic on startup use an `io.quarkus.runtime.QuarkusApplication` as described below."
msgstr "Não é recomendável executar qualquer lógica comercial neste método principal, uma vez que o Quarkus ainda não foi configurado e o Quarkus pode ser executado num ClassLoader diferente. Se quiser executar a lógica no arranque, utilize um `io.quarkus.runtime.QuarkusApplication` como descrito abaixo."

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:82
#, fuzzy
msgid "If we want to actually perform business logic on startup (or write applications that complete a task and then exit)  we need to supply a `io.quarkus.runtime.QuarkusApplication` class to the run method. After Quarkus has been started the `run` method of the application will be invoked. When this method returns the Quarkus application will exit."
msgstr "Se quisermos realmente executar a lógica comercial no arranque (ou escrever aplicações que completem uma tarefa e depois saiam), precisamos de fornecer uma classe `io.quarkus.runtime.QuarkusApplication` ao método run. Depois de o Quarkus ter sido iniciado, o método `run` da aplicação será invocado. Quando esse método retornar, a aplicação Quarkus será encerrada."

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:85
#, fuzzy
msgid "If you want to perform logic on startup you should call `Quarkus.waitForExit()`, this method will wait until a shutdown is requested (either from an external signal like when you press `Ctrl+C` or because a thread has called `Quarkus.asyncExit()`)."
msgstr "Se pretender executar a lógica no arranque, deve chamar `Quarkus.waitForExit()`, este método aguardará até que seja solicitado um encerramento (quer a partir de um sinal externo, como quando prime `Ctrl+C`, quer porque uma thread chamou `Quarkus.asyncExit()`)."

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:87
#, fuzzy
msgid "An example of what this looks like is below:"
msgstr "Segue-se um exemplo do que isto parece:"

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:95
#, no-wrap
msgid ""
"import io.quarkus.runtime.Quarkus;\n"
"import io.quarkus.runtime.QuarkusApplication;\n"
"import io.quarkus.runtime.annotations.QuarkusMain;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:101
#, no-wrap
msgid ""
"@QuarkusMain\n"
"public class Main {\n"
"    public static void main(String... args) {\n"
"        Quarkus.run(MyApp.class, args);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:103
#, no-wrap
msgid "    public static class MyApp implements QuarkusApplication {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:112
#, no-wrap
msgid ""
"        @Override\n"
"        public int run(String... args) throws Exception {\n"
"            System.out.println(\"Do startup logic here\");\n"
"            Quarkus.waitForExit();\n"
"            return 0;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/lifecycle.adoc:114
#, fuzzy, no-wrap
msgid "Injecting the command line arguments"
msgstr "Injetar os argumentos da linha de comando"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:117
#, fuzzy
msgid "It is possible to inject the arguments that were passed in on the command line:"
msgstr "É possível injetar os argumentos que foram passados na linha de comando:"

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:123
#, no-wrap
msgid ""
"@Inject\n"
"@CommandLineArguments\n"
"String[] args;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:126
#, fuzzy
msgid "Command line arguments can be passed to the application through the `-D` flag with the property `quarkus.args`:"
msgstr "Os argumentos da linha de comando podem ser transmitidos à aplicação através do sinalizador `-D` com a propriedade `quarkus.args`:"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:132
#, fuzzy
msgid "For Quarkus dev mode:"
msgstr "Para o modo de desenvolvimento Quarkus:"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:136
#, fuzzy
msgid "For a runner jar: `java -Dquarkus.args=<cmd-args> -jar target/quarkus-app/quarkus-run.jar`"
msgstr "Para um boião de corredor: `java -Dquarkus.args=&amp;lt;cmd-args&amp;gt; -jar target/quarkus-app/quarkus-run.jar`"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:137
#, fuzzy
msgid "For a native executable: `./target/lifecycle-quickstart-1.0-SNAPSHOT-runner -Dquarkus.args=<cmd-args>`"
msgstr "Para um executável nativo: `./target/lifecycle-quickstart-1.0-SNAPSHOT-runner -Dquarkus.args=&amp;lt;cmd-args&amp;gt;`"

#. type: Title ==
#: upstream/_guides/lifecycle.adoc:141
#, fuzzy, no-wrap
msgid "Listening for startup and shutdown events"
msgstr "Escuta de eventos de arranque e de encerramento"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:145
#, fuzzy
msgid "Create a new class named `AppLifecycleBean` (or pick another name) in the `org.acme.lifecycle` package, and copy the following content:"
msgstr "Crie uma nova classe chamada `AppLifecycleBean` (ou escolha outro nome) no pacote `org.acme.lifecycle` e copie o seguinte conteúdo:"

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:149 upstream/_guides/lifecycle.adoc:195
#: upstream/_guides/lifecycle.adoc:222
#, no-wrap
msgid "package org.acme.lifecycle;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:152
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.enterprise.event.Observes;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:156
#, no-wrap
msgid ""
"import io.quarkus.runtime.ShutdownEvent;\n"
"import io.quarkus.runtime.StartupEvent;\n"
"import org.jboss.logging.Logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:159
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class AppLifecycleBean {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:161
#, no-wrap
msgid "    private static final Logger LOGGER = Logger.getLogger(\"ListenerBean\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:165
#, no-wrap
msgid ""
"    void onStart(@Observes StartupEvent ev) {               // <1>\n"
"        LOGGER.info(\"The application is starting...\");\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:169
#, no-wrap
msgid ""
"    void onStop(@Observes ShutdownEvent ev) {               // <2>\n"
"        LOGGER.info(\"The application is stopping...\");\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:171
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:173
#, fuzzy
msgid "Method called when the application is starting"
msgstr "Método chamado quando a aplicação está a iniciar"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:174
#, fuzzy
msgid "Method called when the application is terminating"
msgstr "Método chamado quando a aplicação está a terminar"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:176
#, fuzzy
msgid "The events are also called in _dev mode_ between each redeployment."
msgstr "Os eventos também são chamados no _modo de desenvolvimento_ entre cada reimplantação."

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:178
#, fuzzy
msgid "The methods can access injected beans. Check the link:{quickstarts-blob-url}/lifecycle-quickstart/src/main/java/org/acme/lifecycle/AppLifecycleBean.java[AppLifecycleBean.java] class for details."
msgstr "Os métodos podem aceder a beans injectados. Consulte a classe  link:{quickstarts-blob-url}/lifecycle-quickstart/src/main/java/org/acme/lifecycle/AppLifecycleBean.java[AppLifecycleBean.java] para obter mais pormenores."

#. type: Title ===
#: upstream/_guides/lifecycle.adoc:179
#, fuzzy, no-wrap
msgid "What is the difference from `@Initialized(ApplicationScoped.class)` and `@Destroyed(ApplicationScoped.class)`"
msgstr "Qual é a diferença entre `@Initialized(ApplicationScoped.class)` e `@Destroyed(ApplicationScoped.class)`"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:184
#, fuzzy
msgid "In the JVM mode, there is no real difference, except that `StartupEvent` is always fired *after* `@Initialized(ApplicationScoped.class)` and `ShutdownEvent` is fired *before* `@Destroyed(ApplicationScoped.class)`.  For a native executable build, however, `@Initialized(ApplicationScoped.class)` is fired as *part of the native build process*, whereas `StartupEvent` is fired when the native image is executed.  See xref:writing-extensions.adoc#bootstrap-three-phases[Three Phases of Bootstrap and Quarkus Philosophy] for more details."
msgstr "No modo JVM, não existe qualquer diferença real, exceto que `StartupEvent` é sempre ativado *após* `@Initialized(ApplicationScoped.class)` e `ShutdownEvent` é ativado *antes de* `@Destroyed(ApplicationScoped.class)`. Para uma construção executável nativa, no entanto, `@Initialized(ApplicationScoped.class)` é disparado como *parte do processo de construção nativa*, enquanto `StartupEvent` é disparado quando a imagem nativa é executada. Consulte  link:writing-extensions.html#bootstrap-three-phases[Três fases do Bootstrap e Filosofia Quarkus] para obter mais detalhes."

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:186
#, fuzzy
msgid "In CDI applications, an event with qualifier `@Initialized(ApplicationScoped.class)` is fired when the application context is initialized. See https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html#application_context[the spec, window=\"_blank\"] for more info."
msgstr "Nas aplicações CDI, um evento com o qualificador `@Initialized(ApplicationScoped.class)` é disparado quando o contexto da aplicação é inicializado. Consulte  link:https://jakarta.ee/specifications/cdi/2.0/cdi-spec-2.0.html#application_context[a especificação, window=_blank] para obter mais informações."

#. type: Title ===
#: upstream/_guides/lifecycle.adoc:188
#, fuzzy, no-wrap
msgid "Using `@Startup` to initialize a CDI bean at application startup"
msgstr "Utilizar `@Startup` para inicializar um bean CDI no arranque da aplicação"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:191
#, fuzzy
msgid "A bean represented by a class, producer method or field annotated with `@Startup` is initialized at application startup:"
msgstr "Um bean representado por uma classe, método produtor ou campo anotado com `@Startup` é inicializado no arranque da aplicação:"

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:198 upstream/_guides/lifecycle.adoc:225
#, no-wrap
msgid ""
"import io.quarkus.runtime.Startup;\n"
"import jakarta.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:202
#, no-wrap
msgid ""
"@Startup // <1>\n"
"@ApplicationScoped\n"
"public class EagerAppBean {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:204
#, no-wrap
msgid "   private final String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:209
#, no-wrap
msgid ""
"   EagerAppBean(NameGenerator generator) { // <2>\n"
"     this.name = generator.createName();\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:211
#, fuzzy
msgid "For each bean annotated with `@Startup` a synthetic observer of `StartupEvent` is generated. The default priority is used."
msgstr "Para cada bean anotado com `@Startup` é gerado um observador sintético de `StartupEvent`. É utilizada a prioridade predefinida."

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:212
#, fuzzy
msgid "The bean constructor is called when the application starts and the resulting contextual instance is stored in the application context."
msgstr "O construtor do bean é chamado quando a aplicação é iniciada e a instância contextual resultante é armazenada no contexto da aplicação."

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:214
#, fuzzy
msgid "`@Dependent` beans are destroyed immediately afterwards to follow the behavior of observers declared on `@Dependent` beans."
msgstr "`@Dependent` são destruídos imediatamente a seguir para seguir o comportamento dos observadores declarados nos feijões `@Dependent`."

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:216
#, fuzzy
msgid "If a class is annotated with `@Startup` but with no scope annotation then `@ApplicationScoped` is added automatically."
msgstr "Se uma classe for anotada com `@Startup` mas não tiver anotação de âmbito, então `@ApplicationScoped` é adicionado automaticamente."

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:218
msgid "The `@Startup` annotation can be also declared on a non-static non-producer no-args method:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:228
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class EagerAppBean {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:234
#, no-wrap
msgid ""
"   @Startup\n"
"   void init() { <1>\n"
"     doSomeCoolInit();\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:236
#, fuzzy
msgid "The bean is created and the `init()` method is invoked upon the contextual instance when the application starts."
msgstr "O construtor do bean é chamado quando a aplicação é iniciada e a instância contextual resultante é armazenada no contexto da aplicação."

#. type: Title ===
#: upstream/_guides/lifecycle.adoc:238
#, fuzzy, no-wrap
msgid "Using `@Shutdown` to execute a business method of a CDI bean during application shutdown"
msgstr "Utilizar `@Startup` para inicializar um bean CDI no arranque da aplicação"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:244
msgid "The `@io.quarkus.runtime.Shutdown` annotation is used to mark a business method of a CDI bean that should be executed during application shutdown.  The annotated method must be non-private and non-static and declare no arguments.  The behavior is similar to a declaration of a `ShutdownEvent` observer.  The following examples are functionally equivalent."
msgstr ""

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:250
#, no-wrap
msgid ""
"import io.quarkus.runtime.Shutdown;\n"
"import io.quarkus.runtime.ShutdownEvent;\n"
"import jakarta.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:257
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class Bean1 {\n"
"   void onShutdown(@Observes ShutdownEvent event) {\n"
"      // place the logic here\n"
"   }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:260
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class Bean2 {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/lifecycle.adoc:266
#, no-wrap
msgid ""
"   @Shutdown\n"
"   void shutdown() {\n"
"      // place the logic here\n"
"   }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/lifecycle.adoc:268
#, fuzzy, no-wrap
msgid "Package and run the application"
msgstr "Empacotar e executar a aplicação"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:271
#, fuzzy
msgid "Run the application with:"
msgstr "Executar a aplicação com:"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:276
#, fuzzy
msgid "The logged message is printed.  When the application is stopped, the second log message is printed."
msgstr "A mensagem registada é impressa. Quando a aplicação é parada, é impressa a segunda mensagem de registo."

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:278
#, fuzzy
msgid "As usual, the application can be packaged using:"
msgstr "Como de costume, a aplicação pode ser empacotada utilizando:"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:282
#, fuzzy
msgid "and executed using `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr "e executada utilizando `java -jar target/quarkus-app/quarkus-run.jar`."

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:284
#, fuzzy
msgid "You can also generate the native executable using:"
msgstr "Também é possível gerar o executável nativo utilizando:"

#. type: Title ==
#: upstream/_guides/lifecycle.adoc:287
#, fuzzy, no-wrap
msgid "Launch Modes"
msgstr "Modos de lançamento"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:291
#, fuzzy
msgid "Quarkus has 3 different launch modes, `NORMAL` (i.e. production), `DEVELOPMENT` and `TEST`. If you are running `quarkus:dev` then the mode will be `DEVELOPMENT`, if you are running a JUnit test it will be `TEST`, otherwise it will be `NORMAL`."
msgstr "O Quarkus tem 3 modos de lançamento diferentes: `NORMAL` (ou seja, produção), `DEVELOPMENT` e `TEST`. Se estiver a executar `quarkus:dev`, o modo será `DEVELOPMENT`, se estiver a executar um teste JUnit, será `TEST`, caso contrário, será `NORMAL`."

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:294
#, fuzzy
msgid "Your application can get the launch mode by injecting the `io.quarkus.runtime.LaunchMode` enum into a CDI bean, or by invoking the static method `io.quarkus.runtime.LaunchMode.current()`."
msgstr "A sua aplicação pode obter o modo de lançamento injectando o enum `io.quarkus.runtime.LaunchMode` num bean CDI ou invocando o método estático `io.quarkus.runtime.LaunchMode.current()`."

#. type: Title ==
#: upstream/_guides/lifecycle.adoc:295
#, fuzzy, no-wrap
msgid "Graceful Shutdown"
msgstr "Encerramento gracioso"

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:302
#, fuzzy
msgid "Quarkus includes support for graceful shutdown, this allows Quarkus to wait for running requests to finish, up till a set timeout. By default, this is disabled, however you can configure this by setting the `quarkus.shutdown.timeout` config property. When this is set shutdown will not happen until all running requests have completed, or until this timeout has elapsed. This config property is a duration, and can be set using the standard `java.time.Duration` format, if only a number is specified it is interpreted as seconds."
msgstr "O Quarkus inclui suporte para encerramento gracioso, o que permite ao Quarkus esperar que os pedidos em execução terminem, até um tempo limite definido. Por predefinição, esta opção está desactivada, mas pode ser configurada definindo a propriedade de configuração `quarkus.shutdown.timeout`. Quando esta é definida, o encerramento não ocorrerá até que todos os pedidos em execução tenham sido concluídos, ou até que este tempo limite tenha decorrido. Esta propriedade de configuração é uma duração e pode ser definida utilizando o formato padrão `java.time.Duration`. Se for especificado apenas um número, este é interpretado como segundos."

#. type: Plain text
#: upstream/_guides/lifecycle.adoc:304
#, fuzzy
msgid "Extensions that accept requests need to add support for this on an individual basis. At the moment only the HTTP extension supports this, so shutdown may still happen when messaging requests are active."
msgstr "As extensões que aceitam pedidos precisam de adicionar suporte para isto numa base individual. De momento, apenas a extensão HTTP suporta esta situação, pelo que o encerramento pode ainda acontecer quando os pedidos de envio de mensagens estão activos."
