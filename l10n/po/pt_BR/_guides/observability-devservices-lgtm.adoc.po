msgid ""
msgstr ""
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _guides/observability-devservices-lgtm.adoc
msgid "Observability Dev Services with Grafana OTel LGTM"
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "https://github.com/grafana/docker-otel-lgtm[OTel-LGTM] is `all-in-one` Docker image containing OpenTelemetry's https://github.com/open-telemetry/opentelemetry-proto/blob/main/docs/README.md[OTLP] as the protocol to transport metrics, tracing and logging data to an https://opentelemetry.io/docs/collector[OpenTelemetry Collector] which then stores signals data into https://prometheus.io/[Prometheus] (metrics), https://github.com/grafana/tempo[Tempo] (traces) and https://github.com/grafana/loki[Loki] (logs), only to have it visualized by https://github.com/grafana/grafana[Grafana]. It's used by Quarkus Observability to provide the Grafana OTel LGTM Dev Resource."
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "Configuring your project"
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "Add the Quarkus Grafana OTel LGTM sink (where data goes) extension to your build file:"
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "pom.xml"
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "build.gradle"
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "Metrics"
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "If you're using https://micrometer.io/[MicroMeter's] Quarkiverse OTLP registry to push metrics to Grafana OTel LGTM, this is how you would define the export endpoint url; where `quarkus.otel-collector.url` is provided by the Observability Dev Services extension."
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "Please note that the `${quarkus.otel-collector.url}` value is generated by quarkus when it starts the Grafana OTel LGTM Dev Resource."
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "Along OTel collector enpoint url, LGTM Dev Resource also provides a Grafana endpoint url - under `quarkus.grafana.url` property."
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "In this case LGTM Dev Resource would be automatically started and used by Observability Dev Services."
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "If you don't want all the hassle with Dev Services (e.g. lookup and re-use of existing running containers, etc) you can simply disable Dev Services and enable just Dev Resource usage:"
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "Tracing"
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "Just add the quarkus-opentelemetry extension to your build file:"
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "On the `application.properties` file, you can define:"
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "Access Grafana"
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "Once you start your app in dev mode:"
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "You will see a message like this:"
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "Remember that Grafana is accessible in an ephemeral port, so you need to check the logs to see which port is being used. In this example, it's port 61907."
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "If you miss the message you can always check the port with this Docker command:"
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "Tests"
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "And for the least 'auto-magical' usage in the tests, simply disable both (Dev Resources are already disabled by default):"
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "And then explicitly list LGTM Dev Resource in the test as a `@QuarkusTestResource` resource:"
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "Testing full Grafana OTel LGTM stack - example"
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "Use existing Quarkus MicroMeter OTLP registry"
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "On the test  `application.properties` file, you need to define:"
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "Simply inject the Meter registry into your code -- it will periodically push metrics to Grafana LGTM's OTLP HTTP endpoint."
msgstr ""

#: _guides/observability-devservices-lgtm.adoc
msgid "Where you can then check Grafana's datasource API for existing metrics data."
msgstr ""
