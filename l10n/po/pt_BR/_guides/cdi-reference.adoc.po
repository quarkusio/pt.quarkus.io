# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:24+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/cdi-reference.adoc:6
#, fuzzy, no-wrap
msgid "Contexts and Dependency Injection"
msgstr "Contextos e injeção de dependência"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:18
#, fuzzy
msgid "Quarkus DI solution (also called ArC) is based on the https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html[Jakarta Contexts and Dependency Injection 4.0, window=\"_blank\"] specification.  It implements the CDI Lite specification, with selected improvements on top, and passes the CDI Lite TCK.  It does not implement CDI Full.  See also xref:supported_features_and_limitations[the list of supported features and limitations]."
msgstr "A solução Quarkus DI (também chamada ArC) baseia-se na especificação  link:https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html[Jakarta Contexts and Dependency Injection 4.0, window=_blank]. Implementa a especificação CDI Lite, com melhorias seleccionadas no topo, e passa o CDI Lite TCK. Ele não implementa o CDI Full. Veja também  link:#supported_features_and_limitations[a lista de recursos e limitações suportados]."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:20
#, fuzzy
msgid "If you're new to CDI then we recommend you to read the xref:cdi.adoc[Introduction to CDI] first."
msgstr "Se é novo no CDI, recomendamos-lhe que leia primeiro a  link:cdi.html[Introdução ao CDI]."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:22
#, fuzzy
msgid "Most of the existing CDI code should work just fine but there are some small differences which follow from the Quarkus architecture and goals."
msgstr "A maior parte do código CDI existente deve funcionar perfeitamente, mas há algumas pequenas diferenças que decorrem da arquitetura e dos objectivos do Quarkus."

#. type: Title ==
#: upstream/_guides/cdi-reference.adoc:24
#, fuzzy, no-wrap
msgid "Bean Discovery"
msgstr "Descoberta do feijão"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:29
#, fuzzy
msgid "Bean discovery in CDI is a complex process which involves legacy deployment structures and accessibility requirements of the underlying module architecture.  However, Quarkus is using a *simplified bean discovery*.  There is only single bean archive with the https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html#default_bean_discovery[bean discovery mode `annotated`, window=\"_blank\"] and no visibility boundaries."
msgstr "A descoberta de feijões em CDI é um processo complexo que envolve estruturas de implantação herdadas e requisitos de acessibilidade da arquitetura do módulo subjacente. No entanto, a Quarkus está a utilizar uma descoberta de *feijões simplificada*. Existe apenas um único arquivo de feijões com o  link:https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html#default_bean_discovery[modo de descoberta de feijões `annotated`, window=_blank] e sem limites de visibilidade."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:31
#, fuzzy
msgid "The bean archive is synthesized from:"
msgstr "O arquivo de feijões é sintetizado a partir de:"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:33
#, fuzzy
msgid "the application classes,"
msgstr "as classes de aplicação,"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:34
#, fuzzy
msgid "dependencies that contain a `beans.xml` descriptor (content is ignored),"
msgstr "dependências que contêm um descritor `beans.xml` (o conteúdo é ignorado),"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:35
#, fuzzy
msgid "dependencies that contain a Jandex index - `META-INF/jandex.idx`,"
msgstr "dependências que contêm um índice Jandex - `META-INF/jandex.idx`,"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:36
#, fuzzy
msgid "dependencies referenced by `quarkus.index-dependency` in `application.properties`,"
msgstr "dependências referenciadas por `quarkus.index-dependency` em `application.properties`,"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:37
#, fuzzy
msgid "and Quarkus integration code."
msgstr "e o código de integração Quarkus."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:42
#, fuzzy
msgid "Bean classes that don't have a https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html#bean_defining_annotations[bean defining annotation, window=\"_blank\"] are not discovered.  This behavior is defined by CDI.  But producer methods and fields and observer methods are discovered even if the declaring class is not annotated with a bean defining annotation (this behavior is different to what is defined in CDI).  In fact, the declaring bean classes are considered annotated with `@Dependent`."
msgstr "As classes de feijão que não têm uma  link:https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html#bean_defining_annotations[anotação de definição de feijão, window=_blank] não são descobertas. Este comportamento é definido pelo CDI. Mas os métodos e campos do produtor e os métodos do observador são descobertos mesmo que a classe declarante não esteja anotada com uma anotação de definição de bean (este comportamento é diferente do definido no CDI). De facto, as classes de bean declarantes são consideradas anotadas com `@Dependent`."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:44
#, fuzzy
msgid "Quarkus extensions may declare additional discovery rules. For example, `@Scheduled` business methods are registered even if the declaring class is not annotated with a bean defining annotation."
msgstr "As extensões Quarkus podem declarar regras de descoberta adicionais. Por exemplo, os métodos comerciais `@Scheduled` são registados mesmo que a classe declarante não esteja anotada com uma anotação de definição de bean."

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:45
#, fuzzy, no-wrap
msgid "How to Generate a Jandex Index"
msgstr "Como gerar um índice Jandex"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:49
#, fuzzy
msgid "A dependency with a Jandex index is automatically scanned for beans.  To generate the index just add the following plugin to your build file:"
msgstr "Uma dependência com um índice Jandex é automaticamente pesquisada em busca de beans. Para gerar o índice, basta adicionar o seguinte plugin ao seu ficheiro de compilação:"

#. type: Block title
#: upstream/_guides/cdi-reference.adoc:51
#, fuzzy, no-wrap
msgid "Maven"
msgstr "Maven"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:72
#, no-wrap
msgid ""
"<build>\n"
"  <plugins>\n"
"    <plugin>\n"
"      <groupId>io.smallrye</groupId>\n"
"      <artifactId>jandex-maven-plugin</artifactId>\n"
"      <version>{jandex-version}</version>\n"
"      <executions>\n"
"        <execution>\n"
"          <id>make-index</id>\n"
"          <goals>\n"
"            <goal>jandex</goal>\n"
"          </goals>\n"
"        </execution>\n"
"      </executions>\n"
"    </plugin>\n"
"  </plugins>\n"
"</build>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/cdi-reference.adoc:76
#, fuzzy, no-wrap
msgid "Gradle (Groovy DSL)"
msgstr "Gradle (Groovy DSL)"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:84
#, no-wrap
msgid ""
"plugins {\n"
"    id 'org.kordamp.gradle.jandex' version '{jandex-gradle-plugin-version}'\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:86
#: upstream/_guides/cdi-reference.adoc:99
#, fuzzy
msgid "You can find the latest plugin version in the https://plugins.gradle.org/plugin/org.kordamp.gradle.jandex[Gradle Plugin Portal]"
msgstr "Pode encontrar a versão mais recente do plug-in no  link:https://plugins.gradle.org/plugin/org.kordamp.gradle.jandex[Portal de Plug-ins do Gradle]"

#. type: Block title
#: upstream/_guides/cdi-reference.adoc:89
#, fuzzy, no-wrap
msgid "Gradle (Kotlin DSL)"
msgstr "Gradle (Kotlin DSL)"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:97
#, no-wrap
msgid ""
"plugins {\n"
"    id(\"org.kordamp.gradle.jandex\") version '{jandex-gradle-plugin-version}'\n"
"}\n"
msgstr ""

#. type: delimited block *
#: upstream/_guides/cdi-reference.adoc:104
#, fuzzy
msgid "If you can't modify the dependency, you can still index it by adding `quarkus.index-dependency` entries to your `application.properties`:"
msgstr "Se não for possível modificar a dependência, pode ainda assim indexá-la adicionando entradas `quarkus.index-dependency` ao seu `application.properties`:"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:110
#, no-wrap
msgid ""
"quarkus.index-dependency.<name>.group-id=\n"
"quarkus.index-dependency.<name>.artifact-id=\n"
"quarkus.index-dependency.<name>.classifier=(this one is optional)\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:113
#, fuzzy
msgid "For example, the following entries ensure that the `org.acme:acme-api` dependency is indexed:"
msgstr "Por exemplo, as entradas seguintes asseguram que a dependência `org.acme:acme-api` é indexada:"

#. type: Block title
#: upstream/_guides/cdi-reference.adoc:114
#: upstream/_guides/cdi-reference.adoc:139
#: upstream/_guides/cdi-reference.adoc:151
#: upstream/_guides/cdi-reference.adoc:470
#: upstream/_guides/cdi-reference.adoc:654
#, fuzzy, no-wrap
msgid "Example application.properties"
msgstr "Exemplo de application.properties"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:119
#, no-wrap
msgid ""
"quarkus.index-dependency.acme.group-id=org.acme <1>\n"
"quarkus.index-dependency.acme.artifact-id=acme-api <2>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:121
#: upstream/_guides/cdi-reference.adoc:158
#, fuzzy
msgid "Value is a group id for a dependency identified by name `acme`."
msgstr "O valor é um identificador de grupo para uma dependência identificada pelo nome `acme`."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:122
#: upstream/_guides/cdi-reference.adoc:159
#, fuzzy
msgid "Value is an artifact id for a dependency identified by name `acme`."
msgstr "O valor é um identificador de artefacto para uma dependência identificada pelo nome `acme`."

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:123
#, fuzzy, no-wrap
msgid "How To Exclude Types and Dependencies from Discovery"
msgstr "Como excluir tipos e dependências da descoberta"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:129
#, fuzzy
msgid "It may happen that some beans from third-party libraries do not work correctly in Quarkus.  A typical example is a bean injecting a portable extension.  In such case, it's possible to exclude types and dependencies from the bean discovery.  The `quarkus.arc.exclude-types` property accepts a list of string values that are used to match classes that should be excluded."
msgstr "Pode acontecer que alguns beans de bibliotecas de terceiros não funcionem corretamente no Quarkus. Um exemplo típico é um bean que injecta uma extensão portátil. Nesse caso, é possível excluir tipos e dependências da descoberta do bean. A propriedade `quarkus.arc.exclude-types` aceita uma lista de valores de cadeia de caracteres que são utilizados para corresponder às classes que devem ser excluídas."

#. type: Block title
#: upstream/_guides/cdi-reference.adoc:130
#: upstream/_guides/cdi-reference.adoc:461
#: upstream/_guides/cdi-reference.adoc:645
#, fuzzy, no-wrap
msgid "Value Examples"
msgstr "Exemplos de valores"

#. type: Table
#: upstream/_guides/cdi-reference.adoc:132
#: upstream/_guides/cdi-reference.adoc:463
#: upstream/_guides/cdi-reference.adoc:647
#, fuzzy, no-wrap
msgid "Valu"
msgstr "Valor"

#. type: Table
#: upstream/_guides/cdi-reference.adoc:133
#: upstream/_guides/cdi-reference.adoc:464
#: upstream/_guides/cdi-reference.adoc:648
#, fuzzy, no-wrap
msgid "Description"
msgstr "Descrição"

#. type: Table
#: upstream/_guides/cdi-reference.adoc:133
#: upstream/_guides/cdi-reference.adoc:464
#: upstream/_guides/cdi-reference.adoc:648
#, fuzzy, no-wrap
msgid "`org.acme.Foo`"
msgstr "`org.acme.Foo`"

#. type: Table
#: upstream/_guides/cdi-reference.adoc:134
#, fuzzy, no-wrap
msgid "Match the fully qualified name of the class"
msgstr "Corresponde ao nome totalmente qualificado da classe"

#. type: Table
#: upstream/_guides/cdi-reference.adoc:134
#: upstream/_guides/cdi-reference.adoc:465
#: upstream/_guides/cdi-reference.adoc:649
#, fuzzy, no-wrap
msgid "`org.acme.*`"
msgstr "`org.acme.*`"

#. type: Table
#: upstream/_guides/cdi-reference.adoc:135
#, fuzzy, no-wrap
msgid "Match classes with package `org.acme`"
msgstr "Fazer corresponder as classes ao pacote `org.acme`"

#. type: Table
#: upstream/_guides/cdi-reference.adoc:135
#: upstream/_guides/cdi-reference.adoc:466
#: upstream/_guides/cdi-reference.adoc:650
#, fuzzy, no-wrap
msgid "`org.acme.**`"
msgstr "`org.acme.**`"

#. type: Table
#: upstream/_guides/cdi-reference.adoc:136
#, fuzzy, no-wrap
msgid "Match classes where the package starts with `org.acme`"
msgstr "Corresponde a classes em que o pacote começa com `org.acme`"

#. type: Table
#: upstream/_guides/cdi-reference.adoc:136
#: upstream/_guides/cdi-reference.adoc:467
#: upstream/_guides/cdi-reference.adoc:651
#, fuzzy, no-wrap
msgid "`Bar`"
msgstr "`Bar`"

#. type: Table
#: upstream/_guides/cdi-reference.adoc:137
#, fuzzy, no-wrap
msgid "Match the simple name of the class"
msgstr "Faz corresponder o nome simples da classe"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:143
#, no-wrap
msgid "quarkus.arc.exclude-types=org.acme.Foo,org.acme.*,Bar <1><2><3>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:145
#, fuzzy
msgid "Exclude the type `org.acme.Foo`."
msgstr "Excluir o tipo `org.acme.Foo`."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:146
#, fuzzy
msgid "Exclude all types from the `org.acme` package."
msgstr "Excluir todos os tipos do pacote `org.acme`."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:147
#, fuzzy
msgid "Exclude all types whose simple name is `Bar`"
msgstr "Excluir todos os tipos cujo nome simples seja `Bar`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:150
#, fuzzy
msgid "It is also possible to exclude a dependency artifact that would be otherwise scanned for beans.  For example, because it contains a `beans.xml` descriptor."
msgstr "Também é possível excluir um artefato de dependência que, de outra forma, seria verificado em busca de beans. Por exemplo, porque ele contém um descritor `beans.xml`."

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:156
#, no-wrap
msgid ""
"quarkus.arc.exclude-dependency.acme.group-id=org.acme <1>\n"
"quarkus.arc.exclude-dependency.acme.artifact-id=acme-services <2>\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/cdi-reference.adoc:160
#, fuzzy, no-wrap
msgid "Native Executables and Private Members"
msgstr "Executáveis nativos e membros privados"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:166
#, fuzzy
msgid "Quarkus is using GraalVM to build a native executable.  One of the limitations of GraalVM is the usage of link:https://www.graalvm.org/latest/reference-manual/native-image/Reflection/[Reflection, window=\"_blank\"].  Reflective operations are supported but all relevant members must be registered for reflection explicitly.  Those registrations result in a bigger native executable."
msgstr "O Quarkus está a usar o GraalVM para construir um executável nativo. Uma das limitações do GraalVM é o uso de  link:https://www.graalvm.org/latest/reference-manual/native-image/Reflection/[Reflexão, window=_blank]. As operações de reflexão são suportadas, mas todos os membros relevantes devem ser registados explicitamente para reflexão. Esses registos resultam num executável nativo maior."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:170
#, fuzzy
msgid "And if Quarkus DI needs to access a private member it *has to use reflection*.  That's why Quarkus users are encouraged __not to use private members__ in their beans.  This involves injection fields, constructors and initializers, observer methods, producer methods and fields, disposers and interceptor methods."
msgstr "E se o Quarkus DI precisar de aceder a um membro privado, *terá de utilizar a reflexão*. É por isso que os utilizadores do Quarkus são encorajados _a não utilizar membros privados_ nos seus beans. Isto envolve campos de injeção, construtores e inicializadores, métodos observadores, métodos e campos produtores, dispositores e métodos interceptores."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:173
#, fuzzy
msgid "How to avoid using private members? You can use package-private modifiers:"
msgstr "Como evitar a utilização de membros privados? Pode utilizar modificadores package-private:"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:178
#: upstream/_guides/cdi-reference.adoc:195
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CounterBean {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:181
#, no-wrap
msgid ""
"    @Inject\n"
"    CounterService counterService; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:185
#, no-wrap
msgid ""
"    void onMessage(@Observes Event msg) { <2>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:187
#, fuzzy
msgid "A package-private injection field."
msgstr "Um campo de injeção package-private."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:188
#, fuzzy
msgid "A package-private observer method."
msgstr "Um método de observador privado de pacote."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:190
#, fuzzy
msgid "Or constructor injection:"
msgstr "Ou injeção de construtores:"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:197
#, no-wrap
msgid "    private CounterService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:202
#, no-wrap
msgid ""
"    CounterBean(CounterService service) { <1>\n"
"      this.service = service;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:204
#, fuzzy
msgid "A package-private constructor injection. `@Inject` is optional in this particular case."
msgstr "Injeção de um construtor pacote-privado. `@Inject` é opcional neste caso particular."

#. type: Title ==
#: upstream/_guides/cdi-reference.adoc:206
#, fuzzy, no-wrap
msgid "[[supported_features]][[limitations]] Supported Features and Limitations"
msgstr "link:[, id=supported_features] link:[, id=limitations] Características e limitações suportadas"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:210
#, fuzzy
msgid "The CDI Lite specification is fully supported.  The following features from CDI Full are also supported:"
msgstr "A especificação CDI Lite é totalmente suportada. As seguintes características da CDI Full também são suportadas:"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:212
#, fuzzy
msgid "Decorators"
msgstr "Decoradores"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:213
#, fuzzy
msgid "Decoration of built-in beans, such as `Event`, is not supported"
msgstr "A decoração de beans incorporados, como `Event`, não é suportada"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:214
#, fuzzy
msgid "`BeanManager`"
msgstr "`BeanManager`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:215
#, fuzzy
msgid "In addition to the `BeanContainer` methods, the following methods are supported: `getInjectableReference()`, `resolveDecorators()`"
msgstr "Para além dos métodos `BeanContainer`, são suportados os seguintes métodos: `getInjectableReference()`, `resolveDecorators()`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:216
#, fuzzy
msgid "`@SessionScoped`"
msgstr "`@SessionScoped`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:217
#, fuzzy
msgid "Only with the Undertow extension; see xref:cdi.adoc#bean-scope-available[here] for details"
msgstr "Apenas com a extensão Undertow; ver  link:cdi.html#bean-scope-available[aqui] para mais informações"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:219
#, fuzzy
msgid "These additional features are not covered by the CDI Lite TCK."
msgstr "Estas características adicionais não são cobertas pelo TCK do CDI Lite."

#. type: Title ==
#: upstream/_guides/cdi-reference.adoc:221
#, fuzzy, no-wrap
msgid "Non-standard Features"
msgstr "Características não normalizadas"

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:223
#, fuzzy, no-wrap
msgid "Eager Instantiation of Beans"
msgstr "Instanciação ansiosa de beans"

#. type: Title ====
#: upstream/_guides/cdi-reference.adoc:226
#, fuzzy, no-wrap
msgid "Lazy By Default"
msgstr "Preguiçoso por defeito"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:230
#, fuzzy
msgid "By default, CDI beans are created lazily, when needed.  What exactly \"needed\" means depends on the scope of a bean."
msgstr "Por defeito, os beans CDI são criados de forma preguiçosa, quando necessário. O significado exato de \"necessário\" depende do âmbito de um bean."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:232
#, fuzzy
msgid "A *normal scoped bean* (`@ApplicationScoped`, `@RequestScoped`, etc.) is needed when a method is invoked upon an injected instance (contextual reference per the specification)."
msgstr "Um *bean de âmbito normal* ( `@ApplicationScoped`, `@RequestScoped`, etc.) é necessário quando um método é invocado numa instância injectada (referência contextual de acordo com a especificação)."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:234
#, fuzzy
msgid "In other words, injecting a normal scoped bean will not suffice because a _client proxy_ is injected instead of a contextual instance of the bean."
msgstr "Por outras palavras, a injeção de um bean com âmbito normal não será suficiente porque é injetado um _proxy de cliente_ em vez de uma instância contextual do bean."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:236
#, fuzzy
msgid "A *bean with a pseudo-scope* (`@Dependent` and `@Singleton` ) is created when injected."
msgstr "Um *bean com um pseudo-escopo* ( `@Dependent` e `@Singleton` ) é criado quando injetado."

#. type: Block title
#: upstream/_guides/cdi-reference.adoc:237
#, fuzzy, no-wrap
msgid "Lazy Instantiation Example"
msgstr "Exemplo de instanciação preguiçosa"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:246
#, no-wrap
msgid ""
"@Singleton // => pseudo-scope\n"
"class AmazingService {\n"
"  String ping() {\n"
"    return \"amazing\";\n"
"  }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:253
#, no-wrap
msgid ""
"@ApplicationScoped // => normal scope\n"
"class CoolService {\n"
"  String ping() {\n"
"    return \"cool\";\n"
"  }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:256
#, no-wrap
msgid ""
"@Path(\"/ping\")\n"
"public class PingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:259
#, no-wrap
msgid ""
"  @Inject\n"
"  AmazingService s1; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:262
#, no-wrap
msgid ""
"  @Inject\n"
"  CoolService s2; <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:268
#, no-wrap
msgid ""
"  @GET\n"
"  public String ping() {\n"
"    return s1.ping() + s2.ping(); <3>\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:270
#, fuzzy
msgid "Injection triggers the instantiation of `AmazingService`."
msgstr "A injeção desencadeia a instanciação de `AmazingService`."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:271
#, fuzzy
msgid "Injection itself does not result in the instantiation of `CoolService`. A client proxy is injected."
msgstr "A injeção em si não resulta na instanciação de `CoolService`. É injetado um proxy de cliente."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:272
#, fuzzy
msgid "The first invocation upon the injected proxy triggers the instantiation of `CoolService`."
msgstr "A primeira invocação do proxy injetado desencadeia a instanciação de `CoolService`."

#. type: Title ====
#: upstream/_guides/cdi-reference.adoc:274
#, fuzzy, no-wrap
msgid "Startup Event"
msgstr "Evento de arranque"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:277
#, fuzzy
msgid "However, if you really need to instantiate a bean eagerly you can:"
msgstr "No entanto, se precisar mesmo de instanciar um bean de forma ágil, pode fazê-lo:"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:279
#, fuzzy
msgid "Declare an observer of the `StartupEvent` - the scope of the bean does not matter in this case:"
msgstr "Declarar um observador do `StartupEvent` - o âmbito do bean não importa neste caso:"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:287
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class CoolService {\n"
"  void startup(@Observes StartupEvent event) { <1>\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:289
#, fuzzy
msgid "A `CoolService` is created during startup to service the observer method invocation."
msgstr "É criado um `CoolService` durante o arranque para servir a invocação do método do observador."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:291
#, fuzzy
msgid "Use the bean in an observer of the `StartupEvent` - normal scoped beans must be used as described in xref:lazy_by_default[Lazy By Default]:"
msgstr "Utilize o bean num observador do `StartupEvent` - os beans com âmbito normal devem ser utilizados conforme descrito em  link:#lazy_by_default[Preguiçoso por predefinição]:"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:296
#, no-wrap
msgid ""
"@Dependent\n"
"class MyBeanStarter {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:301
#, no-wrap
msgid ""
"  void startup(@Observes StartupEvent event, AmazingService amazing, CoolService cool) { <1>\n"
"    cool.toString(); <2>\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:303
#, fuzzy
msgid "The `AmazingService` is created during injection."
msgstr "O `AmazingService` é criado durante a injeção."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:304
#, fuzzy
msgid "The `CoolService` is a normal scoped bean, so we have to invoke a method upon the injected proxy to force the instantiation."
msgstr "O `CoolService` é um bean com âmbito de aplicação normal, pelo que temos de invocar um método no proxy injetado para forçar a instanciação."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:306
#, fuzzy
msgid "Annotate the bean with `@io.quarkus.runtime.Startup` as described in xref:lifecycle.adoc#startup_annotation[Startup annotation]:"
msgstr "Anotar o bean com `@io.quarkus.runtime.Startup` conforme descrito em  link:lifecycle.html#startup_annotation[Anotação de arranque]:"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:312
#, no-wrap
msgid ""
"@Startup // <1>\n"
"@ApplicationScoped\n"
"public class EagerAppBean {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:314
#, no-wrap
msgid "   private final String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:319
#, no-wrap
msgid ""
"   EagerAppBean(NameGenerator generator) { // <2>\n"
"     this.name = generator.createName();\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:321
#, fuzzy
msgid "For each bean annotated with `@Startup` a synthetic observer of `StartupEvent` is generated. The default priority is used."
msgstr "Para cada bean anotado com `@Startup` é gerado um observador sintético de `StartupEvent`. É utilizada a prioridade predefinida."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:322
#, fuzzy
msgid "The bean constructor is called when the application starts and the resulting contextual instance is stored in the application context."
msgstr "O construtor do bean é chamado quando a aplicação é iniciada e a instância contextual resultante é armazenada no contexto da aplicação."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:324
#, fuzzy
msgid "Quarkus users are encouraged to always prefer the `@Observes StartupEvent` to `@Initialized(ApplicationScoped.class)` as explained in the xref:lifecycle.adoc[Application Initialization and Termination] guide."
msgstr "Os utilizadores do Quarkus são encorajados a preferir sempre o `@Observes StartupEvent` a `@Initialized(ApplicationScoped.class)`, tal como explicado no guia de  link:lifecycle.html[Inicialização e Terminação da Aplicação]."

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:325
#, fuzzy, no-wrap
msgid "Request Context Lifecycle"
msgstr "Ciclo de vida do contexto do pedido"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:328
#, fuzzy
msgid "The request context is also active:"
msgstr "O contexto do pedido também está ativo:"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:330
#, fuzzy
msgid "during notification of a synchronous observer method."
msgstr "durante a notificação de um método de observador síncrono."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:332
#, fuzzy
msgid "The request context is destroyed:"
msgstr "O contexto do pedido é destruído:"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:334
#, fuzzy
msgid "after the observer notification completes for an event, if it was not already active when the notification started."
msgstr "após a notificação do observador ter sido concluída para um evento, se ainda não estava ativo quando a notificação começou."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:336
#, fuzzy
msgid "An event with qualifier `@Initialized(RequestScoped.class)` is fired when the request context is initialized for an observer notification. Moreover, the events with qualifiers `@BeforeDestroyed(RequestScoped.class)` and `@Destroyed(RequestScoped.class)` are fired when the request context is destroyed."
msgstr "Um evento com o qualificador `@Initialized(RequestScoped.class)` é disparado quando o contexto do pedido é inicializado para uma notificação do observador. Além disso, os eventos com os qualificadores `@BeforeDestroyed(RequestScoped.class)` e `@Destroyed(RequestScoped.class)` são disparados quando o contexto do pedido é destruído."

#. type: Title ====
#: upstream/_guides/cdi-reference.adoc:337
#, fuzzy, no-wrap
msgid "How to Enable Trace Logging for Request Context Activation"
msgstr "Como ativar o registo de rastreio para a ativação do contexto do pedido"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:340
#, fuzzy
msgid "You can set the `TRACE` level for the logger `io.quarkus.arc.requestContext` and try to analyze the log output afterwards."
msgstr "Pode definir o nível `TRACE` para o registador `io.quarkus.arc.requestContext` e tentar analisar a saída do registo posteriormente."

#. type: Block title
#: upstream/_guides/cdi-reference.adoc:341
#, fuzzy, no-wrap
msgid "`application.properties` Example"
msgstr "`application.properties` Exemplo"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:346
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.arc.requestContext\".min-level=TRACE <1>\n"
"quarkus.log.category.\"io.quarkus.arc.requestContext\".level=TRACE\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:348
#, fuzzy
msgid "You also need to adjust the minimum log level for the relevant category."
msgstr "Também é necessário ajustar o nível mínimo de registo para a categoria relevante."

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:349
#, fuzzy, no-wrap
msgid "Qualified Injected Fields"
msgstr "Campos Injectados Qualificados"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:352
#, fuzzy
msgid "In CDI, if you declare a field injection point you need to use `@Inject` and optionally a set of qualifiers."
msgstr "Em CDI, se declarar um ponto de injeção de campo, tem de utilizar `@Inject` e, opcionalmente, um conjunto de qualificadores."

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:358
#: upstream/_guides/cdi-reference.adoc:671
#, no-wrap
msgid ""
"  @Inject\n"
"  @ConfigProperty(name = \"cool\")\n"
"  String coolProperty;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:361
#, fuzzy
msgid "In Quarkus, you can skip the `@Inject` annotation completely if the injected field declares at least one qualifier."
msgstr "No Quarkus, é possível ignorar completamente a anotação `@Inject` se o campo injetado declarar pelo menos um qualificador."

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:366
#: upstream/_guides/cdi-reference.adoc:688
#, no-wrap
msgid ""
"  @ConfigProperty(name = \"cool\")\n"
"  String coolProperty;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:369
#, fuzzy
msgid "With the notable exception of one special case discussed below, `@Inject` is still required for constructor and method injection."
msgstr "Com a notável exceção de um caso especial discutido abaixo, `@Inject` continua a ser necessário para a injeção de construtores e métodos."

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:370
#, fuzzy, no-wrap
msgid "Simplified Constructor Injection"
msgstr "Injeção de Construtor Simplificada"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:374
#, fuzzy
msgid "In CDI, a normal scoped bean must always declare a no-args constructor (this constructor is normally generated by the compiler unless you declare any other constructor).  However, this requirement complicates constructor injection - you need to provide a dummy no-args constructor to make things work in CDI."
msgstr "Em CDI, um bean com escopo normal deve sempre declarar um construtor no-args (esse construtor é normalmente gerado pelo compilador, a menos que você declare qualquer outro construtor). No entanto, este requisito complica a injeção de construtores - é necessário fornecer um construtor no-args fictício para que as coisas funcionem em CDI."

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:379
#: upstream/_guides/cdi-reference.adoc:399
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyCoolService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:381
#: upstream/_guides/cdi-reference.adoc:401
#, no-wrap
msgid "  private SimpleProcessor processor;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:384
#, no-wrap
msgid ""
"  MyCoolService() { // dummy constructor needed\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:390
#, no-wrap
msgid ""
"  @Inject // constructor injection\n"
"  MyCoolService(SimpleProcessor processor) {\n"
"    this.processor = processor;\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:394
#, fuzzy
msgid "There is no need to declare dummy constructors for normal scoped bean in Quarkus - they are generated automatically.  Also, if there's only one constructor there is no need for `@Inject`."
msgstr "No Quarkus, não é necessário declarar construtores fictícios para um feijão com escopo normal - eles são gerados automaticamente. Além disso, se houver apenas um construtor, não há necessidade de `@Inject`."

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:406
#, no-wrap
msgid ""
"  MyCoolService(SimpleProcessor processor) {\n"
"    this.processor = processor;\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:409
#, fuzzy
msgid "We don't generate a no-args constructor automatically if a bean class extends a class that does not declare a no-args constructor."
msgstr "Não geramos um construtor no-args automaticamente se uma classe bean estende uma classe que não declara um construtor no-args."

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:411
#, fuzzy, no-wrap
msgid "Removing Unused Beans"
msgstr "Remoção de beans não utilizados"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:419
#, fuzzy
msgid "The container attempts to remove all unused beans, interceptors and decorators during build by default.  This optimization helps to minimize the amount of generated classes, thus conserving memory.  However, Quarkus can't detect the programmatic lookup performed via the `CDI.current()` static method.  Therefore, it is possible that a removal results in a false positive error, i.e. a bean is removed although it's actually used.  In such cases, you'll notice a big warning in the log.  Users and extension authors have several options xref:eliminate_false_positives[how to eliminate false positives]."
msgstr "Por defeito, o contentor tenta remover todos os beans, interceptores e decoradores não utilizados durante a construção. Esta otimização ajuda a minimizar a quantidade de classes geradas, conservando assim a memória. No entanto, o Quarkus não consegue detetar a pesquisa programática efectuada através do método estático `CDI.current()`. Portanto, é possível que uma remoção resulte num erro falso positivo, ou seja, um bean é removido embora seja efetivamente utilizado. Nesses casos, notará um grande aviso no registo. Os utilizadores e os autores de extensões têm várias opções  link:#eliminate_false_positives[para eliminar os falsos positivos]."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:423
#, fuzzy
msgid "The optimization can be disabled by setting `quarkus.arc.remove-unused-beans` to `none` or `false`.  Quarkus also provides a middle ground where application beans are never removed whether or not they are unused, while the optimization proceeds normally for non application classes.  To use this mode, set `quarkus.arc.remove-unused-beans` to `fwk` or `framework`."
msgstr "A otimização pode ser desactivada definindo `quarkus.arc.remove-unused-beans` para `none` ou `false`. O Quarkus também fornece um meio-termo em que os beans de aplicação nunca são removidos, independentemente de estarem ou não sendo usados, enquanto a otimização prossegue normalmente para classes que não são de aplicação. Para utilizar este modo, defina `quarkus.arc.remove-unused-beans` para `fwk` ou `framework`."

#. type: Title ====
#: upstream/_guides/cdi-reference.adoc:424
#, fuzzy, no-wrap
msgid "What's Removed?"
msgstr "O que é que foi removido?"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:428
#, fuzzy
msgid "Quarkus first identifies so-called _unremovable_ beans that form the roots in the dependency tree.  A good example is a Jakarta REST resource class or a bean which declares a `@Scheduled` method."
msgstr "O Quarkus identifica primeiro os chamados beans _não removíveis_ que formam as raízes na árvore de dependências. Um bom exemplo é uma classe de recurso Jakarta REST ou um bean que declara um método `@Scheduled`."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:430
#, fuzzy
msgid "An _unremovable_ bean:"
msgstr "Um feijão _inamovível_:"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:432
#, fuzzy
msgid "is excluded from removal by an extension, or"
msgstr "for excluído da remoção por uma extensão, ou"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:433
#, fuzzy
msgid "has a name designated via `@Named`, or"
msgstr "tem um nome designado através de `@Named`, ou"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:434
#, fuzzy
msgid "declares an observer method."
msgstr "declara um método de observador."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:436
#, fuzzy
msgid "An _unused_ bean:"
msgstr "Um feijão _não utilizado_:"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:438
#, fuzzy
msgid "is not _unremovable_, and"
msgstr "não é _inamovível_, e"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:439
#, fuzzy
msgid "is not eligible for injection to any injection point in the dependency tree, and"
msgstr "não é elegível para injeção em qualquer ponto de injeção na árvore de dependências, e"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:440
#, fuzzy
msgid "does not declare any producer which is eligible for injection to any injection point in the dependency tree, and"
msgstr "não declara qualquer produtor que seja elegível para injeção em qualquer ponto de injeção na árvore de dependências, e"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:441
#, fuzzy
msgid "is not eligible for injection into any `jakarta.enterprise.inject.Instance` or `jakarta.inject.Provider` injection point."
msgstr "não é elegível para injeção em qualquer ponto de injeção de `jakarta.enterprise.inject.Instance` ou `jakarta.inject.Provider`."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:443
#, fuzzy
msgid "Unused interceptors and decorators are not associated with any bean."
msgstr "Os interceptores e decoradores não utilizados não estão associados a nenhum bean."

#. type: delimited block =
#: upstream/_guides/cdi-reference.adoc:447
#, fuzzy
msgid "When using the dev mode (running `./mvnw clean compile quarkus:dev`), you can see more information about which beans are being removed:"
msgstr "Ao utilizar o modo dev (executando `./mvnw clean compile quarkus:dev`), pode ver mais informações sobre os beans que estão a ser removidos:"

#. type: delimited block =
#: upstream/_guides/cdi-reference.adoc:449
#, fuzzy
msgid "In the console - just enable the DEBUG level in your `application.properties`, i.e. `quarkus.log.category.\"io.quarkus.arc.processor\".level=DEBUG`"
msgstr "Na consola - basta ativar o nível DEBUG em `application.properties`, ou seja `quarkus.log.category.\"io.quarkus.arc.processor\".level=DEBUG`"

#. type: delimited block =
#: upstream/_guides/cdi-reference.adoc:450
#, fuzzy
msgid "In the relevant Dev UI page"
msgstr "Na página Dev UI relevante"

#. type: Title ====
#: upstream/_guides/cdi-reference.adoc:453
#, fuzzy, no-wrap
msgid "How To Eliminate False Positives"
msgstr "Como eliminar os falsos positivos"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:457
#, fuzzy
msgid "Users can instruct the container to not remove any of their specific beans (even if they satisfy all the rules specified above) by annotating them with `@io.quarkus.arc.Unremovable`.  This annotation can be declared on a class, a producer method or field."
msgstr "Os utilizadores podem instruir o contentor para não remover nenhum dos seus beans específicos (mesmo que satisfaçam todas as regras especificadas acima) anotando-os com `@io.quarkus.arc.Unremovable`. Esta anotação pode ser declarada numa classe, num método produtor ou num campo."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:460
#, fuzzy
msgid "Since this is not always possible, there is an option to achieve the same via `application.properties`.  The `quarkus.arc.unremovable-types` property accepts a list of string values that are used to match beans based on their name or package."
msgstr "Uma vez que isto nem sempre é possível, existe uma opção para conseguir o mesmo através de `application.properties`. A propriedade `quarkus.arc.unremovable-types` aceita uma lista de valores de cadeia de caracteres que são utilizados para fazer corresponder os beans com base no seu nome ou pacote."

#. type: Table
#: upstream/_guides/cdi-reference.adoc:465
#, fuzzy, no-wrap
msgid "Match the fully qualified name of the bean class"
msgstr "Corresponde ao nome totalmente qualificado da classe do bean"

#. type: Table
#: upstream/_guides/cdi-reference.adoc:466
#: upstream/_guides/cdi-reference.adoc:650
#, fuzzy, no-wrap
msgid "Match beans where the package of the bean class is `org.acme`"
msgstr "Corresponde aos feijões em que o pacote da classe do feijão é `org.acme`"

#. type: Table
#: upstream/_guides/cdi-reference.adoc:467
#: upstream/_guides/cdi-reference.adoc:651
#, fuzzy, no-wrap
msgid "Match beans where the package of the bean class starts with `org.acme`"
msgstr "Corresponde aos feijões em que o pacote da classe do feijão começa com `org.acme`"

#. type: Table
#: upstream/_guides/cdi-reference.adoc:468
#, fuzzy, no-wrap
msgid "Match the simple name of the bean class"
msgstr "Faz corresponder o nome simples da classe do feijão"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:474
#, no-wrap
msgid "quarkus.arc.unremovable-types=org.acme.Foo,org.acme.*,Bar\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:477
#, fuzzy
msgid "Furthermore, extensions can eliminate false positives by producing an `UnremovableBeanBuildItem`."
msgstr "Além disso, as extensões podem eliminar os falsos positivos produzindo um `UnremovableBeanBuildItem`."

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:479
#, fuzzy, no-wrap
msgid "Default Beans"
msgstr "Feijões por defeito"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:483
#, fuzzy
msgid "Quarkus adds a capability that CDI currently does not support which is to conditionally declare a bean if no other bean with equal types and qualifiers was declared by any available means (bean class, producer, synthetic bean, ...)  This is done using the `@io.quarkus.arc.DefaultBean` annotation and is best explained with an example."
msgstr "O Quarkus acrescenta uma capacidade que o CDI não suporta atualmente, que consiste em declarar condicionalmente um bean se nenhum outro bean com tipos e qualificadores iguais tiver sido declarado por qualquer meio disponível (classe de bean, produtor, bean sintético, ...) Isto é feito utilizando a anotação `@io.quarkus.arc.DefaultBean` e é melhor explicado com um exemplo."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:485
#, fuzzy
msgid "Say there is a Quarkus extension that among other things declares a few CDI beans like the following code does:"
msgstr "Digamos que existe uma extensão Quarkus que, entre outras coisas, declara alguns beans CDI como o código seguinte faz:"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:490
#: upstream/_guides/cdi-reference.adoc:544
#: upstream/_guides/cdi-reference.adoc:565
#: upstream/_guides/cdi-reference.adoc:595
#: upstream/_guides/cdi-reference.adoc:618
#, no-wrap
msgid ""
"@Dependent\n"
"public class TracerConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:495
#, no-wrap
msgid ""
"    @Produces\n"
"    public Tracer tracer(Reporter reporter, Configuration configuration) {\n"
"        return new Tracer(reporter, configuration);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:501
#, no-wrap
msgid ""
"    @Produces\n"
"    @DefaultBean\n"
"    public Configuration configuration() {\n"
"        // create a Configuration\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:508
#, no-wrap
msgid ""
"    @Produces\n"
"    @DefaultBean\n"
"    public Reporter reporter(){\n"
"        // create a Reporter\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:513
#, fuzzy
msgid "The idea is that the extension autoconfigures things for the user, eliminating a lot of boilerplate - we can just `@Inject` a `Tracer` wherever it is needed.  Now imagine that in our application we would like to utilize the configured `Tracer`, but we need to customize it a little, for example by providing a custom `Reporter`.  The only thing that would be needed in our application would be something like the following:"
msgstr "A ideia é que a extensão autoconfigure as coisas para o utilizador, eliminando uma grande quantidade de clichés - podemos simplesmente `@Inject` a `Tracer` onde quer que seja necessário. Agora imagine que na nossa aplicação gostaríamos de utilizar o `Tracer` configurado, mas precisamos de o personalizar um pouco, por exemplo, fornecendo um `Reporter` personalizado. A única coisa que seria necessária na nossa aplicação seria algo como o seguinte:"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:519
#, no-wrap
msgid ""
"@Dependent\n"
"public class CustomTracerConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:525
#, no-wrap
msgid ""
"    @Produces\n"
"    public Reporter reporter(){\n"
"        // create a custom Reporter\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:529
#, fuzzy
msgid "`@DefaultBean` allows extensions (or any other code for that matter) to provide defaults while backing off if beans of that type are supplied in any way Quarkus supports."
msgstr "`@DefaultBean` permite que as extensões (ou qualquer outro código) forneçam predefinições e recuem se os grãos desse tipo forem fornecidos de qualquer forma suportada pelo Quarkus."

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:531
#, fuzzy, no-wrap
msgid "Enabling Beans for Quarkus Build Profile"
msgstr "Ativação de Beans para o perfil de compilação Quarkus"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:536
#, fuzzy
msgid "Quarkus adds a capability that CDI currently does not support which is to conditionally enable a bean when a Quarkus build time profile is enabled, via the `@io.quarkus.arc.profile.IfBuildProfile` and `@io.quarkus.arc.profile.UnlessBuildProfile` annotations.  When used in conjunction with `@io.quarkus.arc.DefaultBean`, these annotations allow for the creation of different bean configurations for different build profiles."
msgstr "O Quarkus acrescenta uma capacidade que o CDI não suporta atualmente, que é a de ativar condicionalmente um bean quando um perfil de tempo de construção do Quarkus está ativado, através das anotações `@io.quarkus.arc.profile.IfBuildProfile` e `@io.quarkus.arc.profile.UnlessBuildProfile`. Quando utilizadas em conjunto com `@io.quarkus.arc.DefaultBean`, estas anotações permitem a criação de diferentes configurações de bean para diferentes perfis de construção."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:539
#, fuzzy
msgid "Imagine for instance that an application contains a bean named `Tracer`, which needs to do nothing when in tests or in dev mode, but works in its normal capacity for the production artifact.  An elegant way to create such beans is the following:"
msgstr "Imagine, por exemplo, que uma aplicação contém um bean chamado `Tracer`, que não precisa de fazer nada quando está em testes ou em modo de desenvolvimento, mas que funciona normalmente no artefacto de produção. Uma maneira elegante de criar esses beans é a seguinte:"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:550
#, no-wrap
msgid ""
"    @Produces\n"
"    @IfBuildProfile(\"prod\")\n"
"    public Tracer realTracer(Reporter reporter, Configuration configuration) {\n"
"        return new RealTracer(reporter, configuration);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:557
#: upstream/_guides/cdi-reference.adoc:578
#: upstream/_guides/cdi-reference.adoc:608
#: upstream/_guides/cdi-reference.adoc:631
#, no-wrap
msgid ""
"    @Produces\n"
"    @DefaultBean\n"
"    public Tracer noopTracer() {\n"
"        return new NoopTracer();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:560
#, fuzzy
msgid "If instead, it is required that the `Tracer` bean also works in dev mode and only default to doing nothing for tests, then `@UnlessBuildProfile` would be ideal. The code would look like:"
msgstr "Se, em vez disso, for necessário que o bean `Tracer` também funcione no modo de desenvolvimento e apenas não faça nada por defeito para testes, então `@UnlessBuildProfile` seria o ideal. O código seria parecido com:"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:571
#, no-wrap
msgid ""
"    @Produces\n"
"    @UnlessBuildProfile(\"test\") // this will be enabled for both prod and dev build time profiles\n"
"    public Tracer realTracer(Reporter reporter, Configuration configuration) {\n"
"        return new RealTracer(reporter, configuration);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:581
#, fuzzy
msgid "The runtime profile has absolutely no effect on the bean resolution using `@IfBuildProfile` and `@UnlessBuildProfile`."
msgstr "O perfil de tempo de execução não tem qualquer efeito na resolução do feijão utilizando `@IfBuildProfile` e `@UnlessBuildProfile`."

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:583
#, fuzzy, no-wrap
msgid "Enabling Beans for Quarkus Build Properties"
msgstr "Ativação de Beans para Quarkus Build Properties"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:588
#, fuzzy
msgid "Quarkus adds a capability that CDI currently does not support which is to conditionally enable a bean when a Quarkus build time property has/has not a specific value, via the `@io.quarkus.arc.properties.IfBuildProperty` and `@io.quarkus.arc.properties.UnlessBuildProperty` annotations.  When used in conjunction with `@io.quarkus.arc.DefaultBean`, this annotation allow for the creation of different bean configurations for different build properties."
msgstr "O Quarkus acrescenta uma capacidade que o CDI não suporta atualmente, que é a de ativar condicionalmente um bean quando uma propriedade de tempo de construção do Quarkus tem/não tem um valor específico, através das anotações `@io.quarkus.arc.properties.IfBuildProperty` e `@io.quarkus.arc.properties.UnlessBuildProperty`. Quando utilizada em conjunto com `@io.quarkus.arc.DefaultBean`, esta anotação permite a criação de diferentes configurações de bean para diferentes propriedades de construção."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:590
#, fuzzy
msgid "The scenario we mentioned above with `Tracer` could also be implemented in the following way:"
msgstr "O cenário que mencionámos acima com `Tracer` também pode ser implementado da seguinte forma:"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:601
#, no-wrap
msgid ""
"    @Produces\n"
"    @IfBuildProperty(name = \"some.tracer.enabled\", stringValue = \"true\")\n"
"    public Tracer realTracer(Reporter reporter, Configuration configuration) {\n"
"        return new RealTracer(reporter, configuration);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:611
#, fuzzy
msgid "`@IfBuildProperty` and `@UnlessBuildProperty` are repeatable annotations, i.e. a bean will only be enabled if **all** the conditions defined by these annotations are satisfied."
msgstr "`@IfBuildProperty` e `@UnlessBuildProperty` são anotações repetíveis, ou seja, um bean só será ativado se *todas as* condições definidas por estas anotações forem satisfeitas."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:613
#, fuzzy
msgid "If instead, it is required that the `RealTracer` bean is only used if the `some.tracer.enabled` property is not `false`, then `@UnlessBuildProperty` would be ideal. The code would look like:"
msgstr "Se, em vez disso, for necessário que o bean `RealTracer` só seja utilizado se a propriedade `some.tracer.enabled` não for `false`, então `@UnlessBuildProperty` seria o ideal. O código seria parecido com:"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:624
#, no-wrap
msgid ""
"    @Produces\n"
"    @UnlessBuildProperty(name = \"some.tracer.enabled\", stringValue = \"false\")\n"
"    public Tracer realTracer(Reporter reporter, Configuration configuration) {\n"
"        return new RealTracer(reporter, configuration);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:634
#, fuzzy
msgid "Properties set at runtime have absolutely no effect on the bean resolution using `@IfBuildProperty`."
msgstr "As propriedades definidas em tempo de execução não têm qualquer efeito na resolução do feijão utilizando `@IfBuildProperty`."

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:635
#, fuzzy, no-wrap
msgid "Declaring Selected Alternatives"
msgstr "Declaração das alternativas seleccionadas"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:639
#, fuzzy
msgid "In CDI, an alternative bean may be selected either globally for an application by means of `@Priority`, or for a bean archive using a `beans.xml` descriptor.  Quarkus has a simplified bean discovery and the content of `beans.xml` is ignored."
msgstr "Em CDI, um bean alternativo pode ser selecionado globalmente para uma aplicação através de `@Priority`, ou para um arquivo de beans através de um descritor `beans.xml`. O Quarkus tem uma descoberta simplificada de feijões e o conteúdo de `beans.xml` é ignorado."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:644
#, fuzzy
msgid "However, it is also possible to select alternatives for an application using the unified configuration.  The `quarkus.arc.selected-alternatives` property accepts a list of string values that are used to match alternative beans.  If any value matches then the priority of `Integer#MAX_VALUE` is used for the relevant bean.  The priority declared via `@Priority` or inherited from a stereotype is overridden."
msgstr "No entanto, também é possível selecionar alternativas para uma aplicação utilizando a configuração unificada. A propriedade `quarkus.arc.selected-alternatives` aceita uma lista de valores de cadeia de caracteres que são utilizados para corresponder a beans alternativos. Se algum valor corresponder, então a prioridade de `Integer#MAX_VALUE` é utilizada para o bean relevante. A prioridade declarada através de `@Priority` ou herdada de um estereótipo é substituída."

#. type: Table
#: upstream/_guides/cdi-reference.adoc:649
#, fuzzy, no-wrap
msgid "Match the fully qualified name of the bean class or the bean class of the bean that declares the producer"
msgstr "Corresponde ao nome totalmente qualificado da classe bean ou à classe bean do bean que declara o produtor"

#. type: Table
#: upstream/_guides/cdi-reference.adoc:652
#, fuzzy, no-wrap
msgid "Match the simple name of the bean class or the bean class of the bean that declares the producer"
msgstr "Faz corresponder o nome simples da classe do bean ou a classe do bean que declara o produtor"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:658
#, no-wrap
msgid "quarkus.arc.selected-alternatives=org.acme.Foo,org.acme.*,Bar\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:660
#, fuzzy, no-wrap
msgid "Simplified Producer Method Declaration"
msgstr "Declaração do Método do Produtor Simplificado"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:663
#, fuzzy
msgid "In CDI, a producer method must be always annotated with `@Produces`."
msgstr "Em CDI, um método produtor deve ser sempre anotado com `@Produces`."

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:667
#: upstream/_guides/cdi-reference.adoc:685
#, no-wrap
msgid "class Producers {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:678
#, no-wrap
msgid ""
"  @Produces\n"
"  @ApplicationScoped\n"
"  MyService produceService() {\n"
"    return new MyService(coolProperty);\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:681
#, fuzzy
msgid "In Quarkus, you can skip the `@Produces` annotation completely if the producer method is annotated with a scope annotation, a stereotype or a qualifier."
msgstr "No Quarkus, pode ignorar completamente a anotação `@Produces` se o método produtor for anotado com uma anotação de âmbito, um estereótipo ou um qualificador."

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:694
#, no-wrap
msgid ""
"  @ApplicationScoped\n"
"  MyService produceService() {\n"
"    return new MyService(coolProperty);\n"
"  }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:696
#, fuzzy, no-wrap
msgid "Interception of Static Methods"
msgstr "Interceção de métodos estáticos"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:702
#, fuzzy
msgid "The Interceptors specification is clear that _around-invoke_ methods must not be declared static.  However, this restriction was driven mostly by technical limitations.  And since Quarkus is a build-time oriented stack that allows for additional class transformations, those limitations don't apply anymore.  It's possible to annotate a non-private static method with an interceptor binding:"
msgstr "A especificação dos Interceptores é clara quanto ao facto de os métodos _around-invoke_ não deverem ser declarados estáticos. No entanto, essa restrição foi motivada principalmente por limitações técnicas. E como o Quarkus é uma pilha orientada a tempo de construção que permite transformações adicionais de classe, essas limitações não se aplicam mais. É possível anotar um método estático não-privado com uma ligação de intercetor:"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:706
#, no-wrap
msgid "class Services {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:714
#, no-wrap
msgid ""
"  @Logged <1>\n"
"  static BigDecimal computePrice(long amount) { <2>\n"
"    BigDecimal price;\n"
"    // Perform computations...\n"
"    return price;\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:716
#, fuzzy
msgid "`Logged` is an interceptor binding."
msgstr "`Logged` é uma ligação intercetora."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:717
#, fuzzy
msgid "Each method invocation is intercepted if there is an interceptor associated with `Logged`."
msgstr "Cada invocação de método é interceptada se existir um intercetor associado a `Logged`."

#. type: Title ====
#: upstream/_guides/cdi-reference.adoc:718
#, fuzzy, no-wrap
msgid "Limitations"
msgstr "Limitações"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:721
#, fuzzy
msgid "Only *method-level bindings* are considered for backward compatibility reasons (otherwise static methods of bean classes that declare class-level bindings would be suddenly intercepted)"
msgstr "Apenas *as ligações ao nível dos métodos* são consideradas por razões de retrocompatibilidade (caso contrário, os métodos estáticos das classes de feijões que declaram ligações ao nível da classe seriam subitamente interceptados)"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:722
#, fuzzy
msgid "Private static methods are never intercepted"
msgstr "Os métodos estáticos privados nunca são interceptados"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:723
#, fuzzy
msgid "`InvocationContext#getTarget()` returns `null` for obvious reasons; therefore not all existing interceptors may behave correctly when intercepting static methods"
msgstr "`InvocationContext#getTarget()` devolve `null` por razões óbvias; por conseguinte, nem todos os interceptores existentes podem comportar-se corretamente quando interceptam métodos estáticos"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:725
#, fuzzy
msgid "Interceptors can use `InvocationContext.getMethod()` to detect static methods and adjust the behavior accordingly."
msgstr "Os interceptores podem utilizar `InvocationContext.getMethod()` para detetar métodos estáticos e ajustar o comportamento em conformidade."

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:727
#, fuzzy, no-wrap
msgid "Ability to handle 'final' classes and methods"
msgstr "Capacidade de lidar com classes e métodos \"finais"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:732
#, fuzzy
msgid "In normal CDI, classes that are marked as `final` and / or have `final` methods are not eligible for proxy creation, which in turn means that interceptors and normal scoped beans don't work properly.  This situation is very common when trying to use CDI with alternative JVM languages like Kotlin where classes and methods are `final` by default."
msgstr "No CDI normal, as classes que estão marcadas como `final` e/ou têm métodos `final` não são elegíveis para a criação de proxy, o que, por sua vez, significa que os interceptores e os beans com escopo normal não funcionam corretamente. Essa situação é muito comum quando se tenta usar o CDI com linguagens JVM alternativas, como Kotlin, em que as classes e os métodos são `final` por padrão."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:734
#, fuzzy
msgid "Quarkus however, can overcome these limitations when `quarkus.arc.transform-unproxyable-classes` is set to `true` (which is the default value)."
msgstr "No entanto, o Quarkus pode ultrapassar estas limitações quando `quarkus.arc.transform-unproxyable-classes` está definido para `true` (que é o valor predefinido)."

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:735
#, fuzzy, no-wrap
msgid "Container-managed Concurrency"
msgstr "Concurrência gerida por contentores"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:743
#, fuzzy
msgid "There is no standard concurrency control mechanism for CDI beans.  Nevertheless, a bean instance can be shared and accessed concurrently from multiple threads.  In that case it should be thread-safe.  You can use standard Java constructs (`volatile`, `synchronized`, `ReadWriteLock`, etc.) or let the container control the concurrent access.  Quarkus provides `@io.quarkus.arc.Lock` and a built-in interceptor for this interceptor binding.  Each interceptor instance associated with a contextual instance of an intercepted bean holds a separate `ReadWriteLock` with non-fair ordering policy."
msgstr "Não existe um mecanismo de controlo de concorrência padrão para beans CDI. No entanto, uma instância de bean pode ser partilhada e acedida simultaneamente a partir de várias threads. Nesse caso, deve ser thread-safe. Pode utilizar construções Java padrão ( `volatile`, `synchronized`, `ReadWriteLock`, etc.) ou deixar o contentor controlar o acesso simultâneo. O Quarkus fornece `@io.quarkus.arc.Lock` e um intercetor incorporado para esta ligação de intercetor. Cada instância de intercetor associada a uma instância contextual de um bean intercetado contém um `ReadWriteLock` separado com uma política de ordenação não justa."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:745
#, fuzzy
msgid "`io.quarkus.arc.Lock` is a regular interceptor binding and as such can be used for any bean with any scope. However, it is especially useful for \"shared\" scopes, e.g. `@Singleton` and `@ApplicationScoped`."
msgstr "`io.quarkus.arc.Lock` é uma ligação intercetora normal e, como tal, pode ser utilizada para qualquer bean com qualquer âmbito. No entanto, é especialmente útil para âmbitos \"partilhados\", por exemplo, `@Singleton` e `@ApplicationScoped`."

#. type: Block title
#: upstream/_guides/cdi-reference.adoc:746
#, fuzzy, no-wrap
msgid "Container-managed Concurrency Example"
msgstr "Exemplo de simultaneidade gerida por contentor"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:750
#, no-wrap
msgid "import io.quarkus.arc.Lock;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:754
#, no-wrap
msgid ""
"@Lock <1>\n"
"@ApplicationScoped\n"
"class SharedService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:758
#, no-wrap
msgid ""
"  void addAmount(BigDecimal amount) {\n"
"    // ...changes some internal state of the bean\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:764
#, no-wrap
msgid ""
"  @Lock(value = Lock.Type.READ, time = 1, unit = TimeUnit.SECONDS) <2> <3>\n"
"  BigDecimal getAmount() {\n"
"    // ...it is safe to read the value concurrently\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:766
#, fuzzy
msgid "`@Lock` (which maps to `@Lock(Lock.Type.WRITE)`) declared on the class instructs the container to lock the bean instance for any invocation of any business method, i.e. the client has \"exclusive access\" and no concurrent invocations will be allowed."
msgstr "`@Lock` (que mapeia para `@Lock(Lock.Type.WRITE)`) declarado na classe dá instruções ao contentor para bloquear a instância do bean para qualquer invocação de qualquer método comercial, ou seja, o cliente tem \"acesso exclusivo\" e não serão permitidas invocações simultâneas."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:767
#, fuzzy
msgid "`@Lock(Lock.Type.READ)` overrides the value specified at class level. It means that any number of clients can invoke the method concurrently, unless the bean instance is locked by `@Lock(Lock.Type.WRITE)`."
msgstr "`@Lock(Lock.Type.READ)` substitui o valor especificado a nível da classe. Isto significa que qualquer número de clientes pode invocar o método em simultâneo, a menos que a instância do bean esteja bloqueada por `@Lock(Lock.Type.WRITE)`."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:768
#, fuzzy
msgid "You can also specify the \"wait time\". If it's not possible to acquire the lock in the given time a `LockException` is thrown."
msgstr "Também é possível especificar o \"tempo de espera\". Se não for possível adquirir o bloqueio no tempo indicado, é lançado um `LockException`."

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:769
#, fuzzy, no-wrap
msgid "Repeatable interceptor bindings"
msgstr "Ligações de interceptores repetíveis"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:772
#, fuzzy
msgid "Quarkus has limited support for `@Repeatable` interceptor binding annotations."
msgstr "O Quarkus tem um suporte limitado para as anotações de ligação do intercetor `@Repeatable`."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:776
#, fuzzy
msgid "When binding an interceptor to a component, you can declare multiple `@Repeatable` annotations on methods.  Repeatable interceptor bindings declared on classes and stereotypes are not supported, because there are some open questions around interactions with the Interceptors specification.  This might be added in the future."
msgstr "Ao vincular um intercetor a um componente, é possível declarar várias anotações `@Repeatable` em métodos. As ligações repetidas de interceptores declaradas em classes e estereótipos não são suportadas, porque existem algumas questões em aberto em torno das interacções com a especificação de Interceptores. Isto poderá ser adicionado no futuro."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:780
#, fuzzy
msgid "As an example, suppose we have an interceptor that clears a cache.  The corresponding interceptor binding would be called `@CacheInvalidateAll` and would be declared as `@Repeatable`.  If we wanted to clear two caches at the same time, we would add `@CacheInvalidateAll` twice:"
msgstr "Como exemplo, suponhamos que temos um intercetor que limpa uma cache. A ligação do intercetor correspondente chamar-se-ia `@CacheInvalidateAll` e seria declarada como `@Repeatable`. Se quiséssemos limpar duas caches ao mesmo tempo, adicionaríamos `@CacheInvalidateAll` duas vezes:"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:794
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class CachingService {\n"
"  @CacheInvalidateAll(cacheName = \"foo\")\n"
"  @CacheInvalidateAll(cacheName = \"bar\")\n"
"  void heavyComputation() {\n"
"    // ...\n"
"    // some computation that updates a lot of data\n"
"    // and requires 2 caches to be invalidated\n"
"    // ...\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:798
#, fuzzy
msgid "This is how interceptors are used.  What about creating an interceptor?"
msgstr "É assim que os interceptores são utilizados. E quanto à criação de um intercetor?"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:801
#, fuzzy
msgid "When declaring interceptor bindings of an interceptor, you can add multiple `@Repeatable` annotations to the interceptor class as usual.  This is useless when the annotation members are `@Nonbinding`, as would be the case for the `@Cached` annotation, but is important otherwise."
msgstr "Ao declarar as ligações de intercetor de um intercetor, pode adicionar várias anotações `@Repeatable` à classe do intercetor como habitualmente. Isto é inútil quando os membros da anotação são `@Nonbinding`, como seria o caso da anotação `@Cached`, mas é importante caso contrário."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:805
#, fuzzy
msgid "For example, suppose we have an interceptor that can automatically log method invocations to certain targets.  The interceptor binding annotation `@Logged` would have a member called `target`, which specifies where to store the log.  Our implementation could be restricted to console logging and file logging:"
msgstr "Por exemplo, suponha que temos um intercetor que pode registar automaticamente invocações de métodos para determinados alvos. A anotação de ligação do intercetor `@Logged` teria um membro chamado `target`, que especifica onde armazenar o registo. A nossa implementação poderia restringir-se ao registo de consola e ao registo de ficheiros:"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:814
#, no-wrap
msgid ""
"@Interceptor\n"
"@Logged(target = \"console\")\n"
"@Logged(target = \"file\")\n"
"class NaiveLoggingInterceptor {\n"
"  // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:817
#, fuzzy
msgid "Other interceptors could be provided to log method invocations to different targets."
msgstr "Podem ser fornecidos outros interceptores para registar as invocações de métodos a diferentes alvos."

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:818
#, fuzzy, no-wrap
msgid "Caching the Result of Programmatic Lookup"
msgstr "Armazenamento em cache do resultado da pesquisa programática"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:828
#, fuzzy
msgid "In certain situations, it is practical to obtain a bean instance programmatically via an injected `jakarta.enterprise.inject.Instance` and `Instance.get()`.  However, according to the specification the `get()` method must identify the matching bean and obtain a contextual reference.  As a consequence, a new instance of a `@Dependent` bean is returned from each invocation of `get()`.  Moreover, this instance is a dependent object of the injected `Instance`.  This behavior is well-defined, but it may lead to unexpected errors and memory leaks.  Therefore, Quarkus comes with the `io.quarkus.arc.WithCaching` annotation.  An injected `Instance` annotated with this annotation will cache the result of the `Instance#get()` operation.  The result is computed on the first call and the same value is returned for all subsequent calls, even for `@Dependent` beans."
msgstr "Em certas situações, é prático obter uma instância de bean programaticamente através de um `jakarta.enterprise.inject.Instance` e `Instance.get()` injectados. Contudo, de acordo com a especificação, o método `get()` tem de identificar o bean correspondente e obter uma referência contextual. Consequentemente, cada invocação de `get()` devolve uma nova instância de um bean `@Dependent`. Além disso, esta instância é um objeto dependente do `Instance` injetado. Este comportamento é bem definido, mas pode levar a erros inesperados e fugas de memória. Por isso, o Quarkus vem com a anotação `io.quarkus.arc.WithCaching`. Um `Instance` injetado anotado com esta anotação colocará em cache o resultado da operação `Instance#get()`. O resultado é calculado na primeira chamada e o mesmo valor é devolvido em todas as chamadas subsequentes, mesmo para os feijões `@Dependent`."

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:832
#, no-wrap
msgid "class Producer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:835
#, no-wrap
msgid ""
"  AtomicLong nextLong = new AtomicLong();\n"
"  AtomicInteger nextInt = new AtomicInteger();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:841
#, no-wrap
msgid ""
"   @Dependent\n"
"   @Produces\n"
"   Integer produceInt() {\n"
"     return nextInt.incrementAndGet();\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:848
#, no-wrap
msgid ""
"   @Dependent\n"
"   @Produces\n"
"   Long produceLong() {\n"
"     return nextLong.incrementAndGet();\n"
"   }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:850
#, no-wrap
msgid "class Consumer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:853
#, no-wrap
msgid ""
"  @Inject\n"
"  Instance<Long> longInstance;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:857
#, no-wrap
msgid ""
"  @Inject\n"
"  @WithCaching\n"
"  Instance<Integer> intInstance;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:863
#, no-wrap
msgid ""
"  // this method should always return true\n"
"  // Producer#produceInt() is only called once\n"
"  boolean pingInt() {\n"
"    return intInstance.get().equals(intInstance.get());\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:870
#, no-wrap
msgid ""
"  // this method should always return false\n"
"  // Producer#produceLong() is called twice per each pingLong() invocation\n"
"  boolean pingLong() {\n"
"    return longInstance.get().equals(longInstance.get());\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:873
#, fuzzy
msgid "It is also possible to clear the cached value via `io.quarkus.arc.InjectableInstance.clearCache()`. In this case, you'll need to inject the Quarkus-specific `io.quarkus.arc.InjectableInstance` instead of `jakarta.enterprise.inject.Instance`."
msgstr "Também é possível limpar o valor armazenado em cache através de `io.quarkus.arc.InjectableInstance.clearCache()`. Neste caso, terá de injetar o `io.quarkus.arc.InjectableInstance` específico do Quarkus em vez de `jakarta.enterprise.inject.Instance`."

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:874
#, fuzzy, no-wrap
msgid "Declaratively Choose Beans That Can Be Obtained by Programmatic Lookup"
msgstr "Escolha declarativamente os beans que podem ser obtidos por pesquisa programática"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:878
#, fuzzy
msgid "It is sometimes useful to narrow down the set of beans that can be obtained by programmatic lookup via `jakarta.enterprise.inject.Instance`.  Typically, a user needs to choose the appropriate implementation of an interface based on a runtime configuration property."
msgstr "Por vezes, é útil limitar o conjunto de beans que podem ser obtidos por pesquisa programática através de `jakarta.enterprise.inject.Instance`. Normalmente, um utilizador precisa de escolher a implementação apropriada de uma interface com base numa propriedade de configuração em tempo de execução."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:885
#, fuzzy
msgid "Imagine that we have two beans implementing the interface `org.acme.Service`.  You can't inject the `org.acme.Service` directly unless your implementations declare a CDI qualifier.  However, you can inject the `Instance<Service>` instead, then iterate over all implementations and choose the correct one manually.  Alternatively, you can use the `@LookupIfProperty` and `@LookupUnlessProperty` annotations.  `@LookupIfProperty` indicates that a bean should only be obtained if a runtime configuration property matches the provided value.  `@LookupUnlessProperty`, on the other hand, indicates that a bean should only be obtained if a runtime configuration property does not match the provided value."
msgstr "Imagine que temos dois beans implementando a interface `org.acme.Service`. Não pode injetar o `org.acme.Service` diretamente, a menos que as suas implementações declarem um qualificador CDI. No entanto, pode injetar a `Instance&amp;lt;Service&amp;gt;` e, em seguida, iterar sobre todas as implementações e escolher a correcta manualmente. Como alternativa, você pode usar as anotações `@LookupIfProperty` e `@LookupUnlessProperty`. `@LookupIfProperty` indica que um bean só deve ser obtido se uma propriedade de configuração de tempo de execução corresponder ao valor fornecido. `@LookupUnlessProperty` A anotação , por outro lado, indica que um bean só deve ser obtido se uma propriedade de configuração de tempo de execução não corresponder ao valor fornecido."

#. type: Block title
#: upstream/_guides/cdi-reference.adoc:886
#, fuzzy, no-wrap
msgid "`@LookupIfProperty` Example"
msgstr "`@LookupIfProperty` Exemplo"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:892
#, no-wrap
msgid ""
" interface Service {\n"
"    String name();\n"
" }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:896
#, no-wrap
msgid ""
" @LookupIfProperty(name = \"service.foo.enabled\", stringValue = \"true\")\n"
" @ApplicationScoped\n"
" class ServiceFoo implements Service {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:901
#, no-wrap
msgid ""
"    public String name() {\n"
"       return \"foo\";\n"
"    }\n"
" }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:904
#, no-wrap
msgid ""
" @ApplicationScoped\n"
" class ServiceBar implements Service {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:909
#, no-wrap
msgid ""
"    public String name() {\n"
"       return \"bar\";\n"
"    }\n"
" }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:912
#, no-wrap
msgid ""
" @ApplicationScoped\n"
" class Client {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:915
#, no-wrap
msgid ""
"    @Inject\n"
"    Instance<Service> service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:922
#, no-wrap
msgid ""
"    void printServiceName() {\n"
"       // This will print \"bar\" if the property \"service.foo.enabled\" is NOT set to \"true\"\n"
"       // If \"service.foo.enabled\" is set to \"true\" then service.get() would result in an AmbiguousResolutionException\n"
"       System.out.println(service.get().name());\n"
"    }\n"
" }\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:924
#, fuzzy, no-wrap
msgid "Injecting Multiple Bean Instances Intuitively"
msgstr "Injectando várias instâncias de Bean intuitivamente"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:930
#, fuzzy
msgid "In CDI, it's possible to inject multiple bean instances (aka contextual references) via the `jakarta.enterprise.inject.Instance` which implements `java.lang.Iterable`.  However, it's not exactly intuitive.  Therefore, a new way was introduced in Quarkus - you can inject a `java.util.List` annotated with the `io.quarkus.arc.All` qualifier.  The type of elements in the list is used as the required type when performing the lookup."
msgstr "No CDI, é possível injetar várias instâncias de bean (também conhecidas como referências contextuais) através do `jakarta.enterprise.inject.Instance` que implementa `java.lang.Iterable`. No entanto, não é exatamente intuitivo. Por isso, foi introduzida uma nova forma no Quarkus - pode injetar um `java.util.List` anotado com o qualificador `io.quarkus.arc.All`. O tipo de elementos na lista é utilizado como o tipo necessário ao efetuar a pesquisa."

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:935
#: upstream/_guides/cdi-reference.adoc:955
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class Processor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:940
#, no-wrap
msgid ""
"     @Inject\n"
"     @All\n"
"     List<Service> services; <1> <2>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:942
#, fuzzy
msgid "The injected instance is an _immutable list_ of the contextual references of the _disambiguated_ beans."
msgstr "A instância injectada é uma _lista imutável_ das referências contextuais dos feijões _desambiguados_."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:943
#, fuzzy
msgid "For this injection point the required type is `Service` and no additional qualifiers are declared."
msgstr "Para este ponto de injeção, o tipo requerido é `Service` e não são declarados quaisquer qualificadores adicionais."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:945
#, fuzzy
msgid "The list is sorted by priority as defined by `io.quarkus.arc.InjectableBean#getPriority()`. Higher priority goes first. In general, the `@jakarta.annotation.Priority` annotation can be used to assign the priority to a class bean, producer method or producer field."
msgstr "A lista é ordenada por prioridade, tal como definido em `io.quarkus.arc.InjectableBean#getPriority()`. A prioridade mais elevada é a primeira. Em geral, a anotação `@jakarta.annotation.Priority` pode ser utilizada para atribuir a prioridade a um bean de classe, a um método produtor ou a um campo produtor."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:947
#, fuzzy
msgid "If an injection point declares no other qualifier than `@All` then `@Any` is used, i.e. the behavior is equivalent to `@Inject @Any Instance<Service>`."
msgstr "Se um ponto de injeção não declarar outro qualificador para além de `@All`, então `@Any` é utilizado, ou seja, o comportamento é equivalente a `@Inject @Any Instance&amp;lt;Service&amp;gt;`."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:950
#, fuzzy
msgid "You can also inject a list of bean instances wrapped in `io.quarkus.arc.InstanceHandle`.  This can be useful if you need to inspect the related bean metadata."
msgstr "Também pode injetar uma lista de instâncias de bean envolvidas em `io.quarkus.arc.InstanceHandle`. Isto pode ser útil se precisar de inspecionar os metadados do bean relacionados."

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:959
#, no-wrap
msgid ""
"     @Inject\n"
"     @All\n"
"     List<InstanceHandle<Service>> services;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:969
#, no-wrap
msgid ""
"     public void doSomething() {\n"
"       for (InstanceHandle<Service> handle : services) {\n"
"         if (handle.getBean().getScope().equals(Dependent.class)) {\n"
"           handle.get().process();\n"
"           break;\n"
"         }\n"
"       }\n"
"     }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:972
#, fuzzy
msgid "Neither a type variable nor a wildcard is a legal type parameter for an `@All List<>` injection point, i.e. `@Inject @All List<?> all` is not supported and results in a deployment error."
msgstr "Nem uma variável de tipo nem um wildcard são parâmetros de tipo legais para um ponto de injeção `@All List&amp;lt;&amp;gt;`, ou seja, `@Inject @All List&amp;lt;?&amp;gt; all` não é suportado e resulta num erro de implementação."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:974
#, fuzzy
msgid "It is also possible to obtain the list of all bean instance handles programmatically via the `Arc.container().listAll()` methods."
msgstr "Também é possível obter a lista de todos os identificadores de instâncias de feijões de forma programática através dos métodos `Arc.container().listAll()`."

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:975
#, fuzzy, no-wrap
msgid "Ignoring Class-Level Interceptor Bindings for Methods and Constructors"
msgstr "Ignorando ligações de interceptores de nível de classe para métodos e construtores"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:979
#, fuzzy
msgid "If a managed bean declares interceptor binding annotations on the class level, the corresponding `@AroundInvoke` interceptors will apply to all business methods.  Similarly, the corresponding `@AroundConstruct` interceptors will apply to the bean constructor."
msgstr "Se um bean gerido declarar anotações de ligação de intercetor ao nível da classe, os interceptores `@AroundInvoke` correspondentes aplicar-se-ão a todos os métodos empresariais. Da mesma forma, os interceptores `@AroundConstruct` correspondentes aplicar-se-ão ao construtor do bean."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:981
#, fuzzy
msgid "For example, suppose we have a logging interceptor with the `@Logged` binding annotation and a tracing interceptor with the `@Traced` binding annotation:"
msgstr "Por exemplo, suponhamos que temos um intercetor de registo com a anotação de ligação `@Logged` e um intercetor de rastreio com a anotação de ligação `@Traced`:"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:990
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"@Logged\n"
"public class MyService {\n"
"    public void doSomething() {\n"
"        ...\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:996
#, no-wrap
msgid ""
"    @Traced\n"
"    public void doSomethingElse() {\n"
"        ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1000
#, fuzzy
msgid "In this example, both `doSomething` and `doSomethingElse` will be intercepted by the hypothetical logging interceptor.  Additionally, the `doSomethingElse` method will be intercepted by the hypothetical tracing interceptor."
msgstr "Neste exemplo, tanto `doSomething` como `doSomethingElse` serão interceptados pelo intercetor de registo hipotético. Além disso, o método `doSomethingElse` será intercetado pelo intercetor de rastreio hipotético."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1003
#, fuzzy
msgid "Now, if that `@Traced` interceptor also performed all the necessary logging, we'd like to skip the `@Logged` interceptor for this method, but keep it for all other methods.  To achieve that, you can annotate the method with `@NoClassInterceptors`:"
msgstr "Agora, se o intercetor `@Traced` também executou todo o registo necessário, gostaríamos de ignorar o intercetor `@Logged` para este método, mas mantê-lo para todos os outros métodos. Para conseguir isso, você pode anotar o método com `@NoClassInterceptors`:"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:1011
#, no-wrap
msgid ""
"@Traced\n"
"@NoClassInterceptors\n"
"public void doSomethingElse() {\n"
"    ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1015
#, fuzzy
msgid "The `@NoClassInterceptors` annotation may be put on methods and constructors and means that all class-level interceptors are ignored for these methods and constructors.  In other words, if a method/constructor is annotated `@NoClassInterceptors`, then the only interceptors that will apply to this method/constructor are interceptors declared directly on the method/constructor."
msgstr "A anotação `@NoClassInterceptors` pode ser colocada em métodos e construtores e significa que todos os interceptores ao nível da classe são ignorados para estes métodos e construtores. Por outras palavras, se um método/construtor for anotado `@NoClassInterceptors`, então os únicos interceptores que se aplicarão a este método/construtor são os interceptores declarados diretamente no método/construtor."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1017
#, fuzzy
msgid "This annotation affects only business method interceptors (`@AroundInvoke`) and constructor lifecycle callback interceptors (`@AroundConstruct`)."
msgstr "Esta anotação afecta apenas os interceptores de métodos empresariais ( `@AroundInvoke`) e os interceptores de retorno de chamada do ciclo de vida do construtor ( `@AroundConstruct`)."

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:1018
#, fuzzy, no-wrap
msgid "Exceptions Thrown By An Asynchronous Observer Method"
msgstr "Excepções lançadas por um método de observador assíncrono"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1025
#, fuzzy
msgid "If an exception is thrown by an asynchronous observer then the `CompletionStage` returned by the `fireAsync()` method completes exceptionally so that the event producer may react appropriately.  However, if the event producer does not care then the exception is ignored silently.  Therefore, Quarkus logs an error message by default.  It is also possible to implement a custom `AsyncObserverExceptionHandler`.  A bean that implements this interface should be `@jakarta.inject.Singleton` or `@jakarta.enterprise.context.ApplicationScoped`."
msgstr "Se uma exceção for lançada por um observador assíncrono, o `CompletionStage` devolvido pelo método `fireAsync()` é concluído excecionalmente para que o produtor de eventos possa reagir de forma adequada. No entanto, se o produtor de eventos não se importar, a exceção é ignorada silenciosamente. Por conseguinte, o Quarkus regista uma mensagem de erro por defeito. Também é possível implementar um `AsyncObserverExceptionHandler` personalizado. Um bean que implemente esta interface deve ser `@jakarta.inject.Singleton` ou `@jakarta.enterprise.context.ApplicationScoped`."

#. type: Block title
#: upstream/_guides/cdi-reference.adoc:1026
#, fuzzy, no-wrap
msgid "`NoopAsyncObserverExceptionHandler`"
msgstr "`NoopAsyncObserverExceptionHandler`"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:1031
#, no-wrap
msgid ""
"@Singleton\n"
"public class NoopAsyncObserverExceptionHandler implements AsyncObserverExceptionHandler {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:1035
#, no-wrap
msgid ""
"  void handle(Throwable throwable, ObserverMethod<?> observerMethod, EventContext<?> eventContext) {\n"
"    // do nothing\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:1037
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/cdi-reference.adoc:1040
#, fuzzy, no-wrap
msgid "Build Time Extensions"
msgstr "Extensões do tempo de construção"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1046
#, fuzzy
msgid "Quarkus incorporates build-time optimizations in order to provide instant startup and low memory footprint.  The downside of this approach is that CDI Portable Extensions cannot be supported.  Nevertheless, most of the functionality can be achieved using Quarkus xref:writing-extensions.adoc[extensions].  See the xref:cdi-integration.adoc[integration guide] for more information."
msgstr "O Quarkus incorpora optimizações de tempo de construção de modo a proporcionar um arranque instantâneo e um baixo consumo de memória. A desvantagem desta abordagem é que as extensões portáteis CDI não podem ser suportadas. No entanto, a maior parte da funcionalidade pode ser obtida utilizando  link:writing-extensions.html[as extensões] do Quarkus. Para mais informações, consulte o  link:cdi-integration.html[guia de integração]."

#. type: Title ==
#: upstream/_guides/cdi-reference.adoc:1047
#, fuzzy, no-wrap
msgid "Development Mode"
msgstr "Modo de desenvolvimento"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1050
#, fuzzy
msgid "In the development mode, two special endpoints are registered automatically to provide some basic debug info in the JSON format:"
msgstr "No modo de desenvolvimento, dois pontos finais especiais são registados automaticamente para fornecer algumas informações básicas de depuração no formato JSON:"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1052
#, fuzzy
msgid "HTTP GET `/q/arc` - returns the summary; number of beans, config properties, etc."
msgstr "HTTP GET `/q/arc` - devolve o resumo; número de beans, propriedades de configuração, etc."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1053
#, fuzzy
msgid "HTTP GET `/q/arc/beans` - returns the list of all beans"
msgstr "HTTP GET `/q/arc/beans` - devolve a lista de todos os feijões"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1054
#, fuzzy
msgid "You can use query params to filter the output:"
msgstr "Pode utilizar parâmetros de consulta para filtrar a saída:"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1055
#, fuzzy
msgid "`scope` - include beans with scope that ends with the given value, i.e. `http://localhost:8080/q/arc/beans?scope=ApplicationScoped`"
msgstr "`scope` - incluem feijões com âmbito que termina com o valor dado, ou seja `&lt;a href=\"http://localhost:8080/q/arc/beans?scope=ApplicationScoped\" class=\"bare\"&gt;http://localhost:8080/q/arc/beans?scope=ApplicationScoped&lt;/a&gt;`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1056
#, fuzzy
msgid "`beanClass` - include beans with bean class that starts with the given value, i.e. `http://localhost:8080/q/arc/beans?beanClass=org.acme.Foo`"
msgstr "`beanClass` - inclui feijões com classe de feijão que começa com o valor dado, ou seja `&lt;a href=\"http://localhost:8080/q/arc/beans?beanClass=org.acme.Foo\" class=\"bare\"&gt;http://localhost:8080/q/arc/beans?beanClass=org.acme.Foo&lt;/a&gt;`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1057
#, fuzzy
msgid "`kind` - include beans of the specified kind (`CLASS`, `PRODUCER_FIELD`, `PRODUCER_METHOD`, `INTERCEPTOR` or `SYNTHETIC`), i.e. `http://localhost:8080/q/arc/beans?kind=PRODUCER_METHOD`"
msgstr "`kind` - incluir feijões do tipo especificado ( `CLASS`, `PRODUCER_FIELD`, `PRODUCER_METHOD`, `INTERCEPTOR` ou `SYNTHETIC`), ou seja `&lt;a href=\"http://localhost:8080/q/arc/beans?kind=PRODUCER_METHOD\" class=\"bare\"&gt;http://localhost:8080/q/arc/beans?kind=PRODUCER_METHOD&lt;/a&gt;`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1058
#, fuzzy
msgid "HTTP GET `/q/arc/removed-beans` - returns the list of unused beans removed during build"
msgstr "HTTP GET `/q/arc/removed-beans` - devolve a lista de feijões não utilizados removidos durante a construção"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1059
#, fuzzy
msgid "HTTP GET `/q/arc/observers` - returns the list of all observer methods"
msgstr "HTTP GET `/q/arc/observers` - devolve a lista de todos os métodos do observador"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1061
#, fuzzy
msgid "These endpoints are only available in the development mode, i.e. when you run your application via `mvn quarkus:dev` (or `./gradlew quarkusDev`)."
msgstr "Estes pontos finais só estão disponíveis no modo de desenvolvimento, ou seja, quando executa a sua aplicação através de `mvn quarkus:dev` (ou `./gradlew quarkusDev`)."

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:1062
#, fuzzy, no-wrap
msgid "Monitoring Business Method Invocations and Events"
msgstr "Monitorização de invocações e eventos de métodos empresariais"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1066
#, fuzzy
msgid "In the development mode, it is also possible to enable monitoring of business method invocations and fired events.  Simply set the `quarkus.arc.dev-mode.monitoring-enabled` configuration property to `true` and explore the relevant Dev UI pages."
msgstr "No modo de desenvolvimento, também é possível ativar a monitorização de invocações de métodos empresariais e eventos disparados. Basta definir a propriedade de configuração `quarkus.arc.dev-mode.monitoring-enabled` para `true` e explorar as páginas relevantes da IU de desenvolvimento."

#. type: Title ==
#: upstream/_guides/cdi-reference.adoc:1068
#, fuzzy, no-wrap
msgid "Strict Mode"
msgstr "Modo estrito"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1072
#, fuzzy
msgid "By default, ArC does not perform all validations required by the CDI specification.  It also improves CDI usability in many ways, some of them being directly against the specification."
msgstr "Por defeito, o ArC não efectua todas as validações exigidas pela especificação CDI. Também melhora a usabilidade do CDI de muitas formas, algumas das quais diretamente contra a especificação."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1075
#, fuzzy
msgid "To pass the CDI Lite TCK, ArC also has a _strict_ mode.  This mode enables additional validations and disables certain improvements that conflict with the specification."
msgstr "Para passar o TCK do CDI Lite, o ArC também tem um modo _estrito_. Este modo permite validações adicionais e desactiva certas melhorias que entram em conflito com a especificação."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1077
#, fuzzy
msgid "To enable the strict mode, use the following configuration:"
msgstr "Para ativar o modo estrito, utilize a seguinte configuração:"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:1081
#, no-wrap
msgid "quarkus.arc.strict-compatibility=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1084
#, fuzzy
msgid "Some other features affect specification compatibility as well:"
msgstr "Algumas outras características também afectam a compatibilidade das especificações:"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1086
#, fuzzy
msgid "xref:unproxyable_classes_transformation[Transformation of unproxyable classes]"
msgstr "link:#unproxyable_classes_transformation[Transformação de classes não substituíveis]"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1087
#, fuzzy
msgid "xref:remove_unused_beans[Unused beans removal]"
msgstr "link:#remove_unused_beans[Remoção de feijões não utilizados]"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1089
#, fuzzy
msgid "To get a behavior closer to the specification, these features should be disabled."
msgstr "Para obter um comportamento mais próximo da especificação, estas características devem ser desactivadas."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1092
#, fuzzy
msgid "Applications are recommended to use the default, non-strict mode, which makes CDI more convenient to use.  The \"strictness\" of the strict mode (the set of additional validations and the set of disabled improvements on top of the CDI specification) may change over time."
msgstr "Recomenda-se às aplicações que utilizem o modo não estrito por defeito, o que torna a utilização do CDI mais conveniente. O \"rigor\" do modo estrito (o conjunto de validações adicionais e o conjunto de melhorias desactivadas para além da especificação CDI) pode mudar ao longo do tempo."

#. type: Title ==
#: upstream/_guides/cdi-reference.adoc:1094
#, fuzzy, no-wrap
msgid "ArC Configuration Reference"
msgstr "Referência de configuração ArC"
