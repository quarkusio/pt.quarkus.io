# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:24+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/smallrye-graphql-client.adoc:6
#, fuzzy, no-wrap
msgid "SmallRye GraphQL Client"
msgstr "Cliente SmallRye GraphQL"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:16
#, fuzzy
msgid "This guide demonstrates how your Quarkus application can use the GraphQL client library.  The client is implemented by the https://github.com/smallrye/smallrye-graphql/[SmallRye GraphQL] project.  This guide is specifically geared towards the client side, so if you need an introduction to GraphQL in general, first refer to the xref:smallrye-graphql.adoc[SmallRye GraphQL guide], which provides an introduction to the GraphQL query language, general concepts and server-side development."
msgstr "Este guia demonstra como a sua aplicação Quarkus pode utilizar a biblioteca do cliente GraphQL. O cliente é implementado pelo projeto  link:https://github.com/smallrye/smallrye-graphql/[SmallRye GraphQL]. Este guia é especificamente voltado para o lado do cliente, portanto, se você precisar de uma introdução ao GraphQL em geral, consulte primeiro o  link:smallrye-graphql.html[guia SmallRye GraphQL], que fornece uma introdução à linguagem de consulta GraphQL, conceitos gerais e desenvolvimento do lado do servidor."

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:21
#, fuzzy
msgid "The guide will walk you through developing and running a simple application that uses both supported types of GraphQL clients to retrieve data from a remote resource, that being a database related to Star Wars.  It's available at https://graphql.org/swapi-graphql[this webpage] if you want to experiment with it manually.  The web UI allows you to write and execute GraphQL queries against it."
msgstr "O guia irá guiá-lo através do desenvolvimento e execução de uma aplicação simples que utiliza ambos os tipos suportados de clientes GraphQL para recuperar dados de um recurso remoto, que é uma base de dados relacionada com a Guerra das Estrelas. Ele está disponível  link:https://graphql.org/swapi-graphql[nesta página da Web] se você quiser experimentá-lo manualmente. A interface do usuário da Web permite escrever e executar consultas GraphQL contra ela."

#. type: Title ==
#: upstream/_guides/smallrye-graphql-client.adoc:22
#, fuzzy, no-wrap
msgid "Prerequisites"
msgstr "Pré-requisitos"

#. type: Title ==
#: upstream/_guides/smallrye-graphql-client.adoc:26
#, fuzzy, no-wrap
msgid "GraphQL client types introduction"
msgstr "Introdução aos tipos de clientes GraphQL"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:29
#, fuzzy
msgid "Two types of GraphQL clients are supported."
msgstr "São suportados dois tipos de clientes GraphQL."

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:35
#, fuzzy
msgid "The *typesafe* client works very much like the MicroProfile REST Client adjusted for calling GraphQL endpoints.  A client instance is basically a proxy that you can call like a regular Java object, but under the hood, the call will be translated to a GraphQL operation. It works with domain classes directly.  Any input and output objects for the operation will be translated to/from their representations in the GraphQL query language."
msgstr "O cliente *typesafe* funciona de forma muito parecida com o Cliente REST MicroProfile ajustado para chamar endpoints GraphQL. Uma instância de cliente é basicamente um proxy que você pode chamar como um objeto Java normal, mas sob o capô, a chamada será traduzida para uma operação GraphQL. Ele funciona diretamente com classes de domínio. Quaisquer objetos de entrada e saída para a operação serão traduzidos para/de suas representações na linguagem de consulta GraphQL."

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:41
#, fuzzy
msgid "The *dynamic* client, on the other hand, works rather like an equivalent of the Jakarta REST client from the `jakarta.ws.rs.client` package. It does not require the domain classes to work, it works with abstract representations of GraphQL documents instead. Documents are built using a domain-specific language (DSL).  The exchanged objects are treated as an abstract `JsonObject`, but, when necessary, it is possible to convert them to concrete model objects (if suitable model classes are available)."
msgstr "O cliente *dinâmico*, por outro lado, funciona como um equivalente do cliente Jakarta REST do pacote `jakarta.ws.rs.client`. Ele não precisa das classes de domínio para funcionar, mas sim de representações abstratas de documentos GraphQL. Os documentos são construídos usando uma linguagem específica de domínio (DSL). Os objectos trocados são tratados como uma abstração `JsonObject`, mas, quando necessário, é possível convertê-los em objectos-modelo concretos (se estiverem disponíveis classes-modelo adequadas)."

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:45
#, fuzzy
msgid "The typesafe client can be viewed as a rather high-level and more declarative approach designed for ease of use, whereas the dynamic client is lower-level, more imperative, somewhat more verbose to use, but allows finer grained control over operations and responses."
msgstr "O cliente typesafe pode ser visto como uma abordagem de alto nível e mais declarativa, concebida para ser fácil de utilizar, enquanto o cliente dinâmico é de nível inferior, mais imperativo, um pouco mais verboso de utilizar, mas permite um controlo mais preciso das operações e das respostas."

#. type: Title ==
#: upstream/_guides/smallrye-graphql-client.adoc:46
#, fuzzy, no-wrap
msgid "Solution"
msgstr "Solução"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:50
#, fuzzy
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "Recomendamos que siga as instruções nas secções seguintes e crie a aplicação passo a passo. No entanto, pode ir diretamente para o exemplo completo."

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:52
#, fuzzy
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Clonar o repositório Git: `git clone {quickstarts-clone-url}`, ou descarregar um {quickstarts-archive-url}[arquivo]."

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:54
#, fuzzy
msgid "The solution is located in the `microprofile-graphql-client-quickstart` link:{quickstarts-tree-url}/microprofile-graphql-client-quickstart[directory]."
msgstr "A solução está localizada no  link:{quickstarts-tree-url}/microprofile-graphql-client-quickstart[diretório] `microprofile-graphql-client-quickstart`."

#. type: Title ==
#: upstream/_guides/smallrye-graphql-client.adoc:55
#, fuzzy, no-wrap
msgid "Creating the Maven Project"
msgstr "Criar o projeto Maven"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:58
#, fuzzy
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "Primeiro, precisamos de um novo projeto. Crie um novo projeto com o seguinte comando:"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:66
#, fuzzy
msgid "This command generates a project, importing the `smallrye-graphql-client` extension, and also the `resteasy-reactive` extension, because we will use that too - a REST endpoint will be the entrypoint to allow you to manually trigger the GraphQL client to do its work."
msgstr "Esse comando gera um projeto, importando a extensão `smallrye-graphql-client` e também a extensão `resteasy-reactive`, porque também a usaremos - um ponto de extremidade REST será o ponto de entrada para permitir que você acione manualmente o cliente GraphQL para fazer seu trabalho."

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:69
#, fuzzy
msgid "If you already have your Quarkus project configured, you can add the `smallrye-graphql-client` extension to your project by running the following command in your project base directory:"
msgstr "Se já tiver o seu projeto Quarkus configurado, pode adicionar a extensão `smallrye-graphql-client` ao seu projeto executando o seguinte comando no diretório de base do seu projeto:"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:74
#, fuzzy
msgid "This will add the following to your build file:"
msgstr "Isto irá adicionar o seguinte ao seu ficheiro de compilação:"

#. type: Block title
#: upstream/_guides/smallrye-graphql-client.adoc:76
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:82
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-graphql-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/smallrye-graphql-client.adoc:85
#, fuzzy, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:88
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-smallrye-graphql-client\")\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/smallrye-graphql-client.adoc:90
#, fuzzy, no-wrap
msgid "The application"
msgstr "A aplicação"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:96
#, fuzzy
msgid "The application we will build makes use of both types of GraphQL clients. In both cases, they will connect to the Star Wars service at https://graphql.org/swapi-graphql[SWAPI] and query it for a list of Star Wars films, and, for each film, the names of the planets which appear in that film."
msgstr "A aplicação que vamos construir usa os dois tipos de clientes GraphQL. Em ambos os casos, ligam-se ao serviço Star Wars na  link:https://graphql.org/swapi-graphql[SWAPI] e consultam-no para obter uma lista de filmes Star Wars e, para cada filme, os nomes dos planetas que aparecem nesse filme."

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:98
#, fuzzy
msgid "The corresponding GraphQL query looks like this:"
msgstr "A consulta GraphQL correspondente tem o seguinte aspeto:"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:113
#, no-wrap
msgid ""
"{\n"
"  allFilms {\n"
"    films {\n"
"      title\n"
"      planetConnection {\n"
"        planets {\n"
"          name\n"
"        }\n"
"      }\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:116
#, fuzzy
msgid "You may go to https://graphql.org/swapi-graphql[the webpage] to execute this query manually."
msgstr "Pode ir à  link:https://graphql.org/swapi-graphql[página Web] para executar esta consulta manualmente."

#. type: Title ==
#: upstream/_guides/smallrye-graphql-client.adoc:117
#, fuzzy, no-wrap
msgid "Using the Typesafe client"
msgstr "Utilizar o cliente Typesafe"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:124
#, fuzzy
msgid "To use the typesafe client, we need the corresponding model classes that are compatible with the schema. There are two ways to obtain them. First is to use the client generator offered by SmallRye GraphQL, which generates classes from the schema document and a list of queries. This generator is considered highly experimental for now, and is not covered in this example. If interested, refer to the https://github.com/smallrye/smallrye-graphql/tree/main/client/generator[Client Generator] and its documentation."
msgstr "Para utilizar o cliente typesafe, precisamos das classes de modelo correspondentes que sejam compatíveis com o esquema. Há duas maneiras de obtê-las. A primeira é usar o gerador de clientes oferecido pelo SmallRye GraphQL, que gera classes a partir do documento de esquema e uma lista de consultas. Este gerador é considerado altamente experimental por enquanto, e não é coberto neste exemplo. Se estiver interessado, consulte o  link:https://github.com/smallrye/smallrye-graphql/tree/main/client/generator[Gerador de Clientes] e sua documentação."

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:129
#, fuzzy
msgid "In this example, we will create a slimmed down version of the model classes manually, with only the fields that we need, and ignore all the stuff that we don't need. We will need the classes for `Film` and `Planet`.  But, the service is also using specific wrappers named `FilmConnection` and `PlanetConnection`, which, for our purpose, will serve just to contain the actual list of `Film` and `Planet` instances, respectively."
msgstr "Neste exemplo, vamos criar manualmente uma versão reduzida das classes de modelo, apenas com os campos de que precisamos e ignorar tudo o que não é necessário. Precisaremos das classes para `Film` e `Planet`. Mas o serviço também está usando wrappers específicos chamados `FilmConnection` e `PlanetConnection`, que, para nosso propósito, servirão apenas para conter a lista real de instâncias de `Film` e `Planet`, respetivamente."

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:131
#, fuzzy
msgid "Let's create all the model classes and put them into the `org.acme.microprofile.graphql.client.model` package:"
msgstr "Vamos criar todas as classes de modelo e colocá-las no pacote `org.acme.microprofile.graphql.client.model`:"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:135
#, no-wrap
msgid "public class FilmConnection {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:137
#, no-wrap
msgid "    private List<Film> films;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:141
#, no-wrap
msgid ""
"    public List<Film> getFilms() {\n"
"        return films;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:146
#, no-wrap
msgid ""
"    public void setFilms(List<Film> films) {\n"
"        this.films = films;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:148
#, no-wrap
msgid "public class Film {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:150
#, no-wrap
msgid "    private String title;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:152
#, no-wrap
msgid "    private PlanetConnection planetConnection;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:156
#, no-wrap
msgid ""
"    public String getTitle() {\n"
"        return title;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:160
#, no-wrap
msgid ""
"    public void setTitle(String title) {\n"
"        this.title = title;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:164
#, no-wrap
msgid ""
"    public PlanetConnection getPlanetConnection() {\n"
"        return planetConnection;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:169
#, no-wrap
msgid ""
"    public void setPlanetConnection(PlanetConnection planetConnection) {\n"
"        this.planetConnection = planetConnection;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:171
#, no-wrap
msgid "public class PlanetConnection {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:173
#, no-wrap
msgid "    private List<Planet> planets;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:177
#, no-wrap
msgid ""
"    public List<Planet> getPlanets() {\n"
"        return planets;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:181
#, no-wrap
msgid ""
"    public void setPlanets(List<Planet> planets) {\n"
"        this.planets = planets;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:183
#: upstream/_guides/smallrye-graphql-client.adoc:208
#, no-wrap
msgid "}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:185
#, no-wrap
msgid "public class Planet {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:187
#, no-wrap
msgid "    private String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:191
#, no-wrap
msgid ""
"    public String getName() {\n"
"        return name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:196
#, no-wrap
msgid ""
"    public void setName(String name) {\n"
"        this.name = name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:200
#, fuzzy
msgid "Now that we have the model classes, we can create the interface that represents the actual set of operations we want to call on the remote GraphQL service."
msgstr "Agora que temos as classes de modelo, podemos criar a interface que representa o conjunto real de operações que queremos chamar no serviço GraphQL remoto."

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:204
#, no-wrap
msgid ""
"@GraphQLClientApi(configKey = \"star-wars-typesafe\")\n"
"public interface StarWarsClientApi {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:206
#, no-wrap
msgid "    FilmConnection allFilms();\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:214
#, fuzzy
msgid "For simplicity, we're only calling the query named `allFilms`. We named our corresponding method `allFilms` too. If we named the method differently, we would need to annotate it with `@Query(value=\"allFilms\")` to specify the name of the query that should be executed when this method is called."
msgstr "Para simplificar, só estamos a chamar a consulta com o nome `allFilms`. Também chamámos o nosso método correspondente `allFilms`. Se nomeássemos o método de forma diferente, precisaríamos de anotá-lo com `@Query(value=\"allFilms\")` para especificar o nome da consulta que deve ser executada quando este método é chamado."

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:218
#, fuzzy
msgid "The client also needs some configuration, namely at least the URL of the remote service. We can either specify that within the `@GraphQLClientApi` annotation (by setting the `endpoint` parameter), or move this over to the configuration file, `application.properties`:"
msgstr "O cliente também precisa de alguma configuração, nomeadamente, pelo menos, o URL do serviço remoto. Podemos especificar isso dentro da anotação `@GraphQLClientApi` (definindo o parâmetro `endpoint` ), ou mover isso para o ficheiro de configuração, `application.properties`:"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:221
#, no-wrap
msgid "quarkus.smallrye-graphql-client.star-wars-typesafe.url=https://swapi-graphql.netlify.app/.netlify/functions/index\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:227
#, fuzzy
msgid "During *tests only*, the URL is an optional property, and if it's not specified, Quarkus will assume that the target of the client is the application that is being tested (typically, `http://localhost:8081/graphql`).  This is useful if your application contains a GraphQL server-side API as well as a GraphQL client that is used for testing the API."
msgstr "*Apenas* durante *os testes*, o URL é uma propriedade opcional e, se não for especificado, o Quarkus assumirá que o destino do cliente é a aplicação que está a ser testada (normalmente, `&lt;a href=\"http://localhost:8081/graphql\" class=\"bare\"&gt;http://localhost:8081/graphql&lt;/a&gt;`). Isso é útil se seu aplicativo contiver uma API do lado do servidor GraphQL, bem como um cliente GraphQL que é usado para testar a API."

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:231
#, fuzzy
msgid "`star-wars-typesafe` is the name of the configured client instance, and corresponds to the `configKey` in the `@GraphQLClientApi` annotation. If you don't want to specify a custom name, you can leave out the `configKey`, and then refer to it by using the fully qualified name of the interface."
msgstr "`star-wars-typesafe` é o nome da instância do cliente configurado e corresponde a `configKey` na anotação `@GraphQLClientApi`. Se não pretender especificar um nome personalizado, pode omitir o `configKey` e, em seguida, referir-se a ele utilizando o nome totalmente qualificado da interface."

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:235
#, fuzzy
msgid "Now that we have the client instance properly configured, we need a way to have it perform something when we start the application. For that, we will use a REST endpoint that, when called by a user, obtains the client instance and lets it execute the query."
msgstr "Agora que temos a instância do cliente configurada corretamente, precisamos de uma maneira de fazer com que ela execute algo quando iniciarmos o aplicativo. Para isso, usaremos um ponto de extremidade REST que, quando chamado por um usuário, obtém a instância do cliente e permite que ela execute a consulta."

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:242
#, no-wrap
msgid ""
"@Path(\"/\")\n"
"public class StarWarsResource {\n"
"    @Inject\n"
"    StarWarsClientApi typesafeClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:251
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/typesafe\")\n"
"    @Produces(MediaType.APPLICATION_JSON)\n"
"    @Blocking\n"
"    public List<Film> getAllFilmsUsingTypesafeClient() {\n"
"        return typesafeClient.allFilms().getFilms();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:256
#, fuzzy
msgid "With this REST endpoint included in your application, you can simply send a GET request to `/typesafe`, and the application will use an injected typesafe client instance to call the remote service, obtain the films and planets, and return the JSON representation of the resulting list."
msgstr "Com este ponto final REST incluído na sua aplicação, pode simplesmente enviar um pedido GET para `/typesafe`, e a aplicação utilizará uma instância de cliente typesafe injectada para chamar o serviço remoto, obter os filmes e planetas e devolver a representação JSON da lista resultante."

#. type: Title ==
#: upstream/_guides/smallrye-graphql-client.adoc:257
#, fuzzy, no-wrap
msgid "Using the Dynamic client"
msgstr "Utilizar o Dynamic client"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:261
#, fuzzy
msgid "For the dynamic client, the model classes are optional, because we can work with abstract representations of the GraphQL types and documents. The client API interface is not needed at all."
msgstr "Para o cliente dinâmico, as classes de modelo são opcionais, porque podemos trabalhar com representações abstractas dos tipos e documentos GraphQL. A interface da API do cliente não é necessária."

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:263
#, fuzzy
msgid "We still need to configure the URL for the client, so let's put this into `application.properties`:"
msgstr "Ainda precisamos de configurar o URL para o cliente, por isso vamos colocar isto em `application.properties`:"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:265
#, no-wrap
msgid "quarkus.smallrye-graphql-client.star-wars-dynamic.url=https://swapi-graphql.netlify.app/.netlify/functions/index\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:269
#, fuzzy
msgid "We decided to name the client `star-wars-dynamic`. We will use this name when injecting a dynamic client to properly qualify the injection point."
msgstr "Decidimos chamar o cliente de `star-wars-dynamic`. Utilizaremos este nome ao injetar um cliente dinâmico para qualificar corretamente o ponto de injeção."

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:272
#, fuzzy
msgid "If you need to add an authorization header, or any other custom HTTP header (in our case it's not required), this can be done by:"
msgstr "Se precisar de adicionar um cabeçalho de autorização, ou qualquer outro cabeçalho HTTP personalizado (no nosso caso, não é necessário), isso pode ser feito através de:"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:274
#, no-wrap
msgid "quarkus.smallrye-graphql-client.star-wars-dynamic.header.HEADER-KEY=HEADER-VALUE\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:277
#, fuzzy
msgid "Add this to the `StarWarsResource` created earlier:"
msgstr "Adicione isto a `StarWarsResource` criado anteriormente:"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:283
#, no-wrap
msgid ""
"import static io.smallrye.graphql.client.core.Document.document;\n"
"import static io.smallrye.graphql.client.core.Field.field;\n"
"import static io.smallrye.graphql.client.core.Operation.operation;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:285
#, no-wrap
msgid "// ....\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:289
#, no-wrap
msgid ""
"@Inject\n"
"@GraphQLClient(\"star-wars-dynamic\")    // <1>\n"
"DynamicGraphQLClient dynamicClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:312
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/dynamic\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"@Blocking\n"
"public List<Film> getAllFilmsUsingDynamicClient() throws Exception {\n"
"    Document query = document(   // <2>\n"
"        operation(\n"
"            field(\"allFilms\",\n"
"                field(\"films\",\n"
"                    field(\"title\"),\n"
"                    field(\"planetConnection\",\n"
"                        field(\"planets\",\n"
"                            field(\"name\")\n"
"                        )\n"
"                    )\n"
"                )\n"
"            )\n"
"        )\n"
"    );\n"
"    Response response = dynamicClient.executeSync(query);   <3>\n"
"    return response.getObject(FilmConnection.class, \"allFilms\").getFilms();  <4>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:315
#, fuzzy
msgid "Qualifies the injection point so that we know which named client needs to be injected here."
msgstr "Qualifica o ponto de injeção para que saibamos que cliente nomeado tem de ser injetado aqui."

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:319
#, fuzzy
msgid "Here we build a document representing the GraphQL query, using the provided DSL language.  We use static imports to make the code easier to read. The DSL is designed in a way that it looks quite similar to writing a GraphQL query as a string."
msgstr "Aqui construímos um documento que representa a consulta GraphQL, usando a linguagem DSL fornecida. Usamos importações estáticas para facilitar a leitura do código. A DSL foi projetada de forma a parecer bastante semelhante a escrever uma consulta GraphQL como uma string."

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:322
#, fuzzy
msgid "Execute the query and block while waiting for the response. There is also an asynchronous variant that returns a `Uni<Response>`."
msgstr "Executa a consulta e bloqueia enquanto aguarda a resposta. Existe também uma variante assíncrona que devolve um `Uni&amp;lt;Response&amp;gt;`."

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:327
#, fuzzy
msgid "Here we did the optional step of converting the response to instances of our model classes, because we have the classes available. If you don't have the classes available or don't want to use them, simply calling `response.getData()` would get you a `JsonObject` representing all the returned data."
msgstr "Aqui, fizemos a etapa opcional de converter a resposta em instâncias de nossas classes de modelo, porque temos as classes disponíveis. Se você não tiver as classes disponíveis ou não quiser usá-las, basta chamar `response.getData()` para obter um `JsonObject` representando todos os dados retornados."

#. type: Title ==
#: upstream/_guides/smallrye-graphql-client.adoc:328
#, fuzzy, no-wrap
msgid "Running the application"
msgstr "Executar a aplicação"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:331
#, fuzzy
msgid "Launch the application in dev mode using:"
msgstr "Inicie a aplicação no modo de desenvolvimento utilizando:"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:335
#, fuzzy
msgid "To execute the queries, you need to send GET requests to our REST endpoint:"
msgstr "Para executar as consultas, é necessário enviar pedidos GET para o nosso ponto de extremidade REST:"

#. type: delimited block -
#: upstream/_guides/smallrye-graphql-client.adoc:339
#, no-wrap
msgid ""
"curl -s http://localhost:8080/dynamic # to use the dynamic client\n"
"curl -s http://localhost:8080/typesafe # to use the typesafe client\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:344
#, fuzzy
msgid "Whether you use dynamic or typesafe, the result should be the same.  If the JSON document is hard to read, you might want to run it through a tool that formats it for better readability by humans, for example by piping the output through `jq`."
msgstr "Quer use dinâmico ou typesafe, o resultado deve ser o mesmo. Se o documento JSON for difícil de ler, pode querer executá-lo através de uma ferramenta que o formate para melhor legibilidade por humanos, por exemplo, canalizando a saída através de `jq`."

#. type: Title ==
#: upstream/_guides/smallrye-graphql-client.adoc:345
#, fuzzy, no-wrap
msgid "Conclusion"
msgstr "Conclusão"

#. type: Plain text
#: upstream/_guides/smallrye-graphql-client.adoc:348
#, fuzzy
msgid "This example showed how to use both the dynamic and typesafe GraphQL clients to call an external GraphQL service and explained the difference between the client types."
msgstr "Este exemplo mostrou como usar os clientes GraphQL dinâmicos e seguros para chamar um serviço GraphQL externo e explicou a diferença entre os tipos de cliente."
