# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:24+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/security-openid-connect-multitenancy.adoc:6
#, fuzzy, no-wrap
msgid "Using OpenID Connect (OIDC) Multi-Tenancy"
msgstr "Usando o OpenID Connect (OIDC) Multi-Tenancy"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:12
#, fuzzy
msgid "This guide demonstrates how your OpenID Connect (OIDC) application can support multi-tenancy so that you can serve multiple tenants from a single application. Tenants can be distinct realms or security domains within the same OpenID Provider or even distinct OpenID Providers."
msgstr "Este guia demonstra como a sua aplicação OpenID Connect (OIDC) pode suportar multi-tenancy para que possa servir vários inquilinos a partir de uma única aplicação. Os locatários podem ser reinos ou domínios de segurança distintos dentro do mesmo provedor OpenID ou até mesmo provedores OpenID distintos."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:14
#, fuzzy
msgid "When serving multiple customers from the same application (e.g.: SaaS), each customer is a tenant. By enabling multi-tenancy support to your applications you are allowed to also support distinct authentication policies for each tenant even though if that means authenticating against different OpenID Providers, such as Keycloak and Google."
msgstr "Ao servir vários clientes a partir da mesma aplicação (por exemplo, SaaS), cada cliente é um inquilino. Ao ativar o suporte multi-tenancy para as suas aplicações, é-lhe permitido suportar também políticas de autenticação distintas para cada inquilino, mesmo que isso signifique autenticar em diferentes fornecedores OpenID, como o Keycloak e o Google."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:16
#, fuzzy
msgid "Please read the xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication] guide if you need to authorize a tenant using Bearer Token Authorization."
msgstr "Leia o guia de  link:security-oidc-bearer-token-authentication.html[autenticação de token de portador do OIDC] se precisar de autorizar um inquilino utilizando a autorização de token de portador."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:18
#, fuzzy
msgid "If you need to authenticate and authorize a tenant using OpenID Connect Authorization Code Flow, read the xref:security-oidc-code-flow-authentication.adoc[OIDC code flow mechanism for protecting web applications] guide."
msgstr "Se precisar de autenticar e autorizar um inquilino utilizando o Fluxo de Código de Autorização OpenID Connect, leia o guia  link:security-oidc-code-flow-authentication.html[Mecanismo de fluxo de código OIDC para proteção de aplicações Web]."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:20
#, fuzzy
msgid "Also see the xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties] reference guide."
msgstr "Consulte também o guia de referência  link:security-oidc-configuration-properties-reference.html[das propriedades de configuração do OIDC]."

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:22
#, fuzzy, no-wrap
msgid "Prerequisites"
msgstr "Pré-requisitos"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:27
#, fuzzy
msgid "https://stedolan.github.io/jq/[jq tool]"
msgstr "link:https://stedolan.github.io/jq/[ferramenta jq]"

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:28
#, fuzzy, no-wrap
msgid "Architecture"
msgstr "Arquitetura"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:31
#, fuzzy
msgid "In this example, we build a very simple application which supports two resource methods:"
msgstr "Neste exemplo, criamos uma aplicação muito simples que suporta dois métodos de recursos:"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:33
#, fuzzy
msgid "`/{tenant}`"
msgstr "`/{tenant}`"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:35
#, fuzzy
msgid "This resource returns information obtained from the ID token issued by OpenID Provider about the authenticated user and the current tenant."
msgstr "Este recurso devolve informações obtidas a partir do token de ID emitido pelo fornecedor OpenID sobre o utilizador autenticado e o inquilino atual."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:37
#, fuzzy
msgid "`/{tenant}`/bearer"
msgstr "`/{tenant}`/portador"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:39
#, fuzzy
msgid "This resource returns information obtained from the Access token issued by OpenID Provider about the authenticated user and the current tenant."
msgstr "Este recurso devolve informações obtidas a partir do token de acesso emitido pelo fornecedor OpenID sobre o utilizador autenticado e o inquilino atual."

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:40
#, fuzzy, no-wrap
msgid "Solution"
msgstr "Solução"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:44
#, fuzzy
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "Recomendamos que siga as instruções nas secções seguintes e crie a aplicação passo a passo. No entanto, pode ir diretamente para o exemplo completo."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:46
#, fuzzy
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Clonar o repositório Git: `git clone {quickstarts-clone-url}`, ou descarregar um {quickstarts-archive-url}[arquivo]."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:48
#, fuzzy
msgid "The solution is located in the `security-openid-connect-multi-tenancy-quickstart` link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart[directory]."
msgstr "A solução está localizada no  link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart[diretório] `security-openid-connect-multi-tenancy-quickstart`."

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:49
#, fuzzy, no-wrap
msgid "Creating the Maven Project"
msgstr "Criar o projeto Maven"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:52
#, fuzzy
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "Primeiro, precisamos de um novo projeto. Crie um novo projeto com o seguinte comando:"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:59
#, fuzzy
msgid "If you already have your Quarkus project configured, you can add the `oidc` extension to your project by running the following command in your project base directory:"
msgstr "Se já tiver o seu projeto Quarkus configurado, pode adicionar a extensão `oidc` ao seu projeto executando o seguinte comando no diretório de base do seu projeto:"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:64
#, fuzzy
msgid "This will add the following to your build file:"
msgstr "Isto irá adicionar o seguinte ao seu ficheiro de compilação:"

#. type: Block title
#: upstream/_guides/security-openid-connect-multitenancy.adoc:66
#: upstream/_guides/security-openid-connect-multitenancy.adoc:410
#, fuzzy, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:72
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_guides/security-openid-connect-multitenancy.adoc:75
#: upstream/_guides/security-openid-connect-multitenancy.adoc:430
#, fuzzy, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:78
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-oidc\")\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:80
#, fuzzy, no-wrap
msgid "Writing the application"
msgstr "Escrever a aplicação"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:83
#, fuzzy
msgid "Let's start by implementing the `/{tenant}` endpoint. As you can see from the source code below it is just a regular Jakarta REST resource:"
msgstr "Vamos começar implementando o ponto de extremidade `/{tenant}`. Como pode ver no código-fonte abaixo, trata-se apenas de um recurso Jakarta REST normal:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:87
#: upstream/_guides/security-openid-connect-multitenancy.adoc:157
#: upstream/_guides/security-openid-connect-multitenancy.adoc:244
#: upstream/_guides/security-openid-connect-multitenancy.adoc:280
#: upstream/_guides/security-openid-connect-multitenancy.adoc:463
#: upstream/_guides/security-openid-connect-multitenancy.adoc:545
#: upstream/_guides/security-openid-connect-multitenancy.adoc:800
#, no-wrap
msgid "package org.acme.quickstart.oidc;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:92
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:94
#, no-wrap
msgid "import org.eclipse.microprofile.jwt.JsonWebToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:96
#, no-wrap
msgid "import io.quarkus.oidc.IdToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:105
#, no-wrap
msgid ""
"@Path(\"/{tenant}\")\n"
"public class HomeResource {\n"
"    /**\n"
"     * Injection point for the ID Token issued by the OpenID Connect Provider\n"
"     */\n"
"    @Inject\n"
"    @IdToken\n"
"    JsonWebToken idToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:111
#, no-wrap
msgid ""
"    /**\n"
"     * Injection point for the Access Token issued by the OpenID Connect Provider\n"
"     */\n"
"    @Inject\n"
"    JsonWebToken accessToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:123
#, no-wrap
msgid ""
"    /**\n"
"     * Returns the ID Token info. This endpoint exists only for demonstration purposes, you should not\n"
"     * expose this token in a real application.\n"
"     *\n"
"     * @return ID Token info\n"
"     */\n"
"    @GET\n"
"    @Produces(\"text/html\")\n"
"    public String getIdTokenInfo() {\n"
"        StringBuilder response = new StringBuilder().append(\"<html>\")\n"
"                .append(\"<body>\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:126
#, no-wrap
msgid ""
"        response.append(\"<h2>Welcome, \").append(this.idToken.getClaim(\"email\").toString()).append(\"</h2>\\n\");\n"
"        response.append(\"<h3>You are accessing the application within tenant <b>\").append(idToken.getIssuer()).append(\" boundaries</b></h3>\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:129
#, no-wrap
msgid ""
"        return response.append(\"</body>\").append(\"</html>\").toString();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:142
#, no-wrap
msgid ""
"    /**\n"
"     * Returns the Access Token info. This endpoint exists only for demonstration purposes, you should not\n"
"     * expose this token in a real application.\n"
"     *\n"
"     * @return Access Token info\n"
"     */\n"
"    @GET\n"
"    @Produces(\"text/html\")\n"
"    @Path(\"bearer\")\n"
"    public String getAccessTokenInfo() {\n"
"        StringBuilder response = new StringBuilder().append(\"<html>\")\n"
"                .append(\"<body>\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:145
#, no-wrap
msgid ""
"        response.append(\"<h2>Welcome, \").append(this.accessToken.getClaim(\"email\").toString()).append(\"</h2>\\n\");\n"
"        response.append(\"<h3>You are accessing the application within tenant <b>\").append(accessToken.getIssuer()).append(\" boundaries</b></h3>\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:149
#, no-wrap
msgid ""
"        return response.append(\"</body>\").append(\"</html>\").toString();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:153
#, fuzzy
msgid "In order to resolve the tenant from incoming requests and map it to a specific `quarkus-oidc` tenant configuration in application.properties, you need to create an implementation for the `io.quarkus.oidc.TenantConfigResolver` interface which can be used to resolve the tenant configurations dynamically:"
msgstr "Para resolver o locatário a partir de pedidos de entrada e mapeá-lo para uma configuração de locatário `quarkus-oidc` específica em application.properties, é necessário criar uma implementação para a interface `io.quarkus.oidc.TenantConfigResolver` que pode ser utilizada para resolver as configurações de locatário dinamicamente:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:159
#: upstream/_guides/security-openid-connect-multitenancy.adoc:246
#: upstream/_guides/security-openid-connect-multitenancy.adoc:282
#: upstream/_guides/security-openid-connect-multitenancy.adoc:804
#, no-wrap
msgid "import jakarta.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:161
#, no-wrap
msgid "import org.eclipse.microprofile.config.ConfigProvider;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:168
#, no-wrap
msgid ""
"import io.quarkus.oidc.OidcRequestContext;\n"
"import io.quarkus.oidc.OidcTenantConfig;\n"
"import io.quarkus.oidc.OidcTenantConfig.ApplicationType;\n"
"import io.quarkus.oidc.TenantConfigResolver;\n"
"import io.smallrye.mutiny.Uni;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:171
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomTenantResolver implements TenantConfigResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:175
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<OidcTenantConfig> resolve(RoutingContext context, OidcRequestContext<OidcTenantConfig> requestContext) {\n"
"        String path = context.request().path();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:178
#, no-wrap
msgid ""
"        if (path.startsWith(\"/tenant-a\")) {\n"
"           String keycloakUrl = ConfigProvider.getConfig().getValue(\"keycloak.url\", String.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:192
#, no-wrap
msgid ""
"            OidcTenantConfig config = new OidcTenantConfig();\n"
"            config.setTenantId(\"tenant-a\");\n"
"            config.setAuthServerUrl(keycloakUrl + \"/realms/tenant-a\");\n"
"            config.setClientId(\"multi-tenant-client\");\n"
"            config.getCredentials().setSecret(\"secret\");\n"
"            config.setApplicationType(ApplicationType.HYBRID);\n"
"            return Uni.createFrom().item(config);\n"
"        } else {\n"
"            // resolve to default tenant config\n"
"            return Uni.createFrom().nullItem();\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:195
#, fuzzy
msgid "From the implementation above, tenants are resolved from the request path so that in case no tenant could be inferred, `null` is returned to indicate that the default tenant configuration should be used."
msgstr "A partir da implementação acima, os inquilinos são resolvidos a partir do caminho do pedido para que, caso não seja possível inferir nenhum inquilino, `null` seja devolvido para indicar que a configuração predefinida do inquilino deve ser utilizada."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:197
#, fuzzy
msgid "Note the `tenant-a` application type is `hybrid` - it can accept HTTP bearer tokens if provided, otherwise it will initiate an authorization code flow when the authentication is required."
msgstr "Note-se que o tipo de aplicação `tenant-a` é `hybrid` - pode aceitar tokens portadores HTTP se forem fornecidos, caso contrário, iniciará um fluxo de código de autorização quando a autenticação for necessária."

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:198
#, fuzzy, no-wrap
msgid "Configuring the application"
msgstr "Configurar a aplicação"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:206
#: upstream/_guides/security-openid-connect-multitenancy.adoc:228
#: upstream/_guides/security-openid-connect-multitenancy.adoc:448
#, no-wrap
msgid ""
"# Default Tenant Configuration\n"
"%prod.quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.client-id=multi-tenant-client\n"
"quarkus.oidc.application-type=web-app\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:208
#: upstream/_guides/security-openid-connect-multitenancy.adoc:450
#, no-wrap
msgid "# Tenant A Configuration is created dynamically in CustomTenantConfigResolver\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:212
#: upstream/_guides/security-openid-connect-multitenancy.adoc:237
#: upstream/_guides/security-openid-connect-multitenancy.adoc:454
#, no-wrap
msgid ""
"# HTTP Security Configuration\n"
"quarkus.http.auth.permission.authenticated.paths=/*\n"
"quarkus.http.auth.permission.authenticated.policy=authenticated\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:215
#, fuzzy
msgid "The first configuration is the default tenant configuration that should be used when the tenant can not be inferred from the request. Note that a `%prod` profile prefix is used with `quarkus.oidc.auth-server-url` - it is done to support testing a multi-tenant application with `Dev Services For Keycloak`. This configuration is using a Keycloak instance to authenticate users."
msgstr "A primeira configuração é a configuração de locatário predefinida que deve ser utilizada quando o locatário não pode ser inferido a partir do pedido. Observe que um prefixo de perfil `%prod` é usado com `quarkus.oidc.auth-server-url` - isso é feito para dar suporte ao teste de uma aplicação multilocatário com `Dev Services For Keycloak`. Esta configuração está a utilizar uma instância Keycloak para autenticar utilizadores."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:217
#, fuzzy
msgid "The second configuration is provided by `TenantConfigResolver`, it is the configuration that will be used when an incoming request is mapped to the tenant `tenant-a`."
msgstr "A segunda configuração é fornecida por `TenantConfigResolver`, é a configuração que será utilizada quando um pedido de entrada for mapeado para o inquilino `tenant-a`."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:219
#, fuzzy
msgid "Note that both configurations map to the same Keycloak server instance while using distinct `realms`."
msgstr "Note-se que ambas as configurações são mapeadas para a mesma instância do servidor Keycloak, mas utilizam `realms`."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:221
#, fuzzy
msgid "Alternatively you can configure the tenant `tenant-a` directly in `application.properties`:"
msgstr "Em alternativa, pode configurar o locatário `tenant-a` diretamente em `application.properties`:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:233
#, no-wrap
msgid ""
"# Tenant A Configuration\n"
"quarkus.oidc.tenant-a.auth-server-url=http://localhost:8180/realms/tenant-a\n"
"quarkus.oidc.tenant-a.client-id=multi-tenant-client\n"
"quarkus.oidc.tenant-a.application-type=web-app\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:240
#, fuzzy
msgid "and use a custom `TenantConfigResolver` to resolve it:"
msgstr "e utilizar um `TenantConfigResolver` personalizado para o resolver:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:249
#: upstream/_guides/security-openid-connect-multitenancy.adoc:285
#, no-wrap
msgid ""
"import io.quarkus.oidc.TenantResolver;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:252
#: upstream/_guides/security-openid-connect-multitenancy.adoc:288
#: upstream/_guides/security-openid-connect-multitenancy.adoc:811
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomTenantResolver implements TenantResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:257
#, no-wrap
msgid ""
"    @Override\n"
"    public String resolve(RoutingContext context) {\n"
"        String path = context.request().path();\n"
"        String[] parts = path.split(\"/\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:262
#: upstream/_guides/security-openid-connect-multitenancy.adoc:743
#, no-wrap
msgid ""
"        if (parts.length == 0) {\n"
"            // resolve to default tenant configuration\n"
"            return null;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:266
#, no-wrap
msgid ""
"        return parts[1];\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:269
#, fuzzy
msgid "You can define multiple tenants in your configuration file, just make sure they have a unique alias so that you can map them properly when resolving a tenant from your `TenantResolver` implementation."
msgstr "Pode definir vários inquilinos no seu ficheiro de configuração, mas certifique-se de que têm um alias único para que possa mapeá-los corretamente quando resolver um inquilino a partir da sua implementação `TenantResolver`."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:271
#, fuzzy
msgid "However, using a static tenant resolution (configuring tenants in `application.properties` and resolving them with `TenantResolver`) prevents testing the endpoint with `Dev Services for Keycloak` since `Dev Services for Keycloak` has no knowledge of how the requests will be mapped to individual tenants and can not dynamically provide tenant-specific `quarkus.oidc.<tenant-id>.auth-server-url` values and therefore using `%prod` prefixes with the tenant-specific URLs in `application.properties` will not work in tests or devmode."
msgstr "No entanto, a utilização de uma resolução de inquilino estática (configurar inquilinos em `application.properties` e resolvê-los com `TenantResolver`) impede o teste do ponto final com `Dev Services for Keycloak`, uma vez que `Dev Services for Keycloak` não tem conhecimento de como os pedidos serão mapeados para inquilinos individuais e não pode fornecer dinamicamente valores `quarkus.oidc.&amp;lt;tenant-id&amp;gt;.auth-server-url` específicos do inquilino e, por conseguinte, a utilização de prefixos `%prod` com os URLs específicos do inquilino em `application.properties` não funcionará em testes ou devmode."

#. type: delimited block =
#: upstream/_guides/security-openid-connect-multitenancy.adoc:276
#, fuzzy
msgid "When a current tenant represents an OIDC `web-app` application, the current `io.vertx.ext.web.RoutingContext` will contain a `tenant-id` attribute by the time the custom tenant resolver has been called for all the requests completing the code authentication flow and the already authenticated requests, when either a tenant specific state or session cookie already exists.  Therefore, when working with multiple OpenID Connect Providers, you only need a path specific check to resolve a tenant id if the `RoutingContext` does not have the `tenant-id` attribute set, for example:"
msgstr "Quando um inquilino atual representa uma aplicação OIDC `web-app`, o `io.vertx.ext.web.RoutingContext` atual conterá um atributo `tenant-id` no momento em que o resolvedor de inquilinos personalizado tiver sido chamado para todos os pedidos que completam o fluxo de autenticação de código e os pedidos já autenticados, quando já existir um estado específico do inquilino ou um cookie de sessão. Portanto, ao trabalhar com vários provedores de conexão OpenID, você só precisa de uma verificação específica de caminho para resolver um ID de locatário se o `RoutingContext` não tiver o atributo `tenant-id` definido, por exemplo:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:298
#, no-wrap
msgid ""
"    @Override\n"
"    public String resolve(RoutingContext context) {\n"
"        String tenantId = context.get(\"tenant-id\");\n"
"        if (tenantId != null) {\n"
"            return tenantId;\n"
"        } else {\n"
"            // Initial login request\n"
"            String path = context.request().path();\n"
"            String[] parts = path.split(\"/\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:307
#, no-wrap
msgid ""
"            if (parts.length == 0) {\n"
"                // resolve to default tenant configuration\n"
"                return null;\n"
"            }\n"
"            return parts[1];\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:310
#, fuzzy
msgid "In fact, this is how Quarkus OIDC resolves static custom tenants itself if no custom `TenantResolver` is registered."
msgstr "De facto, é assim que o Quarkus OIDC resolve ele próprio os inquilinos personalizados estáticos se não estiver registado nenhum `TenantResolver` personalizado."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:312
#, fuzzy
msgid "A similar technique can be used with `TenantConfigResolver` where a `tenant-id` provided in the context can be used to return `OidcTenantConfig` already prepared with the previous request."
msgstr "Uma técnica semelhante pode ser utilizada com `TenantConfigResolver`, em que um `tenant-id` fornecido no contexto pode ser utilizado para devolver `OidcTenantConfig` já preparado com o pedido anterior."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:319
#, fuzzy
msgid "If you also use xref:hibernate-orm.adoc#multitenancy[Hibernate ORM multitenancy] or xref:mongodb-panache.adoc#multitenancy[MongoDB with Panache multitenancy] and both tenant IDs are the same and must be extracted from the Vert.x `RoutingContext` you can pass the tenant id from the OIDC Tenant Resolver to the Hibernate ORM Tenant Resolver or MongoDB with Panache Mongo Database Resolver as a `RoutingContext` attribute, for example:"
msgstr "Se também utilizar o  link:hibernate-orm.html#multitenancy[Hibernate ORM multitenancy] ou o  link:mongodb-panache.html#multitenancy[MongoDB com Panache multitenancy] e ambos os ID de inquilino forem iguais e tiverem de ser extraídos do Vert.x `RoutingContext`, pode passar o ID de inquilino do OIDC Tenant Resolver para o Hibernate ORM Tenant Resolver ou MongoDB com Panache Mongo Database Resolver como um atributo `RoutingContext`, por exemplo:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:323
#: upstream/_guides/security-openid-connect-multitenancy.adoc:654
#, no-wrap
msgid "public class CustomTenantResolver implements TenantResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:331
#, no-wrap
msgid ""
"    @Override\n"
"    public String resolve(RoutingContext context) {\n"
"        String tenantId = extractTenantId(context);\n"
"        context.put(\"tenantId\", tenantId);\n"
"        return tenantId;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:334
#, fuzzy, no-wrap
msgid "Starting and Configuring the Keycloak Server"
msgstr "Iniciando e configurando o servidor Keycloak"

#. type: delimited block =
#: upstream/_guides/security-openid-connect-multitenancy.adoc:337
#, fuzzy
msgid "To start a Keycloak Server you can use Docker and just run the following command:"
msgstr "Para iniciar um servidor Keycloak, pode utilizar o Docker e executar o seguinte comando:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:341
#, no-wrap
msgid "docker run --name keycloak -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=admin -p 8180:8080 quay.io/keycloak/keycloak:{keycloak.version} start-dev\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:344
#, fuzzy
msgid "where `keycloak.version` should be set to `17.0.0` or higher."
msgstr "em que `keycloak.version` deve ser definido como `17.0.0` ou superior."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:346
#, fuzzy
msgid "You should be able to access your Keycloak Server at http://localhost:8180[localhost:8180]."
msgstr "Deverá poder aceder ao seu servidor Keycloak em  link:http://localhost:8180[localhost:8180]."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:348
#, fuzzy
msgid "Log in as the `admin` user to access the Keycloak Administration Console. Username should be `admin` and password `admin`."
msgstr "Inicie sessão como o utilizador `admin` para aceder à Consola de Administração do Keycloak. O nome de utilizador deve ser `admin` e a palavra-passe `admin`."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:350
#, fuzzy
msgid "Now, follow the steps below to import the realms for the two tenants:"
msgstr "Agora, siga os passos abaixo para importar os reinos para os dois locatários:"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:352
#, fuzzy
msgid "Import the link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/default-tenant-realm.json[default-tenant-realm.json] to create the default realm"
msgstr "Importe o  link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/default-tenant-realm.json[default-tenant-realm.json] para criar o realm padrão"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:353
#, fuzzy
msgid "Import the link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/tenant-a-realm.json[tenant-a-realm.json] to create the realm for the tenant `tenant-a`."
msgstr "Importe o  link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/tenant-a-realm.json[tenant-a-realm.json] para criar o realm para o inquilino `tenant-a`."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:355
#, fuzzy
msgid "For more details, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr "Para mais detalhes, consulte a documentação do Keycloak sobre como  link:https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[criar um novo reino]."

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:356
#, fuzzy, no-wrap
msgid "Running and Using the Application"
msgstr "Executar e utilizar a aplicação"

#. type: Title ===
#: upstream/_guides/security-openid-connect-multitenancy.adoc:358
#, fuzzy, no-wrap
msgid "Running in Developer Mode"
msgstr "Executar no modo de desenvolvedor"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:361
#, fuzzy
msgid "To run the microservice in dev mode, use:"
msgstr "Para executar o microsserviço no modo de desenvolvimento, use:"

#. type: Title ===
#: upstream/_guides/security-openid-connect-multitenancy.adoc:364
#, fuzzy, no-wrap
msgid "Running in JVM Mode"
msgstr "Execução no modo JVM"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:367
#, fuzzy
msgid "When you're done playing with dev mode, you can run it as a standard Java application."
msgstr "Quando terminar de brincar com o modo de desenvolvimento, pode executá-lo como uma aplicação Java padrão."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:369
#, fuzzy
msgid "First compile it:"
msgstr "Primeiro, compila-o:"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:373
#, fuzzy
msgid "Then run it:"
msgstr "Em seguida, execute-o:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:377
#, no-wrap
msgid "java -jar target/quarkus-app/quarkus-run.jar\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-multitenancy.adoc:379
#, fuzzy, no-wrap
msgid "Running in Native Mode"
msgstr "Execução em modo nativo"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:382
#, fuzzy
msgid "This same demo can be compiled into native code: no modifications required."
msgstr "Esta mesma demonstração pode ser compilada em código nativo: não são necessárias modificações."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:386
#, fuzzy
msgid "This implies that you no longer need to install a JVM on your production environment, as the runtime technology is included in the produced binary, and optimized to run with minimal resource overhead."
msgstr "Isto implica que já não precisa de instalar uma JVM no seu ambiente de produção, uma vez que a tecnologia de tempo de execução está incluída no binário produzido e optimizada para ser executada com um mínimo de sobrecarga de recursos."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:389
#, fuzzy
msgid "Compilation will take a bit longer, so this step is disabled by default; let's build again by enabling the native build:"
msgstr "A compilação demorará um pouco mais, pelo que este passo está desativado por predefinição; vamos compilar novamente activando a compilação nativa:"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:393
#, fuzzy
msgid "After getting a cup of coffee, you'll be able to run this binary directly:"
msgstr "Depois de tomar uma chávena de café, poderá executar este binário diretamente:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:397
#, no-wrap
msgid "./target/security-openid-connect-multi-tenancy-quickstart-runner\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:399
#, fuzzy, no-wrap
msgid "Test the Application"
msgstr "Testar a aplicação"

#. type: Title ===
#: upstream/_guides/security-openid-connect-multitenancy.adoc:401
#, fuzzy, no-wrap
msgid "Use Dev Services for Keycloak"
msgstr "Utilizar os serviços de desenvolvimento para o Keycloak"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:405
#, fuzzy
msgid "Using xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] is recommended for the integration testing against Keycloak.  `Dev Services for Keycloak` will launch and initialize a test container: it will import configured realms and set a base Keycloak URL for `CustomTenantResolver` used in this quickstart to calculate a realm specific URL."
msgstr "Recomenda-se o uso de Dev  link:security-openid-connect-dev-services.html[Services para Keycloak] para o teste de integração com o Keycloak. `Dev Services for Keycloak` lançará e inicializará um contêiner de teste: importará reinos configurados e definirá um URL básico do Keycloak para `CustomTenantResolver` usado neste início rápido para calcular um URL específico do reino."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:408
#, fuzzy
msgid "First you need to add the following dependencies:"
msgstr "Em primeiro lugar, é necessário adicionar as seguintes dependências:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:427
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-keycloak-server</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.rest-assured</groupId>\n"
"    <artifactId>rest-assured</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>net.sourceforge.htmlunit</groupId>\n"
"    <artifactId>htmlunit</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:435
#, no-wrap
msgid ""
"testImplementation(\"io.quarkus:quarkus-test-keycloak-server\")\n"
"testImplementation(\"io.rest-assured:rest-assured\")\n"
"testImplementation(\"net.sourceforge.htmlunit:htmlunit\")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:439
#, fuzzy
msgid "`quarkus-test-keycloak-server` provides a utility class `io.quarkus.test.keycloak.client.KeycloakTestClient` for acquiring the realm specific access tokens and which you can use with `RestAssured` for testing the `/{tenant}/bearer` endpoint expecting bearer access tokens.  `HtmlUnit` is used for testing the `/{tenant}` endpoint and the authorization code flow."
msgstr "`quarkus-test-keycloak-server` fornece uma classe utilitária `io.quarkus.test.keycloak.client.KeycloakTestClient` para adquirir os tokens de acesso específicos do reino e que pode ser utilizada com `RestAssured` para testar o ponto de extremidade `/{tenant}/bearer` que espera tokens de acesso ao portador. `HtmlUnit` é utilizado para testar o ponto de extremidade `/{tenant}` e o fluxo do código de autorização."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:441
#, fuzzy
msgid "Next, configure the required realms:"
msgstr "Em seguida, configure os reinos necessários:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:456
#, no-wrap
msgid "quarkus.keycloak.devservices.realm-path=default-tenant-realm.json,tenant-a-realm.json\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:459
#, fuzzy
msgid "Finally, write your test which will be executed in JVM mode:"
msgstr "Finalmente, escreva o seu teste que será executado no modo JVM:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:467
#, no-wrap
msgid ""
"import static org.hamcrest.Matchers.containsString;\n"
"import static org.junit.jupiter.api.Assertions.assertEquals;\n"
"import static org.junit.jupiter.api.Assertions.assertTrue;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:469
#, no-wrap
msgid "import java.io.IOException;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:471
#, no-wrap
msgid "import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:476
#, no-wrap
msgid ""
"import com.gargoylesoftware.htmlunit.SilentCssErrorHandler;\n"
"import com.gargoylesoftware.htmlunit.WebClient;\n"
"import com.gargoylesoftware.htmlunit.html.HtmlForm;\n"
"import com.gargoylesoftware.htmlunit.html.HtmlPage;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:480
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.keycloak.client.KeycloakTestClient;\n"
"import io.restassured.RestAssured;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:483
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class CodeFlowTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:485
#, no-wrap
msgid "    KeycloakTestClient keycloakClient = new KeycloakTestClient();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:490
#, no-wrap
msgid ""
"    @Test\n"
"    public void testLogInDefaultTenant() throws IOException {\n"
"        try (final WebClient webClient = createWebClient()) {\n"
"            HtmlPage page = webClient.getPage(\"http://localhost:8081/default\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:492
#, no-wrap
msgid "            assertEquals(\"Sign in to quarkus\", page.getTitleText());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:494
#: upstream/_guides/security-openid-connect-multitenancy.adoc:512
#, no-wrap
msgid "            HtmlForm loginForm = page.getForms().get(0);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:497
#: upstream/_guides/security-openid-connect-multitenancy.adoc:515
#, no-wrap
msgid ""
"            loginForm.getInputByName(\"username\").setValueAttribute(\"alice\");\n"
"            loginForm.getInputByName(\"password\").setValueAttribute(\"alice\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:499
#: upstream/_guides/security-openid-connect-multitenancy.adoc:517
#, no-wrap
msgid "            page = loginForm.getInputByName(\"login\").click();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:503
#, no-wrap
msgid ""
"            assertTrue(page.asText().contains(\"tenant\"));\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:508
#, no-wrap
msgid ""
"    @Test\n"
"    public void testLogInTenantAWebApp() throws IOException {\n"
"        try (final WebClient webClient = createWebClient()) {\n"
"            HtmlPage page = webClient.getPage(\"http://localhost:8081/tenant-a\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:510
#, no-wrap
msgid "            assertEquals(\"Sign in to tenant-a\", page.getTitleText());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:521
#, no-wrap
msgid ""
"            assertTrue(page.asText().contains(\"alice@tenant-a.org\"));\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:527
#, no-wrap
msgid ""
"    @Test\n"
"    public void testLogInTenantABearerToken() throws IOException {\n"
"        RestAssured.given().auth().oauth2(getAccessToken()).when()\n"
"            .get(\"/tenant-a/bearer\").then().body(containsString(\"alice@tenant-a.org\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:531
#, no-wrap
msgid ""
"    private String getAccessToken() {\n"
"        return keycloakClient.getRealmAccessToken(\"tenant-a\", \"alice\", \"alice\", \"multi-tenant-client\", \"secret\");\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:538
#, no-wrap
msgid ""
"    private WebClient createWebClient() {\n"
"        WebClient webClient = new WebClient();\n"
"        webClient.setCssErrorHandler(new SilentCssErrorHandler());\n"
"        return webClient;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:541
#, fuzzy
msgid "and in native mode:"
msgstr "e no modo nativo:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:547
#, no-wrap
msgid "import io.quarkus.test.junit.QuarkusIntegrationTest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:551
#, no-wrap
msgid ""
"@QuarkusIntegrationTest\n"
"public class CodeFlowIT extends CodeFlowTest {\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:554
#, fuzzy
msgid "Please see xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] for more information about the way it is initialized and configured."
msgstr "Consulte  link:security-openid-connect-dev-services.html[Serviços de desenvolvimento para Keycloak] para obter mais informações sobre a forma como é inicializado e configurado."

#. type: Title ===
#: upstream/_guides/security-openid-connect-multitenancy.adoc:555
#, fuzzy, no-wrap
msgid "Use Browser"
msgstr "Utilizar o navegador"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:558
#, fuzzy
msgid "To test the application, you should open your browser and access the following URL:"
msgstr "Para testar a aplicação, deve abrir o seu browser e aceder ao seguinte URL:"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:560
#, fuzzy
msgid "http://localhost:8080/default[http://localhost:8080/default]"
msgstr "link:http://localhost:8080/default[http://localhost:8080/default]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:563
#, fuzzy
msgid "If everything is working as expected, you should be redirected to the Keycloak server to authenticate. Note that the requested path defines a `default` tenant which we don't have mapped in the configuration file. In this case, the default configuration will be used."
msgstr "Se tudo estiver a funcionar como esperado, deverá ser redireccionado para o servidor Keycloak para autenticar. Observe que o caminho solicitado define um locatário `default` que não está mapeado no arquivo de configuração. Nesse caso, será usada a configuração padrão."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:565
#, fuzzy
msgid "In order to authenticate to the application you should type the following credentials when at the Keycloak login page:"
msgstr "Para se autenticar na aplicação, deve introduzir as seguintes credenciais na página de início de sessão do Keycloak:"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:567
#, fuzzy
msgid "Username: *alice*"
msgstr "Nome de utilizador: *alice*"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:568
#, fuzzy
msgid "Password: *alice*"
msgstr "Palavra-passe: *alice*"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:570
#, fuzzy
msgid "After clicking the `Login` button you should be redirected back to the application."
msgstr "Depois de clicar no botão `Login`, deverá ser redireccionado para a aplicação."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:572
#, fuzzy
msgid "If you try now to access the application at the following URL:"
msgstr "Se tentar agora aceder à aplicação no seguinte URL:"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:574
#, fuzzy
msgid "http://localhost:8080/tenant-a[http://localhost:8080/tenant-a]"
msgstr "link:http://localhost:8080/tenant-a[http://localhost:8080/tenant-a]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:576
#, fuzzy
msgid "You should be redirected again to the login page at Keycloak. However, now you are going to authenticate using a different `realm`."
msgstr "Deverá ser novamente redireccionado para a página de início de sessão do Keycloak. No entanto, agora vai autenticar-se utilizando um `realm` diferente."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:579
#, fuzzy
msgid "In both cases, if the user is successfully authenticated, the landing page will show the user's name and e-mail. Even though user `alice` exists in both tenants, for the application they are distinct users belonging to different realms/tenants."
msgstr "Em ambos os casos, se o utilizador for autenticado com êxito, a página de destino mostrará o nome e o correio eletrónico do utilizador. Embora o utilizador `alice` exista em ambos os inquilinos, para a aplicação são utilizadores distintos pertencentes a diferentes domínios/inquilinos."

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:581
#, fuzzy, no-wrap
msgid "Static tenant configuration resolution"
msgstr "Resolução da configuração estática do inquilino"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:585
#, fuzzy
msgid "When you set multiple tenant configurations in the `application.properties` file, you only need to specify how the tenant identifier gets resolved.  To configure the resolution of the tenant identifier, use one of the following options:"
msgstr "Quando você define várias configurações de locatário no arquivo `application.properties`, só precisa especificar como o identificador de locatário é resolvido. Para configurar a resolução do identificador de locatário, use uma das seguintes opções:"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:587
#, fuzzy
msgid "xref:default-tenant-resolver[Default resolution]"
msgstr "link:#default-tenant-resolver[Resolução por defeito]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:588
#, fuzzy
msgid "xref:tenant-resolver[Resolve with `TenantResolver`]"
msgstr "link:#tenant-resolver[Resolver com `TenantResolver`]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:589
#, fuzzy
msgid "xref:annotations-tenant-resolver[Resolve with annotations]"
msgstr "link:#annotations-tenant-resolver[Resolver com anotações]"

#. type: Title ===
#: upstream/_guides/security-openid-connect-multitenancy.adoc:591
#, fuzzy, no-wrap
msgid "Default resolution"
msgstr "Resolução por defeito"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:594
#, fuzzy
msgid "The default resolution for a tenant identifier is convention based, whereby the authentication request must include the tenant identifier in the last segment of the request path."
msgstr "A resolução predefinida para um identificador de inquilino é baseada em convenções, pelo que o pedido de autenticação deve incluir o identificador de inquilino no último segmento do caminho do pedido."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:596
#, fuzzy
msgid "The following `application.properties` example shows how you can configure two tenants named `google` and `github`:"
msgstr "O seguinte exemplo `application.properties` mostra como pode configurar dois inquilinos denominados `google` e `github`:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:604
#, no-wrap
msgid ""
"# Tenant 'google' configuration\n"
"quarkus.oidc.google.provider=google\n"
"quarkus.oidc.google.client-id=${google-client-id}\n"
"quarkus.oidc.google.credentials.secret=${google-client-secret}\n"
"quarkus.oidc.google.authentication.redirect-path=/signed-in\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:610
#, no-wrap
msgid ""
"# Tenant 'github' configuration\n"
"quarkus.oidc.github.provider=google\n"
"quarkus.oidc.github.client-id=${github-client-id}\n"
"quarkus.oidc.github.credentials.secret=${github-client-secret}\n"
"quarkus.oidc.github.authentication.redirect-path=/signed-in\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:614
#, fuzzy
msgid "In this example, both tenants configure OIDC `web-app` applications to use an authorization code flow to authenticate users and also require session cookies to get generated after the authentication has taken place.  After either Google or GitHub authenticates the current user, the user gets returned to the `/signed-in` area for authenticated users, for example, a secured resource path on the JAX-RS endpoint."
msgstr "Neste exemplo, ambos os locatários configuram os aplicativos OIDC `web-app` para usar um fluxo de código de autorização para autenticar usuários e também exigem que os cookies de sessão sejam gerados após a autenticação. Depois de o Google ou o GitHub autenticarem o utilizador atual, este é reencaminhado para a área `/signed-in` para utilizadores autenticados, por exemplo, um caminho de recurso seguro no ponto de extremidade JAX-RS."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:616
#, fuzzy
msgid "Finally, to complete the default tenant resolution, set the following configuration property:"
msgstr "Por fim, para concluir a resolução do locatário predefinido, defina a seguinte propriedade de configuração:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:621
#, no-wrap
msgid ""
"quarkus.http.auth.permission.login.paths=/google,/github\n"
"quarkus.http.auth.permission.login.policy=authenticated\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:626
#, fuzzy
msgid "If the endpoint is running on `http://localhost:8080`, you can also provide UI options for users to log in to either `http://localhost:8080/google` or `http://localhost:8080/github`, without having to add specific`/google` or `/github` JAX-RS resource paths.  Tenant identifiers are also recorded in the session cookie names after the authentication is completed.  Therefore, authenticated users can access the secured application area without requiring either the `google` or `github` path values to be included in the secured URL."
msgstr "Se o ponto final estiver a ser executado em `&lt;a href=\"http://localhost:8080\" class=\"bare\"&gt;http://localhost:8080&lt;/a&gt;`também pode fornecer opções de IU para os utilizadores iniciarem sessão em `&lt;a href=\"http://localhost:8080/google\" class=\"bare\"&gt;http://localhost:8080/google&lt;/a&gt;` ou `&lt;a href=\"http://localhost:8080/github\" class=\"bare\"&gt;http://localhost:8080/github&lt;/a&gt;`sem ter de adicionar caminhos de recursos específicos`/google` ou `/github` JAX-RS. Os identificadores de locatário também são registados nos nomes dos cookies de sessão após a conclusão da autenticação. Por conseguinte, os utilizadores autenticados podem aceder à área segura da aplicação sem necessitarem que os valores de caminho `google` ou `github` sejam incluídos no URL seguro."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:628
#, fuzzy
msgid "Default resolution can also work for Bearer token authentication but it might be less practical in this case because a tenant identifier will always need to be set as the last path segment value."
msgstr "A resolução predefinida também pode funcionar para a autenticação de token Bearer, mas pode ser menos prática neste caso porque um identificador de inquilino terá sempre de ser definido como o último valor do segmento de caminho."

#. type: Title ===
#: upstream/_guides/security-openid-connect-multitenancy.adoc:630
#, fuzzy, no-wrap
msgid "Resolve with `TenantResolver`"
msgstr "Resolver com `TenantResolver`"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:633
#, fuzzy
msgid "The following `application.properties` example shows how you can resolve the tenant identifier of two tenants named `a` and `b` by using the `TenantResolver` method:"
msgstr "O seguinte exemplo `application.properties` mostra como pode resolver o identificador de inquilino de dois inquilinos denominados `a` e `b` utilizando o método `TenantResolver`:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:640
#, no-wrap
msgid ""
"# Tenant 'a' configuration\n"
"quarkus.oidc.a.auth-server-url=http://localhost:8180/realms/quarkus-a\n"
"quarkus.oidc.a.client-id=client-a\n"
"quarkus.oidc.a.credentials.secret=client-a-secret\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:645
#, no-wrap
msgid ""
"# Tenant 'b' configuration\n"
"quarkus.oidc.b.auth-server-url=http://localhost:8180/realms/quarkus-b\n"
"quarkus.oidc.b.client-id=client-b\n"
"quarkus.oidc.b.credentials.secret=client-b-secret\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:648
#, fuzzy
msgid "You can return the tenant ID of either `a` or `b` from `quarkus.oidc.TenantResolver`:"
msgstr "É possível devolver o ID do inquilino de `a` ou `b` a partir de `quarkus.oidc.TenantResolver`:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:652
#, no-wrap
msgid "import quarkus.oidc.TenantResolver;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:668
#, no-wrap
msgid ""
"    @Override\n"
"    public String resolve(RoutingContext context) {\n"
"        String path = context.request().path();\n"
"        if (path.endsWith(\"a\")) {\n"
"            return \"a\";\n"
"        } else if (path.endsWith(\"b\")) {\n"
"            return \"b\";\n"
"        } else {\n"
"            // default tenant\n"
"            return null;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:671
#, fuzzy
msgid "In this example, the value of the last request path segment is a tenant ID, but if required, you can implement a more complex tenant identifier resolution logic."
msgstr "Neste exemplo, o valor do último segmento do caminho do pedido é um ID de locatário, mas, se necessário, é possível implementar uma lógica de resolução de identificador de locatário mais complexa."

#. type: Title ===
#: upstream/_guides/security-openid-connect-multitenancy.adoc:673
#, fuzzy, no-wrap
msgid "Resolve with annotations"
msgstr "Resolver com anotações"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:676
#, fuzzy
msgid "You can use the `io.quarkus.oidc.Tenant` annotation for resolving the tenant identifiers as an alternative to using `io.quarkus.oidc.TenantResolver`."
msgstr "É possível utilizar a anotação `io.quarkus.oidc.Tenant` para resolver os identificadores de locatários como alternativa à utilização de `io.quarkus.oidc.TenantResolver`."

#. type: delimited block =
#: upstream/_guides/security-openid-connect-multitenancy.adoc:680
#, fuzzy
msgid "Proactive HTTP authentication must be disabled (`quarkus.http.auth.proactive=false`) for this to work. For more information, see xref:security-proactive-authentication.adoc[Proactive authentication]."
msgstr "A autenticação HTTP proactiva tem de estar desactivada ( `quarkus.http.auth.proactive=false`) para que isto funcione. Para mais informações, consulte  link:security-proactive-authentication.html[Autenticação proactiva]."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:685
#, fuzzy
msgid "Assuming your application supports two OIDC tenants (`hr`, and default), all resource methods and classes carrying `@Tenant(\"hr\")` will be authenticated using the OIDC provider configured by `quarkus.oidc.hr.auth-server-url`, while all other classes and methods will still be authenticated using the default OIDC provider."
msgstr "Supondo que a sua aplicação suporta dois inquilinos OIDC ( `hr`, e predefinido), todos os métodos e classes de recursos que transportam `@Tenant(\"hr\")` serão autenticados utilizando o fornecedor OIDC configurado por `quarkus.oidc.hr.auth-server-url`, enquanto todas as outras classes e métodos continuarão a ser autenticados utilizando o fornecedor OIDC predefinido."

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:692
#, no-wrap
msgid ""
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:695
#, no-wrap
msgid ""
"import io.quarkus.oidc.Tenant;\n"
"import io.quarkus.security.Authenticated;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:699
#, no-wrap
msgid ""
"@Authenticated\n"
"@Path(\"/api/hello\")\n"
"public class HelloResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:707
#, no-wrap
msgid ""
"    @Tenant(\"hr\") <1>\n"
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String sayHello() {\n"
"        return \"Hello!\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:709
#, fuzzy
msgid "The `io.quarkus.oidc.Tenant` annotation must be placed either on resource class or resource method."
msgstr "A anotação `io.quarkus.oidc.Tenant` deve ser colocada na classe de recurso ou no método de recurso."

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:711
#, fuzzy, no-wrap
msgid "Dynamic tenant configuration resolution"
msgstr "Resolução dinâmica da configuração do inquilino"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:715
#, fuzzy
msgid "If you need a more dynamic configuration for the different tenants you want to support and don't want to end up with multiple entries in your configuration file, you can use the `io.quarkus.oidc.TenantConfigResolver`."
msgstr "Se precisar de uma configuração mais dinâmica para os diferentes inquilinos que pretende suportar e não quiser acabar com várias entradas no seu ficheiro de configuração, pode utilizar o `io.quarkus.oidc.TenantConfigResolver`."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:717
#, fuzzy
msgid "This interface allows you to dynamically create tenant configurations at runtime:"
msgstr "Esta interface permite-lhe criar dinamicamente configurações de locatários em tempo de execução:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:721
#, no-wrap
msgid "package io.quarkus.it.keycloak;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:724
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import java.util.function.Supplier;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:730
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import io.quarkus.oidc.OidcRequestContext;\n"
"import io.quarkus.oidc.OidcTenantConfig;\n"
"import io.quarkus.oidc.TenantConfigResolver;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:733
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomTenantConfigResolver implements TenantConfigResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:738
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<OidcTenantConfig> resolve(RoutingContext context, OidcRequestContext<OidcTenantConfig> requestContext) {\n"
"        String path = context.request().path();\n"
"        String[] parts = path.split(\"/\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:749
#, no-wrap
msgid ""
"        if (\"tenant-c\".equals(parts[1])) {\n"
"            // Do 'return requestContext.runBlocking(createTenantConfig());'\n"
"            // if a blocking call is required to create a tenant config\n"
"            return Uni.createFromItem(createTenantConfig());\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:753
#, no-wrap
msgid ""
"        // resolve to default tenant configuration\n"
"        return null;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:756
#, no-wrap
msgid ""
"    private Supplier<OidcTenantConfig> createTenantConfig() {\n"
"        final OidcTenantConfig config = new OidcTenantConfig();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:761
#, no-wrap
msgid ""
"        config.setTenantId(\"tenant-c\");\n"
"        config.setAuthServerUrl(\"http://localhost:8180/realms/tenant-c\");\n"
"        config.setClientId(\"multi-tenant-client\");\n"
"        OidcTenantConfig.Credentials credentials = new OidcTenantConfig.Credentials();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:763
#, no-wrap
msgid "        credentials.setSecret(\"my-secret\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:765
#, no-wrap
msgid "        config.setCredentials(credentials);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:767
#, no-wrap
msgid "        // any other setting support by the quarkus-oidc extension\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:771
#, no-wrap
msgid ""
"        return () -> config;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:774
#, fuzzy
msgid "The `OidcTenantConfig` returned from this method is the same used to parse the `oidc` namespace configuration from the `application.properties`. You can populate it using any of the settings supported by the `quarkus-oidc` extension."
msgstr "O `OidcTenantConfig` devolvido por este método é o mesmo utilizado para analisar a configuração do espaço de nomes `oidc` a partir do `application.properties`. Pode preenchê-lo utilizando qualquer uma das definições suportadas pela extensão `quarkus-oidc`."

#. type: Title ===
#: upstream/_guides/security-openid-connect-multitenancy.adoc:775
#, fuzzy, no-wrap
msgid "Tenant resolution for OIDC `web-app` applications"
msgstr "Resolução de inquilinos para aplicações OIDC `web-app`"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:778
#, fuzzy
msgid "The simplest option for resolving OIDC `web-app` application configuration is to follow the steps described in the xref:default-tenant-resolver[Default resolution] section."
msgstr "A opção mais simples para resolver a configuração da aplicação OIDC `web-app` é seguir os passos descritos na secção  link:#default-tenant-resolver[Resolução por defeito]."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:780
#, fuzzy
msgid "Try one of the options suggested below if the default resolution strategy does not work for your application setup."
msgstr "Experimente uma das opções sugeridas abaixo se a estratégia de resolução predefinida não funcionar para a configuração da sua aplicação."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:782
#, fuzzy
msgid "Several options are available for selecting the tenant configuration which should be used to secure the current HTTP request for both `service` and `web-app` OIDC applications, such as:"
msgstr "Estão disponíveis várias opções para selecionar a configuração do inquilino que deve ser utilizada para proteger o pedido HTTP atual para as aplicações `service` e `web-app` OIDC, tais como"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:784
#, fuzzy
msgid "Check URL paths, for example, a `tenant-service` configuration has to be used for the \"/service\" paths, while a `tenant-manage` configuration - for the \"/management\" paths"
msgstr "Verifique os caminhos URL, por exemplo, uma configuração `tenant-service` tem de ser utilizada para os caminhos \"/service\", enquanto uma configuração `tenant-manage` - para os caminhos \"/management\""

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:785
#, fuzzy
msgid "Check HTTP headers, for example, with a URL path always being '/service', a header such as \"Realm: service\" or \"Realm: management\" can help to select between the `tenant-service` and `tenant-manage` configurations"
msgstr "Verifique os cabeçalhos HTTP, por exemplo, com um caminho URL sempre a ser '/service', um cabeçalho como \"Realm: service\" ou \"Realm: management\" pode ajudar a selecionar entre as configurações `tenant-service` e `tenant-manage`"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:786
#, fuzzy
msgid "Check URL query parameters - it can work similarly to the way the headers are used to select the tenant configuration"
msgstr "Verificar os parâmetros de consulta do URL - pode funcionar de forma semelhante à forma como os cabeçalhos são utilizados para selecionar a configuração do inquilino"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:788
#, fuzzy
msgid "All these options can be easily implemented with the custom `TenantResolver` and `TenantConfigResolver` implementations for the OIDC `service` applications."
msgstr "Todas estas opções podem ser facilmente implementadas com as implementações personalizadas `TenantResolver` e `TenantConfigResolver` para as aplicações OIDC `service`."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:790
#, fuzzy
msgid "However, due to an HTTP redirect required to complete the code authentication flow for the OIDC `web-app` applications, a custom HTTP cookie may be needed to select the same tenant configuration before and after this redirect request because:"
msgstr "No entanto, devido a um redireccionamento HTTP necessário para completar o fluxo de autenticação de código para as aplicações OIDC `web-app`, pode ser necessário um cookie HTTP personalizado para selecionar a mesma configuração de inquilino antes e depois deste pedido de redireccionamento:"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:792
#, fuzzy
msgid "URL path may not be the same after the redirect request if a single redirect URL has been registered in the OIDC Provider - the original request path can be restored but after the tenant configuration is resolved"
msgstr "O caminho do URL pode não ser o mesmo após o pedido de redireccionamento se um único URL de redireccionamento tiver sido registado no fornecedor OIDC - o caminho original do pedido pode ser restaurado, mas depois de a configuração do locatário ser resolvida"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:793
#, fuzzy
msgid "HTTP headers used during the original request are not available after the redirect"
msgstr "Os cabeçalhos HTTP utilizados durante o pedido original não estão disponíveis após o redireccionamento"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:794
#, fuzzy
msgid "Custom URL query parameters are restored after the redirect but after the tenant configuration is resolved"
msgstr "Os parâmetros de consulta de URL personalizados são restaurados após o redireccionamento, mas depois de a configuração do inquilino ser resolvida"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:796
#, fuzzy
msgid "One option to ensure the information for resolving the tenant configurations for `web-app` applications is available before and after the redirect is to use a cookie, for example:"
msgstr "Uma opção para garantir que as informações para resolver as configurações do inquilino para aplicações `web-app` estão disponíveis antes e depois do redireccionamento é utilizar um cookie, por exemplo:"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:802
#, no-wrap
msgid "import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:808
#, no-wrap
msgid ""
"import io.quarkus.oidc.TenantResolver;\n"
"import io.vertx.core.http.Cookie;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:822
#, no-wrap
msgid ""
"    @Override\n"
"    public String resolve(RoutingContext context) {\n"
"        List<String> tenantIdQuery = context.queryParam(\"tenantId\");\n"
"        if (!tenantIdQuery.isEmpty()) {\n"
"            String tenantId = tenantIdQuery.get(0);\n"
"            context.addCookie(Cookie.cookie(\"tenant\", tenantId));\n"
"            return tenantId;\n"
"        } else if (context.cookieMap().containsKey(\"tenant\")) {\n"
"            return context.getCookie(\"tenant\").getValue();\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-multitenancy.adoc:826
#, no-wrap
msgid ""
"        return null;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:829
#, fuzzy, no-wrap
msgid "Disabling Tenant Configurations"
msgstr "Desativação das configurações do locatário"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:832
#, fuzzy
msgid "Custom `TenantResolver` and `TenantConfigResolver` implementations may return `null` if no tenant can be inferred from the current request and a fallback to the default tenant configuration is required."
msgstr "As implementações personalizadas de `TenantResolver` e `TenantConfigResolver` podem devolver `null` se não for possível inferir nenhum locatário a partir do pedido atual e se for necessária uma retroação para a configuração predefinida do locatário."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:834
#, fuzzy
msgid "If you expect that the custom resolvers will always infer a tenant then you do not need to configure the default tenant resolution."
msgstr "Se espera que os resolvedores personalizados inferam sempre um inquilino, não precisa de configurar a resolução de inquilino predefinida."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:836
#, fuzzy
msgid "To disable the default tenant configuration, set `quarkus.oidc.tenant-enabled=false`."
msgstr "Para desativar a configuração predefinida do inquilino, defina `quarkus.oidc.tenant-enabled=false`."

#. type: delimited block =
#: upstream/_guides/security-openid-connect-multitenancy.adoc:840
#, fuzzy
msgid "The default tenant configuration is automatically disabled when `quarkus.oidc.auth-server-url` is not configured but either custom tenant configurations are available or `TenantConfigResolver` is registered."
msgstr "A configuração de inquilino predefinida é automaticamente desactivada quando `quarkus.oidc.auth-server-url` não está configurado, mas estão disponíveis configurações de inquilino personalizadas ou `TenantConfigResolver` está registado."

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:843
#, fuzzy
msgid "Note that tenant specific configurations can also be disabled, for example: `quarkus.oidc.tenant-a.tenant-enabled=false`."
msgstr "Note-se que as configurações específicas do locatário também podem ser desactivadas, por exemplo: `quarkus.oidc.tenant-a.tenant-enabled=false`."

#. type: Title ==
#: upstream/_guides/security-openid-connect-multitenancy.adoc:844
#, fuzzy, no-wrap
msgid "References"
msgstr "Referências"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:847
#, fuzzy
msgid "xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties]"
msgstr "link:security-oidc-configuration-properties-reference.html[Propriedades de configuração do OIDC]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:848
#, fuzzy
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr "link:https://www.keycloak.org/documentation.html[Documentação do Keycloak]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:849
#, fuzzy
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr "link:https://openid.net/connect/[Ligação OpenID]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:850
#, fuzzy
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr "link:https://tools.ietf.org/html/rfc7519[Token Web JSON]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:851
#, fuzzy
msgid "https://developers.google.com/identity/protocols/OpenIDConnect[Google OpenID Connect]"
msgstr "link:https://developers.google.com/identity/protocols/OpenIDConnect[Conexão OpenID do Google]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-multitenancy.adoc:851
#, fuzzy
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "link:security-overview.html[Visão geral do Quarkus Security]"
