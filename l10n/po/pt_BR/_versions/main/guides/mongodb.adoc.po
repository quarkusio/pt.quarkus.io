# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-22 08:05+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/mongodb.adoc:6
#, no-wrap
msgid "Using the MongoDB Client"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:14
msgid "MongoDB is a well known NoSQL Database that is widely used."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:16
msgid "In this guide, we see how you can get your REST services to use the MongoDB database."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb.adoc:17
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:21
msgid "MongoDB installed or Docker installed"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb.adoc:22
#, no-wrap
msgid "Architecture"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:25
msgid "The application built in this guide is quite simple: the user can add elements in a list using a form and the list is updated."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:27
msgid "All the information between the browser and the server is formatted as JSON."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:29
msgid "The elements are stored in MongoDB."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb.adoc:30
#, no-wrap
msgid "Solution"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:34
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "Recomendamos que siga as instruções nas seções seguintes e crie a aplicação passo a passo. No entanto, você pode ir diretamente para o exemplo completo."

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:36
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:38
msgid "The solution is located in the `mongodb-quickstart` link:{quickstarts-tree-url}/mongodb-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb.adoc:39
#, no-wrap
msgid "Creating the Maven project"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:42
msgid "First, we need a new project. Create a new project with the following command:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:49
msgid "This command generates a Maven structure importing the RESTEasy Reactive Jackson and MongoDB Client extensions.  After this, the `quarkus-mongodb-client` extension has been added to your build file."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:52
msgid "If you already have your Quarkus project configured, you can add the `mongodb-client` extension to your project by running the following command in your project base directory:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:57
msgid "This will add the following to your `pom.xml`:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/mongodb.adoc:59
#: upstream/_versions/main/guides/mongodb.adoc:668
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:65
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-mongodb-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/mongodb.adoc:68
#: upstream/_versions/main/guides/mongodb.adoc:677
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:71
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-mongodb-client\")\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb.adoc:73
#, no-wrap
msgid "Creating your first JSON REST service"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:76
msgid "In this example, we will create an application to manage a list of fruits."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:78
msgid "First, let's create the `Fruit` bean as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:82
#: upstream/_versions/main/guides/mongodb.adoc:148
#: upstream/_versions/main/guides/mongodb.adoc:350
#: upstream/_versions/main/guides/mongodb.adoc:394
#: upstream/_versions/main/guides/mongodb.adoc:540
#, no-wrap
msgid "package org.acme.mongodb;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:84
#, no-wrap
msgid "import java.util.Objects;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:86
#, no-wrap
msgid "public class Fruit {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:90
#, no-wrap
msgid ""
"    private String name;\n"
"    private String description;\n"
"    private String id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:93
#, no-wrap
msgid ""
"    public Fruit() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:98
#, no-wrap
msgid ""
"    public Fruit(String name, String description) {\n"
"        this.name = name;\n"
"        this.description = description;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:102
#, no-wrap
msgid ""
"    public String getName() {\n"
"        return name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:106
#, no-wrap
msgid ""
"    public void setName(String name) {\n"
"        this.name = name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:110
#, no-wrap
msgid ""
"    public String getDescription() {\n"
"        return description;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:114
#, no-wrap
msgid ""
"    public void setDescription(String description) {\n"
"        this.description = description;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:120
#, no-wrap
msgid ""
"    @Override\n"
"    public boolean equals(Object obj) {\n"
"        if (!(obj instanceof Fruit)) {\n"
"            return false;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:122
#, no-wrap
msgid "        Fruit other = (Fruit) obj;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:125
#, no-wrap
msgid ""
"        return Objects.equals(other.name, this.name);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:130
#, no-wrap
msgid ""
"    @Override\n"
"    public int hashCode() {\n"
"        return Objects.hash(this.name);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:134
#, no-wrap
msgid ""
"    public void setId(String id) {\n"
"        this.id = id;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:139
#, no-wrap
msgid ""
"    public String getId() {\n"
"        return id;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:142
msgid "Nothing fancy. One important thing to note is that having a default constructor is required by the JSON serialization layer."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:144
msgid "Now create a `org.acme.mongodb.FruitService` that will be the business layer of our application and store/load the fruits from the mongoDB database."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:153
#, no-wrap
msgid ""
"import com.mongodb.client.MongoClient;\n"
"import com.mongodb.client.MongoCollection;\n"
"import com.mongodb.client.MongoCursor;\n"
"import org.bson.Document;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:158
#: upstream/_versions/main/guides/mongodb.adoc:549
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.inject.Inject;\n"
"import java.util.ArrayList;\n"
"import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:161
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class FruitService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:163
#: upstream/_versions/main/guides/mongodb.adoc:554
#, no-wrap
msgid "    @Inject MongoClient mongoClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:167
#, no-wrap
msgid ""
"    public List<Fruit> list(){\n"
"        List<Fruit> list = new ArrayList<>();\n"
"        MongoCursor<Document> cursor = getCollection().find().iterator();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:181
#, no-wrap
msgid ""
"        try {\n"
"            while (cursor.hasNext()) {\n"
"                Document document = cursor.next();\n"
"                Fruit fruit = new Fruit();\n"
"                fruit.setName(document.getString(\"name\"));\n"
"                fruit.setDescription(document.getString(\"description\"));\n"
"                list.add(fruit);\n"
"            }\n"
"        } finally {\n"
"            cursor.close();\n"
"        }\n"
"        return list;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:188
#, no-wrap
msgid ""
"    public void add(Fruit fruit){\n"
"        Document document = new Document()\n"
"                .append(\"name\", fruit.getName())\n"
"                .append(\"description\", fruit.getDescription());\n"
"        getCollection().insertOne(document);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:193
#, no-wrap
msgid ""
"    private MongoCollection getCollection(){\n"
"        return mongoClient.getDatabase(\"fruit\").getCollection(\"fruit\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:196
msgid "Now, create the `org.acme.mongodb.FruitResource` class as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:201
#, no-wrap
msgid ""
"@Path(\"/fruits\")\n"
"public class FruitResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:203
#, no-wrap
msgid "    @Inject FruitService fruitService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:208
#, no-wrap
msgid ""
"    @GET\n"
"    public List<Fruit> list() {\n"
"        return fruitService.list();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:215
#, no-wrap
msgid ""
"    @POST\n"
"    public List<Fruit> add(Fruit fruit) {\n"
"        fruitService.add(fruit);\n"
"        return list();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:218
msgid "The implementation is pretty straightforward, and you just need to define your endpoints using the Jakarta REST annotations and use the `FruitService` to list/add new fruits."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb.adoc:219
#, no-wrap
msgid "Configuring the MongoDB database"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:221
msgid "The main property to configure is the URL to access to MongoDB. Almost all configuration can be included in the connection URI, so we advise you to do so. You can find more information in the MongoDB documentation: https://docs.mongodb.com/manual/reference/connection-string/"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:223
msgid "A sample configuration should look like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:228
#, no-wrap
msgid ""
"# configure the mongoDB client for a replica set of two nodes\n"
"quarkus.mongodb.connection-string = mongodb://mongo1:27017,mongo2:27017\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:231
msgid "In this example, we are using a single instance running on localhost:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:236
#, no-wrap
msgid ""
"# configure the mongoDB client for a single instance on localhost\n"
"quarkus.mongodb.connection-string = mongodb://localhost:27017\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:239
msgid "If you need more configuration properties, there is a full list at the end of this guide."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:242
msgid "By default, Quarkus will restrict the use of JNDI within an application, as a precaution to try and mitigate any future vulnerabilities similar to Log4Shell.  Because the `mongo+srv` protocol often used to connect to MongoDB requires JNDI, this protection is automatically disabled when using the MongoDB client extension."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/mongodb.adoc:244
#, no-wrap
msgid "Dev Services (Configuration Free Databases)"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:249
msgid "Quarkus supports a feature called Dev Services that allows you to create various datasources without any config. In the case of MongoDB this support extends to the default MongoDB connection.  What that means practically, is that if you have not configured `quarkus.mongodb.connection-string`, Quarkus will automatically start a MongoDB container when running tests or in dev mode, and automatically configure the connection."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:251
msgid "MongoDB Dev Services is based on link:https://www.testcontainers.org/modules/databases/mongodb/[Testcontainers MongoDB module] that will start a single node replicaset."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:254
msgid "When running the production version of the application, the MongoDB connection need to be configured as normal, so if you want to include a production database config in your `application.properties` and continue to use Dev Services we recommend that you use the `%prod.` profile to define your MongoDB settings."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb.adoc:257
#, no-wrap
msgid "Multiple MongoDB Clients"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:261
msgid "MongoDB allows you to configure multiple clients.  Using several clients works the same way as having a single client."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:265
#, no-wrap
msgid "quarkus.mongodb.connection-string = mongodb://login:pass@mongo1:27017/database\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:268
#, no-wrap
msgid ""
"quarkus.mongodb.users.connection-string = mongodb://mongo2:27017/userdb\n"
"quarkus.mongodb.inventory.connection-string = mongodb://mongo3:27017/invdb,mongo4:27017/invdb\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:273
msgid "Notice there's an extra bit in the key (the `users` and `inventory` segments).  The syntax is as follows: `quarkus.mongodb.[optional name.][mongo connection property]`.  If the name is omitted, it configures the default client."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb.adoc:280
msgid "The use of multiple MongoDB clients enables multi-tenancy for MongoDB by allowing to connect to multiple MongoDB clusters. + If you want to connect to multiple databases inside the same cluster, multiple clients are **not** necessary as a single client is able to access all databases in the same cluster (as a JDBC connection is able to access to multiple schemas inside the same database)."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/mongodb.adoc:282
#, no-wrap
msgid "Named Mongo client Injection"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:286
msgid "When using multiple clients, each `MongoClient`, you can select the client to inject using the `io.quarkus.mongodb.MongoClientName` qualifier.  Using the above properties to configure three different clients, you can also inject each one as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:291
#, no-wrap
msgid ""
"@Inject\n"
"MongoClient defaultMongoClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:295
#, no-wrap
msgid ""
"@Inject\n"
"@MongoClientName(\"users\")\n"
"MongoClient mongoClient1;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:299
#, no-wrap
msgid ""
"@Inject\n"
"@MongoClientName(\"inventory\")\n"
"ReactiveMongoClient mongoClient2;\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb.adoc:301
#, no-wrap
msgid "Running a MongoDB Database"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:303
msgid "As by default, `MongoClient` is configured to access a local MongoDB database on port 27017 (the default MongoDB port), if you have a local running database on this port, there is nothing more to do before being able to test it!"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:305
msgid "If you want to use Docker to run a MongoDB database, you can use the following command to launch one:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:308
#, no-wrap
msgid "docker run -ti --rm -p 27017:27017 mongo:4.4\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb.adoc:313
msgid "If you use xref:dev-services[Dev Services], launching the container manually is not necessary."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb.adoc:316
#, no-wrap
msgid "Creating a frontend"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:321
msgid "Now let's add a simple web page to interact with our `FruitResource`.  Quarkus automatically serves static resources located under the `META-INF/resources` directory.  In the `src/main/resources/META-INF/resources` directory, add a `fruits.html` file with the content from this link:{quickstarts-blob-url}/mongodb-quickstart/src/main/resources/META-INF/resources/fruits.html[fruits.html] file in it."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:323
msgid "You can now interact with your REST service:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:327
msgid "start Quarkus with:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:330
msgid "open a browser to `http://localhost:8080/fruits.html`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:331
msgid "add new fruits to the list via the form"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb.adoc:335
#, no-wrap
msgid "Reactive MongoDB Client"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:339
msgid "A reactive MongoDB Client is included in Quarkus.  Using it is as easy as using the classic MongoDB Client.  You can rewrite the previous example to use it like the following."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/mongodb.adoc:341
#, no-wrap
msgid "Mutiny"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb.adoc:345
msgid "The MongoDB reactive client uses Mutiny reactive types.  If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:355
#, no-wrap
msgid ""
"import io.quarkus.mongodb.reactive.ReactiveMongoClient;\n"
"import io.quarkus.mongodb.reactive.ReactiveMongoCollection;\n"
"import io.smallrye.mutiny.Uni;\n"
"import org.bson.Document;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:359
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.inject.Inject;\n"
"import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:362
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class ReactiveFruitService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:365
#, no-wrap
msgid ""
"    @Inject\n"
"    ReactiveMongoClient mongoClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:375
#, no-wrap
msgid ""
"    public Uni<List<Fruit>> list() {\n"
"        return getCollection().find()\n"
"                .map(doc -> {\n"
"                    Fruit fruit = new Fruit();\n"
"                    fruit.setName(doc.getString(\"name\"));\n"
"                    fruit.setDescription(doc.getString(\"description\"));\n"
"                    return fruit;\n"
"                }).collect().asList();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:383
#, no-wrap
msgid ""
"    public Uni<Void> add(Fruit fruit) {\n"
"        Document document = new Document()\n"
"                .append(\"name\", fruit.getName())\n"
"                .append(\"description\", fruit.getDescription());\n"
"        return getCollection().insertOne(document)\n"
"                .onItem().ignore().andContinueWithNull();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:388
#, no-wrap
msgid ""
"    private ReactiveMongoCollection<Document> getCollection() {\n"
"        return mongoClient.getDatabase(\"fruit\").getCollection(\"fruit\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:396
#, no-wrap
msgid "import io.smallrye.mutiny.Uni;\n"
msgstr "import io.smallrye.mutiny.Uni;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:398
#, no-wrap
msgid "import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:406
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.Consumes;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.POST;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:411
#, no-wrap
msgid ""
"@Path(\"/reactive_fruits\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"public class ReactiveFruitResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:414
#, no-wrap
msgid ""
"    @Inject\n"
"    ReactiveFruitService fruitService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:419
#, no-wrap
msgid ""
"    @GET\n"
"    public Uni<List<Fruit>> list() {\n"
"        return fruitService.list();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:426
#, no-wrap
msgid ""
"    @POST\n"
"    public Uni<List<Fruit>> add(Fruit fruit) {\n"
"        return fruitService.add(fruit)\n"
"                .onItem().ignore().andSwitchTo(this::list);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb.adoc:428
#, no-wrap
msgid "Simplifying MongoDB Client usage using BSON codec"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:431
msgid "By using a Bson `Codec`, the MongoDB Client will take care of the transformation of your domain object to/from a MongoDB `Document` automatically."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:435
msgid "First you need to create a Bson `Codec` that will tell Bson how to transform your entity to/from a MongoDB `Document`.  Here we use a `CollectibleCodec` as our object is retrievable from the database (it has a MongoDB identifier), if not we would have used a `Codec` instead.  More information in the codec documentation: https://www.mongodb.com/docs/drivers/java/sync/current/fundamentals/data-formats/codecs/."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:439
#: upstream/_versions/main/guides/mongodb.adoc:513
#, no-wrap
msgid "package org.acme.mongodb.codec;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:451
#, no-wrap
msgid ""
"import com.mongodb.MongoClientSettings;\n"
"import org.acme.mongodb.Fruit;\n"
"import org.bson.Document;\n"
"import org.bson.BsonWriter;\n"
"import org.bson.BsonValue;\n"
"import org.bson.BsonReader;\n"
"import org.bson.BsonString;\n"
"import org.bson.codecs.Codec;\n"
"import org.bson.codecs.CollectibleCodec;\n"
"import org.bson.codecs.DecoderContext;\n"
"import org.bson.codecs.EncoderContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:453
#, no-wrap
msgid "import java.util.UUID;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:455
#, no-wrap
msgid "public class FruitCodec implements CollectibleCodec<Fruit> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:457
#, no-wrap
msgid "    private final Codec<Document> documentCodec;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:461
#, no-wrap
msgid ""
"    public FruitCodec() {\n"
"        this.documentCodec = MongoClientSettings.getDefaultCodecRegistry().get(Document.class);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:469
#, no-wrap
msgid ""
"    @Override\n"
"    public void encode(BsonWriter writer, Fruit fruit, EncoderContext encoderContext) {\n"
"        Document doc = new Document();\n"
"        doc.put(\"name\", fruit.getName());\n"
"        doc.put(\"description\", fruit.getDescription());\n"
"        documentCodec.encode(writer, doc, encoderContext);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:474
#, no-wrap
msgid ""
"    @Override\n"
"    public Class<Fruit> getEncoderClass() {\n"
"        return Fruit.class;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:482
#, no-wrap
msgid ""
"    @Override\n"
"    public Fruit generateIdIfAbsentFromDocument(Fruit document) {\n"
"        if (!documentHasId(document)) {\n"
"            document.setId(UUID.randomUUID().toString());\n"
"        }\n"
"        return document;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:487
#, no-wrap
msgid ""
"    @Override\n"
"    public boolean documentHasId(Fruit document) {\n"
"        return document.getId() != null;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:492
#, no-wrap
msgid ""
"    @Override\n"
"    public BsonValue getDocumentId(Fruit document) {\n"
"        return new BsonString(document.getId());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:505
#, no-wrap
msgid ""
"    @Override\n"
"    public Fruit decode(BsonReader reader, DecoderContext decoderContext) {\n"
"        Document document = documentCodec.decode(reader, decoderContext);\n"
"        Fruit fruit = new Fruit();\n"
"        if (document.getString(\"id\") != null) {\n"
"            fruit.setId(document.getString(\"id\"));\n"
"        }\n"
"        fruit.setName(document.getString(\"name\"));\n"
"        fruit.setDescription(document.getString(\"description\"));\n"
"        return fruit;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:509
msgid "Then you need to create a `CodecProvider` to link this `Codec` to the `Fruit` class."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:518
#, no-wrap
msgid ""
"import org.acme.mongodb.Fruit;\n"
"import org.bson.codecs.Codec;\n"
"import org.bson.codecs.configuration.CodecProvider;\n"
"import org.bson.codecs.configuration.CodecRegistry;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:527
#, no-wrap
msgid ""
"public class FruitCodecProvider implements CodecProvider {\n"
"    @Override\n"
"    public <T> Codec<T> get(Class<T> clazz, CodecRegistry registry) {\n"
"        if (clazz.equals(Fruit.class)) {\n"
"            return (Codec<T>) new FruitCodec();\n"
"        }\n"
"        return null;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:529
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:532
msgid "Quarkus takes care of registering the `CodecProvider` for you as a CDI bean of `@Singleton` scope."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:534
msgid "Finally, when getting the `MongoCollection` from the database you can use directly the `Fruit` class instead of the `Document` one, the codec will automatically map the `Document` to/from your `Fruit` class."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:536
msgid "Here is an example of using a `MongoCollection` with the `FruitCodec`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:544
#, no-wrap
msgid ""
"import com.mongodb.client.MongoClient;\n"
"import com.mongodb.client.MongoCollection;\n"
"import com.mongodb.client.MongoCursor;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:552
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CodecFruitService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:558
#, no-wrap
msgid ""
"    public List<Fruit> list(){\n"
"        List<Fruit> list = new ArrayList<>();\n"
"        MongoCursor<Fruit> cursor = getCollection().find().iterator();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:568
#, no-wrap
msgid ""
"        try {\n"
"            while (cursor.hasNext()) {\n"
"                list.add(cursor.next());\n"
"            }\n"
"        } finally {\n"
"            cursor.close();\n"
"        }\n"
"        return list;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:572
#, no-wrap
msgid ""
"    public void add(Fruit fruit){\n"
"        getCollection().insertOne(fruit);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:577
#, no-wrap
msgid ""
"    private MongoCollection<Fruit> getCollection(){\n"
"        return mongoClient.getDatabase(\"fruit\").getCollection(\"fruit\", Fruit.class);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb.adoc:579
#, no-wrap
msgid "The POJO Codec"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:583
msgid "The link:https://www.mongodb.com/docs/drivers/java/sync/current/fundamentals/data-formats/document-data-format-pojo/[POJO Codec] provides a set of annotations that enable the customization of the way a POJO is mapped to a MongoDB collection and this codec is initialized automatically by Quarkus"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:586
msgid "One of these annotations is the `@BsonDiscriminator` annotation that allows to storage multiple Java types in a single MongoDB collection by adding a discriminator field inside the document. It can be useful when working with abstract types or interfaces."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:588
msgid "Quarkus will automatically register all the classes annotated with `@BsonDiscriminator` with the POJO codec."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:592
msgid "The POJO Codec have enhanced generic support via `PropertyCodecProvider`, Quarkus will automatically register any `PropertyCodecProvider` with the POJO Codec (these classes are automatically made CDI beans of `@Singleton` scope).  When building native executables and using generic types, you might need to register the type arguments for reflection."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb.adoc:593
#, no-wrap
msgid "Simplifying MongoDB with Panache"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:596
msgid "The xref:mongodb-panache.adoc[MongoDB with Panache] extension facilitates the usage of MongoDB by providing active record style entities (and repositories) like you have in xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache] and focuses on making your entities trivial and fun to write in Quarkus."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb.adoc:597
#, no-wrap
msgid "Schema migration with Liquibase"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:601
msgid "The xref:liquibase-mongodb.adoc[Liquibase MongoDB] extension facilitates the initialization of a MongoDB database including indices and initial data.  It implements the same schema migration facilities that Liquibase offers for SQL databases."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb.adoc:602
#, no-wrap
msgid "Connection Health Check"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:606
msgid "If you are using the `quarkus-smallrye-health` extension, `quarkus-mongodb-client` will automatically add a readiness health check to validate the connection to the cluster."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:608
msgid "So when you access the `/q/health/ready` endpoint of your application you will have information about the connection validation status."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:610
msgid "This behavior can be disabled by setting the `quarkus.mongodb.health.enabled` property to `false` in your `application.properties`."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb.adoc:611
#, no-wrap
msgid "Metrics"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:615
msgid "If you are using the `quarkus-micrometer` or `quarkus-smallrye-metrics` extension, `quarkus-mongodb-client` can provide metrics about the connection pools.  This behavior must first be enabled by setting the `quarkus.mongodb.metrics.enabled` property to `true` in your `application.properties`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:618
msgid "So when you access the `/q/metrics` endpoint of your application you will have information about the connection pool status.  When using xref:smallrye-metrics.adoc[SmallRye Metrics], connection pool metrics will be available under the `vendor` scope."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb.adoc:619
#, no-wrap
msgid "Tracing"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:623
msgid "If you are using the `quarkus-smallrye-opentracing` extension, `quarkus-mongodb-client` can register traces about the commands executed.  This behavior must be enabled by setting the `quarkus.mongodb.tracing.enabled` property to `true` in your `application.properties` and adding the dependency `io.opentracing.contrib:opentracing-mongo-common` to your pom.xml (for more info read the xref:opentracing.adoc#mongodb-client[OpenTracing - MongoDB client] section)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:625
msgid "Read the xref:opentracing.adoc[OpenTracing] guide, for how to configure OpenTracing and how to use the Jaeger tracer."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb.adoc:626
#, no-wrap
msgid "Testing helpers"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:629
msgid "xref:#dev-services[Dev Services for MongoDB] is your best option to start a MongoDB database for your unit tests."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:632
msgid "But if you can't use it, you can start a MongoDB database using one of the two `QuarkusTestResourceLifecycleManager` that Quarkus provides.  They rely on link:https://github.com/flapdoodle-oss/de.flapdoodle.embed.mongo[Flapdoodle embedded MongoDB]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:634
msgid "`io.quarkus.test.mongodb.MongoTestResource` will start a single instance on port 27017."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:635
msgid "`io.quarkus.test.mongodb.MongoReplicaSetTestResource` will start a replicaset with two instances, one on port 27017 and the other on port 27018."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:637
msgid "To use them, you need to add the `io.quarkus:quarkus-test-mongodb` dependency to your pom.xml."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:639
msgid "For more information about the usage of a `QuarkusTestResourceLifecycleManager` please read xref:getting-started-testing.adoc#quarkus-test-resource[Quarkus test resource]."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb.adoc:643
msgid "To set the desired port MongoDB will listen to when it is launched, the following code should be used:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:647
#, no-wrap
msgid "@QuarkusTestResource(value = MongoTestResource.class, initArgs = @ResourceArg(name = MongoTestResource.PORT, value = \"27017\"))\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:650
msgid "To set the desired MongoDB version that will be launched, the following code should be used:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:654
#, no-wrap
msgid "@QuarkusTestResource(value = MongoTestResource.class, initArgs = @ResourceArg(name = MongoTestResource.VERSION, value = \"V5_0\"))\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:658
msgid "The string value used can be any of one of the `de.flapdoodle.embed.mongo.distribution.Version` or `de.flapdoodle.embed.mongo.distribution.Version.Main` enums.  If no version is specified, `Version.Main.V4_0` is used by default."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb.adoc:660
#, no-wrap
msgid "The legacy client"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb.adoc:664
msgid "We don't include the legacy MongoDB client by default. It contains the now retired MongoDB Java API (DB, DBCollection,... )  and the `com.mongodb.MongoClient` that is now superseded by `com.mongodb.client.MongoClient`."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb.adoc:666
msgid "If you want to use the legacy API, you need to add the following dependency to your build file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:674
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>org.mongodb</groupId>\n"
"    <artifactId>mongodb-driver-legacy</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:680
#, no-wrap
msgid "implementation(\"org.mongodb:mongodb-driver-legacy\")\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb.adoc:682
#, no-wrap
msgid "Building a native executable"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:685
msgid "You can use the MongoDB client in a native executable."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:687
msgid "If you want to use SSL/TLS encryption, you need to add these properties in your `application.properties`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:692
#, no-wrap
msgid ""
"quarkus.mongodb.tls=true\n"
"quarkus.mongodb.tls-insecure=true # only if TLS certificate cannot be validated\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:695
msgid "You can then build a native executable with the usual command:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:699
msgid "Running it is as simple as executing `./target/mongodb-quickstart-1.0.0-SNAPSHOT-runner`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:701
msgid "You can then point your browser to `http://localhost:8080/fruits.html` and use your application."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb.adoc:705
msgid "Currently, Quarkus doesn't support link:https://docs.mongodb.com/manual/core/security-client-side-encryption/[Client-Side Field Level Encryption] in native mode."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb.adoc:713
msgid "If you encounter the following error when running your application in native mode: + `Failed to encode 'MyObject'. Encoding 'myVariable' errored with: Can't find a codec for class org.acme.MyVariable.` + This means that the `org.acme.MyVariable` class is not known to GraalVM, the remedy is to add the `@RegisterForReflection` annotation to your `MyVariable class`.  More details about the `@RegisterForReflection` annotation can be found on the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb.adoc:715
#, no-wrap
msgid "Using mongo+srv:// urls"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:719
msgid "`mongo+srv://` urls are supported out of the box in JVM mode.  However, in native, the default DNS resolver, provided by the MongoDB client, uses JNDI and does not work in native mode."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:722
msgid "If you need to use `mongo+srv://` in native mode, you can configure an alternative DNS resolver.  This feature is **experimental** and may introduce a difference between JVM applications and native applications."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:724
msgid "To enable the alternative DNS resolver, use:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:728
#, no-wrap
msgid "quarkus.mongodb.native.dns.use-vertx-dns-resolver=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:733
msgid "As indicated in the property name, it uses Vert.x to retrieve the DNS records.  By default, it tries to read the first `nameserver` from `/etc/resolv.conf`, if this file exists.  You can also configure your DNS server:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:739
#, no-wrap
msgid ""
"quarkus.mongodb.native.dns.use-vertx-dns-resolver=true\n"
"quarkus.mongodb.native.dns.server-host=10.0.0.1\n"
"quarkus.mongodb.native.dns.server-port=53 # 53 is the default port\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:742
msgid "Also, you can configure the lookup timeout using:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:747
#, no-wrap
msgid ""
"quarkus.mongodb.native.dns.use-vertx-dns-resolver=true\n"
"quarkus.mongodb.native.dns.lookup-timeout=10s # the default is 5s\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb.adoc:749
#, no-wrap
msgid "Customize the Mongo client configuration programmatically"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:752
msgid "If you need to customize the Mongo client configuration programmatically, you need to implement the `io.quarkus.mongodb.runtime.MongoClientCustomizer` interface and expose it as a CDI _application scoped_ bean:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:757
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyCustomizer implements MongoClientCustomizer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:763
#, no-wrap
msgid ""
"    @Override\n"
"    public MongoClientSettings.Builder customize(MongoClientSettings.Builder builder) {\n"
"        return builder.applicationName(\"my-app\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:769
msgid "The bean can customize a specific client using the `@MongoClientName` qualifier to indicate the client name.  When there is no qualifier, it customizes the default client.  At most one customizer can be used per client.  If multiple customizers targeting the same client are detected, an exception is thrown at build time."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:772
msgid "This feature can be used to configure client-side field level encryption (CSFLE).  Follows the instructions from https://www.mongodb.com/docs/manual/core/csfle/[the Mongo web site] to configure CSFLE:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:782
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyCustomizer implements MongoClientCustomizer {\n"
"    @Override\n"
"    public MongoClientSettings.Builder customize(MongoClientSettings.Builder builder) {\n"
"        Map<String, Map<String, Object>> kmsProviders = getKmsProviders();\n"
"        String dek = getDataEncryptionKey();\n"
"        Map<String, BsonDocument> schema = getSchema(dek);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:785
#, no-wrap
msgid ""
"        Map<String, Object> extraOptions = new HashMap<>();\n"
"        extraOptions.put(\"cryptSharedLibPath\", \"<path to crypt shared library>\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb.adoc:794
#, no-wrap
msgid ""
"        return builder.autoEncryptionSettings(AutoEncryptionSettings.builder()\n"
"                .keyVaultNamespace(KEY_VAULT_NAMESPACE)\n"
"                .kmsProviders(kmsProviders)\n"
"                .schemaMap(schemaMap)\n"
"                .extraOptions(extraOptions)\n"
"                .build());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb.adoc:797
msgid "Client-side field level encryption, and feature relying on https://github.com/mongodb/libmongocrypt[Mongo Crypt] in general, are not supported in native mode."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb.adoc:798
#, no-wrap
msgid "Configuration Reference"
msgstr ""
