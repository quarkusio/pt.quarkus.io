# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-29 08:06+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/main/guides/resteasy.adoc
#, no-wrap
msgid "RESTEasy Classic"
msgstr ""

#. type: delimited block =
#: _versions/main/guides/resteasy.adoc
msgid "This guide is about https://resteasy.dev[RESTEasy Classic], which used to be the default Jakarta REST (formerly known as JAX-RS) implementation until Quarkus 2.8."
msgstr ""

#. type: delimited block =
#: _versions/main/guides/resteasy.adoc
msgid "It is now recommended to use RESTEasy Reactive, which supports both traditional blocking workloads and reactive workloads equally well."
msgstr ""

#: _versions/main/guides/resteasy.adoc
msgid ""
"For more information about RESTEasy Reactive,\n"
"please see the xref:rest-json.adoc[introductory REST JSON guide] or the xref:resteasy-reactive.adoc[RESTEasy Reactive reference documentation]."
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "There is another guide if you need a xref:rest-client.adoc[REST client based on RESTEasy Classic] (including support for JSON)."
msgstr ""

#. type: Title ==
#: _versions/main/guides/resteasy.adoc
#, no-wrap
msgid "Architecture"
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "The application created in this guide is straightforward: users can add elements to a list through a form, and the list gets updated accordingly."
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "All the information between the browser and the server is formatted as JSON."
msgstr ""

#. type: Title ==
#: _versions/main/guides/resteasy.adoc
#, no-wrap
msgid "Creating the Maven project"
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr ""

#: _versions/main/guides/resteasy.adoc
msgid ""
"This command generates a new project importing the RESTEasy/Jakarta REST and https://github.com/FasterXML/jackson[Jackson] extensions,\n"
"and in particular, adds the following dependency:"
msgstr ""

#. type: Block title
#: _versions/main/guides/resteasy.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _versions/main/guides/resteasy.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block =
#: _versions/main/guides/resteasy.adoc
msgid "To improve user experience, Quarkus registers the three Jackson https://github.com/FasterXML/jackson-modules-java8[Java 8 modules], so you do not need to do it manually."
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "Quarkus also supports https://eclipse-ee4j.github.io/jsonb-api/[JSON-B], so if you prefer JSON-B over Jackson, you can create a project relying on the RESTEasy JSON-B extension instead:"
msgstr ""

#: _versions/main/guides/resteasy.adoc
msgid ""
"This command generates a new project importing the RESTEasy/Jakarta REST and https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] extensions,\n"
"and in particular, adds the following dependency:"
msgstr ""

#. type: Title ==
#: _versions/main/guides/resteasy.adoc
#, no-wrap
msgid "Creating the first JSON REST service"
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "In this example, we will create an application to manage a list of fruits."
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "First, let us create the `Fruit` bean as follows:"
msgstr ""

#: _versions/main/guides/resteasy.adoc
msgid ""
"Nothing fancy.\n"
"One important thing to note is that having a default constructor is required by the JSON serialization layer."
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "Now, create the `org.acme.rest.json.FruitResource` class as follows:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "The implementation is pretty straightforward, and you just need to define your endpoints using the Jakarta REST annotations."
msgstr ""

#: _versions/main/guides/resteasy.adoc
msgid ""
"The `Fruit` objects will be automatically serialized/deserialized by https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] or https://github.com/FasterXML/jackson[Jackson],\n"
"depending on the extension you chose when initializing the project."
msgstr ""

#: _versions/main/guides/resteasy.adoc
msgid ""
"When a JSON extension like `quarkus-resteasy-jackson` or `quarkus-resteasy-jsonb` is installed, Quarkus defaults to the `application/json` media type for most return values.\n"
"This can be overridden using `@Produces` or `@Consumes` annotations, except for certain well-known types like `String` (defaulting to `text/plain`) and `File` (defaulting to `application/octet-stream`)."
msgstr ""

#: _versions/main/guides/resteasy.adoc
msgid ""
"To disable the default JSON behavior, set `quarkus.resteasy-json.default-json=false`, and the default will return to auto-negotiation.\n"
"In this case, you must include `@Produces(MediaType.APPLICATION_JSON)` and `@Consumes(MediaType.APPLICATION_JSON)` annotations in your endpoints to use JSON."
msgstr ""

#: _versions/main/guides/resteasy.adoc
msgid ""
"If you don't depend on the JSON default, it's highly advisable to use `@Produces` and `@Consumes` annotations on your endpoints to specify the expected content types precisely.\n"
"This helps reduce the number of Jakarta REST providers (essentially converters) included in the native executable."
msgstr ""

#. type: Title ===
#: _versions/main/guides/resteasy.adoc
#, no-wrap
msgid "Configuring JSON support"
msgstr ""

#. type: Title ====
#: _versions/main/guides/resteasy.adoc
#, no-wrap
msgid "Jackson"
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "In Quarkus, the default Jackson `ObjectMapper` obtained via CDI (utilized by Quarkus extensions) is set to ignore unknown properties (by disabling `DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES`)."
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "To revert to Jackson's default behavior, set `quarkus.jackson.fail-on-unknown-properties=true` in your `application.properties`, or set it on a per-class basis with `@JsonIgnoreProperties(ignoreUnknown = false)`."
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "Additionally, the `ObjectMapper` formats dates and times in ISO-8601 (by disabling `SerializationFeature.WRITE_DATES_AS_TIMESTAMPS`)."
msgstr ""

#: _versions/main/guides/resteasy.adoc
msgid ""
"To restore Jackson's default behavior, use `quarkus.jackson.write-dates-as-timestamps=true` in your `application.properties`.\n"
"For custom date format on a single field, use the `@JsonFormat` annotation."
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "Quarkus simplifies Jackson configuration via CDI beans. Create a CDI bean of type `io.quarkus.jackson.ObjectMapperCustomizer` to apply various Jackson settings. Here's an example for registering a custom module:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "This approach is recommended for configuring Jackson settings."
msgstr ""

#: _versions/main/guides/resteasy.adoc
msgid ""
"Users can even provide their own `ObjectMapper` bean if they so choose.\n"
"If this is done, it is very important to manually inject and apply all `io.quarkus.jackson.ObjectMapperCustomizer` beans in the CDI producer that produces `ObjectMapper`.\n"
"Failure to do so will prevent Jackson-specific customizations provided by various extensions from being applied."
msgstr ""

#. type: Title ====
#: _versions/main/guides/resteasy.adoc
#, no-wrap
msgid "JSON-B"
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "As stated above, Quarkus provides the option of using JSON-B instead of Jackson via the use of the `quarkus-resteasy-jsonb` extension."
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "Following the same approach described in the previous section, JSON-B can be configured using an `io.quarkus.jsonb.JsonbConfigCustomizer` bean."
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "If, for example, a custom serializer named `FooSerializer` for type `com.example.Foo` needs to be registered with JSON-B, the addition of a bean like the following would suffice:"
msgstr ""

#: _versions/main/guides/resteasy.adoc
msgid ""
"A more advanced option would be to directly provide a bean of `jakarta.json.bind.JsonbConfig` (with a `Dependent` scope) or, in the extreme case, to provide a bean of type `jakarta.json.bind.Jsonb` (with a `Singleton` scope).\n"
"If the latter approach is leveraged it is very important to manually inject and apply all `io.quarkus.jsonb.JsonbConfigCustomizer` beans in the CDI producer that produces `jakarta.json.bind.Jsonb`.\n"
"Failure to do so will prevent JSON-B specific customizations provided by various extensions from being applied."
msgstr ""

#. type: Title ===
#: _versions/main/guides/resteasy.adoc
#, no-wrap
msgid "JSON Hypertext Application Language (HAL) support"
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "The https://tools.ietf.org/id/draft-kelly-json-hal-01.html[HAL] standard is a simple format to represent web links."
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "To enable the HAL support, add the `quarkus-hal` extension to your project. Also, as HAL needs JSON support, you need to add either the `quarkus-resteasy-jsonb` or the `quarkus-resteasy-jackson` extension."
msgstr ""

#. type: Block title
#: _versions/main/guides/resteasy.adoc
#, no-wrap
msgid "Table Context object"
msgstr ""

#. type: Table
#: _versions/main/guides/resteasy.adoc
#, no-wrap
msgid "GAV"
msgstr ""

#. type: Table
#: _versions/main/guides/resteasy.adoc
#, no-wrap
msgid "Usage"
msgstr ""

#. type: Table
#: _versions/main/guides/resteasy.adoc
#, no-wrap
msgid "`io.quarkus:quarkus-hal`"
msgstr ""

#. type: Table
#: _versions/main/guides/resteasy.adoc
#, no-wrap
msgid "https://tools.ietf.org/id/draft-kelly-json-hal-01.html[HAL]"
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "After adding the extensions, we can now annotate the REST resources to produce the media type `application/hal+json` (or use RestMediaType.APPLICATION_HAL_JSON). For example:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "Now, the endpoints `/records` and `/records/first` will accept the media type, both `json` and `hal+json`, to print the records in Hal format."
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "For example, if we invoke the `/records` endpoint using curl to return a list of records, the HAL format will look like as follows:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "When we call a resource `/records/first` that returns only one instance, then the output is:"
msgstr ""

#. type: Title ==
#: _versions/main/guides/resteasy.adoc
#, no-wrap
msgid "Creating a frontend"
msgstr ""

#: _versions/main/guides/resteasy.adoc
msgid ""
"Now let us add a simple web page to interact with our `FruitResource`.\n"
"Quarkus automatically serves static resources located under the `META-INF/resources` directory.\n"
"In the `src/main/resources/META-INF/resources` directory, add a `fruits.html` file with the content from this link:{quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/fruits.html[fruits.html] file in it."
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "You can now interact with your REST service:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "start Quarkus with:"
msgstr ""

#: _versions/main/guides/resteasy.adoc
msgid "CLI"
msgstr ""

#: _versions/main/guides/resteasy.adoc
msgid "Maven"
msgstr ""

#: _versions/main/guides/resteasy.adoc
msgid "Gradle"
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "open a browser to `http://localhost:8080/fruits.html`"
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "add new fruits to the list via the form"
msgstr ""

#. type: Title ==
#: _versions/main/guides/resteasy.adoc
#, no-wrap
msgid "Building a native executable"
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "You can build a native executable with the usual command:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "Running it is as simple as executing `./target/rest-json-quickstart-1.0.0-SNAPSHOT-runner`."
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "You can then point your browser to `http://localhost:8080/fruits.html` and use your application."
msgstr ""

#. type: Title ==
#: _versions/main/guides/resteasy.adoc
#, no-wrap
msgid "About serialization"
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "JSON serialization libraries use Java reflection to get the properties of an object and serialize them."
msgstr ""

#: _versions/main/guides/resteasy.adoc
msgid ""
"When using native executables with GraalVM, all classes that will be used with reflection need to be registered.\n"
"The good news is that Quarkus does that work for you most of the time.\n"
"So far, we have not registered any class, not even `Fruit`, for reflection usage, and everything is working fine."
msgstr ""

#: _versions/main/guides/resteasy.adoc
msgid ""
"Quarkus performs some magic when it is capable of inferring the serialized types from the REST methods.\n"
"When you have the following REST method, Quarkus determines that `Fruit` will be serialized:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "Quarkus does that for you automatically by analyzing the REST methods at build time, and that is why we did not need any reflection registration in the first part of this guide."
msgstr ""

#: _versions/main/guides/resteasy.adoc
msgid ""
"Another common pattern in the Jakarta REST world is to use the `Response` object.\n"
"`Response` comes with some nice perks:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "You can return different entity types depending on what happens in your method (a `Legume` or an `Error` for instance)."
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "You can set the attributes of the `Response` (the status comes to mind in the case of an error)."
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "Your REST method then looks like this:"
msgstr ""

#: _versions/main/guides/resteasy.adoc
msgid ""
"Quarkus cannot determine at build time the type included in the `Response` as the information is not available.\n"
"In this case, Quarkus won't be able to register for reflection in the required classes automatically."
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "This leads us to our next section."
msgstr ""

#. type: Title ==
#: _versions/main/guides/resteasy.adoc
#, no-wrap
msgid "Using response"
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "Let us create the `Legume` class, which will be serialized as JSON, following the same model as for our `Fruit` class:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "Now let's create a `LegumeResource` REST service with only one method that returns the list of legumes."
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "This method returns a `Response` and not a list of `Legume`."
msgstr ""

#: _versions/main/guides/resteasy.adoc
msgid ""
"Now, let us add a simple web page to display our list of legumes.\n"
"In the `src/main/resources/META-INF/resources` directory, add a `legumes.html` file with the content from this\n"
"{quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/legumes.html[legumes.html] file in it."
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "Open a browser to http://localhost:8080/legumes.html, and you will see our list of legumes."
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "The interesting part starts when running the application as a native executable:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "create the native executable with:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "execute it with `./target/rest-json-quickstart-1.0.0-SNAPSHOT-runner`"
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "open a browser and go to http://localhost:8080/legumes.html"
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "There are no legumes there."
msgstr ""

#: _versions/main/guides/resteasy.adoc
msgid ""
"As mentioned above, the issue is that Quarkus could not determine the `Legume` class, which will require some reflection by analyzing the REST endpoints.\n"
"The JSON serialization library tries to get the list of fields of `Legume` and gets an empty list, so it does not serialize the fields' data."
msgstr ""

#: _versions/main/guides/resteasy.adoc
msgid ""
"At the moment, when JSON-B or Jackson tries to get the list of fields of a class, if the class is not registered for reflection, no exception will be thrown.\n"
"GraalVM will return an empty list of fields."
msgstr ""

#. type: delimited block =
#: _versions/main/guides/resteasy.adoc
msgid "Hopefully, this will change in the future and make the error more obvious."
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "We can register `Legume` for reflection manually by adding the `@RegisterForReflection` annotation on our `Legume` class:"
msgstr ""

#: _versions/main/guides/resteasy.adoc
msgid ""
"The `@RegisterForReflection` annotation instructs Quarkus to keep the class and its members during the native compilation.\n"
"More details about the `@RegisterForReflection` annotation can be found on the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "Let us do that and follow the same steps as before:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "hit `Ctrl+C` to stop the application"
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "This time, you can see our list of legumes."
msgstr ""

#. type: Title ==
#: _versions/main/guides/resteasy.adoc
#, no-wrap
msgid "Being reactive"
msgstr ""

#. type: delimited block =
#: _versions/main/guides/resteasy.adoc
msgid "For reactive workloads, please always use xref:resteasy-reactive.adoc[RESTEasy Reactive]."
msgstr ""

#: _versions/main/guides/resteasy.adoc
msgid ""
"You can return _reactive types_ to handle asynchronous processing.\n"
"Quarkus recommends the usage of https://smallrye.io/smallrye-mutiny[Mutiny] to write reactive and asynchronous code."
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "To integrate Mutiny and RESTEasy, you need to add the `quarkus-resteasy-mutiny` dependency to your project:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "Then, your endpoint can return `Uni` or `Multi` instances:"
msgstr ""

#: _versions/main/guides/resteasy.adoc
msgid ""
"Use `Uni` when you have a single result.\n"
"Use `Multi` when you have multiple items that may be emitted asynchronously."
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "You can use `Uni` and `Response` to return asynchronous HTTP responses: `Uni<Response>`."
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "More details about Mutiny can be found in xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr ""

#. type: Title ==
#: _versions/main/guides/resteasy.adoc
#, no-wrap
msgid "HTTP filters and interceptors"
msgstr ""

#: _versions/main/guides/resteasy.adoc
msgid ""
"Both HTTP request and response can be intercepted by providing `ContainerRequestFilter` or `ContainerResponseFilter`\n"
"implementations respectively.\n"
"These filters are suitable for processing the metadata associated with a message: HTTP headers, query parameters, media type, and other metadata.\n"
"They also can abort the request processing, for instance, when the user does not have permission to access the endpoint."
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "Let's use `ContainerRequestFilter` to add logging capability to our service. We can do that by implementing `ContainerRequestFilter` and annotating it with the `@Provider` annotation:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "Now, whenever a REST method is invoked, the request will be logged into the console:"
msgstr ""

#. type: Title ==
#: _versions/main/guides/resteasy.adoc
#, no-wrap
msgid "CORS filter"
msgstr ""

#: _versions/main/guides/resteasy.adoc
msgid ""
"link:https://en.wikipedia.org/wiki/Cross-origin_resource_sharing[Cross-origin resource sharing] (CORS) is a mechanism that\n"
"allows restricted resources on a web page to be requested from another domain outside the domain from which the first resource\n"
"was served."
msgstr ""

#: _versions/main/guides/resteasy.adoc
msgid ""
"Quarkus includes a CORS filter at the HTTP layer level.\n"
"For more information about the CORS filters and their usage, see the xref:security-cors.adoc#cors-filter[CORS filter] section of the Quarkus \"Cross-origin resource sharing\" guide."
msgstr ""

#. type: Title ==
#: _versions/main/guides/resteasy.adoc
#, no-wrap
msgid "GZip Support"
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "Quarkus comes with GZip support (even though it is not enabled by default). The following configuration knobs allow to configure GZip support."
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "Enable Gzip support."
msgstr ""

#: _versions/main/guides/resteasy.adoc
msgid ""
"Configure the upper limit on the deflated request body.\n"
"This is useful to mitigate potential attacks by limiting their reach. The default value is `10M`.\n"
"This configuration option would recognize strings in this format (shown as a regular expression): `[0-9]+[KkMmGgTtPpEeZzYy]?`.\n"
"If no suffix is given, assume bytes."
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "Once GZip support has been enabled, you can use it on an endpoint by adding the `@org.jboss.resteasy.annotations.GZIP` annotation to your endpoint method."
msgstr ""

#: _versions/main/guides/resteasy.adoc
msgid ""
"There is also the `quarkus.http.enable-compression` configuration property, which enables HTTP response compression globally.\n"
"If enabled, a response body is compressed if the `Content-Type` HTTP header is set and the value is a compressed media type configured via the `quarkus.http.compress-media-types` configuration property."
msgstr ""

#. type: Title ==
#: _versions/main/guides/resteasy.adoc
#, no-wrap
msgid "Multipart Support"
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "RESTEasy supports multipart via the https://docs.jboss.org/resteasy/docs/4.5.6.Final/userguide/html/Multipart.html[RESTEasy Multipart Provider]."
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "Quarkus provides an extension called `quarkus-resteasy-multipart` to make things easier for you."
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "This extension slightly differs from the RESTEasy default behavior as the default charset (if none is specified in your request) is UTF-8 rather than US-ASCII."
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "You can configure this behavior with the following configuration properties:"
msgstr ""

#: _versions/main/guides/resteasy.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""

#. type: Title ==
#: _versions/main/guides/resteasy.adoc
#, no-wrap
msgid "Servlet compatibility"
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "In Quarkus, RESTEasy can either run directly on top of the Vert.x HTTP server, or on top of Undertow if you have any servlet dependency."
msgstr ""

#: _versions/main/guides/resteasy.adoc
msgid ""
"As a result, certain classes, such as `HttpServletRequest` are not always available for injection.\n"
"Most use cases for this particular class are covered by Jakarta REST equivalents, except for getting the remote client's IP."
msgstr ""

#: _versions/main/guides/resteasy.adoc
msgid ""
"RESTEasy comes with a replacement API that you can inject:\n"
"https://docs.jboss.org/resteasy/docs/4.5.6.Final/javadocs/org/jboss/resteasy/spi/HttpRequest.html[`HttpRequest`], which has the methods\n"
"https://docs.jboss.org/resteasy/docs/4.5.6.Final/javadocs/org/jboss/resteasy/spi/HttpRequest.html#getRemoteAddress--[`getRemoteAddress()`]\n"
"and https://docs.jboss.org/resteasy/docs/4.5.6.Final/javadocs/org/jboss/resteasy/spi/HttpRequest.html#getRemoteHost--[`getRemoteHost()`]\n"
"to solve this problem."
msgstr ""

#. type: Title ==
#: _versions/main/guides/resteasy.adoc
#, no-wrap
msgid "RESTEasy and REST Client interactions"
msgstr ""

#: _versions/main/guides/resteasy.adoc
msgid ""
"In Quarkus, the RESTEasy extension and xref:rest-client.adoc[the REST Client extension] share the same infrastructure.\n"
"One important consequence of this consideration is that they share the same list of providers (in the Jakarta REST meaning of the word)."
msgstr ""

#: _versions/main/guides/resteasy.adoc
msgid ""
"For instance, if you declare a `WriterInterceptor`, it will, by default, intercept both the servers calls and the client calls,\n"
"which might not be the desired behavior."
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "However, you can change this default behavior and constrain a provider to:"
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "only consider *server* calls by adding the `@ConstrainedTo(RuntimeType.SERVER)` annotation to your provider;"
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "only consider *client* calls by adding the `@ConstrainedTo(RuntimeType.CLIENT)` annotation to your provider."
msgstr ""

#. type: Title ==
#: _versions/main/guides/resteasy.adoc
#, no-wrap
msgid "What's Different from Jakarta EE Development"
msgstr ""

#. type: Title ===
#: _versions/main/guides/resteasy.adoc
#, no-wrap
msgid "No Need for `Application` Class"
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "Configuration via an application-supplied subclass of `Application` is supported but not required."
msgstr ""

#. type: Title ===
#: _versions/main/guides/resteasy.adoc
#, no-wrap
msgid "Only a single Jakarta REST application"
msgstr ""

#: _versions/main/guides/resteasy.adoc
msgid ""
"In contrast to Jakarta REST (and RESTeasy) running in a standard servlet container, Quarkus only supports the deployment of a single Jakarta REST application.\n"
"If multiple Jakarta REST `Application` classes are defined, the build will fail with the message `Multiple classes have been annotated with @ApplicationPath which is currently not supported`."
msgstr ""

#: _versions/main/guides/resteasy.adoc
msgid ""
"If multiple Jakarta REST applications are defined, the property `quarkus.resteasy.ignore-application-classes=true` can be used to ignore all explicit `Application` classes.\n"
"This makes all resource-classes available via the application-path as defined by `quarkus.resteasy.path` (default: `/`)."
msgstr ""

#. type: Title ===
#: _versions/main/guides/resteasy.adoc
#, no-wrap
msgid "Support limitations of Jakarta REST application"
msgstr ""

#: _versions/main/guides/resteasy.adoc
msgid ""
"The RESTEasy extension doesn't support the method `getProperties()` of the class `jakarta.ws.rs.core.Application`.\n"
"Moreover, it only relies on the methods `getClasses()` and `getSingletons()` to filter out the annotated resource, provider, and feature classes.\n"
"It does not filter out the built-in resource, provider, and feature classes and also the resource, provider, and feature classes registered by the other extensions.\n"
"Finally, the objects returned by the method `getSingletons()` are ignored, only the classes are taken into account to filter out the resource, provider and feature classes, in other words the method `getSingletons()` is managed the same way as `getClasses()`."
msgstr ""

#. type: Title ===
#: _versions/main/guides/resteasy.adoc
#, no-wrap
msgid "Lifecycle of Resources"
msgstr ""

#: _versions/main/guides/resteasy.adoc
msgid ""
"In Quarkus, all Jakarta REST resources are treated as CDI beans.\n"
"It's possible to inject other beans via `@Inject`, bind interceptors using bindings such as `@Transactional`, define `@PostConstruct` callbacks, etc."
msgstr ""

#: _versions/main/guides/resteasy.adoc
msgid ""
"If no scope annotation is declared on the resource class, then the scope is defaulted.\n"
"The `quarkus.resteasy.singleton-resources` property can control the default scope."
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "If set to `true` (default), then a *single instance* of a resource class is created to service all requests (as defined by `@jakarta.inject.Singleton`)."
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "If set to `false`, then a *new instance* of the resource class is created per each request."
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "An explicit CDI scope annotation (`@RequestScoped`, `@ApplicationScoped`, etc.) always overrides the default behavior and specifies the lifecycle of resource instances."
msgstr ""

#. type: Title ==
#: _versions/main/guides/resteasy.adoc
#, no-wrap
msgid "Include/Exclude Jakarta REST classes with build time conditions"
msgstr ""

#: _versions/main/guides/resteasy.adoc
msgid ""
"Quarkus enables the inclusion or exclusion of Jakarta REST Resources, Providers and Features directly thanks to build time conditions in the same that it does for CDI beans.\n"
"Thus, the various Jakarta REST classes can be annotated with profile conditions (`@io.quarkus.arc.profile.IfBuildProfile` or `@io.quarkus.arc.profile.UnlessBuildProfile`) and/or with property conditions (`io.quarkus.arc.properties.IfBuildProperty` or `io.quarkus.arc.properties.UnlessBuildProperty`) to indicate to Quarkus at build time under which conditions these Jakarta REST classes should be included."
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "In the following example, Quarkus includes the endpoint `sayHello` if and only if the build profile `app1` has been enabled."
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "Please note that if a Jakarta REST Application has been detected and the method `getClasses()` and/or `getSingletons()` has/have been overridden, Quarkus will ignore the build time conditions and consider only what has been defined in the Jakarta REST Application."
msgstr ""

#. type: Title ==
#: _versions/main/guides/resteasy.adoc
#, no-wrap
msgid "Conclusion"
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "Creating JSON REST services with Quarkus is easy as it relies on proven and well-known technologies."
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "As usual, Quarkus further simplifies things under the hood when running your application as a native executable."
msgstr ""

#. type: Plain text
#: _versions/main/guides/resteasy.adoc
msgid "There is only one thing to remember: if you use `Response` and Quarkus cannot determine the beans that are serialized, you need to annotate them with `@RegisterForReflection`."
msgstr ""
