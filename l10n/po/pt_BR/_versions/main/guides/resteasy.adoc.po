# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-29 08:06+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/resteasy.adoc:6
#, no-wrap
msgid "RESTEasy Classic"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/resteasy.adoc:15
msgid "This guide is about https://resteasy.dev[RESTEasy Classic], which used to be the default Jakarta REST (formerly known as JAX-RS) implementation until Quarkus 2.8."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/resteasy.adoc:17
msgid "It is now recommended to use RESTEasy Reactive, which supports both traditional blocking workloads and reactive workloads equally well."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/resteasy.adoc:20
msgid "For more information about RESTEasy Reactive, please see the xref:rest-json.adoc[introductory REST JSON guide] or the xref:resteasy-reactive.adoc[RESTEasy Reactive reference documentation]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:23
msgid "There is another guide if you need a xref:rest-client.adoc[REST client based on RESTEasy Classic] (including support for JSON)."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/resteasy.adoc:24
#, no-wrap
msgid "Architecture"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:27
msgid "The application created in this guide is straightforward: users can add elements to a list through a form, and the list gets updated accordingly."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:29
msgid "All the information between the browser and the server is formatted as JSON."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/resteasy.adoc:30
#, no-wrap
msgid "Creating the Maven project"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:33
msgid "First, we need a new project. Create a new project with the following command:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:40
msgid "This command generates a new project importing the RESTEasy/Jakarta REST and https://github.com/FasterXML/jackson[Jackson] extensions, and in particular, adds the following dependency:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/resteasy.adoc:42
#: upstream/_versions/main/guides/resteasy.adoc:71
#: upstream/_versions/main/guides/resteasy.adoc:610
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:48
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-jackson</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/resteasy.adoc:51
#: upstream/_versions/main/guides/resteasy.adoc:80
#: upstream/_versions/main/guides/resteasy.adoc:619
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:54
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-resteasy-jackson\")\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/resteasy.adoc:59
msgid "To improve user experience, Quarkus registers the three Jackson https://github.com/FasterXML/jackson-modules-java8[Java 8 modules], so you do not need to do it manually."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:62
msgid "Quarkus also supports https://eclipse-ee4j.github.io/jsonb-api/[JSON-B], so if you prefer JSON-B over Jackson, you can create a project relying on the RESTEasy JSON-B extension instead:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:69
msgid "This command generates a new project importing the RESTEasy/Jakarta REST and https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] extensions, and in particular, adds the following dependency:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:77
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-jsonb</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:83
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-resteasy-jsonb\")\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/resteasy.adoc:85
#, no-wrap
msgid "Creating the first JSON REST service"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:88
msgid "In this example, we will create an application to manage a list of fruits."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:90
msgid "First, let us create the `Fruit` bean as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:94
#: upstream/_versions/main/guides/resteasy.adoc:118
#: upstream/_versions/main/guides/resteasy.adoc:482
#: upstream/_versions/main/guides/resteasy.adoc:505
#: upstream/_versions/main/guides/resteasy.adoc:660
#, no-wrap
msgid "package org.acme.rest.json;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:96
#, no-wrap
msgid "public class Fruit {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:99
#: upstream/_versions/main/guides/resteasy.adoc:487
#, no-wrap
msgid ""
"    public String name;\n"
"    public String description;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:102
#, no-wrap
msgid ""
"    public Fruit() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:108
#, no-wrap
msgid ""
"    public Fruit(String name, String description) {\n"
"        this.name = name;\n"
"        this.description = description;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:112
msgid "Nothing fancy.  One important thing to note is that having a default constructor is required by the JSON serialization layer."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:114
msgid "Now, create the `org.acme.rest.json.FruitResource` class as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:122
#, no-wrap
msgid ""
"import java.util.Collections;\n"
"import java.util.LinkedHashMap;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:127
#, no-wrap
msgid ""
"import jakarta.ws.rs.DELETE;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.POST;\n"
"import jakarta.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:130
#, no-wrap
msgid ""
"@Path(\"/fruits\")\n"
"public class FruitResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:132
#, no-wrap
msgid "    private Set<Fruit> fruits = Collections.newSetFromMap(Collections.synchronizedMap(new LinkedHashMap<>()));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:137
#, no-wrap
msgid ""
"    public FruitResource() {\n"
"        fruits.add(new Fruit(\"Apple\", \"Winter fruit\"));\n"
"        fruits.add(new Fruit(\"Pineapple\", \"Tropical fruit\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:142
#, no-wrap
msgid ""
"    @GET\n"
"    public Set<Fruit> list() {\n"
"        return fruits;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:148
#, no-wrap
msgid ""
"    @POST\n"
"    public Set<Fruit> add(Fruit fruit) {\n"
"        fruits.add(fruit);\n"
"        return fruits;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:155
#, no-wrap
msgid ""
"    @DELETE\n"
"    public Set<Fruit> delete(Fruit fruit) {\n"
"        fruits.removeIf(existingFruit -> existingFruit.name.contentEquals(fruit.name));\n"
"        return fruits;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:158
msgid "The implementation is pretty straightforward, and you just need to define your endpoints using the Jakarta REST annotations."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:161
msgid "The `Fruit` objects will be automatically serialized/deserialized by https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] or https://github.com/FasterXML/jackson[Jackson], depending on the extension you chose when initializing the project."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/resteasy.adoc:166
msgid "When a JSON extension like `quarkus-resteasy-jackson` or `quarkus-resteasy-jsonb` is installed, Quarkus defaults to the `application/json` media type for most return values.  This can be overridden using `@Produces` or `@Consumes` annotations, except for certain well-known types like `String` (defaulting to `text/plain`) and `File` (defaulting to `application/octet-stream`)."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/resteasy.adoc:169
msgid "To disable the default JSON behavior, set `quarkus.resteasy-json.default-json=false`, and the default will return to auto-negotiation.  In this case, you must include `@Produces(MediaType.APPLICATION_JSON)` and `@Consumes(MediaType.APPLICATION_JSON)` annotations in your endpoints to use JSON."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/resteasy.adoc:172
msgid "If you don't depend on the JSON default, it's highly advisable to use `@Produces` and `@Consumes` annotations on your endpoints to specify the expected content types precisely.  This helps reduce the number of Jakarta REST providers (essentially converters) included in the native executable."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/resteasy.adoc:175
#, no-wrap
msgid "Configuring JSON support"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/resteasy.adoc:177
#, no-wrap
msgid "Jackson"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:180
msgid "In Quarkus, the default Jackson `ObjectMapper` obtained via CDI (utilized by Quarkus extensions) is set to ignore unknown properties (by disabling `DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES`)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:182
msgid "To revert to Jackson's default behavior, set `quarkus.jackson.fail-on-unknown-properties=true` in your `application.properties`, or set it on a per-class basis with `@JsonIgnoreProperties(ignoreUnknown = false)`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:184
msgid "Additionally, the `ObjectMapper` formats dates and times in ISO-8601 (by disabling `SerializationFeature.WRITE_DATES_AS_TIMESTAMPS`)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:187
msgid "To restore Jackson's default behavior, use `quarkus.jackson.write-dates-as-timestamps=true` in your `application.properties`.  For custom date format on a single field, use the `@JsonFormat` annotation."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:189
msgid "Quarkus simplifies Jackson configuration via CDI beans. Create a CDI bean of type `io.quarkus.jackson.ObjectMapperCustomizer` to apply various Jackson settings. Here's an example for registering a custom module:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:199
#, no-wrap
msgid ""
"```java\n"
"@ApplicationScoped\n"
"public class MyObjectMapperCustomizer implements ObjectMapperCustomizer {\n"
"    @Override\n"
"    public void customize(ObjectMapper objectMapper) {\n"
"        // Add custom Jackson configuration here\n"
"    }\n"
"}\n"
"```\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:201
msgid "This approach is recommended for configuring Jackson settings."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:207
#, no-wrap
msgid ""
"import com.fasterxml.jackson.databind.ObjectMapper;\n"
"import io.quarkus.jackson.ObjectMapperCustomizer;\n"
"import jakarta.inject.Singleton;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:210
#, no-wrap
msgid ""
"@Singleton\n"
"public class RegisterCustomModuleCustomizer implements ObjectMapperCustomizer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:215
#, no-wrap
msgid ""
"    public void customize(ObjectMapper mapper) {\n"
"        mapper.registerModule(new CustomModule());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:220
msgid "Users can even provide their own `ObjectMapper` bean if they so choose.  If this is done, it is very important to manually inject and apply all `io.quarkus.jackson.ObjectMapperCustomizer` beans in the CDI producer that produces `ObjectMapper`.  Failure to do so will prevent Jackson-specific customizations provided by various extensions from being applied."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:228
#, no-wrap
msgid ""
"import com.fasterxml.jackson.databind.ObjectMapper;\n"
"import io.quarkus.arc.All;\n"
"import io.quarkus.jackson.ObjectMapperCustomizer;\n"
"import java.util.List;\n"
"import jakarta.inject.Singleton;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:230
#, no-wrap
msgid "public class CustomObjectMapper {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:235
#, no-wrap
msgid ""
"    // Replaces the CDI producer for ObjectMapper built into Quarkus\n"
"    @Singleton\n"
"    ObjectMapper objectMapper(@All List<ObjectMapperCustomizer> customizers) {\n"
"        ObjectMapper mapper = myObjectMapper(); // Custom `ObjectMapper`\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:240
#, no-wrap
msgid ""
"        // Apply all ObjectMapperCustomizer beans (incl. Quarkus)\n"
"        for (ObjectMapperCustomizer customizer : customizers) {\n"
"            customizer.customize(mapper);\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:244
#, no-wrap
msgid ""
"        return mapper;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/resteasy.adoc:246
#, no-wrap
msgid "JSON-B"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:249
msgid "As stated above, Quarkus provides the option of using JSON-B instead of Jackson via the use of the `quarkus-resteasy-jsonb` extension."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:251
msgid "Following the same approach described in the previous section, JSON-B can be configured using an `io.quarkus.jsonb.JsonbConfigCustomizer` bean."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:253
msgid "If, for example, a custom serializer named `FooSerializer` for type `com.example.Foo` needs to be registered with JSON-B, the addition of a bean like the following would suffice:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:260
#, no-wrap
msgid ""
"import io.quarkus.jsonb.JsonbConfigCustomizer;\n"
"import jakarta.inject.Singleton;\n"
"import jakarta.json.bind.JsonbConfig;\n"
"import jakarta.json.bind.serializer.JsonbSerializer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:263
#, no-wrap
msgid ""
"@Singleton\n"
"public class FooSerializerRegistrationCustomizer implements JsonbConfigCustomizer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:268
#, no-wrap
msgid ""
"    public void customize(JsonbConfig config) {\n"
"        config.withSerializers(new FooSerializer());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:273
msgid "A more advanced option would be to directly provide a bean of `jakarta.json.bind.JsonbConfig` (with a `Dependent` scope) or, in the extreme case, to provide a bean of type `jakarta.json.bind.Jsonb` (with a `Singleton` scope).  If the latter approach is leveraged it is very important to manually inject and apply all `io.quarkus.jsonb.JsonbConfigCustomizer` beans in the CDI producer that produces `jakarta.json.bind.Jsonb`.  Failure to do so will prevent JSON-B specific customizations provided by various extensions from being applied."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:277
#, no-wrap
msgid "import io.quarkus.jsonb.JsonbConfigCustomizer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:281
#, no-wrap
msgid ""
"import jakarta.enterprise.context.Dependent;\n"
"import jakarta.enterprise.inject.Instance;\n"
"import jakarta.json.bind.JsonbConfig;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:283
#, no-wrap
msgid "public class CustomJsonbConfig {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:288
#, no-wrap
msgid ""
"    // Replaces the CDI producer for JsonbConfig built into Quarkus\n"
"    @Dependent\n"
"    JsonbConfig jsonConfig(Instance<JsonbConfigCustomizer> customizers) {\n"
"        JsonbConfig config = myJsonbConfig(); // Custom `JsonbConfig`\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:293
#, no-wrap
msgid ""
"        // Apply all JsonbConfigCustomizer beans (incl. Quarkus)\n"
"        for (JsonbConfigCustomizer customizer : customizers) {\n"
"            customizer.customize(config);\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:297
#, no-wrap
msgid ""
"        return config;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/resteasy.adoc:300
#, no-wrap
msgid "JSON Hypertext Application Language (HAL) support"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:303
msgid "The https://tools.ietf.org/id/draft-kelly-json-hal-01.html[HAL] standard is a simple format to represent web links."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:305
msgid "To enable the HAL support, add the `quarkus-hal` extension to your project. Also, as HAL needs JSON support, you need to add either the `quarkus-resteasy-jsonb` or the `quarkus-resteasy-jackson` extension."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/resteasy.adoc:306
#, no-wrap
msgid "Table Context object"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/resteasy.adoc:308
#, no-wrap
msgid "GAV"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/resteasy.adoc:310
#, no-wrap
msgid "Usage"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/resteasy.adoc:311
#, no-wrap
msgid "`io.quarkus:quarkus-hal`"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/resteasy.adoc:313
#, no-wrap
msgid "https://tools.ietf.org/id/draft-kelly-json-hal-01.html[HAL]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:316
msgid "After adding the extensions, we can now annotate the REST resources to produce the media type `application/hal+json` (or use RestMediaType.APPLICATION_HAL_JSON). For example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:321
#, no-wrap
msgid ""
"@Path(\"/records\")\n"
"public class RecordsResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:328
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces({ MediaType.APPLICATION_JSON, \"application/hal+json\" })\n"
"    @LinkResource(entityClassName = \"org.acme.Record\", rel = \"list\")\n"
"    public List<TestRecord> getAll() {\n"
"        // ...\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:337
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/first\")\n"
"    @Produces({ MediaType.APPLICATION_JSON, \"application/hal+json\" })\n"
"    @LinkResource(rel = \"first\")\n"
"    public TestRecord getFirst() {\n"
"        // ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:340
msgid "Now, the endpoints `/records` and `/records/first` will accept the media type, both `json` and `hal+json`, to print the records in Hal format."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:342
msgid "For example, if we invoke the `/records` endpoint using curl to return a list of records, the HAL format will look like as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:383
#, no-wrap
msgid ""
"& curl -H \"Accept:application/hal+json\" -i localhost:8080/records\n"
"{\n"
"    \"_embedded\": {\n"
"        \"items\": [\n"
"            {\n"
"                \"id\": 1,\n"
"                \"slug\": \"first\",\n"
"                \"value\": \"First value\",\n"
"                \"_links\": {\n"
"                    \"list\": {\n"
"                        \"href\": \"http://localhost:8081/records\"\n"
"                    },\n"
"                    \"first\": {\n"
"                        \"href\": \"http://localhost:8081/records/first\"\n"
"                    }\n"
"                }\n"
"            },\n"
"            {\n"
"                \"id\": 2,\n"
"                \"slug\": \"second\",\n"
"                \"value\": \"Second value\",\n"
"                \"_links\": {\n"
"                    \"list\": {\n"
"                        \"href\": \"http://localhost:8081/records\"\n"
"                    },\n"
"                    \"first\": {\n"
"                        \"href\": \"http://localhost:8081/records/first\"\n"
"                    }\n"
"                }\n"
"            }\n"
"        ]\n"
"    },\n"
"    \"_links\": {\n"
"        \"list\": {\n"
"            \"href\": \"http://localhost:8081/records\"\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:386
msgid "When we call a resource `/records/first` that returns only one instance, then the output is:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:403
#, no-wrap
msgid ""
"& curl -H \"Accept:application/hal+json\" -i localhost:8080/records/first\n"
"{\n"
"    \"id\": 1,\n"
"    \"slug\": \"first\",\n"
"    \"value\": \"First value\",\n"
"    \"_links\": {\n"
"        \"list\": {\n"
"            \"href\": \"http://localhost:8081/records\"\n"
"        },\n"
"        \"first\": {\n"
"            \"href\": \"http://localhost:8081/records/first\"\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/resteasy.adoc:405
#, no-wrap
msgid "Creating a frontend"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:410
msgid "Now let us add a simple web page to interact with our `FruitResource`.  Quarkus automatically serves static resources located under the `META-INF/resources` directory.  In the `src/main/resources/META-INF/resources` directory, add a `fruits.html` file with the content from this link:{quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/fruits.html[fruits.html] file in it."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:412
msgid "You can now interact with your REST service:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:416
msgid "start Quarkus with:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:419
msgid "open a browser to `http://localhost:8080/fruits.html`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:420
msgid "add new fruits to the list via the form"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/resteasy.adoc:423
#, no-wrap
msgid "Building a native executable"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:426
msgid "You can build a native executable with the usual command:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:430
msgid "Running it is as simple as executing `./target/rest-json-quickstart-1.0.0-SNAPSHOT-runner`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:432
msgid "You can then point your browser to `http://localhost:8080/fruits.html` and use your application."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/resteasy.adoc:433
#, no-wrap
msgid "About serialization"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:436
msgid "JSON serialization libraries use Java reflection to get the properties of an object and serialize them."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:440
msgid "When using native executables with GraalVM, all classes that will be used with reflection need to be registered.  The good news is that Quarkus does that work for you most of the time.  So far, we have not registered any class, not even `Fruit`, for reflection usage, and everything is working fine."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:443
msgid "Quarkus performs some magic when it is capable of inferring the serialized types from the REST methods.  When you have the following REST method, Quarkus determines that `Fruit` will be serialized:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:450
#, no-wrap
msgid ""
"@GET\n"
"public List<Fruit> list() {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:453
msgid "Quarkus does that for you automatically by analyzing the REST methods at build time, and that is why we did not need any reflection registration in the first part of this guide."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:456
msgid "Another common pattern in the Jakarta REST world is to use the `Response` object.  `Response` comes with some nice perks:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:458
msgid "You can return different entity types depending on what happens in your method (a `Legume` or an `Error` for instance)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:459
msgid "You can set the attributes of the `Response` (the status comes to mind in the case of an error)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:461
msgid "Your REST method then looks like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:468
#, no-wrap
msgid ""
"@GET\n"
"public Response list() {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:472
msgid "Quarkus cannot determine at build time the type included in the `Response` as the information is not available.  In this case, Quarkus won't be able to register for reflection in the required classes automatically."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:474
msgid "This leads us to our next section."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/resteasy.adoc:475
#, no-wrap
msgid "Using response"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:478
msgid "Let us create the `Legume` class, which will be serialized as JSON, following the same model as for our `Fruit` class:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:484
#, no-wrap
msgid "public class Legume {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:490
#, no-wrap
msgid ""
"    public Legume() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:496
#, no-wrap
msgid ""
"    public Legume(String name, String description) {\n"
"        this.name = name;\n"
"        this.description = description;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:499
msgid "Now let's create a `LegumeResource` REST service with only one method that returns the list of legumes."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:501
msgid "This method returns a `Response` and not a list of `Legume`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:509
#, no-wrap
msgid ""
"import java.util.Collections;\n"
"import java.util.LinkedHashSet;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:516
#, no-wrap
msgid ""
"import jakarta.ws.rs.Consumes;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
"import jakarta.ws.rs.core.Response;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:521
#, no-wrap
msgid ""
"@Path(\"/legumes\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"public class LegumeResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:523
#, no-wrap
msgid "    private Set<Legume> legumes = Collections.synchronizedSet(new LinkedHashSet<>());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:528
#, no-wrap
msgid ""
"    public LegumeResource() {\n"
"        legumes.add(new Legume(\"Carrot\", \"Root vegetable, usually orange\"));\n"
"        legumes.add(new Legume(\"Zucchini\", \"Summer squash\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:534
#, no-wrap
msgid ""
"    @GET\n"
"    public Response list() {\n"
"        return Response.ok(legumes).build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:539
msgid "Now, let us add a simple web page to display our list of legumes.  In the `src/main/resources/META-INF/resources` directory, add a `legumes.html` file with the content from this {quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/legumes.html[legumes.html] file in it."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:541
msgid "Open a browser to http://localhost:8080/legumes.html, and you will see our list of legumes."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:543
msgid "The interesting part starts when running the application as a native executable:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:547
#: upstream/_versions/main/guides/resteasy.adoc:587
msgid "create the native executable with:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:550
#: upstream/_versions/main/guides/resteasy.adoc:590
msgid "execute it with `./target/rest-json-quickstart-1.0.0-SNAPSHOT-runner`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:551
#: upstream/_versions/main/guides/resteasy.adoc:591
msgid "open a browser and go to http://localhost:8080/legumes.html"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:555
msgid "There are no legumes there."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:558
msgid "As mentioned above, the issue is that Quarkus could not determine the `Legume` class, which will require some reflection by analyzing the REST endpoints.  The JSON serialization library tries to get the list of fields of `Legume` and gets an empty list, so it does not serialize the fields' data."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/resteasy.adoc:563
msgid "At the moment, when JSON-B or Jackson tries to get the list of fields of a class, if the class is not registered for reflection, no exception will be thrown.  GraalVM will return an empty list of fields."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/resteasy.adoc:565
msgid "Hopefully, this will change in the future and make the error more obvious."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:568
msgid "We can register `Legume` for reflection manually by adding the `@RegisterForReflection` annotation on our `Legume` class:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:571
#, no-wrap
msgid "import io.quarkus.runtime.annotations.RegisterForReflection;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:576
#, no-wrap
msgid ""
"@RegisterForReflection\n"
"public class Legume {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:580
msgid "The `@RegisterForReflection` annotation instructs Quarkus to keep the class and its members during the native compilation.  More details about the `@RegisterForReflection` annotation can be found on the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:582
msgid "Let us do that and follow the same steps as before:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:586
msgid "hit `Ctrl+C` to stop the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:595
msgid "This time, you can see our list of legumes."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/resteasy.adoc:597
#, no-wrap
msgid "Being reactive"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/resteasy.adoc:602
msgid "For reactive workloads, please always use xref:resteasy-reactive.adoc[RESTEasy Reactive]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:606
msgid "You can return _reactive types_ to handle asynchronous processing.  Quarkus recommends the usage of https://smallrye.io/smallrye-mutiny[Mutiny] to write reactive and asynchronous code."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:608
msgid "To integrate Mutiny and RESTEasy, you need to add the `quarkus-resteasy-mutiny` dependency to your project:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:616
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-mutiny</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:622
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-resteasy-mutiny\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:625
msgid "Then, your endpoint can return `Uni` or `Multi` instances:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:634
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/{name}\")\n"
"public Uni<Fruit> getOne(@PathParam String name) {\n"
"    return findByName(name);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:639
#, no-wrap
msgid ""
"@GET\n"
"public Multi<Fruit> getAll() {\n"
"    return findAll();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:643
msgid "Use `Uni` when you have a single result.  Use `Multi` when you have multiple items that may be emitted asynchronously."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:645
msgid "You can use `Uni` and `Response` to return asynchronous HTTP responses: `Uni<Response>`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:647
msgid "More details about Mutiny can be found in xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/resteasy.adoc:648
#, no-wrap
msgid "HTTP filters and interceptors"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:654
msgid "Both HTTP request and response can be intercepted by providing `ContainerRequestFilter` or `ContainerResponseFilter` implementations respectively.  These filters are suitable for processing the metadata associated with a message: HTTP headers, query parameters, media type, and other metadata.  They also can abort the request processing, for instance, when the user does not have permission to access the endpoint."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:656
msgid "Let's use `ContainerRequestFilter` to add logging capability to our service. We can do that by implementing `ContainerRequestFilter` and annotating it with the `@Provider` annotation:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:663
#, no-wrap
msgid ""
"import io.vertx.core.http.HttpServerRequest;\n"
"import org.jboss.logging.Logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:669
#, no-wrap
msgid ""
"import jakarta.ws.rs.container.ContainerRequestContext;\n"
"import jakarta.ws.rs.container.ContainerRequestFilter;\n"
"import jakarta.ws.rs.core.Context;\n"
"import jakarta.ws.rs.core.UriInfo;\n"
"import jakarta.ws.rs.ext.Provider;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:672
#, no-wrap
msgid ""
"@Provider\n"
"public class LoggingFilter implements ContainerRequestFilter {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:674
#, no-wrap
msgid "    private static final Logger LOG = Logger.getLogger(LoggingFilter.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:677
#, no-wrap
msgid ""
"    @Context\n"
"    UriInfo info;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:680
#, no-wrap
msgid ""
"    @Context\n"
"    HttpServerRequest request;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:683
#, no-wrap
msgid ""
"    @Override\n"
"    public void filter(ContainerRequestContext context) {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:687
#, no-wrap
msgid ""
"        final String method = context.getMethod();\n"
"        final String path = info.getPath();\n"
"        final String address = request.remoteAddress().toString();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:691
#, no-wrap
msgid ""
"        LOG.infof(\"Request %s %s from IP %s\", method, path, address);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:694
msgid "Now, whenever a REST method is invoked, the request will be logged into the console:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:701
#, no-wrap
msgid ""
"2019-06-05 12:44:26,526 INFO  [org.acm.res.jso.LoggingFilter] (executor-thread-1) Request GET /legumes from IP 127.0.0.1\n"
"2019-06-05 12:49:19,623 INFO  [org.acm.res.jso.LoggingFilter] (executor-thread-1) Request GET /fruits from IP 0:0:0:0:0:0:0:1\n"
"2019-06-05 12:50:44,019 INFO  [org.acm.res.jso.LoggingFilter] (executor-thread-1) Request POST /fruits from IP 0:0:0:0:0:0:0:1\n"
"2019-06-05 12:51:04,485 INFO  [org.acm.res.jso.LoggingFilter] (executor-thread-1) Request GET /fruits from IP 127.0.0.1\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/resteasy.adoc:703
#, no-wrap
msgid "CORS filter"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:708
msgid "link:https://en.wikipedia.org/wiki/Cross-origin_resource_sharing[Cross-origin resource sharing] (CORS) is a mechanism that allows restricted resources on a web page to be requested from another domain outside the domain from which the first resource was served."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:711
msgid "Quarkus includes a CORS filter at the HTTP layer level.  For more information about the CORS filters and their usage, see the xref:security-cors.adoc#cors-filter[CORS filter] section of the Quarkus \"Cross-origin resource sharing\" guide."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/resteasy.adoc:712
#, no-wrap
msgid "GZip Support"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:715
msgid "Quarkus comes with GZip support (even though it is not enabled by default). The following configuration knobs allow to configure GZip support."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:720
#, no-wrap
msgid ""
"quarkus.resteasy.gzip.enabled=true // <1>\n"
"quarkus.resteasy.gzip.max-input=10M // <2>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:723
msgid "Enable Gzip support."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:727
msgid "Configure the upper limit on the deflated request body.  This is useful to mitigate potential attacks by limiting their reach. The default value is `10M`.  This configuration option would recognize strings in this format (shown as a regular expression): `[0-9]+[KkMmGgTtPpEeZzYy]?`.  If no suffix is given, assume bytes."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:729
msgid "Once GZip support has been enabled, you can use it on an endpoint by adding the `@org.jboss.resteasy.annotations.GZIP` annotation to your endpoint method."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:732
msgid "There is also the `quarkus.http.enable-compression` configuration property, which enables HTTP response compression globally.  If enabled, a response body is compressed if the `Content-Type` HTTP header is set and the value is a compressed media type configured via the `quarkus.http.compress-media-types` configuration property."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/resteasy.adoc:733
#, no-wrap
msgid "Multipart Support"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:736
msgid "RESTEasy supports multipart via the https://docs.jboss.org/resteasy/docs/4.5.6.Final/userguide/html/Multipart.html[RESTEasy Multipart Provider]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:738
msgid "Quarkus provides an extension called `quarkus-resteasy-multipart` to make things easier for you."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:740
msgid "This extension slightly differs from the RESTEasy default behavior as the default charset (if none is specified in your request) is UTF-8 rather than US-ASCII."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:742
msgid "You can configure this behavior with the following configuration properties:"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/resteasy.adoc:745
#, no-wrap
msgid "Servlet compatibility"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:748
msgid "In Quarkus, RESTEasy can either run directly on top of the Vert.x HTTP server, or on top of Undertow if you have any servlet dependency."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:751
msgid "As a result, certain classes, such as `HttpServletRequest` are not always available for injection.  Most use cases for this particular class are covered by Jakarta REST equivalents, except for getting the remote client's IP."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:757
msgid "RESTEasy comes with a replacement API that you can inject: https://docs.jboss.org/resteasy/docs/4.5.6.Final/javadocs/org/jboss/resteasy/spi/HttpRequest.html[`HttpRequest`], which has the methods https://docs.jboss.org/resteasy/docs/4.5.6.Final/javadocs/org/jboss/resteasy/spi/HttpRequest.html#getRemoteAddress--[`getRemoteAddress()`] and https://docs.jboss.org/resteasy/docs/4.5.6.Final/javadocs/org/jboss/resteasy/spi/HttpRequest.html#getRemoteHost--[`getRemoteHost()`] to solve this problem."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/resteasy.adoc:758
#, no-wrap
msgid "RESTEasy and REST Client interactions"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:762
msgid "In Quarkus, the RESTEasy extension and xref:rest-client.adoc[the REST Client extension] share the same infrastructure.  One important consequence of this consideration is that they share the same list of providers (in the Jakarta REST meaning of the word)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:765
msgid "For instance, if you declare a `WriterInterceptor`, it will, by default, intercept both the servers calls and the client calls, which might not be the desired behavior."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:767
msgid "However, you can change this default behavior and constrain a provider to:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:769
msgid "only consider *server* calls by adding the `@ConstrainedTo(RuntimeType.SERVER)` annotation to your provider;"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:770
msgid "only consider *client* calls by adding the `@ConstrainedTo(RuntimeType.CLIENT)` annotation to your provider."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/resteasy.adoc:771
#, no-wrap
msgid "What's Different from Jakarta EE Development"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/resteasy.adoc:773
#, no-wrap
msgid "No Need for `Application` Class"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:776
msgid "Configuration via an application-supplied subclass of `Application` is supported but not required."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/resteasy.adoc:777
#, no-wrap
msgid "Only a single Jakarta REST application"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:781
msgid "In contrast to Jakarta REST (and RESTeasy) running in a standard servlet container, Quarkus only supports the deployment of a single Jakarta REST application.  If multiple Jakarta REST `Application` classes are defined, the build will fail with the message `Multiple classes have been annotated with @ApplicationPath which is currently not supported`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:784
msgid "If multiple Jakarta REST applications are defined, the property `quarkus.resteasy.ignore-application-classes=true` can be used to ignore all explicit `Application` classes.  This makes all resource-classes available via the application-path as defined by `quarkus.resteasy.path` (default: `/`)."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/resteasy.adoc:785
#, no-wrap
msgid "Support limitations of Jakarta REST application"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:791
msgid "The RESTEasy extension doesn't support the method `getProperties()` of the class `jakarta.ws.rs.core.Application`.  Moreover, it only relies on the methods `getClasses()` and `getSingletons()` to filter out the annotated resource, provider, and feature classes.  It does not filter out the built-in resource, provider, and feature classes and also the resource, provider, and feature classes registered by the other extensions.  Finally, the objects returned by the method `getSingletons()` are ignored, only the classes are taken into account to filter out the resource, provider and feature classes, in other words the method `getSingletons()` is managed the same way as `getClasses()`."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/resteasy.adoc:792
#, no-wrap
msgid "Lifecycle of Resources"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:796
msgid "In Quarkus, all Jakarta REST resources are treated as CDI beans.  It's possible to inject other beans via `@Inject`, bind interceptors using bindings such as `@Transactional`, define `@PostConstruct` callbacks, etc."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:799
msgid "If no scope annotation is declared on the resource class, then the scope is defaulted.  The `quarkus.resteasy.singleton-resources` property can control the default scope."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:801
msgid "If set to `true` (default), then a *single instance* of a resource class is created to service all requests (as defined by `@jakarta.inject.Singleton`)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:803
msgid "If set to `false`, then a *new instance* of the resource class is created per each request."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:805
msgid "An explicit CDI scope annotation (`@RequestScoped`, `@ApplicationScoped`, etc.) always overrides the default behavior and specifies the lifecycle of resource instances."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/resteasy.adoc:806
#, no-wrap
msgid "Include/Exclude Jakarta REST classes with build time conditions"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:810
msgid "Quarkus enables the inclusion or exclusion of Jakarta REST Resources, Providers and Features directly thanks to build time conditions in the same that it does for CDI beans.  Thus, the various Jakarta REST classes can be annotated with profile conditions (`@io.quarkus.arc.profile.IfBuildProfile` or `@io.quarkus.arc.profile.UnlessBuildProfile`) and/or with property conditions (`io.quarkus.arc.properties.IfBuildProperty` or `io.quarkus.arc.properties.UnlessBuildProperty`) to indicate to Quarkus at build time under which conditions these Jakarta REST classes should be included."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:812
msgid "In the following example, Quarkus includes the endpoint `sayHello` if and only if the build profile `app1` has been enabled."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:817
#, no-wrap
msgid ""
"@IfBuildProfile(\"app1\")\n"
"public class ResourceForApp1Only {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/resteasy.adoc:824
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"sayHello\")\n"
"    public String sayHello() {\n"
"        return \"hello\";\n"
"     }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:827
msgid "Please note that if a Jakarta REST Application has been detected and the method `getClasses()` and/or `getSingletons()` has/have been overridden, Quarkus will ignore the build time conditions and consider only what has been defined in the Jakarta REST Application."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/resteasy.adoc:828
#, no-wrap
msgid "Conclusion"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:831
msgid "Creating JSON REST services with Quarkus is easy as it relies on proven and well-known technologies."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:833
msgid "As usual, Quarkus further simplifies things under the hood when running your application as a native executable."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/resteasy.adoc:834
msgid "There is only one thing to remember: if you use `Response` and Quarkus cannot determine the beans that are serialized, you need to annotate them with `@RegisterForReflection`."
msgstr ""
