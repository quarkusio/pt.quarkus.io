# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-29 08:05+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:6
#, no-wrap
msgid "Cross-Site Request Forgery Prevention"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:13
msgid "https://owasp.org/www-community/attacks/csrf[Cross-Site Request Forgery (CSRF)] is an attack that forces an end user to execute unwanted actions on a web application in which they are currently authenticated."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:15
msgid "Quarkus Security provides a CSRF prevention feature which implements https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#double-submit-cookie[Double Submit Cookie] and [CSRF Request Header] techniques."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:18
msgid "`Double Submit Cookie` technique requires that the CSRF token sent as `HTTPOnly`, optionally signed, cookie to the client, and directly embedded in a hidden form input of server-side rendered HTML forms, or submitted as a request header value."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:20
msgid "The extension consists of a xref:resteasy-reactive.adoc[RESTEasy Reactive] server filter which creates and verifies CSRF tokens in `application/x-www-form-urlencoded` and `multipart/form-data` forms and a Qute HTML form parameter provider which supports the xref:qute-reference.adoc#injecting-beans-directly-in-templates[injection of CSRF tokens in Qute templates]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:21
#, no-wrap
msgid "Creating the Project"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:25
msgid "First, we need a new project.  Create a new project with the following command:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:31
msgid "This command generates a project which imports the `csrf-reactive` extension."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:34
msgid "If you already have your Quarkus project configured, you can add the `csrf-reactive` extension to your project by running the following command in your project base directory:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:39
msgid "This will add the following to your build file:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:41
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:47
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-csrf-reactive</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:50
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:53
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-csrf-reactive\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:56
msgid "Next, let's add a `csrfToken.html` Qute template producing an HTML form in the `src/main/resources/templates` folder:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:67
#, no-wrap
msgid ""
"<!DOCTYPE html>\n"
"<html>\n"
"<head>\n"
"<meta charset=\"UTF-8\">\n"
"<title>User Name Input</title>\n"
"</head>\n"
"<body>\n"
"    <h1>User Name Input</h1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:70
#, no-wrap
msgid ""
"    <form action=\"/service/csrfTokenForm\" method=\"post\">\n"
"    \t<input type=\"hidden\" name=\"{inject:csrf.parameterName}\" value=\"{inject:csrf.token}\" />  <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:76
#, no-wrap
msgid ""
"    \t<p>Your Name: <input type=\"text\" name=\"name\" /></p>\n"
"    \t<p><input type=\"submit\" name=\"submit\"/></p>\n"
"    </form>\n"
"</body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:78
msgid "This expression is used to inject a CSRF token into a hidden form field. This token will be verified by the CSRF filter against a CSRF cookie."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:80
msgid "Now let's create a resource class which returns an HTML form and handles form POST requests:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:84
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:183
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:271
#, no-wrap
msgid "package io.quarkus.it.csrf;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:93
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.Consumes;\n"
"import jakarta.ws.rs.FormParam;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.POST;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:96
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:196
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:286
#, no-wrap
msgid ""
"import io.quarkus.qute.Template;\n"
"import io.quarkus.qute.TemplateInstance;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:99
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:199
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:289
#, no-wrap
msgid ""
"@Path(\"/service\")\n"
"public class UserNameResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:102
#, no-wrap
msgid ""
"    @Inject\n"
"    Template csrfToken; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:109
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/csrfTokenForm\")\n"
"    @Produces(MediaType.TEXT_HTML)\n"
"    public TemplateInstance getCsrfTokenForm() {\n"
"        return csrfToken.instance(); <2>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:118
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"/csrfTokenForm\")\n"
"    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String postCsrfTokenForm(@FormParam(\"name\") String userName) {\n"
"        return userName; <3>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:120
msgid "Inject the `csrfToken.html` as a `Template`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:121
msgid "Return the HTML form with a hidden form field containing a CSRF token created by the CSRF filter."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:122
msgid "Handle the POST form request, this method can only be invoked if the CSRF filter has successfully verified the token."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:124
msgid "The form POST request will fail with HTTP status `400` if the filter finds the hidden CSRF form field is missing, the CSRF cookie is missing, or if the CSRF form field and CSRF cookie values do not match."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:126
msgid "At this stage no additional configuration is needed - by default the CSRF form field and cookie name will be set to `csrf-token`, and the filter will verify the token. But you can change these names if you would like:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:131
#, no-wrap
msgid ""
"quarkus.csrf-reactive.form-field-name=csrftoken\n"
"quarkus.csrf-reactive.cookie-name=csrftoken\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:133
#, no-wrap
msgid "Sign CSRF token"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:136
msgid "You can get `HMAC` signatures created for the generated CSRF tokens and have these `HMAC` values stored as CSRF token cookies if you would like to avoid the risk of the attackers recreating the CSRF cookie token. All you need to do is to configure a token signature secret which must be at least 32 characters long:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:140
#, no-wrap
msgid "quarkus.csrf-reactive.token-signature-key=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:142
#, no-wrap
msgid "CSRF Request Header"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:145
msgid "If HTML `form` tags are not used and you need to pass CSRF token as a header, then inject the header name and token, for example, into HTMX:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:150
#, no-wrap
msgid ""
"<body hx-headers='{\"{inject:csrf.headerName}\":\"{inject:csrf.token}\"}'> <1>\n"
"</body>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:152
msgid "This expression is used to inject a CSRF token header and token. This token will be verified by the CSRF filter against a CSRF cookie."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:154
msgid "Default header name is `X-CSRF-TOKEN`, you can customize it with `quarkus.csrf-reactive.token-header-name`, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:158
#, no-wrap
msgid "quarkus.csrf-reactive.token-header-name=CUSTOM-X-CSRF-TOKEN\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:161
msgid "If you need to access the CSRF cookie from JavaScript in order to pass its value as a header, use `{inject:csrf.cookieName}` and `{inject:csrf.headerName}` to inject the cookie name which has to be read as a CSRF header value and allow accessing this cookie:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:165
#, no-wrap
msgid "quarkus.csrf-reactive.cookie-http-only=false\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:167
#, no-wrap
msgid "Cross-origin resource sharing"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:172
msgid "If you would like to enforce CSRF prevention in a Cross-origin environment, please avoid supporting all Origins."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:174
msgid "Restrict supported Origins to trusted Origins only, see xref:security-cors.adoc#cors-filter[CORS filter] section of the \"Cross-origin resource sharing\" guide for more information."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:176
#, no-wrap
msgid "Restrict CSRF token verification"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:179
msgid "Your Jakarta REST endpoint may accept not only HTTP POST requests with `application/x-www-form-urlencoded` or `multipart/form-data` payloads but also payloads with other media types, either on the same or different URL paths, and therefore you would like to avoid verifying the CSRF token in such cases, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:193
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.BadRequestException;\n"
"import jakarta.ws.rs.Consumes;\n"
"import jakarta.ws.rs.FormParam;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.POST;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:202
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:292
#, no-wrap
msgid ""
"    @Inject\n"
"    Template csrfToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:209
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/user\")\n"
"    @Produces(MediaType.TEXT_HTML)\n"
"    public TemplateInstance getCsrfTokenForm() {\n"
"        return csrfToken.instance();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:218
#, no-wrap
msgid ""
"    <1>\n"
"    @POST\n"
"    @Path(\"/user\")\n"
"    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String postCsrfTokenForm(@FormParam(\"name\") String userName) {\n"
"        return userName;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:227
#, no-wrap
msgid ""
"    <2>\n"
"    @POST\n"
"    @Path(\"/user\")\n"
"    @Consumes(MediaType.APPLICATION_JSON)\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String postJson(User user) {\n"
"        return user.name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:236
#, no-wrap
msgid ""
"    <3>\n"
"    @POST\n"
"    @Path(\"/users\")\n"
"    @Consumes(MediaType.APPLICATION_JSON)\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String postJson(User user) {\n"
"        return user.name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:247
#, no-wrap
msgid ""
"    public static class User {\n"
"        private String name;\n"
"        public String getName() {\n"
"            return this.name;\n"
"        }\n"
"        public void setName(String name) {\n"
"            this.name = name;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:249
msgid "POST form request to `/user`, CSRF token verification is enforced by the CSRF filter"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:250
msgid "POST json request to `/user`, CSRF token verification is not needed"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:251
msgid "POST json request to `/users`, CSRF token verification is not needed"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:253
msgid "As you can see a CSRF token verification will be required at the `/service/user` path accepting the `application/x-www-form-urlencoded` payload, but `User` JSON representation posted to both `/service/user` and `/service/users` method will have no CSRF token and therefore the token verification has to be skipped in these cases by restricting it to the specific `/service/user` request path but also allowing not only `application/x-www-form-urlencoded` on this path:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:258
#, no-wrap
msgid ""
"# Verify CSRF token only for the `/service/user` path, ignore other paths such as `/service/users`\n"
"quarkus.csrf-reactive.create-token-path=/service/user\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:262
#, no-wrap
msgid ""
"# If `/service/user` path accepts not only `application/x-www-form-urlencoded` payloads but also other ones such as JSON then allow them\n"
"# Setting this property is not necessary when the token is submitted as a header value\n"
"quarkus.csrf-reactive.require-form-url-encoded=false\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:264
#, no-wrap
msgid "Verify CSRF token in the application code"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:267
msgid "If you prefer to compare the CSRF form field and cookie values in the application code then you can do it as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:283
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.BadRequestException;\n"
"import jakarta.ws.rs.Consumes;\n"
"import jakarta.ws.rs.CookieParam;\n"
"import jakarta.ws.rs.FormParam;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.POST;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.Cookie;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:299
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/csrfTokenForm\")\n"
"    @Produces(MediaType.TEXT_HTML)\n"
"    public TemplateInstance getCsrfTokenForm() {\n"
"        return csrfToken.instance();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:311
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"/csrfTokenForm\")\n"
"    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String postCsrfTokenForm(@CookieParam(\"csrf-token\") Cookie csrfCookie, @FormParam(\"csrf-token\") String formCsrfToken, @FormParam(\"name\") String userName) {\n"
"        if (!csrfCookie.getValue().equals(formCsrfToken)) { <1>\n"
"            throw new BadRequestException();\n"
"        }\n"
"        return userName;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:313
msgid "Compare the CSRF form field and cookie values and fail with HTTP status `400` if they don't match."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:315
msgid "Also disable the token verification in the filter:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:319
#, no-wrap
msgid "quarkus.csrf-reactive.verify-token=false\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:322
#, no-wrap
msgid "Configuration Reference"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:326
#, no-wrap
msgid "References"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:329
msgid "https://owasp.org/www-community/attacks/csrf[OWASP Cross-Site Request Forgery]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:330
msgid "xref:resteasy-reactive.adoc[RESTEasy Reactive]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:331
msgid "xref:qute-reference.adoc[Qute Reference]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:332
msgid "xref:security-cors.adoc#cors-filter[Cross-origin resource sharing]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-csrf-prevention.adoc:332
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr ""
