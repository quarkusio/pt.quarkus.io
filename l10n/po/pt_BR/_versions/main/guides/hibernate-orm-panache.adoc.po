# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:12+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:6
#, no-wrap
msgid "Simplified Hibernate ORM with Panache"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:15
msgid "Hibernate ORM is the de facto Jakarta Persistence (formerly known as JPA) implementation and offers you the full breadth of an Object Relational Mapper.  It makes complex mappings possible, but it does not make simple and common mappings trivial.  Hibernate ORM with Panache focuses on making your entities trivial and fun to write in Quarkus."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:16
#, no-wrap
msgid "First: an example"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:19
msgid "What we're doing in Panache is to allow you to write your Hibernate ORM entities like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:23
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:33
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:172
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:192
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:311
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:347
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:397
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:530
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:781
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:28
#, no-wrap
msgid ""
"public enum Status {\n"
"    Alive,\n"
"    Deceased\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:38
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:177
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:197
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:316
#, no-wrap
msgid ""
"import java.time.LocalDate;\n"
"import java.util.List;\n"
"import jakarta.persistence.Entity;\n"
"import io.quarkus.hibernate.orm.panache.PanacheEntity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:44
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:203
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:322
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:48
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:326
#, no-wrap
msgid ""
"    public static Person findByName(String name){\n"
"        return find(\"name\", name).firstResult();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:52
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:330
#, no-wrap
msgid ""
"    public static List<Person> findAlive(){\n"
"        return list(\"status\", Status.Alive);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:57
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:335
#, no-wrap
msgid ""
"    public static void deleteStefs(){\n"
"        delete(\"name\", \"Stef\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:61
msgid "You have noticed how much more compact and readable the code is? Does this look interesting? Read on!"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:63
msgid "the `list()` method might be surprising at first. It takes fragments of HQL (JP-QL) queries and contextualizes the rest. That makes for very concise but yet readable code."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:66
msgid "what was described above is essentially the link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[active record pattern], sometimes just called the entity pattern.  Hibernate with Panache also allows for the use of the more classical link:https://martinfowler.com/eaaCatalog/repository.html[repository pattern] via `PanacheRepository`."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:67
#, no-wrap
msgid "Solution"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:71
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:73
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:75
msgid "The solution is located in the `hibernate-orm-panache-quickstart` link:{quickstarts-tree-url}/hibernate-orm-panache-quickstart[directory]."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:79
msgid "If your project is already configured to use other annotation processors, you will need to additionally add the Panache annotation processor:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:81
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:123
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:637
#, no-wrap
msgid "pom.xml"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:98
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-compiler-plugin</artifactId>\n"
"    <version>${compiler-plugin.version}</version>\n"
"    <configuration>\n"
"        <parameters>${maven.compiler.parameters}</parameters>\n"
"        <annotationProcessorPaths>\n"
"            <!-- Your existing annotation processor(s)... -->\n"
"            <path>\n"
"                <groupId>io.quarkus</groupId>\n"
"                <artifactId>quarkus-panache-common</artifactId>\n"
"                <version>${quarkus.platform.version}</version>\n"
"            </path>\n"
"        </annotationProcessorPaths>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:101
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:139
#, no-wrap
msgid "build.gradle"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:104
#, no-wrap
msgid "annotationProcessor(\"io.quarkus:quarkus-panache-common\")\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:107
#, no-wrap
msgid "Setting up and configuring Hibernate ORM with Panache"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:110
msgid "To get started:"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:112
msgid "add your settings in `{config-file}`"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:113
msgid "annotate your entities with `@Entity`"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:114
msgid "make your entities extend `PanacheEntity` (optional if you are using the repository pattern)"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:116
msgid "Follow the xref:hibernate-orm.adoc#setting-up-and-configuring-hibernate-orm[Hibernate set-up guide for all configuration]."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:118
msgid "In your build file, add the following dependencies:"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:120
msgid "the Hibernate ORM with Panache extension"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:121
msgid "your JDBC driver extension (`quarkus-jdbc-postgresql`, `quarkus-jdbc-h2`, `quarkus-jdbc-mariadb`, ...)"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:130
#, no-wrap
msgid ""
"<!-- Hibernate ORM specific dependencies -->\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-hibernate-orm-panache</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:136
#, no-wrap
msgid ""
"<!-- JDBC driver dependencies -->\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-jdbc-postgresql</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:143
#, no-wrap
msgid ""
"// Hibernate ORM specific dependencies\n"
"implementation(\"io.quarkus:quarkus-hibernate-orm-panache\")\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:146
#, no-wrap
msgid ""
"// JDBC driver dependencies\n"
"implementation(\"io.quarkus:quarkus-jdbc-postgresql\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:149
msgid "Then add the relevant configuration properties in `{config-file}`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:157
#, no-wrap
msgid ""
"# configure your datasource\n"
"quarkus.datasource.db-kind = postgresql\n"
"quarkus.datasource.username = sarah\n"
"quarkus.datasource.password = connor\n"
"quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/mydatabase\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:160
#, no-wrap
msgid ""
"# drop and create the database at startup (use `update` to only update the schema)\n"
"quarkus.hibernate-orm.database.generation = drop-and-create\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:162
#, no-wrap
msgid "Solution 1: using the active record pattern"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:164
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:340
#, no-wrap
msgid "Defining your entity"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:168
msgid "To define a Panache entity, simply extend `PanacheEntity`, annotate it with `@Entity` and add your columns as public fields:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:184
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:188
msgid "You can put all your Jakarta Persistence column annotations on the public fields. If you need a field to not be persisted, use the `@Transient` annotation on it. If you need to write accessors, you can:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:208
#, no-wrap
msgid ""
"    // return name as uppercase in the model\n"
"    public String getName(){\n"
"        return name.toUpperCase();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:214
#, no-wrap
msgid ""
"    // store all names in lowercase in the DB\n"
"    public void setName(String name){\n"
"        this.name = name.toLowerCase();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:219
msgid "And thanks to our field access rewrite, when your users read `person.name` they will actually call your `getName()` accessor, and similarly for field writes and the setter.  This allows for proper encapsulation at runtime as all fields calls will be replaced by the corresponding getter/setter calls."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:220
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:438
#, no-wrap
msgid "Most useful operations"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:223
msgid "Once you have written your entity, here are the most common operations you will be able to perform:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:230
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:448
#, no-wrap
msgid ""
"import java.time.LocalDate;\n"
"import java.time.Month;\n"
"import java.util.List;\n"
"import java.util.Optional;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:236
#, no-wrap
msgid ""
"// creating a person\n"
"Person person = new Person();\n"
"person.name = \"Stef\";\n"
"person.birth = LocalDate.of(1910, Month.FEBRUARY, 1);\n"
"person.status = Status.Alive;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:239
#, no-wrap
msgid ""
"// persist it\n"
"person.persist();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:242
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:460
#, no-wrap
msgid ""
"// note that once persisted, you don't need to explicitly save your entity: all\n"
"// modifications are automatically persisted on transaction commit.\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:248
#, no-wrap
msgid ""
"// check if it is persistent\n"
"if(person.isPersistent()){\n"
"    // delete it\n"
"    person.delete();\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:251
#, no-wrap
msgid ""
"// getting a list of all Person entities\n"
"List<Person> allPersons = Person.listAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:254
#, no-wrap
msgid ""
"// finding a specific person by ID\n"
"person = Person.findById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:258
#, no-wrap
msgid ""
"// finding a specific person by ID via an Optional\n"
"Optional<Person> optional = Person.findByIdOptional(personId);\n"
"person = optional.orElseThrow(() -> new NotFoundException());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:261
#, no-wrap
msgid ""
"// finding all living persons\n"
"List<Person> livingPersons = Person.list(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:264
#, no-wrap
msgid ""
"// counting all persons\n"
"long countAll = Person.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:267
#, no-wrap
msgid ""
"// counting all living persons\n"
"long countAlive = Person.count(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:270
#, no-wrap
msgid ""
"// delete all living persons\n"
"Person.delete(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:273
#, no-wrap
msgid ""
"// delete all persons\n"
"Person.deleteAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:276
#, no-wrap
msgid ""
"// delete by id\n"
"boolean deleted = Person.deleteById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:279
#, no-wrap
msgid ""
"// set the name of all living persons to 'Mortal'\n"
"Person.update(\"name = 'Mortal' where status = ?1\", Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:283
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:501
msgid "All `list` methods have equivalent `stream` versions."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:289
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:507
#, no-wrap
msgid ""
"import java.util.List;\n"
"import java.util.stream.Collectors;\n"
"import java.util.stream.Stream;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:296
#, no-wrap
msgid ""
"try (Stream<Person> persons = Person.streamAll()) {\n"
"    List<String> namesButEmmanuels = persons\n"
"        .map(p -> p.name.toLowerCase() )\n"
"        .filter( n -> ! \"emmanuel\".equals(n) )\n"
"        .collect(Collectors.toList());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:301
msgid "The `stream` methods require a transaction to work. + As they perform I/O operations, they should be closed via the `close()` method or via a try-with-resource to close the underlying `ResultSet`.  If not, you will see warnings from Agroal that will close the underlying `ResultSet` for you."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:302
#, no-wrap
msgid "Adding entity methods"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:307
msgid "Add custom queries on your entities inside the entities themselves.  That way, you and your co-workers can find them easily, and queries are co-located with the object they operate on.  Adding them as static methods in your entity class is the Panache Active Record way."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:337
#, no-wrap
msgid "Solution 2: using the repository pattern"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:343
msgid "When using the repository pattern, you can define your entities as regular Jakarta Persistence entities."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:351
#, no-wrap
msgid ""
"import jakarta.persistence.GeneratedValue;\n"
"import jakarta.persistence.Id;\n"
"import java.time.LocalDate;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:358
#, no-wrap
msgid ""
"@Entity\n"
"public class Person {\n"
"    @Id @GeneratedValue private Long id;\n"
"    private String name;\n"
"    private LocalDate birth;\n"
"    private Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:384
#, no-wrap
msgid ""
"    public Long getId(){\n"
"        return id;\n"
"    }\n"
"    public void setId(Long id){\n"
"        this.id = id;\n"
"    }\n"
"    public String getName() {\n"
"        return name;\n"
"    }\n"
"    public void setName(String name) {\n"
"        this.name = name;\n"
"    }\n"
"    public LocalDate getBirth() {\n"
"        return birth;\n"
"    }\n"
"    public void setBirth(LocalDate birth) {\n"
"        this.birth = birth;\n"
"    }\n"
"    public Status getStatus() {\n"
"        return status;\n"
"    }\n"
"    public void setStatus(Status status) {\n"
"        this.status = status;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:388
msgid "If you don't want to bother defining getters/setters for your entities, you can make them extend `PanacheEntityBase` and Quarkus will generate them for you. You can even extend `PanacheEntity` and take advantage of the default ID it provides."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:389
#, no-wrap
msgid "Defining your repository"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:393
msgid "When using Repositories, you get the exact same convenient methods as with the active record pattern, injected in your Repository, by making them implements `PanacheRepository`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:399
#, no-wrap
msgid "import io.quarkus.hibernate.orm.panache.PanacheRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:402
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:405
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheRepository<Person> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:407
#, no-wrap
msgid "   // put your custom logic here as instance methods\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:411
#, no-wrap
msgid ""
"   public Person findByName(String name){\n"
"       return find(\"name\", name).firstResult();\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:415
#, no-wrap
msgid ""
"   public List<Person> findAlive(){\n"
"       return list(\"status\", Status.Alive);\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:420
#, no-wrap
msgid ""
"   public void deleteStefs(){\n"
"       delete(\"name\", \"Stef\");\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:424
msgid "All the operations that are defined on `PanacheEntityBase` are available on your repository, so using it is exactly the same as using the active record pattern, except you need to inject it:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:428
#, no-wrap
msgid "import jakarta.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:431
#, no-wrap
msgid ""
"@Inject\n"
"PersonRepository personRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:436
#, no-wrap
msgid ""
"@GET\n"
"public long count(){\n"
"    return personRepository.count();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:441
msgid "Once you have written your repository, here are the most common operations you will be able to perform:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:454
#, no-wrap
msgid ""
"// creating a person\n"
"Person person = new Person();\n"
"person.setName(\"Stef\");\n"
"person.setBirth(LocalDate.of(1910, Month.FEBRUARY, 1));\n"
"person.setStatus(Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:457
#, no-wrap
msgid ""
"// persist it\n"
"personRepository.persist(person);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:466
#, no-wrap
msgid ""
"// check if it is persistent\n"
"if(personRepository.isPersistent(person)){\n"
"    // delete it\n"
"    personRepository.delete(person);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:469
#, no-wrap
msgid ""
"// getting a list of all Person entities\n"
"List<Person> allPersons = personRepository.listAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:472
#, no-wrap
msgid ""
"// finding a specific person by ID\n"
"person = personRepository.findById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:476
#, no-wrap
msgid ""
"// finding a specific person by ID via an Optional\n"
"Optional<Person> optional = personRepository.findByIdOptional(personId);\n"
"person = optional.orElseThrow(() -> new NotFoundException());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:479
#, no-wrap
msgid ""
"// finding all living persons\n"
"List<Person> livingPersons = personRepository.list(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:482
#, no-wrap
msgid ""
"// counting all persons\n"
"long countAll = personRepository.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:485
#, no-wrap
msgid ""
"// counting all living persons\n"
"long countAlive = personRepository.count(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:488
#, no-wrap
msgid ""
"// delete all living persons\n"
"personRepository.delete(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:491
#, no-wrap
msgid ""
"// delete all persons\n"
"personRepository.deleteAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:494
#, no-wrap
msgid ""
"// delete by id\n"
"boolean deleted = personRepository.deleteById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:497
#, no-wrap
msgid ""
"// set the name of all living persons to 'Mortal'\n"
"personRepository.update(\"name = 'Mortal' where status = ?1\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:513
#, no-wrap
msgid ""
"Stream<Person> persons = personRepository.streamAll();\n"
"List<String> namesButEmmanuels = persons\n"
"    .map(p -> p.name.toLowerCase() )\n"
"    .filter( n -> ! \"emmanuel\".equals(n) )\n"
"    .collect(Collectors.toList());\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:516
msgid "The `stream` methods require a transaction to work."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:520
msgid "The rest of the documentation show usages based on the active record pattern only, but keep in mind that they can be performed with the repository pattern as well.  The repository pattern examples have been omitted for brevity."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:521
#, no-wrap
msgid "Writing a Jakarta REST resource"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:524
msgid "First, include one of the RESTEasy Reactive extensions to enable Jakarta REST endpoints, for example, add the `io.quarkus:quarkus-resteasy-reactive-jackson` dependency for Jakarta REST and JSON support."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:526
msgid "Then, you can create the following resource to create/read/update/delete your Person entity:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:544
#, no-wrap
msgid ""
"import java.net.URI;\n"
"import java.util.List;\n"
"import jakarta.transaction.Transactional;\n"
"import jakarta.ws.rs.Consumes;\n"
"import jakarta.ws.rs.DELETE;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.NotFoundException;\n"
"import jakarta.ws.rs.POST;\n"
"import jakarta.ws.rs.PUT;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
"import jakarta.ws.rs.core.Response;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:549
#, no-wrap
msgid ""
"@Path(\"/persons\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"public class PersonResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:554
#, no-wrap
msgid ""
"    @GET\n"
"    public List<Person> list() {\n"
"        return Person.listAll();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:560
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/{id}\")\n"
"    public Person get(Long id) {\n"
"        return Person.findById(id);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:567
#, no-wrap
msgid ""
"    @POST\n"
"    @Transactional\n"
"    public Response create(Person person) {\n"
"        person.persist();\n"
"        return Response.created(URI.create(\"/persons/\" + person.id)).build();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:576
#, no-wrap
msgid ""
"    @PUT\n"
"    @Path(\"/{id}\")\n"
"    @Transactional\n"
"    public Person update(Long id, Person person) {\n"
"        Person entity = Person.findById(id);\n"
"        if(entity == null) {\n"
"            throw new NotFoundException();\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:579
#, no-wrap
msgid ""
"        // map all fields from the person parameter to the existing entity\n"
"        entity.name = person.name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:582
#, no-wrap
msgid ""
"        return entity;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:593
#, no-wrap
msgid ""
"    @DELETE\n"
"    @Path(\"/{id}\")\n"
"    @Transactional\n"
"    public void delete(Long id) {\n"
"        Person entity = Person.findById(id);\n"
"        if(entity == null) {\n"
"            throw new NotFoundException();\n"
"        }\n"
"        entity.delete();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:599
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/search/{name}\")\n"
"    public Person search(String name) {\n"
"        return Person.findByName(name);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:606
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/count\")\n"
"    public Long count() {\n"
"        return Person.count();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:610
msgid "Be careful to use the `@Transactional` annotation on the operations that modify the database, you can add the annotation at the class level for simplicity purpose."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:612
msgid "To make it easier to showcase some capabilities of Hibernate ORM with Panache on Quarkus with Dev mode, some test data should be inserted into the database by adding the following content to a new file named src/main/resources/import.sql:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:617
#, no-wrap
msgid ""
"INSERT INTO person (id, birth, name, status) VALUES (1, '1995-09-12', 'Emily Brown', 0);\n"
"ALTER SEQUENCE person_seq RESTART WITH 2;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:620
msgid "If you would like to initialize the DB when you start the Quarkus app in your production environment, add `quarkus.hibernate-orm.database.generation=drop-and-create` to the Quarkus startup options in addition to `import.sql`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:622
msgid "After that, you can see the people list and add new person as followings:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:627
#, no-wrap
msgid ""
"$ curl -w \"\\n\" http://localhost:8080/persons\n"
"[{\"id\":1,\"name\":\"Emily Brown\",\"birth\":\"1995-09-12\",\"status\":\"Alive\"}]\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:629
#, no-wrap
msgid "$ curl -X POST -H \"Content-Type: application/json\" -d '{\"name\" : \"William Davis\" , \"birth\" : \"1988-07-04\", \"status\" : \"Alive\"}' http://localhost:8080/persons\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:632
#, no-wrap
msgid ""
"$ curl -w \"\\n\" http://localhost:8080/persons\n"
"[{\"id\":1,\"name\":\"Emily Brown\",\"birth\":\"1995-09-12\",\"status\":\"Alive\"}, {\"id\":2,\"name\":\"William Davis\",\"birth\":\"1988-07-04\",\"status\":\"Alive\"}]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:635
msgid "If you see the Person object as Person<1>, then the object has not been converted. In this case, add the dependency `quarkus-resteasy-reactive-jackson` in `pom.xml`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:643
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-reactive-jackson</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:645
#, no-wrap
msgid "Advanced Query"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:647
#, no-wrap
msgid "Paging"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:651
msgid "You should only use `list` and `stream` methods if your table contains small enough data sets. For larger data sets you can use the `find` method equivalents, which return a `PanacheQuery` on which you can do paging:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:657
#, no-wrap
msgid ""
"import io.quarkus.hibernate.orm.panache.PanacheQuery;\n"
"import io.quarkus.panache.common.Page;\n"
"import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:660
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:699
#, no-wrap
msgid ""
"// create a query for all living persons\n"
"PanacheQuery<Person> livingPersons = Person.find(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:663
#, no-wrap
msgid ""
"// make it use pages of 25 entries at a time\n"
"livingPersons.page(Page.ofSize(25));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:666
#, no-wrap
msgid ""
"// get the first page\n"
"List<Person> firstPage = livingPersons.list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:669
#, no-wrap
msgid ""
"// get the second page\n"
"List<Person> secondPage = livingPersons.nextPage().list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:672
#, no-wrap
msgid ""
"// get page 7\n"
"List<Person> page7 = livingPersons.page(Page.of(7, 25)).list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:675
#, no-wrap
msgid ""
"// get the number of pages\n"
"int numberOfPages = livingPersons.pageCount();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:678
#, no-wrap
msgid ""
"// get the total number of entities returned by this query without paging\n"
"long count = livingPersons.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:684
#, no-wrap
msgid ""
"// and you can chain methods of course\n"
"return Person.find(\"status\", Status.Alive)\n"
"    .page(Page.ofSize(25))\n"
"    .nextPage()\n"
"    .stream()\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:687
msgid "The `PanacheQuery` type has many other methods to deal with paging and returning streams."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:688
#, no-wrap
msgid "Using a range instead of pages"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:691
msgid "`PanacheQuery` also allows range-based queries."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:696
#, no-wrap
msgid ""
"import io.quarkus.hibernate.orm.panache.PanacheQuery;\n"
"import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:702
#, no-wrap
msgid ""
"// make it use a range: start at index 0 until index 24 (inclusive).\n"
"livingPersons.range(0, 24);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:705
#, no-wrap
msgid ""
"// get the range\n"
"List<Person> firstRange = livingPersons.list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:708
#, no-wrap
msgid ""
"// to get the next range, you need to call range again\n"
"List<Person> secondRange = livingPersons.range(25, 49).list();\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:714
msgid "You cannot mix ranges and pages: if you use a range, all methods that depend on having a current page will throw an `UnsupportedOperationException`; you can switch back to paging using `page(Page)` or `page(int, int)`."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:716
#, no-wrap
msgid "Sorting"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:719
msgid "All methods accepting a query string also accept the following simplified query form:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:723
#, no-wrap
msgid "List<Person> persons = Person.list(\"order by name,birth\");\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:726
msgid "But these methods also accept an optional `Sort` parameter, which allows you to abstract your sorting:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:730
#, no-wrap
msgid "import io.quarkus.panache.common.Sort;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:732
#, no-wrap
msgid "List<Person> persons = Person.list(Sort.by(\"name\").and(\"birth\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:735
#, no-wrap
msgid ""
"// and with more restrictions\n"
"List<Person> persons = Person.list(\"status\", Sort.by(\"name\").and(\"birth\"), Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:738
#, no-wrap
msgid ""
"// and list first the entries with null values in the field \"birth\"\n"
"List<Person> persons = Person.list(Sort.by(\"birth\", Sort.NullPrecedence.NULLS_FIRST));\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:741
msgid "The `Sort` class has plenty of methods for adding columns and specifying sort direction or the null precedence."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:742
#, no-wrap
msgid "Simplified queries"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:746
msgid "Normally, HQL queries are of this form: `from EntityName [where ...] [order by ...]`, with optional elements at the end."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:748
msgid "If your select query does not start with `from`, we support the following additional forms:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:750
msgid "`order by ...` which will expand to `from EntityName order by ...`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:751
msgid "`<singleColumnName>` (and single parameter) which will expand to `from EntityName where <singleColumnName> = ?`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:752
msgid "`<query>` will expand to `from EntityName where <query>`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:754
msgid "If your update query does not start with `update`, we support the following additional forms:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:756
msgid "`from EntityName ...` which will expand to `update EntityName ...`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:757
msgid "`set? <singleColumnName>` (and single parameter) which will expand to `update EntityName set <singleColumnName> = ?`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:758
msgid "`set? <update-query>` will expand to `update EntityName set <update-query>`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:760
msgid "If your delete query does not start with `delete`, we support the following additional forms:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:762
msgid "`from EntityName ...` which will expand to `delete from EntityName ...`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:763
msgid "`<singleColumnName>` (and single parameter) which will expand to `delete from EntityName where <singleColumnName> = ?`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:764
msgid "`<query>` will expand to `delete from EntityName where <query>`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:767
msgid "You can also write your queries in plain link:{hibernate-orm-docs-url}#hql[HQL]:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:772
#, no-wrap
msgid ""
"Order.find(\"select distinct o from Order o left join fetch o.lineItems\");\n"
"Order.update(\"update Person set name = 'Mortal' where status = ?\", Status.Alive);\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:774
#, no-wrap
msgid "Named queries"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:777
msgid "You can reference a named query instead of a (simplified) HQL query by prefixing its name with the '#' character. You can also use named queries for count, update and delete queries."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:786
#, no-wrap
msgid ""
"import java.time.LocalDate;\n"
"import jakarta.persistence.Entity;\n"
"import jakarta.persistence.NamedQueries;\n"
"import jakarta.persistence.NamedQuery;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:789
#, no-wrap
msgid ""
"import io.quarkus.hibernate.orm.panache.PanacheEntity;\n"
"import io.quarkus.panache.common.Parameters;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:797
#, no-wrap
msgid ""
"@Entity\n"
"@NamedQueries({\n"
"    @NamedQuery(name = \"Person.getByName\", query = \"from Person where name = ?1\"),\n"
"    @NamedQuery(name = \"Person.countByStatus\", query = \"select count(*) from Person p where p.status = :status\"),\n"
"    @NamedQuery(name = \"Person.updateStatusById\", query = \"update Person p set p.status = :status where p.id = :id\"),\n"
"    @NamedQuery(name = \"Person.deleteById\", query = \"delete from Person p where p.id = ?1\")\n"
"})\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:802
#, no-wrap
msgid ""
"public class Person extends PanacheEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:806
#, no-wrap
msgid ""
"    public static Person findByName(String name){\n"
"        return find(\"#Person.getByName\", name).firstResult();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:810
#, no-wrap
msgid ""
"    public static long countByStatus(Status status) {\n"
"        return count(\"#Person.countByStatus\", Parameters.with(\"status\", status).map());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:814
#, no-wrap
msgid ""
"    public static long updateStatusById(Status status, long id) {\n"
"        return update(\"#Person.updateStatusById\", Parameters.with(\"status\", status).and(\"id\", id));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:819
#, no-wrap
msgid ""
"    public static long deleteById(long id) {\n"
"        return delete(\"#Person.deleteById\", id);\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:825
msgid "Named queries can only be defined inside your Jakarta Persistence entity classes (being the Panache entity class, or the repository parameterized type), or on one of its super classes."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:827
#, no-wrap
msgid "Query parameters"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:830
msgid "You can pass query parameters by index (1-based) as shown below:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:834
#, no-wrap
msgid "Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:837
msgid "Or by name using a `Map`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:842
#, no-wrap
msgid ""
"import java.util.HashMap;\n"
"import java.util.Map;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:847
#, no-wrap
msgid ""
"Map<String, Object> params = new HashMap<>();\n"
"params.put(\"name\", \"stef\");\n"
"params.put(\"status\", Status.Alive);\n"
"Person.find(\"name = :name and status = :status\", params);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:850
msgid "Or using the convenience class `Parameters` either as is or to build a `Map`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:856
#, no-wrap
msgid ""
"// generate a Map\n"
"Person.find(\"name = :name and status = :status\",\n"
"         Parameters.with(\"name\", \"stef\").and(\"status\", Status.Alive).map());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:860
#, no-wrap
msgid ""
"// use it as-is\n"
"Person.find(\"name = :name and status = :status\",\n"
"         Parameters.with(\"name\", \"stef\").and(\"status\", Status.Alive));\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:863
msgid "Every query operation accepts passing parameters by index (`Object...`), or by name (`Map<String,Object>` or `Parameters`)."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:864
#, no-wrap
msgid "Query projection"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:867
msgid "Query projection can be done with the `project(Class)` method on the `PanacheQuery` object that is returned by the `find()` methods."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:869
msgid "You can use it to restrict which fields will be returned by the database."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:873
msgid "Hibernate will use **DTO projection** and generate a SELECT clause with the attributes from the projection class.  This is also called **dynamic instantiation** or **constructor expression**, more info can be found on the Hibernate guide: link:{hibernate-orm-docs-url}#hql-select-clause[hql select clause]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:876
msgid "The projection class needs to have a constructor that contains all its attributes, this constructor will be used to instantiate the projection DTO instead of using the entity class. This class must have a matching constructor with all the class attributes as parameters."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:882
#, no-wrap
msgid ""
"import io.quarkus.runtime.annotations.RegisterForReflection;\n"
"import io.quarkus.hibernate.orm.panache.PanacheQuery;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:886
#, no-wrap
msgid ""
"@RegisterForReflection // <1>\n"
"public class PersonName {\n"
"    public final String name; // <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:891
#, no-wrap
msgid ""
"    public PersonName(String name){ // <3>\n"
"        this.name = name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:894
#, no-wrap
msgid ""
"// only 'name' will be loaded from the database\n"
"PanacheQuery<PersonName> query = Person.find(\"status\", Status.Alive).project(PersonName.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:896
msgid "The `@RegisterForReflection` annotation instructs Quarkus to keep the class and its members during the native compilation. More details about the `@RegisterForReflection` annotation can be found on the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:897
msgid "We use public fields here, but you can use private fields and getters/setters if you prefer."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:898
msgid "This constructor will be used by Hibernate, it must be the only constructor in your class and have all the class attributes as parameters."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:905
msgid "The implementation of the `project(Class)` method uses the constructor's parameter names to build the select clause of the query, so the compiler must be configured to store parameter names inside the compiled class.  This is enabled by default if you are using the Quarkus Maven archetype. If you are not using it, add the property `<maven.compiler.parameters>true</maven.compiler.parameters>` to your `pom.xml`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:908
msgid "If you run Java 17+, records are a good fit for projection classes."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:910
msgid "If in the DTO projection object you have a field from a referenced entity, you can use the `@ProjectedFieldName` annotation to provide the path for the SELECT statement."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:915
#, no-wrap
msgid ""
"import jakarta.persistence.ManyToOne;\n"
"import io.quarkus.hibernate.orm.panache.common.ProjectedFieldName;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:924
#, no-wrap
msgid ""
"@Entity\n"
"public class Dog extends PanacheEntity {\n"
"    public String name;\n"
"    public String race;\n"
"    public Double weight;\n"
"    @ManyToOne\n"
"    public Person owner;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:929
#, no-wrap
msgid ""
"@RegisterForReflection\n"
"public class DogDto {\n"
"    public String name;\n"
"    public String ownerName;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:935
#, no-wrap
msgid ""
"    public DogDto(String name, @ProjectedFieldName(\"owner.name\") String ownerName) {  // <1>\n"
"        this.name = name;\n"
"        this.ownerName = ownerName;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:937
#, no-wrap
msgid "PanacheQuery<DogDto> query = Dog.findAll().project(DogDto.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:939
msgid "The `ownerName` DTO constructor's parameter will be loaded from the `owner.name` HQL property."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:942
msgid "It is also possible to specify a HQL query with a select clause. In this case, the projection class must have a constructor matching the values returned by the select clause:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:946
#, no-wrap
msgid "import io.quarkus.runtime.annotations.RegisterForReflection;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:951
#, no-wrap
msgid ""
"@RegisterForReflection \n"
"public class RaceWeight {\n"
"    public final String race;\n"
"    public final Double weight;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:955
#, no-wrap
msgid ""
"    public RaceWeight(String race) {\n"
"        this(race, null);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:961
#, no-wrap
msgid ""
"    public RaceWeight(String race, Double weight) { // <1>\n"
"        this.race = race;\n"
"        this.weight = weight;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:964
#, no-wrap
msgid ""
"// Only the race and the average weight will be loaded\n"
"PanacheQuery<RaceWeight> query = Person.find(\"select d.race, AVG(d.weight) from Dog d group by d.race\").project(RaceWeight.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:966
msgid "Hibernate ORM will use this constructor. When the query has a select clause, it is possible to have multiple constructors."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:970
msgid "It is not possible to have a HQL `select new` query and `.project(Class)` at the same time - you need to pick one approach."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:972
msgid "For example, this will fail:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:976
#, no-wrap
msgid "PanacheQuery<RaceWeight> query = Person.find(\"select new MyView(d.race, AVG(d.weight)) from Dog d group by d.race\").project(AnotherView.class);\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:979
#, no-wrap
msgid "Multiple Persistence Units"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:982
msgid "The support for multiple persistence units is described in detail in xref:hibernate-orm.adoc#multiple-persistence-units[the Hibernate ORM guide]."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:984
msgid "When using Panache, things are simple:"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:986
msgid "A given Panache entity can be attached to only a single persistence unit."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:987
msgid "Given that, Panache already provides the necessary plumbing to transparently find the appropriate `EntityManager` associated to a Panache entity."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:988
#, no-wrap
msgid "Transactions"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:993
msgid "Make sure to wrap methods modifying your database (e.g. `entity.persist()`) within a transaction. Marking a CDI bean method `@Transactional` will do that for you and make that method a transaction boundary. We recommend doing so at your application entry point boundaries like your REST endpoint controllers."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:999
msgid "Hibernate ORM batches changes you make to your entities and sends changes (it is called flush) at the end of the transaction or before a query.  This is usually a good thing as it is more efficient.  But if you want to check optimistic locking failures, do object validation right away or generally want to get immediate feedback, you can force the flush operation by calling `entity.flush()` or even use `entity.persistAndFlush()` to make it a single method call. This will allow you to catch any `PersistenceException` that could occur when Hibernate ORM sends those changes to the database.  Remember, this is less efficient so don't abuse it.  And your transaction still has to be committed."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1001
msgid "Here is an example of the usage of the flush method to allow making a specific action in case of `PersistenceException`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1004
#, no-wrap
msgid "import jakarta.persistence.PersistenceException;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1017
#, no-wrap
msgid ""
"@Transactional\n"
"public void create(Parameter parameter){\n"
"    try {\n"
"        //Here I use the persistAndFlush() shorthand method on a Panache repository to persist to database then flush the changes.\n"
"        return parameterRepository.persistAndFlush(parameter);\n"
"    }\n"
"    catch(PersistenceException pe){\n"
"        LOG.error(\"Unable to create the parameter\", pe);\n"
"        //in case of error, I save it to disk\n"
"        diskPersister.save(parameter);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1019
#, no-wrap
msgid "Lock management"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1022
msgid "Panache provides direct support for database locking with your entity/repository, using `findById(Object, LockModeType)` or `find().withLock(LockModeType)`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1024
msgid "The following examples are for the active record pattern, but the same can be used with repositories."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1025
#, no-wrap
msgid "First: Locking using findById()."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1032
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1053
#, no-wrap
msgid ""
"import jakarta.persistence.LockModeType;\n"
"import jakarta.transaction.Transactional;\n"
"import jakarta.ws.rs.GET;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1034
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1055
#, no-wrap
msgid "public class PersonEndpoint {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1042
#, no-wrap
msgid ""
"    @GET\n"
"    @Transactional\n"
"    public Person findByIdForUpdate(Long id){\n"
"        Person p = Person.findById(id, LockModeType.PESSIMISTIC_WRITE);\n"
"        //do something useful, the lock will be released when the transaction ends.\n"
"        return person;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1044
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1065
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1046
#, no-wrap
msgid "Second: Locking in a find()."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1063
#, no-wrap
msgid ""
"    @GET\n"
"    @Transactional\n"
"    public Person findByNameForUpdate(String name){\n"
"        Person p = Person.find(\"name\", name).withLock(LockModeType.PESSIMISTIC_WRITE).findOne();\n"
"        //do something useful, the lock will be released when the transaction ends.\n"
"        return person;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1068
msgid "Be careful that locks are released when the transaction ends, so the method that invokes the lock query must be annotated with the `@Transactional` annotation."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1069
#, no-wrap
msgid "Custom IDs"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1073
msgid "IDs are often a touchy subject, and not everyone's up for letting them handled by the framework, once again we have you covered."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1076
msgid "You can specify your own ID strategy by extending `PanacheEntityBase` instead of `PanacheEntity`. Then you just declare whatever ID you want as a public field:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1085
#, no-wrap
msgid ""
"import jakarta.persistence.Entity;\n"
"import jakarta.persistence.GeneratedValue;\n"
"import jakarta.persistence.GenerationType;\n"
"import jakarta.persistence.Id;\n"
"import jakarta.persistence.SequenceGenerator;\n"
"import io.quarkus.hibernate.orm.panache.PanacheEntityBase;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1088
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntityBase {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1097
#, no-wrap
msgid ""
"    @Id\n"
"    @SequenceGenerator(\n"
"            name = \"personSequence\",\n"
"            sequenceName = \"person_id_seq\",\n"
"            allocationSize = 1,\n"
"            initialValue = 4)\n"
"    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"personSequence\")\n"
"    public Integer id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1100
#, no-wrap
msgid ""
"    //...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1104
msgid "If you're using repositories, then you will want to extend `PanacheRepositoryBase` instead of `PanacheRepository` and specify your ID type as an extra type parameter:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1109
#, no-wrap
msgid ""
"import io.quarkus.hibernate.orm.panache.PanacheRepositoryBase;\n"
"import jakarta.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1114
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheRepositoryBase<Person,Integer> {\n"
"    //...\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1116
#, no-wrap
msgid "Mocking"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1118
#, no-wrap
msgid "Using the active record pattern"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1123
msgid "If you are using the active record pattern you cannot use Mockito directly as it does not support mocking static methods, but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static methods, including your own."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1125
msgid "Add this dependency to your `pom.xml`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1133
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-panache-mock</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1137
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1293
msgid "Given this simple entity:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1142
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntity {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1144
#, no-wrap
msgid "    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1149
#, no-wrap
msgid ""
"    public static List<Person> findOrdered() {\n"
"        return find(\"ORDER BY name\").list();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1152
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1320
msgid "You can write your mocking test like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1162
#, no-wrap
msgid ""
"import io.quarkus.panache.mock.PanacheMock;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.junit.jupiter.api.Assertions;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.mockito.Mockito;\n"
"import jakarta.ws.rs.WebApplicationException;\n"
"import java.util.Collections;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1165
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheFunctionalityTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1169
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPanacheMocking() {\n"
"        PanacheMock.mock(Person.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1172
#, no-wrap
msgid ""
"        // Mocked classes always return a default value\n"
"        Assertions.assertEquals(0, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1176
#, no-wrap
msgid ""
"        // Now let's specify the return value\n"
"        Mockito.when(Person.count()).thenReturn(23L);\n"
"        Assertions.assertEquals(23, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1180
#, no-wrap
msgid ""
"        // Now let's change the return value\n"
"        Mockito.when(Person.count()).thenReturn(42L);\n"
"        Assertions.assertEquals(42, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1184
#, no-wrap
msgid ""
"        // Now let's call the original method\n"
"        Mockito.when(Person.count()).thenCallRealMethod();\n"
"        Assertions.assertEquals(0, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1187
#, no-wrap
msgid ""
"        // Check that we called it 4 times\n"
"        PanacheMock.verify(Person.class, Mockito.times(4)).count();// <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1193
#, no-wrap
msgid ""
"        // Mock only with specific parameters\n"
"        Person p = new Person();\n"
"        Mockito.when(Person.findById(12L)).thenReturn(p);\n"
"        Assertions.assertSame(p, Person.findById(12L));\n"
"        Assertions.assertNull(Person.findById(42L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1197
#, no-wrap
msgid ""
"        // Mock throwing\n"
"        Mockito.when(Person.findById(12L)).thenThrow(new WebApplicationException());\n"
"        Assertions.assertThrows(WebApplicationException.class, () -> Person.findById(12L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1201
#, no-wrap
msgid ""
"        // We can even mock your custom methods\n"
"        Mockito.when(Person.findOrdered()).thenReturn(Collections.emptyList());\n"
"        Assertions.assertTrue(Person.findOrdered().isEmpty());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1204
#, no-wrap
msgid ""
"        // Mocking a void method\n"
"        Person.voidMethod();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1213
#, no-wrap
msgid ""
"        // Make it throw\n"
"        PanacheMock.doThrow(new RuntimeException(\"Stef2\")).when(Person.class).voidMethod();\n"
"        try {\n"
"            Person.voidMethod();\n"
"            Assertions.fail();\n"
"        } catch (RuntimeException x) {\n"
"            Assertions.assertEquals(\"Stef2\", x.getMessage());\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1217
#, no-wrap
msgid ""
"        // Back to doNothing\n"
"        PanacheMock.doNothing().when(Person.class).voidMethod();\n"
"        Person.voidMethod();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1226
#, no-wrap
msgid ""
"        // Make it call the real method\n"
"        PanacheMock.doCallRealMethod().when(Person.class).voidMethod();\n"
"        try {\n"
"            Person.voidMethod();\n"
"            Assertions.fail();\n"
"        } catch (RuntimeException x) {\n"
"            Assertions.assertEquals(\"void\", x.getMessage());\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1233
#, no-wrap
msgid ""
"        PanacheMock.verify(Person.class).findOrdered();\n"
"        PanacheMock.verify(Person.class, Mockito.atLeast(4)).voidMethod();\n"
"        PanacheMock.verify(Person.class, Mockito.atLeastOnce()).findById(Mockito.any());\n"
"        PanacheMock.verifyNoMoreInteractions(Person.class);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1236
msgid "Be sure to call your `verify` and `do*` methods on `PanacheMock` rather than `Mockito`, otherwise you won't know what mock object to pass."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1237
#, no-wrap
msgid "Mocking `EntityManager`, `Session` and entity instance methods"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1240
msgid "If you need to mock entity instance methods, such as `persist()` you can do it by mocking the Hibernate ORM `Session` object:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1251
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.junit.mockito.InjectMock;\n"
"import org.hibernate.Session;\n"
"import org.hibernate.query.Query;\n"
"import org.junit.jupiter.api.Assertions;\n"
"import org.junit.jupiter.api.BeforeEach;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.mockito.Mockito;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1254
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheMockingTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1257
#, no-wrap
msgid ""
"    @InjectMock\n"
"    Session session;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1265
#, no-wrap
msgid ""
"    @BeforeEach\n"
"    public void setup() {\n"
"        Query mockQuery = Mockito.mock(Query.class);\n"
"        Mockito.doNothing().when(session).persist(Mockito.any());\n"
"        Mockito.when(session.createQuery(Mockito.anyString())).thenReturn(mockQuery);\n"
"        Mockito.when(mockQuery.getSingleResult()).thenReturn(0l);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1272
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPanacheMocking() {\n"
"        Person p = new Person();\n"
"        // mocked via EntityManager mocking\n"
"        p.persist();\n"
"        Assertions.assertNull(p.id);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1276
#, no-wrap
msgid ""
"        Mockito.verify(session, Mockito.times(1)).persist(Mockito.any());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1278
#, no-wrap
msgid "Using the repository pattern"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1282
msgid "If you are using the repository pattern you can use Mockito directly, using the `quarkus-junit5-mockito` module, which makes mocking beans much easier:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1290
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5-mockito</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1298
#, no-wrap
msgid ""
"@Entity\n"
"public class Person {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1302
#, no-wrap
msgid ""
"    @Id\n"
"    @GeneratedValue\n"
"    public Long id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1305
#, no-wrap
msgid ""
"    public String name;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1308
msgid "And this repository:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1317
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheRepository<Person> {\n"
"    public List<Person> findOrdered() {\n"
"        return find(\"ORDER BY name\").list();\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1330
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.junit.mockito.InjectMock;\n"
"import org.junit.jupiter.api.Assertions;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.mockito.Mockito;\n"
"import jakarta.ws.rs.WebApplicationException;\n"
"import java.util.Collections;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1335
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheFunctionalityTest {\n"
"    @InjectMock\n"
"    PersonRepository personRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1340
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPanacheRepositoryMocking() throws Throwable {\n"
"        // Mocked classes always return a default value\n"
"        Assertions.assertEquals(0, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1344
#, no-wrap
msgid ""
"        // Now let's specify the return value\n"
"        Mockito.when(personRepository.count()).thenReturn(23L);\n"
"        Assertions.assertEquals(23, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1348
#, no-wrap
msgid ""
"        // Now let's change the return value\n"
"        Mockito.when(personRepository.count()).thenReturn(42L);\n"
"        Assertions.assertEquals(42, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1352
#, no-wrap
msgid ""
"        // Now let's call the original method\n"
"        Mockito.when(personRepository.count()).thenCallRealMethod();\n"
"        Assertions.assertEquals(0, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1355
#, no-wrap
msgid ""
"        // Check that we called it 4 times\n"
"        Mockito.verify(personRepository, Mockito.times(4)).count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1361
#, no-wrap
msgid ""
"        // Mock only with specific parameters\n"
"        Person p = new Person();\n"
"        Mockito.when(personRepository.findById(12L)).thenReturn(p);\n"
"        Assertions.assertSame(p, personRepository.findById(12L));\n"
"        Assertions.assertNull(personRepository.findById(42L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1365
#, no-wrap
msgid ""
"        // Mock throwing\n"
"        Mockito.when(personRepository.findById(12L)).thenThrow(new WebApplicationException());\n"
"        Assertions.assertThrows(WebApplicationException.class, () -> personRepository.findById(12L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1368
#, no-wrap
msgid ""
"        Mockito.when(personRepository.findOrdered()).thenReturn(Collections.emptyList());\n"
"        Assertions.assertTrue(personRepository.findOrdered().isEmpty());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1375
#, no-wrap
msgid ""
"        // We can even mock your custom methods\n"
"        Mockito.verify(personRepository).findOrdered();\n"
"        Mockito.verify(personRepository, Mockito.atLeastOnce()).findById(Mockito.any());\n"
"        Mockito.verifyNoMoreInteractions(personRepository);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1377
#, no-wrap
msgid "How and why we simplify Hibernate ORM mappings"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1381
msgid "When it comes to writing Hibernate ORM entities, there are a number of annoying things that users have grown used to reluctantly deal with, such as:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1384
msgid "Duplicating ID logic: most entities need an ID, most people don't care how it is set, because it is not really relevant to your model."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1390
msgid "Traditional EE patterns advise to split entity definition (the model) from the operations you can do on them (DAOs, Repositories), but really that requires a split between the state and its operations even though we would never do something like that for regular objects in the Object-Oriented architecture, where state and methods are in the same class. Moreover, this requires two classes per entity, and requires injection of the DAO or Repository where you need to do entity operations, which breaks your edit flow and requires you to get out of the code you're writing to set up an injection point before coming back to use it."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1392
msgid "Hibernate queries are super powerful, but overly verbose for common operations, requiring you to write queries even when you don't need all the parts."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1394
msgid "Hibernate is very general-purpose, but does not make it trivial to do trivial operations that make up 90% of our model usage."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1396
msgid "With Panache, we took an opinionated approach to tackle all these problems:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1399
msgid "Make your entities extend `PanacheEntity`: it has an ID field that is auto-generated. If you require a custom ID strategy, you can extend `PanacheEntityBase` instead and handle the ID yourself."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1402
msgid "Use public fields. Get rid of dumb getter and setters. Hibernate ORM w/o Panache also doesn't require you to use getters and setters, but Panache will additionally generate all getters and setters that are missing, and rewrite every access to these fields to use the accessor methods. This way you can still write _useful_ accessors when you need them, which will be used even though your entity users still use field accesses. This implies that from the Hibernate perspective you're using accessors via getters and setters even while it looks like field accessors."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1405
msgid "With the active record pattern: put all your entity logic in static methods in your entity class and don't create DAOs.  Your entity superclass comes with lots of super useful static methods, and you can add your own in your entity class.  Users can just start using your entity `Person` by typing `Person.` and getting completion for all the operations in a single place."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1408
msgid "Don't write parts of the query that you don't need: write `Person.find(\"order by name\")` or `Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive)` or even better `Person.find(\"name\", \"stef\")`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1410
msgid "That's all there is to it: with Panache, Hibernate ORM has never looked so trim and neat."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1411
#, no-wrap
msgid "Defining entities in external projects or jars"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1414
msgid "Hibernate ORM with Panache relies on compile-time bytecode enhancements to your entities."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1420
msgid "It attempts to identify archives with Panache entities (and consumers of Panache entities)  by the presence of the marker file `META-INF/panache-archive.marker`. Panache includes an annotation processor that will automatically create this file in archives that depend on Panache (even indirectly). If you have disabled annotation processors you may need to create this file manually in some cases."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1424
msgid "If you include the jpa-modelgen annotation processor this will exclude the Panache annotation processor by default. If you do this you should either create the marker file yourself, or add the `quarkus-panache-common` as well, as shown below:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/hibernate-orm-panache.adoc:1445
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-compiler-plugin</artifactId>\n"
"    <version>${compiler-plugin.version}</version>\n"
"    <configuration>\n"
"      <annotationProcessorPaths>\n"
"        <annotationProcessorPath>\n"
"          <groupId>org.hibernate</groupId>\n"
"          <artifactId>hibernate-jpamodelgen</artifactId>\n"
"          <version>${hibernate.version}</version>\n"
"        </annotationProcessorPath>\n"
"        <annotationProcessorPath>\n"
"          <groupId>io.quarkus</groupId>\n"
"          <artifactId>quarkus-panache-common</artifactId>\n"
"          <version>${quarkus.platform.version}</version>\n"
"        </annotationProcessorPath>\n"
"      </annotationProcessorPaths>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""
