# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:12+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:8
#, no-wrap
msgid "Your second Quarkus application"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:17
msgid "This tutorial shows you how to create an application which writes to and reads from a database.  You will use Dev Services, so you will not actually download, configure, or even start the database yourself.  You will also use Panache, a layer on top of Hibernate ORM, to make reading and writing data easier."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:19
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:28
msgid "This tutorial builds on what you learned writing xref:{doc-guides}/getting-started.adoc[your first Quarkus application].  You will not need the code from that application, but make sure you understand the concepts."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:29
#, no-wrap
msgid "Solution"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:32
msgid "We recommend that you follow the instructions from <<Bootstrapping the project>> onwards to create the application step by step."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:34
msgid "However, you can go right to the completed example."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:36
msgid "Download an {quickstarts-archive-url}[archive] or clone the git repository:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:40
#, no-wrap
msgid "git clone {quickstarts-clone-url}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:43
msgid "The solution is located in the `getting-started-dev-services` {quickstarts-tree-url}/getting-started-dev-services[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:46
#, no-wrap
msgid "Outline steps"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:49
msgid "Bootstrap the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:50
msgid "Update the application to read user input"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:51
msgid "Create a Panache Entity"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:52
msgid "Read and write the entity"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:53
msgid "Configure an external database using a profile"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:54
#, no-wrap
msgid "Setting up an interactive application"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:56
#, no-wrap
msgid "Bootstrapping the project"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:59
msgid "The easiest way to create a new Quarkus project is to open a terminal and run the following command:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:66
msgid "For an explanation of what's in the generated application, see the xref:getting-started.adoc[First application guide]."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:67
#, no-wrap
msgid "Running the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:70
msgid "Launch the application in dev mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:74
msgid "Once the application is up, visit http://localhost:8080/hello. It should show a \"Hello from RESTEasy Reactive\" message."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:75
#, no-wrap
msgid "Accepting user input"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:82
msgid "Let's make the application a bit more interactive.  Open the project in your IDE and navigate to `src/main/java/org/acme/GreetingResource.java' Add a query param in the `hello` method.  (The `org.jboss.resteasy.reactive.RestQuery` annotation is like the Jakarta REST `@QueryParam` annotation, except you don't need to duplicate the parameter name.)"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:88
#, no-wrap
msgid ""
"public String hello(@RestQuery String name) {\n"
"    return \"Hello \" + name;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:91
msgid "Visit http://localhost:8080/hello?name=Bloom."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:93
msgid "You should see a personalised message: `Hello Bloom`."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:94
#, no-wrap
msgid "Fixing the tests"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:98
msgid "In your Quarkus terminal, type 'r' to run the tests. You should see that your application changes broke the tests!"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:101
msgid "To fix the tests, open `src/test/java/org/acme/GreetingResourceTest.java` and replace"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:105
#, no-wrap
msgid "             .body(is(\"Hello from RESTEasy Reactive\"));\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:108
msgid "with"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:112
#, no-wrap
msgid "             .body(containsString(\"Hello\"));\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:117
msgid "This still validates the HTTP endpoint, but it's more flexible about the expected output.  You should see in your terminal that the tests are now passing."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:118
#, no-wrap
msgid "Adding persistence"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:120
#, no-wrap
msgid "Creating a Panache Entity"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:123
msgid "To add the persistence libraries, run"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:129
msgid "The application will record the names of people it greets. Define an Entity by creating a `Greeting.java` class. Add the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:134
#, no-wrap
msgid ""
"import io.quarkus.hibernate.orm.panache.PanacheEntity;\n"
"import jakarta.persistence.Entity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:139
#, no-wrap
msgid ""
"@Entity\n"
"public class Greeting extends PanacheEntity {\n"
"    public String name;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:145
msgid "The entity makes use of xref:{doc-guides}hibernate-orm-panache.adoc[Panache], a layer on top of Hibernate ORM.  Extending `PanacheEntity` brings in a range of methods for reading, writing, and finding data.  Because all the data access methods are on the `Greeting` entity, rather than on a separate data access class, this is an example of the active record pattern."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:147
msgid "The `Greeting` table will have one column, a field called `name`."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:148
#, no-wrap
msgid "Writing data"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:151
msgid "To use the new entity, update the `hello` method to start writing some data."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:153
msgid "Change the method to the following:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:165
#, no-wrap
msgid ""
"@GET\n"
"@Transactional\n"
"@Produces(MediaType.TEXT_PLAIN)\n"
"public String hello(@QueryParam(\"name\") String name) {\n"
"   Greeting greeting = new Greeting();\n"
"   greeting.name = name;\n"
"   greeting.persist();\n"
"   return \"Hello \" + name;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:169
msgid "Don't forget the `@Transactional` annotation, which ensures writes are wrapped in a transaction."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:171
#, no-wrap
msgid "GETs should not change application state."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:175
msgid "Generally, you shouldn't do state updates in a `GET` REST method, but here it makes trying things out simpler. Let's assume what's being written is a logging \"side effect\", rather than a meaningful state changes!"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:178
msgid "Try out the updated endpoint by visiting http://localhost:8080/hello?name=Bloom.  You should see a \"Hello Bloom\" message."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:179
#, no-wrap
msgid "Reading data"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:182
msgid "Although the new persistence code seems to be working without errors, how do you know anything is being written to the database?"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:184
msgid "Add a second REST method to `GreetingResource`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:196
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"names\")\n"
"@Produces(MediaType.TEXT_PLAIN)\n"
"public String names() {\n"
"    List<Greeting> greetings = Greeting.listAll();\n"
"    String names = greetings.stream().map(g-> g.name)\n"
"       .collect(Collectors.joining (\", \"));\n"
"    return \"I've said hello to \" + names;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:199
msgid "To try it out, visit http://localhost:8080/hello?name=Bloom, and then http://localhost/hello/names."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:201
msgid "You should see the following message: \"I've said hello to Bloom\"."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:203
#, no-wrap
msgid "a container runtime is required."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:207
msgid "Don't forget that you need to have a container runtime available, or you will start seeing failures in the Quarkus logs at this point."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:209
#, no-wrap
msgid "Dev services"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:213
msgid "Reading and writing to the database seems to be working well, but that's a bit unexpected.  Where did a PostgreSQL database come from? You didn't set anything up."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:219
msgid "The database is being managed using xref:{docfile}/dev-services.adoc[Dev Services].  Dev Services take care of stopping and starting services needed by your application.  Because you included the `jdbc-postgresql` dependency, the database is a containerised PostgreSQL database.  If you'd added `jdbc-mysql` insead, you would have gotten a containerised MySQL database."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:223
msgid "If you like, use your container tool to see what containers are running.  For example, if you're using Docker, run `docker ps`, and for podman, run `podman ps`.  You should see something like the following:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:226
#, no-wrap
msgid "ff88dcedd899  docker.io/library/postgres:14  postgres -c fsync...  20 minutes ago  Up 20 minutes  0.0.0.0:34789->5432/tcp  nostalgic_bassi\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:231
msgid "Stop Quarkus and run `docker ps` again.  You should see nothing running (it may take a few moments for containers to shut down).  Quarkus will automatically stop the container when your application stops."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:232
#, no-wrap
msgid "Initialising services"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:240
#, no-wrap
msgid ""
"If you play with your code some more, you may notice that sometimes, after making an application change, http://localhost/hello/names doesn't list any names.\n"
"What's going on? By default, in dev mode, with a Dev Services database,\n"
" Quarkus configures Hibernate ORM database generation to be `drop-and-create`.\n"
" See the xref:{docfile}/hibernate-orm.adoc#quarkus-hibernate-orm_quarkus.hibernate-orm.database-database-related-configuration[Hibernate configuration reference] for more details.\n"
" If a code change triggers an application restart, the database tables\n"
" will be dropped (deleted) and then re-created.\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:245
msgid "This is convenient, but what if you'd prefer the database to always have content? That would make testing easier.  If you provide an `import.sql` file, Quarkus will use that to initialise the database on each start."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:247
msgid "Make a `src/main/resources/import.sql` file in your project"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:248
msgid "Add the following SQL statements:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:255
#, no-wrap
msgid ""
"INSERT INTO Greeting(id, name)\n"
"VALUES (nextval('Greeting_SEQ'), 'Alice');\n"
"INSERT INTO Greeting(id, name)\n"
"VALUES (nextval('Greeting_SEQ'), 'Bob');\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:258
msgid "Now, hit `s` in your dev mode session, to force a full restart. Then visit http://localhost:8080/hello/names."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:260
msgid "You'll see that Alice and Bob are always included in the list of names."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:261
#, no-wrap
msgid "Controlling Dev Services"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:263
#, no-wrap
msgid "Using an external database instead"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:267
msgid "What if you'd rather use an external database that you manage yourself? Add the following to `src/main/resources/application.properties`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:275
#, no-wrap
msgid ""
"# configure your datasource\n"
"quarkus.datasource.db-kind = postgresql\n"
"quarkus.datasource.username = leopold\n"
"quarkus.datasource.password = bloom\n"
"quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/mydatabase\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:280
msgid "This tells Quarkus that you don't want it to start a Dev Service, because you have your own database. You don't need to worry about starting the database, because you're just seeing how to change the configuration."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:284
msgid "Visit `http://localhost:8080/hello/names`. Instead of a list of names, you'll get a red error screen. In the terminal where Quarkus is running.  you'll see the following stack error message:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:290
#, no-wrap
msgid ""
"2023-06-28 19:18:22,880 ERROR [io.qua.ver.htt.run.QuarkusErrorHandler] (executor-thread-1) HTTP Request to /hello?name=fred failed, error id: 4f9b5ce6-3b08-41c5-af36-24eee4d1dd2b-2: org.hibernate.exception.JDBCConnectionException: Unable to acquire JDBC Connection [Connection to localhost:5432 refused. Check that the hostname and port are correct and that the postmaster is accepting TCP/IP connections.] [n/a]\n"
"        at org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:98)\n"
"        at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:56)\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:294
msgid "This makes sense; you've disabled the database Dev Service, but you haven't started your own database."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:295
#, no-wrap
msgid "Using profiles"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:300
msgid "Unless you want to, don't worry about setting up an external database to resolve the connection error. Instead, you will go back to using the Dev Service.  It made life easy!"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:303
msgid "But what about production? You won't want to use Dev Services in production.  In fact, Quarkus only starts Dev Services in dev and test modes."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:306
msgid "Wouldn't it be nice to configure an external database, but have it *only* used in production, so you could still use dev services the rest of the time?"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:310
msgid "Add a `%prod.` prefix to the database configuration. This means the configuration only applies to the xref:{docfile}/config-reference#profiles[prod profile]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:312
msgid "The configuration should look like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:320
#, no-wrap
msgid ""
"# configure your datasource\n"
"%prod.quarkus.datasource.db-kind = postgresql\n"
"%prod.quarkus.datasource.username = leopold\n"
"%prod.quarkus.datasource.password = bloom\n"
"%prod.quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/mydatabase\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:324
msgid "Now the external database will be used in prod mode, and Dev Services will be used in dev and test modes."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:328
msgid "Check http://localhost:8080/hello/names. It should be working again, because the Dev Services have been re-enabled.  Notice that there was no need to restart Quarkus for any of these changes."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:331
#, no-wrap
msgid "Summary"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:336
msgid "You've taken a simple REST application and updated it to write and read data from a database, using Hibernate ORM and Panache. The data was persisted to a 'real' database, without you having to configure anything."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:338
#, no-wrap
msgid "References"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:341
msgid "xref:{doc-guides}dev-services.adoc[Dev Services]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-dev-services.adoc:342
msgid "xref:{doc-guides}hibernate-orm-panache.adoc[Hibernate ORM with Panache]"
msgstr ""
