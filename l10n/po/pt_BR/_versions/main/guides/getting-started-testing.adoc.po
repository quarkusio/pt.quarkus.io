# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-29 08:06+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: upstream/_versions/main/guides/getting-started-testing.adoc:7
#, no-wrap
msgid "Testing Your Application"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:19
msgid "Learn how to test your Quarkus Application.  This guide covers:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:21
msgid "Testing in JVM mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:22
msgid "Testing in native mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:23
msgid "Injection of resources into tests"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:24
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:28
msgid "The completed greeter application from the xref:getting-started.adoc[Getting Started Guide]"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:29
#, no-wrap
msgid "Architecture"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:33
msgid "In this guide, we expand on the initial test that was created as part of the Getting Started Guide.  We cover injection into tests and also how to test native executables."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:35
msgid "Quarkus supports Continuous testing, but this is covered by the xref:continuous-testing.adoc[Continuous Testing Guide]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:36
#, no-wrap
msgid "Solution"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:40
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "Recomendamos que siga as instruções nas seções seguintes e crie a aplicação passo a passo. No entanto, você pode ir diretamente para o exemplo completo."

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:42
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:44
msgid "The solution is located in the `getting-started-testing` link:{quickstarts-tree-url}/getting-started-testing[directory]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:46
msgid "This guide assumes you already have the completed application from the `getting-started` directory."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:47
#, no-wrap
msgid "Recap of HTTP based Testing in JVM mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:51
msgid "If you have started from the Getting Started example you should already have a completed test, including the correct tooling setup."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:53
msgid "In your build file you should see 2 test dependencies:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/getting-started-testing.adoc:54
#, no-wrap
msgid "Maven"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:68
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.rest-assured</groupId>\n"
"    <artifactId>rest-assured</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/getting-started-testing.adoc:71
#, no-wrap
msgid "Gradle"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:79
#, no-wrap
msgid ""
"dependencies {\n"
"    testImplementation(\"io.quarkus:quarkus-junit5\")\n"
"    testImplementation(\"io.rest-assured:rest-assured\")\n"
"}\n"
msgstr ""

#. type: delimited block *
#: upstream/_versions/main/guides/getting-started-testing.adoc:85
msgid "`quarkus-junit5` is required for testing, as it provides the `@QuarkusTest` annotation that controls the testing framework.  `rest-assured` is not required but is a convenient way to test HTTP endpoints, we also provide integration that automatically sets the correct URL so no configuration is required."
msgstr ""

#. type: delimited block *
#: upstream/_versions/main/guides/getting-started-testing.adoc:88
msgid "Because we are using JUnit 5, the version of the https://maven.apache.org/surefire/maven-surefire-plugin/[Surefire Maven Plugin] must be set, as the default version does not support Junit 5:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:101
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-surefire-plugin</artifactId>\n"
"    <version>${surefire-plugin.version}</version>\n"
"    <configuration>\n"
"       <systemPropertyVariables>\n"
"          <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n"
"          <maven.home>${maven.home}</maven.home>\n"
"       </systemPropertyVariables>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:105
msgid "We also set the `java.util.logging.manager` system property to make sure tests will use the correct logmanager and `maven.home` to ensure that custom configuration from `${maven.home}/conf/settings.xml` is applied (if any)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:107
msgid "The project should also contain a simple test:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:111
#: upstream/_versions/main/guides/getting-started-testing.adoc:206
#: upstream/_versions/main/guides/getting-started-testing.adoc:270
#: upstream/_versions/main/guides/getting-started-testing.adoc:311
#: upstream/_versions/main/guides/getting-started-testing.adoc:350
#: upstream/_versions/main/guides/getting-started-testing.adoc:438
#: upstream/_versions/main/guides/getting-started-testing.adoc:501
#, no-wrap
msgid "package org.acme.getting.started.testing;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:114
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:116
#: upstream/_versions/main/guides/getting-started-testing.adoc:317
#, no-wrap
msgid "import java.util.UUID;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:119
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.CoreMatchers.is;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:122
#: upstream/_versions/main/guides/getting-started-testing.adoc:1045
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class GreetingResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:131
#, no-wrap
msgid ""
"    @Test\n"
"    public void testHelloEndpoint() {\n"
"        given()\n"
"          .when().get(\"/hello\")\n"
"          .then()\n"
"             .statusCode(200)\n"
"             .body(is(\"hello\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:142
#, no-wrap
msgid ""
"    @Test\n"
"    public void testGreetingEndpoint() {\n"
"        String uuid = UUID.randomUUID().toString();\n"
"        given()\n"
"          .pathParam(\"name\", uuid)\n"
"          .when().get(\"/hello/greeting/{name}\")\n"
"          .then()\n"
"            .statusCode(200)\n"
"            .body(is(\"hello \" + uuid));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:144
#: upstream/_versions/main/guides/getting-started-testing.adoc:410
#: upstream/_versions/main/guides/getting-started-testing.adoc:742
#: upstream/_versions/main/guides/getting-started-testing.adoc:1062
#: upstream/_versions/main/guides/getting-started-testing.adoc:1303
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:148
msgid "This test uses HTTP to directly test our REST endpoint. When the test is run the application will be started before the test is run."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:149
#, no-wrap
msgid "Controlling the test port"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:153
msgid "While Quarkus will listen on port `8080` by default, when running tests it defaults to `8081`. This allows you to run tests while having the application running in parallel."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/getting-started-testing.adoc:155
#, no-wrap
msgid "Changing the test port"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/getting-started-testing.adoc:158
msgid "You can configure the ports used by tests by configuring `quarkus.http.test-port` for HTTP and `quarkus.http.test-ssl-port` for HTTPS in your `application.properties`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:162
#, no-wrap
msgid ""
"quarkus.http.test-port=8083\n"
"quarkus.http.test-ssl-port=8446\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:164
msgid "`0` will result in the use of a random port (assigned by the operating system)."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/getting-started-testing.adoc:168
msgid "Quarkus also provides RestAssured integration that updates the default port used by RestAssured before the tests are run, so no additional configuration should be required."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:169
#, no-wrap
msgid "Controlling HTTP interaction timeout"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/getting-started-testing.adoc:173
msgid "When using REST Assured in your test, the connection and response timeouts are set to 30 seconds.  You can override this setting with the `quarkus.http.test-timeout` property:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:177
#, no-wrap
msgid "quarkus.http.test-timeout=10s\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:179
#, no-wrap
msgid "Injecting a URI"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:183
msgid "It is also possible to directly inject the URL into the test which can make is easy to use a different client. This is done via the `@TestHTTPResource` annotation."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:186
msgid "Let's write a simple test that shows this off to load some static resources. First create a simple HTML file in `src/main/resources/META-INF/resources/index.html` :"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:198
#, no-wrap
msgid ""
"<html>\n"
"    <head>\n"
"        <title>Testing Guide</title>\n"
"    </head>\n"
"    <body>\n"
"        Information about testing\n"
"    </body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:201
msgid "We will create a simple test to ensure that this is being served correctly:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:211
#: upstream/_versions/main/guides/getting-started-testing.adoc:275
#, no-wrap
msgid ""
"import java.io.IOException;\n"
"import java.io.InputStream;\n"
"import java.net.URL;\n"
"import java.nio.charset.StandardCharsets;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:214
#: upstream/_versions/main/guides/getting-started-testing.adoc:278
#: upstream/_versions/main/guides/getting-started-testing.adoc:355
#, no-wrap
msgid ""
"import org.junit.jupiter.api.Assertions;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:217
#, no-wrap
msgid ""
"import io.quarkus.test.common.http.TestHTTPResource;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:220
#: upstream/_versions/main/guides/getting-started-testing.adoc:285
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class StaticContentTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:223
#, no-wrap
msgid ""
"    @TestHTTPResource(\"index.html\") // <1>\n"
"    URL url;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:232
#, no-wrap
msgid ""
"    @Test\n"
"    public void testIndexHtml() throws IOException {\n"
"        try (InputStream in = url.openStream()) {\n"
"            String contents = new String(in.readAllBytes(), StandardCharsets.UTF_8);\n"
"            Assertions.assertTrue(contents.contains(\"<title>Testing Guide</title>\"));\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:234
msgid "This annotation allows you to directly inject the URL of the Quarkus instance, the value of the annotation will be the path component of the URL"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:236
msgid "For now `@TestHTTPResource` allows you to inject `URI`, `URL` and `String` representations of the URL."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:237
#, no-wrap
msgid "Testing a specific endpoint"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:242
msgid "Both RESTassured and `@TestHTTPResource` allow you to specify the endpoint class you are testing rather than hard coding a path. This currently supports both Jakarta REST endpoints, Servlets and Reactive Routes. This makes it a lot easier to see exactly which endpoints a given test is testing."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:244
msgid "For the purposes of these examples I am going to assume we have an endpoint that looks like the following:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:249
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"public class GreetingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:256
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return \"hello\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:260
msgid "This currently does not support the `@ApplicationPath()` annotation to set the Jakarta REST context path. Use the `quarkus.resteasy.path` config value instead if you want a custom context path."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:261
#, no-wrap
msgid "TestHTTPResource"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:266
msgid "You can the use the `io.quarkus.test.common.http.TestHTTPEndpoint` annotation to specify the endpoint path, and the path will be extracted from the provided endpoint. If you also specify a value for the `TestHTTPResource` endpoint it will be appended to the end of the endpoint path."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:282
#, no-wrap
msgid ""
"import io.quarkus.test.common.http.TestHTTPEndpoint;\n"
"import io.quarkus.test.common.http.TestHTTPResource;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:289
#, no-wrap
msgid ""
"    @TestHTTPEndpoint(GreetingResource.class)  // <1>\n"
"    @TestHTTPResource\n"
"    URL url;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:298
#, no-wrap
msgid ""
"    @Test\n"
"    public void testIndexHtml() throws IOException {\n"
"        try (InputStream in = url.openStream()) {\n"
"            String contents = new String(in.readAllBytes(), StandardCharsets.UTF_8);\n"
"            Assertions.assertEquals(\"hello\", contents);\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:301
msgid "Because `GreetingResource` is annotated with `@Path(\"/hello\")` the injected URL will end with `/hello`."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:302
#, no-wrap
msgid "RESTassured"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:307
msgid "To control the RESTassured base path (i.e. the default path that serves as the root for every request) you can use the `io.quarkus.test.common.http.TestHTTPEndpoint` annotation. This can be applied at the class or method level. To test out greeting resource we would do:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:315
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.common.http.TestHTTPEndpoint;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:320
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.when;\n"
"import static org.hamcrest.CoreMatchers.is;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:324
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@TestHTTPEndpoint(GreetingResource.class) //<1>\n"
"public class GreetingResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:333
#, no-wrap
msgid ""
"    @Test\n"
"    public void testHelloEndpoint() {\n"
"        when().get()    //<2>\n"
"          .then()\n"
"             .statusCode(200)\n"
"             .body(is(\"hello\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:335
msgid "This tells RESTAssured to prefix all requests with `/hello`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:336
msgid "Note we don't need to specify a path here, as `/hello` is the default for this test"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:337
#, no-wrap
msgid "Injection into tests"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:341
msgid "So far we have only covered integration style tests that test the app via HTTP endpoints, but what if we want to do unit testing and test our beans directly?"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:345
msgid "Quarkus supports this by allowing you to inject CDI beans into your tests via the `@Inject` annotation (in fact, tests in Quarkus are full CDI beans, so you can use all CDI functionality). Let's create a simple test that tests the greeting service directly without using HTTP:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:352
#, no-wrap
msgid "import jakarta.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:357
#, no-wrap
msgid "import io.quarkus.test.junit.QuarkusTest;\n"
msgstr "import io.quarkus.test.junit.QuarkusTest;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:360
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class GreetingServiceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:363
#, no-wrap
msgid ""
"    @Inject // <1>\n"
"    GreetingService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:369
#, no-wrap
msgid ""
"    @Test\n"
"    public void testGreetingService() {\n"
"        Assertions.assertEquals(\"hello Quarkus\", service.greeting(\"Quarkus\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:371
msgid "The `GreetingService` bean will be injected into the test"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:372
#, no-wrap
msgid "Applying Interceptors to Tests"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:377
msgid "As mentioned above Quarkus tests are actually full CDI beans, and as such you can apply CDI interceptors as you would normally. As an example, if you want a test method to run within the context of a transaction you can simply apply the `@Transactional` annotation to the method and the transaction interceptor will handle it."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:380
msgid "In addition to this you can also create your own test stereotypes. For example, we could create a `@TransactionalQuarkusTest` as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:390
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@Stereotype\n"
"@Transactional\n"
"@Retention(RetentionPolicy.RUNTIME)\n"
"@Target(ElementType.TYPE)\n"
"public @interface TransactionalQuarkusTest {\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:394
msgid "If we then apply this annotation to a test class it will act as if we had applied both the `@QuarkusTest` and `@Transactional` annotations, e.g.:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:400
#, no-wrap
msgid ""
"@TransactionalQuarkusTest\n"
"public class TestStereotypeTestCase {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:403
#, no-wrap
msgid ""
"    @Inject\n"
"    UserTransaction userTransaction;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:408
#, no-wrap
msgid ""
"    @Test\n"
"    public void testUserTransaction() throws Exception {\n"
"        Assertions.assertEquals(Status.STATUS_ACTIVE, userTransaction.getStatus());\n"
"    }\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:412
#, no-wrap
msgid "Tests and Transactions"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:418
msgid "You can use the standard Quarkus `@Transactional` annotation on tests, but this means that the changes your test makes to the database will be persistent. If you want any changes made to be rolled back at the end of the test you can use the `io.quarkus.test.TestTransaction` annotation. This will run the test method in a transaction, but roll it back once the test method is complete to revert any database changes."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:419
#, no-wrap
msgid "Enrichment via QuarkusTest*Callback"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:422
msgid "Alternatively or additionally to an interceptor, you can enrich *all* your `@QuarkusTest` classes by implementing the following callback interfaces:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:424
msgid "`io.quarkus.test.junit.callback.QuarkusTestBeforeClassCallback`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:425
msgid "`io.quarkus.test.junit.callback.QuarkusTestAfterConstructCallback`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:426
msgid "`io.quarkus.test.junit.callback.QuarkusTestBeforeEachCallback`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:427
msgid "`io.quarkus.test.junit.callback.QuarkusTestBeforeTestExecutionCallback`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:428
msgid "`io.quarkus.test.junit.callback.QuarkusTestAfterTestExecutionCallback`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:429
msgid "`io.quarkus.test.junit.callback.QuarkusTestAfterEachCallback`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:431
msgid "Optionally, you can enable these callbacks also for the `@QuarkusIntegrationTest` tests if the property `quarkus.test.enable-callbacks-for-integration-tests` is `true`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:433
msgid "Such a callback implementation has to be registered as a \"service provider\" as defined by `java.util.ServiceLoader`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:435
msgid "E.g. the following sample callback:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:441
#, no-wrap
msgid ""
"import io.quarkus.test.junit.callback.QuarkusTestBeforeEachCallback;\n"
"import io.quarkus.test.junit.callback.QuarkusTestMethodContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:443
#, no-wrap
msgid "public class MyQuarkusTestBeforeEachCallback implements QuarkusTestBeforeEachCallback {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:449
#, no-wrap
msgid ""
"    @Override\n"
"    public void beforeEach(QuarkusTestMethodContext context) {\n"
"        System.out.println(\"Executing \" + context.getTestMethod());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:451
msgid "has to be registered via `src/main/resources/META-INF/services/io.quarkus.test.junit.callback.QuarkusTestBeforeEachCallback` as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:454
#, no-wrap
msgid "org.acme.getting.started.testing.MyQuarkusTestBeforeEachCallback\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:457
msgid "It is possible to read annotations from the test class or method to control what the callback shall be doing."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:460
#, no-wrap
msgid ""
"While it is possible to use JUnit Jupiter callback interfaces like `BeforeEachCallback`, you might run into classloading issues because Quarkus has\n"
"         to run tests in a custom classloader which JUnit is not aware of.\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:462
#, no-wrap
msgid "Testing Different Profiles"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:467
msgid "So far in all our examples we only start Quarkus once for all tests. Before the first test is run Quarkus will boot, then all tests will run, then Quarkus will shut down at the end. This makes for a very fast testing experience however it is a bit limited as you can't test different configurations."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:471
msgid "To get around this Quarkus supports the idea of a test profile. If a test has a different profile to the previously run test then Quarkus will be shut down and started with the new profile before running the tests. This is obviously a bit slower, as it adds a shutdown/startup cycle to the test time, but gives a great deal of flexibility."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:479
msgid "To reduce the amount of times Quarkus needs to restart, `io.quarkus.test.junit.util.QuarkusTestProfileAwareClassOrderer` is registered as a global `ClassOrderer` as described in the link:https://junit.org/junit5/docs/current/user-guide/#writing-tests-test-execution-order-classes[JUnit 5 User Guide].  The behavior of this `ClassOrderer` is configurable via `junit-platform.properties` (see the source code or javadoc for more details).  It can also be disabled entirely by setting another `ClassOrderer` that is provided by JUnit 5 or even your own custom one. + Please note that as of JUnit 5.8.2 link:https://github.com/junit-team/junit5/issues/2794[only a single `junit-platform.properties` is picked up and a warning is logged if more than one is found].  If you encounter such warnings, you can get rid of them by removing the Quarkus-supplied `junit-platform.properties` from the classpath via an exclusion:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:492
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5</artifactId>\n"
"    <scope>test</scope>\n"
"    <exclusions>\n"
"        <exclusion>\n"
"            <groupId>io.quarkus</groupId>\n"
"            <artifactId>quarkus-junit5-properties</artifactId>\n"
"        </exclusion>\n"
"    </exclusions>\n"
"</dependency>\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:494
#, no-wrap
msgid "Writing a Profile"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:497
msgid "To implement a test profile we need to implement `io.quarkus.test.junit.QuarkusTestProfile`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:506
#, no-wrap
msgid ""
"import java.util.Collections;\n"
"import java.util.List;\n"
"import java.util.Map;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:508
#, no-wrap
msgid "import jakarta.enterprise.inject.Produces;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:511
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTestProfile;\n"
"import io.quarkus.test.junit.QuarkusTestProfile.TestResourceEntry;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:513
#, no-wrap
msgid "public class MockGreetingProfile implements QuarkusTestProfile { <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:526
#, no-wrap
msgid ""
"    /**\n"
"     * Returns additional config to be applied to the test. This\n"
"     * will override any existing config (including in application.properties),\n"
"     * however existing config will be merged with this (i.e. application.properties\n"
"     * config will still take effect, unless a specific config key has been overridden).\n"
"     *\n"
"     * Here we are changing the Jakarta REST root path.\n"
"     */\n"
"    @Override\n"
"    public Map<String, String> getConfigOverrides() {\n"
"        return Collections.singletonMap(\"quarkus.resteasy.path\",\"/api\");\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:537
#, no-wrap
msgid ""
"    /**\n"
"     * Returns enabled alternatives.\n"
"     *\n"
"     * This has the same effect as setting the 'quarkus.arc.selected-alternatives' config key,\n"
"     * however it may be more convenient.\n"
"     */\n"
"    @Override\n"
"    public Set<Class<?>> getEnabledAlternatives() {\n"
"        return Collections.singleton(MockGreetingService.class);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:548
#, no-wrap
msgid ""
"    /**\n"
"     * Allows the default config profile to be overridden. This basically just sets the quarkus.test.profile system\n"
"     * property before the test is run.\n"
"     *\n"
"     * Here we are setting the profile to test-mocked\n"
"     */\n"
"    @Override\n"
"    public String getConfigProfile() {\n"
"        return \"test-mocked\";\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:560
#, no-wrap
msgid ""
"    /**\n"
"     * Additional {@link QuarkusTestResourceLifecycleManager} classes (along with their init params) to be used from this\n"
"     * specific test profile.\n"
"     *\n"
"     * If this method is not overridden, then only the {@link QuarkusTestResourceLifecycleManager} classes enabled via the {@link io.quarkus.test.common.QuarkusTestResource} class\n"
"     * annotation will be used for the tests using this profile (which is the same behavior as tests that don't use a profile at all).\n"
"     */\n"
"    @Override\n"
"    public List<TestResourceEntry> testResources() {\n"
"        return Collections.singletonList(new TestResourceEntry(CustomWireMockServerManager.class));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:570
#, no-wrap
msgid ""
"    /**\n"
"     * If this returns true then only the test resources returned from {@link #testResources()} will be started,\n"
"     * global annotated test resources will be ignored.\n"
"     */\n"
"    @Override\n"
"    public boolean disableGlobalTestResources() {\n"
"        return false;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:581
#, no-wrap
msgid ""
"    /**\n"
"     * The tags this profile is associated with.\n"
"     * When the {@code quarkus.test.profile.tags} System property is set (its value is a comma separated list of strings)\n"
"     * then Quarkus will only execute tests that are annotated with a {@code @TestProfile} that has at least one of the\n"
"     * supplied (via the aforementioned system property) tags.\n"
"     */\n"
"    @Override\n"
"    public Set<String> tags() {\n"
"        return Collections.emptySet();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:589
#, no-wrap
msgid ""
"    /**\n"
"     * The command line parameters that are passed to the main method on startup.\n"
"     */\n"
"    @Override\n"
"    public String[] commandLineParameters() {\n"
"        return new String[0];\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:597
#, no-wrap
msgid ""
"    /**\n"
"     * If the main method should be run.\n"
"     */\n"
"    @Override\n"
"    public boolean runMainMethod() {\n"
"        return false;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:606
#, no-wrap
msgid ""
"    /**\n"
"     * If this method returns true then all {@code StartupEvent} and {@code ShutdownEvent} observers declared on application\n"
"     * beans should be disabled.\n"
"     */\n"
"    @Override\n"
"    public boolean disableApplicationLifecycleObservers() {\n"
"        return false;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:612
#, no-wrap
msgid ""
"    @Produces <2>\n"
"    public ExternalService mockExternalService() {\n"
"       return new ExternalService(\"mock\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:614
msgid "All these methods have default implementations so just override the ones you need to override."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:615
msgid "If a test profile implementation declares a CDI bean (via producer method/field or nested static class) then this bean is only taken into account if the test profile is used, i.e. it's ignored for any other test profile."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:618
msgid "Now we have defined our profile we need to include it on our test class.  We do this by annotating the test class with `@TestProfile(MockGreetingProfile.class)`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:621
msgid "All the test profile configuration is stored in a single class, which makes it easy to tell if the previous test ran with the same configuration."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:622
#, no-wrap
msgid "Running specific tests"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:626
msgid "Quarkus provides the ability to limit test execution to tests with specific `@TestProfile` annotations.  This works by leveraging the `tags` method of `QuarkusTestProfile` in conjunction with the `quarkus.test.profile.tags` system property."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:630
msgid "Essentially, any `QuarkusTestProfile` with at least one matching tag matching the value of `quarkus.test.profile.tags` will be considered active and all the tests annotated with `@TestProfile` of active profiles, will be run while the rest will be skipped.  This is best shown in the following example."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:632
msgid "First let's define a few `QuarkusTestProfile` implementations like so:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:635
#, no-wrap
msgid "public class Profiles {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:637
#, no-wrap
msgid "    public static class NoTags implements QuarkusTestProfile {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:639
#: upstream/_versions/main/guides/getting-started-testing.adoc:1696
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:646
#, no-wrap
msgid ""
"    public static class SingleTag implements QuarkusTestProfile {\n"
"        @Override\n"
"        public Set<String> tags() {\n"
"            return Collections.singleton(\"test1\");\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:654
#, no-wrap
msgid ""
"    public static class MultipleTags implements QuarkusTestProfile {\n"
"        @Override\n"
"        public Set<String> tags() {\n"
"            return new HashSet<>(Arrays.asList(\"test1\", \"test2\"));\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:657
msgid "Now let's assume that we have the following tests:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:662
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class NoQuarkusProfileTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:668
#: upstream/_versions/main/guides/getting-started-testing.adoc:681
#: upstream/_versions/main/guides/getting-started-testing.adoc:694
#: upstream/_versions/main/guides/getting-started-testing.adoc:707
#, no-wrap
msgid ""
"    @Test\n"
"    public void test() {\n"
"        // test something\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:675
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@TestProfile(Profiles.NoTags.class)\n"
"public class NoTagsTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:688
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@TestProfile(Profiles.SingleTag.class)\n"
"public class SingleTagTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:701
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@TestProfile(Profiles.MultipleTags.class)\n"
"public class MultipleTagsTest {\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:710
msgid "Let's consider the following scenarios:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:712
msgid "`quarkus.test.profile.tags` is not set: All tests will be executed."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:714
msgid "`quarkus.test.profile.tags=foo`: In this case none of tests will be executed because none of the tags defined on the `QuarkusTestProfile` implementations match the value of `quarkus.test.profile.tags`.  Note that `NoQuarkusProfileTest` is not executed either because it is not annotated with `@TestProfile`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:716
msgid "`quarkus.test.profile.tags=test1`: In this case `SingleTagTest` and `MultipleTagsTest` will be run because the tags on their respective `QuarkusTestProfile` implementations match the value of `quarkus.test.profile.tags`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:717
msgid "`quarkus.test.profile.tags=test1,test3`: This case results in the same tests being executed as the previous case."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:719
msgid "`quarkus.test.profile.tags=test2,test3`: In this case only `MultipleTagsTest` will be run because `MultipleTagsTest` is the only `QuarkusTestProfile` implementation whose `tags` method matches the value of `quarkus.test.profile.tags`."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:720
#, no-wrap
msgid "Mock Support"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:724
msgid "Quarkus supports the use of mock objects using two different approaches. You can either use CDI alternatives to mock out a bean for all test classes, or use `QuarkusMock` to mock out beans on a per test basis."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:725
#, no-wrap
msgid "CDI `@Alternative` mechanism."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:731
msgid "To use this simply override the bean you wish to mock with a class in the `src/test/java` directory, and put the `@Alternative` and `@Priority(1)` annotations on the bean.  Alternatively, a convenient `io.quarkus.test.Mock` stereotype annotation could be used.  This built-in stereotype declares `@Alternative`, `@Priority(1)` and `@Dependent`.  For example if I have the following service:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:736
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class ExternalService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:740
#, no-wrap
msgid ""
"    public String service() {\n"
"        return \"external\";\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:745
msgid "I could mock it with the following class in `src/test/java`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:751
#, no-wrap
msgid ""
"@Mock\n"
"@ApplicationScoped // <1>\n"
"public class MockExternalService extends ExternalService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:757
#, no-wrap
msgid ""
"    @Override\n"
"    public String service() {\n"
"        return \"mock\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:759
msgid "Overrides the `@Dependent` scope declared on the `@Mock` stereotype."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:762
msgid "It is important that the alternative be present in the `src/test/java` directory rather than `src/main/java`, as otherwise it will take effect all the time, not just when testing."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:765
msgid "Note that at present this approach does not work with native image testing, as this would require the test alternatives to be baked into the native image."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:767
#, no-wrap
msgid "Mocking using QuarkusMock"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:772
msgid "The `io.quarkus.test.junit.QuarkusMock` class can be used to temporarily mock out any normal scoped bean. If you use this method in a `@BeforeAll` method the mock will take effect for all tests on the current class, while if you use this in a test method the mock will only take effect for the duration of the current test."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:775
msgid "This method can be used for any normal scoped CDI bean (e.g. `@ApplicationScoped`, `@RequestScoped` etc, basically every scope except `@Singleton` and `@Dependent`)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:777
msgid "An example usage could look like:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:782
#: upstream/_versions/main/guides/getting-started-testing.adoc:854
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class MockTestCase {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:785
#, no-wrap
msgid ""
"    @Inject\n"
"    MockableBean1 mockableBean1;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:788
#, no-wrap
msgid ""
"    @Inject\n"
"    MockableBean2 mockableBean2;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:795
#, no-wrap
msgid ""
"    @BeforeAll\n"
"    public static void setup() {\n"
"        MockableBean1 mock = Mockito.mock(MockableBean1.class);\n"
"        Mockito.when(mock.greet(\"Stuart\")).thenReturn(\"A mock for Stuart\");\n"
"        QuarkusMock.installMockForType(mock, MockableBean1.class);  // <1>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:801
#, no-wrap
msgid ""
"    @Test\n"
"    public void testBeforeAll() {\n"
"        Assertions.assertEquals(\"A mock for Stuart\", mockableBean1.greet(\"Stuart\"));\n"
"        Assertions.assertEquals(\"Hello Stuart\", mockableBean2.greet(\"Stuart\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:808
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPerTestMock() {\n"
"        QuarkusMock.installMockForInstance(new BonjourGreeter(), mockableBean2); // <2>\n"
"        Assertions.assertEquals(\"A mock for Stuart\", mockableBean1.greet(\"Stuart\"));\n"
"        Assertions.assertEquals(\"Bonjour Stuart\", mockableBean2.greet(\"Stuart\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:811
#: upstream/_versions/main/guides/getting-started-testing.adoc:881
#, no-wrap
msgid ""
"    @ApplicationScoped\n"
"    public static class MockableBean1 {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:816
#: upstream/_versions/main/guides/getting-started-testing.adoc:824
#: upstream/_versions/main/guides/getting-started-testing.adoc:886
#, no-wrap
msgid ""
"        public String greet(String name) {\n"
"            return \"Hello \" + name;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:819
#: upstream/_versions/main/guides/getting-started-testing.adoc:889
#, no-wrap
msgid ""
"    @ApplicationScoped\n"
"    public static class MockableBean2 {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:832
#, no-wrap
msgid ""
"    public static class BonjourGreeter extends MockableBean2 {\n"
"        @Override\n"
"        public String greet(String name) {\n"
"            return \"Bonjour \" + name;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:834
msgid "As the injected instance is not available here we use `installMockForType`, this mock is used for both test methods"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:835
msgid "We use `installMockForInstance` to replace the injected bean, this takes effect for the duration of the test method."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:838
msgid "Note that there is no dependency on Mockito, you can use any mocking library you like, or even manually override the objects to provide the behaviour you require."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:842
msgid "Using `@Inject` will get you a CDI proxy to the mock instance you install, which is not suitable for passing to methods such as `Mockito.verify` which want the mock instance itself.  So if you need to call methods such as `verify` you should hang on to the mock instance in your test, or use `@io.quarkus.test.InjectMock`."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/getting-started-testing.adoc:843
#, no-wrap
msgid "Further simplification with `@InjectMock`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:847
msgid "Building on the features provided by `QuarkusMock`, Quarkus also allows users to effortlessly take advantage of link:https://site.mockito.org/[Mockito] for mocking the beans supported by `QuarkusMock`.  This functionality is available with the `@io.quarkus.test.InjectMock` annotation if the `quarkus-junit5-mockito` dependency is present."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:849
msgid "Using `@InjectMock`, the previous example could be written as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:857
#, no-wrap
msgid ""
"    @InjectMock\n"
"    MockableBean1 mockableBean1; // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:860
#, no-wrap
msgid ""
"    @InjectMock\n"
"    MockableBean2 mockableBean2;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:865
#, no-wrap
msgid ""
"    @BeforeEach\n"
"    public void setup() {\n"
"        Mockito.when(mockableBean1.greet(\"Stuart\")).thenReturn(\"A mock for Stuart\"); // <2>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:871
#, no-wrap
msgid ""
"    @Test\n"
"    public void firstTest() {\n"
"        Assertions.assertEquals(\"A mock for Stuart\", mockableBean1.greet(\"Stuart\"));\n"
"        Assertions.assertEquals(null, mockableBean2.greet(\"Stuart\")); // <3>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:878
#, no-wrap
msgid ""
"    @Test\n"
"    public void secondTest() {\n"
"        Mockito.when(mockableBean2.greet(\"Stuart\")).thenReturn(\"Bonjour Stuart\"); // <4>\n"
"        Assertions.assertEquals(\"A mock for Stuart\", mockableBean1.greet(\"Stuart\"));\n"
"        Assertions.assertEquals(\"Bonjour Stuart\", mockableBean2.greet(\"Stuart\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:895
#, no-wrap
msgid ""
"        public String greet(String name) {\n"
"            return \"Hello \" + name;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:897
msgid "`@InjectMock` results in a Mockito mock being created, which is then available in test methods of the test class (other test classes are *not* affected by this)"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:898
msgid "The `mockableBean1` is configured here for every test method of the class"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:899
msgid "Since the `mockableBean2` mock has not been configured, it will return the default Mockito response."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:900
msgid "In this test the `mockableBean2` is configured, so it returns the configured response."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:904
msgid "Although the test above is good for showing the capabilities of `@InjectMock`, it is not a good representation of a real test. In a real test we would most likely configure a mock, but then test a bean that uses the mocked bean.  Here is an example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:909
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class MockGreetingServiceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:912
#, no-wrap
msgid ""
"    @InjectMock\n"
"    GreetingService greetingService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:922
#, no-wrap
msgid ""
"    @Test\n"
"    public void testGreeting() {\n"
"        when(greetingService.greet()).thenReturn(\"hi\");\n"
"        given()\n"
"                .when().get(\"/greeting\")\n"
"                .then()\n"
"                .statusCode(200)\n"
"                .body(is(\"hi\")); // <1>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:925
#: upstream/_versions/main/guides/getting-started-testing.adoc:995
#, no-wrap
msgid ""
"    @Path(\"greeting\")\n"
"    public static class GreetingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:927
#: upstream/_versions/main/guides/getting-started-testing.adoc:997
#, no-wrap
msgid "        final GreetingService greetingService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:931
#: upstream/_versions/main/guides/getting-started-testing.adoc:1001
#, no-wrap
msgid ""
"        public GreetingResource(GreetingService greetingService) {\n"
"            this.greetingService = greetingService;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:938
#: upstream/_versions/main/guides/getting-started-testing.adoc:1008
#, no-wrap
msgid ""
"        @GET\n"
"        @Produces(\"text/plain\")\n"
"        public String greet() {\n"
"            return greetingService.greet();\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:946
#: upstream/_versions/main/guides/getting-started-testing.adoc:1016
#, no-wrap
msgid ""
"    @ApplicationScoped\n"
"    public static class GreetingService {\n"
"        public String greet(){\n"
"            return \"hello\";\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:948
msgid "Since we configured `greetingService` as a mock, the `GreetingResource` which uses the `GreetingService` bean, we get the mocked response instead of the response of the regular `GreetingService` bean"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:952
msgid "By default, the `@InjectMock` annotation can be used for any normal CDI scoped bean (e.g. `@ApplicationScoped`, `@RequestScoped`).  Mocking `@Singleton` beans can be performed by adding the `@MockitoConfig(convertScopes = true)` annotation.  This will convert the `@Singleton` bean to an `@ApplicationScoped` bean for the test."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:954
msgid "This is considered an advanced option and should only be performed if you fully understand the consequences of changing the scope of the bean."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/getting-started-testing.adoc:955
#, no-wrap
msgid "Using Spies instead of Mocks with `@InjectSpy`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:959
msgid "Building on the features provided by `InjectMock`, Quarkus also allows users to effortlessly take advantage of link:https://site.mockito.org/[Mockito] for spying on the beans supported by `QuarkusMock`.  This functionality is available via the `@io.quarkus.test.junit.mockito.InjectSpy` annotation which is available in the `quarkus-junit5-mockito` dependency."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:963
msgid "Sometimes when testing you only need to verify that a certain logical path was taken, or you only need to stub out a single method's response while still executing the rest of the methods on the Spied clone. Please see link:https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#13[Mockito documentation - Spying on real objects] for more details on Spy partial mocks.  In either of those situations a Spy of the object is preferable.  Using `@InjectSpy`, the previous example could be written as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:968
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class SpyGreetingServiceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:971
#, no-wrap
msgid ""
"    @InjectSpy\n"
"    GreetingService greetingService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:979
#, no-wrap
msgid ""
"    @Test\n"
"    public void testDefaultGreeting() {\n"
"        given()\n"
"                .when().get(\"/greeting\")\n"
"                .then()\n"
"                .statusCode(200)\n"
"                .body(is(\"hello\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:982
#, no-wrap
msgid ""
"        Mockito.verify(greetingService, Mockito.times(1)).greet(); <1>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:992
#, no-wrap
msgid ""
"    @Test\n"
"    public void testOverrideGreeting() {\n"
"        doReturn(\"hi\").when(greetingService).greet(); <2>\n"
"        given()\n"
"                .when().get(\"/greeting\")\n"
"                .then()\n"
"                .statusCode(200)\n"
"                .body(is(\"hi\")); <3>\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1018
msgid "Instead of overriding the value, we just want to ensure that the greet method on our `GreetingService` was called by this test."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1019
msgid "Here we are telling the Spy to return \"hi\" instead of \"hello\". When the `GreetingResource` requests the greeting from `GreetingService` we get the mocked response instead of the response of the regular `GreetingService` bean. Sometimes it's impossible or impractical to use `when(Object)` for stubbing spies. Therefore when using spies please consider `doReturn|Answer|Throw()` family of methods for stubbing."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1020
msgid "We are verifying that we get the mocked response from the Spy."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/getting-started-testing.adoc:1021
#, no-wrap
msgid "Using `@InjectMock` with `@RestClient`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1024
msgid "The `@RegisterRestClient` registers the implementation of the rest-client at runtime, and because the bean needs to be a regular scope, you have to annotate your interface with `@ApplicationScoped`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1031
#, no-wrap
msgid ""
"@Path(\"/\")\n"
"@ApplicationScoped\n"
"@RegisterRestClient\n"
"public interface GreetingService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1037
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/hello\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    String hello();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1040
msgid "For the test class here is an example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1049
#, no-wrap
msgid ""
"    @InjectMock\n"
"    @RestClient // <1>\n"
"    GreetingService greetingService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1053
#, no-wrap
msgid ""
"    @Test\n"
"    public void testHelloEndpoint() {\n"
"        Mockito.when(greetingService.hello()).thenReturn(\"hello from mockito\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1060
#, no-wrap
msgid ""
"        given()\n"
"          .when().get(\"/hello\")\n"
"          .then()\n"
"             .statusCode(200)\n"
"             .body(is(\"hello from mockito\"));\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1064
msgid "Indicate that this injection point is meant to use an instance of `RestClient`."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:1065
#, no-wrap
msgid "Mocking with Panache"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1068
msgid "If you are using the `quarkus-hibernate-orm-panache` or `quarkus-mongodb-panache` extensions, check out the xref:hibernate-orm-panache.adoc#mocking[Hibernate ORM with Panache Mocking] and xref:mongodb-panache.adoc#mocking[MongoDB with Panache Mocking] documentation for the easiest way to mock your data access."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:1069
#, no-wrap
msgid "Testing Security"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1072
msgid "If you are using Quarkus Security, check out the xref:security-testing.adoc[Testing Security] section for information on how to easily test security features of the application."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:1074
#, no-wrap
msgid "Starting services before the Quarkus application starts"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1077
msgid "A very common need is to start some services on which your Quarkus application depends, before the Quarkus application starts for testing. To address this need, Quarkus provides `@io.quarkus.test.common.QuarkusTestResource` and `io.quarkus.test.common.QuarkusTestResourceLifecycleManager`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1080
msgid "By simply annotating any test in the test suite with `@QuarkusTestResource`, Quarkus will run the corresponding `QuarkusTestResourceLifecycleManager` before any tests are run.  A test suite is also free to utilize multiple `@QuarkusTestResource` annotations, in which case all the corresponding `QuarkusTestResourceLifecycleManager` objects will be run before the tests. When using multiple test resources they can be started concurrently. For that you need to set `@QuarkusTestResource(parallel = true)`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1083
msgid "Test resources are global, even if they are defined on a test class or custom profile, which means they will all be activated for all tests, even though we do remove duplicates. If you want to only enable a test resource on a single test class or test profile, you can use `@QuarkusTestResource(restrictToAnnotatedClass = true)`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1088
msgid "Quarkus provides a few implementations of `QuarkusTestResourceLifecycleManager` out of the box (see `io.quarkus.test.h2.H2DatabaseTestResource` which starts an H2 database, or `io.quarkus.test.kubernetes.client.KubernetesServerTestResource` which starts a mock Kubernetes API server), but it is common to create custom implementations to address specific application needs.  Common cases include starting docker containers using https://www.testcontainers.org/[Testcontainers] (an example of which can be found https://github.com/quarkusio/quarkus/blob/main/test-framework/keycloak-server/src/main/java/io/quarkus/test/keycloak/server/KeycloakTestResourceLifecycleManager.java[here]), or starting a mock HTTP server using https://wiremock.org/[Wiremock] (an example of which can be found https://github.com/geoand/quarkus-test-demo/blob/main/src/test/java/org/acme/getting/started/country/WiremockCountries.java[here])."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:1090
#, no-wrap
msgid "Altering the test class"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1093
msgid "When creating a custom `QuarkusTestResourceLifecycleManager` that needs to inject the something into the test class, the `inject` methods can be used.  If for example you have a test like the following:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1099
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(MyWireMockResource.class)\n"
"public class MyTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1102
#, no-wrap
msgid ""
"    @InjectWireMock // this a custom annotation you are defining in your own application\n"
"    WireMockServer wireMockServer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1108
#, no-wrap
msgid ""
"    @Test\n"
"    public someTest() {\n"
"        // control wiremock in some way and perform test\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1111
msgid "Making `MyWireMockResource` inject the `wireMockServer` field can be done as shown in the `inject` method of the following code snippet:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1115
#, no-wrap
msgid "public class MyWireMockResource implements QuarkusTestResourceLifecycleManager {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1117
#, no-wrap
msgid "    WireMockServer wireMockServer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1122
#, no-wrap
msgid ""
"    @Override\n"
"    public Map<String, String> start() {\n"
"        wireMockServer = new WireMockServer(8090);\n"
"        wireMockServer.start();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1124
#, no-wrap
msgid "        // create some stubs\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1127
#, no-wrap
msgid ""
"        return Map.of(\"some.service.url\", \"localhost:\" + wireMockServer.port());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1135
#, no-wrap
msgid ""
"    @Override\n"
"    public synchronized void stop() {\n"
"        if (wireMockServer != null) {\n"
"            wireMockServer.stop();\n"
"            wireMockServer = null;\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1141
#, no-wrap
msgid ""
"    @Override\n"
"    public void inject(TestInjector testInjector) {\n"
"        testInjector.injectIntoFields(wireMockServer, new TestInjector.AnnotatedAndMatchesType(InjectWireMock.class, WireMockServer.class));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1145
msgid "It is worth mentioning that this injection into the test class is not under the control of CDI and happens after CDI has performed any necessary injections into the test class."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:1146
#, no-wrap
msgid "Annotation-based test resources"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1150
msgid "It is possible to write test resources that are enabled and configured using annotations. This is enabled by placing the `@QuarkusTestResource` on an annotation which will be used to enable and configure the test resource."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1153
msgid "For example, this defines the `@WithKubernetesTestServer` annotation, which you can use on your tests to activate the `KubernetesServerTestResource`, but only for the annotated test class. You can also place them on your `QuarkusTestProfile` test profiles."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1164
#, no-wrap
msgid ""
"@QuarkusTestResource(KubernetesServerTestResource.class)\n"
"@Retention(RetentionPolicy.RUNTIME)\n"
"@Target(ElementType.TYPE)\n"
"public @interface WithKubernetesTestServer {\n"
"    /**\n"
"     * Start it with HTTPS\n"
"     */\n"
"    boolean https() default false;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1169
#, no-wrap
msgid ""
"    /**\n"
"     * Start it in CRUD mode\n"
"     */\n"
"    boolean crud() default true;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1175
#, no-wrap
msgid ""
"    /**\n"
"     * Port to use, defaults to any available port\n"
"     */\n"
"    int port() default 0;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1179
msgid "The `KubernetesServerTestResource` class has to implement the `QuarkusTestResourceConfigurableLifecycleManager` interface in order to be configured using the previous annotation:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1184
#, no-wrap
msgid ""
"public class KubernetesServerTestResource\n"
"        implements QuarkusTestResourceConfigurableLifecycleManager<WithKubernetesTestServer> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1188
#, no-wrap
msgid ""
"    private boolean https = false;\n"
"    private boolean crud = true;\n"
"    private int port = 0;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1195
#, no-wrap
msgid ""
"    @Override\n"
"    public void init(WithKubernetesTestServer annotation) {\n"
"        this.https = annotation.https();\n"
"        this.crud = annotation.crud();\n"
"        this.port = annotation.port();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1198
#, no-wrap
msgid ""
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1202
msgid "If you want to make the annotation repeatable, the containing annotation type must be annotated with `@QuarkusTestResourceRepeatable`.  For example, this would define a repeatable `@WithRepeatableTestResource` annotation."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1210
#, no-wrap
msgid ""
"@QuarkusTestResource(KubernetesServerTestResource.class)\n"
"@Retention(RetentionPolicy.RUNTIME)\n"
"@Target(ElementType.TYPE)\n"
"@Repeatable(WithRepeatableTestResource.List.class)\n"
"public @interface WithRepeatableTestResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1212
#, no-wrap
msgid "    String key() default \"\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1220
#, no-wrap
msgid ""
"    @Target(ElementType.TYPE)\n"
"    @Retention(RetentionPolicy.RUNTIME)\n"
"    @QuarkusTestResourceRepeatable(WithRepeatableTestResource.class)\n"
"    @interface List {\n"
"        WithRepeatableTestResource[] value();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:1224
#, no-wrap
msgid "Hang Detection"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1229
msgid "`@QuarkusTest` has support for hang detection to help diagnose any unexpected hangs. If no progress is made for a specified time (i.e. no JUnit callbacks are invoked) then Quarkus will print a stack trace to the console to help diagnose the hang.  The default value for this timeout is 10 minutes."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1234
msgid "No further action will be taken, and the tests will continue as normal (generally until CI times out), however the printed stack traces should help diagnose why the build has failed. You can control this timeout with the `quarkus.test.hang-detection-timeout` system property (you can also set this in application.properties, but this won't be read until Quarkus has started, so the timeout for Quarkus start will be the default of 10 minutes)."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:1235
#, no-wrap
msgid "Native Executable Testing"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1239
msgid "It is also possible to test native executables using `@QuarkusIntegrationTest`. This supports all the features mentioned in this guide except injecting into tests (and the native executable runs in a separate non-JVM process this is not really possible)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1242
msgid "This is covered in the xref:building-native-image.adoc[Native Executable Guide]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:1244
#, no-wrap
msgid "Using `@QuarkusIntegrationTest`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1251
msgid "`@QuarkusIntegrationTest` should be used to launch and test the artifact produced by the Quarkus build, and supports testing a jar (of whichever type), a native image or container image.  Put simply, this means that if the result of a Quarkus build (`mvn package` or `gradle build`) is a jar, that jar will be launched as `java -jar ...` and tests run against it.  If instead a native image was built, then the application is launched as `./application ...` and again the tests run against the running application.  Finally, if a container image was created during the build (by including the `quarkus-container-image-jib` or `quarkus-container-image-docker` extensions and having the `quarkus.container-image.build=true` property configured), then a container is created and run (this requires the `docker` executable being present)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1253
msgid "This is a black box test that supports the same set features and has the same limitations."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/getting-started-testing.adoc:1258
msgid "As a test annotated with `@QuarkusIntegrationTest` tests the result of the build, it should be run as part of the integration test suite - i.e. by setting `-DskipITs=false` if using Maven or the `quarkusIntTest` task if using Gradle.  These tests will **not** work if run in the same phase as `@QuarkusTest` as Quarkus has not yet created the final artifact."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1261
msgid "The `pom.xml` file contains:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1284
#, no-wrap
msgid ""
"<plugin>\n"
"    <groupId>org.apache.maven.plugins</groupId>\n"
"    <artifactId>maven-failsafe-plugin</artifactId>\n"
"    <version>${surefire-plugin.version}</version>\n"
"    <executions>\n"
"        <execution>\n"
"            <goals>\n"
"                <goal>integration-test</goal>\n"
"                <goal>verify</goal>\n"
"            </goals>\n"
"            <configuration>\n"
"                <systemPropertyVariables>\n"
"                    <native.image.path>${project.build.directory}/${project.build.finalName}-runner</native.image.path>\n"
"                    <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n"
"                    <maven.home>${maven.home}</maven.home>\n"
"                </systemPropertyVariables>\n"
"            </configuration>\n"
"        </execution>\n"
"    </executions>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1287
msgid "This instructs the failsafe-maven-plugin to run integration-test."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1289
msgid "Then, open the `src/test/java/org/acme/quickstart/GreetingResourceIT.java`. It contains:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1293
#, no-wrap
msgid "package org.acme.quickstart;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1296
#, no-wrap
msgid "import io.quarkus.test.junit.QuarkusIntegrationTest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1299
#, no-wrap
msgid ""
"@QuarkusIntegrationTest // <1>\n"
"public class GreetingResourceIT extends GreetingResourceTest { // <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1301
#, no-wrap
msgid "    // Run the same tests\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1306
msgid "Use another test runner that starts the application from the native file before the tests.  The executable is retrieved by the _Failsafe Maven Plugin_."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1307
msgid "We extend our previous tests as a convenience, but you can also implement your tests."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1309
msgid "More information can be found in the link:building-native-image#testing-the-native-executable[Testing the native executable Guide]."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/getting-started-testing.adoc:1313
msgid "When the application is tested using `@QuarkusIntegrationTest` it is launched using the `prod` configuration profile, but this can be changed using the `quarkus.test.integration-test-profile` property."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/getting-started-testing.adoc:1319
msgid "While adding test-specific configuration properties using `src/test/resources/application.properties` (note there's `test`, not `main`)  is possible for unit tests, it's not possible for integration tests."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:1321
#, no-wrap
msgid "Launching containers"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1326
msgid "When `@QuarkusIntegrationTest` results in launching a container (because the application was built with `quarkus.container-image.build` set to `true`), the container is launched on a predictable container network. This facilitates writing integration tests that need to launch services to support the application.  This means that `@QuarkusIntegrationTest` works out of the box with containers launched via xref:dev-services.adoc[Dev Services], but it also means that it enables using xref:quarkus-test-resource[QuarkusTestLifecycleManager] resources that launch additional containers.  This can be achieved by having your `QuarkusTestLifecycleManager` implement `io.quarkus.test.common.DevServicesContext.ContextAware`. A simple example could be the following:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1330
msgid "The container running the resource to test against, for example PostgreSQL via Testcontainers, is assigned an IP address from the container's network.  Use the container's \"public\" IP from its network and the \"unmapped\" port number to connect to the service.  The Testcontainers library usually return connection strings without respecting the container network, so additional code is needed to provide Quarkus the \"correct\" connection string using the container's IP on the container network and the _unmapped_ port number."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1332
msgid "The following example illustrates the use with PostgreSQL, but the approach is applicable to all containers."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1337
#, no-wrap
msgid ""
"import io.quarkus.test.common.DevServicesContext;\n"
"import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1340
#, no-wrap
msgid ""
"import org.testcontainers.containers.JdbcDatabaseContainer;\n"
"import org.testcontainers.containers.PostgreSQLContainer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1344
#, no-wrap
msgid ""
"import java.util.HashMap;\n"
"import java.util.Map;\n"
"import java.util.Optional;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1346
#, no-wrap
msgid "public class CustomResource implements QuarkusTestResourceLifecycleManager, DevServicesContext.ContextAware {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1349
#, no-wrap
msgid ""
"    private Optional<String> containerNetworkId;\n"
"    private JdbcDatabaseContainer container;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1354
#, no-wrap
msgid ""
"    @Override\n"
"    public void setIntegrationTestContext(DevServicesContext context) {\n"
"        containerNetworkId = context.containerNetworkId();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1359
#, no-wrap
msgid ""
"    @Override\n"
"    public Map<String, String> start() {\n"
"        // start a container making sure to call withNetworkMode() with the value of containerNetworkId if present\n"
"        container = new PostgreSQLContainer<>(\"postgres:latest\").withLogConsumer(outputFrame -> {});\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1362
#, no-wrap
msgid ""
"        // apply the network to the container\n"
"        containerNetworkId.ifPresent(container::withNetworkMode);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1365
#, no-wrap
msgid ""
"        // start container before retrieving its URL or other properties\n"
"        container.start();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1372
#, no-wrap
msgid ""
"        String jdbcUrl = container.getJdbcUrl();\n"
"        if (containerNetworkId.isPresent()) {\n"
"            // Replace hostname + port in the provided JDBC URL with the hostname of the Docker container\n"
"            // running PostgreSQL and the listening port.\n"
"            jdbcUrl = fixJdbcUrl(jdbcUrl);\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1379
#, no-wrap
msgid ""
"        // return a map containing the configuration the application needs to use the service\n"
"        return ImmutableMap.of(\n"
"            \"quarkus.datasource.username\", container.getUsername(),\n"
"            \"quarkus.datasource.password\", container.getPassword(),\n"
"            \"quarkus.datasource.jdbc.url\", jdbcUrl);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1383
#, no-wrap
msgid ""
"    private String fixJdbcUrl(String jdbcUrl) {\n"
"        // Part of the JDBC URL to replace\n"
"        String hostPort = container.getHost() + ':' + container.getMappedPort(PostgreSQLContainer.POSTGRESQL_PORT);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1389
#, no-wrap
msgid ""
"        // Host/IP on the container network plus the unmapped port\n"
"        String networkHostPort =\n"
"            container.getCurrentContainerInfo().getConfig().getHostName()\n"
"            + ':'\n"
"            + PostgreSQLContainer.POSTGRESQL_PORT;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1392
#, no-wrap
msgid ""
"        return jdbcUrl.replace(hostPort, networkHostPort);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1398
#, no-wrap
msgid ""
"    @Override\n"
"    public void stop() {\n"
"        // close container\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1401
msgid "`CustomResource` would be activated on a `@QuarkusIntegrationTest` using `@QuarkusTestResource` as is described in the corresponding section of this doc."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:1402
#, no-wrap
msgid "Executing against a running application"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1406
msgid "`@QuarkusIntegrationTest` supports executing tests against an already running instance of the application. This can be achieved by setting the `quarkus.http.test-host` system property when running the tests."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1408
msgid "An example use of this could be the following Maven command, that forces `@QuarkusIntegrationTest` to execute against that is accessible at `http://1.2.3.4:4321`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1412
#, no-wrap
msgid "./mvnw verify -Dquarkus.http.test-host=1.2.3.4 -Dquarkus.http.test-port=4321\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1415
msgid "To test against a running instance that only accepts SSL/TLS connection (example: `https://1.2.3.4:4321`) set the system property `quarkus.http.test-ssl-enabled` to `true`."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:1416
#, no-wrap
msgid "Mixing `@QuarkusTest` with other type of tests"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1421
msgid "Mixing tests annotated with `@QuarkusTest` with tests annotated with either `@QuarkusDevModeTest`, `@QuarkusProdModeTest` or `@QuarkusUnitTest` is not allowed in a single execution run (in a single Maven Surefire Plugin execution, for instance), while the latter three can coexist."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1424
msgid "The reason of this restriction is that `@QuarkusTest` starts a Quarkus server for the whole lifetime of the tests execution run, thus preventing the other tests to start their own Quarkus server."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1427
msgid "To alleviate this restriction, the `@QuarkusTest` annotation defines a JUnit 5 `@Tag`: `io.quarkus.test.junit.QuarkusTest`.  You can use this tag to isolate the `@QuarkusTest` test in a specific execution run, for example with the Maven Surefire Plugin:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1459
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-surefire-plugin</artifactId>\n"
"    <version>${surefire-plugin.version}</version>\n"
"    <executions>\n"
"        <execution>\n"
"            <id>default-test</id>\n"
"            <goals>\n"
"                <goal>test</goal>\n"
"            </goals>\n"
"            <configuration>\n"
"                <excludedGroups>io.quarkus.test.junit.QuarkusTest</excludedGroups>\n"
"            </configuration>\n"
"        </execution>\n"
"        <execution>\n"
"            <id>quarkus-test</id>\n"
"            <goals>\n"
"                <goal>test</goal>\n"
"            </goals>\n"
"            <configuration>\n"
"                <groups>io.quarkus.test.junit.QuarkusTest</groups>\n"
"            </configuration>\n"
"        </execution>\n"
"    </executions>\n"
"    <configuration>\n"
"        <systemProperties>\n"
"            <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n"
"        </systemProperties>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:1462
#, no-wrap
msgid "Running `@QuarkusTest` from an IDE"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1465
msgid "Most IDEs offer the possibility to run a selected class as a JUnit test directly. For this you should set a few properties in the settings of your chosen IDE:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1467
msgid "`java.util.logging.manager` (see xref:logging.adoc[Logging Guide])"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1469
msgid "`maven.home` (only if there are any custom settings in `${maven.home}/conf/settings.xml`, see xref:maven-tooling.adoc[Maven Guide])"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1471
msgid "`maven.settings` (in case a custom version of `settings.xml` file should be used for the tests)"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:1472
#, no-wrap
msgid "Eclipse separate JRE definition"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1475
msgid "Copy your current \"Installed JRE\" definition into a new one, where you will add the properties as a new VM arguments:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1477
msgid "`-Djava.util.logging.manager=org.jboss.logmanager.LogManager`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1479
msgid "`-Dmaven.home=<path-to-your-maven-installation>`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1481
msgid "Use this JRE definition as your Quarkus project targeted runtime and the workaround will be applied to any \"Run as JUnit\" configuration."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:1482
#, no-wrap
msgid "VSCode \"run with\" configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1485
msgid "The `settings.json` placed in the root of your project directory or in the workspace will need the following workaround in your test configuration:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1495
#, no-wrap
msgid ""
"\"java.test.config\": [\n"
"    {\n"
"        \"name\": \"quarkusConfiguration\",\n"
"        \"vmargs\": [ \"-Djava.util.logging.manager=org.jboss.logmanager.LogManager -Dmaven.home=<path-to-your-maven-installation> ...\" ],\n"
"        ...\n"
"    },\n"
"  ...\n"
"]\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:1497
#, no-wrap
msgid "IntelliJ IDEA JUnit template"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1500
msgid "Nothing needed in IntelliJ IDEA because the IDE will pick the `systemPropertyVariables` from the surefire plugin configuration in `pom.xml`."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:1501
#, no-wrap
msgid "Testing Dev Services"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1505
msgid "By default, tests should just work with xref:dev-services.adoc[Dev Services], however from some use cases you may need access to the automatically configured properties in your tests."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1510
msgid "You can do this with `io.quarkus.test.common.DevServicesContext`, which can be injected directly into any `@QuarkusTest` or `@QuarkusIntegrationTest`. All you need to do is define a field of type `DevServicesContext` and it will be automatically injected. Using this you can retrieve any properties that have been set. Generally this is used to directly connect to a resource from the test itself, e.g. to connect to kafka to send messages to the application under test."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1515
msgid "Injection is also supported into objects that implement `io.quarkus.test.common.DevServicesContext.ContextAware`. If you have a field that implements `io.quarkus.test.common.DevServicesContext.ContextAware` Quarkus will call the `setIntegrationTestContext` method to pass the context into this object. This allows client logic to be encapsulated in a utility class."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1518
msgid "`QuarkusTestResourceLifecycleManager` implementations can also implement `ContextAware` to get access to these properties, which allows you to set up the resource before Quarkus starts (e.g. configure a KeyCloak instance, add data to a database etc)."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/getting-started-testing.adoc:1524
msgid "For `@QuarkusIntegrationTest` tests that result in launcher the application as a container, `io.quarkus.test.common.DevServicesContext` also provides access to the id of the container network on which the application container was launched (via the `containerNetworkId` method).  This can be used by `QuarkusTestResourceLifecycleManager` that need to launch additional containers that the application will communicate with."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/getting-started-testing.adoc:1526
#, no-wrap
msgid "Testing Components"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1529
msgid "This feature is experimental and the API may change in the future."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1533
msgid "In Quarkus, the component model is built on top CDI.  Therefore, Quarkus provides the `QuarkusComponentTestExtension`, a JUnit extension to ease the testing of components and mocking of their dependencies.  This extension is available in the `quarkus-junit5-component` dependency."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1535
msgid "Let's have a component `Foo`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1539
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1542
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.inject.Inject;\n"
msgstr ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.inject.Inject;\n"

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1545
#, no-wrap
msgid ""
"@ApplicationScoped <1>\n"
"public class Foo {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1548
#, no-wrap
msgid ""
"    @Inject\n"
"    Charlie charlie; <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1551
#, no-wrap
msgid ""
"    @ConfigProperty(name = \"bar\")\n"
"    boolean bar; <3>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1556
#, no-wrap
msgid ""
"    public String ping() {\n"
"        return bar ? charlie.ping() : \"nok\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1558
msgid "`Foo` is an `@ApplicationScoped` CDI bean."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1559
msgid "`Foo` depends on `Charlie` which declares a method `ping()`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1560
msgid "`Foo` depends on the config property `bar`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1562
msgid "Then a component test could look like:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1566
#: upstream/_versions/main/guides/getting-started-testing.adoc:1603
#: upstream/_versions/main/guides/getting-started-testing.adoc:1671
#: upstream/_versions/main/guides/getting-started-testing.adoc:1720
#, no-wrap
msgid "import static org.junit.jupiter.api.Assertions.assertEquals;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1573
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import io.quarkus.test.InjectMock;\n"
"import io.quarkus.test.component.TestConfigProperty;\n"
"import io.quarkus.test.component.QuarkusComponentTest;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.mockito.Mockito;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1577
#, no-wrap
msgid ""
"@QuarkusComponentTest <1>\n"
"@TestConfigProperty(key = \"bar\", value = \"true\") <2>\n"
"public class FooTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1580
#, no-wrap
msgid ""
"    @Inject\n"
"    Foo foo; <3>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1583
#, no-wrap
msgid ""
"    @InjectMock\n"
"    Charlie charlieMock; <4>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1590
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPing() {\n"
"        Mockito.when(charlieMock.ping()).thenReturn(\"OK\"); <5>\n"
"        assertEquals(\"OK\", foo.ping());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1592
msgid "The `QuarkusComponentTest` annotation registers the JUnit extension."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1593
msgid "Sets a configuration property for the test."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1594
msgid "The test injects the component under the test. The types of all fields annotated with `@Inject` are considered the component types under test. You can also specify additional component classes via `@QuarkusComponentTest#value()`. Furthermore, the static nested classes declared on the test class are components too."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1595
msgid "The test also injects `Charlie`, a dependency for which a synthetic `@Singleton` bean is registered automatically. The injected reference is an \"unconfigured\" Mockito mock."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1596
msgid "We can leverage the Mockito API in a test method to configure the behavior."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1599
msgid "If you need the full control over the `QuarkusComponentTestExtension` configuration then you can use the `@RegisterExtension` annotation and configure the extension programatically.  The test above could be rewritten like:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1609
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import io.quarkus.test.InjectMock;\n"
"import io.quarkus.test.component.QuarkusComponentTestExtension;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.mockito.Mockito;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1611
#, no-wrap
msgid "public class FooTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1614
#, no-wrap
msgid ""
"    @RegisterExtension <1>\n"
"    static final QuarkusComponentTestExtension extension = QuarkusComponentTestExtension.builder().configProperty(\"bar\",\"true\").build();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1617
#: upstream/_versions/main/guides/getting-started-testing.adoc:1681
#: upstream/_versions/main/guides/getting-started-testing.adoc:1730
#, no-wrap
msgid ""
"    @Inject\n"
"    Foo foo;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1620
#, no-wrap
msgid ""
"    @InjectMock\n"
"    Charlie charlieMock;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1627
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPing() {\n"
"        Mockito.when(charlieMock.ping()).thenReturn(\"OK\");\n"
"        assertEquals(\"OK\", foo.ping());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1629
msgid "The `QuarkusComponentTestExtension` is configured in a static field of the test class."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:1630
#, no-wrap
msgid "Lifecycle"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1638
msgid "So what exactly does the `QuarkusComponentTest` do? It starts the CDI container and registers a dedicated xref:config-reference.adoc[configuration object].  If the test instance lifecycle is `Lifecycle#PER_METHOD` (default) then the container is started during the `before each` test phase and stopped during the `after each` test phase.  However, if the test instance lifecycle is `Lifecycle#PER_CLASS` then the container is started during the `before all` test phase and stopped during the `after all` test phase.  The fields annotated with `@Inject` and `@InjectMock` are injected after a test instance is created.  Finally, the CDI request context is activated and terminated per each test method."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:1639
#, no-wrap
msgid "Auto Mocking Unsatisfied Dependencies"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1646
msgid "Unlike in regular CDI environments the test does not fail if a component injects an unsatisfied dependency.  Instead, a synthetic bean is registered automatically for each combination of required type and qualifiers of an injection point that resolves to an unsatisfied dependency.  The bean has the `@Singleton` scope so it's shared across all injection points with the same required type and qualifiers.  The injected reference is an _unconfigured_ Mockito mock.  You can inject the mock in your test and leverage the Mockito API to configure the behavior."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:1647
#, no-wrap
msgid "Custom Mocks For Unsatisfied Dependencies"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1651
msgid "Sometimes you need the full control over the bean attributes and maybe even configure the default mock behavior.  You can use the mock configurator API via the `QuarkusComponentTestExtensionBuilder#mock()` method."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:1652
#, no-wrap
msgid "Configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1656
msgid "You can set the configuration properties for a test with the `@io.quarkus.test.component.TestConfigProperty` annotation or with the `QuarkusComponentTestExtensionBuilder#configProperty(String, String)` method.  If you only need to use the default values for missing config properties, then the `@QuarkusComponentTest#useDefaultConfigProperties()` or `QuarkusComponentTestExtensionBuilder#useDefaultConfigProperties()` might come in useful."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1659
msgid "It is also possible to set configuration properties for a test method with the `@io.quarkus.test.component.TestConfigProperty` annotation.  However, if the test instance lifecycle is `Lifecycle#_PER_CLASS` this annotation can only be used on the test class and is ignored on test methods."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1661
msgid "CDI beans are also automatically registered for all injected https://smallrye.io/smallrye-config/Main/config/mappings/[Config Mappings]. The mappings are populated with the test configuration properties."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/getting-started-testing.adoc:1662
#, no-wrap
msgid "Mocking CDI Interceptors"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1667
msgid "If a tested component class declares an interceptor binding then you might need to mock the interception too.  There are two ways to accomplish this task.  First, you can define an interceptor class as a static nested class of the test class."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1675
#: upstream/_versions/main/guides/getting-started-testing.adoc:1724
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import io.quarkus.test.component.QuarkusComponentTest;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1678
#: upstream/_versions/main/guides/getting-started-testing.adoc:1727
#, no-wrap
msgid ""
"@QuarkusComponentTest\n"
"public class FooTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1686
#: upstream/_versions/main/guides/getting-started-testing.adoc:1735
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPing() {\n"
"        assertEquals(\"OK\", foo.ping());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1689
#: upstream/_versions/main/guides/getting-started-testing.adoc:1744
#, no-wrap
msgid ""
"    @ApplicationScoped\n"
"    static class Foo {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1694
#: upstream/_versions/main/guides/getting-started-testing.adoc:1749
#, no-wrap
msgid ""
"       @SimpleBinding <1>\n"
"       String ping() {\n"
"         return \"ok\";\n"
"       }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1700
#, no-wrap
msgid ""
"    @SimpleBinding\n"
"    @Interceptor\n"
"    static class SimpleInterceptor { <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1705
#, no-wrap
msgid ""
"        @AroundInvoke\n"
"        Object aroundInvoke(InvocationContext context) throws Exception {\n"
"            return context.proceed().toString().toUpperCase();\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1708
#: upstream/_versions/main/guides/getting-started-testing.adoc:1752
#, no-wrap
msgid ""
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1710
msgid "`@SimpleBinding` is an interceptor binding."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1711
msgid "The interceptor class is automatically considered a tested component."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1713
msgid "Static nested classed declared on a test class that is annotated with `@QuarkusComponentTest` are excluded from bean discovery when running a `@QuarkusTest` in order to prevent unintentional CDI conflicts."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1716
msgid "Furthermore, you can also declare a \"test interceptor method\" directly on the test class.  This method is then invoked in the relevant interception phase."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/getting-started-testing.adoc:1741
#, no-wrap
msgid ""
"    @SimpleBinding <1>\n"
"    @AroundInvoke <2>\n"
"    Object aroundInvoke(InvocationContext context) throws Exception {\n"
"       return context.proceed().toString().toUpperCase();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1754
msgid "The interceptor bindings of the resulting interceptor are specified by annotating the method with the interceptor binding types."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/getting-started-testing.adoc:1754
msgid "Defines the interception type."
msgstr ""
