# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:12+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: upstream/_versions/main/guides/security-jpa.adoc:2
#, no-wrap
msgid "Quarkus Security with Jakarta Persistence"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:7
msgid "Quarkus provides a Jakarta Persistence (formerly known as JPA) identity provider, similar to the xref:security-jdbc.adoc[JDBC identity provider], suitable for use with the xref:security-basic-authentication.adoc[Basic] and xref:security-authentication-mechanisms.adoc#form-auth[Form-based] Quarkus Security mechanisms, which require a combination of username and password credentials."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:9
msgid "The Jakarta Persistence `IdentityProvider` creates a `SecurityIdentity` instance, which is used during user authentication to verify and authorize access requests making your Quarkus application secure."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:11
msgid "For an example of practical use of Basic authentication and Jakarta Persistence, see the xref:security-basic-authentication-tutorial.adoc[Secure a Quarkus application with Basic authentication and Jakarta Persistence] tutorial."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-jpa.adoc:13
#, no-wrap
msgid "Jakarta Persistence entity specification"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:16
msgid "Quarkus security offers a Jakarta Persistence integration to collect usernames, passwords, and roles, and store them into Jakarta Persistence database entities."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:18
msgid "The following Jakarta Persistence entity specification demonstrates how users' information needs to be stored in a Jakarta Persistence entity and properly mapped so that Quarkus can retrieve this information from a database."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:21
msgid "The `@UserDefinition` annotation must be present on a Jakarta Persistence entity, regardless of whether xref:hibernate-orm-panache.adoc[simplified Hibernate ORM with Panache] is used or not."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:23
msgid "The `@Username` and `@Password` field types are always `String`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:25
msgid "The `@Roles` field must either be `String`, `Collection<String>`, or a `Collection<X>`, where `X` is an entity class with a single `String` field annotated as `@RolesValue`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:27
msgid "Each `String` role element type is parsed as a comma-separated list of roles."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:29
msgid "The following example demonstrates storing security information by adding annotations to the `user` entity:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:33
#, no-wrap
msgid "package org.acme.security.jpa;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:36
#, no-wrap
msgid ""
"import jakarta.persistence.Entity;\n"
"import jakarta.persistence.Table;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:43
#, no-wrap
msgid ""
"import io.quarkus.hibernate.orm.panache.PanacheEntity;\n"
"import io.quarkus.elytron.security.common.BcryptUtil;\n"
"import io.quarkus.security.jpa.Password;\n"
"import io.quarkus.security.jpa.Roles;\n"
"import io.quarkus.security.jpa.UserDefinition;\n"
"import io.quarkus.security.jpa.Username;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:54
#, no-wrap
msgid ""
"@Entity\n"
"@Table(name = \"test_user\")\n"
"@UserDefinition <1>\n"
"public class User extends PanacheEntity {\n"
"    @Username <2>\n"
"    public String username;\n"
"    @Password <3>\n"
"    public String password;\n"
"    @Roles <4>\n"
"    public String role;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:69
#, no-wrap
msgid ""
"    /**\n"
"     * Adds a new user to the database\n"
"     * @param username the username\n"
"     * @param password the unencrypted password (it will be encrypted with bcrypt)\n"
"     * @param role the comma-separated roles\n"
"     */\n"
"    public static void add(String username, String password, String role) { <5>\n"
"        User user = new User();\n"
"        user.username = username;\n"
"        user.password = BcryptUtil.bcryptHash(password);\n"
"        user.role = role;\n"
"        user.persist();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:73
msgid "The `security-jpa` extension initializes only if a single entity is annotated with `@UserDefinition`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:75
msgid "The `@UserDefinition` annotation must be present on a single entity, either a regular Hibernate ORM entity or a Hibernate ORM with a Panache entity."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:76
msgid "Indicates the field used for the username."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:78
msgid "Indicates the field used for the password.  By default, `security-jpa` uses bcrypt-hashed passwords, or you can configure plain text or custom passwords instead."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:79
msgid "This indicates the comma-separated list of roles added to the target principal representation attributes."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:80
msgid "This method allows you to add users while hashing passwords with the proper `bcrypt` hash."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-jpa.adoc:82
#, no-wrap
msgid "Jakarta Persistence entity as storage of roles"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:85
msgid "Use the following example to store roles inside another Jakarta Persistence entity:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:94
#, no-wrap
msgid ""
"@UserDefinition\n"
"@Table(name = \"test_user\")\n"
"@Entity\n"
"public class User extends PanacheEntity {\n"
"    @Username\n"
"    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:97
#, no-wrap
msgid ""
"    @Password\n"
"    public String pass;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:102
#, no-wrap
msgid ""
"    @ManyToMany\n"
"    @Roles\n"
"    public List<Role> roles = new ArrayList<>();\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:105
#, no-wrap
msgid ""
"@Entity\n"
"public class Role extends PanacheEntity {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:108
#, no-wrap
msgid ""
"    @ManyToMany(mappedBy = \"roles\")\n"
"    public List<ExternalRolesUserEntity> users;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:112
#, no-wrap
msgid ""
"    @RolesValue\n"
"    public String role;\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-jpa.adoc:114
#, no-wrap
msgid "Password storage and hashing"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:117
msgid "When developing applications with Quarkus, you can decide how to manage password storage and hashing. You can choose to keep the default password and hashing settings of Quarkus, or you can hash passwords manually."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:122
msgid "With the default option, passwords are stored and hashed with https://en.wikipedia.org/wiki/Bcrypt[bcrypt] under the https://en.wikipedia.org/wiki/Crypt_(C)[Modular Crypt Format] (MCF).  While using MCF, the hashing algorithm, iteration count, and salt are stored as a part of the hashed value.  As such, we do not need dedicated columns to keep them."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-jpa.adoc:126
msgid "In cryptography, a salt is a name for random data used as an additional input to a one-way function that hashes data, a password, or a passphrase."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:129
msgid "To represent passwords stored in the database which were hashed using different hashing algorithms, create a class that implements `org.wildfly.security.password.PasswordProvider` as shown in the example below."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:131
msgid "The following snippet shows how to set a custom password provider that represents a password which was hashed with the SHA256 hashing algorithm."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:136
#, no-wrap
msgid ""
"import org.wildfly.security.password.Password;\n"
"import org.wildfly.security.password.PasswordProvider;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:144
#, no-wrap
msgid ""
"@UserDefinition\n"
"@Table(name = \"test_user\")\n"
"@Entity\n"
"public class CustomPasswordUserEntity {\n"
"    @Id\n"
"    @GeneratedValue\n"
"    public Long id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:148
#, no-wrap
msgid ""
"    @Column(name = \"username\")\n"
"    @Username\n"
"    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:152
#, no-wrap
msgid ""
"    @Column(name = \"password\")\n"
"    @Password(value = PasswordType.CUSTOM, provider = CustomPasswordProvider.class)\n"
"    public String pass;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:156
#, no-wrap
msgid ""
"    @Roles\n"
"    public String role;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:161
#, no-wrap
msgid ""
"public class CustomPasswordProvider implements PasswordProvider {\n"
"    @Override\n"
"    public Password getPassword(String passwordInDatabase) {\n"
"        byte[] digest = DatatypeConverter.parseHexBinary(passwordInDatabase);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-jpa.adoc:166
#, no-wrap
msgid ""
"        // Let the security runtime know that this passwordInDatabase is hashed using the SHA256 hashing algorithm\n"
"        return SimpleDigestPassword.createRaw(SimpleDigestPassword.ALGORITHM_SIMPLE_DIGEST_SHA_256, digest);\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-jpa.adoc:172
msgid "For quick creation of a hashed password, use `String BcryptUtil.bcryptHash(String password)`, which defaults to creating a random salt and hashing in ten iterations.  This method also allows specifying the desired amount of iterations and the salt used."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-jpa.adoc:177
msgid "For applications running in a production environment, do not store passwords as plain text."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-jpa.adoc:179
msgid "However, it is possible to store passwords as plain text with the `@Password(PasswordType.CLEAR)` annotation when operating in a test environment."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-jpa.adoc:181
#, no-wrap
msgid "References"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:184
msgid "xref:security-basic-authentication-tutorial.adoc[Secure a Quarkus application with Basic authentication and Jakarta Persistence]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:185
msgid "xref:security-identity-providers.adoc[Identity providers]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-jpa.adoc:185
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr ""
