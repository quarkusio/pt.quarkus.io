# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:12+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/elasticsearch.adoc:6
#, no-wrap
msgid "Connecting to an Elasticsearch cluster"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:12
msgid "Elasticsearch is a well known full text search engine and NoSQL datastore."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:14
msgid "In this guide, we will see how you can get your REST services to interact with an Elasticsearch cluster."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:16
msgid "Quarkus provides two ways of accessing Elasticsearch:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:18
msgid "The lower level REST Client"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:19
msgid "The Elasticsearch Java client"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/elasticsearch.adoc:24
msgid "A third Quarkus extension for the \"high level REST Client\" used to exist, but was removed as this client has been deprecated by Elastic and has some licensing issues."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/elasticsearch.adoc:26
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:30
msgid "Elasticsearch installed or Docker installed"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/elasticsearch.adoc:31
#, no-wrap
msgid "Architecture"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:34
msgid "The application built in this guide is quite simple: the user can add elements in a list using a form and the list is updated."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:36
msgid "All the information between the browser and the server is formatted as JSON."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:38
msgid "The elements are stored in Elasticsearch."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/elasticsearch.adoc:39
#, no-wrap
msgid "Creating the Maven project"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:42
msgid "First, we need a new project. Create a new project with the following command:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:48
msgid "This command generates a Maven structure importing the RESTEasy Reactive, Jackson, and Elasticsearch low level REST client extensions."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:51
msgid "The Elasticsearch low level REST client comes with the `quarkus-elasticsearch-rest-client` extension that has been added to your build file."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:53
msgid "If you want to use the Elasticsearch Java client instead, replace the `quarkus-elasticsearch-rest-client` extension by the `quarkus-elasticsearch-java-client` extension."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/elasticsearch.adoc:58
msgid "We use the `resteasy-reactive-jackson` extension here and not the JSON-B variant because we will use the Vert.x `JsonObject` helper to serialize/deserialize our objects to/from Elasticsearch and it uses Jackson under the hood."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:61
msgid "To add the extensions to an existing project, follow the instructions below."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:63
msgid "For the Elasticsearch low level REST client, add the following dependency to your build file:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/elasticsearch.adoc:65
#: upstream/_versions/main/guides/elasticsearch.adoc:82
#, no-wrap
msgid "pom.xml"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:71
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-elasticsearch-rest-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/elasticsearch.adoc:74
#: upstream/_versions/main/guides/elasticsearch.adoc:91
#, no-wrap
msgid "build.gradle"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:77
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-elasticsearch-rest-client\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:80
msgid "For the Elasticsearch Java client, add the following dependency to your build file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:88
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-elasticsearch-java-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:94
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-elasticsearch-java-client\")\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/elasticsearch.adoc:96
#, no-wrap
msgid "Creating your first JSON REST service"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:99
msgid "In this example, we will create an application to manage a list of fruits."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:101
msgid "First, let's create the `Fruit` bean as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:105
#: upstream/_versions/main/guides/elasticsearch.adoc:123
#: upstream/_versions/main/guides/elasticsearch.adoc:205
#, no-wrap
msgid "package org.acme.elasticsearch;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:111
#, no-wrap
msgid ""
"public class Fruit {\n"
"    public String id;\n"
"    public String name;\n"
"    public String color;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:114
msgid "Nothing fancy. One important thing to note is that having a default constructor is required by the JSON serialization layer."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:119
msgid "Now create a `org.acme.elasticsearch.FruitService` that will be the business layer of our application and will store/load the fruits from the Elasticsearch instance.  Here we use the low level REST client, if you want to use the Java API client instead, follow the instructions in the xref:using-the-elasticsearch-java-client[Using the Elasticsearch Java Client] paragraph instead."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:127
#, no-wrap
msgid ""
"import java.io.IOException;\n"
"import java.util.ArrayList;\n"
"import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:130
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:135
#, no-wrap
msgid ""
"import org.apache.http.util.EntityUtils;\n"
"import org.elasticsearch.client.Request;\n"
"import org.elasticsearch.client.Response;\n"
"import org.elasticsearch.client.RestClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:138
#, no-wrap
msgid ""
"import io.vertx.core.json.JsonArray;\n"
"import io.vertx.core.json.JsonObject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:143
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class FruitService {\n"
"    @Inject\n"
"    RestClient restClient; //<1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:151
#, no-wrap
msgid ""
"    public void index(Fruit fruit) throws IOException {\n"
"        Request request = new Request(\n"
"                \"PUT\",\n"
"                \"/fruits/_doc/\" + fruit.id); //<2>\n"
"        request.setJsonEntity(JsonObject.mapFrom(fruit).toString()); //<3>\n"
"        restClient.performRequest(request); //<4>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:161
#, no-wrap
msgid ""
"    public Fruit get(String id) throws IOException {\n"
"        Request request = new Request(\n"
"                \"GET\",\n"
"                \"/fruits/_doc/\" + id);\n"
"        Response response = restClient.performRequest(request);\n"
"        String responseBody = EntityUtils.toString(response.getEntity());\n"
"        JsonObject json = new JsonObject(responseBody); //<5>\n"
"        return json.getJsonObject(\"_source\").mapTo(Fruit.class);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:165
#: upstream/_versions/main/guides/elasticsearch.adoc:425
#, no-wrap
msgid ""
"    public List<Fruit> searchByColor(String color) throws IOException {\n"
"        return search(\"color\", color);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:169
#: upstream/_versions/main/guides/elasticsearch.adoc:429
#, no-wrap
msgid ""
"    public List<Fruit> searchByName(String name) throws IOException {\n"
"        return search(\"name\", name);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:181
#, no-wrap
msgid ""
"    private List<Fruit> search(String term, String match) throws IOException {\n"
"        Request request = new Request(\n"
"                \"GET\",\n"
"                \"/fruits/_search\");\n"
"        //construct a JSON query like {\"query\": {\"match\": {\"<term>\": \"<match\"}}\n"
"        JsonObject termJson = new JsonObject().put(term, match);\n"
"        JsonObject matchJson = new JsonObject().put(\"match\", termJson);\n"
"        JsonObject queryJson = new JsonObject().put(\"query\", matchJson);\n"
"        request.setJsonEntity(queryJson.encode());\n"
"        Response response = restClient.performRequest(request);\n"
"        String responseBody = EntityUtils.toString(response.getEntity());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:193
#, no-wrap
msgid ""
"        JsonObject json = new JsonObject(responseBody);\n"
"        JsonArray hits = json.getJsonObject(\"hits\").getJsonArray(\"hits\");\n"
"        List<Fruit> results = new ArrayList<>(hits.size());\n"
"        for (int i = 0; i < hits.size(); i++) {\n"
"            JsonObject hit = hits.getJsonObject(i);\n"
"            Fruit fruit = hit.getJsonObject(\"_source\").mapTo(Fruit.class);\n"
"            results.add(fruit);\n"
"        }\n"
"        return results;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:195
msgid "We inject an Elasticsearch low level `RestClient` into our service."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:196
msgid "We create an Elasticsearch request."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:197
msgid "We use Vert.x `JsonObject` to serialize the object before sending it to Elasticsearch, you can use whatever you want to serialize your objects to JSON."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:198
msgid "We send the request (indexing request here) to Elasticsearch."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:199
msgid "In order to deserialize the object from Elasticsearch, we again use Vert.x `JsonObject`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:201
msgid "Now, create the `org.acme.elasticsearch.FruitResource` class as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:216
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.BadRequestException;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.POST;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.core.Response;\n"
"import java.io.IOException;\n"
"import java.net.URI;\n"
"import java.util.List;\n"
"import java.util.UUID;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:218
#, no-wrap
msgid "import org.jboss.resteasy.reactive.RestQuery;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:221
#, no-wrap
msgid ""
"@Path(\"/fruits\")\n"
"public class FruitResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:224
#, no-wrap
msgid ""
"    @Inject\n"
"    FruitService fruitService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:233
#, no-wrap
msgid ""
"    @POST\n"
"    public Response index(Fruit fruit) throws IOException {\n"
"        if (fruit.id == null) {\n"
"            fruit.id = UUID.randomUUID().toString();\n"
"        }\n"
"        fruitService.index(fruit);\n"
"        return Response.created(URI.create(\"/fruits/\" + fruit.id)).build();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:239
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/{id}\")\n"
"    public Fruit get(String id) throws IOException {\n"
"        return fruitService.get(id);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:252
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/search\")\n"
"    public List<Fruit> search(@RestQuery String name, @RestQuery String color) throws IOException {\n"
"        if (name != null) {\n"
"            return fruitService.searchByName(name);\n"
"        } else if (color != null) {\n"
"            return fruitService.searchByColor(color);\n"
"        } else {\n"
"            throw new BadRequestException(\"Should provide name or color query parameter\");\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:255
msgid "The implementation is pretty straightforward and you just need to define your endpoints using the Jakarta REST annotations and use the `FruitService` to list/add new fruits."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/elasticsearch.adoc:256
#, no-wrap
msgid "Configuring Elasticsearch"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:258
msgid "The main property to configure is the URL to connect to the Elasticsearch cluster."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:260
msgid "For a typical clustered Elasticsearch service, a sample configuration would look like the following:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:265
#, no-wrap
msgid ""
"# configure the Elasticsearch client for a cluster of two nodes\n"
"quarkus.elasticsearch.hosts = elasticsearch1:9200,elasticsearch2:9200\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:268
msgid "In our case, we are using a single instance running on localhost:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:273
#, no-wrap
msgid ""
"# configure the Elasticsearch client for a single instance on localhost\n"
"quarkus.elasticsearch.hosts = localhost:9200\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:276
msgid "If you need a more advanced configuration, you can find the comprehensive list of supported configuration properties at the end of this guide."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/elasticsearch.adoc:278
#, no-wrap
msgid "Dev Services"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:284
msgid "Quarkus supports a feature called Dev Services that allows you to start various containers without any config.  In the case of Elasticsearch, this support extends to the default Elasticsearch connection.  What that means practically is that, if you have not configured `quarkus.elasticsearch.hosts`, Quarkus will automatically start an Elasticsearch container when running tests or dev mode, and automatically configure the connection."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:288
msgid "When running the production version of the application, the Elasticsearch connection needs to be configured as usual, so if you want to include a production database config in your `application.properties` and continue to use Dev Services we recommend that you use the `%prod.` profile to define your Elasticsearch settings."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:290
msgid "For more information you can read the xref:elasticsearch-dev-services.adoc[Dev Services for Elasticsearch guide]."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/elasticsearch.adoc:291
#, no-wrap
msgid "Programmatically Configuring Elasticsearch"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:294
msgid "On top of the parametric configuration, you can also programmatically apply additional configuration to the client by implementing a `RestClientBuilder.HttpClientConfigCallback` and annotating it with `ElasticsearchClientConfig`. You may provide multiple implementations and configuration provided by each implementation will be applied in a randomly ordered cascading manner."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:296
msgid "For example, when accessing an Elasticsearch cluster that is set up for TLS on the HTTP layer, the client needs to trust the certificate that Elasticsearch is using. The following is an example of setting up the client to trust the CA that has signed the certificate that Elasticsearch is using, when that CA certificate is available in a PKCS#12 keystore."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:304
#, no-wrap
msgid ""
"import io.quarkus.elasticsearch.restclient.lowlevel.ElasticsearchClientConfig;\n"
"import org.apache.http.impl.nio.client.HttpAsyncClientBuilder;\n"
"import org.apache.http.ssl.SSLContextBuilder;\n"
"import org.apache.http.ssl.SSLContexts;\n"
"import org.elasticsearch.client.RestClientBuilder;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:312
#, no-wrap
msgid ""
"import jakarta.enterprise.context.Dependent;\n"
"import javax.net.ssl.SSLContext;\n"
"import java.io.InputStream;\n"
"import java.nio.file.Files;\n"
"import java.nio.file.Path;\n"
"import java.nio.file.Paths;\n"
"import java.security.KeyStore;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:331
#, no-wrap
msgid ""
"@ElasticsearchClientConfig\n"
"public class SSLContextConfigurator implements RestClientBuilder.HttpClientConfigCallback {\n"
"    @Override\n"
"    public HttpAsyncClientBuilder customizeHttpClient(HttpAsyncClientBuilder httpClientBuilder) {\n"
"        try {\n"
"            String keyStorePass = \"password-for-keystore\";\n"
"            Path trustStorePath = Paths.get(\"/path/to/truststore.p12\");\n"
"            KeyStore truststore = KeyStore.getInstance(\"pkcs12\");\n"
"            try (InputStream is = Files.newInputStream(trustStorePath)) {\n"
"                truststore.load(is, keyStorePass.toCharArray());\n"
"            }\n"
"            SSLContextBuilder sslBuilder = SSLContexts.custom()\n"
"                    .loadTrustMaterial(truststore, null);\n"
"            SSLContext sslContext = sslBuilder.build();\n"
"            httpClientBuilder.setSSLContext(sslContext);\n"
"        } catch (Exception e) {\n"
"            throw new RuntimeException(e);\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:335
#, no-wrap
msgid ""
"        return httpClientBuilder;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:338
msgid "See https://www.elastic.co/guide/en/elasticsearch/client/java-api-client/current/_encrypted_communication.html[Elasticsearch documentation] for more details on this particular example."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/elasticsearch.adoc:343
msgid "Classes marked with `@ElasticsearchClientConfig` are made application scoped CDI beans by default.  You can override the scope at the class level if you prefer a different scope."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/elasticsearch.adoc:345
#, no-wrap
msgid "Running an Elasticsearch cluster"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:349
msgid "As by default, the Elasticsearch client is configured to access a local Elasticsearch cluster on port 9200 (the default Elasticsearch port), if you have a local running instance on this port, there is nothing more to do before being able to test it!"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:351
msgid "If you want to use Docker to run an Elasticsearch instance, you can use the following command to launch one:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:357
#, no-wrap
msgid ""
"docker run --name elasticsearch  -e \"discovery.type=single-node\" -e \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\\\n"
"       -e \"cluster.routing.allocation.disk.threshold_enabled=false\" -e \"xpack.security.enabled=false\"\\\n"
"       --rm -p 9200:9200 {elasticsearch-image}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/elasticsearch.adoc:359
#, no-wrap
msgid "Running the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:362
msgid "Let's start our application in dev mode:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:366
msgid "You can add new fruits to the list via the following curl command:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:370
#, no-wrap
msgid "curl localhost:8080/fruits -d '{\"name\": \"bananas\", \"color\": \"yellow\"}' -H \"Content-Type: application/json\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:373
msgid "And search for fruits by name or color via the following curl command:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:377
#, no-wrap
msgid "curl localhost:8080/fruits/search?color=yellow\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/elasticsearch.adoc:379
#, no-wrap
msgid "Using the Elasticsearch Java Client"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:382
msgid "Here is a version of the `FruitService` using the Elasticsearch Java Client instead of the low level one:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:393
#, no-wrap
msgid ""
"import co.elastic.clients.elasticsearch.ElasticsearchClient;\n"
"import co.elastic.clients.elasticsearch._types.FieldValue;\n"
"import co.elastic.clients.elasticsearch._types.query_dsl.QueryBuilders;\n"
"import co.elastic.clients.elasticsearch.core.*;\n"
"import co.elastic.clients.elasticsearch.core.search.HitsMetadata;\n"
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.inject.Inject;\n"
"import org.acme.elasticsearch.Fruit;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:397
#, no-wrap
msgid ""
"import java.io.IOException;\n"
"import java.util.List;\n"
"import java.util.stream.Collectors;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:402
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class FruitService {\n"
"    @Inject\n"
"    ElasticsearchClient client; // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:410
#, no-wrap
msgid ""
"    public void index(Fruit fruit) throws IOException {\n"
"        IndexRequest<Fruit> request = IndexRequest.of(  // <2>\n"
"            b -> b.index(\"fruits\")\n"
"                .id(fruit.id)\n"
"                .document(fruit)); // <3>\n"
"        client.index(request);  // <4>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:421
#, no-wrap
msgid ""
"    public Fruit get(String id) throws IOException {\n"
"        GetRequest getRequest = GetRequest.of(\n"
"            b -> b.index(\"fruits\")\n"
"                .id(id));\n"
"        GetResponse<Fruit> getResponse = client.get(getRequest, Fruit.class);\n"
"        if (getResponse.found()) {\n"
"            return getResponse.source();\n"
"        }\n"
"        return null;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:434
#, no-wrap
msgid ""
"    private List<Fruit> search(String term, String match) throws IOException {\n"
"        SearchRequest searchRequest = SearchRequest.of(\n"
"            b -> b.index(\"fruits\")\n"
"                .query(QueryBuilders.match().field(term).query(FieldValue.of(match)).build()._toQuery()));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/elasticsearch.adoc:440
#, no-wrap
msgid ""
"        SearchResponse<Fruit> searchResponse = client.search(searchRequest, Fruit.class);\n"
"        HitsMetadata<Fruit> hits = searchResponse.hits();\n"
"        return hits.hits().stream().map(hit -> hit.source()).collect(Collectors.toList());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:442
msgid "We inject an `ElasticsearchClient` inside the service."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:443
msgid "We create an Elasticsearch index request using a builder."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:444
msgid "We directly pass the object to the request as the Java API client has a serialization layer."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:445
msgid "We send the request to Elasticsearch."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/elasticsearch.adoc:446
#, no-wrap
msgid "Hibernate Search Elasticsearch"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:449
msgid "Quarkus supports Hibernate Search with Elasticsearch via the `quarkus-hibernate-search-orm-elasticsearch` extension."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:451
msgid "Hibernate Search Elasticsearch allows to synchronize your Jakarta Persistence entities to an Elasticsearch cluster and offers a way to query your Elasticsearch cluster using the Hibernate Search API."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:453
msgid "If you are interested in it, please consult the xref:hibernate-search-orm-elasticsearch.adoc[Hibernate Search with Elasticsearch guide]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/elasticsearch.adoc:454
#, no-wrap
msgid "Cluster Health Check"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:458
msgid "If you are using the `quarkus-smallrye-health` extension, both extensions will automatically add a readiness health check to validate the health of the cluster."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:461
msgid "So when you access the `/q/health/ready` endpoint of your application, you will have information about the cluster status.  It uses the cluster health endpoint, the check will be down if the status of the cluster is **red**, or the cluster is not available."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:463
msgid "This behavior can be disabled by setting the `quarkus.elasticsearch.health.enabled` property to `false` in your `application.properties`."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/elasticsearch.adoc:464
#, no-wrap
msgid "Building a native executable"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:467
msgid "You can use both clients in a native executable."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:469
msgid "You can build a native executable with the usual command:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:473
msgid "Running it is as simple as executing `./target/elasticsearch-low-level-client-quickstart-1.0.0-SNAPSHOT-runner`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:475
msgid "You can then point your browser to `http://localhost:8080/fruits.html` and use your application."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/elasticsearch.adoc:476
#, no-wrap
msgid "Conclusion"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/elasticsearch.adoc:479
msgid "Accessing an Elasticsearch cluster from the low level REST client or the Elasticsearch Java client is easy with Quarkus as it provides easy configuration, CDI integration and native support for it."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/elasticsearch.adoc:480
#, no-wrap
msgid "Configuration Reference"
msgstr ""
