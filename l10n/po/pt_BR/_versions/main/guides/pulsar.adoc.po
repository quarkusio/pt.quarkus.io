# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:12+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/pulsar.adoc:6
#, no-wrap
msgid "Apache Pulsar Reference Guide"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:15
msgid "This reference guide demonstrates how your Quarkus application can utilize SmallRye Reactive Messaging to interact with Apache Pulsar."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/pulsar.adoc:16
#, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:20
msgid "https://pulsar.apache.org[Apache Pulsar] is an open-source, distributed messaging and streaming platform built for the cloud.  It provides a multi-tenant, high-performance solution to server messaging with tiered storage capabilities."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:22
msgid "Pulsar implements the publish-subscribe pattern:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:24
msgid "Producers publish messages to _topics_."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:25
msgid "Consumers create _subscriptions_ to those topics to receive and process incoming messages, and send _acknowledgments_ to the broker when processing is finished."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:27
msgid "When a subscription is created, Pulsar retains all messages, even if the consumer is disconnected.  The retained messages are discarded only when a consumer acknowledges that all these messages are processed successfully."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:29
msgid "A Pulsar cluster consists of"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:31
msgid "One or more _brokers_, which are stateless components."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:32
msgid "A _metadata store_ for maintaining topic metadata, schema, coordination and cluster configuration."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:33
msgid "A set of _bookies_ used for persistent storage of messages."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/pulsar.adoc:34
#, no-wrap
msgid "Quarkus Extension for Apache Pulsar"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:38
msgid "Quarkus provides support for Apache Pulsar through https://smallrye.io/smallrye-reactive-messaging/[SmallRye Reactive Messaging] framework.  Based on Eclipse MicroProfile Reactive Messaging specification 3.0, it proposes a flexible programming model bridging CDI and event-driven."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/pulsar.adoc:43
msgid "This guide provides an in-depth look on Apache Pulsar and SmallRye Reactive Messaging framework.  For a quick start take a look at xref:pulsar-getting-started.adoc[Getting Started to SmallRye Reactive Messaging with Apache Pulsar]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:46
msgid "You can add the `smallrye-reactive-messaging-pulsar` extensions to your project by running the following command in your project base directory:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:51
msgid "This will add the following to your build file:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/pulsar.adoc:53
#, no-wrap
msgid "pom.xml"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:59
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-reactive-messaging-pulsar</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/pulsar.adoc:62
#, no-wrap
msgid "build.gradle"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:65
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-smallrye-reactive-messaging-pulsar\")\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/pulsar.adoc:70
msgid "The extension includes `pulsar-clients-original` version 3.0.0 as a transitive dependency and is compatible with Pulsar brokers version 2.10.x."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/pulsar.adoc:72
#, no-wrap
msgid "Configuring Smallrye Pulsar Connector"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:75
msgid "Because Smallrye Reactive Messaging framework supports different messaging backends like Apache Kafka, Apache Pulsar, AMQP, Apache Camel, JMS, MQTT, etc., it employs a generic vocabulary:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:79
msgid "Applications send and receive *messages*. https://javadoc.io/doc/io.smallrye.reactive/smallrye-reactive-messaging-api/latest/org/eclipse/microprofile/reactive/messaging/Message.html[`Message`] wraps a _payload_ and can be extended with some _metadata_.  This should not be confused with a Pulsar https://javadoc.io/doc/org.apache.pulsar/pulsar-client-api/latest/org/apache/pulsar/client/api/Message.html[`Message`], which consists of value, key With the Pulsar connector, a Reactive Messaging _message_ corresponds to a Pulsar _message_."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:80
msgid "Messages transit on *channels*. Application components connect to channels to publish and consume messages. The Pulsar connector maps _channels_ to Pulsar _topics_."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:84
msgid "Channels are connected to message backends using *connectors*.  Connectors are configured to map incoming messages to a specific channel (consumed by the application) and collect outgoing messages sent to a specific channel.  Each connector is dedicated to a specific messaging technology.  For example, the connector dealing with Pulsar is named `smallrye-pulsar`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:86
msgid "A minimal configuration for the Pulsar connector with an incoming channel looks like the following:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:91
#, no-wrap
msgid ""
"%prod.pulsar.client.serviceUrl=pulsar:6650 <1>\n"
"mp.messaging.incoming.prices.connector=smallrye-pulsar <2>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:95
msgid "Configure the Pulsar broker service url for the production profile.  You can configure it globally or per channel using `mp.messaging.incoming.$channel.serviceUrl` property.  In dev mode and when running tests, xref:pulsar-dev-services[Dev Services for Pulsar] automatically starts a Pulsar broker."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:98
msgid "Configure the connector to manage the prices channel.  By default, the _topic_ name is same as the channel name."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:100
msgid "You can configure the topic attribute to override it."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:102
msgid "The `%prod` prefix indicates that the property is only used when the application runs in prod mode (so not in dev or test). Refer to the xref:config-reference.adoc#profiles[Profile documentation] for further details."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/pulsar.adoc:104
#, no-wrap
msgid "Connector auto-attachment"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/pulsar.adoc:109
msgid "If you have a single connector on your classpath, you can omit the `connector` attribute configuration.  Quarkus automatically associates _orphan_ channels to the (unique) connector found on the classpath.  _Orphan_ channels are outgoing channels without a downstream consumer or incoming channels without an upstream producer."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/pulsar.adoc:111
msgid "This auto-attachment can be disabled using:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:115
#, no-wrap
msgid "quarkus.reactive-messaging.auto-connector-attachment=false\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/pulsar.adoc:119
msgid "For more configuration options see xref:configuring-pulsar-clients[Configuring Pulsar clients]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/pulsar.adoc:121
#, no-wrap
msgid "Receiving messages from Pulsar"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/pulsar.adoc:125
msgid "The Pulsar Connector connects to a Pulsar broker using a Pulsar client and creates consumers to receive messages from Pulsar brokers, and it maps each Pulsar `Message` into Reactive Messaging `Message`."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/pulsar.adoc:126
#: upstream/_versions/main/guides/pulsar.adoc:460
#, no-wrap
msgid "Example"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/pulsar.adoc:130
msgid "Letâ€™s imagine you have a Pulsar broker running, and accessible using the `pulsar:6650` address.  Configure your application to receive Pulsar messages on the `prices` channel as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:135
#, no-wrap
msgid ""
"mp.messaging.incoming.prices.serviceUrl=pulsar://pulsar:6650 # <1>\n"
"mp.messaging.incoming.prices.subscriptionInitialPosition=Earliest # <2>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:138
#: upstream/_versions/main/guides/pulsar.adoc:471
msgid "Configure the Pulsar broker service url."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:139
msgid "Make sure consumer subscription starts receiving messages from the `Earliest` position."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/pulsar.adoc:145
msgid "You donâ€™t need to set the Pulsar topic, nor the consumer name.  By default, the connector uses the channel name (`prices`).  You can configure the `topic` and `consumerName` attributes to override them."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/pulsar.adoc:151
msgid "In Pulsar, consumers need to provide a `subscriptionName` for topic subscriptions.  If not provided the connector generates a unique **subscription name**."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:154
msgid "Then, your application can receive the `double` payload directly:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:158
#, no-wrap
msgid "import org.eclipse.microprofile.reactive.messaging.Incoming;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:160
#, no-wrap
msgid "import jakarta.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:163
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PriceConsumer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:168
#, no-wrap
msgid ""
"    @Incoming(\"prices\")\n"
"    public void consume(double price) {\n"
"        // process your price.\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:170
#: upstream/_versions/main/guides/pulsar.adoc:287
#: upstream/_versions/main/guides/pulsar.adoc:505
#: upstream/_versions/main/guides/pulsar.adoc:595
#: upstream/_versions/main/guides/pulsar.adoc:699
#: upstream/_versions/main/guides/pulsar.adoc:766
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:173
msgid "Or, you can retrieve the Reactive Messaging type `Message<Double>`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:185
#, no-wrap
msgid ""
"@Incoming(\"prices\")\n"
"public CompletionStage<Void> consume(Message<Double> msg) {\n"
"    // access record metadata\n"
"    var metadata = msg.getMetadata(PulsarIncomingMessageMetadata.class).orElseThrow();\n"
"    // process the message payload.\n"
"    double price = msg.getPayload();\n"
"    // Acknowledge the incoming message (acknowledge the Pulsar message back to the broker)\n"
"    return msg.ack();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:188
msgid "The Reactive Messaging `Message` type lets the consuming method access the incoming message metadata and handle the acknowledgment manually."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:190
msgid "If you want to access the Pulsar message objects directly, use:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:200
#, no-wrap
msgid ""
"@Incoming(\"prices\")\n"
"public void consume(org.apache.pulsar.client.api.Message<Double> msg) {\n"
"    String key = msg.getKey();\n"
"    String value = msg.getValue();\n"
"    String topic = msg.topicName();\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:203
msgid "`org.apache.pulsar.client.api.Message` is provided by the underlying Pulsar client and can be used directly with the consumer method."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:206
msgid "Alternatively, your application can inject a `Multi` in your bean, identified with the channel name and subscribe to its events as the following example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:211
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Multi;\n"
"import org.eclipse.microprofile.reactive.messaging.Channel;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:218
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
"import org.jboss.resteasy.reactive.RestStreamElementType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:221
#, no-wrap
msgid ""
"@Path(\"/prices\")\n"
"public class PriceResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:225
#, no-wrap
msgid ""
"    @Inject\n"
"    @Channel(\"prices\")\n"
"    Multi<Double> prices;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:233
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/prices\")\n"
"    @RestStreamElementType(MediaType.TEXT_PLAIN)\n"
"    public Multi<Double> stream() {\n"
"        return prices;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/pulsar.adoc:239
msgid "When consuming messages with `@Channel`, the application code is responsible for the subscription.  In the example above, the RESTEasy Reactive endpoint handles that for you."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:242
msgid "Following types can be injected as channels:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:246
#, no-wrap
msgid "@Inject @Channel(\"prices\") Multi<Double> streamOfPayloads;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:248
#, no-wrap
msgid "@Inject @Channel(\"prices\") Multi<Message<Double>> streamOfMessages;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:250
#, no-wrap
msgid "@Inject @Channel(\"prices\") Publisher<Double> publisherOfPayloads;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:252
#, no-wrap
msgid "@Inject @Channel(\"prices\") Publisher<Message<Double>> publisherOfMessages;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:256
msgid "As with the previous `Message` example, if your injected channel receives payloads (`Multi<T>`), it acknowledges the message automatically, and support multiple subscribers.  If your injected channel receives Message (`Multi<Message<T>>`), you will be responsible for the acknowledgment and broadcasting."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/pulsar.adoc:258
#, no-wrap
msgid "Blocking processing"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:264
msgid "Reactive Messaging invokes your method on an I/O thread.  See the xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture documentation] for further details on this topic.  But, you often need to combine Reactive Messaging with blocking processing such as database interactions.  For this, you need to use the `@Blocking` annotation indicating that the processing is _blocking_ and should not be run on the caller thread."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:266
msgid "For example, The following code illustrates how you can store incoming payloads to a database using Hibernate with Panache:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:271
#, no-wrap
msgid ""
"import io.smallrye.reactive.messaging.annotations.Blocking;\n"
"import org.eclipse.microprofile.reactive.messaging.Incoming;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:274
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.transaction.Transactional;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:277
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PriceStorage {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:285
#, no-wrap
msgid ""
"    @Incoming(\"prices\")\n"
"    @Transactional\n"
"    public void store(int priceInUsd) {\n"
"        Price price = new Price();\n"
"        price.value = priceInUsd;\n"
"        price.persist();\n"
"    }\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/pulsar.adoc:292
msgid "There are 2 `@Blocking` annotations:"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/pulsar.adoc:294
msgid "`io.smallrye.reactive.messaging.annotations.Blocking`"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/pulsar.adoc:295
msgid "`io.smallrye.common.annotation.Blocking`"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/pulsar.adoc:300
msgid "They have the same effect.  Thus, you can use both.  The first one provides more fine-grained tuning such as the worker pool to use and whether it preserves the order.  The second one, used also with other reactive features of Quarkus, uses the default worker pool and preserves the order."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/pulsar.adoc:302
msgid "Detailed information on the usage of `@Blocking` annotation can be found in https://smallrye.io/smallrye-reactive-messaging/latest/concepts/blocking/[SmallRye Reactive Messaging â€“ Handling blocking execution]."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/pulsar.adoc:305
#, no-wrap
msgid "@RunOnVirtualThread"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/pulsar.adoc:308
msgid "For running the blocking processing on Java _virtual threads_, see the xref:messaging-virtual-threads.adoc[Quarkus Virtual Thread support with Reactive Messaging documentation]."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/pulsar.adoc:311
#, no-wrap
msgid "@Transactional"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/pulsar.adoc:314
msgid "If your method is annotated with `@Transactional`, it will be considered _blocking_ automatically, even if the method is not annotated with `@Blocking`."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/pulsar.adoc:316
#, no-wrap
msgid "Pulsar Subscription Types"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:319
msgid "Pulsar *subscriptionType* consumer configuration can be used flexibly to achieve different messaging scenarios, such as publish-subscribe or queuing."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:321
#, no-wrap
msgid "*Exclusive* subscription type allows specifying a _unique subscription name_ for \"fan-out pub-sub messaging\". This is the default subscription type.\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:322
#, no-wrap
msgid "*Shared*, *Key_Shared* or *Failover* subscription types allow multiple consumers to share the _same subscription name_, to achieve \"message queuing\" among consumers.\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:324
msgid "If a subscription name is not provided Quarkus generates a unique id."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/pulsar.adoc:325
#, no-wrap
msgid "Deserialization and Pulsar Schema"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:329
msgid "The Pulsar Connector allows configuring Schema configuration for the underlying Pulsar consumer.  See the xref:pulsar-schema-configuration[Pulsar Schema Configuration & Auto Schema Discovery] for more information."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/pulsar.adoc:330
#, no-wrap
msgid "Acknowledgement Strategies"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:335
msgid "When a message produced from a Pulsar Message is *acknowledged*, the connector sends an https://pulsar.apache.org/docs/3.0.x/concepts-messaging/#acknowledgment[acknowledgement request] to the Pulsar broker.  All Reactive Messaging messages need to be *acknowledged*, which is handled automatically in most cases.  Acknowledgement requests can be sent to the Pulsar broker using the following two strategies:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:337
#, no-wrap
msgid "**Individual acknowledgement** is the default strategy, an acknowledgement request is to the broker for each message.\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:339
#, no-wrap
msgid ""
"**Cumulative acknowledgement**, configured using `ack-strategy=cumulative`, the consumer only acknowledges the last message it received.\n"
"All messages in the stream up to (and including) the provided message are not redelivered to that consumer.\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/pulsar.adoc:344
msgid "By default, the Pulsar consumer does not wait for the acknowledgement confirmation from the broker to validate an acknowledgement.  You can enable this using `ackReceiptEnabled=true`."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/pulsar.adoc:346
#, no-wrap
msgid "Failure Handling Strategies"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:350
msgid "If a message produced from a Pulsar message is *nacked*, a failure strategy is applied.  The Quarkus Pulsar extension supports 4 strategies:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:353
msgid "`nack` *(default)* sends https://pulsar.apache.org/docs/3.0.x/concepts-messaging/#negative-acknowledgment[negative acknowledgment] to the broker, triggering the broker to redeliver this message to the consumer.  The negative acknowledgment can be further configured using `negativeAckRedeliveryDelayMicros` and `negativeAck.redeliveryBackoff` properties."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:354
msgid "`fail` fail the application, no more messages will be processed."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:355
msgid "`ignore` the failure is logged, but the acknowledgement strategy will be applied and the processing will continue."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:356
msgid "`continue` the failure is logged, but processing continues without applying acknowledgement or negative acknowledgement. This strategy can be used with xref:ack-timeout[Acknowledgement timeout] configuration."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:359
msgid "`reconsume-later` sends the message to the https://pulsar.apache.org/docs/3.0.x/concepts-messaging/#retry-letter-topic[retry letter topic] using the `reconsumeLater` API to be reconsumed with a delay.  The delay can be configured using the `reconsumeLater.delay` property and defaults to 3 seconds.  Custom delay or properties per message can be configured by adding an instance of `io.smallrye.reactive.messaging.pulsar.PulsarReconsumeLaterMetadata` to the failure metadata."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/pulsar.adoc:361
#, no-wrap
msgid "Acknowledgement timeout"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:365
msgid "Similar to the negative acknowledgement, with the https://pulsar.apache.org/docs/3.0.x/concepts-messaging/#acknowledgment-timeout[acknowledgement timeout] mechanism, the Pulsar client tracks the unacknowledged messages, for the given *ackTimeout* period and sends *redeliver unacknowledged messages request* to the broker, thus the broker resends the unacknowledged messages to the consumer."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:368
msgid "To configure the timeout and redelivery backoff mechanism you can set `ackTimeoutMillis` and `ackTimeout.redeliveryBackoff` properties.  The `ackTimeout.redeliveryBackoff` value accepts comma separated values of min delay in milliseconds, max delay in milliseconds and multiplier respectively:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:374
#, no-wrap
msgid ""
"mp.messaging.incoming.out.failure-strategy=continue\n"
"mp.messaging.incoming.out.ackTimeoutMillis=10000\n"
"mp.messaging.incoming.out.ackTimeout.redeliveryBackoff=1000,60000,2\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/pulsar.adoc:376
#, no-wrap
msgid "Reconsume later and retry letter topic"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:380
msgid "The https://pulsar.apache.org/docs/3.0.x/concepts-messaging/#retry-letter-topic[retry letter topic] pushes messages that are not consumed successfully to a dead letter topic and continue message consumption.  Note that dead letter topic can be used in different message redelivery methods, such as acknowledgment timeout, negative acknowledgment or retry letter topic."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:387
#, no-wrap
msgid ""
"mp.messaging.incoming.data.failure-strategy=reconsume-later\n"
"mp.messaging.incoming.data.reconsumeLater.delay=5000\n"
"mp.messaging.incoming.data.enableRetry=true\n"
"mp.messaging.incoming.data.negativeAck.redeliveryBackoff=1000,60000,2\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/pulsar.adoc:389
#, no-wrap
msgid "Dead-letter topic"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:393
msgid "The https://pulsar.apache.org/docs/3.0.x/concepts-messaging/#dead-letter-topic[dead letter topic] pushes messages that are not consumed successfully to a dead letter topic an continue message consumption.  Note that dead letter topic can be used in different message redelivery methods, such as acknowledgment timeout, negative acknowledgment or retry letter topic."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:401
#, no-wrap
msgid ""
"mp.messaging.incoming.data.failure-strategy=nack\n"
"mp.messaging.incoming.data.deadLetterPolicy.maxRedeliverCount=2\n"
"mp.messaging.incoming.data.deadLetterPolicy.deadLetterTopic=my-dead-letter-topic\n"
"mp.messaging.incoming.data.deadLetterPolicy.initialSubscriptionName=my-dlq-subscription\n"
"mp.messaging.incoming.data.subscriptionType=Shared\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/pulsar.adoc:407
#, no-wrap
msgid ""
"*Negative acknowledgment* or *acknowledgment timeout* methods for redelivery will redeliver the whole batch of messages containing at least an unprocessed message.\n"
"See xref:producer-batching[Producer Batching] for more information.\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/pulsar.adoc:409
#, no-wrap
msgid "Receiving Pulsar Messages in Batches"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:413
msgid "By default, incoming methods receive each Pulsar message individually.  You can enable batch mode using `batchReceive=true` property, or setting a `batchReceivePolicy` in consumer configuration."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:429
#, no-wrap
msgid ""
"@Incoming(\"prices\")\n"
"public CompletionStage<Void> consumeMessage(PulsarIncomingBatchMessage<Double> messages) {\n"
"    for (PulsarMessage<Double> msg : messages) {\n"
"        msg.getMetadata(PulsarIncomingMessageMetadata.class).ifPresent(metadata -> {\n"
"            String key = metadata.getKey();\n"
"            String topic = metadata.getTopicName();\n"
"            long timestamp = metadata.getEventTime();\n"
"            //... process messages\n"
"        });\n"
"    }\n"
"    // ack will commit the latest offsets (per partition) of the batch.\n"
"    return messages.ack();\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:436
#, no-wrap
msgid ""
"@Incoming(\"prices\")\n"
"public void consumeRecords(Messages<Double> messages) {\n"
"    for (Message<Double> msg : messages) {\n"
"        //... process messages\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:439
msgid "Or you can directly receive the list of payloads to the consume method:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:448
#, no-wrap
msgid ""
"@Incoming(\"prices\")\n"
"public void consume(List<Double> prices) {\n"
"    for (double price : prices) {\n"
"        // process price\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/pulsar.adoc:454
msgid "Quarkus auto-detects batch types for incoming channels and sets batch configuration automatically.  You can configure batch mode explicitly with `mp.messaging.incoming.$channel.batchReceive` property."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/pulsar.adoc:456
#, no-wrap
msgid "Sending messages to Pulsar"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:459
msgid "The Pulsar Connector can write Reactive Messaging Messages as Pulsar Message."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:464
msgid "Letâ€™s imagine you have a Pulsar broker running, and accessible using the `pulsar:6650` address.  Configure your application to write the messages from the `prices` channel into a Pulsar Messages as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:468
#, no-wrap
msgid "mp.messaging.outgoing.prices.serviceUrl=pulsar://pulsar:6650 # <1>\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/pulsar.adoc:477
msgid "You donâ€™t need to set the Pulsar topic, nor the producer name.  By default, the connector uses the channel name (`prices`).  You can configure the `topic` and `producerName` attributes to override them."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:481
msgid "Then, your application must send `Message<Double>` to the `prices` channel. It can use `double` payloads as in the following snippet:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:486
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Multi;\n"
"import org.eclipse.microprofile.reactive.messaging.Outgoing;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:490
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import java.time.Duration;\n"
"import java.util.Random;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:493
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PulsarPriceProducer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:495
#, no-wrap
msgid "    private final Random random = new Random();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:503
#, no-wrap
msgid ""
"    @Outgoing(\"prices-out\")\n"
"    public Multi<Double> generate() {\n"
"        // Build an infinite stream of random prices\n"
"        // It emits a price every second\n"
"        return Multi.createFrom().ticks().every(Duration.ofSeconds(1))\n"
"            .map(x -> random.nextDouble());\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:509
msgid "Note that the generate method returns a `Multi<Double>`, which implements the `Flow.Publisher` interface.  This publisher will be used by the framework to generate messages and send them to the configured Pulsar topic."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:511
msgid "Instead of returning a payload, you can return a `io.smallrye.reactive.messaging.pulsar.OutgoingMessage` to send Pulsar messages:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:519
#, no-wrap
msgid ""
"@Outgoing(\"out\")\n"
"public Multi<OutgoingMessage<Double>> generate() {\n"
"    return Multi.createFrom().ticks().every(Duration.ofSeconds(1))\n"
"        .map(x -> OutgoingMessage.of(\"my-key\", random.nextDouble()));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:522
msgid "Payload can be wrapped inside `org.eclipse.microprofile.reactive.messaging.Message` to have more control on the written records:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:534
#, no-wrap
msgid ""
"@Outgoing(\"generated-price\")\n"
"public Multi<Message<Double>> generate() {\n"
"    return Multi.createFrom().ticks().every(Duration.ofSeconds(1))\n"
"            .map(x -> Message.of(random.nextDouble())\n"
"                    .addMetadata(PulsarOutgoingMessageMetadata.builder()\n"
"                            .withKey(\"my-key\")\n"
"                            .withProperties(Map.of(\"property-key\", \"value\"))\n"
"                            .build()));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:538
msgid "When sending `Messages`, you can add an instance of `io.smallrye.reactive.messaging.pulsar.PulsarOutgoingMessageMetadata` to influence how the message is going to be written to Pulsar."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:541
msgid "Other than method signatures returning a `Flow.Publisher`, outgoing method can also return single message.  In this case the producer will use this method as generator to create an infinite stream."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:545
#, no-wrap
msgid "@Outgoing(\"prices-out\") T generate(); // T excluding void\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:547
#, no-wrap
msgid "@Outgoing(\"prices-out\") Message<T> generate();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:549
#, no-wrap
msgid "@Outgoing(\"prices-out\") Uni<T> generate();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:551
#, no-wrap
msgid "@Outgoing(\"prices-out\") Uni<Message<T>> generate();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:553
#, no-wrap
msgid "@Outgoing(\"prices-out\") CompletionStage<T> generate();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:555
#, no-wrap
msgid "@Outgoing(\"prices-out\") CompletionStage<Message<T>> generate();\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/pulsar.adoc:557
#, no-wrap
msgid "Serialization and Pulsar Schema"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:561
msgid "The Pulsar Connector allows configuring Schema configuration for the underlying Pulsar producer.  See the xref:pulsar-schema-configuration[Pulsar Schema Configuration & Auto Schema Discovery] for more information."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/pulsar.adoc:562
#, no-wrap
msgid "Sending key/value pairs"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:566
msgid "In order to send Kev/Value pairs to Pulsar, you can configure the Pulsar producer Schema with a https://javadoc.io/doc/org.apache.pulsar/pulsar-client-api/latest/org/apache/pulsar/common/schema/KeyValue.html[KeyValue] schema."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:570
#: upstream/_versions/main/guides/pulsar.adoc:662
#: upstream/_versions/main/guides/pulsar.adoc:736
#, no-wrap
msgid "package pulsar.outbound;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:573
#: upstream/_versions/main/guides/pulsar.adoc:836
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.enterprise.inject.Produces;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:578
#, no-wrap
msgid ""
"import org.apache.pulsar.client.api.Schema;\n"
"import org.apache.pulsar.common.schema.KeyValue;\n"
"import org.eclipse.microprofile.reactive.messaging.Incoming;\n"
"import org.eclipse.microprofile.reactive.messaging.Outgoing;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:580
#: upstream/_versions/main/guides/pulsar.adoc:842
#, no-wrap
msgid "import io.smallrye.common.annotation.Identifier;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:583
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PulsarKeyValueExample {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:587
#, no-wrap
msgid ""
"    @Identifier(\"out\")\n"
"    @Produces\n"
"    Schema<KeyValue<String, Long>> schema = Schema.KeyValue(Schema.STRING, Schema.INT64);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:593
#, no-wrap
msgid ""
"    @Incoming(\"in\")\n"
"    @Outgoing(\"out\")\n"
"    public KeyValue<String, Long> process(long in) {\n"
"        return new KeyValue<>(\"my-key\", in);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:598
msgid "If you need more control on the written records, use `PulsarOutgoingMessageMetadata`."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/pulsar.adoc:599
#, no-wrap
msgid "Acknowledgement"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:603
msgid "Upon receiving a message from a Producer, a Pulsar broker assigns a `MessageId` to the message and sends it back to the producer, confirming that the message is published."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:607
msgid "By default, the connector does wait for Pulsar to acknowledge the record to continue the processing (acknowledging the received `Message`).  You can disable this by setting the `waitForWriteCompletion` attribute to `false`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:609
msgid "If a record cannot be written, the message is `nacked`."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/pulsar.adoc:614
msgid "The Pulsar client automatically retries sending messages in case of failure, until the *send timeout* is reached.  The *send timeout* is configurable with `sendTimeoutMs` attribute and by default is 30 seconds."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/pulsar.adoc:616
#, no-wrap
msgid "Back-pressure and inflight records"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:620
msgid "The Pulsar outbound connector handles back-pressure, monitoring the number of pending messages waiting to be written to the Pulsar broker.  The number of pending messages is configured using the `maxPendingMessages` attribute and defaults to 1000."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:624
msgid "The connector only sends that amount of messages concurrently.  No other messages will be sent until at least one pending message gets acknowledged by the broker.  Then, the connector writes a new message to Pulsar when one of the brokerâ€™s pending messages get acknowledged."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:627
msgid "You can also remove the limit of pending messages by setting `maxPendingMessages` to `0`.  Note that Pulsar also enables to configure the number of pending messages per partition using `maxPendingMessagesAcrossPartitions`."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/pulsar.adoc:629
#, no-wrap
msgid "Producer Batching"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:634
msgid "By default, the Pulsar producer batches individual messages together to be published to the broker.  You can configure batching parameters using `batchingMaxPublishDelayMicros`, `batchingPartitionSwitchFrequencyByPublishDelay`, `batchingMaxMessages`, `batchingMaxBytes` configuration properties, or disable it completely with `batchingEnabled=false`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:636
msgid "When using `Key_Shared` consumer subscriptions, the `batcherBuilder` can be configured to `BatcherBuilder.KEY_BASED`."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/pulsar.adoc:637
#, no-wrap
msgid "Pulsar Transactions and Exactly-Once Processing"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:640
msgid "https://pulsar.apache.org/docs/3.0.x/txn-why/[Pulsar transactions] enable event streaming applications to consume, process, and produce messages in one atomic operation."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:642
msgid "Transactions allow one or multiple producers to send batch of messages to multiple topics where all messages in the batch are eventually visible to any consumer, or none is ever visible to consumers."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/pulsar.adoc:646
msgid "In order to be used, transaction support needs to be activated on the broker configuration, using `transactionCoordinatorEnabled=true` and `systemTopicEnabled=true` broker configuration."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:649
msgid "On the client side, the transaction support also needs to be enabled on `PulsarClient` configuration:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:653
#, no-wrap
msgid "mp.messaging.outgoing.tx-producer.enableTransaction=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:656
msgid "Pulsar connector provides `PulsarTransactions` custom emitter for writing records inside a transaction."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:658
msgid "It can be used as a regular emitter `@Channel`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:665
#: upstream/_versions/main/guides/pulsar.adoc:739
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:669
#, no-wrap
msgid ""
"import org.eclipse.microprofile.reactive.messaging.Channel;\n"
"import org.eclipse.microprofile.reactive.messaging.Incoming;\n"
"import org.eclipse.microprofile.reactive.messaging.Message;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:673
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import io.smallrye.reactive.messaging.pulsar.OutgoingMessage;\n"
"import io.smallrye.reactive.messaging.pulsar.transactions.PulsarTransactions;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:676
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PulsarTransactionalProducer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:680
#, no-wrap
msgid ""
"    @Inject\n"
"    @Channel(\"tx-out-example\")\n"
"    PulsarTransactions<OutgoingMessage<Integer>> txProducer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:684
#, no-wrap
msgid ""
"    @Inject\n"
"    @Channel(\"other-producer\")\n"
"    PulsarTransactions<String> producer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:697
#, no-wrap
msgid ""
"    @Incoming(\"in\")\n"
"    public Uni<Void> emitInTransaction(Message<Integer> in) {\n"
"        return txProducer.withTransaction(emitter -> {\n"
"            emitter.send(OutgoingMessage.of(\"a\", 1));\n"
"            emitter.send(OutgoingMessage.of(\"b\", 2));\n"
"            emitter.send(OutgoingMessage.of(\"c\", 3));\n"
"            producer.send(emitter, \"4\");\n"
"            producer.send(emitter, \"5\");\n"
"            producer.send(emitter, \"6\");\n"
"            return Uni.createFrom().completionStage(in::ack);\n"
"        });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:704
msgid "The function given to the `withTransaction` method receives a `TransactionalEmitter` for producing records, and returns a `Uni` that provides the result of the transaction.  If the processing completes successfully, the producer is flushed and the transaction is committed.  If the processing throws an exception, returns a failing `Uni`, or marks the `TransactionalEmitter` for abort, the transaction is aborted."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/pulsar.adoc:709
msgid "Multiple transactional producers can participate in a single transaction.  This ensures all messages are sent using the started transaction and before the transaction is committed, all participating producers are flushed."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:713
msgid "If this method is called on a Vert.x context, the processing function is also called on that context.  Otherwise, it is called on the sending thread of the producer."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/pulsar.adoc:714
#, no-wrap
msgid "Exactly-Once Processing"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:720
msgid "Pulsar Transactions API also allows managing consumer offsets inside a transaction, together with produced messages.  This in turn enables coupling a consumer with a transactional producer in a consume-transform-produce pattern, also known as exactly-once processing.  It means that an application consumes messages, processes them, publishes the results to a topic, and commits offsets of the consumed messages in a transaction."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:722
msgid "The `PulsarTransactions` emitter also provides a way to apply exactly-once processing to an incoming Pulsar message inside a transaction."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:724
msgid "The following example includes a batch of Pulsar messages inside a transaction."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:731
#, no-wrap
msgid ""
"mp.messaging.outgoing.tx-out-example.enableTransaction=true\n"
"# ...\n"
"mp.messaging.incoming.in-channel.enableTransaction=true\n"
"mp.messaging.incoming.in-channel.batchReceive=true\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:742
#, no-wrap
msgid ""
"import org.eclipse.microprofile.reactive.messaging.Channel;\n"
"import org.eclipse.microprofile.reactive.messaging.Incoming;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:747
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import io.smallrye.reactive.messaging.pulsar.PulsarIncomingBatchMessage;\n"
"import io.smallrye.reactive.messaging.pulsar.PulsarMessage;\n"
"import io.smallrye.reactive.messaging.pulsar.transactions.PulsarTransactions;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:750
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PulsarExactlyOnceProcessor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:754
#, no-wrap
msgid ""
"    @Inject\n"
"    @Channel(\"tx-out-example\")\n"
"    PulsarTransactions<Integer> txProducer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:764
#, no-wrap
msgid ""
"    @Incoming(\"in-channel\")\n"
"    public Uni<Void> emitInTransaction(PulsarIncomingBatchMessage<Integer> batch) {\n"
"        return txProducer.withTransactionAndAck(batch, emitter -> {\n"
"            for (PulsarMessage<Integer> record : batch) {\n"
"                emitter.send(PulsarMessage.of(record.getPayload() + 1, record.getKey()));\n"
"            }\n"
"            return Uni.createFrom().voidItem();\n"
"        });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:769
msgid "If the processing completes successfully, the message is acknowledged inside the transaction and the transaction is committed."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/pulsar.adoc:773
msgid "When using exactly-once processing, messages can only be acked individually rather than cumulatively."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:777
msgid "If the processing needs to abort, the message is nack'ed. One of the failure strategies can be employed in order to retry the processing or simply fail-stop.  Note that the `Uni` returned from the `withTransaction` will yield a failure if the transaction fails and is aborted."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:781
msgid "The application can choose to handle the error case, but for the message consumption to continue, `Uni` returned from the `@Incoming` method must not result in failure.  `PulsarTransactions#withTransactionAndAck` method will ack and nack the message but will not stop the reactive stream.  Ignoring the failure simply resets the consumer to the last committed offsets and resumes the processing from there."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/pulsar.adoc:785
msgid "In order to avoid duplicates in case of failure, it is recommended to enable message deduplication and batch index level acknowledgment on the broker side:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:791
#, no-wrap
msgid ""
"quarkus.pulsar.devservices.broker-config.brokerDeduplicationEnabled=true\n"
"quarkus.pulsar.devservices.broker-config.brokerDeduplicationEntriesInterval=1000\n"
"quarkus.pulsar.devservices.broker-config.brokerDeduplicationSnapshotIntervalSeconds=3000\n"
"quarkus.pulsar.devservices.broker-config.acknowledgmentAtBatchIndexLevelEnabled=3000\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:793
#, no-wrap
msgid "mp.messaging.incoming.data.batchIndexAckEnabled=true\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/pulsar.adoc:797
#, no-wrap
msgid "Pulsar Schema Configuration & Auto Schema Discovery"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/pulsar.adoc:803
msgid "Pulsar messages are stored with payloads as unstructured byte array.  A Pulsar **schema** defines how to serialize structured data to the raw message bytes.  The **schema** is applied in producers and consumers to write and read with an enforced data structure.  It serializes data into raw bytes before they are published to a topic and deserializes the raw bytes before they are delivered to consumers."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/pulsar.adoc:807
msgid "Pulsar uses a schema registry as a central repository to store the registered schema information, which enables producers/consumers to coordinate the schema of a topic's messages through brokers.  By default the Apache BookKeeper is used to store schemas."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/pulsar.adoc:811
msgid "Pulsar API provides built-in schema information for a number of https://pulsar.apache.org/docs/3.0.x/schema-understand#primitive-type[primitive types] and https://pulsar.apache.org/docs/3.0.x/schema-understand#complex-type[complex types] such as Key/Value, Avro and Protobuf."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/pulsar.adoc:813
msgid "The Pulsar Connector allows specifying the schema as a primitive type using the `schema` property:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:818
#, no-wrap
msgid ""
"mp.messaging.incoming.prices.connector=smallrye-pulsar\n"
"mp.messaging.incoming.prices.schema=INT32\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:821
#, no-wrap
msgid ""
"mp.messaging.outgoing.prices-out.connector=smallrye-pulsar\n"
"mp.messaging.outgoing.prices-out.schema=DOUBLE\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:825
msgid "If the value for the `schema` property matches a https://javadoc.io/doc/org.apache.pulsar/pulsar-client-api/latest/org/apache/pulsar/common/schema/SchemaType.html[Schema Type] a simple schema will be created with that type and will be used for that channel."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:827
msgid "The Pulsar Connector allows configuring complex schema types by providing `Schema` beans through CDI, identified with the `@Identifier` qualifier."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:829
msgid "For example the following bean provides an JSON schema and a Key/Value schema:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:833
#, no-wrap
msgid "package pulsar.configuration;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:840
#, no-wrap
msgid ""
"import org.apache.pulsar.client.api.Schema;\n"
"import org.apache.pulsar.common.schema.KeyValue;\n"
"import org.apache.pulsar.common.schema.KeyValueEncodingType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:845
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PulsarSchemaProvider {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:849
#, no-wrap
msgid ""
"    @Produces\n"
"    @Identifier(\"user-schema\")\n"
"    Schema<User> userSchema = Schema.JSON(User.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:855
#, no-wrap
msgid ""
"    @Produces\n"
"    @Identifier(\"a-channel\")\n"
"    Schema<KeyValue<Integer, User>> keyValueSchema() {\n"
"        return Schema.KeyValue(Schema.INT32, Schema.JSON(User.class), KeyValueEncodingType.SEPARATED);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:859
#, no-wrap
msgid ""
"    public static class User {\n"
"        String name;\n"
"        int age;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:862
#, no-wrap
msgid ""
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:865
msgid "To configure the incoming channel `users` with defined schema, you need to set the `schema` property to the identifier of the schema `user-schema`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:870
#, no-wrap
msgid ""
"mp.messaging.incoming.users.connector=smallrye-pulsar\n"
"mp.messaging.incoming.users.schema=user-schema\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:874
msgid "If no `schema` property is found, the connector looks for `Schema` beans identified with the channel name.  For example, the outgoing channel `a-channel` will use the key/value schema."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:878
#, no-wrap
msgid "mp.messaging.outgoing.a-channel.connector=smallrye-pulsar\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:881
msgid "If no schema information is provided incoming channels will use `Schema.AUTO_CONSUME()`, whereas outgoing channels will use `Schema.AUTO_PRODUCE_BYTES()` schemas."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/pulsar.adoc:882
#, no-wrap
msgid "Auto Schema Discovery"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:886
msgid "When using SmallRye Reactive Messaging Pulsar (`io.quarkus:quarkus-smallrye-reactive-messaging-pulsar`), Quarkus can often automatically detect the correct Pulsar Schema to configure.  This autodetection is based on declarations of `@Incoming` and `@Outgoing` methods, as well as injected ``@Channel``s."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:888
msgid "For example, if you declare"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:895
#, no-wrap
msgid ""
"@Outgoing(\"generated-price\")\n"
"public Multi<Integer> generate() {\n"
"    ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:898
msgid "and your configuration indicates that the `generated-price` channel uses the `smallrye-pulsar` connector, then Quarkus will automatically set the `schema` attribute of the `generated-price` channel to Pulsar Schema `INT32`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:900
msgid "Similarly, if you declare"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:907
#, no-wrap
msgid ""
"@Incoming(\"my-pulsar-consumer\")\n"
"public void consume(org.apache.pulsar.api.client.Message<byte[]> record) {\n"
"    ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:910
msgid "and your configuration indicates that the `my-pulsar-consumer` channel uses the `smallrye-pulsar` connector, then Quarkus will automatically set the `schema` attribute to Pulsar `BYTES` Schema."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:912
msgid "Finally, if you declare"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:918
#, no-wrap
msgid ""
"@Inject\n"
"@Channel(\"price-create\")\n"
"Emitter<Double> priceEmitter;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:921
msgid "and your configuration indicates that the `price-create` channel uses the `smallrye-pulsar` connector, then Quarkus will automatically set the `schema` to Pulsar `INT64` Schema."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:923
msgid "The full set of types supported by the Pulsar Schema autodetection is:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:925
msgid "`short` and `java.lang.Short`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:926
msgid "`int` and `java.lang.Integer`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:927
msgid "`long` and `java.lang.Long`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:928
msgid "`float` and `java.lang.Float`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:929
msgid "`double` and `java.lang.Double`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:930
msgid "`byte[]`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:931
msgid "`java.time.Instant`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:932
msgid "`java.sql.Timestamp`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:933
msgid "`java.time.LocalDate`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:934
msgid "`java.time.LocalTime`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:935
msgid "`java.time.LocalDateTime`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:936
msgid "`java.nio.ByteBuffer`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:937
msgid "classes generated from Avro schemas, as well as Avro `GenericRecord`, will be configured with `AVRO` schema type"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:938
msgid "classes generated from Protobuf schemas, will be configured with `PROTOBUF` schema type"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:939
msgid "other classes will automatically be configured with `JSON` schema type"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/pulsar.adoc:943
msgid "Note that `JSON` schema type enforces schema validation."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:946
msgid "In addition to those Pulsar-provided schemas, Quarkus provides following schema implementations _without enforcing validation_ :"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:948
msgid "`io.vertx.core.buffer.Buffer` will be configured with `io.quarkus.pulsar.schema.BufferSchema` schema"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:949
msgid "`io.vertx.core.json.JsonObject` will be configured with `io.quarkus.pulsar.schema.JsonObjectSchema` schema"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:950
msgid "`io.vertx.core.json.JsonArray` will be configured with `io.quarkus.pulsar.schema.JsonArraySchema` schema"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:953
msgid "For schema-less Json serialization, if the `schema` configuration is set to `ObjectMapper<fully_qualified_name_of_the_bean>`, a Schema will be generated using the Jackson `ObjectMapper`, without enforcing a Pulsar Schema validation.  `io.quarkus.pulsar.schema.ObjectMapperSchema` can be used to explicitly configure JSON schema without validation."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:955
msgid "If a `schema` is set by configuration, it won't be replaced by the auto-detection."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:958
msgid "In case you have any issues with serializer auto-detection, you can switch it off completely by setting `quarkus.reactive-messaging.pulsar.serializer-autodetection.enabled=false`.  If you find you need to do this, please file a bug in the link:https://github.com/quarkusio/quarkus/issues[Quarkus issue tracker] so we can fix whatever problem you have."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/pulsar.adoc:963
#, no-wrap
msgid "Configuring Pulsar clients"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:965
msgid "Pulsar clients, consumers and producers are very customizable to configure how a Pulsar client application behaves."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:968
msgid "The Pulsar connector creates a Pulsar client and, a consumer or a producer per channel, each with sensible defaults to ease their configuration.  Although the creation is handled, all available configuration options remain configurable through Pulsar channels."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:974
msgid "While idiomatic way of creating `PulsarClient`, `PulsarConsumer` or `PulsarProducer` are through builder APIs, in its essence those APIs build each time a configuration object, to pass onto the implementation.  Those are https://javadoc.io/doc/org.apache.pulsar/pulsar-client-original/latest/org/apache/pulsar/client/impl/conf/ClientConfigurationData.html[ClientConfigurationData], https://javadoc.io/doc/org.apache.pulsar/pulsar-client-original/latest/org/apache/pulsar/client/impl/conf/ConsumerConfigurationData.html[ConsumerConfigurationData] and https://javadoc.io/doc/org.apache.pulsar/pulsar-client-original/latest/org/apache/pulsar/client/impl/conf/ProducerConfigurationData.html[ProducerConfigurationData]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:978
msgid "Pulsar Connector allows receiving properties for those configuration objects directly.  For example, the broker authentication information for `PulsarClient` is received using `authPluginClassName` and `authParams` properties.  In order to configure the authentication for the incoming channel `data` :"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:988
#, no-wrap
msgid ""
"mp.messaging.incoming.data.connector=smallrye-pulsar\n"
"mp.messaging.incoming.data.serviceUrl=pulsar://localhost:6650\n"
"mp.messaging.incoming.data.topic=topic\n"
"mp.messaging.incoming.data.subscriptionInitialPosition=Earliest\n"
"mp.messaging.incoming.data.schema=INT32\n"
"mp.messaging.incoming.data.authPluginClassName=org.apache.pulsar.client.impl.auth.AuthenticationBasic\n"
"mp.messaging.incoming.data.authParams={\"userId\":\"superuser\",\"password\":\"admin\"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:991
msgid "Note that the Pulsar consumer property `subscriptionInitialPosition` is also configured with the `Earliest` value which represents with enum value `SubscriptionInitialPosition.Earliest`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:996
msgid "This approach covers most of the configuration cases.  However, non-serializable objects such as `CryptoKeyReader`, `ServiceUrlProvider` etc. cannot be configured this way.  The Pulsar Connector allows taking into account instances of Pulsar configuration data objects â€“ `ClientConfigurationData`, `ConsumerConfigurationData`, `ProducerConfigurationData`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:1002
#, no-wrap
msgid ""
"import jakarta.enterprise.inject.Produces;\n"
"import io.smallrye.common.annotation.Identifier;\n"
"import org.apache.pulsar.client.impl.conf.ConsumerConfigurationData;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:1004
#: upstream/_versions/main/guides/pulsar.adoc:1036
#: upstream/_versions/main/guides/pulsar.adoc:1062
#: upstream/_versions/main/guides/pulsar.adoc:1108
#, no-wrap
msgid "class PulsarConfig {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:1016
#, no-wrap
msgid ""
"    @Produces\n"
"    @Identifier(\"my-consumer-options\")\n"
"    public ConsumerConfigurationData<String> getConsumerConfig() {\n"
"        ConsumerConfigurationData<String> data = new ConsumerConfigurationData<>();\n"
"        data.setAckReceiptEnabled(true);\n"
"        data.setCryptoKeyReader(DefaultCryptoKeyReader.builder()\n"
"                //...\n"
"                .build());\n"
"        return data;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:1020
msgid "This instance is retrieved and used to configure the client used by the connector.  You need to indicate the name of the client using the `client-configuration`, `consumer-configuration` or `producer-configuration` attributes:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:1024
#, no-wrap
msgid "mp.messaging.incoming.prices.consumer-configuration=my-consumer-options\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:1027
msgid "If no `[client|consumer|producer]-configuration` is configured, the connector will look for instances identified with the channel name:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:1034
#, no-wrap
msgid ""
"import jakarta.enterprise.inject.Produces;\n"
"import io.smallrye.common.annotation.Identifier;\n"
"import org.apache.pulsar.client.impl.AutoClusterFailover;\n"
"import org.apache.pulsar.client.impl.conf.ClientConfigurationData;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:1048
#, no-wrap
msgid ""
"    @Produces\n"
"    @Identifier(\"prices\")\n"
"    public ClientConfigurationData getClientConfig() {\n"
"        ClientConfigurationData data = new ClientConfigurationData();\n"
"        data.setEnableTransaction(true);\n"
"        data.setServiceUrlProvider(AutoClusterFailover.builder()\n"
"                // ...\n"
"                .build());\n"
"        return data;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:1051
msgid "You also can provide a `Map<String, Object>` containing configuration values by key:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:1060
#, no-wrap
msgid ""
"import jakarta.enterprise.inject.Produces;\n"
"import io.smallrye.common.annotation.Identifier;\n"
"import org.apache.pulsar.client.api.BatcherBuilder;\n"
"import org.apache.pulsar.client.impl.conf.ClientConfigurationData;\n"
"import org.apache.pulsar.client.impl.customroute.PartialRoundRobinMessageRouterImpl;\n"
"import java.util.Map;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:1072
#, no-wrap
msgid ""
"    @Produces\n"
"    @Identifier(\"prices\")\n"
"    public Map<String, Object> getProducerConfig() {\n"
"        return Map.of(\n"
"                \"batcherBuilder\", BatcherBuilder.KEY_BASED,\n"
"                \"sendTimeoutMs\", 3000,\n"
"                \"customMessageRouter\", new PartialRoundRobinMessageRouterImpl(4));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:1075
msgid "Different configuration sources are loaded in the following order of precedence, from the least important to the highest:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:1077
msgid "`Map<String, Object>` config map produced with default config identifier, `default-pulsar-client`, `default-pulsar-consumer`, `default-pulsar-producer`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:1078
msgid "`Map<String, Object>` config map produced with identifier in the configuration or channel name"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:1079
msgid "`[Client|Producer|Consuemr]ConfigurationData` object produced with identifier in the channel configuration or the channel name"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:1080
msgid "Channel configuration properties named with `[Client|Producer|Consuemr]ConfigurationData` field names."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:1082
msgid "See xref:configuration-reference[Configuration Reference] for the exhaustive list of configuration options."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/pulsar.adoc:1083
#, no-wrap
msgid "Configuring Pulsar Authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:1086
msgid "Pulsar provides a pluggable authentication framework, and Pulsar brokers/proxies use this mechanism to authenticate clients."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:1088
msgid "Clients can be configured in `application.properties` file using `authPluginClassName` and `authParams` attributes:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:1094
#, no-wrap
msgid ""
"pulsar.client.serviceUrl=pulsar://pulsar:6650\n"
"pulsar.client.authPluginClassName=org.apache.pulsar.client.impl.auth.AuthenticationBasic\n"
"pulsar.client.authParams={\"userId\":\"superuser\",\"password\":\"admin\"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:1097
msgid "Or programmatically:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:1101
#, no-wrap
msgid "import java.util.Map;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:1106
#, no-wrap
msgid ""
"import jakarta.enterprise.inject.Produces;\n"
"import io.smallrye.common.annotation.Identifier;\n"
"import org.apache.pulsar.client.impl.conf.ClientConfigurationData;\n"
"import org.apache.pulsar.client.impl.auth.AuthenticationBasic;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:1119
#, no-wrap
msgid ""
"    @Produces\n"
"    @Identifier(\"prices\")\n"
"    public ClientConfigurationData config() {\n"
"        var data = new ClientConfigurationData();\n"
"        var auth = new AuthenticationBasic();\n"
"        auth.configure(Map.of(\"userId\", \"superuser\", \"password\", \"admin\"));\n"
"        data.setAuthentication(auth);\n"
"        return data;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/pulsar.adoc:1121
#, no-wrap
msgid "Configuring access to Datastax Luna Streaming"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:1125
msgid "Luna Streaming is a production-ready distribution of Apache Pulsar, with tools and support from DataStax.  After creating your DataStax Luna Pulsar tenant, note the auto generated token, and configure the token authentication:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:1131
#, no-wrap
msgid ""
"pulsar.client.serviceUrl=pulsar+ssl://pulsar-aws-eucentral1.streaming.datastax.com:6651\n"
"pulsar.client.authPluginClassName=org.apache.pulsar.client.impl.auth.AuthenticationToken\n"
"pulsar.client.authParams=token:eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE2ODY4MTc4MzQsImlzcyI6ImRhdGFzdGF4Iiwic3ViIjoiY2xpZW50OzA3NGZhOTI4LThiODktNDBhNC04MDEzLWNlNjVkN2JmZWIwZTtjSEpwWTJWejsyMDI5ODdlOGUyIiwidG9rZW5pZCI6IjIwMjk4N2U4ZTIifQ....\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:1134
msgid "Make sure to create topics beforehand, or enable the _Auto Topic Creation_ in the namespace configuration."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:1136
msgid "Note that the topic configuration needs to reference full name of topics:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:1140
#, no-wrap
msgid "mp.messaging.incoming.prices.topic=persistent://my-tenant/default/prices\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/pulsar.adoc:1142
#, no-wrap
msgid "Configuring access to StreamNative Cloud"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:1146
msgid "StreamNative Cloud is a fully managed Pulsar-as-a-Service available in different deployment options, whether it is fully-hosted, on a public cloud but managed by StreamNative or self-managed on Kubernetes."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:1150
msgid "The StreamNative Pulsar clusters use Oauth2 authentication, so you need to make sure that a https://docs.streamnative.io/docs/service-account[service account] exists with required https://docs.streamnative.io/docs/access-control#authorize-namespaces[permissions to the Pulsar namespace/topic] your application is using."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:1154
msgid "Next, you need to download the **Key file** (which serves as **private key**) of the service account and note the **issuer URL** (typically `https://auth.streamnative.cloud/`)  and the **audience** (for example `urn:sn:pulsar:o-rf3ol:redhat`) for your cluster.  The **Pulsar Clients** page in the **Admin** section in the StreamNative Cloud console helps you with this process."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:1156
msgid "To configure your application with Pulsar Oauth2 authentication:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:1164
#, no-wrap
msgid ""
"pulsar.tenant=public\n"
"pulsar.namespace=default\n"
"pulsar.client.serviceUrl=pulsar+ssl://quarkus-71eaadbf-a6f3-4355-85d2-faf436b23d86.aws-euc1-prod-snci-pool-slug.streamnative.aws.snio.cloud:6651\n"
"pulsar.client.authPluginClassName=org.apache.pulsar.client.impl.auth.oauth2.AuthenticationOAuth2\n"
"pulsar.client.authParams={\"type\":\"client_credentials\",\"privateKey\":\"data:application/json;base64,<base64-encoded value>\",\"issuerUrl\":\"https://auth.streamnative.cloud/\",\"audience\":\"urn:sn:pulsar:o-rfwel:redhat\"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:1167
msgid "Note that the `pulsar.client.authParams` configuration contains a Json string with `issuerUrl`, `audience` and the `privateKey` in the `data:application/json;base64,<base64-encoded-key-file>` format."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:1169
msgid "Alternatively you can configure the authentication programmatically:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:1173
#, no-wrap
msgid "package org.acme.pulsar;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:1176
#, no-wrap
msgid ""
"import java.net.MalformedURLException;\n"
"import java.net.URL;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:1180
#, no-wrap
msgid ""
"import org.apache.pulsar.client.impl.auth.oauth2.AuthenticationFactoryOAuth2;\n"
"import org.apache.pulsar.client.impl.conf.ClientConfigurationData;\n"
"import org.eclipse.microprofile.config.inject.ConfigProperty;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:1184
#, no-wrap
msgid ""
"import io.smallrye.common.annotation.Identifier;\n"
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.enterprise.inject.Produces;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:1187
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PulsarAuth {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:1190
#, no-wrap
msgid ""
"    @ConfigProperty(name = \"pulsar.issuerUrl\")\n"
"    String issuerUrl;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:1193
#, no-wrap
msgid ""
"    @ConfigProperty(name = \"pulsar.credentials\")\n"
"    String credentials;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:1196
#, no-wrap
msgid ""
"    @ConfigProperty(name = \"pulsar.audience\")\n"
"    String audience;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:1205
#, no-wrap
msgid ""
"    @Produces\n"
"    @Identifier(\"pulsar-auth\")\n"
"    public ClientConfigurationData pulsarClientConfig() throws MalformedURLException {\n"
"        var data = new ClientConfigurationData();\n"
"        data.setAuthentication(AuthenticationFactoryOAuth2.clientCredentials(new URL(issuerUrl), PulsarAuth.class.getResource(credentials), audience));\n"
"        return data;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:1208
msgid "This assumes that the key file is included to the application classpath as a resource, then the configuration would like the following:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:1212
#, no-wrap
msgid "mp.messaging.incoming.prices.client-configuration=pulsar-auth\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:1219
#, no-wrap
msgid ""
"pulsar.tenant=public\n"
"pulsar.namespace=default\n"
"pulsar.client.serviceUrl=pulsar+ssl://quarkus-71eaadbf-a6f3-4355-85d2-faf436b23d86.aws-euc1-prod-snci-pool-slug.streamnative.aws.snio.cloud:6651\n"
"pulsar.issuerUrl=https://auth.streamnative.cloud/\n"
"pulsar.audience=urn:sn:pulsar:o-rfwel:redhat\n"
"pulsar.credentials=/o-rfwel-quarkus-app.json\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:1222
msgid "Note that channels using the client configuration identified with `pulsar-auth` need to set the `client-configuration` attribute."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/pulsar.adoc:1224
#, no-wrap
msgid "Health Checks"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:1228
msgid "The Quarkus extension reports startup, readiness and liveness of each channel managed by the Pulsar connector.  Health checks rely on the Pulsar client to verify that a connection is established with the broker."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:1231
#, no-wrap
msgid ""
"**Startup** and **Readiness** probes for both inbound and outbound channels report *OK* when the\n"
"connection with the broker is established.\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:1234
msgid "The **Liveness** probe for both inbound and outbound channels reports *OK* when the connection is established with the broker **AND** that no failures have been caught."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:1240
msgid "Note that a message processing failures *nacks* the message which is then handled by the failure-strategy. It is the responsibility of the failure-strategy to report the failure and influence the outcome of the liveness checks. The `fail` failure strategy reports the failure and so the liveness check will report the failure."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/pulsar.adoc:1242
#, no-wrap
msgid "Configuration Reference"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:1246
msgid "Following are the list of configuration attributes for the Pulsar connector channels, consumers, producers and clients.  See the xref:pulsar-client-configuration[Pulsar Client Configuration] for more information on how the Pulsar clients are configured."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/pulsar.adoc:1247
#, no-wrap
msgid "Incoming channel configuration (receiving from Pulsar)"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:1250
msgid "The following attributes are configured using:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:1254
#, no-wrap
msgid "mp.messaging.incoming.your-channel-name.attribute=value\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:1259
msgid "You can also configure properties supported by the underlying Pulsar consumer."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:1261
msgid "These properties can also be globally configured using `pulsar.consumer` prefix:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:1265
#, no-wrap
msgid "pulsar.consumer.subscriptionInitialPosition=Earliest\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/pulsar.adoc:1269
#, no-wrap
msgid "Outgoing channel configuration (publishing to Pulsar)"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:1274
msgid "You can also configure properties supported by the underlying Pulsar producer."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:1276
msgid "These properties can also be globally configured using `pulsar.producer` prefix:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:1280
#, no-wrap
msgid "pulsar.producer.batchingEnabled=false\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/pulsar.adoc:1285
#, no-wrap
msgid "Pulsar Client Configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:1289
msgid "Following is the configuration reference for the underlying `PulsarClient`.  These options can be configured using the channel attribute:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:1293
#, no-wrap
msgid "mp.messaging.incoming.your-channel-name.numIoThreads=4\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:1296
msgid "Or configured globally using `pulsar.client` prefix:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/pulsar.adoc:1300
#, no-wrap
msgid "pulsar.client.serviceUrl=pulsar://pulsar:6650\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/pulsar.adoc:1307
msgid "Configuration properties not configurable in configuration files (non-serializable) is noted in the column `Config file`."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/pulsar.adoc:1309
#, no-wrap
msgid "Going further"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:1313
msgid "This guide has shown how you can interact with Pulsar using Quarkus.  It utilizes SmallRye Reactive Messaging to build data streaming applications."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/pulsar.adoc:1314
msgid "If you want to go further, check the documentation of https://smallrye.io/smallrye-reactive-messaging[SmallRye Reactive Messaging], the implementation used in Quarkus."
msgstr ""
