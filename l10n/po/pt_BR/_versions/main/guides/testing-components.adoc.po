msgid ""
msgstr ""
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "Testing components"
msgstr "Teste de componentes"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid ""
"The component model of Quarkus is built on top xref:cdi-reference.adoc[CDI].\n"
"Therefore, Quarkus provides `QuarkusComponentTestExtension` - a JUnit extension that makes it easy to test the components/CDI beans and mock their dependencies.\n"
"Unlike `@QuarkusTest` this extension does not start a full Quarkus application but merely the CDI container and the configuration service.\n"
"You can find more details in the <<lifecycle>> section."
msgstr "O modelo de componente do Quarkus é construído sobre o xref:cdi-reference.adoc[CDI] . Portanto, o Quarkus fornece `QuarkusComponentTestExtension` - uma extensão JUnit que facilita o teste dos componentes/feijões CDI e simula suas dependências. Ao contrário de `@QuarkusTest` , essa extensão não inicia um aplicativo Quarkus completo, mas apenas o contêiner CDI e o serviço de configuração. Para obter mais detalhes, consulte a seção <<lifecycle>> ."

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "This extension is available in the `quarkus-junit5-component` dependency."
msgstr "Essa extensão está disponível na dependência de `quarkus-junit5-component` ."

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "Basic example"
msgstr "Exemplo básico"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "Let's have a component `Foo` - a CDI bean with two injection points."
msgstr "Vamos ter um componente `Foo` - um bean CDI com dois pontos de injeção."

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "`Foo` component"
msgstr "`Foo` componente"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "`Foo` is an `@ApplicationScoped` CDI bean."
msgstr "`Foo` é um bean do CDI `@ApplicationScoped` ."

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "`Foo` depends on `Charlie` which declares a method `ping()`."
msgstr "`Foo` depende de `Charlie` que declara um método `ping()` ."

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "`Foo` depends on the config property `bar`. `@Inject` is not needed for this injection point because it also declares a CDI qualifier - this is a Quarkus-specific feature."
msgstr "`Foo` depende da propriedade config `bar` . `@Inject` não é necessário para esse ponto de injeção porque ele também declara um qualificador CDI - esse é um recurso específico do Quarkus."

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "Then a component test could look like:"
msgstr "Então, um teste de componente poderia ser assim:"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "Simple component test"
msgstr "Teste de componentes simples"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "The `QuarkusComponentTest` annotation registers the JUnit extension."
msgstr "A anotação `QuarkusComponentTest` registra a extensão JUnit."

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "Sets a configuration property for the test."
msgstr "Define uma propriedade de configuração para o teste."

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "The test injects the component under the test. The types of all fields annotated with `@Inject` are considered the component types under test. You can also specify additional component classes via `@QuarkusComponentTest#value()`. Furthermore, the static nested classes declared on the test class are components too."
msgstr "O teste injeta o componente que está sendo testado. Os tipos de todos os campos anotados com `@Inject` são considerados os tipos de componentes em teste. O senhor também pode especificar classes de componentes adicionais por meio de `@QuarkusComponentTest#value()` . Além disso, as classes aninhadas estáticas declaradas na classe de teste também são componentes."

#: _versions/main/guides/testing-components.adoc
msgid "The test also injects a mock for `Charlie`. `Charlie` is an _unsatisfied_ dependency for which a synthetic `@Singleton` bean is registered automatically. The injected reference is an \"unconfigured\" Mockito mock."
msgstr ""

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "We can leverage the Mockito API in a test method to configure the behavior."
msgstr "Podemos aproveitar a API do Mockito em um método de teste para configurar o comportamento."

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "`QuarkusComponentTestExtension` also resolves parameters of test methods and injects matching beans."
msgstr "`QuarkusComponentTestExtension` também resolve os parâmetros dos métodos de teste e injeta os beans correspondentes."

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "So the code snippet above can be rewritten as:"
msgstr "Portanto, o trecho de código acima pode ser reescrito como:"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "Simple component test with test method parameters"
msgstr "Teste de componente simples com parâmetros do método de teste"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "Parameters annotated with `@io.quarkus.test.component.SkipInject` are never resolved by this extension."
msgstr "Os parâmetros anotados com `@io.quarkus.test.component.SkipInject` nunca são resolvidos por essa extensão."

#: _versions/main/guides/testing-components.adoc
msgid "Furthermore, if you need the full control over the `QuarkusComponentTestExtension` configuration then you can use the `@RegisterExtension` annotation and configure the extension programmatically."
msgstr ""

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "The original test could be rewritten like:"
msgstr "O teste original poderia ser reescrito da seguinte forma:"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "Simple component test with programmatic configuration"
msgstr "Teste de componente simples com configuração programática"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "The `QuarkusComponentTestExtension` is configured in a static field of the test class."
msgstr "O `QuarkusComponentTestExtension` é configurado em um campo estático da classe de teste."

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "Lifecycle"
msgstr "Ciclo de vida"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid ""
"So what exactly does the `QuarkusComponentTest` do?\n"
"It starts the CDI container and registers a dedicated xref:config-reference.adoc[configuration object]."
msgstr "Então, o que exatamente o `QuarkusComponentTest` faz? Ele inicia o contêiner CDI e registra um xref:config-reference.adoc[objeto de configuração] dedicado."

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid ""
"If the test instance lifecycle is `Lifecycle#PER_METHOD` (default) then the container is started during the `before each` test phase and stopped during the `after each` test phase.\n"
"However, if  the test instance lifecycle is `Lifecycle#PER_CLASS` then the container is started during the `before all` test phase and stopped during the `after all` test phase."
msgstr "Se o ciclo de vida da instância de teste for `Lifecycle#PER_METHOD` (padrão), o contêiner será iniciado durante a fase de teste `before each` e interrompido durante a fase de teste `after each` . No entanto, se o ciclo de vida da instância de teste for `Lifecycle#PER_CLASS` , o contêiner será iniciado durante a fase de teste `before all` e interrompido durante a fase de teste `after all` ."

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid ""
"The fields annotated with `@Inject` and `@InjectMock` are injected after a test instance is created.\n"
"The parameters of a test method for which a matching bean exists are resolved (unless annotated with `@io.quarkus.test.component.SkipInject` or `@org.mockito.Mock`) when a test method is executed.\n"
"Finally, the CDI request context is activated and terminated per each test method."
msgstr "Os campos anotados com `@Inject` e `@InjectMock` são injetados depois que uma instância de teste é criada. Os parâmetros de um método de teste para o qual existe um bean correspondente são resolvidos (a menos que sejam anotados com `@io.quarkus.test.component.SkipInject` ou `@org.mockito.Mock` ) quando um método de teste é executado. Por fim, o contexto de solicitação de CDI é ativado e encerrado por cada método de teste."

#: _versions/main/guides/testing-components.adoc
msgid "Injection"
msgstr "Injeção"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid ""
"Fields of the test class that are annotated with `@jakarta.inject.Inject` and `@io.quarkus.test.InjectMock` are injected after a test instance is created.\n"
"Furthermore, the parameters of a test method for which a matching bean exists are resolved unless annotated with `@io.quarkus.test.component.SkipInject` or `@org.mockito.Mock`.\n"
"There are also some JUnit built-in parameters, such as `RepetitionInfo` and `TestInfo`, which are skipped automatically."
msgstr "Os campos da classe de teste que são anotados com `@jakarta.inject.Inject` e `@io.quarkus.test.InjectMock` são injetados depois que uma instância de teste é criada. Além disso, os parâmetros de um método de teste para o qual existe um bean correspondente são resolvidos, a menos que sejam anotados com `@io.quarkus.test.component.SkipInject` ou `@org.mockito.Mock` . Há também alguns parâmetros internos do JUnit, como `RepetitionInfo` e `TestInfo` , que são ignorados automaticamente."

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid ""
"An `@Inject` injection point receives the contextual instance of a CDI bean - the real component under test.\n"
"An `@InjectMock` injection point receives an \"unconfigured\" Mockito mock that was created for an <<auto_mocking,unsatisfied dependency automatically>>."
msgstr "Um ponto de injeção `@Inject` recebe a instância contextual de um bean CDI - o componente real em teste. Um ponto de injeção `@InjectMock` recebe uma simulação Mockito \"não configurada\" que foi criada xref:auto_mocking[automaticamente] para uma xref:auto_mocking[dependência não satisfeita] ."

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "Dependent beans injected into the fields and test method arguments are correctly destroyed before a test instance is destroyed and after the test method completes, respectively."
msgstr "Os beans dependentes injetados nos campos e nos argumentos do método de teste são destruídos corretamente antes que uma instância de teste seja destruída e depois que o método de teste for concluído, respectivamente."

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "Arguments of a `@ParameterizedTest` method that are provided by an `ArgumentsProvider`, for example with `@org.junit.jupiter.params.provider.ValueArgumentsProvider`, must be annotated with `@SkipInject`."
msgstr "Os argumentos de um método `@ParameterizedTest` que são fornecidos por um `ArgumentsProvider` , por exemplo, com `@org.junit.jupiter.params.provider.ValueArgumentsProvider` , devem ser anotados com `@SkipInject` ."

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "Tested components"
msgstr "Componentes testados"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "The initial set of tested components is derived from the test class:"
msgstr "O conjunto inicial de componentes testados é derivado da classe de teste:"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "The types of all fields annotated with `@jakarta.inject.Inject` are considered the component types."
msgstr "Os tipos de todos os campos anotados com `@jakarta.inject.Inject` são considerados os tipos de componentes."

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "The types of test methods parameters that are not annotated with `@InjectMock`, `@SkipInject`, or `@org.mockito.Mock` are also considered the component types."
msgstr "Os tipos de parâmetros de métodos de teste que não são anotados com `@InjectMock` , `@SkipInject` , ou `@org.mockito.Mock` também são considerados tipos de componentes."

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "If `@QuarkusComponentTest#addNestedClassesAsComponents()` is set to `true` (default) then all static nested classes declared on the test class are components too."
msgstr "Se `@QuarkusComponentTest#addNestedClassesAsComponents()` for definido como `true` (padrão), todas as classes estáticas aninhadas declaradas na classe de teste também serão componentes."

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "`@Inject Instance<T>` and `@Inject @All List<T>` injection points are handled specifically. The actual type argument is registered as a component. However, if the type argument is an interface the implementations _are not registered_ automatically."
msgstr "`@Inject Instance<T>` e `@Inject @All List<T>` pontos de injeção são tratados especificamente. O argumento do tipo real é registrado como um componente. Entretanto, se o argumento do tipo for uma interface, as implementações _não serão registradas_ automaticamente."

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "Additional component classes can be set using `@QuarkusComponentTest#value()` or `QuarkusComponentTestExtensionBuilder#addComponentClasses()`."
msgstr "Classes de componentes adicionais podem ser definidas usando `@QuarkusComponentTest#value()` ou `QuarkusComponentTestExtensionBuilder#addComponentClasses()` ."

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "Auto Mocking Unsatisfied Dependencies"
msgstr "Auto Mocking de dependências insatisfeitas"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid ""
"Unlike in regular CDI environments the test does not fail if a component injects an unsatisfied dependency.\n"
"Instead, a synthetic bean is registered automatically for each combination of required type and qualifiers of an injection point that resolves to an unsatisfied dependency.\n"
"The bean has the `@Singleton` scope so it's shared across all injection points with the same required type and qualifiers.\n"
"The injected reference is an _unconfigured_ Mockito mock.\n"
"You can inject the mock in your test using the `io.quarkus.test.InjectMock` annotation and leverage the Mockito API to configure the behavior."
msgstr "Diferentemente dos ambientes CDI comuns, o teste não falha se um componente injetar uma dependência insatisfeita. Em vez disso, um bean sintético é registrado automaticamente para cada combinação de tipo exigido e qualificadores de um ponto de injeção que resolve para uma dependência insatisfeita. O bean tem o escopo `@Singleton` , portanto, é compartilhado em todos os pontos de injeção com o mesmo tipo exigido e os mesmos qualificadores. A referência injetada é um mock do Mockito _não configurado_ . O senhor pode injetar o mock em seu teste usando a anotação `io.quarkus.test.InjectMock` e aproveitar a API do Mockito para configurar o comportamento."

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid ""
"`@InjectMock` is not intended as a universal replacement for functionality provided by the Mockito JUnit extension.\n"
"It's meant to be used for configuration of unsatisfied dependencies of CDI beans.\n"
"You can use the `QuarkusComponentTest` and `MockitoExtension` side by side."
msgstr "`@InjectMock` não se destina a ser um substituto universal da funcionalidade fornecida pela extensão JUnit do Mockito. Ele deve ser usado para a configuração de dependências não satisfeitas de beans CDI. O senhor pode usar o `QuarkusComponentTest` e o `MockitoExtension` lado a lado."

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "Custom Mocks For Unsatisfied Dependencies"
msgstr "Mocks personalizados para dependências insatisfeitas"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid ""
"Sometimes you need the full control over the bean attributes and maybe even configure the default mock behavior.\n"
"You can use the mock configurator API via the `QuarkusComponentTestExtensionBuilder#mock()` method."
msgstr "Às vezes, o senhor precisa ter controle total sobre os atributos do bean e talvez até mesmo configurar o comportamento padrão do mock. O senhor pode usar a API do configurador de simulação por meio do método `QuarkusComponentTestExtensionBuilder#mock()` ."

#: _versions/main/guides/testing-components.adoc
msgid "Configuration"
msgstr "Configuração"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid ""
"You can set the configuration properties for a test with the `@io.quarkus.test.component.TestConfigProperty` annotation or with the `QuarkusComponentTestExtensionBuilder#configProperty(String, String)` method.\n"
"If you only need to use the default values for missing config properties, then the `@QuarkusComponentTest#useDefaultConfigProperties()` or `QuarkusComponentTestExtensionBuilder#useDefaultConfigProperties()` might come in useful."
msgstr "O senhor pode definir as propriedades de configuração de um teste com a anotação `@io.quarkus.test.component.TestConfigProperty` ou com o método `QuarkusComponentTestExtensionBuilder#configProperty(String, String)` . Se o senhor precisar usar apenas os valores padrão para as propriedades de configuração ausentes, os métodos `@QuarkusComponentTest#useDefaultConfigProperties()` ou `QuarkusComponentTestExtensionBuilder#useDefaultConfigProperties()` poderão ser úteis."

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid ""
"It is also possible to set configuration properties for a test method with the `@io.quarkus.test.component.TestConfigProperty` annotation.\n"
"However, if the test instance lifecycle is `Lifecycle#_PER_CLASS` this annotation can only be used on the test class and is ignored on test methods."
msgstr "Também é possível definir propriedades de configuração para um método de teste com a anotação `@io.quarkus.test.component.TestConfigProperty` . Entretanto, se o ciclo de vida da instância de teste for `Lifecycle#_PER_CLASS` , essa anotação só poderá ser usada na classe de teste e será ignorada nos métodos de teste."

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "CDI beans are also automatically registered for all injected https://smallrye.io/smallrye-config/Main/config/mappings/[Config Mappings]. The mappings are populated with the test configuration properties."
msgstr "Os beans CDI também são registrados automaticamente para todos os link:https://smallrye.io/smallrye-config/Main/config/mappings/[mapeamentos de] configuração injetados. Os mapeamentos são preenchidos com as propriedades de configuração de teste."

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "Mocking CDI Interceptors"
msgstr "Simulação de interceptadores de CDI"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid ""
"If a tested component class declares an interceptor binding then you might need to mock the interception too.\n"
"There are two ways to accomplish this task.\n"
"First, you can define an interceptor class as a static nested class of the test class."
msgstr "Se uma classe de componente testada declarar uma ligação de interceptador, talvez o senhor precise simular a interceptação também. Há duas maneiras de realizar essa tarefa. Primeiro, o senhor pode definir uma classe de interceptador como uma classe aninhada estática da classe de teste."

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "`@SimpleBinding` is an interceptor binding."
msgstr "`@SimpleBinding` é uma ligação intercetora."

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "The interceptor class is automatically considered a tested component."
msgstr "A classe do interceptador é automaticamente considerada um componente testado."

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "Static nested classes declared on a test class that is annotated with `@QuarkusComponentTest` are excluded from bean discovery when running a `@QuarkusTest` in order to prevent unintentional CDI conflicts."
msgstr "As classes estáticas aninhadas declaradas em uma classe de teste anotada com `@QuarkusComponentTest` são excluídas da descoberta de bean ao executar um `@QuarkusTest` para evitar conflitos não intencionais de CDI."

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "The second option is to declare an interceptor method directly in the test class; the method is then invoked in the relevant interception phase."
msgstr "A segunda opção é declarar um método interceptador diretamente na classe de teste; o método é então invocado na fase de interceptação relevante."

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "The interceptor bindings of the resulting interceptor are specified by annotating the method with the interceptor binding types."
msgstr "As associações de interceptores do interceptor resultante são especificadas anotando o método com os tipos de associação de interceptores."

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "Defines the interception type."
msgstr "Define o tipo de interceptação."
