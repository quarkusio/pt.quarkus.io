# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:12+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:6
#, no-wrap
msgid "OpenID Connect (OIDC) and OAuth2 Client and Filters Reference Guide"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:11
msgid "This reference guide explains how to use:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:13
msgid "`quarkus-oidc-client`, `quarkus-oidc-client-reactive-filter` and `quarkus-oidc-client-filter` extensions to acquire and refresh access tokens from OpenID Connect and OAuth 2.0 compliant Authorization Servers such as link:https://www.keycloak.org[Keycloak]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:14
msgid "`quarkus-oidc-token-propagation-reactive` and `quarkus-oidc-token-propagation` extensions to propagate the current `Bearer` or `Authorization Code Flow` access tokens"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:16
msgid "The access tokens managed by these extensions can be used as HTTP Authorization Bearer tokens to access the remote services."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:18
msgid "Please also see xref:security-openid-connect-client.adoc[OpenID Connect Client and Token Propagation Quickstart]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:19
#, no-wrap
msgid "OidcClient"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:22
msgid "Add the following dependency:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:29
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:32
msgid "`quarkus-oidc-client` extension provides a reactive `io.quarkus.oidc.client.OidcClient` which can be used to acquire and refresh tokens using SmallRye Mutiny `Uni` and `Vert.x WebClient`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:34
msgid "`OidcClient` is initialized at the build time with the IDP token endpoint URL which can be auto-discovered or manually configured and uses this endpoint to acquire access tokens using the token grants such as `client_credentials` or `password` and refresh the tokens using a `refresh_token` grant."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:35
#, no-wrap
msgid "Token Endpoint Configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:38
msgid "By default, the token endpoint address is discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc-client.auth-server-url`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:40
msgid "For example, given this Keycloak URL:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:44
#, no-wrap
msgid "quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:47
msgid "`OidcClient` will discover that the token endpoint URL is `http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:49
msgid "Alternatively, if the discovery endpoint is not available or you would like to save on the discovery endpoint round-trip, you can disable the discovery and configure the token endpoint address with a relative path value, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:56
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
"quarkus.oidc-client.discovery-enabled=false\n"
"# Token endpoint: http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens\n"
"quarkus.oidc-client.token-path=/protocol/openid-connect/tokens\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:59
msgid "A more compact way to configure the token endpoint URL without the discovery is to set `quarkus.oidc-client.token-path` to an absolute URL:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:63
#, no-wrap
msgid "quarkus.oidc-client.token-path=http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:66
msgid "Setting 'quarkus.oidc-client.auth-server-url' and 'quarkus.oidc-client.discovery-enabled' is not required in this case."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:67
#, no-wrap
msgid "Supported Token Grants"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:70
msgid "The main token grants which `OidcClient` can use to acquire the tokens are the `client_credentials` (default) and `password` grants."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:71
#, no-wrap
msgid "Client Credentials Grant"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:74
msgid "Here is how `OidcClient` can be configured to use the `client_credentials` grant:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:80
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:83
msgid "The `client_credentials` grant allows to set extra parameters to the token request via `quarkus.oidc-client.grant-options.client.<param-name>=<value>`. Here is how to set the intended token recipient via the `audience` parameter:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:92
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"# 'client' is a shortcut for `client_credentials`\n"
"quarkus.oidc-client.grant.type=client\n"
"quarkus.oidc-client.grant-options.client.audience=https://example.com/api\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:94
#, no-wrap
msgid "Password Grant"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:97
msgid "Here is how `OidcClient` can be configured to use the `password` grant:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:106
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=password\n"
"quarkus.oidc-client.grant-options.password.username=alice\n"
"quarkus.oidc-client.grant-options.password.password=alice\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:109
msgid "It can be further customized using a `quarkus.oidc-client.grant-options.password` configuration prefix, similarly to how the client credentials grant can be customized."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:110
#, no-wrap
msgid "Other Grants"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:113
msgid "`OidcClient` can also help with acquiring the tokens using the grants which require some extra input parameters which can not be captured in the configuration. These grants are `refresh_token` (with the external refresh token), `authorization_code`, as well as two grants which can be used to exchange the current access token, `urn:ietf:params:oauth:grant-type:token-exchange` and `urn:ietf:params:oauth:grant-type:jwt-bearer`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:115
msgid "Using the `refresh_token` grant which uses an out-of-band refresh token to acquire a new set of tokens will be required if the existing refresh token has been posted to the current Quarkus endpoint for it to acquire the access token. In this case `OidcClient` needs to be configured as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:122
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=refresh\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:125
msgid "and then you can use `OidcClient.refreshTokens` method with a provided refresh token to get the access token."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:127
msgid "Using the `urn:ietf:params:oauth:grant-type:token-exchange` or `urn:ietf:params:oauth:grant-type:jwt-bearer` grants may be required if you are building a complex microservices application and would like to avoid the same `Bearer` token be propagated to and used by more than one service. Please see xref:token-propagation-reactive[Token Propagation in MicroProfile RestClient Reactive filter] and xref:token-propagation[Token Propagation in MicroProfile RestClient filter] for more details."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:129
msgid "Using `OidcClient` to support the `authorization code` grant might be required if for some reason you cannot use the xref:security-oidc-code-flow-authentication.adoc[Quarkus OIDC extension] to support Authorization Code Flow. If there is a very good reason for you to implement Authorization Code Flow then you can configure `OidcClient` as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:136
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=code\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:139
msgid "and then you can use `OidcClient.accessTokens` method accepting a Map of extra properties and pass the current `code` and `redirect_uri` parameters to exchange the authorization code for the tokens."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:141
msgid "`OidcClient` also supports the `urn:openid:params:grant-type:ciba` grant:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:148
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=ciba\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:151
msgid "and then you can use `OidcClient.accessTokens` method accepting a Map of extra properties and pass `auth_req_id` parameter to exchange the authorization code for the tokens."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:152
#, no-wrap
msgid "Grant scopes"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:156
msgid "You may need to request that a specific set of scopes is associated with an issued access token.  Use a dedicated `quarkus.oidc-client.scopes` list property, for example: `quarkus.oidc-client.scopes=email,phone`"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:157
#, no-wrap
msgid "Use OidcClient directly"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:160
msgid "One can use `OidcClient` directly as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:166
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:206
#, no-wrap
msgid ""
"import jakarta.inject.PostConstruct;\n"
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:169
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.Tokens;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:172
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:211
#, no-wrap
msgid ""
"@Path(\"/service\")\n"
"public class OidcClientResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:175
#, no-wrap
msgid ""
"    @Inject\n"
"    OidcClient client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:177
#, no-wrap
msgid "    volatile Tokens currentTokens;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:182
#, no-wrap
msgid ""
"    @PostConstruct\n"
"    public void init() {\n"
"        currentTokens = client.getTokens().await().indefinitely();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:185
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:195
#, no-wrap
msgid ""
"        Tokens tokens = currentTokens;\n"
"        if (tokens.isAccessTokenExpired()) {\n"
"            // Add @Blocking method annotation if this code is used with Reactive RestClient\n"
"            tokens = client.refreshTokens(tokens.getRefreshToken()).await().indefinitely();\n"
"            currentTokens = tokens;\n"
"        }\n"
"        // Use tokens.getAccessToken() to configure MP RestClient Authorization header/etc\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:197
#, no-wrap
msgid "Inject Tokens"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:200
msgid "You can inject `Tokens` which uses `OidcClient` internally. `Tokens` can be used to acquire the access tokens and refresh them if necessary:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:208
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:537
#, no-wrap
msgid "import io.quarkus.oidc.client.Tokens;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:213
#, no-wrap
msgid "    @Inject Tokens tokens;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:221
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        //  Get the access token which may have been refreshed.\n"
"        String accessToken = tokens.getAccessToken();\n"
"        // Use the access token to configure MP RestClient Authorization header/etc\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:224
#, no-wrap
msgid "Use OidcClients"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:227
msgid "`io.quarkus.oidc.client.OidcClients` is a container of ``OidcClient``s - it includes a default `OidcClient` and named clients which can be configured like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:231
#, no-wrap
msgid "quarkus.oidc-client.client-enabled=false\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:235
#, no-wrap
msgid ""
"quarkus.oidc-client.jwt-secret.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.jwt-secret.client-id=quarkus-app\n"
"quarkus.oidc-client.jwt-secret.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:238
msgid "Note in this case the default client is disabled with a `client-enabled=false` property. The `jwt-secret` client can be accessed like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:244
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:271
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:302
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:340
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:247
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.OidcClients;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:250
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:278
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:311
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:343
#, no-wrap
msgid ""
"@Path(\"/clients\")\n"
"public class OidcClientResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:253
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:314
#, no-wrap
msgid ""
"    @Inject\n"
"    OidcClients clients;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:260
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        OidcClient client = clients.getClient(\"jwt-secret\");\n"
"        // use this client to get the token\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:265
msgid "If you also use xref:security-openid-connect-multitenancy.adoc[OIDC multitenancy] and each OIDC tenant has its own associated `OidcClient` then you can use a Vert.x `RoutingContext` `tenantId` attribute, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:275
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.OidcClients;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:283
#, no-wrap
msgid ""
"    @Inject\n"
"    OidcClients clients;\n"
"    @Inject\n"
"    RoutingContext context;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:292
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        String tenantId = context.get(\"tenantId\");\n"
"        // named OIDC tenant and client configurations use the same key:\n"
"        OidcClient client = clients.getClient(tenantId);\n"
"        // use this client to get the token\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:296
msgid "If you need you can also create new `OidcClient` programmatically like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:306
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.OidcClients;\n"
"import io.quarkus.oidc.client.OidcClientConfig;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:308
#, no-wrap
msgid "import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:326
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        OidcClientConfig cfg = new OidcClientConfig();\n"
"        cfg.setId(\"myclient\");\n"
"        cfg.setAuthServerUrl(\"http://localhost:8081/auth/realms/quarkus/\");\n"
"        cfg.setClientId(\"quarkus\");\n"
"        cfg.getCredentials().setSecret(\"secret\");\n"
"        Uni<OidcClient> client = clients.newClient(cfg);\n"
"        // use this client to get the token\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:329
#, no-wrap
msgid "Inject named OidcClient and Tokens"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:332
msgid "In case of multiple configured ``OidcClient``s you can specify the `OidcClient` injection target by the extra qualifier `@NamedOidcClient` instead of working with `OidcClients`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:336
#, no-wrap
msgid "package io.quarkus.oidc.client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:347
#, no-wrap
msgid ""
"    @Inject\n"
"    @NamedOidcClient(\"jwt-secret\")\n"
"    OidcClient client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:353
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        // use client to get the token\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:356
msgid "The same qualifier can be used to specify the `OidcClient` used for a `Tokens` injection:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:363
#, no-wrap
msgid ""
"@Provider\n"
"@Priority(Priorities.AUTHENTICATION)\n"
"@RequestScoped\n"
"public class OidcClientRequestCustomFilter implements ClientRequestFilter {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:367
#, no-wrap
msgid ""
"    @Inject\n"
"    @NamedOidcClient(\"jwt-secret\")\n"
"    Tokens tokens;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:373
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:550
#, no-wrap
msgid ""
"    @Override\n"
"    public void filter(ClientRequestContext requestContext) throws IOException {\n"
"        requestContext.getHeaders().add(HttpHeaders.AUTHORIZATION, \"Bearer \" + tokens.getAccessToken());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:376
#, no-wrap
msgid "Use OidcClient in RestClient Reactive ClientFilter"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:379
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:459
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:1107
msgid "Add the following Maven Dependency:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:386
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc-client-reactive-filter</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:389
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:469
msgid "Note it will also bring `io.quarkus:quarkus-oidc-client`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:391
msgid "`quarkus-oidc-client-reactive-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestReactiveFilter`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:393
msgid "It works similarly to the way `OidcClientRequestFilter` does (see xref:oidc-client-filter[Use OidcClient in MicroProfile RestClient client filter]) - it uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization` `Bearer` scheme value. The difference is that it works with xref:rest-client-reactive.adoc[Reactive RestClient] and implements a non-blocking client filter which does not block the current IO thread when acquiring or refreshing the tokens."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:395
msgid "`OidcClientRequestReactiveFilter` delays an initial token acquisition until it is executed to avoid blocking an IO thread."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:397
msgid "You can selectively register `OidcClientRequestReactiveFilter` by using either io.quarkus.oidc.client.reactive.filter.OidcClientFilter or org.eclipse.microprofile.rest.client.annotation.RegisterProvider annotations:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:404
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:444
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.client.filter.OidcClientFilter;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:409
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:485
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@OidcClientFilter\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:413
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:432
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:453
#, no-wrap
msgid ""
"    @GET\n"
"    Uni<String> getUserName();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:416
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:492
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:591
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:896
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:984
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:1060
msgid "or"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:423
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.client.reactive.filter.OidcClientRequestReactiveFilter;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:428
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(OidcClientRequestReactiveFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:437
msgid "`OidcClientRequestReactiveFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-client-reactive-filter.client-name` configuration property.  You can also select `OidcClient` by setting `value` attribute of the `@OidcClientFilter` annotation. The client name set through annotation has higher priority than the `quarkus.oidc-client-reactive-filter.client-name` configuration property.  For example, given xref:use-oidc-clients[this] `jwt-secret` named OIDC client declaration, you can refer to this client like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:449
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:524
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@OidcClientFilter(\"jwt-secret\")\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:456
#, no-wrap
msgid "Use OidcClient in RestClient ClientFilter"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:466
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc-client-filter</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:471
msgid "`quarkus-oidc-client-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestFilter` Jakarta REST ClientRequestFilter which uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization` `Bearer` scheme value."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:473
msgid "By default, this filter will get `OidcClient` to acquire the first pair of access and refresh tokens at its initialization time. If the access tokens are short-lived and refresh tokens are not available then the token acquisition should be delayed with `quarkus.oidc-client.early-tokens-acquisition=false`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:475
msgid "You can selectively register `OidcClientRequestFilter` by using either `io.quarkus.oidc.client.filter.OidcClientFilter` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotations:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:480
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:519
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.client.filter.OidcClientFilter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:489
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:507
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:528
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:893
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:911
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:982
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:999
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:1058
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:1075
#, no-wrap
msgid ""
"    @GET\n"
"    String getUserName();\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:498
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.client.filter.OidcClientRequestFilter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:503
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(OidcClientRequestFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:510
msgid "Alternatively, `OidcClientRequestFilter` can be registered automatically with all MP Rest or Jakarta REST clients if `quarkus.oidc-client-filter.register-filter=true` property is set."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:514
msgid "`OidcClientRequestFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-client-filter.client-name` configuration property.  You can also select `OidcClient` by setting `value` attribute of the `@OidcClientFilter` annotation. The client name set through annotation has higher priority than the `quarkus.oidc-client-filter.client-name` configuration property.  For example, given xref:use-oidc-clients[this] `jwt-secret` named OIDC client declaration, you can refer to this client like this:"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:530
#, no-wrap
msgid "Use Custom RestClient ClientFilter"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:533
msgid "If you prefer you can use your own custom filter and inject `Tokens`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:541
#, no-wrap
msgid ""
"@Provider\n"
"@Priority(Priorities.AUTHENTICATION)\n"
"public class OidcClientRequestCustomFilter implements ClientRequestFilter {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:544
#, no-wrap
msgid ""
"    @Inject\n"
"    Tokens tokens;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:553
msgid "The `Tokens` producer will acquire and refresh the tokens, and the custom filter will decide how and when to use the token."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:555
msgid "You can also inject named `Tokens`, see xref:named-oidc-clients[Inject named OidcClient and Tokens]"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:557
#, no-wrap
msgid "Refreshing Access Tokens"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:561
msgid "`OidcClientRequestReactiveFilter`, `OidcClientRequestFilter` and `Tokens` producers will refresh the current expired access token if the refresh token is available.  Additionally, `quarkus.oidc-client.refresh-token-time-skew` property can be used for a preemptive access token refreshment to avoid sending nearly expired access tokens which may cause HTTP 401 errors. For example if this property is set to `3S` and the access token will expire in less than 3 seconds then this token will be auto-refreshed."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:563
msgid "If the access token needs to be refreshed but no refresh token is available then an attempt will be made to acquire a new token using the configured grant such as `client_credentials`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:565
msgid "Please note that some OpenID Connect Providers will not return a refresh token in a `client_credentials` grant response. For example, starting from Keycloak 12 a refresh token will not be returned by default for `client_credentials`. The providers may also restrict a number of times a refresh token can be used."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:567
#, no-wrap
msgid "Revoking Access Tokens"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:570
msgid "If your OpenId Connect provider such as Keycloak supports a token revocation endpoint then `OidcClient#revokeAccessToken` can be used to revoke the current access token. The revocation endpoint URL will be discovered alongside the token request URI or can be configured with `quarkus.oidc-client.revoke-path`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:572
msgid "You may want to have the access token revoked if using this token with a REST client fails with HTTP `401` or the access token has already been used for a long time and you'd like to refresh it."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:574
msgid "This can be achieved by requesting a token refresh using a refresh token. However, if the refresh token is not available then you can refresh it by revoking it first and then request a new access token."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:576
#, no-wrap
msgid "OidcClient Authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:580
msgid "`OidcClient` has to authenticate to the OpenID Connect Provider for the `client_credentials` and other grant requests to succeed.  All the https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] options are supported, for example:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:582
msgid "`client_secret_basic`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:588
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=mysecret\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:597
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.client-secret.value=mysecret\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:600
msgid "or with the secret retrieved from a xref:credentials-provider.adoc[CredentialsProvider]:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:605
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:637
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:610
#, no-wrap
msgid ""
"# This is a key which will be used to retrieve a secret from the map of credentials returned from CredentialsProvider\n"
"quarkus.oidc-client.credentials.client-secret.provider.key=mysecret-key\n"
"# Set it only if more than one CredentialsProvider can be registered\n"
"quarkus.oidc-client.credentials.client-secret.provider.name=oidc-credentials-provider\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:613
msgid "`client_secret_post`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:620
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.client-secret.value=mysecret\n"
"quarkus.oidc-client.credentials.client-secret.method=post\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:623
msgid "`client_secret_jwt`, signature algorithm is `HS256`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:629
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:632
msgid "or with the secret retrieved from a xref:credentials-provider.adoc[CredentialsProvider], signature algorithm is `HS256`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:642
#, no-wrap
msgid ""
"# This is a key which will be used to retrieve a secret from the map of credentials returned from CredentialsProvider\n"
"quarkus.oidc-client.credentials.jwt.secret-provider.key=mysecret-key\n"
"# Set it only if more than one CredentialsProvider can be registered\n"
"quarkus.oidc-client.credentials.jwt.secret-provider.name=oidc-credentials-provider\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:645
msgid "`private_key_jwt` with the PEM key file, signature algorithm is `RS256`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:651
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:680
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.jwt.key-file=privateKey.pem\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:654
msgid "`private_key_jwt` with the key store file, signature algorithm is `RS256`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:662
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus/\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.jwt.key-store-file=keystore.jks\n"
"quarkus.oidc-client.credentials.jwt.key-store-password=mypassword\n"
"quarkus.oidc-client.credentials.jwt.key-password=mykeypassword\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:665
#, no-wrap
msgid ""
"# Private key alias inside the keystore\n"
"quarkus.oidc-client.credentials.jwt.key-id=mykeyAlias\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:668
msgid "Using `client_secret_jwt` or `private_key_jwt` authentication methods ensures that no client secret goes over the wire."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:669
#, no-wrap
msgid "Additional JWT Authentication options"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:672
msgid "If either `client_secret_jwt` or `private_key_jwt` authentication methods are used then the JWT signature algorithm, key identifier, audience, subject and issuer can be customized, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:676
#, no-wrap
msgid "# private_key_jwt client authentication\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:685
#, no-wrap
msgid ""
"# This is a token key identifier 'kid' header - set it if your OpenID Connect provider requires it.\n"
"# Note if the key is represented in a JSON Web Key (JWK) format with a `kid` property then\n"
"# using 'quarkus.oidc-client.credentials.jwt.token-key-id' is not necessary.\n"
"quarkus.oidc-client.credentials.jwt.token-key-id=mykey\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:688
#, no-wrap
msgid ""
"# Use RS512 signature algorithm instead of the default RS256\n"
"quarkus.oidc-client.credentials.jwt.signature-algorithm=RS512\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:691
#, no-wrap
msgid ""
"# The token endpoint URL is the default audience value, use the base address URL instead:\n"
"quarkus.oidc-client.credentials.jwt.audience=${quarkus.oidc-client.auth-server-url}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:694
#, no-wrap
msgid ""
"# custom subject instead of the client id :\n"
"quarkus.oidc-client.credentials.jwt.subject=custom-subject\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:697
#, no-wrap
msgid ""
"# custom issuer instead of the client id :\n"
"quarkus.oidc-client.credentials.jwt.issuer=custom-issuer\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:699
#, no-wrap
msgid "Apple POST JWT"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:702
msgid "Apple OpenID Connect Provider uses a `client_secret_post` method where a secret is a JWT produced with a `private_key_jwt` authentication method but with Apple account specific issuer and subject properties."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:704
msgid "`quarkus-oidc-client` supports a non-standard `client_secret_post_jwt` authentication method which can be configured as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:710
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=${apple.url}\n"
"quarkus.oidc-client.client-id=${apple.client-id}\n"
"quarkus.oidc-client.credentials.client-secret.method=post-jwt\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:715
#, no-wrap
msgid ""
"quarkus.oidc-client.credentials.jwt.key-file=ecPrivateKey.pem\n"
"quarkus.oidc-client.credentials.jwt.signature-algorithm=ES256\n"
"quarkus.oidc-client.credentials.jwt.subject=${apple.subject}\n"
"quarkus.oidc-client.credentials.jwt.issuer=${apple.issuer}\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:717
#, no-wrap
msgid "Mutual TLS"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:720
msgid "Some OpenID Connect Providers may require that a client is authenticated as part of the `Mutual TLS` (`mTLS`) authentication process."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:722
msgid "`quarkus-oidc-client` can be configured as follows to support `mTLS`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:726
#, no-wrap
msgid "quarkus.oidc.tls.verification=certificate-validation\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:730
#, no-wrap
msgid ""
"# Keystore configuration\n"
"quarkus.oidc.client.tls.key-store-file=client-keystore.jks\n"
"quarkus.oidc.client.tls.key-store-password=${key-store-password}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:734
#, no-wrap
msgid ""
"# Add more keystore properties if needed:\n"
"#quarkus.oidc.client.tls.key-store-alias=keyAlias\n"
"#quarkus.oidc.client.tls.key-store-alias-password=keyAliasPassword\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:740
#, no-wrap
msgid ""
"# Truststore configuration\n"
"quarkus.oidc-client.tls.trust-store-file=client-truststore.jks\n"
"quarkus.oidc-client.tls.trust-store-password=${trust-store-password}\n"
"# Add more truststore properties if needed:\n"
"#quarkus.oidc.client.tls.trust-store-alias=certAlias\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:743
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:1098
#, no-wrap
msgid "Testing"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:746
msgid "Start by adding the following dependencies to your test project:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:759
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>org.awaitility</groupId>\n"
"    <artifactId>awaitility</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:762
#, no-wrap
msgid "Wiremock"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:765
msgid "Add the following dependencies to your test project:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:773
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>org.wiremock</groupId>\n"
"    <artifactId>wiremock</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:776
msgid "Write Wiremock based `QuarkusTestResourceLifecycleManager`, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:779
#, no-wrap
msgid "package io.quarkus.it.keycloak;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:782
#, no-wrap
msgid ""
"import static com.github.tomakehurst.wiremock.client.WireMock.matching;\n"
"import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.wireMockConfig;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:785
#, no-wrap
msgid ""
"import java.util.HashMap;\n"
"import java.util.Map;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:789
#, no-wrap
msgid ""
"import com.github.tomakehurst.wiremock.WireMockServer;\n"
"import com.github.tomakehurst.wiremock.client.WireMock;\n"
"import com.github.tomakehurst.wiremock.core.Options.ChunkedEncodingPolicy;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:791
#, no-wrap
msgid "import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:794
#, no-wrap
msgid ""
"public class KeycloakRealmResourceManager implements QuarkusTestResourceLifecycleManager {\n"
"    private WireMockServer server;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:797
#, no-wrap
msgid ""
"    @Override\n"
"    public Map<String, String> start() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:800
#, no-wrap
msgid ""
"        server = new WireMockServer(wireMockConfig().dynamicPort().useChunkedTransferEncoding(ChunkedEncodingPolicy.NEVER));\n"
"        server.start();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:815
#, no-wrap
msgid ""
"        server.stubFor(WireMock.post(\"/tokens\")\n"
"                .withRequestBody(matching(\"grant_type=password&username=alice&password=alice\"))\n"
"                .willReturn(WireMock\n"
"                        .aResponse()\n"
"                        .withHeader(\"Content-Type\", \"application/json\")\n"
"                        .withBody(\n"
"                                \"{\\\"access_token\\\":\\\"access_token_1\\\", \\\"expires_in\\\":4, \\\"refresh_token\\\":\\\"refresh_token_1\\\"}\")));\n"
"        server.stubFor(WireMock.post(\"/tokens\")\n"
"                .withRequestBody(matching(\"grant_type=refresh_token&refresh_token=refresh_token_1\"))\n"
"                .willReturn(WireMock\n"
"                        .aResponse()\n"
"                        .withHeader(\"Content-Type\", \"application/json\")\n"
"                        .withBody(\n"
"                                \"{\\\"access_token\\\":\\\"access_token_2\\\", \\\"expires_in\\\":4, \\\"refresh_token\\\":\\\"refresh_token_1\\\"}\")));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:821
#, no-wrap
msgid ""
"        Map<String, String> conf = new HashMap<>();\n"
"        conf.put(\"keycloak.url\", server.baseUrl());\n"
"        return conf;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:830
#, no-wrap
msgid ""
"    @Override\n"
"    public synchronized void stop() {\n"
"        if (server != null) {\n"
"            server.stop();\n"
"            server = null;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:833
msgid "Prepare the REST test endpoints, you can have the test frontend endpoint which uses the injected MP REST client with a registered OidcClient filter to invoke on the downstream endpoint which echoes the token back, for example, see the `integration-tests/oidc-client-wiremock` in the `main` Quarkus repository."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:835
msgid "Set `application.properties`, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:847
#, no-wrap
msgid ""
"# Use 'keycloak.url' property set by the test KeycloakRealmResourceManager\n"
"quarkus.oidc-client.auth-server-url=${keycloak.url}\n"
"quarkus.oidc-client.discovery-enabled=false\n"
"quarkus.oidc-client.token-path=/tokens\n"
"quarkus.oidc-client.client-id=quarkus-service-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=password\n"
"quarkus.oidc-client.grant-options.password.username=alice\n"
"quarkus.oidc-client.grant-options.password.password=alice\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:850
msgid "and finally write the test code. Given the Wiremock-based resource above, the first test invocation should return `access_token_1` access token which will expire in 4 seconds. Use `awaitility` to wait for about 5 seconds, and now the next test invocation should return `access_token_2` access token which confirms the expired `access_token_1` access token has been refreshed."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:851
#, no-wrap
msgid "Keycloak"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:854
msgid "If you work with Keycloak then you can use the same approach as described in the xref:security-oidc-bearer-token-authentication.adoc#integration-testing-keycloak[OpenID Connect Bearer Token Integration testing] Keycloak section."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:855
#, no-wrap
msgid "How to check the errors in the logs"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:858
msgid "Please enable `io.quarkus.oidc.client.runtime.OidcClientImpl` `TRACE` level logging to see more details about the token acquisition and refresh errors:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:863
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.oidc.client.runtime.OidcClientImpl\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.oidc.client.runtime.OidcClientImpl\".min-level=TRACE\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:866
msgid "Please enable `io.quarkus.oidc.client.runtime.OidcClientRecorder` `TRACE` level logging to see more details about the OidcClient initialization errors:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:871
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.oidc.client.runtime.OidcClientRecorder\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.oidc.client.runtime.OidcClientRecorder\".min-level=TRACE\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:874
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:1104
#, no-wrap
msgid "Token Propagation Reactive"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:877
msgid "The `quarkus-oidc-token-propagation-reactive` extension provides RestEasy Reactive Client `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter` that simplifies the propagation of authentication information by propagating the xref:security-oidc-bearer-token-authentication.adoc[Bearer token] present in the current active request or the token acquired from the xref:security-oidc-code-flow-authentication.adoc[Authorization code flow mechanism], as the HTTP `Authorization` header's `Bearer` scheme value."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:879
msgid "You can selectively register `AccessTokenRequestReactiveFilter` by using either `io.quarkus.oidc.token.propagation.AccessToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotation, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:884
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:973
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.AccessToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:889
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:978
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@AccessToken\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:902
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:907
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(AccessTokenRequestReactiveFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:915
msgid "Additionally, `AccessTokenRequestReactiveFilter` can support a complex application that needs to exchange the tokens before propagating them."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:917
msgid "If you work with link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] or other OpenID Connect Providers which support a link:https://tools.ietf.org/html/rfc8693[Token Exchange] token grant then you can configure `AccessTokenRequestReactiveFilter` to exchange the token like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:925
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:1014
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
"quarkus.oidc-client.grant.type=exchange\n"
"quarkus.oidc-client.grant-options.exchange.audience=quarkus-app-exchange\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:927
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:1016
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:1031
#, no-wrap
msgid "quarkus.oidc-token-propagation.exchange-token=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:930
msgid "Note `AccessTokenRequestReactiveFilter` will use `OidcClient` to exchange the current token, and you can use `quarkus.oidc-client.grant-options.exchange` to set the additional exchange properties expected by your OpenID Connect Provider."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:932
msgid "If you work with providers such as `Azure` that link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[require using] link:https://www.rfc-editor.org/rfc/rfc7523#section-2.1[JWT bearer token grant] to exhange the current token then you can configure `AccessTokenRequestReactiveFilter` to exchange the token like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:938
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:1025
#, no-wrap
msgid ""
"quarkus.oidc-client.auth-server-url=${azure.provider.url}\n"
"quarkus.oidc-client.client-id=quarkus-app\n"
"quarkus.oidc-client.credentials.secret=secret\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:942
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:1029
#, no-wrap
msgid ""
"quarkus.oidc-client.grant.type=jwt\n"
"quarkus.oidc-client.grant-options.jwt.requested_token_use=on_behalf_of\n"
"quarkus.oidc-client.scopes=https://graph.microsoft.com/user.read,offline_access\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:944
#, no-wrap
msgid "quarkus.oidc-token-propagation-reactive.exchange-token=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:947
msgid "`AccessTokenRequestReactiveFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-token-propagation-reactive.client-name` configuration property."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:949
#, no-wrap
msgid "Token Propagation"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:954
msgid "The `quarkus-oidc-token-propagation` extension provides two Jakarta REST `jakarta.ws.rs.client.ClientRequestFilter` class implementations that simplify the propagation of authentication information.  `io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` propagates the xref:security-oidc-bearer-token-authentication.adoc[Bearer token] present in the current active request or the token acquired from the xref:security-oidc-code-flow-authentication.adoc[Authorization code flow mechanism], as the HTTP `Authorization` header's `Bearer` scheme value.  The `io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter` provides the same functionality, but in addition provides support for JWT tokens."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:956
msgid "When you need to propagate the current Authorization Code Flow access token then the immediate token propagation will work well - as the code flow access tokens (as opposed to ID tokens) are meant to be propagated for the current Quarkus endpoint to access the remote services on behalf of the currently authenticated user."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:958
msgid "However, the direct end to end Bearer token propagation should be avoided if possible. For example, `Client -> Service A -> Service B` where `Service B` receives a token sent by `Client` to `Service A`. In such cases `Service B` will not be able to distinguish if the token came from `Service A` or from `Client` directly. For `Service B` to verify the token came from `Service A` it should be able to assert a new issuer and audience claims."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:960
msgid "Additionally, a complex application may need to exchange or update the tokens before propagating them. For example, the access context might be different when `Service A` is accessing `Service B`. In this case, `Service A` might be granted a narrow or a completely different set of scopes to access `Service B`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:962
msgid "The following sections show how `AccessTokenRequestFilter` and `JsonWebTokenRequestFilter` can help."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:963
#, no-wrap
msgid "RestClient AccessTokenRequestFilter"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:966
msgid "`AccessTokenRequestFilter` treats all tokens as Strings and as such it can work with both JWT and opaque tokens."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:968
msgid "You can selectively register `AccessTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.AccessToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:990
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.AccessTokenRequestFilter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:995
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(AccessTokenRequestFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:1002
msgid "Alternatively, `AccessTokenRequestFilter` can be registered automatically with all MP Rest or Jakarta REST clients if `quarkus.oidc-token-propagation.register-filter` property is set to `true` and `quarkus.oidc-token-propagation.json-web-token` property is set to `false` (which is a default value)."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:1003
#, no-wrap
msgid "Exchange Token Before Propagation"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:1006
msgid "If the current access token needs to be exchanged before propagation and you work with link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] or other OpenID Connect Provider which supports a link:https://tools.ietf.org/html/rfc8693[Token Exchange] token grant then you can configure `AccessTokenRequestFilter` like this:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:1019
msgid "If you work with providers such as `Azure` that link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[require using] link:https://www.rfc-editor.org/rfc/rfc7523#section-2.1[JWT bearer token grant] to exhange the current token then you can configure `AccessTokenRequestFilter` to exchange the token like this:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:1034
msgid "Note `AccessTokenRequestFilter` will use `OidcClient` to exchange the current token, and you can use `quarkus.oidc-client.grant-options.exchange` to set the additional exchange properties expected by your OpenID Connect Provider."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:1036
msgid "`AccessTokenRequestFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-token-propagation.client-name` configuration property."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:1037
#, no-wrap
msgid "RestClient JsonWebTokenRequestFilter"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:1040
msgid "Using `JsonWebTokenRequestFilter` is recommended if you work with Bearer JWT tokens where these tokens can have their claims such as `issuer` and `audience` modified and the updated tokens secured (for example, re-signed) again. It expects an injected `org.eclipse.microprofile.jwt.JsonWebToken` and therefore will not work with the opaque tokens. Also, if your OpenID Connect Provider supports a Token Exchange protocol then it is recommended to use `AccessTokenRequestFilter` instead - as both JWT and opaque bearer tokens can be securely exchanged with `AccessTokenRequestFilter`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:1042
msgid "`JsonWebTokenRequestFilter` makes it easy for `Service A` implementations to update the injected `org.eclipse.microprofile.jwt.JsonWebToken` with the new `issuer` and `audience` claim values and secure the updated token again with a new signature. The only difficult step is to ensure `Service A` has a signing key - it should be provisioned from a secure file system or from the remote secure storage such as Vault."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:1044
msgid "You can selectively register `JsonWebTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.JsonWebToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:1049
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.JsonWebToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:1054
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@JsonWebToken\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:1066
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;\n"
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:1071
#, no-wrap
msgid ""
"@RegisterRestClient\n"
"@RegisterProvider(JsonWebTokenRequestFilter.class)\n"
"@Path(\"/\")\n"
"public interface ProtectedResourceService {\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:1078
msgid "Alternatively, `JsonWebTokenRequestFilter` can be registered automatically with all MicroProfile REST or Jakarta REST clients if both `quarkus.oidc-token-propagation.register-filter` and `quarkus.oidc-token-propagation.json-web-token` properties are set to `true`."
msgstr ""

#. type: Title ====
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:1079
#, no-wrap
msgid "Update Token Before Propagation"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:1082
msgid "If the injected token needs to have its `iss` (issuer) and/or `aud` (audience) claims updated and secured again with a new signature then you can configure `JsonWebTokenRequestFilter` like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:1093
#, no-wrap
msgid ""
"quarkus.oidc-token-propagation.secure-json-web-token=true\n"
"smallrye.jwt.sign.key.location=/privateKey.pem\n"
"# Set a new issuer\n"
"smallrye.jwt.new-token.issuer=http://frontend-resource\n"
"# Set a new audience\n"
"smallrye.jwt.new-token.audience=http://downstream-resource\n"
"# Override the existing token issuer and audience claims if they are already set\n"
"smallrye.jwt.new-token.override-matching-claims=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:1096
msgid "As already noted above, please use `AccessTokenRequestFilter` if you work with Keycloak or OpenID Connect Provider which supports a Token Exchange protocol."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:1102
msgid "You can generate the tokens as described in xref:security-oidc-bearer-token-authentication.adoc#integration-testing[OpenID Connect Bearer Token Integration testing] section.  Prepare the REST test endpoints, you can have the test frontend endpoint which uses the injected MP REST client with a registered token propagation filter to invoke on the downstream endpoint, for example, see the `integration-tests/oidc-token-propagation` in the `main` Quarkus repository."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:1114
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc-token-propagation-reactive</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:1117
msgid "The `quarkus-oidc-token-propagation-reactive` extension provides `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter` which can be used to propagate the current `Bearer` or `Authorization Code Flow` access tokens."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:1120
msgid "The `quarkus-oidc-token-propagation-reactive` extension (as opposed to the non-reactive `quarkus-oidc-token-propagation` extension) does not currently support the exchanging or resigning the tokens before the propagation.  However, these features may be added in the future."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:1121
#, no-wrap
msgid "References"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:1124
msgid "xref:security-openid-connect-client.adoc[OpenID Connect Client and Token Propagation Quickstart]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:1125
msgid "xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:1126
msgid "xref:security-oidc-code-flow-authentication.adoc[OIDC code flow mechanism for protecting web applications]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-client-reference.adoc:1126
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr ""
