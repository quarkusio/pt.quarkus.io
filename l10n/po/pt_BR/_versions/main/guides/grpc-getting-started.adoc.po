# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-29 08:06+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/grpc-getting-started.adoc:6
#, no-wrap
msgid "Getting Started with gRPC"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/grpc-getting-started.adoc:15
msgid "This page explains how to start using gRPC in your Quarkus application.  While this page describes how to configure it with Maven, it is also possible to use Gradle."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/grpc-getting-started.adoc:18
msgid "Let's imagine you have a regular Quarkus project, generated from the https://code.quarkus.io[Quarkus project generator].  The default configuration is enough, but you can also select some extensions if you want."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/grpc-getting-started.adoc:19
#, no-wrap
msgid "Solution"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/grpc-getting-started.adoc:23
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr "Recomendamos que siga as instruções nas seções seguintes e crie a aplicação passo a passo. No entanto, você pode ir diretamente para o exemplo completo."

#. type: Plain text
#: upstream/_versions/main/guides/grpc-getting-started.adoc:25
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/grpc-getting-started.adoc:27
msgid "The solution is located in the `grpc-plain-text-quickstart` link:{quickstarts-tree-url}/grpc-plain-text-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/grpc-getting-started.adoc:28
#, no-wrap
msgid "Configuring your project"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/grpc-getting-started.adoc:31
msgid "Add the Quarkus gRPC extension to your build file:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/grpc-getting-started.adoc:33
#: upstream/_versions/main/guides/grpc-getting-started.adoc:52
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: delimited block -
#: upstream/_versions/main/guides/grpc-getting-started.adoc:39
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-grpc</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/grpc-getting-started.adoc:42
#: upstream/_versions/main/guides/grpc-getting-started.adoc:61
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block -
#: upstream/_versions/main/guides/grpc-getting-started.adoc:45
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-grpc\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/grpc-getting-started.adoc:50
msgid "By default, the `quarkus-grpc` extension relies on the reactive programming model.  In this guide we will follow a reactive approach.  Under the `dependencies` section of your `pom.xml` file, make sure you have the RESTEasy Reactive dependency:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/grpc-getting-started.adoc:58
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-reactive</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/grpc-getting-started.adoc:64
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-resteasy-reactive\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/grpc-getting-started.adoc:69
msgid "If you are using Maven, make sure you have the `generate-code` goal of `quarkus-maven-plugin` enabled in your `pom.xml`.  If you wish to generate code from different `proto` files for tests, also add the `generate-code-tests` goal.  Please note that no additional task/goal is required for the Gradle plugin."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/grpc-getting-started.adoc:91
#, no-wrap
msgid ""
"<build>\n"
"    <plugins>\n"
"        <plugin>\n"
"            <groupId>io.quarkus</groupId>\n"
"            <artifactId>quarkus-maven-plugin</artifactId>\n"
"            <version>${quarkus-plugin.version}</version>\n"
"            <extensions>true</extensions>\n"
"            <executions>\n"
"                <execution>\n"
"                    <goals>\n"
"                        <goal>build</goal>\n"
"                        <goal>generate-code</goal>\n"
"                        <goal>generate-code-tests</goal>\n"
"                    </goals>\n"
"                </execution>\n"
"            </executions>\n"
"        </plugin>\n"
"    </plugins>\n"
"</build>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/grpc-getting-started.adoc:95
msgid "With this configuration, you can put your service and message definitions in the `src/main/proto` directory.  `quarkus-maven-plugin` will generate Java files from your `proto` files."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/grpc-getting-started.adoc:101
msgid "`quarkus-maven-plugin` retrieves a version of `protoc` (the protobuf compiler) from Maven repositories. The retrieved version matches your operating system and CPU architecture.  If this retrieved version does not work in your context, you can either force to use a different OS classifier with `-Dquarkus.grpc.protoc-os-classifier=your-os-classifier` (e.g. `osx-x86_64`).  You can also download the suitable binary and specify the location via `-Dquarkus.grpc.protoc-path=/path/to/protoc`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/grpc-getting-started.adoc:105
msgid "Alternatively to using the `generate-code` goal of the `quarkus-maven-plugin`, you can use `protobuf-maven-plugin` to generate these files.  See the xref:grpc-generation-reference.adoc#protobuf-maven-plugin[Generating Java files from proto with the protobuf-maven-plugin] section for more information."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/grpc-getting-started.adoc:108
msgid "Let's start with a simple _Hello_ service.  Create the `src/main/proto/helloworld.proto` file with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/grpc-getting-started.adoc:112
#, no-wrap
msgid "syntax = \"proto3\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/grpc-getting-started.adoc:116
#, no-wrap
msgid ""
"option java_multiple_files = true;\n"
"option java_package = \"io.quarkus.example\";\n"
"option java_outer_classname = \"HelloWorldProto\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/grpc-getting-started.adoc:118
#, no-wrap
msgid "package helloworld;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/grpc-getting-started.adoc:124
#, no-wrap
msgid ""
"// The greeting service definition.\n"
"service Greeter {\n"
"    // Sends a greeting\n"
"    rpc SayHello (HelloRequest) returns (HelloReply) {}\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/grpc-getting-started.adoc:129
#, no-wrap
msgid ""
"// The request message containing the user's name.\n"
"message HelloRequest {\n"
"    string name = 1;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/grpc-getting-started.adoc:134
#, no-wrap
msgid ""
"// The response message containing the greetings\n"
"message HelloReply {\n"
"    string message = 1;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/grpc-getting-started.adoc:137
msgid "This `proto` file defines a simple service interface with a single method (`SayHello`), and the exchanged messages (`HelloRequest` containing the name and `HelloReply` containing the greeting message)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/grpc-getting-started.adoc:139
msgid "Your `proto` file must not contain `option java_generic_services = true;`. https://developers.google.com/protocol-buffers/docs/reference/java-generated?hl=en#service[Generic services are deprecated] and are not compatible with Quarkus code generation plugins."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/grpc-getting-started.adoc:142
msgid "Before coding, we need to generate the classes used to implement and consume gRPC services.  In a terminal, run:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/grpc-getting-started.adoc:146
#, no-wrap
msgid "$ mvn compile\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/grpc-getting-started.adoc:149
msgid "Once generated, you can look at the `target/generated-sources/grpc` directory:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/grpc-getting-started.adoc:166
#, no-wrap
msgid ""
"target/generated-sources/grpc\n"
"└── io\n"
"    └── quarkus\n"
"        └── example\n"
"            ├── Greeter.java\n"
"            ├── GreeterBean.java\n"
"            ├── GreeterClient.java\n"
"            ├── GreeterGrpc.java\n"
"            ├── HelloReply.java\n"
"            ├── HelloReplyOrBuilder.java\n"
"            ├── HelloRequest.java\n"
"            ├── HelloRequestOrBuilder.java\n"
"            ├── HelloWorldProto.java\n"
"            └── MutinyGreeterGrpc.java\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/grpc-getting-started.adoc:169
msgid "These are the classes we are going to use."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/grpc-getting-started.adoc:170
#, no-wrap
msgid "Different gRPC implementations / types"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/grpc-getting-started.adoc:173
msgid "Another thing to take note as well is that Quarkus' gRPC support currently includes 3 different types of gRPC usage:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/grpc-getting-started.adoc:175
msgid "old Vert.x gRPC implementation with a separate gRPC server (default)"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/grpc-getting-started.adoc:176
msgid "new Vert.x gRPC implementation on top of the existing HTTP server"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/grpc-getting-started.adoc:177
msgid "https://grpc.github.io/grpc/core/md_doc_grpc_xds_features.html[xDS gRPC] wrapper over https://github.com/grpc/grpc-java[grpc-java] with a separate Netty based gRPC server"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/grpc-getting-started.adoc:179
msgid "Further docs explain how to enable and use each of them."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/grpc-getting-started.adoc:180
#, no-wrap
msgid "Implementing a gRPC service"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/grpc-getting-started.adoc:183
msgid "Now that we have the generated classes let's implement our _hello_ service."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/grpc-getting-started.adoc:187
msgid "With Quarkus, implementing a service requires to implement the generated service interface based on Mutiny, a Reactive Programming API integrated in Quarkus, and expose it as a CDI bean.  Learn more about Mutiny on the xref:mutiny-primer.adoc[Mutiny guide].  The service class must be annotated with the `@io.quarkus.grpc.GrpcService` annotation."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/grpc-getting-started.adoc:188
#, no-wrap
msgid "Implementing a service"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/grpc-getting-started.adoc:191
msgid "Create the `src/main/java/org/acme/HelloService.java` file with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/grpc-getting-started.adoc:195
#: upstream/_versions/main/guides/grpc-getting-started.adoc:222
#: upstream/_versions/main/guides/grpc-getting-started.adoc:272
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/grpc-getting-started.adoc:201
#, no-wrap
msgid ""
"import io.quarkus.example.Greeter;\n"
"import io.quarkus.example.HelloReply;\n"
"import io.quarkus.example.HelloRequest;\n"
"import io.quarkus.grpc.GrpcService;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/grpc-getting-started.adoc:204
#, no-wrap
msgid ""
"@GrpcService <1>\n"
"public class HelloService implements Greeter {  <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/grpc-getting-started.adoc:212
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<HelloReply> sayHello(HelloRequest request) { <3>\n"
"        return Uni.createFrom().item(() ->\n"
"                HelloReply.newBuilder().setMessage(\"Hello \" + request.getName()).build()\n"
"        );\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/grpc-getting-started.adoc:214
#: upstream/_versions/main/guides/grpc-getting-started.adoc:242
msgid "Expose your implementation as a bean."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/grpc-getting-started.adoc:215
msgid "Implement the generated service interface."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/grpc-getting-started.adoc:216
#: upstream/_versions/main/guides/grpc-getting-started.adoc:244
msgid "Implement the methods defined in the service definition (here we have a single method)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/grpc-getting-started.adoc:218
msgid "You can also use the default gRPC API instead of Mutiny:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/grpc-getting-started.adoc:228
#, no-wrap
msgid ""
"import io.grpc.stub.StreamObserver;\n"
"import io.quarkus.example.GreeterGrpc;\n"
"import io.quarkus.example.HelloReply;\n"
"import io.quarkus.example.HelloRequest;\n"
"import io.quarkus.grpc.GrpcService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/grpc-getting-started.adoc:231
#, no-wrap
msgid ""
"@GrpcService <1>\n"
"public class HelloService extends GreeterGrpc.GreeterImplBase { <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/grpc-getting-started.adoc:240
#, no-wrap
msgid ""
"    @Override\n"
"    public void sayHello(HelloRequest request, StreamObserver<HelloReply> responseObserver) { <3>\n"
"        String name = request.getName();\n"
"        String message = \"Hello \" + name;\n"
"        responseObserver.onNext(HelloReply.newBuilder().setMessage(message).build()); <4>\n"
"        responseObserver.onCompleted(); <5>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/grpc-getting-started.adoc:243
msgid "Extends the `ImplBase` class. This is a generated class."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/grpc-getting-started.adoc:245
msgid "Build and send the response."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/grpc-getting-started.adoc:246
msgid "Close the response."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/grpc-getting-started.adoc:251
msgid "If your service implementation logic is blocking (use blocking I/O for example), annotate your method with `@Blocking`.  The `io.smallrye.common.annotation.Blocking` annotation instructs the framework to invoke the annotated method on a worker thread instead of the I/O thread (event-loop)."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/grpc-getting-started.adoc:252
#, no-wrap
msgid "The gRPC server"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/grpc-getting-started.adoc:256
msgid "The services are _served_ by a _server_.  Available services (_CDI beans_) are automatically registered and exposed."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/grpc-getting-started.adoc:259
msgid "By default, the server is exposed on `localhost:9000`, and uses _plain-text_ (so no TLS) when running normally, and `localhost:9001` for tests."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/grpc-getting-started.adoc:261
msgid "Run the application using: `mvn quarkus:dev`."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/grpc-getting-started.adoc:262
#, no-wrap
msgid "Consuming a gRPC service"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/grpc-getting-started.adoc:266
msgid "In this section, we are going to consume the service we expose.  To simplify, we are going to consume the service from the same application, which in the real world, does not make sense."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/grpc-getting-started.adoc:268
msgid "Open the existing `org.acme.ExampleResource` class, and edit the content to become:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/grpc-getting-started.adoc:277
#, no-wrap
msgid ""
"import io.quarkus.example.Greeter;\n"
"import io.quarkus.example.HelloRequest;\n"
"import io.quarkus.grpc.GrpcClient;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/grpc-getting-started.adoc:282
#, no-wrap
msgid ""
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/grpc-getting-started.adoc:285
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"public class ExampleResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/grpc-getting-started.adoc:288
#, no-wrap
msgid ""
"    @GrpcClient                               // <1>\n"
"    Greeter hello;                            // <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/grpc-getting-started.adoc:294
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return \"hello\";\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/grpc-getting-started.adoc:302
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/{name}\")\n"
"    public Uni<String> hello(String name) {\n"
"        return hello.sayHello(HelloRequest.newBuilder().setName(name).build())\n"
"                .onItem().transform(helloReply -> helloReply.getMessage());  // <3>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/grpc-getting-started.adoc:304
msgid "Inject the service and configure its name. The name is used in the application configuration. If not specified then the field name is used instead: `hello` in this particular case."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/grpc-getting-started.adoc:305
msgid "Use the generated service interface based on Mutiny API."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/grpc-getting-started.adoc:306
msgid "Invoke the service."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/grpc-getting-started.adoc:309
msgid "We need to configure the application to indicate where the `hello` service is found.  In the `src/main/resources/application.properties` file, add the following property:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/grpc-getting-started.adoc:313
#, no-wrap
msgid "quarkus.grpc.clients.hello.host=localhost\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/grpc-getting-started.adoc:316
msgid "`hello` is the name used in the `@GrpcClient` annotation."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/grpc-getting-started.adoc:317
msgid "`host` configures the service host (here it's localhost)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/grpc-getting-started.adoc:319
msgid "Then, open http://localhost:8080/hello/quarkus in a browser, and you should get `Hello quarkus`!"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/grpc-getting-started.adoc:320
#, no-wrap
msgid "Packaging the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/grpc-getting-started.adoc:324
msgid "Like any other Quarkus applications, you can package it with: `mvn package`.  You can also package the application into a native executable with: `mvn package -Dnative`."
msgstr ""
