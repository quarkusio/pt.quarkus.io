# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:12+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:6
#, no-wrap
msgid "Using OpenID Connect (OIDC) Multi-Tenancy"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:12
msgid "This guide demonstrates how your OpenID Connect (OIDC) application can support multi-tenancy so that you can serve multiple tenants from a single application. Tenants can be distinct realms or security domains within the same OpenID Provider or even distinct OpenID Providers."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:14
msgid "When serving multiple customers from the same application (e.g.: SaaS), each customer is a tenant. By enabling multi-tenancy support to your applications you are allowed to also support distinct authentication policies for each tenant even though if that means authenticating against different OpenID Providers, such as Keycloak and Google."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:16
msgid "Please read the xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication] guide if you need to authorize a tenant using Bearer Token Authorization."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:18
msgid "If you need to authenticate and authorize a tenant using OpenID Connect Authorization Code Flow, read the xref:security-oidc-code-flow-authentication.adoc[OIDC code flow mechanism for protecting web applications] guide."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:20
msgid "Also see the xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties] reference guide."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:22
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:27
msgid "https://stedolan.github.io/jq/[jq tool]"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:28
#, no-wrap
msgid "Architecture"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:31
msgid "In this example, we build a very simple application which supports two resource methods:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:33
msgid "`/{tenant}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:35
msgid "This resource returns information obtained from the ID token issued by OpenID Provider about the authenticated user and the current tenant."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:37
msgid "`/{tenant}`/bearer"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:39
msgid "This resource returns information obtained from the Access token issued by OpenID Provider about the authenticated user and the current tenant."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:40
#, no-wrap
msgid "Solution"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:44
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:46
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:48
msgid "The solution is located in the `security-openid-connect-multi-tenancy-quickstart` link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:49
#, no-wrap
msgid "Creating the Maven Project"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:52
msgid "First, we need a new project. Create a new project with the following command:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:59
msgid "If you already have your Quarkus project configured, you can add the `oidc` extension to your project by running the following command in your project base directory:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:64
msgid "This will add the following to your build file:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:66
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:410
#, no-wrap
msgid "pom.xml"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:72
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:75
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:430
#, no-wrap
msgid "build.gradle"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:78
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-oidc\")\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:80
#, no-wrap
msgid "Writing the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:83
msgid "Let's start by implementing the `/{tenant}` endpoint. As you can see from the source code below it is just a regular Jakarta REST resource:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:87
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:157
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:244
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:280
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:463
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:545
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:800
#, no-wrap
msgid "package org.acme.quickstart.oidc;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:92
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:94
#, no-wrap
msgid "import org.eclipse.microprofile.jwt.JsonWebToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:96
#, no-wrap
msgid "import io.quarkus.oidc.IdToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:105
#, no-wrap
msgid ""
"@Path(\"/{tenant}\")\n"
"public class HomeResource {\n"
"    /**\n"
"     * Injection point for the ID Token issued by the OpenID Connect Provider\n"
"     */\n"
"    @Inject\n"
"    @IdToken\n"
"    JsonWebToken idToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:111
#, no-wrap
msgid ""
"    /**\n"
"     * Injection point for the Access Token issued by the OpenID Connect Provider\n"
"     */\n"
"    @Inject\n"
"    JsonWebToken accessToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:123
#, no-wrap
msgid ""
"    /**\n"
"     * Returns the ID Token info. This endpoint exists only for demonstration purposes, you should not\n"
"     * expose this token in a real application.\n"
"     *\n"
"     * @return ID Token info\n"
"     */\n"
"    @GET\n"
"    @Produces(\"text/html\")\n"
"    public String getIdTokenInfo() {\n"
"        StringBuilder response = new StringBuilder().append(\"<html>\")\n"
"                .append(\"<body>\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:126
#, no-wrap
msgid ""
"        response.append(\"<h2>Welcome, \").append(this.idToken.getClaim(\"email\").toString()).append(\"</h2>\\n\");\n"
"        response.append(\"<h3>You are accessing the application within tenant <b>\").append(idToken.getIssuer()).append(\" boundaries</b></h3>\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:129
#, no-wrap
msgid ""
"        return response.append(\"</body>\").append(\"</html>\").toString();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:142
#, no-wrap
msgid ""
"    /**\n"
"     * Returns the Access Token info. This endpoint exists only for demonstration purposes, you should not\n"
"     * expose this token in a real application.\n"
"     *\n"
"     * @return Access Token info\n"
"     */\n"
"    @GET\n"
"    @Produces(\"text/html\")\n"
"    @Path(\"bearer\")\n"
"    public String getAccessTokenInfo() {\n"
"        StringBuilder response = new StringBuilder().append(\"<html>\")\n"
"                .append(\"<body>\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:145
#, no-wrap
msgid ""
"        response.append(\"<h2>Welcome, \").append(this.accessToken.getClaim(\"email\").toString()).append(\"</h2>\\n\");\n"
"        response.append(\"<h3>You are accessing the application within tenant <b>\").append(accessToken.getIssuer()).append(\" boundaries</b></h3>\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:149
#, no-wrap
msgid ""
"        return response.append(\"</body>\").append(\"</html>\").toString();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:153
msgid "In order to resolve the tenant from incoming requests and map it to a specific `quarkus-oidc` tenant configuration in application.properties, you need to create an implementation for the `io.quarkus.oidc.TenantConfigResolver` interface which can be used to resolve the tenant configurations dynamically:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:159
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:246
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:282
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:804
#, no-wrap
msgid "import jakarta.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:161
#, no-wrap
msgid "import org.eclipse.microprofile.config.ConfigProvider;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:168
#, no-wrap
msgid ""
"import io.quarkus.oidc.OidcRequestContext;\n"
"import io.quarkus.oidc.OidcTenantConfig;\n"
"import io.quarkus.oidc.OidcTenantConfig.ApplicationType;\n"
"import io.quarkus.oidc.TenantConfigResolver;\n"
"import io.smallrye.mutiny.Uni;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:171
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomTenantResolver implements TenantConfigResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:175
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<OidcTenantConfig> resolve(RoutingContext context, OidcRequestContext<OidcTenantConfig> requestContext) {\n"
"        String path = context.request().path();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:178
#, no-wrap
msgid ""
"        if (path.startsWith(\"/tenant-a\")) {\n"
"           String keycloakUrl = ConfigProvider.getConfig().getValue(\"keycloak.url\", String.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:192
#, no-wrap
msgid ""
"            OidcTenantConfig config = new OidcTenantConfig();\n"
"            config.setTenantId(\"tenant-a\");\n"
"            config.setAuthServerUrl(keycloakUrl + \"/realms/tenant-a\");\n"
"            config.setClientId(\"multi-tenant-client\");\n"
"            config.getCredentials().setSecret(\"secret\");\n"
"            config.setApplicationType(ApplicationType.HYBRID);\n"
"            return Uni.createFrom().item(config);\n"
"        } else {\n"
"            // resolve to default tenant config\n"
"            return Uni.createFrom().nullItem();\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:195
msgid "From the implementation above, tenants are resolved from the request path so that in case no tenant could be inferred, `null` is returned to indicate that the default tenant configuration should be used."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:197
msgid "Note the `tenant-a` application type is `hybrid` - it can accept HTTP bearer tokens if provided, otherwise it will initiate an authorization code flow when the authentication is required."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:198
#, no-wrap
msgid "Configuring the application"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:206
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:228
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:448
#, no-wrap
msgid ""
"# Default Tenant Configuration\n"
"%prod.quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.client-id=multi-tenant-client\n"
"quarkus.oidc.application-type=web-app\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:208
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:450
#, no-wrap
msgid "# Tenant A Configuration is created dynamically in CustomTenantConfigResolver\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:212
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:237
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:454
#, no-wrap
msgid ""
"# HTTP Security Configuration\n"
"quarkus.http.auth.permission.authenticated.paths=/*\n"
"quarkus.http.auth.permission.authenticated.policy=authenticated\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:215
msgid "The first configuration is the default tenant configuration that should be used when the tenant can not be inferred from the request. Note that a `%prod` profile prefix is used with `quarkus.oidc.auth-server-url` - it is done to support testing a multi-tenant application with `Dev Services For Keycloak`. This configuration is using a Keycloak instance to authenticate users."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:217
msgid "The second configuration is provided by `TenantConfigResolver`, it is the configuration that will be used when an incoming request is mapped to the tenant `tenant-a`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:219
msgid "Note that both configurations map to the same Keycloak server instance while using distinct `realms`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:221
msgid "Alternatively you can configure the tenant `tenant-a` directly in `application.properties`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:233
#, no-wrap
msgid ""
"# Tenant A Configuration\n"
"quarkus.oidc.tenant-a.auth-server-url=http://localhost:8180/realms/tenant-a\n"
"quarkus.oidc.tenant-a.client-id=multi-tenant-client\n"
"quarkus.oidc.tenant-a.application-type=web-app\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:240
msgid "and use a custom `TenantConfigResolver` to resolve it:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:249
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:285
#, no-wrap
msgid ""
"import io.quarkus.oidc.TenantResolver;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:252
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:288
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:811
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomTenantResolver implements TenantResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:257
#, no-wrap
msgid ""
"    @Override\n"
"    public String resolve(RoutingContext context) {\n"
"        String path = context.request().path();\n"
"        String[] parts = path.split(\"/\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:262
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:743
#, no-wrap
msgid ""
"        if (parts.length == 0) {\n"
"            // resolve to default tenant configuration\n"
"            return null;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:266
#, no-wrap
msgid ""
"        return parts[1];\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:269
msgid "You can define multiple tenants in your configuration file, just make sure they have a unique alias so that you can map them properly when resolving a tenant from your `TenantResolver` implementation."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:271
msgid "However, using a static tenant resolution (configuring tenants in `application.properties` and resolving them with `TenantResolver`) prevents testing the endpoint with `Dev Services for Keycloak` since `Dev Services for Keycloak` has no knowledge of how the requests will be mapped to individual tenants and can not dynamically provide tenant-specific `quarkus.oidc.<tenant-id>.auth-server-url` values and therefore using `%prod` prefixes with the tenant-specific URLs in `application.properties` will not work in tests or devmode."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:276
msgid "When a current tenant represents an OIDC `web-app` application, the current `io.vertx.ext.web.RoutingContext` will contain a `tenant-id` attribute by the time the custom tenant resolver has been called for all the requests completing the code authentication flow and the already authenticated requests, when either a tenant specific state or session cookie already exists.  Therefore, when working with multiple OpenID Connect Providers, you only need a path specific check to resolve a tenant id if the `RoutingContext` does not have the `tenant-id` attribute set, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:298
#, no-wrap
msgid ""
"    @Override\n"
"    public String resolve(RoutingContext context) {\n"
"        String tenantId = context.get(\"tenant-id\");\n"
"        if (tenantId != null) {\n"
"            return tenantId;\n"
"        } else {\n"
"            // Initial login request\n"
"            String path = context.request().path();\n"
"            String[] parts = path.split(\"/\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:307
#, no-wrap
msgid ""
"            if (parts.length == 0) {\n"
"                // resolve to default tenant configuration\n"
"                return null;\n"
"            }\n"
"            return parts[1];\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:310
msgid "In fact, this is how Quarkus OIDC resolves static custom tenants itself if no custom `TenantResolver` is registered."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:312
msgid "A similar technique can be used with `TenantConfigResolver` where a `tenant-id` provided in the context can be used to return `OidcTenantConfig` already prepared with the previous request."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:319
msgid "If you also use xref:hibernate-orm.adoc#multitenancy[Hibernate ORM multitenancy] or xref:mongodb-panache.adoc#multitenancy[MongoDB with Panache multitenancy] and both tenant IDs are the same and must be extracted from the Vert.x `RoutingContext` you can pass the tenant id from the OIDC Tenant Resolver to the Hibernate ORM Tenant Resolver or MongoDB with Panache Mongo Database Resolver as a `RoutingContext` attribute, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:323
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:654
#, no-wrap
msgid "public class CustomTenantResolver implements TenantResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:331
#, no-wrap
msgid ""
"    @Override\n"
"    public String resolve(RoutingContext context) {\n"
"        String tenantId = extractTenantId(context);\n"
"        context.put(\"tenantId\", tenantId);\n"
"        return tenantId;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:334
#, no-wrap
msgid "Starting and Configuring the Keycloak Server"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:337
msgid "To start a Keycloak Server you can use Docker and just run the following command:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:341
#, no-wrap
msgid "docker run --name keycloak -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=admin -p 8180:8080 quay.io/keycloak/keycloak:{keycloak.version} start-dev\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:344
msgid "where `keycloak.version` should be set to `17.0.0` or higher."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:346
msgid "You should be able to access your Keycloak Server at http://localhost:8180[localhost:8180]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:348
msgid "Log in as the `admin` user to access the Keycloak Administration Console. Username should be `admin` and password `admin`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:350
msgid "Now, follow the steps below to import the realms for the two tenants:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:352
msgid "Import the link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/default-tenant-realm.json[default-tenant-realm.json] to create the default realm"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:353
msgid "Import the link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/tenant-a-realm.json[tenant-a-realm.json] to create the realm for the tenant `tenant-a`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:355
msgid "For more details, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:356
#, no-wrap
msgid "Running and Using the Application"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:358
#, no-wrap
msgid "Running in Developer Mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:361
msgid "To run the microservice in dev mode, use:"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:364
#, no-wrap
msgid "Running in JVM Mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:367
msgid "When you're done playing with dev mode, you can run it as a standard Java application."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:369
msgid "First compile it:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:373
msgid "Then run it:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:377
#, no-wrap
msgid "java -jar target/quarkus-app/quarkus-run.jar\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:379
#, no-wrap
msgid "Running in Native Mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:382
msgid "This same demo can be compiled into native code: no modifications required."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:386
msgid "This implies that you no longer need to install a JVM on your production environment, as the runtime technology is included in the produced binary, and optimized to run with minimal resource overhead."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:389
msgid "Compilation will take a bit longer, so this step is disabled by default; let's build again by enabling the native build:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:393
msgid "After getting a cup of coffee, you'll be able to run this binary directly:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:397
#, no-wrap
msgid "./target/security-openid-connect-multi-tenancy-quickstart-runner\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:399
#, no-wrap
msgid "Test the Application"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:401
#, no-wrap
msgid "Use Dev Services for Keycloak"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:405
msgid "Using xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] is recommended for the integration testing against Keycloak.  `Dev Services for Keycloak` will launch and initialize a test container: it will import configured realms and set a base Keycloak URL for `CustomTenantResolver` used in this quickstart to calculate a realm specific URL."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:408
msgid "First you need to add the following dependencies:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:427
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-keycloak-server</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.rest-assured</groupId>\n"
"    <artifactId>rest-assured</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>net.sourceforge.htmlunit</groupId>\n"
"    <artifactId>htmlunit</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:435
#, no-wrap
msgid ""
"testImplementation(\"io.quarkus:quarkus-test-keycloak-server\")\n"
"testImplementation(\"io.rest-assured:rest-assured\")\n"
"testImplementation(\"net.sourceforge.htmlunit:htmlunit\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:439
msgid "`quarkus-test-keycloak-server` provides a utility class `io.quarkus.test.keycloak.client.KeycloakTestClient` for acquiring the realm specific access tokens and which you can use with `RestAssured` for testing the `/{tenant}/bearer` endpoint expecting bearer access tokens.  `HtmlUnit` is used for testing the `/{tenant}` endpoint and the authorization code flow."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:441
msgid "Next, configure the required realms:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:456
#, no-wrap
msgid "quarkus.keycloak.devservices.realm-path=default-tenant-realm.json,tenant-a-realm.json\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:459
msgid "Finally, write your test which will be executed in JVM mode:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:467
#, no-wrap
msgid ""
"import static org.hamcrest.Matchers.containsString;\n"
"import static org.junit.jupiter.api.Assertions.assertEquals;\n"
"import static org.junit.jupiter.api.Assertions.assertTrue;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:469
#, no-wrap
msgid "import java.io.IOException;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:471
#, no-wrap
msgid "import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:476
#, no-wrap
msgid ""
"import com.gargoylesoftware.htmlunit.SilentCssErrorHandler;\n"
"import com.gargoylesoftware.htmlunit.WebClient;\n"
"import com.gargoylesoftware.htmlunit.html.HtmlForm;\n"
"import com.gargoylesoftware.htmlunit.html.HtmlPage;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:480
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.keycloak.client.KeycloakTestClient;\n"
"import io.restassured.RestAssured;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:483
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class CodeFlowTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:485
#, no-wrap
msgid "    KeycloakTestClient keycloakClient = new KeycloakTestClient();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:490
#, no-wrap
msgid ""
"    @Test\n"
"    public void testLogInDefaultTenant() throws IOException {\n"
"        try (final WebClient webClient = createWebClient()) {\n"
"            HtmlPage page = webClient.getPage(\"http://localhost:8081/default\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:492
#, no-wrap
msgid "            assertEquals(\"Sign in to quarkus\", page.getTitleText());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:494
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:512
#, no-wrap
msgid "            HtmlForm loginForm = page.getForms().get(0);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:497
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:515
#, no-wrap
msgid ""
"            loginForm.getInputByName(\"username\").setValueAttribute(\"alice\");\n"
"            loginForm.getInputByName(\"password\").setValueAttribute(\"alice\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:499
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:517
#, no-wrap
msgid "            page = loginForm.getInputByName(\"login\").click();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:503
#, no-wrap
msgid ""
"            assertTrue(page.asText().contains(\"tenant\"));\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:508
#, no-wrap
msgid ""
"    @Test\n"
"    public void testLogInTenantAWebApp() throws IOException {\n"
"        try (final WebClient webClient = createWebClient()) {\n"
"            HtmlPage page = webClient.getPage(\"http://localhost:8081/tenant-a\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:510
#, no-wrap
msgid "            assertEquals(\"Sign in to tenant-a\", page.getTitleText());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:521
#, no-wrap
msgid ""
"            assertTrue(page.asText().contains(\"alice@tenant-a.org\"));\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:527
#, no-wrap
msgid ""
"    @Test\n"
"    public void testLogInTenantABearerToken() throws IOException {\n"
"        RestAssured.given().auth().oauth2(getAccessToken()).when()\n"
"            .get(\"/tenant-a/bearer\").then().body(containsString(\"alice@tenant-a.org\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:531
#, no-wrap
msgid ""
"    private String getAccessToken() {\n"
"        return keycloakClient.getRealmAccessToken(\"tenant-a\", \"alice\", \"alice\", \"multi-tenant-client\", \"secret\");\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:538
#, no-wrap
msgid ""
"    private WebClient createWebClient() {\n"
"        WebClient webClient = new WebClient();\n"
"        webClient.setCssErrorHandler(new SilentCssErrorHandler());\n"
"        return webClient;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:541
msgid "and in native mode:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:547
#, no-wrap
msgid "import io.quarkus.test.junit.QuarkusIntegrationTest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:551
#, no-wrap
msgid ""
"@QuarkusIntegrationTest\n"
"public class CodeFlowIT extends CodeFlowTest {\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:554
msgid "Please see xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] for more information about the way it is initialized and configured."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:555
#, no-wrap
msgid "Use Browser"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:558
msgid "To test the application, you should open your browser and access the following URL:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:560
msgid "http://localhost:8080/default[http://localhost:8080/default]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:563
msgid "If everything is working as expected, you should be redirected to the Keycloak server to authenticate. Note that the requested path defines a `default` tenant which we don't have mapped in the configuration file. In this case, the default configuration will be used."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:565
msgid "In order to authenticate to the application you should type the following credentials when at the Keycloak login page:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:567
msgid "Username: *alice*"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:568
msgid "Password: *alice*"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:570
msgid "After clicking the `Login` button you should be redirected back to the application."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:572
msgid "If you try now to access the application at the following URL:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:574
msgid "http://localhost:8080/tenant-a[http://localhost:8080/tenant-a]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:576
msgid "You should be redirected again to the login page at Keycloak. However, now you are going to authenticate using a different `realm`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:579
msgid "In both cases, if the user is successfully authenticated, the landing page will show the user's name and e-mail. Even though user `alice` exists in both tenants, for the application they are distinct users belonging to different realms/tenants."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:581
#, no-wrap
msgid "Static tenant configuration resolution"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:585
msgid "When you set multiple tenant configurations in the `application.properties` file, you only need to specify how the tenant identifier gets resolved.  To configure the resolution of the tenant identifier, use one of the following options:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:587
msgid "xref:default-tenant-resolver[Default resolution]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:588
msgid "xref:tenant-resolver[Resolve with `TenantResolver`]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:589
msgid "xref:annotations-tenant-resolver[Resolve with annotations]"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:591
#, no-wrap
msgid "Default resolution"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:594
msgid "The default resolution for a tenant identifier is convention based, whereby the authentication request must include the tenant identifier in the last segment of the request path."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:596
msgid "The following `application.properties` example shows how you can configure two tenants named `google` and `github`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:604
#, no-wrap
msgid ""
"# Tenant 'google' configuration\n"
"quarkus.oidc.google.provider=google\n"
"quarkus.oidc.google.client-id=${google-client-id}\n"
"quarkus.oidc.google.credentials.secret=${google-client-secret}\n"
"quarkus.oidc.google.authentication.redirect-path=/signed-in\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:610
#, no-wrap
msgid ""
"# Tenant 'github' configuration\n"
"quarkus.oidc.github.provider=google\n"
"quarkus.oidc.github.client-id=${github-client-id}\n"
"quarkus.oidc.github.credentials.secret=${github-client-secret}\n"
"quarkus.oidc.github.authentication.redirect-path=/signed-in\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:614
msgid "In this example, both tenants configure OIDC `web-app` applications to use an authorization code flow to authenticate users and also require session cookies to get generated after the authentication has taken place.  After either Google or GitHub authenticates the current user, the user gets returned to the `/signed-in` area for authenticated users, for example, a secured resource path on the JAX-RS endpoint."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:616
msgid "Finally, to complete the default tenant resolution, set the following configuration property:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:621
#, no-wrap
msgid ""
"quarkus.http.auth.permission.login.paths=/google,/github\n"
"quarkus.http.auth.permission.login.policy=authenticated\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:626
msgid "If the endpoint is running on `http://localhost:8080`, you can also provide UI options for users to log in to either `http://localhost:8080/google` or `http://localhost:8080/github`, without having to add specific`/google` or `/github` JAX-RS resource paths.  Tenant identifiers are also recorded in the session cookie names after the authentication is completed.  Therefore, authenticated users can access the secured application area without requiring either the `google` or `github` path values to be included in the secured URL."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:628
msgid "Default resolution can also work for Bearer token authentication but it might be less practical in this case because a tenant identifier will always need to be set as the last path segment value."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:630
#, no-wrap
msgid "Resolve with `TenantResolver`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:633
msgid "The following `application.properties` example shows how you can resolve the tenant identifier of two tenants named `a` and `b` by using the `TenantResolver` method:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:640
#, no-wrap
msgid ""
"# Tenant 'a' configuration\n"
"quarkus.oidc.a.auth-server-url=http://localhost:8180/realms/quarkus-a\n"
"quarkus.oidc.a.client-id=client-a\n"
"quarkus.oidc.a.credentials.secret=client-a-secret\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:645
#, no-wrap
msgid ""
"# Tenant 'b' configuration\n"
"quarkus.oidc.b.auth-server-url=http://localhost:8180/realms/quarkus-b\n"
"quarkus.oidc.b.client-id=client-b\n"
"quarkus.oidc.b.credentials.secret=client-b-secret\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:648
msgid "You can return the tenant ID of either `a` or `b` from `quarkus.oidc.TenantResolver`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:652
#, no-wrap
msgid "import quarkus.oidc.TenantResolver;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:668
#, no-wrap
msgid ""
"    @Override\n"
"    public String resolve(RoutingContext context) {\n"
"        String path = context.request().path();\n"
"        if (path.endsWith(\"a\")) {\n"
"            return \"a\";\n"
"        } else if (path.endsWith(\"b\")) {\n"
"            return \"b\";\n"
"        } else {\n"
"            // default tenant\n"
"            return null;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:671
msgid "In this example, the value of the last request path segment is a tenant ID, but if required, you can implement a more complex tenant identifier resolution logic."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:673
#, no-wrap
msgid "Resolve with annotations"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:676
msgid "You can use the `io.quarkus.oidc.Tenant` annotation for resolving the tenant identifiers as an alternative to using `io.quarkus.oidc.TenantResolver`."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:680
msgid "Proactive HTTP authentication must be disabled (`quarkus.http.auth.proactive=false`) for this to work. For more information, see xref:security-proactive-authentication.adoc[Proactive authentication]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:685
msgid "Assuming your application supports two OIDC tenants (`hr`, and default), all resource methods and classes carrying `@Tenant(\"hr\")` will be authenticated using the OIDC provider configured by `quarkus.oidc.hr.auth-server-url`, while all other classes and methods will still be authenticated using the default OIDC provider."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:692
#, no-wrap
msgid ""
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:695
#, no-wrap
msgid ""
"import io.quarkus.oidc.Tenant;\n"
"import io.quarkus.security.Authenticated;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:699
#, no-wrap
msgid ""
"@Authenticated\n"
"@Path(\"/api/hello\")\n"
"public class HelloResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:707
#, no-wrap
msgid ""
"    @Tenant(\"hr\") <1>\n"
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String sayHello() {\n"
"        return \"Hello!\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:709
msgid "The `io.quarkus.oidc.Tenant` annotation must be placed either on resource class or resource method."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:711
#, no-wrap
msgid "Dynamic tenant configuration resolution"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:715
msgid "If you need a more dynamic configuration for the different tenants you want to support and don't want to end up with multiple entries in your configuration file, you can use the `io.quarkus.oidc.TenantConfigResolver`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:717
msgid "This interface allows you to dynamically create tenant configurations at runtime:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:721
#, no-wrap
msgid "package io.quarkus.it.keycloak;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:724
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import java.util.function.Supplier;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:730
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import io.quarkus.oidc.OidcRequestContext;\n"
"import io.quarkus.oidc.OidcTenantConfig;\n"
"import io.quarkus.oidc.TenantConfigResolver;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:733
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomTenantConfigResolver implements TenantConfigResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:738
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<OidcTenantConfig> resolve(RoutingContext context, OidcRequestContext<OidcTenantConfig> requestContext) {\n"
"        String path = context.request().path();\n"
"        String[] parts = path.split(\"/\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:749
#, no-wrap
msgid ""
"        if (\"tenant-c\".equals(parts[1])) {\n"
"            // Do 'return requestContext.runBlocking(createTenantConfig());'\n"
"            // if a blocking call is required to create a tenant config\n"
"            return Uni.createFromItem(createTenantConfig());\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:753
#, no-wrap
msgid ""
"        // resolve to default tenant configuration\n"
"        return null;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:756
#, no-wrap
msgid ""
"    private Supplier<OidcTenantConfig> createTenantConfig() {\n"
"        final OidcTenantConfig config = new OidcTenantConfig();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:761
#, no-wrap
msgid ""
"        config.setTenantId(\"tenant-c\");\n"
"        config.setAuthServerUrl(\"http://localhost:8180/realms/tenant-c\");\n"
"        config.setClientId(\"multi-tenant-client\");\n"
"        OidcTenantConfig.Credentials credentials = new OidcTenantConfig.Credentials();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:763
#, no-wrap
msgid "        credentials.setSecret(\"my-secret\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:765
#, no-wrap
msgid "        config.setCredentials(credentials);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:767
#, no-wrap
msgid "        // any other setting support by the quarkus-oidc extension\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:771
#, no-wrap
msgid ""
"        return () -> config;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:774
msgid "The `OidcTenantConfig` returned from this method is the same used to parse the `oidc` namespace configuration from the `application.properties`. You can populate it using any of the settings supported by the `quarkus-oidc` extension."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:775
#, no-wrap
msgid "Tenant resolution for OIDC `web-app` applications"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:778
msgid "The simplest option for resolving OIDC `web-app` application configuration is to follow the steps described in the xref:default-tenant-resolver[Default resolution] section."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:780
msgid "Try one of the options suggested below if the default resolution strategy does not work for your application setup."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:782
msgid "Several options are available for selecting the tenant configuration which should be used to secure the current HTTP request for both `service` and `web-app` OIDC applications, such as:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:784
msgid "Check URL paths, for example, a `tenant-service` configuration has to be used for the \"/service\" paths, while a `tenant-manage` configuration - for the \"/management\" paths"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:785
msgid "Check HTTP headers, for example, with a URL path always being '/service', a header such as \"Realm: service\" or \"Realm: management\" can help to select between the `tenant-service` and `tenant-manage` configurations"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:786
msgid "Check URL query parameters - it can work similarly to the way the headers are used to select the tenant configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:788
msgid "All these options can be easily implemented with the custom `TenantResolver` and `TenantConfigResolver` implementations for the OIDC `service` applications."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:790
msgid "However, due to an HTTP redirect required to complete the code authentication flow for the OIDC `web-app` applications, a custom HTTP cookie may be needed to select the same tenant configuration before and after this redirect request because:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:792
msgid "URL path may not be the same after the redirect request if a single redirect URL has been registered in the OIDC Provider - the original request path can be restored but after the tenant configuration is resolved"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:793
msgid "HTTP headers used during the original request are not available after the redirect"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:794
msgid "Custom URL query parameters are restored after the redirect but after the tenant configuration is resolved"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:796
msgid "One option to ensure the information for resolving the tenant configurations for `web-app` applications is available before and after the redirect is to use a cookie, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:802
#, no-wrap
msgid "import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:808
#, no-wrap
msgid ""
"import io.quarkus.oidc.TenantResolver;\n"
"import io.vertx.core.http.Cookie;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:822
#, no-wrap
msgid ""
"    @Override\n"
"    public String resolve(RoutingContext context) {\n"
"        List<String> tenantIdQuery = context.queryParam(\"tenantId\");\n"
"        if (!tenantIdQuery.isEmpty()) {\n"
"            String tenantId = tenantIdQuery.get(0);\n"
"            context.addCookie(Cookie.cookie(\"tenant\", tenantId));\n"
"            return tenantId;\n"
"        } else if (context.cookieMap().containsKey(\"tenant\")) {\n"
"            return context.getCookie(\"tenant\").getValue();\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:826
#, no-wrap
msgid ""
"        return null;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:829
#, no-wrap
msgid "Disabling Tenant Configurations"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:832
msgid "Custom `TenantResolver` and `TenantConfigResolver` implementations may return `null` if no tenant can be inferred from the current request and a fallback to the default tenant configuration is required."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:834
msgid "If you expect that the custom resolvers will always infer a tenant then you do not need to configure the default tenant resolution."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:836
msgid "To disable the default tenant configuration, set `quarkus.oidc.tenant-enabled=false`."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:840
msgid "The default tenant configuration is automatically disabled when `quarkus.oidc.auth-server-url` is not configured but either custom tenant configurations are available or `TenantConfigResolver` is registered."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:843
msgid "Note that tenant specific configurations can also be disabled, for example: `quarkus.oidc.tenant-a.tenant-enabled=false`."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:844
#, no-wrap
msgid "References"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:847
msgid "xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:848
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:849
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:850
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:851
msgid "https://developers.google.com/identity/protocols/OpenIDConnect[Google OpenID Connect]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/security-openid-connect-multitenancy.adoc:851
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr ""
