# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-10-15 08:05+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/main/guides/picocli.adoc
#, fuzzy, no-wrap
msgid "Command Mode with Picocli"
msgstr "Modo de comando com Picocli"

#. type: Plain text
#: _versions/main/guides/picocli.adoc
#, fuzzy
msgid "https://picocli.info/[Picocli] is an open source tool for creating rich command line applications."
msgstr "link:https://picocli.info/[O Picocli] é uma ferramenta de código aberto para a criação de aplicativos avançados de linha de comando."

#. type: Plain text
#: _versions/main/guides/picocli.adoc
#, fuzzy
msgid "Quarkus provides support for using Picocli. This guide contains examples of `picocli` extension usage."
msgstr "O Quarkus oferece suporte para o uso do Picocli. Este guia contém exemplos de uso da extensão `picocli` ."

#. type: Plain text
#: _versions/main/guides/picocli.adoc
#, fuzzy
msgid "If you are not familiar with the Quarkus Command Mode, consider reading the xref:command-mode-reference.adoc[Command Mode reference guide] first."
msgstr "Se o senhor não estiver familiarizado com o Modo de Comando do Quarkus, considere ler primeiro o xref:command-mode-reference.adoc[guia de referência do Modo de Comando] ."

#. type: Title ==
#: _versions/main/guides/picocli.adoc
#, fuzzy, no-wrap
msgid "Extension"
msgstr "Extensão"

#: _versions/main/guides/picocli.adoc
#, fuzzy
msgid ""
"Once you have your Quarkus project configured you can add the `picocli` extension\n"
"to your project by running the following command in your project base directory."
msgstr "Depois de configurar o projeto Quarkus, o senhor pode adicionar a extensão `picocli` ao seu projeto executando o seguinte comando no diretório base do projeto."

#. type: Plain text
#: _versions/main/guides/picocli.adoc
msgid "This will add the following to your build file:"
msgstr "Isto irá adicionar o seguinte trecho no seu arquivo de build:"

#. type: Block title
#: _versions/main/guides/picocli.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _versions/main/guides/picocli.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/main/guides/picocli.adoc
msgid "Building a command line application"
msgstr ""

#: _versions/main/guides/picocli.adoc
msgid "Simple application"
msgstr ""

#: _versions/main/guides/picocli.adoc
msgid "A simple Picocli application with only one `Command` can be created as follows:"
msgstr ""

#: _versions/main/guides/picocli.adoc
msgid "If there is only one class annotated with `picocli.CommandLine.Command`, it will be used automatically as the entry point of the command line application."
msgstr ""

#. type: Plain text
#: _versions/main/guides/picocli.adoc
#, fuzzy
msgid "All classes annotated with `picocli.CommandLine.Command` are registered as CDI beans."
msgstr "Todas as classes anotadas com `picocli.CommandLine.Command` são registradas como beans CDI."

#: _versions/main/guides/picocli.adoc
msgid ""
"Beans annotated with `@CommandLine.Command` should not use proxied scopes (e.g. do not use `@ApplicationScoped`)\n"
"because Picocli will not be able to set field values in such beans.\n"
"By default, this Picocli extension registers classes annotated with `@CommandLine.Command`\n"
"with the `@Dependent` scope. If you need to use a proxied scope, then annotate the setters and not the fields, for example:"
msgstr ""

#. type: Title ==
#: _versions/main/guides/picocli.adoc
#, fuzzy, no-wrap
msgid "Command line application with multiple Commands"
msgstr "Aplicativo de linha de comando com vários comandos"

#: _versions/main/guides/picocli.adoc
#, fuzzy
msgid ""
"When multiple classes have the `picocli.CommandLine.Command` annotation, then one of them needs to be also annotated with `io.quarkus.picocli.runtime.annotations.TopCommand`.\n"
"This can be overwritten with the `quarkus.picocli.top-command` property."
msgstr "Quando várias classes têm a anotação `picocli.CommandLine.Command` , uma delas também precisa ser anotada com `io.quarkus.picocli.runtime.annotations.TopCommand` . Isso pode ser substituído pela propriedade `quarkus.picocli.top-command` ."

#. type: Title ==
#: _versions/main/guides/picocli.adoc
#, fuzzy, no-wrap
msgid "Customizing Picocli CommandLine instance"
msgstr "Personalização da instância da linha de comando do Picocli"

#. type: Plain text
#: _versions/main/guides/picocli.adoc
#, fuzzy
msgid "You can customize CommandLine classes used by the `picocli` extension by producing your own bean instance:"
msgstr "O senhor pode personalizar as classes CommandLine usadas pela extensão `picocli` produzindo sua própria instância de bean:"

#. type: Plain text
#: _versions/main/guides/picocli.adoc
#, fuzzy
msgid "`PicocliCommandLineFactory` will create an instance of CommandLine with `TopCommand` and `CommandLine.IFactory` injected."
msgstr "`PicocliCommandLineFactory` criará uma instância de CommandLine com `TopCommand` e `CommandLine.IFactory` injetados."

#. type: Title ==
#: _versions/main/guides/picocli.adoc
#, fuzzy, no-wrap
msgid "Different entry command for each profile"
msgstr "Comando de entrada diferente para cada perfil"

#. type: Plain text
#: _versions/main/guides/picocli.adoc
#, fuzzy
msgid "It is possible to create different entry command for each profile, using `@IfBuildProfile`:"
msgstr "É possível criar um comando de entrada diferente para cada perfil, usando `@IfBuildProfile` :"

#. type: Plain text
#: _versions/main/guides/picocli.adoc
#, fuzzy
msgid "You can return instance of `java.lang.Class` here. In such case `CommandLine` will try to instantiate this class using `CommandLine.IFactory`."
msgstr "O senhor pode retornar a instância de `java.lang.Class` aqui. Nesse caso, `CommandLine` tentará instanciar essa classe usando `CommandLine.IFactory` ."

#. type: Title ==
#: _versions/main/guides/picocli.adoc
#, fuzzy, no-wrap
msgid "Configure CDI Beans with parsed arguments"
msgstr "Configurar os beans CDI com argumentos analisados"

#: _versions/main/guides/picocli.adoc
#, fuzzy
msgid ""
"You can use `Event<CommandLine.ParseResult>` or just `CommandLine.ParseResult` to configure CDI beans based on arguments parsed by Picocli.\n"
"This event will be generated in `QuarkusApplication` class created by this extension. If you are providing your own `@QuarkusMain` this event will not be raised.\n"
"`CommandLine.ParseResult` is created from default `CommandLine` bean."
msgstr "O senhor pode usar `Event<CommandLine.ParseResult>` ou apenas `CommandLine.ParseResult` para configurar beans CDI com base nos argumentos analisados pelo Picocli. Esse evento será gerado na classe `QuarkusApplication` criada por essa extensão. Se o senhor estiver fornecendo seu próprio `@QuarkusMain` , esse evento não será gerado. `CommandLine.ParseResult` é criado a partir do bean `CommandLine` padrão."

#. type: Plain text
#: _versions/main/guides/picocli.adoc
#, fuzzy
msgid "`@ApplicationScoped` used for lazy initialization"
msgstr "`@ApplicationScoped` usado para inicialização preguiçosa"

#: _versions/main/guides/picocli.adoc
msgid "Providing your own QuarkusMain"
msgstr ""

#. type: Plain text
#: _versions/main/guides/picocli.adoc
#, fuzzy
msgid "You can also provide your own application entry point annotated with `QuarkusMain` (as described in xref:command-mode-reference.adoc[Command Mode reference guide])."
msgstr "O senhor também pode fornecer seu próprio ponto de entrada de aplicativo anotado com `QuarkusMain` (conforme descrito no xref:command-mode-reference.adoc[guia de referência do Modo de Comando] )."

#. type: Plain text
#: _versions/main/guides/picocli.adoc
#, fuzzy
msgid "Quarkus-compatible `CommandLine.IFactory` bean created by `picocli` extension."
msgstr "Compatível com o Quarkus `CommandLine.IFactory` bean criado pela extensão `picocli` ."

#. type: Title ==
#: _versions/main/guides/picocli.adoc
#, no-wrap
msgid "Development Mode"
msgstr "Modo de desenvolvimento"

#: _versions/main/guides/picocli.adoc
#, fuzzy
msgid ""
"In the development mode, i.e. when running `mvn quarkus:dev`, the application is executed and restarted every time the `Space bar` key is pressed. You can also pass arguments to your command line app via the `quarkus.args` system property, e.g. `mvn quarkus:dev -Dquarkus.args='--help'` and `mvn quarkus:dev -Dquarkus.args='-c -w --val 1'`.\n"
"For Gradle projects, arguments can be passed using `--quarkus-args`."
msgstr "No modo de desenvolvimento, ou seja, ao executar `mvn quarkus:dev` , o aplicativo é executado e reiniciado sempre que a tecla `Space bar` é pressionada. O senhor também pode passar argumentos para o seu aplicativo de linha de comando por meio da propriedade do sistema `quarkus.args` , por exemplo, `mvn quarkus:dev -Dquarkus.args='--help'` e `mvn quarkus:dev -Dquarkus.args='-c -w --val 1'` . Para projetos Gradle, os argumentos podem ser passados usando `--quarkus-args` ."

#: _versions/main/guides/picocli.adoc
#, fuzzy
msgid "If you're creating a typical Quarkus application (e.g., HTTP-based services) that includes command-line functionality, you'll need to handle the application's lifecycle differently. In the `Runnable.run()` method of your command, make sure to use `Quarkus.waitForExit()` or `Quarkus.asyncExit()`. This will prevent the application from shutting down prematurely and ensure a proper shutdown process."
msgstr "Se estiver criando um aplicativo Quarkus típico (por exemplo, serviços baseados em HTTP) que inclua a funcionalidade de linha de comando, será necessário lidar com o ciclo de vida do aplicativo de forma diferente. No método `Runnable.run()` do seu comando, certifique-se de usar `Quarkus.waitForExit()` ou `Quarkus.asyncExit()` . Isso evitará que o aplicativo seja encerrado prematuramente e garantirá um processo de encerramento adequado."

#: _versions/main/guides/picocli.adoc
msgid "Packaging your application"
msgstr ""

#: _versions/main/guides/picocli.adoc
msgid "A Picocli command line application can be packaged in multiple formats (e.g. a JAR, a native executable) and can be published to various repositories (e.g. Homebrew, Chocolatey, SDKMAN!)."
msgstr ""

#: _versions/main/guides/picocli.adoc
msgid "As a jar"
msgstr ""

#: _versions/main/guides/picocli.adoc
msgid "A Picocli command line application is a standard Quarkus application and as such can be published as a JAR in various packaging formats (e.g. fast-jar, uber-jar)."
msgstr ""

#: _versions/main/guides/picocli.adoc
msgid "In the context of a command line application, building an uber-jar is more practical if you plan on publishing the JAR as is."
msgstr ""

#: _versions/main/guides/picocli.adoc
msgid "For more information about how to build an uber-jar, see our documentation:"
msgstr ""

#: _versions/main/guides/picocli.adoc
msgid "For https://quarkus.io/guides/maven-tooling#uber-jar-maven[Maven]"
msgstr ""

#: _versions/main/guides/picocli.adoc
msgid "For https://quarkus.io/guides/gradle-tooling#building-uber-jars[Gradle]"
msgstr ""

#: _versions/main/guides/picocli.adoc
msgid "You can then execute the application by using the standard `java -jar your-application.jar` command."
msgstr ""

#: _versions/main/guides/picocli.adoc
msgid "Using plugins such as the https://github.com/brianm/really-executable-jars-maven-plugin[really-executable-jar-maven-plugin] can be handy to simplify the execution of your command line application."
msgstr ""

#: _versions/main/guides/picocli.adoc
msgid "As a native executable"
msgstr ""

#: _versions/main/guides/picocli.adoc
msgid "You can also build a https://quarkus.io/guides/building-native-image[native executable] but keep in mind that native executables are not portable and that you need one binary per supported platform."
msgstr ""

#: _versions/main/guides/picocli.adoc
msgid "Publishing the application"
msgstr ""

#: _versions/main/guides/picocli.adoc
msgid ""
"Publishing your command line application to a repository makes it a lot easier to consume.\n"
"Various application repositories are available depending on your requirements such as https://sdkman.io/[SDKMAN!], https://brew.sh/[Homebrew] for macOS, or https://chocolatey.org/[Chocolatey] for Windows."
msgstr ""

#: _versions/main/guides/picocli.adoc
msgid "To publish to these repositories, we recommend the usage of https://jreleaser.org/[JReleaser]."
msgstr ""

#: _versions/main/guides/picocli.adoc
msgid "JReleaser adds executable wrappers around your JAR for your application to be easily executable."
msgstr ""

#: _versions/main/guides/picocli.adoc
#, fuzzy
msgid "More information"
msgstr "Mais informações"

#: _versions/main/guides/picocli.adoc
msgid "You can also consult the https://picocli.info/#_packaging_your_application[Picocli official documentation] for more general information about how to package Picocli applications."
msgstr ""

#. type: Title ==
#: _versions/main/guides/picocli.adoc
#, fuzzy, no-wrap
msgid "Kubernetes support"
msgstr "Suporte ao Kubernetes"

#. type: Plain text
#: _versions/main/guides/picocli.adoc
#, fuzzy
msgid "Once you have your command line application, you can also generate the resources necessary to install and use this application in Kubernetes by adding the `kubernetes` extension. To install the `kubernetes` extension, run the following command in your project base directory."
msgstr "Depois de ter seu aplicativo de linha de comando, o senhor também pode gerar os recursos necessários para instalar e usar esse aplicativo no Kubernetes adicionando a extensão `kubernetes` . Para instalar a extensão `kubernetes` , execute o seguinte comando no diretório base do seu projeto."

#. type: Plain text
#: _versions/main/guides/picocli.adoc
msgid "This will add the following to your `pom.xml`:"
msgstr "Isso adicionará o seguinte ao seu arquivo  `pom.xml`:"

#. type: Plain text
#: _versions/main/guides/picocli.adoc
#, fuzzy
msgid "And, next, build the application with:"
msgstr "E, em seguida, crie o aplicativo com:"

#. type: Plain text
#: _versions/main/guides/picocli.adoc
#, fuzzy
msgid "The Kubernetes extension will detect the presence of the Picocli extension and hence generate a https://kubernetes.io/docs/concepts/workloads/controllers/job/[Job] resource instead of a https://kubernetes.io/docs/concepts/workloads/controllers/deployment/[Deployment] resource in the `target/kubernetes/` directory."
msgstr "A extensão Kubernetes detectará a presença da extensão Picocli e, portanto, gerará um recurso link:https://kubernetes.io/docs/concepts/workloads/controllers/job/[Job] em vez de um recurso link:https://kubernetes.io/docs/concepts/workloads/controllers/deployment/[Deployment] no diretório `target/kubernetes/` ."

#. type: Plain text
#: _versions/main/guides/picocli.adoc
#, fuzzy
msgid "If you don't want to generate a Job resource, you can specify the resource you want to generate using the property `quarkus.kubernetes.deployment-kind`. For example, if you want to generate a Deployment resource, use `quarkus.kubernetes.deployment-kind=Deployment`."
msgstr "Se não quiser gerar um recurso de trabalho, o senhor pode especificar o recurso que deseja gerar usando a propriedade `quarkus.kubernetes.deployment-kind` . Por exemplo, se o senhor quiser gerar um recurso Deployment, use `quarkus.kubernetes.deployment-kind=Deployment` ."

#. type: Plain text
#: _versions/main/guides/picocli.adoc
#, fuzzy
msgid "Moreover, you can provide the arguments that will be used by the Kubernetes job via the property `quarkus.kubernetes.arguments`. For example, after adding the property `quarkus.kubernetes.arguments=A,B` and building your project, the following Job resource will be generated:"
msgstr "Além disso, o senhor pode fornecer os argumentos que serão usados pelo trabalho do Kubernetes por meio da propriedade `quarkus.kubernetes.arguments` . Por exemplo, depois de adicionar a propriedade `quarkus.kubernetes.arguments=A,B` e construir seu projeto, o seguinte recurso de trabalho será gerado:"

#. type: Plain text
#: _versions/main/guides/picocli.adoc
#, fuzzy
msgid "Finally, the Kubernetes job will be launched every time it is installed in Kubernetes. You can know more about how to run Kubernetes jobs in this https://kubernetes.io/docs/concepts/workloads/controllers/job/#running-an-example-job[document]."
msgstr "Por fim, o trabalho do Kubernetes será iniciado toda vez que for instalado no Kubernetes. O senhor pode saber mais sobre como executar trabalhos do Kubernetes neste link:https://kubernetes.io/docs/concepts/workloads/controllers/job/#running-an-example-job[documento] ."

#. type: Title ==
#: _versions/main/guides/picocli.adoc
#, no-wrap
msgid "Configuration Reference"
msgstr "Referência de configuração"

#: _versions/main/guides/picocli.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Propriedade de Configuração Fixa no Momento da Compilação - Todas as outras propriedades de configuração podem ser sobrepostas em tempo de execução. <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
