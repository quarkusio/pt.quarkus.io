# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:12+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/mongodb-panache.adoc:6
#, no-wrap
msgid "Simplified MongoDB with Panache"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:14
msgid "MongoDB is a well known NoSQL Database that is widely used, but using its raw API can be cumbersome as you need to express your entities and your queries as a MongoDB link:{mongodb-doc-root-url}/fundamentals/data-formats/documents/#document[`Document`]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:16
msgid "MongoDB with Panache provides active record style entities (and repositories) like you have in xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache] and focuses on making your entities trivial and fun to write in Quarkus."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:18
msgid "It is built on top of the xref:mongodb.adoc[MongoDB Client] extension."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb-panache.adoc:19
#, no-wrap
msgid "First: an example"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:22
msgid "Panache allows you to write your MongoDB entities like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:29
#: upstream/_versions/main/guides/mongodb-panache.adoc:288
#, no-wrap
msgid ""
"public class Person extends PanacheMongoEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:33
#: upstream/_versions/main/guides/mongodb-panache.adoc:292
#, no-wrap
msgid ""
"    public static Person findByName(String name){\n"
"        return find(\"name\", name).firstResult();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:37
#: upstream/_versions/main/guides/mongodb-panache.adoc:296
#, no-wrap
msgid ""
"    public static List<Person> findAlive(){\n"
"        return list(\"status\", Status.Alive);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:42
#: upstream/_versions/main/guides/mongodb-panache.adoc:301
#, no-wrap
msgid ""
"    public static void deleteLoics(){\n"
"        delete(\"name\", \"Lo√Øc\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:46
msgid "You have noticed how much more compact and readable the code is compared to using the MongoDB API? Does this look interesting? Read on!"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:50
msgid "the `list()` method might be surprising at first. It takes fragments of PanacheQL queries (subset of JPQL) and contextualizes the rest.  That makes for very concise but yet readable code.  MongoDB native queries are also supported."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:53
msgid "what was described above is essentially the link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[active record pattern], sometimes just called the entity pattern.  MongoDB with Panache also allows for the use of the more classical link:https://martinfowler.com/eaaCatalog/repository.html[repository pattern] via `PanacheMongoRepository`."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb-panache.adoc:54
#, no-wrap
msgid "Solution"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:58
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:60
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:62
msgid "The solution is located in the `mongodb-panache-quickstart` link:{quickstarts-tree-url}/mongodb-panache-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb-panache.adoc:63
#, no-wrap
msgid "Creating the Maven project"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:66
msgid "First, we need a new project. Create a new project with the following command:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:73
msgid "This command generates a Maven structure importing the RESTEasy Reactive Jackson and MongoDB with Panache extensions.  After this, the `quarkus-mongodb-panache` extension has been added to your build file."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:75
msgid "If you don't want to generate a new project, add the dependency in your build file:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/mongodb-panache.adoc:77
#: upstream/_versions/main/guides/mongodb-panache.adoc:96
#: upstream/_versions/main/guides/mongodb-panache.adoc:1041
#: upstream/_versions/main/guides/mongodb-panache.adoc:1128
#, no-wrap
msgid "pom.xml"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:83
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-mongodb-panache</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/mongodb-panache.adoc:86
#: upstream/_versions/main/guides/mongodb-panache.adoc:116
#: upstream/_versions/main/guides/mongodb-panache.adoc:1051
#: upstream/_versions/main/guides/mongodb-panache.adoc:1138
#, no-wrap
msgid "build.gradle"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:89
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-mongodb-panache\")\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb-panache.adoc:94
msgid "If your project is already configured to use other annotation processors, you will need to additionally add the Panache annotation processor:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:113
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-compiler-plugin</artifactId>\n"
"    <version>${compiler-plugin.version}</version>\n"
"    <configuration>\n"
"        <parameters>${maven.compiler.parameters}</parameters>\n"
"        <annotationProcessorPaths>\n"
"            <!-- Your existing annotation processor(s)... -->\n"
"            <path>\n"
"                <groupId>io.quarkus</groupId>\n"
"                <artifactId>quarkus-panache-common</artifactId>\n"
"                <version>${quarkus.platform.version}</version>\n"
"            </path>\n"
"        </annotationProcessorPaths>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:119
#, no-wrap
msgid "annotationProcessor(\"io.quarkus:quarkus-panache-common\")\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb-panache.adoc:122
#, no-wrap
msgid "Setting up and configuring MongoDB with Panache"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb-panache.adoc:125
msgid "To get started:"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb-panache.adoc:127
msgid "add your settings in `{config-file}`"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb-panache.adoc:128
msgid "Make your entities extend `PanacheMongoEntity` (optional if you are using the repository pattern)"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb-panache.adoc:129
msgid "Optionally, use the `@MongoEntity` annotation to specify the name of the collection, the name of the database or the name of the client."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb-panache.adoc:131
msgid "Then add the relevant configuration properties in `{config-file}`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:138
#, no-wrap
msgid ""
"# configure the MongoDB client for a replica set of two nodes\n"
"quarkus.mongodb.connection-string = mongodb://mongo1:27017,mongo2:27017\n"
"# mandatory if you don't specify the name of the database using @MongoEntity\n"
"quarkus.mongodb.database = person\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:141
msgid "The `quarkus.mongodb.database` property will be used by MongoDB with Panache to determine the name of the database where your entities will be persisted (if not overridden by `@MongoEntity`)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:143
msgid "The `@MongoEntity` annotation allows configuring:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:145
msgid "the name of the client for multitenant application, see xref:mongodb.adoc#multiple-mongodb-clients[Multiple MongoDB Clients]. Otherwise, the default client will be used."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:146
msgid "the name of the database, otherwise the `quarkus.mongodb.database` property or a link:{mongodb-doc-root-url}#multitenancy[`MongoDatabaseResolver`] implementation will be used."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:147
msgid "the name of the collection, otherwise the simple name of the class will be used."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:149
msgid "For advanced configuration of the MongoDB client, you can follow the xref:mongodb.adoc#configuring-the-mongodb-database[Configuring the MongoDB database guide]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb-panache.adoc:150
#, no-wrap
msgid "Solution 1: using the active record pattern"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/mongodb-panache.adoc:152
#: upstream/_versions/main/guides/mongodb-panache.adoc:305
#, no-wrap
msgid "Defining your entity"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:156
msgid "To define a Panache entity, simply extend `PanacheMongoEntity` and add your columns as public fields.  You can add the `@MongoEntity` annotation to your entity if you need to customize the name of the collection, the database, or the client."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:162
#, no-wrap
msgid ""
"@MongoEntity(collection=\"ThePerson\")\n"
"public class Person extends PanacheMongoEntity {\n"
"    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:166
#, no-wrap
msgid ""
"    // will be persisted as a 'birth' field in MongoDB\n"
"    @BsonProperty(\"birth\")\n"
"    public LocalDate birthDate;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:169
#, no-wrap
msgid ""
"    public Status status;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:172
#: upstream/_versions/main/guides/mongodb-panache.adoc:322
msgid "Annotating with `@MongoEntity` is optional. Here the entity will be stored in the `ThePerson` collection instead of the default `Person` collection."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:174
msgid "MongoDB with Panache uses the link:{mongodb-doc-root-url}/fundamentals/data-formats/document-data-format-pojo[PojoCodecProvider] to convert your entities to a MongoDB `Document`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:176
#: upstream/_versions/main/guides/mongodb-panache.adoc:326
msgid "You will be allowed to use the following annotations to customize this mapping:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:178
#: upstream/_versions/main/guides/mongodb-panache.adoc:328
msgid "`@BsonId`: allows you to customize the ID field, see xref:custom-ids[Custom IDs]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:179
#: upstream/_versions/main/guides/mongodb-panache.adoc:329
msgid "`@BsonProperty`: customize the serialized name of the field."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:180
#: upstream/_versions/main/guides/mongodb-panache.adoc:330
msgid "`@BsonIgnore`: ignore a field during the serialization."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:182
msgid "If you need to write accessors, you can:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:186
#: upstream/_versions/main/guides/mongodb-panache.adoc:1061
#, no-wrap
msgid "public class Person extends PanacheMongoEntity {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:190
#, no-wrap
msgid ""
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:195
#: upstream/_versions/main/guides/mongodb-panache.adoc:915
#, no-wrap
msgid ""
"    // return name as uppercase in the model\n"
"    public String getName(){\n"
"        return name.toUpperCase();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:201
#: upstream/_versions/main/guides/mongodb-panache.adoc:921
#, no-wrap
msgid ""
"    // store all names in lowercase in the DB\n"
"    public void setName(String name){\n"
"        this.name = name.toLowerCase();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:205
msgid "And thanks to our field access rewrite, when your users read `person.name` they will actually call your `getName()` accessor, and similarly for field writes and the setter.  This allows for proper encapsulation at runtime as all fields calls will be replaced by the corresponding getter/setter calls."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/mongodb-panache.adoc:206
#: upstream/_versions/main/guides/mongodb-panache.adoc:374
#, no-wrap
msgid "Most useful operations"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:209
msgid "Once you have written your entity, here are the most common operations you will be able to perform:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:217
#: upstream/_versions/main/guides/mongodb-panache.adoc:385
#, no-wrap
msgid ""
"// creating a person\n"
"Person person = new Person();\n"
"person.name = \"Lo√Øc\";\n"
"person.birth = LocalDate.of(1910, Month.FEBRUARY, 1);\n"
"person.status = Status.Alive;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:220
#, no-wrap
msgid ""
"// persist it: if you keep the default ObjectId ID field, it will be populated by the MongoDB driver\n"
"person.persist();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:222
#: upstream/_versions/main/guides/mongodb-panache.adoc:390
#: upstream/_versions/main/guides/mongodb-panache.adoc:941
#, no-wrap
msgid "person.status = Status.Dead;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:225
#, no-wrap
msgid ""
"// Your must call update() in order to send your entity modifications to MongoDB\n"
"person.update();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:228
#, no-wrap
msgid ""
"// delete it\n"
"person.delete();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:231
#, no-wrap
msgid ""
"// getting a list of all Person entities\n"
"List<Person> allPersons = Person.listAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:236
#, no-wrap
msgid ""
"// finding a specific person by ID\n"
"// here we build a new ObjectId, but you can also retrieve it from the existing entity after being persisted\n"
"ObjectId personId = new ObjectId(idAsString);\n"
"person = Person.findById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:240
#, no-wrap
msgid ""
"// finding a specific person by ID via an Optional\n"
"Optional<Person> optional = Person.findByIdOptional(personId);\n"
"person = optional.orElseThrow(() -> new NotFoundException());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:243
#, no-wrap
msgid ""
"// finding all living persons\n"
"List<Person> livingPersons = Person.list(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:246
#, no-wrap
msgid ""
"// counting all persons\n"
"long countAll = Person.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:249
#, no-wrap
msgid ""
"// counting all living persons\n"
"long countAlive = Person.count(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:252
#, no-wrap
msgid ""
"// delete all living persons\n"
"Person.delete(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:255
#, no-wrap
msgid ""
"// delete all persons\n"
"Person.deleteAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:258
#, no-wrap
msgid ""
"// delete by id\n"
"boolean deleted = Person.deleteById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:261
#, no-wrap
msgid ""
"// set the name of all living persons to 'Mortal'\n"
"long updated = Person.update(\"name\", \"Mortal\").where(\"status\", Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:264
#: upstream/_versions/main/guides/mongodb-panache.adoc:432
msgid "All `list` methods have equivalent `stream` versions."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:272
#, no-wrap
msgid ""
"Stream<Person> persons = Person.streamAll();\n"
"List<String> namesButEmmanuels = persons\n"
"    .map(p -> p.name.toLowerCase() )\n"
"    .filter( n -> ! \"emmanuel\".equals(n) )\n"
"    .collect(Collectors.toList());\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:275
#: upstream/_versions/main/guides/mongodb-panache.adoc:443
msgid "A `persistOrUpdate()` method exist that persist or update an entity in the database, it uses the __upsert__ capability of MongoDB to do it in a single query."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/mongodb-panache.adoc:276
#, no-wrap
msgid "Adding entity methods"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:281
msgid "Add custom queries on your entities inside the entities themselves.  That way, you and your co-workers can find them easily, and queries are co-located with the object they operate on.  Adding them as static methods in your entity class is the Panache Active Record way."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb-panache.adoc:303
#, no-wrap
msgid "Solution 2: using the repository pattern"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:309
msgid "You can define your entity as regular POJO.  You can add the `@MongoEntity` annotation to your entity if you need to customize the name of the collection, the database, or the client."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:319
#, no-wrap
msgid ""
"@MongoEntity(collection=\"ThePerson\")\n"
"public class Person  {\n"
"    public ObjectId id; // used by MongoDB for the _id field\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:324
msgid "MongoDB with Panache uses the link:{mongodb-doc-root-url}/fundamentals/data-formats/document-data-format-pojo/[PojoCodecProvider] to convert your entities to a MongoDB `Document`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:333
msgid "You can use public fields or private fields with getters/setters.  If you don't want to manage the ID by yourself, you can make your entity extends `PanacheMongoEntity`."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/mongodb-panache.adoc:334
#, no-wrap
msgid "Defining your repository"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:338
msgid "When using Repositories, you can get the exact same convenient methods as with the active record pattern, injected in your Repository, by making them implements `PanacheMongoRepository`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:343
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheMongoRepository<Person> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:345
#, no-wrap
msgid "   // put your custom logic here as instance methods\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:349
#, no-wrap
msgid ""
"   public Person findByName(String name){\n"
"       return find(\"name\", name).firstResult();\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:353
#, no-wrap
msgid ""
"   public List<Person> findAlive(){\n"
"       return list(\"status\", Status.Alive);\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:358
#, no-wrap
msgid ""
"   public void deleteLoics(){\n"
"       delete(\"name\", \"Lo√Øc\");\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:362
msgid "All the operations that are defined on `PanacheMongoEntityBase` are available on your repository, so using it is exactly the same as using the active record pattern, except you need to inject it:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:367
#, no-wrap
msgid ""
"@Inject\n"
"PersonRepository personRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:372
#, no-wrap
msgid ""
"@GET\n"
"public long count(){\n"
"    return personRepository.count();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:377
msgid "Once you have written your repository, here are the most common operations you will be able to perform:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:388
#, no-wrap
msgid ""
"// persist it: if you keep the default ObjectId ID field, it will be populated by the MongoDB driver\n"
"personRepository.persist(person);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:393
#, no-wrap
msgid ""
"// Your must call update() in order to send your entity modifications to MongoDB\n"
"personRepository.update(person);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:396
#, no-wrap
msgid ""
"// delete it\n"
"personRepository.delete(person);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:399
#, no-wrap
msgid ""
"// getting a list of all Person entities\n"
"List<Person> allPersons = personRepository.listAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:404
#, no-wrap
msgid ""
"// finding a specific person by ID\n"
"// here we build a new ObjectId, but you can also retrieve it from the existing entity after being persisted\n"
"ObjectId personId = new ObjectId(idAsString);\n"
"person = personRepository.findById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:408
#, no-wrap
msgid ""
"// finding a specific person by ID via an Optional\n"
"Optional<Person> optional = personRepository.findByIdOptional(personId);\n"
"person = optional.orElseThrow(() -> new NotFoundException());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:411
#, no-wrap
msgid ""
"// finding all living persons\n"
"List<Person> livingPersons = personRepository.list(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:414
#, no-wrap
msgid ""
"// counting all persons\n"
"long countAll = personRepository.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:417
#, no-wrap
msgid ""
"// counting all living persons\n"
"long countAlive = personRepository.count(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:420
#, no-wrap
msgid ""
"// delete all living persons\n"
"personRepository.delete(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:423
#, no-wrap
msgid ""
"// delete all persons\n"
"personRepository.deleteAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:426
#, no-wrap
msgid ""
"// delete by id\n"
"boolean deleted = personRepository.deleteById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:429
#, no-wrap
msgid ""
"// set the name of all living persons to 'Mortal'\n"
"long updated = personRepository.update(\"name\", \"Mortal\").where(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:440
#, no-wrap
msgid ""
"Stream<Person> persons = personRepository.streamAll();\n"
"List<String> namesButEmmanuels = persons\n"
"    .map(p -> p.name.toLowerCase() )\n"
"    .filter( n -> ! \"emmanuel\".equals(n) )\n"
"    .collect(Collectors.toList());\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:447
msgid "The rest of the documentation show usages based on the active record pattern only, but keep in mind that they can be performed with the repository pattern as well.  The repository pattern examples have been omitted for brevity."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb-panache.adoc:448
#, no-wrap
msgid "Writing a Jakarta REST resource"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:451
msgid "First, include one of the RESTEasy extensions to enable Jakarta REST endpoints, for example, add the `io.quarkus:quarkus-resteasy-reactive-jackson` dependency for Jakarta REST and JSON support."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:453
msgid "Then, you can create the following resource to create/read/update/delete your Person entity:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:460
#, no-wrap
msgid ""
"@Path(\"/persons\")\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"public class PersonResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:465
#, no-wrap
msgid ""
"    @GET\n"
"    public List<Person> list() {\n"
"        return Person.listAll();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:471
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/{id}\")\n"
"    public Person get(String id) {\n"
"        return Person.findById(new ObjectId(id));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:477
#, no-wrap
msgid ""
"    @POST\n"
"    public Response create(Person person) {\n"
"        person.persist();\n"
"        return Response.created(URI.create(\"/persons/\" + person.id)).build();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:483
#, no-wrap
msgid ""
"    @PUT\n"
"    @Path(\"/{id}\")\n"
"    public void update(String id, Person person) {\n"
"        person.update();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:493
#, no-wrap
msgid ""
"    @DELETE\n"
"    @Path(\"/{id}\")\n"
"    public void delete(String id) {\n"
"        Person person = Person.findById(new ObjectId(id));\n"
"        if(person == null) {\n"
"            throw new NotFoundException();\n"
"        }\n"
"        person.delete();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:499
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/search/{name}\")\n"
"    public Person search(String name) {\n"
"        return Person.findByName(name);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:506
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/count\")\n"
"    public Long count() {\n"
"        return Person.count();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb-panache.adoc:508
#, no-wrap
msgid "Advanced Query"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/mongodb-panache.adoc:510
#, no-wrap
msgid "Paging"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:514
msgid "You should only use `list` and `stream` methods if your collection contains small enough data sets. For larger data sets you can use the `find` method equivalents, which return a `PanacheQuery` on which you can do paging:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:519
#: upstream/_versions/main/guides/mongodb-panache.adoc:555
#, no-wrap
msgid ""
"// create a query for all living persons\n"
"PanacheQuery<Person> livingPersons = Person.find(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:522
#, no-wrap
msgid ""
"// make it use pages of 25 entries at a time\n"
"livingPersons.page(Page.ofSize(25));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:525
#, no-wrap
msgid ""
"// get the first page\n"
"List<Person> firstPage = livingPersons.list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:528
#, no-wrap
msgid ""
"// get the second page\n"
"List<Person> secondPage = livingPersons.nextPage().list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:531
#, no-wrap
msgid ""
"// get page 7\n"
"List<Person> page7 = livingPersons.page(Page.of(7, 25)).list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:534
#, no-wrap
msgid ""
"// get the number of pages\n"
"int numberOfPages = livingPersons.pageCount();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:537
#, no-wrap
msgid ""
"// get the total number of entities returned by this query without paging\n"
"int count = livingPersons.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:543
#, no-wrap
msgid ""
"// and you can chain methods of course\n"
"return Person.find(\"status\", Status.Alive)\n"
"    .page(Page.ofSize(25))\n"
"    .nextPage()\n"
"    .stream()\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:546
msgid "The `PanacheQuery` type has many other methods to deal with paging and returning streams."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/mongodb-panache.adoc:547
#, no-wrap
msgid "Using a range instead of pages"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:550
msgid "`PanacheQuery` also allows range-based queries."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:558
#, no-wrap
msgid ""
"// make it use a range: start at index 0 until index 24 (inclusive).\n"
"livingPersons.range(0, 24);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:561
#, no-wrap
msgid ""
"// get the range\n"
"List<Person> firstRange = livingPersons.list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:564
#, no-wrap
msgid ""
"// to get the next range, you need to call range again\n"
"List<Person> secondRange = livingPersons.range(25, 49).list();\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb-panache.adoc:570
msgid "You cannot mix ranges and pages: if you use a range, all methods that depend on having a current page will throw an `UnsupportedOperationException`; you can switch back to paging using `page(Page)` or `page(int, int)`."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/mongodb-panache.adoc:572
#, no-wrap
msgid "Sorting"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:575
msgid "All methods accepting a query string also accept an optional `Sort` parameter, which allows you to abstract your sorting:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:579
#, no-wrap
msgid "List<Person> persons = Person.list(Sort.by(\"name\").and(\"birth\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:582
#, no-wrap
msgid ""
"// and with more restrictions\n"
"List<Person> persons = Person.list(\"status\", Sort.by(\"name\").and(\"birth\"), Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:585
msgid "The `Sort` class has plenty of methods for adding columns and specifying sort direction."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/mongodb-panache.adoc:586
#, no-wrap
msgid "Simplified queries"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:589
msgid "Normally, MongoDB queries are of this form: `{'firstname': 'John', 'lastname':'Doe'}`, this is what we call MongoDB native queries."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:592
msgid "You can use them if you want, but we also support what we call **PanacheQL** that can be seen as a subset of link:https://docs.oracle.com/javaee/7/tutorial/persistence-querylanguage.htm#BNBTG[JPQL] (or link:{hibernate-orm-docs-url}#hql[HQL]) and allows you to easily express a query.  MongoDB with Panache will then map it to a MongoDB native query."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:594
msgid "If your query does not start with `{`, we will consider it a PanacheQL query:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:596
msgid "`<singlePropertyName>` (and single parameter) which will expand to `{'singleColumnName': '?1'}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:597
msgid "`<query>` will expand to `{<query>}` where we will map the PanacheQL query to MongoDB native query form. We support the following operators that will be mapped to the corresponding MongoDB operators: 'and', 'or' ( mixing 'and' and 'or' is not currently supported), '=', '>', '>=', '<', '<=', '!=', 'is null', 'is not null', and 'like' that is mapped to the MongoDB `$regex` operator (both String and JavaScript patterns are supported)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:599
msgid "Here are some query examples:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:601
msgid "`firstname = ?1 and status = ?2` will be mapped to `{'firstname': ?1, 'status': ?2}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:602
msgid "`amount > ?1 and firstname != ?2` will be mapped to `{'amount': {'$gt': ?1}, 'firstname': {'$ne': ?2}}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:603
msgid "`lastname like ?1` will be mapped to `{'lastname': {'$regex': ?1}}`. Be careful that this will be link:https://docs.mongodb.com/manual/reference/operator/query/regex/#op._S_regex[MongoDB regex] support and not SQL like pattern."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:604
msgid "`lastname is not null` will be mapped to `{'lastname':{'$exists': true}}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:605
msgid "`status in ?1` will be mapped to `{'status':{$in: [?1]}}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:609
msgid "MongoDB queries must be valid JSON documents, using the same field multiple times in a query is not allowed using PanacheQL as it would generate an invalid JSON (see link:https://github.com/quarkusio/quarkus/issues/12086[this issue on GitHub])."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:613
msgid "We also handle some basic date type transformations: all fields of type `Date`, `LocalDate`, `LocalDateTime` or `Instant` will be mapped to the link:https://docs.mongodb.com/manual/reference/bson-types/#date[BSON Date] using the `ISODate` type (UTC datetime).  The MongoDB POJO codec doesn't support `ZonedDateTime` and `OffsetDateTime` so you should convert them prior usage."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:615
msgid "MongoDB with Panache also supports extended MongoDB queries by providing a `Document` query, this is supported by the find/list/stream/count/delete/update methods."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:618
msgid "MongoDB with Panache offers operations to update multiple documents based on an update document and a query : `Person.update(\"foo = ?1 and bar = ?2\", fooName, barName).where(\"name = ?1\", name)`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:620
msgid "For these operations, you can express the update document the same way you express your queries, here are some examples:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:622
msgid "`<singlePropertyName>` (and single parameter) which will expand to the update document `{'$set' : {'singleColumnName': '?1'}}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:623
msgid "`firstname = ?1 and status = ?2` will be mapped to the update document `{'$set' : {'firstname': ?1, 'status': ?2}}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:624
msgid "`firstname = :firstname and status = :status` will be mapped to the update document `{'$set' : {'firstname': :firstname, 'status': :status}}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:625
msgid "`{'firstname' : ?1 and 'status' : ?2}` will be mapped to the update document `{'$set' : {'firstname': ?1, 'status': ?2}}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:626
msgid "`{'firstname' : :firstname and 'status' : :status}` will be mapped to the update document `{'$set' : {'firstname': :firstname, 'status': :status}}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:627
msgid "`{'$inc': {'cpt': ?1}}` will be used as-is"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/mongodb-panache.adoc:628
#, no-wrap
msgid "Query parameters"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:631
msgid "You can pass query parameters, for both native and PanacheQL queries, by index (1-based) as shown below:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:636
#, no-wrap
msgid ""
"Person.find(\"name = ?1 and status = ?2\", \"Lo√Øc\", Status.Alive);\n"
"Person.find(\"{'name': ?1, 'status': ?2}\", \"Lo√Øc\", Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:639
msgid "Or by name using a `Map`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:647
#, no-wrap
msgid ""
"Map<String, Object> params = new HashMap<>();\n"
"params.put(\"name\", \"Lo√Øc\");\n"
"params.put(\"status\", Status.Alive);\n"
"Person.find(\"name = :name and status = :status\", params);\n"
"Person.find(\"{'name': :name, 'status', :status}\", params);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:650
msgid "Or using the convenience class `Parameters` either as is or to build a `Map`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:656
#, no-wrap
msgid ""
"// generate a Map\n"
"Person.find(\"name = :name and status = :status\",\n"
"         Parameters.with(\"name\", \"Lo√Øc\").and(\"status\", Status.Alive).map());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:660
#, no-wrap
msgid ""
"// use it as-is\n"
"Person.find(\"{'name': :name, 'status': :status}\",\n"
"         Parameters.with(\"name\", \"Lo√Øc\").and(\"status\", Status.Alive));\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:663
msgid "Every query operation accepts passing parameters by index (`Object...`), or by name (`Map<String,Object>` or `Parameters`)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:665
msgid "When you use query parameters, be careful that PanacheQL queries will refer to the Object parameters name but native queries will refer to MongoDB field names."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:667
msgid "Imagine the following entity:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:675
#, no-wrap
msgid ""
"public class Person extends PanacheMongoEntity {\n"
"    @BsonProperty(\"lastname\")\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:679
#, no-wrap
msgid ""
"    public static Person findByNameWithPanacheQLQuery(String name){\n"
"        return find(\"name\", name).firstResult();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:684
#, no-wrap
msgid ""
"    public static Person findByNameWithNativeQuery(String name){\n"
"        return find(\"{'lastname': ?1}\", name).firstResult();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:688
msgid "Both `findByNameWithPanacheQLQuery()` and `findByNameWithNativeQuery()` methods will return the same result but query written in PanacheQL will use the entity field name: `name`, and native query will use the MongoDB field name: `lastname`."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/mongodb-panache.adoc:689
#, no-wrap
msgid "Query projection"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:692
msgid "Query projection can be done with the `project(Class)` method on the `PanacheQuery` object that is returned by the `find()` methods."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:695
msgid "You can use it to restrict which fields will be returned by the database, the ID field will always be returned, but it's not mandatory to include it inside the projection class."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:699
msgid "For this, you need to create a class (a POJO) that will only contain the projected fields.  This POJO needs to be annotated with `@ProjectionFor(Entity.class)` where `Entity` is the name of your entity class.  The field names, or getters, of the projection class will be used to restrict which properties will be loaded from the database."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:701
msgid "Projection can be done for both PanacheQL and native queries."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:706
#, no-wrap
msgid ""
"import io.quarkus.mongodb.panache.common.ProjectionFor;\n"
"import org.bson.codecs.pojo.annotations.BsonProperty;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:712
#, no-wrap
msgid ""
"// using public fields\n"
"@ProjectionFor(Person.class)\n"
"public class PersonName {\n"
"    public String name;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:717
#, no-wrap
msgid ""
"// using getters\n"
"@ProjectionFor(Person.class)\n"
"public class PersonNameWithGetter {\n"
"    private String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:721
#, no-wrap
msgid ""
"    public String getName(){\n"
"        return name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:726
#, no-wrap
msgid ""
"    public void setName(String name){\n"
"        this.name = name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:731
#, no-wrap
msgid ""
"// only 'name' will be loaded from the database\n"
"PanacheQuery<PersonName> shortQuery = Person.find(\"status \", Status.Alive).project(PersonName.class);\n"
"PanacheQuery<PersonName> query = Person.find(\"'status': ?1\", Status.Alive).project(PersonNameWithGetter.class);\n"
"PanacheQuery<PersonName> nativeQuery = Person.find(\"{'status': 'ALIVE'}\", Status.Alive).project(PersonName.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:734
msgid "Using `@BsonProperty` is not needed to define custom column mappings, as the mappings from the entity class will be used."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:736
msgid "You can have your projection class extends from another class. In this case, the parent class also needs to have use `@ProjectionFor` annotation."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:738
msgid "If you run Java 17+, records are a good fit for projection classes."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb-panache.adoc:739
#, no-wrap
msgid "Query debugging"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:742
msgid "As MongoDB with Panache allows writing simplified queries, it is sometimes handy to log the generated native queries for debugging purpose."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:744
msgid "This can be achieved by setting to DEBUG the following log category inside your `application.properties`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:748
#, no-wrap
msgid "quarkus.log.category.\"io.quarkus.mongodb.panache.runtime\".level=DEBUG\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb-panache.adoc:750
#, no-wrap
msgid "The PojoCodecProvider: easy object to BSON document conversion."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:754
msgid "MongoDB with Panache uses the link:{mongodb-doc-root-url}/fundamentals/data-formats/document-data-format-pojo/[PojoCodecProvider], with link:{mongodb-doc-root-url}/fundamentals/data-formats/document-data-format-pojo/#configure-the-driver-for-pojos[automatic POJO support], to automatically convert your object to a BSON document."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:759
msgid "In case you encounter the `org.bson.codecs.configuration.CodecConfigurationException` exception, it means the codec is not able to automatically convert your object.  This codec obeys the Java Bean standard, so it will successfully convert a POJO using public fields or getters/setters.  You can use `@BsonIgnore` to make a field, or a getter/setter, ignored by the codec."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:764
msgid "If your class doesn't obey these rules (for example by including a method that starts with `get` but is not a setter), you could provide a custom codec for it.  Your custom codec will be automatically discovered and registered inside the codec registry.  See xref:mongodb.adoc#simplifying-mongodb-client-usage-using-bson-codec[Using BSON codec]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb-panache.adoc:765
#, no-wrap
msgid "Transactions"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:768
#: upstream/_versions/main/guides/mongodb-panache.adoc:1010
msgid "MongoDB offers ACID transactions since version 4.0."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:770
msgid "To use them with MongoDB with Panache you need to annotate the method that starts the transaction with the `@Transactional` annotation."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:773
#: upstream/_versions/main/guides/mongodb-panache.adoc:1027
msgid "In MongoDB, a transaction is only possible on a replicaset, luckily our xref:mongodb.adoc#dev-services[Dev Services for MongoDB] setups a single node replicaset so it is compatible with transactions."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb-panache.adoc:774
#, no-wrap
msgid "Custom IDs"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:779
msgid "IDs are often a touchy subject. In MongoDB, they are usually auto-generated by the database with an `ObjectId` type.  In MongoDB with Panache the ID are defined by a field named `id` of the `org.bson.types.ObjectId` type, but if you want to customize them, once again we have you covered."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:782
msgid "You can specify your own ID strategy by extending `PanacheMongoEntityBase` instead of `PanacheMongoEntity`. Then you just declare whatever ID you want as a public field by annotating it by `@BsonId`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:787
#, no-wrap
msgid ""
"@MongoEntity\n"
"public class Person extends PanacheMongoEntityBase {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:790
#, no-wrap
msgid ""
"    @BsonId\n"
"    public Integer myId;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:793
#, no-wrap
msgid ""
"    //...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:797
msgid "If you're using repositories, then you will want to extend `PanacheMongoRepositoryBase` instead of `PanacheMongoRepository` and specify your ID type as an extra type parameter:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:804
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheMongoRepositoryBase<Person,Integer> {\n"
"    //...\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb-panache.adoc:810
msgid "When using `ObjectId`, MongoDB will automatically provide a value for you, but if you use a custom field type, you need to provide the value by yourself."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:814
msgid "`ObjectId` can be difficult to use if you want to expose its value in your REST service.  So we created Jackson and JSON-B providers to serialize/deserialize them as a `String` which are automatically registered if your project depends on either the RESTEasy Reactive Jackson extension or the RESTEasy Reactive JSON-B extension."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb-panache.adoc:818
msgid "If you use the standard `ObjectId` ID type, don't forget to retrieve your entity by creating a new `ObjectId` when the identifier comes from a path parameter. For example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:826
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/{id}\")\n"
"public Person findById(String id) {\n"
"    return Person.findById(new ObjectId(id));\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb-panache.adoc:829
#, no-wrap
msgid "Working with Kotlin Data classes"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb-panache.adoc:832
msgid "Kotlin data classes are a very convenient way of defining data carrier classes, making them a great match to define an entity class."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb-panache.adoc:835
msgid "But this type of class comes with some limitations: all fields needs to be initialized at construction time or be marked as nullable, and the generated constructor needs to have as parameters all the fields of the data class."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb-panache.adoc:837
msgid "MongoDB with Panache uses the link:{mongodb-doc-root-url}/fundamentals/data-formats/document-data-format-pojo[PojoCodecProvider], a MongoDB codec which mandates the presence of a parameterless constructor."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb-panache.adoc:841
msgid "Therefore, if you want to use a data class as an entity class, you need a way to make Kotlin generate an empty constructor.  To do so, you need to provide default values for all the fields of your classes.  The following sentence from the Kotlin documentation explains it:"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb-panache.adoc:843
msgid "__On the JVM, if the generated class needs to have a parameterless constructor, default values for all properties have to be specified (see Constructors).__"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb-panache.adoc:845
msgid "If for whatever reason, the aforementioned solution is deemed unacceptable, there are alternatives."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb-panache.adoc:848
msgid "First, you can create a BSON Codec which will be automatically registered by Quarkus and will be used instead of the `PojoCodecProvider`.  See this part of the documentation: xref:mongodb.adoc#simplifying-mongodb-client-usage-using-bson-codec[Using BSON codec]."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb-panache.adoc:851
msgid "Another option is to use the `@BsonCreator` annotation to tell the `PojoCodecProvider` to use the Kotlin data class default constructor, in this case all constructor parameters have to be annotated with `@BsonProperty`: see link:{mongodb-doc-root-url}/fundamentals/data-formats/pojo-customization/#pojos-without-no-argument-constructors[Supporting pojos without no args constructor]."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb-panache.adoc:853
msgid "This will only work when the entity extends `PanacheMongoEntityBase` and not `PanacheMongoEntity`, as the ID field also needs to be included in the constructor."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb-panache.adoc:855
msgid "An example of a `Person` class defined as a Kotlin data class would look like:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:864
#, no-wrap
msgid ""
"data class Person @BsonCreator constructor (\n"
"    @BsonId var id: ObjectId,\n"
"    @BsonProperty(\"name\") var name: String,\n"
"    @BsonProperty(\"birth\") var birth: LocalDate,\n"
"    @BsonProperty(\"status\") var status: Status\n"
"): PanacheMongoEntityBase()\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb-panache.adoc:869
msgid "Here we use `var` but note that `val` can also be used."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb-panache.adoc:871
msgid "The `@BsonId` annotation is used instead of `@BsonProperty(\"_id\")` for brevity's sake, but use of either is valid."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:875
msgid "The last option is to the use the link:https://kotlinlang.org/docs/reference/compiler-plugins.html#no-arg-compiler-plugin[no-arg] compiler plugin.  This plugin is configured with a list of annotations, and the end result is the generation of no-args constructor for each class annotated with them."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:877
msgid "For MongoDB with Panache, you could use the `@MongoEntity` annotation on your data class for this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:886
#, no-wrap
msgid ""
"@MongoEntity\n"
"data class Person (\n"
"    var name: String,\n"
"    var birth: LocalDate,\n"
"    var status: Status\n"
"): PanacheMongoEntity()\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb-panache.adoc:889
#, no-wrap
msgid "Reactive Entities and Repositories"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:894
msgid "MongoDB with Panache allows using reactive style implementation for both entities and repositories.  For this, you need to use the Reactive variants when defining your entities : `ReactivePanacheMongoEntity` or `ReactivePanacheMongoEntityBase`, and when defining your repositories: `ReactivePanacheMongoRepository` or `ReactivePanacheMongoRepositoryBase`."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/mongodb-panache.adoc:896
#, no-wrap
msgid "Mutiny"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb-panache.adoc:900
msgid "The reactive API of MongoDB with Panache uses Mutiny reactive types.  If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:903
msgid "The reactive variant of the `Person` class will be:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:910
#, no-wrap
msgid ""
"public class ReactivePerson extends ReactivePanacheMongoEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:925
msgid "You will have access to the same functionalities of the _imperative_ variant inside the reactive one: bson annotations, custom ID, PanacheQL, ...  But the methods on your entities or repositories will all return reactive types."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:927
msgid "See the equivalent methods from the imperative example with the reactive variant:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:935
#, no-wrap
msgid ""
"// creating a person\n"
"ReactivePerson person = new ReactivePerson();\n"
"person.name = \"Lo√Øc\";\n"
"person.birth = LocalDate.of(1910, Month.FEBRUARY, 1);\n"
"person.status = Status.Alive;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:939
#, no-wrap
msgid ""
"// persist it: if you keep the default ObjectId ID field, it will be populated by the MongoDB driver,\n"
"// and accessible when uni1 will be resolved\n"
"Uni<ReactivePerson> uni1 = person.persist();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:944
#, no-wrap
msgid ""
"// Your must call update() in order to send your entity modifications to MongoDB\n"
"Uni<ReactivePerson> uni2 = person.update();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:947
#, no-wrap
msgid ""
"// delete it\n"
"Uni<Void> uni3 = person.delete();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:950
#, no-wrap
msgid ""
"// getting a list of all persons\n"
"Uni<List<ReactivePerson>> allPersons = ReactivePerson.listAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:955
#, no-wrap
msgid ""
"// finding a specific person by ID\n"
"// here we build a new ObjectId, but you can also retrieve it from the existing entity after being persisted\n"
"ObjectId personId = new ObjectId(idAsString);\n"
"Uni<ReactivePerson> personById = ReactivePerson.findById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:959
#, no-wrap
msgid ""
"// finding a specific person by ID via an Optional\n"
"Uni<Optional<ReactivePerson>> optional = ReactivePerson.findByIdOptional(personId);\n"
"personById = optional.map(o -> o.orElseThrow(() -> new NotFoundException()));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:962
#, no-wrap
msgid ""
"// finding all living persons\n"
"Uni<List<ReactivePerson>> livingPersons = ReactivePerson.list(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:965
#, no-wrap
msgid ""
"// counting all persons\n"
"Uni<Long> countAll = ReactivePerson.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:968
#, no-wrap
msgid ""
"// counting all living persons\n"
"Uni<Long> countAlive = ReactivePerson.count(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:971
#, no-wrap
msgid ""
"// delete all living persons\n"
"Uni<Long>  deleteCount = ReactivePerson.delete(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:974
#, no-wrap
msgid ""
"// delete all persons\n"
"deleteCount = ReactivePerson.deleteAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:977
#, no-wrap
msgid ""
"// delete by id\n"
"Uni<Boolean> deleted = ReactivePerson.deleteById(personId);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:980
#, no-wrap
msgid ""
"// set the name of all living persons to 'Mortal'\n"
"Uni<Long> updated = ReactivePerson.update(\"name\", \"Mortal\").where(\"status\", Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:983
msgid "If you use MongoDB with Panache in conjunction with RESTEasy Reactive, you can directly return a reactive type inside your Jakarta REST resource endpoint."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:985
msgid "The same query facility exists for the reactive types, but the `stream()` methods act differently: they return a `Multi` (which implement a reactive stream `Publisher`) instead of a `Stream`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:987
msgid "It allows more advanced reactive use cases, for example, you can use it to send server-sent events (SSE) via RESTEasy Reactive:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:995
#, no-wrap
msgid ""
"import org.jboss.resteasy.reactive.RestStreamElementType;\n"
"import org.reactivestreams.Publisher;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1003
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/stream\")\n"
"@Produces(MediaType.SERVER_SENT_EVENTS)\n"
"@RestStreamElementType(MediaType.APPLICATION_JSON)\n"
"public Multi<ReactivePerson> streamPersons() {\n"
"    return ReactivePerson.streamAll();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1006
msgid "`@RestStreamElementType(MediaType.APPLICATION_JSON)` tells RESTEasy Reactive to serialize the object in JSON."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/mongodb-panache.adoc:1007
#, no-wrap
msgid "Reactive transactions"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1012
msgid "To use them with reactive entities or repositories you need to use `io.quarkus.mongodb.panache.common.reactive.Panache.withTransaction()`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1023
#, no-wrap
msgid ""
"@POST\n"
"public Uni<Response> addPerson(ReactiveTransactionPerson person) {\n"
"    return Panache.withTransaction(() -> person.persist().map(v -> {\n"
"        //the ID is populated before sending it to the database\n"
"        String id = person.id.toString();\n"
"        return Response.created(URI.create(\"/reactive-transaction/\" + id)).build();\n"
"    }));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1029
msgid "Reactive transaction support inside MongoDB with Panache is still experimental."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb-panache.adoc:1030
#, no-wrap
msgid "Mocking"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/mongodb-panache.adoc:1032
#, no-wrap
msgid "Using the active-record pattern"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1037
msgid "If you are using the active-record pattern you cannot use Mockito directly as it does not support mocking static methods, but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static methods, including your own."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1039
msgid "Add this dependency to your `pom.xml`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1048
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-panache-mock</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1054
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-panache-mock\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1057
#: upstream/_versions/main/guides/mongodb-panache.adoc:1144
msgid "Given this simple entity:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1063
#, no-wrap
msgid "    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1068
#, no-wrap
msgid ""
"    public static List<Person> findOrdered() {\n"
"        return findAll(Sort.by(\"lastname\", \"firstname\")).list();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1071
#: upstream/_versions/main/guides/mongodb-panache.adoc:1169
msgid "You can write your mocking test like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1076
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheFunctionalityTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1080
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPanacheMocking() {\n"
"        PanacheMock.mock(Person.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1083
#, no-wrap
msgid ""
"        // Mocked classes always return a default value\n"
"        Assertions.assertEquals(0, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1087
#, no-wrap
msgid ""
"        // Now let's specify the return value\n"
"        Mockito.when(Person.count()).thenReturn(23L);\n"
"        Assertions.assertEquals(23, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1091
#, no-wrap
msgid ""
"        // Now let's change the return value\n"
"        Mockito.when(Person.count()).thenReturn(42L);\n"
"        Assertions.assertEquals(42, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1095
#, no-wrap
msgid ""
"        // Now let's call the original method\n"
"        Mockito.when(Person.count()).thenCallRealMethod();\n"
"        Assertions.assertEquals(0, Person.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1098
#, no-wrap
msgid ""
"        // Check that we called it 4 times\n"
"        PanacheMock.verify(Person.class, Mockito.times(4)).count();// <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1104
#, no-wrap
msgid ""
"        // Mock only with specific parameters\n"
"        Person p = new Person();\n"
"        Mockito.when(Person.findById(12L)).thenReturn(p);\n"
"        Assertions.assertSame(p, Person.findById(12L));\n"
"        Assertions.assertNull(Person.findById(42L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1108
#, no-wrap
msgid ""
"        // Mock throwing\n"
"        Mockito.when(Person.findById(12L)).thenThrow(new WebApplicationException());\n"
"        Assertions.assertThrows(WebApplicationException.class, () -> Person.findById(12L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1112
#, no-wrap
msgid ""
"        // We can even mock your custom methods\n"
"        Mockito.when(Person.findOrdered()).thenReturn(Collections.emptyList());\n"
"        Assertions.assertTrue(Person.findOrdered().isEmpty());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1118
#, no-wrap
msgid ""
"        PanacheMock.verify(Person.class).findOrdered();\n"
"        PanacheMock.verify(Person.class, Mockito.atLeastOnce()).findById(Mockito.any());\n"
"        PanacheMock.verifyNoMoreInteractions(Person.class);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1121
msgid "Be sure to call your `verify` methods on `PanacheMock` rather than `Mockito`, otherwise you won't know what mock object to pass."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/mongodb-panache.adoc:1122
#, no-wrap
msgid "Using the repository pattern"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1126
msgid "If you are using the repository pattern you can use Mockito directly, using the `quarkus-junit5-mockito` module, which makes mocking beans much easier:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1135
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5-mockito</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1141
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-junit5-mockito\")\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1148
#, no-wrap
msgid "public class Person {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1151
#, no-wrap
msgid ""
"    @BsonId\n"
"    public Long id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1154
#, no-wrap
msgid ""
"    public String name;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1157
msgid "And this repository:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1166
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheMongoRepository<Person> {\n"
"    public List<Person> findOrdered() {\n"
"        return findAll(Sort.by(\"lastname\", \"firstname\")).list();\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1176
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheFunctionalityTest {\n"
"    @InjectMock\n"
"    PersonRepository personRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1181
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPanacheRepositoryMocking() throws Throwable {\n"
"        // Mocked classes always return a default value\n"
"        Assertions.assertEquals(0, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1185
#, no-wrap
msgid ""
"        // Now let's specify the return value\n"
"        Mockito.when(personRepository.count()).thenReturn(23L);\n"
"        Assertions.assertEquals(23, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1189
#, no-wrap
msgid ""
"        // Now let's change the return value\n"
"        Mockito.when(personRepository.count()).thenReturn(42L);\n"
"        Assertions.assertEquals(42, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1193
#, no-wrap
msgid ""
"        // Now let's call the original method\n"
"        Mockito.when(personRepository.count()).thenCallRealMethod();\n"
"        Assertions.assertEquals(0, personRepository.count());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1196
#, no-wrap
msgid ""
"        // Check that we called it 4 times\n"
"        Mockito.verify(personRepository, Mockito.times(4)).count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1202
#, no-wrap
msgid ""
"        // Mock only with specific parameters\n"
"        Person p = new Person();\n"
"        Mockito.when(personRepository.findById(12L)).thenReturn(p);\n"
"        Assertions.assertSame(p, personRepository.findById(12L));\n"
"        Assertions.assertNull(personRepository.findById(42L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1206
#, no-wrap
msgid ""
"        // Mock throwing\n"
"        Mockito.when(personRepository.findById(12L)).thenThrow(new WebApplicationException());\n"
"        Assertions.assertThrows(WebApplicationException.class, () -> personRepository.findById(12L));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1209
#, no-wrap
msgid ""
"        Mockito.when(personRepository.findOrdered()).thenReturn(Collections.emptyList());\n"
"        Assertions.assertTrue(personRepository.findOrdered().isEmpty());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1216
#, no-wrap
msgid ""
"        // We can even mock your custom methods\n"
"        Mockito.verify(personRepository).findOrdered();\n"
"        Mockito.verify(personRepository, Mockito.atLeastOnce()).findById(Mockito.any());\n"
"        Mockito.verifyNoMoreInteractions(personRepository);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb-panache.adoc:1219
#, no-wrap
msgid "How and why we simplify MongoDB API"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1223
msgid "When it comes to writing MongoDB entities, there are a number of annoying things that users have grown used to reluctantly deal with, such as:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1226
msgid "Duplicating ID logic: most entities need an ID, most people don't care how it's set, because it's not really relevant to your model."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1229
msgid "Dumb getters and setters: since Java lacks support for properties in the language, we have to create fields, then generate getters and setters for those fields, even if they don't actually do anything more than read/write the fields."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1232
msgid "Traditional EE patterns advise to split entity definition (the model) from the operations you can do on them (DAOs, Repositories), but really that requires an unnatural split between the state and its operations even though we would never do something like that for regular objects in the Object-Oriented architecture, where state and methods are in the same class. Moreover, this requires two classes per entity, and requires injection of the DAO or Repository where you need to do entity operations, which breaks your edit flow and requires you to get out of the code you're writing to set up an injection point before coming back to use it."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1234
msgid "MongoDB queries are super powerful, but overly verbose for common operations, requiring you to write queries even when you don't need all the parts."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1235
msgid "MongoDB queries are JSON based, so you will need some String manipulation or using the `Document` type, and it will need a lot of boilerplate code."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1237
msgid "With Panache, we took an opinionated approach to tackle all these problems:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1240
msgid "Make your entities extend `PanacheMongoEntity`: it has an ID field that is auto-generated. If you require a custom ID strategy, you can extend `PanacheMongoEntityBase` instead and handle the ID yourself."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1243
msgid "Use public fields. Get rid of dumb getter and setters. Under the hood, we will generate all getters and setters that are missing, and rewrite every access to these fields to use the accessor methods. This way you can still write _useful_ accessors when you need them, which will be used even though your entity users still use field accesses."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1246
msgid "With the active record pattern: put all your entity logic in static methods in your entity class and don't create DAOs.  Your entity superclass comes with lots of super useful static methods, and you can add your own in your entity class.  Users can just start using your entity `Person` by typing `Person.` and getting completion for all the operations in a single place."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1248
msgid "Don't write parts of the query that you don't need: write `Person.find(\"order by name\")` or `Person.find(\"name = ?1 and status = ?2\", \"Lo√Øc\", Status.Alive)` or even better `Person.find(\"name\", \"Lo√Øc\")`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1250
msgid "That's all there is to it: with Panache, MongoDB has never looked so trim and neat."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb-panache.adoc:1251
#, no-wrap
msgid "Defining entities in external projects or jars"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1254
msgid "MongoDB with Panache relies on compile-time bytecode enhancements to your entities."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1260
msgid "It attempts to identity archives with Panache entities (and consumers of Panache entities)  by the presence of the marker file `META-INF/panache-archive.marker`. Panache includes an annotation processor that will automatically create this file in archives that depend on Panache (even indirectly). If you have disabled annotation processors you may need to create this file manually in some cases."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/mongodb-panache.adoc:1261
#, no-wrap
msgid "Multitenancy"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1265
msgid "\"Multitenancy is a software architecture where a single software instance can serve multiple, distinct user groups. Software-as-a-service (SaaS)  offerings are an example of multitenant architecture.\" (link:https://www.redhat.com/en/topics/cloud-computing/what-is-multitenancy#:~:text=Multitenancy%20is%20a%20software%20architecture,an%20example%20of%20multitenant%20architecture.[Red Hat])."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1267
msgid "MongoDB with Panache currently supports the database per tenant approach, it's similar to schema per tenant approach when compared to SQL databases."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/mongodb-panache.adoc:1268
#, no-wrap
msgid "Writing the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1272
msgid "In order to resolve the tenant from incoming requests and map it to a specific database, you must create an implementation of the `io.quarkus.mongodb.panache.common.MongoDatabaseResolver` interface."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1277
#: upstream/_versions/main/guides/mongodb-panache.adoc:1309
#, no-wrap
msgid ""
"import io.quarkus.mongodb.panache.common.MongoDatabaseResolver;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1280
#, no-wrap
msgid ""
"@RequestScoped // <1>\n"
"public class CustomMongoDatabaseResolver implements MongoDatabaseResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1283
#, no-wrap
msgid ""
"    @Inject\n"
"    RoutingContext context;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1288
#, no-wrap
msgid ""
"    @Override\n"
"    public String resolve() {\n"
"        return context.request().getHeader(\"X-Tenant\");\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1290
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1292
msgid "The bean is made `@RequestScoped` as the tenant resolution depends on the incoming request."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb-panache.adoc:1297
msgid "The database selection priority order is as follow: `@MongoEntity(database=\"mizain\")`, `MongoDatabaseResolver`, and then `quarkus.mongodb.database` property."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb-panache.adoc:1304
msgid "If you also use xref:security-openid-connect-multitenancy.adoc[OIDC multitenancy], then if the OIDC tenantID and MongoDB database are the same and must be extracted from the Vert.x `RoutingContext` you can pass the tenant id from the OIDC `TenantResolver` to the MongoDB with Panache `MongoDatabaseResolver` as a `RoutingContext` attribute, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1312
#, no-wrap
msgid ""
"@RequestScoped\n"
"public class CustomMongoDatabaseResolver implements MongoDatabaseResolver {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1322
#, no-wrap
msgid ""
"    @Inject\n"
"    RoutingContext context;\n"
"    ...\n"
"    @Override\n"
"    public String resolve() {\n"
"        // OIDC TenantResolver has already calculated the tenant id and saved it as a RoutingContext `tenantId` attribute:\n"
"        return context.get(\"tenantId\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/mongodb-panache.adoc:1326
msgid "Given this entity:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1331
#, no-wrap
msgid ""
"import org.bson.codecs.pojo.annotations.BsonId;\n"
"import io.quarkus.mongodb.panache.common.MongoEntity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1339
#, no-wrap
msgid ""
"@MongoEntity(collection = \"persons\")\n"
"public class Person extends PanacheMongoEntityBase {\n"
"    @BsonId\n"
"    public Long id;\n"
"    public String firstname;\n"
"    public String lastname;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1342
msgid "And this resource:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1346
#, no-wrap
msgid "import java.net.URI;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1352
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.POST;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.core.Response;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1355
#, no-wrap
msgid ""
"@Path(\"/persons\")\n"
"public class PersonResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1361
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/{id}\")\n"
"    public Person getById(Long id) {\n"
"        return Person.findById(id);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1368
#, no-wrap
msgid ""
"    @POST\n"
"    public Response create(Person person) {\n"
"        Person.persist(person);\n"
"        return Response.created(URI.create(String.format(\"/persons/%d\", person.id))).build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1371
msgid "From the classes above, we have enough to persist and fetch persons from different databases, so it's possible to see how it works."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/mongodb-panache.adoc:1372
#, no-wrap
msgid "Configuring the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1375
msgid "The same mongo connection will be used for all tenants, so a database has to be created for every tenant."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1381
#, no-wrap
msgid ""
"quarkus.mongodb.connection-string=mongodb://login:pass@mongo:27017\n"
"# The default database\n"
"quarkus.mongodb.database=sanjoka\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/mongodb-panache.adoc:1383
#, no-wrap
msgid "Testing"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/mongodb-panache.adoc:1386
msgid "You can write your test like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1391
#, no-wrap
msgid ""
"import static org.junit.jupiter.api.Assertions.assertEquals;\n"
"import static org.junit.jupiter.api.Assertions.assertTrue;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1393
#, no-wrap
msgid "import java.util.Objects;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1396
#, no-wrap
msgid ""
"import org.apache.commons.lang3.builder.EqualsBuilder;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1402
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.restassured.RestAssured;\n"
"import io.restassured.http.Method;\n"
"import io.restassured.response.Response;\n"
"import io.restassured.specification.RequestSpecification;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1405
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheMongoMultiTenancyTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1409
#, no-wrap
msgid ""
"    public static final String TENANT_HEADER_NAME = \"X-Tenant\";\n"
"    private static final String TENANT_1 = \"Tenant1\";\n"
"    private static final String TENANT_2 = \"Tenant2\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1416
#, no-wrap
msgid ""
"    @Test\n"
"    public void testMongoDatabaseResolverUsingPersonResource() {\n"
"        Person person1 = new Person();\n"
"        person1.id = 1L;\n"
"        person1.firstname = \"Pedro\";\n"
"        person1.lastname = \"Pereira\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1421
#, no-wrap
msgid ""
"        Person person2 = new Person();\n"
"        person2.id = 2L;\n"
"        person2.firstname = \"Tib√©\";\n"
"        person2.lastname = \"Ven√¢ncio\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1423
#, no-wrap
msgid "        String endpoint = \"/persons\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1427
#, no-wrap
msgid ""
"        // creating person 1\n"
"        Response createPerson1Response = callCreatePersonEndpoint(endpoint, TENANT_1, person1);\n"
"        assertResponse(createPerson1Response, 201);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1431
#, no-wrap
msgid ""
"        // checking person 1 creation\n"
"        Response getPerson1ByIdResponse = callGetPersonByIdEndpoint(endpoint, person1.id, TENANT_1);\n"
"        assertResponse(getPerson1ByIdResponse, 200, person1);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1435
#, no-wrap
msgid ""
"        // creating person 2\n"
"        Response createPerson2Response = callCreatePersonEndpoint(endpoint, TENANT_2, person2);\n"
"        assertResponse(createPerson2Response, 201);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1440
#, no-wrap
msgid ""
"        // checking person 2 creation\n"
"        Response getPerson2ByIdResponse = callGetPersonByIdEndpoint(endpoint, person2.id, TENANT_2);\n"
"        assertResponse(getPerson2ByIdResponse, 200, person2);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1449
#, no-wrap
msgid ""
"    protected Response callCreatePersonEndpoint(String endpoint, String tenant, Object person) {\n"
"        return RestAssured.given()\n"
"                .header(\"Content-Type\", \"application/json\")\n"
"                .header(TENANT_HEADER_NAME, tenant)\n"
"                .body(person)\n"
"                .post(endpoint)\n"
"                .andReturn();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1453
#, no-wrap
msgid ""
"    private Response callGetPersonByIdEndpoint(String endpoint, Long resourceId, String tenant) {\n"
"        RequestSpecification request = RestAssured.given()\n"
"                .header(\"Content-Type\", \"application/json\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1457
#, no-wrap
msgid ""
"        if (Objects.nonNull(tenant) && !tenant.isBlank()) {\n"
"            request.header(TENANT_HEADER_NAME, tenant);\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1462
#, no-wrap
msgid ""
"        return request.when()\n"
"                .request(Method.GET, endpoint.concat(\"/{id}\"), resourceId)\n"
"                .andReturn();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1466
#, no-wrap
msgid ""
"    private void assertResponse(Response response, Integer expectedStatusCode) {\n"
"        assertResponse(response, expectedStatusCode, null);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/mongodb-panache.adoc:1474
#, no-wrap
msgid ""
"    private void assertResponse(Response response, Integer expectedStatusCode, Object expectedResponseBody) {\n"
"        assertEquals(expectedStatusCode, response.statusCode());\n"
"        if (Objects.nonNull(expectedResponseBody)) {\n"
"            assertTrue(EqualsBuilder.reflectionEquals(response.as(expectedResponseBody.getClass()), expectedResponseBody));\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""
