# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:12+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/main/guides/building-native-image.adoc:6
#, no-wrap
msgid "Building a Native Executable"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:12
msgid "This guide covers:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:14
msgid "Compiling the application to a native executable"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:15
msgid "Packaging the native executable in a container"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/building-native-image.adoc:16
#: upstream/_versions/main/guides/building-native-image.adoc:829
#, no-wrap
msgid "Debugging native executable"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:18
msgid "This guide takes as input the application developed in the xref:getting-started.adoc[Getting Started Guide]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/building-native-image.adoc:19
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:25
msgid "A xref:configuring-c-development[working C development environment]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:26
msgid "The code of the application developed in the xref:getting-started.adoc[Getting Started Guide]."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/building-native-image.adoc:27
#, no-wrap
msgid "Supporting native compilation in C"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:32
msgid "What does having a working C developer environment mean?"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:34
msgid "On Linux, you will need GCC, and the glibc and zlib headers. Examples for common distributions:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/building-native-image.adoc:41
#, no-wrap
msgid ""
"# dnf (rpm-based)\n"
"sudo dnf install gcc glibc-devel zlib-devel libstdc++-static\n"
"# Debian-based distributions:\n"
"sudo apt-get install build-essential libz-dev zlib1g-dev\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:43
msgid "XCode provides the required dependencies on macOS:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/building-native-image.adoc:47
#, no-wrap
msgid "xcode-select --install\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:49
msgid "On Windows, you will need to install the https://aka.ms/vs/15/release/vs_buildtools.exe[Visual Studio 2017 Visual C++ Build Tools]"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/building-native-image.adoc:51
#, no-wrap
msgid "Background"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:57
msgid "Building a native executable requires using a distribution of GraalVM.  There are three distributions: Oracle GraalVM Community Edition (CE), Oracle GraalVM Enterprise Edition (EE) and Mandrel.  The differences between the Oracle and Mandrel distributions are as follows:"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:60
msgid "Mandrel is a downstream distribution of the Oracle GraalVM CE.  Mandrel's main goal is to provide a way to build native executables specifically designed to support Quarkus."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:69
msgid "Mandrel releases are built from a code base derived from the upstream Oracle GraalVM CE code base, with only minor changes but some significant exclusions that are not necessary for Quarkus native apps.  They support the same capabilities to build native executables as Oracle GraalVM CE, with no significant changes to functionality.  Notably, they do not include support for polyglot programming.  The reason for these exclusions is to provide a better level of support for the majority of Quarkus users.  These exclusions also mean Mandrel offers a considerable reduction in its distribution size when compared with Oracle GraalVM CE/EE."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:74
msgid "Mandrel is built slightly differently to Oracle GraalVM CE, using the standard OpenJDK project.  This means that it does not profit from a few small enhancements that Oracle have added to the version of OpenJDK used to build their own GraalVM downloads.  These enhancements are omitted because upstream OpenJDK does not manage them, and cannot vouch for.  This is particularly important when it comes to conformance and security."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:83
msgid "Mandrel is recommended for building native executables that target Linux containerized environments.  This means that Mandrel users are encouraged to use containers to build their native executables.  If you are building native executables for macOS, you should consider using Oracle GraalVM instead, because Mandrel does not currently target this platform.  Building native executables directly on bare metal Linux or Windows is possible, with details available in the https://github.com/graalvm/mandrel/blob/default/README.md[Mandrel README] and https://github.com/graalvm/mandrel/releases[Mandrel releases]."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/building-native-image.adoc:86
#, no-wrap
msgid "Configuring GraalVM"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:92
msgid "This step is only required for generating native executables targeting non-Linux operating systems.  For generating native executables targeting Linux, you can optionally skip this section and xref:container-runtime[use a builder image] instead."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:98
msgid "If you cannot install GraalVM, you can use a multi-stage Docker build to run Maven inside a Docker container that embeds GraalVM.  There is an explanation of how to do this at xref:multistage-docker[the end of this guide]."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:101
msgid "GraalVM {graalvm-version} is required."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:103
msgid "Install GraalVM if you haven't already. You have a few options for this:"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:104
msgid "Download the appropriate archive from <https://github.com/graalvm/mandrel/releases> or <https://github.com/graalvm/graalvm-ce-builds/releases>, and unpack it like you would any other JDK."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:105
msgid "Use platform-specific install tools like https://sdkman.io/jdks#Oracle[sdkman], https://github.com/graalvm/homebrew-tap[homebrew], or https://github.com/ScoopInstaller/Java[scoop]."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:106
msgid "Configure the runtime environment. Set `GRAALVM_HOME` environment variable to the GraalVM installation directory, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/building-native-image.adoc:110
#, no-wrap
msgid "export GRAALVM_HOME=$HOME/Development/mandrel/\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:113
msgid "On macOS (not supported by Mandrel), point the variable to the `Home` sub-directory:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/building-native-image.adoc:117
#, no-wrap
msgid "export GRAALVM_HOME=$HOME/Development/graalvm/Contents/Home/\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:120
msgid "On Windows, you will have to go through the Control Panel to set your environment variables."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:124
msgid "Installing via scoop will do this for you."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:126
msgid "(Optional) Set the `JAVA_HOME` environment variable to the GraalVM installation directory."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/building-native-image.adoc:130
#, no-wrap
msgid "export JAVA_HOME=${GRAALVM_HOME}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:132
msgid "(Optional) Add the GraalVM `bin` directory to the path"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/building-native-image.adoc:136
#, no-wrap
msgid "export PATH=${GRAALVM_HOME}/bin:$PATH\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/building-native-image.adoc:139
#, no-wrap
msgid "Issues using GraalVM with macOS"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:143
msgid "GraalVM binaries are not (yet) notarized for macOS as reported in this https://github.com/oracle/graal/issues/1724[GraalVM issue]. This means that you may see the following error when using `native-image`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/building-native-image.adoc:147
#, no-wrap
msgid "“native-image” cannot be opened because the developer cannot be verified\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:150
msgid "Use the following command to recursively delete the `com.apple.quarantine` extended attribute on the GraalVM install directory as a workaround:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/building-native-image.adoc:154
#, no-wrap
msgid "xattr -r -d com.apple.quarantine ${GRAALVM_HOME}/../..\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/building-native-image.adoc:157
#, no-wrap
msgid "Solution"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:160
msgid "We recommend that you follow the instructions in the next sections and package the application step by step. However, you can go right to the completed example."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:162
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:164
msgid "The solution is located in the `getting-started` directory."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/building-native-image.adoc:165
#, no-wrap
msgid "Producing a native executable"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:168
msgid "The native executable for our application will contain the application code, required libraries, Java APIs, and a reduced version of a VM. The smaller VM base improves the startup time of the application and produces a minimal disk footprint."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:170
msgid "image:native-executable-process.png[Creating a native executable]"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:172
msgid "If you have generated the application from the previous tutorial, you can find in the `pom.xml` the following _profile_:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/building-native-image.adoc:183
#, no-wrap
msgid ""
"<profiles>\n"
"    <profile>\n"
"        <id>native</id>\n"
"        <properties>\n"
"            <quarkus.package.type>native</quarkus.package.type>\n"
"        </properties>\n"
"    </profile>\n"
"</profiles>\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:189
msgid "You can provide custom options for the `native-image` command using the `<quarkus.native.additional-build-args>` property.  Multiple options may be separated by a comma."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:191
msgid "Another possibility is to include the `quarkus.native.additional-build-args` configuration property in your `application.properties`."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:193
msgid "You can find more information about how to configure the native image building process in the xref:configuration-reference[Configuring the Native Executable] section below."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:198
msgid "We use a profile because, you will see very soon, packaging the native executable takes a _few_ minutes. You could just pass -Dquarkus.package.type=native as a property on the command line, however it is better to use a profile as this allows native image tests to also be run."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:200
msgid "Create a native executable using:"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/building-native-image.adoc:205
#, no-wrap
msgid "Issues with packaging on Windows"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:210
msgid "The Microsoft Native Tools for Visual Studio must first be initialized before packaging.  You can do this by starting the `x64 Native Tools Command Prompt` that was installed with the Visual Studio Build Tools.  At the `x64 Native Tools Command Prompt`, you can navigate to your project folder and run `./mvnw package -Dnative`."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:212
msgid "Another solution is to write a script to do this for you:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/building-native-image.adoc:216
#, no-wrap
msgid "cmd /c 'call \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\VC\\Auxiliary\\Build\\vcvars64.bat\" && mvn package -Dnative'\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:221
msgid "In addition to the regular files, the build also produces `target/getting-started-1.0.0-SNAPSHOT-runner`.  You can run it using: `./target/getting-started-1.0.0-SNAPSHOT-runner`."
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/building-native-image.adoc:224
#: upstream/_versions/main/guides/building-native-image.adoc:346
#: upstream/_versions/main/guides/building-native-image.adoc:350
#, no-wrap
msgid "Java preview features"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:229
msgid "Java code that relies on preview features requires special attention.  To produce a native executable, this means that the `--enable-preview` flag needs to be passed to the underlying native image invocation.  You can do so by prepending the flag with `-J` and passing it as additional native build argument: `-Dquarkus.native.additional-build-args=-J--enable-preview`."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/building-native-image.adoc:231
#, no-wrap
msgid "Build fully static native executables"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:234
msgid "Fully static native executables support is experimental."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:237
msgid "On Linux it's possible to package a native executable that doesn't depend on any system shared library.  There are link:https://www.graalvm.org/{graalvm-docs-version}/reference-manual/native-image/guides/build-static-executables/#prerequisites-and-preparation[some system requirements] to be fulfilled and additional build arguments to be used along with the `native-image` invocation, a minimum is `-Dquarkus.native.additional-build-args=\"--static\",\"--libc=musl\"`."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:239
msgid "Compiling fully static binaries is done by statically linking https://musl.libc.org/[musl] instead of `glibc` and should not be used in production without rigorous testing."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/building-native-image.adoc:240
#, no-wrap
msgid "Testing the native executable"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:243
msgid "Producing a native executable can lead to a few issues, and so it's also a good idea to run some tests against the application running in the native file. The reasoning is explained in the link:getting-started-testing#quarkus-integration-test[Testing Guide]."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:245
msgid "To see the `GreetingResourceIT` run against the native executable, use `./mvnw verify -Dnative`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/building-native-image.adoc:270
#, no-wrap
msgid ""
"$ ./mvnw verify -Dnative\n"
"...\n"
"Finished generating 'getting-started-1.0.0-SNAPSHOT-runner' in 22.0s.\n"
"[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildRunner] docker run --env LANG=C --rm --user 1000:1000 -v /home/zakkak/code/quarkus-quickstarts/getting-started/target/getting-started-1.0.0-SNAPSHOT-native-image-source-jar:/project:z --entrypoint /bin/bash quay.io/quarkus/ubi-quarkus-mandrel-builder-image:{mandrel-flavor} -c objcopy --strip-debug getting-started-1.0.0-SNAPSHOT-runner\n"
"[INFO] [io.quarkus.deployment.QuarkusAugmentor] Quarkus augmentation completed in 70686ms\n"
"[INFO]\n"
"[INFO] --- maven-failsafe-plugin:3.0.0-M7:integration-test (default) @ getting-started ---\n"
"[INFO] Using auto detected provider org.apache.maven.surefire.junitplatform.JUnitPlatformProvider\n"
"[INFO]\n"
"[INFO] -------------------------------------------------------\n"
"[INFO]  T E S T S\n"
"[INFO] -------------------------------------------------------\n"
"[INFO] Running org.acme.getting.started.GreetingResourceIT\n"
"Executing \"/home/zakkak/code/quarkus-quickstarts/getting-started/target/getting-started-1.0.0-SNAPSHOT-runner -Dquarkus.http.port=8081 -Dquarkus.http.ssl-port=8444 -Dtest.url=http://localhost:8081 -Dquarkus.log.file.path=/home/zakkak/code/quarkus-quickstarts/getting-started/target/quarkus.log -Dquarkus.log.file.enable=true -Dquarkus.log.category.\"io.quarkus\".level=INFO\"\n"
"__  ____  __  _____   ___  __ ____  ______\n"
" --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/\n"
" -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\\ \\\n"
"--\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/\n"
"2023-05-05 10:55:52,068 INFO  [io.quarkus] (main) getting-started 1.0.0-SNAPSHOT native (powered by Quarkus 3.0.2.Final) started in 0.009s. Listening on: http://0.0.0.0:8081\n"
"2023-05-05 10:55:52,069 INFO  [io.quarkus] (main) Profile prod activated.\n"
"2023-05-05 10:55:52,069 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy-reactive, smallrye-context-propagation, vertx]\n"
"[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.99 s - in org.acme.getting.started.GreetingResourceIT\n"
"...\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:277
msgid "By default, Quarkus waits for 60 seconds for the native image to start before automatically failing the native tests. This duration can be changed using the `quarkus.test.wait-time` system property. For example, to increase the duration to 300 seconds, use: `./mvnw verify -Dnative -Dquarkus.test.wait-time=300`."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:283
msgid "This procedure was formerly accomplished using the `@NativeImageTest` annotation. `@NativeImageTest` was replaced by `@QuarkusIntegrationTest` which provides a superset of the testing capabilities of `@NativeImageTest`. More information about `@QuarkusIntegrationTest` can be found in the xref:getting-started-testing.adoc#quarkus-integration-test[Testing Guide]."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/building-native-image.adoc:285
#, no-wrap
msgid "Profiles"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:287
msgid "By default, integration tests both *build* and *run* the native executable using the `prod` profile."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:292
msgid "You can override the profile the executable *runs* with during the test using the `quarkus.test.native-image-profile` property.  Either by adding it to `application.properties` or by appending it to the command line: `./mvnw verify -Dnative -Dquarkus.test.native-image-profile=test`.  Your `%test.` prefixed properties will be used at the test runtime."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:297
msgid "You can override the profile the executable is *built* with and *runs* with using the `quarkus.profile=test` property, e.g.  `./mvnw clean verify -Dnative -Dquarkus.profile=test`. This might come handy if there are test specific resources to be processed, such as importing test data into the database."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/building-native-image.adoc:304
#, no-wrap
msgid ""
"quarkus.native.resources.includes=version.txt\n"
"%test.quarkus.native.resources.includes=version.txt,import-dev.sql\n"
"%test.quarkus.hibernate-orm.database.generation=drop-and-create\n"
"%test.quarkus.hibernate-orm.sql-load-script=import-dev.sql\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:309
msgid "With the aforementioned example in your `application.properties`, your Hibernate ORM managed database will be populated with test data both during the JVM mode test run and during the native mode test run. The production executable will contain only the `version.txt` resource, no superfluous test data."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:315
msgid "The executable built with `-Dquarkus.profile=test` is not suitable for production deployment.  It contains your test resources files and settings. Once the testing is done, the executable would have to be built again, using the default, `prod` profile."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:318
msgid "Alternatively, if you need to specify specific properties when running tests against the native executable built using the `prod` profile, an option is to put those properties in file `src/test/resources/application-nativeit.yaml`, and refer to it from the `failsafe` plugin configuration using the `QUARKUS_CONFIG_LOCATIONS` environment variable. For instance:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/building-native-image.adoc:343
#, no-wrap
msgid ""
"<plugin>\n"
"  <artifactId>maven-failsafe-plugin</artifactId>\n"
"  <version>${surefire-plugin.version}</version>\n"
"  <executions>\n"
"    <execution>\n"
"      <goals>\n"
"        <goal>integration-test</goal>\n"
"        <goal>verify</goal>\n"
"      </goals>\n"
"      <configuration>\n"
"        <systemPropertyVariables>\n"
"          <native.image.path>${project.build.directory}/${project.build.finalName}-runner</native.image.path>\n"
"          <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n"
"          <maven.home>${maven.home}</maven.home>\n"
"        </systemPropertyVariables>\n"
"        <environmentVariables>\n"
"          <QUARKUS_CONFIG_LOCATIONS>./src/test/resources/application-nativeit.yaml</QUARKUS_CONFIG_LOCATIONS>\n"
"        </environmentVariables>\n"
"      </configuration>\n"
"    </execution>\n"
"  </executions>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:355
msgid "Java code that relies on preview features requires special attention.  To test a native executable, this means that the `--enable-preview` flag needs to be passed to the Surefire plugin.  Adding `<argLine>--enable-preview</argLine>` to its `configuration` section is one way to do so."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/building-native-image.adoc:357
#, no-wrap
msgid "Excluding tests when running as a native executable"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:362
msgid "When running tests this way, the only things that actually run natively are your application endpoints, which you can only test via HTTP calls. Your test code does not actually run natively, so if you are testing code that does not call your HTTP endpoints, it's probably not a good idea to run them as part of native tests."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:365
msgid "If you share your test class between JVM and native executions like we advise above, you can mark certain tests with the `@DisabledOnIntegrationTest` annotation in order to skip them when testing against a native image."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:370
msgid "Using `@DisabledOnIntegrationTest` will also disable the test in all integration test instances, including testing the application in JVM mode, in a container image, and native image."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/building-native-image.adoc:372
#, no-wrap
msgid "Testing an existing native executable"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:376
msgid "It is also possible to re-run the tests against a native executable that has already been built. To do this run `./mvnw test-compile failsafe:integration-test -Dnative`. This will discover the existing native image and run the tests against it using failsafe."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:379
msgid "If the process cannot find the native image for some reason, or you want to test a native image that is no longer in the target directory you can specify the executable with the `-Dnative.image.path=` system property."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/building-native-image.adoc:381
#, no-wrap
msgid "Creating a Linux executable without GraalVM installed"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:385
msgid "Before going further, be sure to have a working container runtime (Docker, podman) environment. If you use Docker on Windows you should share your project's drive at Docker Desktop file share settings and restart Docker Desktop."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:389
msgid "Quite often one only needs to create a native Linux executable for their Quarkus application (for example in order to run in a containerized environment) and would like to avoid the trouble of installing the proper GraalVM version in order to accomplish this task (for example, in CI environments it's common practice to install as little software as possible)."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:392
msgid "To this end, Quarkus provides a very convenient way of creating a native Linux executable by leveraging a container runtime such as Docker or podman.  The easiest way of accomplishing this task is to execute:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:399
msgid "By default, Quarkus automatically detects the container runtime.  If you want to explicitly select the container runtime, you can do it with:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:401
msgid "For Docker:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:407
msgid "For podman:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:414
msgid "These are regular Quarkus config properties, so if you always want to build in a container it is recommended you add these to your `application.properties` in order to avoid specifying them every time."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:420
msgid "If you see the following invalid path error for your application JAR when trying to create a native executable using a container build, even though your JAR was built successfully, you're most likely using a remote daemon for your container runtime."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/building-native-image.adoc:423
#, no-wrap
msgid ""
"Error: Invalid Path entry getting-started-1.0.0-SNAPSHOT-runner.jar\n"
"Caused by: java.nio.file.NoSuchFileException: /project/getting-started-1.0.0-SNAPSHOT-runner.jar\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:425
msgid "In this case, use the parameter `-Dquarkus.native.remote-container-build=true` instead of `-Dquarkus.native.container-build=true`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:427
msgid "The reason for this is that the local build driver invoked through `-Dquarkus.native.container-build=true` uses volume mounts to make the JAR available in the build container, but volume mounts do not work with remote daemons. The remote container build driver copies the necessary files instead of mounting them. Note that even though the remote driver also works with local daemons, the local driver should be preferred in the local case because mounting is usually more performant than copying."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:432
msgid "The builder image used by default supports Java 17 as it is the latest LTS version."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:434
msgid "If your application uses Java 18 or later, you need to specify a builder image supporting Java 20:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:443
msgid "Building with GraalVM instead of Mandrel requires a custom builder image parameter to be passed additionally:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:454
msgid "Please note that the above command points to a floating tag.  It is highly recommended to use the floating tag, so that your builder image remains up-to-date and secure.  If you absolutely must, you may hard-code to a specific tag (see https://quay.io/repository/quarkus/ubi-quarkus-mandrel-builder-image?tab=tags[here] for available tags), but be aware that you won't get security updates that way and it's unsupported."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/building-native-image.adoc:456
#, no-wrap
msgid "Creating a container"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/building-native-image.adoc:458
#, no-wrap
msgid "Using the container-image extensions"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:461
msgid "By far the easiest way to create a container-image from your Quarkus application is to leverage one of the container-image extensions."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:463
msgid "If one of those extensions is present, then creating a container image for the native executable is essentially a matter of executing a single command:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/building-native-image.adoc:467
#, no-wrap
msgid "./mvnw package -Dnative -Dquarkus.native.container-build=true -Dquarkus.container-image.build=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:470
msgid "`quarkus.native.container-build=true` allows for creating a Linux executable without GraalVM being installed (and is only necessary if you don't have GraalVM installed locally or your local operating system is not Linux)"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:474
msgid "If you're running a remote Docker daemon, you need to replace `quarkus.native.container-build=true` with `quarkus.native.remote-container-build=true`."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:476
msgid "See xref:tip-quarkus-native-remote-container-build[Creating a Linux executable without GraalVM installed] for more details."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:479
msgid "`quarkus.container-image.build=true` instructs Quarkus to create a container-image using the final application artifact (which is the native executable in this case)"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:481
msgid "See the xref:container-image.adoc[Container Image guide] for more details."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/building-native-image.adoc:482
#, no-wrap
msgid "Manually using the micro base image"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:486
msgid "You can run the application in a container using the JAR produced by the Quarkus Maven Plugin.  However, in this section we focus on creating a container image using the produced native executable."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:488
msgid "image:containerization-process.png[Containerization Process]"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:492
msgid "When using a local GraalVM installation, the native executable targets your local operating system (Linux, macOS, Windows etc).  However, as a container may not use the same _executable_ format as the one produced by your operating system, we will instruct the Maven build to produce an executable by leveraging a container runtime (as described in xref:container-runtime[this section]):"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:496
msgid "The produced executable will be a 64-bit Linux executable, so depending on your operating system it may no longer be runnable.  However, it's not an issue as we are going to copy it to a container.  The project generation has provided a `Dockerfile.native-micro` in the `src/main/docker` directory with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/building-native-image.adoc:505
#, no-wrap
msgid ""
"FROM quay.io/quarkus/quarkus-micro-image:2.0\n"
"WORKDIR /work/\n"
"COPY target/*-runner /work/application\n"
"RUN chmod 775 /work\n"
"EXPOSE 8080\n"
"CMD [\"./application\", \"-Dquarkus.http.host=0.0.0.0\"]\n"
msgstr ""

#. type: Block title
#: upstream/_versions/main/guides/building-native-image.adoc:508
#, no-wrap
msgid "Quarkus Micro Image?"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:513
msgid "The Quarkus Micro Image is a small container image providing the right set of dependencies to run your native application.  It is based on https://catalog.redhat.com/software/containers/ubi8-micro/601a84aadd19c7786c47c8ea?container-tabs=overview[UBI Micro].  This base image has been tailored to work perfectly in containers."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:515
msgid "You can read more about UBI images on:"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:517
msgid "https://www.redhat.com/en/blog/introducing-red-hat-universal-base-image[Introduction to Universal Base Image]"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:518
msgid "https://catalog.redhat.com/software/container-stacks/detail/5ec53f50ef29fd35586d9a56[Red Hat Universal Base Image 8]"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:520
msgid "UBI images can be used without any limitations."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:522
msgid "xref:quarkus-runtime-base-image.adoc[This page] explains how to extend the `quarkus-micro` image when your application has specific requirements."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:525
msgid "Then, if you didn't delete the generated native executable, you can build the docker image with:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/building-native-image.adoc:529
#, no-wrap
msgid "docker build -f src/main/docker/Dockerfile.native-micro -t quarkus-quickstart/getting-started .\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:532
msgid "And finally, run it with:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/building-native-image.adoc:536
#: upstream/_versions/main/guides/building-native-image.adoc:656
#, no-wrap
msgid "docker run -i --rm -p 8080:8080 quarkus-quickstart/getting-started\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/building-native-image.adoc:538
#, no-wrap
msgid "Manually using the minimal base image"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:541
msgid "The project generation has also provided a `Dockerfile.native` in the `src/main/docker` directory with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/building-native-image.adoc:550
#, no-wrap
msgid ""
"FROM registry.access.redhat.com/ubi8/ubi-minimal:8.8\n"
"WORKDIR /work/\n"
"RUN chown 1001 /work \\\n"
"    && chmod \"g+rwX\" /work \\\n"
"    && chown 1001:root /work\n"
"COPY --chown=1001:root target/*-runner /work/application\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/building-native-image.adoc:553
#: upstream/_versions/main/guides/building-native-image.adoc:607
#, no-wrap
msgid ""
"EXPOSE 8080\n"
"USER 1001\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/building-native-image.adoc:555
#: upstream/_versions/main/guides/building-native-image.adoc:609
#: upstream/_versions/main/guides/building-native-image.adoc:689
#, no-wrap
msgid "CMD [\"./application\", \"-Dquarkus.http.host=0.0.0.0\"]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:559
msgid "The UBI minimal image is bigger than the micro one mentioned above.  It contains more utilities such as the `microdnf` package manager."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/building-native-image.adoc:561
#, no-wrap
msgid "Using a multi-stage Docker build"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:565
msgid "The previous section showed you how to build a native executable using Maven or Gradle, but it requires you to have created the native executable first.  In addition, this native executable must be a Linux 64 bits executable."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:568
msgid "You may want to build the native executable directly in a container without having a final container containing the build tools.  That approach is possible with a multi-stage Docker build:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:570
msgid "The first stage builds the native executable using Maven or Gradle"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:571
msgid "The second stage is a minimal image copying the produced native executable"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:576
msgid "Before building a container image from the Dockerfiles shown below, you need to update the default `.dockerignore` file, as it filters everything except the `target` directory. In order to build inside a container, you need to copy the `src` directory. Thus, edit your `.dockerignore` and remove the `*` line."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:579
msgid "Such a multi-stage build can be achieved as follows:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:581
msgid "Sample Dockerfile for building with Maven:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/building-native-image.adoc:593
#, no-wrap
msgid ""
"## Stage 1 : build with maven builder image with native capabilities\n"
"FROM quay.io/quarkus/ubi-quarkus-mandrel-builder-image:{mandrel-flavor} AS build\n"
"COPY --chown=quarkus:quarkus mvnw /code/mvnw\n"
"COPY --chown=quarkus:quarkus .mvn /code/.mvn\n"
"COPY --chown=quarkus:quarkus pom.xml /code/\n"
"USER quarkus\n"
"WORKDIR /code\n"
"RUN ./mvnw -B org.apache.maven.plugins:maven-dependency-plugin:3.1.2:go-offline\n"
"COPY src /code/src\n"
"RUN ./mvnw package -Dnative\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/building-native-image.adoc:598
#, no-wrap
msgid ""
"## Stage 2 : create the docker final image\n"
"FROM quay.io/quarkus/quarkus-micro-image:2.0\n"
"WORKDIR /work/\n"
"COPY --from=build /code/target/*-runner /work/application\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/building-native-image.adoc:604
#, no-wrap
msgid ""
"# set up permissions for user `1001`\n"
"RUN chmod 775 /work /work/application \\\n"
"  && chown -R 1001 /work \\\n"
"  && chmod -R \"g+rwX\" /work \\\n"
"  && chown -R 1001:root /work\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:615
msgid "This multi-stage Docker build copies the Maven wrapper from the host machine.  The Maven wrapper (or the Gradle wrapper) is a convenient way to provide a specific version of Maven/Gradle.  It avoids having to create a base image with Maven and Gradle.  To provision the Maven Wrapper in your project, use: `mvn -N org.apache.maven.plugins:maven-wrapper-plugin:3.1.1:wrapper`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:617
msgid "Save this file in `src/main/docker/Dockerfile.multistage` as it is not included in the getting started quickstart."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:619
msgid "Sample Dockerfile for building with Gradle:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/building-native-image.adoc:634
#, no-wrap
msgid ""
"## Stage 1 : build with maven builder image with native capabilities\n"
"FROM quay.io/quarkus/ubi-quarkus-mandrel-builder-image:{mandrel-flavor} AS build\n"
"USER root\n"
"RUN microdnf install findutils\n"
"COPY --chown=quarkus:quarkus gradlew /code/gradlew\n"
"COPY --chown=quarkus:quarkus gradle /code/gradle\n"
"COPY --chown=quarkus:quarkus build.gradle /code/\n"
"COPY --chown=quarkus:quarkus settings.gradle /code/\n"
"COPY --chown=quarkus:quarkus gradle.properties /code/\n"
"USER quarkus\n"
"WORKDIR /code\n"
"COPY src /code/src\n"
"RUN ./gradlew build -Dquarkus.package.type=native\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/building-native-image.adoc:642
#, no-wrap
msgid ""
"## Stage 2 : create the docker final image\n"
"FROM quay.io/quarkus/quarkus-micro-image:2.0\n"
"WORKDIR /work/\n"
"COPY --from=build /code/build/*-runner /work/application\n"
"RUN chmod 775 /work\n"
"EXPOSE 8080\n"
"CMD [\"./application\", \"-Dquarkus.http.host=0.0.0.0\"]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:645
msgid "If you are using Gradle in your project, you can use this sample Dockerfile.  Save it in `src/main/docker/Dockerfile.multistage`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/building-native-image.adoc:649
#, no-wrap
msgid "docker build -f src/main/docker/Dockerfile.multistage -t quarkus-quickstart/getting-started .\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:652
msgid "And, finally, run it with:"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:661
msgid "If you need SSL support in your native executable, you can easily include the necessary libraries in your Docker image."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:663
msgid "Please see xref:native-and-ssl.adoc#working-with-containers[our Using SSL With Native Executables guide] for more information."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:668
msgid "To use GraalVM CE instead of Mandrel, update the `FROM` clause to: `FROM quay.io/quarkus/ubi-quarkus-graalvmce-builder-image:{graalvm-flavor} AS build`."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/building-native-image.adoc:670
#, no-wrap
msgid "Using a Distroless base image"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:673
msgid "Distroless image support is experimental."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:676
msgid "If you are looking for small container images, the https://github.com/GoogleContainerTools/distroless[distroless] approach reduces the size of the base layer.  The idea behind _distroless_ is the usage of a single and minimal base image containing all the requirements, and sometimes even the application itself."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:679
msgid "Quarkus provides a distroless base image that you can use in your `Dockerfile`.  You only need to copy your application, and you are done:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/building-native-image.adoc:684
#, no-wrap
msgid ""
"FROM quay.io/quarkus/quarkus-distroless-image:2.0\n"
"COPY target/*-runner /application\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/building-native-image.adoc:687
#, no-wrap
msgid ""
"EXPOSE 8080\n"
"USER nonroot\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:694
msgid "Quarkus provides the `quay.io/quarkus/quarkus-distroless-image:2.0` image.  It contains the required packages to run a native executable and is only **9Mb**.  Just add your application on top of this image, and you will get a tiny container image."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:696
msgid "Distroless images should not be used in production without rigorous testing."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/building-native-image.adoc:697
#, no-wrap
msgid "Build a container image from scratch"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:700
msgid "Scratch image support is experimental."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:702
msgid "Building fully statically linked binaries enables the usage of a https://hub.docker.com/_/scratch[scratch image] containing solely the resulting native executable."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:704
msgid "Sample multistage Dockerfile for building an image from `scratch`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/building-native-image.adoc:728
#, no-wrap
msgid ""
"## Stage 1 : build with maven builder image with native capabilities\n"
"FROM quay.io/quarkus/ubi-quarkus-graalvmce-builder-image:{graalvm-flavor} AS build\n"
"USER root\n"
"RUN microdnf install make gcc\n"
"COPY --chown=quarkus:quarkus mvnw /code/mvnw\n"
"COPY --chown=quarkus:quarkus .mvn /code/.mvn\n"
"COPY --chown=quarkus:quarkus pom.xml /code/\n"
"RUN mkdir /musl && \\\n"
"    curl -L -o musl.tar.gz https://more.musl.cc/11.2.1/x86_64-linux-musl/x86_64-linux-musl-native.tgz && \\\n"
"    tar -xvzf musl.tar.gz -C /musl --strip-components 1 && \\\n"
"    curl -L -o zlib.tar.gz https://www.zlib.net/zlib-1.2.13.tar.gz && \\\n"
"    mkdir zlib && tar -xvzf zlib.tar.gz -C zlib --strip-components 1 && \\\n"
"    cd zlib && ./configure --static --prefix=/musl && \\\n"
"    make && make install && \\\n"
"    cd .. && rm -rf zlib && rm -f zlib.tar.gz && rm -f musl.tar.gz\n"
"ENV PATH=\"/musl/bin:${PATH}\"\n"
"USER quarkus\n"
"WORKDIR /code\n"
"RUN ./mvnw -B org.apache.maven.plugins:maven-dependency-plugin:3.1.2:go-offline\n"
"COPY src /code/src\n"
"RUN ./mvnw package -Dnative -DskipTests -Dquarkus.native.additional-build-args=\"--static\",\"--libc=musl\"\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/building-native-image.adoc:734
#, no-wrap
msgid ""
"## Stage 2 : create the final image\n"
"FROM scratch\n"
"COPY --from=build /code/target/*-runner /application\n"
"EXPOSE 8080\n"
"ENTRYPOINT [ \"/application\" ]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:737
msgid "Scratch images should not be used in production without rigorous testing."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:739
msgid "The versions of musl and zlib may need to be updated to meet the native-image executable requirements (and UPX if you use native image compression)."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/building-native-image.adoc:740
#, no-wrap
msgid "Compress native images"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:744
msgid "Quarkus can compress the produced native executable using UPX.  More details on xref:./upx.adoc[UPX Compression documentation]."
msgstr ""

#. type: Title ===
#: upstream/_versions/main/guides/building-native-image.adoc:745
#, no-wrap
msgid "Separating Java and native image compilation"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:751
msgid "In certain circumstances, you may want to build the native image in a separate step.  For example, in a CI/CD pipeline, you may want to have one step to generate the source that will be used for the native image generation and another step to use these sources to actually build the native executable.  For this use case, you can set the `quarkus.package.type=native-sources`.  This will execute the java compilation as if you had started native compilation (`-Dnative`), but stops before triggering the actual call to GraalVM's `native-image`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/building-native-image.adoc:755
#, no-wrap
msgid "$ ./mvnw clean package -Dquarkus.package.type=native-sources\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:758
msgid "After compilation has finished, you find the build artifact in `target/native-sources`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/building-native-image.adoc:764
#, no-wrap
msgid ""
"$ cd target/native-sources\n"
"$ ls\n"
"getting-started-1.0.0-SNAPSHOT-runner.jar  graalvm.version  lib  native-image.args\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:770
msgid "From the output above one can see that, in addition to the produced jar file and the associated lib directory, a text file named `native-image.args` was created.  This file holds all parameters (including the name of the JAR to compile) to pass along to GraalVM's `native-image` command.  A text file named `graalvm.version` was also created and holds the GraalVM version that should be used.  If you have GraalVM installed and it matches this version, you can start the native compilation by executing:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/building-native-image.adoc:781
#, no-wrap
msgid ""
"$ cd target/native-sources\n"
"$ native-image $(cat native-image.args)\n"
"...\n"
"$ ls\n"
"native-image.args\n"
"getting-started-1.0.0-SNAPSHOT-runner\n"
"getting-started-1.0.0-SNAPSHOT-runner.build_artifacts.txt\n"
"getting-started-1.0.0-SNAPSHOT-runner.jar\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:784
msgid "The process for Gradle is analogous."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:786
msgid "Running the build process in a container is also possible:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/building-native-image.adoc:790
#, no-wrap
msgid "$ ./mvnw clean package -Dquarkus.package.type=native-sources -Dquarkus.native.container-build=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:793
msgid "`-Dquarkus.native.container-build=true` will produce an additional text file named `native-builder.image` holding the docker image name to be used to build the native image."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/building-native-image.adoc:806
#, no-wrap
msgid ""
"cd target/native-sources\n"
"docker run \\\n"
"  -it \\\n"
"  --user $(id -ur):$(id -gr) \\\n"
"  --rm \\\n"
"  -v $(pwd):/work \\# <1>\n"
"  -w /work \\# <2>\n"
"  --entrypoint /bin/sh \\\n"
"  $(cat native-builder.image) \\# <3>\n"
"  -c \"native-image $(cat native-image.args) -J-Xmx4g\"# <4>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:809
msgid "Mount the host's directory `target/native-image` to the container's `/work`. Thus, the generated binary will also be written to this directory."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:810
msgid "Switch the working directory to `/work`, which we have mounted in <1>."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:811
msgid "Use the docker image from the file `native-builder.image`."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:812
msgid "Call `native-image` with the content of file `native-image.args` as arguments. We also supply an additional argument to limit the process's maximum memory to 4 Gigabytes (this may vary depending on the project being built and the machine building it)."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:817
msgid "If you are running on a Windows machine, please keep in mind that the binary was created within a Linux docker container.  Hence, the binary will not be executable on the host Windows machine."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:820
msgid "A high level overview of what the various steps of a CI/CD pipeline would look is the following:"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:822
msgid "Register the output of the step executing `./mvnw ...` command (i.e. directory `target/native-image`) as a build artifact,"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:823
msgid "Require this artifact in the step executing the `native-image ...` command, and"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:824
msgid "Register the output of the step executing the `native-image ...` command (i.e. files matching `target/*runner`) as build artifact."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:826
msgid "The environment executing step `1` only needs Java and Maven (or Gradle) installed, while the environment executing step `3` only needs a GraalVM installation (including the `native-image` feature)."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:828
msgid "Depending on what the final desired output of the CI/CD pipeline is, the generated binary might then be used to create a container image."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:833
msgid "Native executables can be debugged using tools such as `gdb`.  For this to be possible native executables need to be generated with debug symbols."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:837
msgid "Debug symbol generation is only supported on Linux.  Windows support is still under development, while macOS is not supported."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:841
msgid "To generate debug symbols, add `-Dquarkus.native.debug.enabled=true` flag when generating the native executable.  You will find the debug symbols for the native executable in a `.debug` file next to the native executable."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:846
msgid "The generation of the `.debug` file depends on `objcopy`.  As a result, when using a local GraalVM installation on common Linux distributions you will need to install the `binutils` package:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/building-native-image.adoc:853
#, no-wrap
msgid ""
"# dnf (rpm-based)\n"
"sudo dnf install binutils\n"
"# Debian-based distributions\n"
"sudo apt-get install binutils\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:856
msgid "When `objcopy` is not available debug symbols are embedded in the executable."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:864
msgid "Aside from debug symbols, setting `-Dquarkus.native.debug.enabled=true` flag generates a cache of source files for any JDK runtime classes, GraalVM classes and application classes resolved during native executable generation.  This source cache is useful for native debugging tools, to establish the link between the symbols and matching source code.  It provides a convenient way of making just the necessary sources available to the debugger/IDE when debugging a native executable."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:870
msgid "Sources for third party jar dependencies, including Quarkus source code, are not added to the source cache by default.  To include those, make sure you invoke `mvn dependency:sources` first.  This step is required in order to pull the sources for these dependencies, and get them included in the source cache."
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:872
msgid "The source cache is located in the `target/sources` folder."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:876
msgid "If running `gdb` from a different directory than `target`, then the sources can be loaded by running:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/building-native-image.adoc:880
#, no-wrap
msgid "directory path/to/target\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:883
msgid "in the `gdb` prompt."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:885
msgid "Or start `gdb` with:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/building-native-image.adoc:889
#, no-wrap
msgid "gdb -ex 'directory path/to/target' path/to/target/{project.name}-{project.version}-runner\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:892
msgid "e.g.,"
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/building-native-image.adoc:895
#, no-wrap
msgid "gdb -ex 'directory ./target' ./target/getting-started-1.0.0-SNAPSHOT-runner\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:899
msgid "For a more detailed guide about debugging native images please refer to the xref:native-reference.adoc[Native Reference Guide]."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/building-native-image.adoc:900
#, no-wrap
msgid "Using Monitoring Options"
msgstr ""

#. type: delimited block =
#: upstream/_versions/main/guides/building-native-image.adoc:905
msgid "Monitoring options such as JDK flight recorder, jvmstat, heap dumps, and remote JMX (experimental in Mandrel 23)  can be added to the native executable build. Simply supply a comma separated list of the monitoring options you wish to include at build time."
msgstr ""

#. type: delimited block -
#: upstream/_versions/main/guides/building-native-image.adoc:908
#, no-wrap
msgid "-Dquarkus.native.monitoring=<comma separated list of options>\n"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/building-native-image.adoc:911
#, no-wrap
msgid "Monitoring Option"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/building-native-image.adoc:911
#, no-wrap
msgid "Description"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/building-native-image.adoc:913
#, no-wrap
msgid "Availability As Of"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/building-native-image.adoc:914
#, no-wrap
msgid "jfr"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/building-native-image.adoc:915
#, no-wrap
msgid "Include JDK Flight Recorder support"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/building-native-image.adoc:917
#, no-wrap
msgid "GraalVM CE 21.3 Mandrel 21.3"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/building-native-image.adoc:918
#, no-wrap
msgid "jvmstat"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/building-native-image.adoc:919
#, no-wrap
msgid "Adds jvmstat support"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/building-native-image.adoc:921
#: upstream/_versions/main/guides/building-native-image.adoc:925
#: upstream/_versions/main/guides/building-native-image.adoc:936
#, no-wrap
msgid "GraalVM 22.3, GraalVM CE 17.0.7 Mandrel 22.3 Mandrel 23.0 (17.0.7)"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/building-native-image.adoc:922
#, no-wrap
msgid "heapdump"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/building-native-image.adoc:923
#, no-wrap
msgid "Adds support for generating heap dumps"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/building-native-image.adoc:926
#, no-wrap
msgid "jmxclient"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/building-native-image.adoc:927
#, no-wrap
msgid "Adds support for connections to JMX servers."
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/building-native-image.adoc:929
#, no-wrap
msgid "GraalVM for JDK 17/20 Mandrel 23.0"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/building-native-image.adoc:930
#, no-wrap
msgid "jmxserver"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/building-native-image.adoc:931
#, no-wrap
msgid "Adds support for accepting connections from JMX clients."
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/building-native-image.adoc:933
#, no-wrap
msgid "GraalVM for JDK 17/20 Mandrel 23.0 (17.0.7)"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/building-native-image.adoc:934
#, no-wrap
msgid "all"
msgstr ""

#. type: Table
#: upstream/_versions/main/guides/building-native-image.adoc:935
#, no-wrap
msgid "Adds all monitoring options."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:939
msgid "Please see the Quarkus Native Reference Guide for more detailed information on these monitoring options."
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/building-native-image.adoc:941
#, no-wrap
msgid "Configuring the Native Executable"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:945
msgid "There are a lot of different configuration options that can affect how the native executable is generated.  These are provided in `application.properties` the same as any other config property."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:947
msgid "The properties are shown below:"
msgstr ""

#. type: Title ==
#: upstream/_versions/main/guides/building-native-image.adoc:950
#, no-wrap
msgid "What's next?"
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:955
msgid "This guide covered the creation of a native (binary) executable for your application.  It provides an application exhibiting a swift startup time and consuming less memory.  However, there is much more."
msgstr ""

#. type: Plain text
#: upstream/_versions/main/guides/building-native-image.adoc:956
msgid "We recommend continuing the journey with the xref:deploying-to-kubernetes.adoc[deployment to Kubernetes and OpenShift]."
msgstr ""
