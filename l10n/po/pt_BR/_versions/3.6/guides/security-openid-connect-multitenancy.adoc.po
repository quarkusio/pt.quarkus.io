msgid ""
msgstr ""
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Using OpenID Connect (OIDC) Multi-Tenancy"
msgstr "Usando o OpenID Connect (OIDC) Multi-Tenancy"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "This guide demonstrates how your OpenID Connect (OIDC) application can support multi-tenancy so that you can serve multiple tenants from a single application. Tenants can be distinct realms or security domains within the same OpenID Provider or even distinct OpenID Providers."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "When serving multiple customers from the same application (e.g.: SaaS), each customer is a tenant. By enabling multi-tenancy support to your applications you are allowed to also support distinct authentication policies for each tenant even though if that means authenticating against different OpenID Providers, such as Keycloak and Google."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Please read the xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication] guide if you need to authorize a tenant using Bearer Token Authorization."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "If you need to authenticate and authorize a tenant using OpenID Connect Authorization Code Flow, read the xref:security-oidc-code-flow-authentication.adoc[OIDC code flow mechanism for protecting web applications] guide."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Also see the xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties] reference guide."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Prerequisites"
msgstr "Pré-requisitos"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "https://stedolan.github.io/jq/[jq tool]"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Architecture"
msgstr "Arquitetura"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "In this example, we build a very simple application which supports two resource methods:"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "`/{tenant}`"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "This resource returns information obtained from the ID token issued by OpenID Provider about the authenticated user and the current tenant."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "`/{tenant}`/bearer"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "This resource returns information obtained from the Access token issued by OpenID Provider about the authenticated user and the current tenant."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Solution"
msgstr "Solução"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "Recomendamos que siga as instruções nas seções seguintes e crie a aplicação passo a passo. No entanto, você pode ir diretamente para o exemplo completo."

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Clone o repositório Git: `git clone {quickstarts-clone-url}`, ou baixe um {quickstarts-archive-url}[arquivo]."

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "The solution is located in the `security-openid-connect-multi-tenancy-quickstart` link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart[directory]."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Creating the Maven Project"
msgstr "Criando o projeto Maven"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "Primeiro, precisamos de um novo projeto. Crie um novo projeto com o seguinte comando:"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid ""
"If you already have your Quarkus project configured, you can add the `oidc` extension\n"
"to your project by running the following command in your project base directory:"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "This will add the following to your build file:"
msgstr "Isto irá adicionar o seguinte trecho no seu arquivo de build:"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Writing the application"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Let's start by implementing the `/{tenant}` endpoint. As you can see from the source code below it is just a regular Jakarta REST resource:"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "In order to resolve the tenant from incoming requests and map it to a specific `quarkus-oidc` tenant configuration in application.properties, you need to create an implementation for the `io.quarkus.oidc.TenantConfigResolver` interface which can be used to resolve the tenant configurations dynamically:"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "From the implementation above, tenants are resolved from the request path so that in case no tenant could be inferred, `null` is returned to indicate that the default tenant configuration should be used."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Note the `tenant-a` application type is `hybrid` - it can accept HTTP bearer tokens if provided, otherwise it will initiate an authorization code flow when the authentication is required."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Configuring the application"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "The first configuration is the default tenant configuration that should be used when the tenant can not be inferred from the request. Note that a `%prod` profile prefix is used with `quarkus.oidc.auth-server-url` - it is done to support testing a multi-tenant application with `Dev Services For Keycloak`. This configuration is using a Keycloak instance to authenticate users."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "The second configuration is provided by `TenantConfigResolver`, it is the configuration that will be used when an incoming request is mapped to the tenant `tenant-a`."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Note that both configurations map to the same Keycloak server instance while using distinct `realms`."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Alternatively you can configure the tenant `tenant-a` directly in `application.properties`:"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "and use a custom `TenantConfigResolver` to resolve it:"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "You can define multiple tenants in your configuration file, just make sure they have a unique alias so that you can map them properly when resolving a tenant from your `TenantResolver` implementation."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "However, using a static tenant resolution (configuring tenants in `application.properties` and resolving them with `TenantResolver`) prevents testing the endpoint with `Dev Services for Keycloak` since `Dev Services for Keycloak` has no knowledge of how the requests will be mapped to individual tenants and can not dynamically provide tenant-specific `quarkus.oidc.<tenant-id>.auth-server-url` values and therefore using `%prod` prefixes with the tenant-specific URLs in `application.properties` will not work in test or dev mode."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid ""
"When a current tenant represents an OIDC `web-app` application, the current `io.vertx.ext.web.RoutingContext` will contain a `tenant-id` attribute by the time the custom tenant resolver has been called for all the requests completing the code authentication flow and the already authenticated requests, when either a tenant specific state or session cookie already exists.\n"
"Therefore, when working with multiple OpenID Connect Providers, you only need a path specific check to resolve a tenant id if the `RoutingContext` does not have the `tenant-id` attribute set, for example:"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "In fact, this is how Quarkus OIDC resolves static custom tenants itself if no custom `TenantResolver` is registered."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "A similar technique can be used with `TenantConfigResolver` where a `tenant-id` provided in the context can be used to return `OidcTenantConfig` already prepared with the previous request."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid ""
"If you also use xref:hibernate-orm.adoc#multitenancy[Hibernate ORM multitenancy] or xref:mongodb-panache.adoc#multitenancy[MongoDB with Panache multitenancy] and both tenant IDs are the same\n"
"and must be extracted from the Vert.x `RoutingContext` you can pass the tenant id from the OIDC Tenant Resolver to the Hibernate ORM Tenant Resolver or MongoDB with Panache Mongo Database Resolver\n"
"as a `RoutingContext` attribute, for example:"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Starting and Configuring the Keycloak Server"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "To start a Keycloak Server you can use Docker and just run the following command:"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "where `keycloak.version` should be set to `17.0.0` or higher."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "You should be able to access your Keycloak Server at http://localhost:8180[localhost:8180]."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Log in as the `admin` user to access the Keycloak Administration Console. Username should be `admin` and password `admin`."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Now, follow the steps below to import the realms for the two tenants:"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Import the link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/default-tenant-realm.json[default-tenant-realm.json] to create the default realm"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Import the link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/tenant-a-realm.json[tenant-a-realm.json] to create the realm for the tenant `tenant-a`."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "For more details, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Running and Using the Application"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Running in Developer Mode"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "To run the microservice in dev mode, use:"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Running in JVM Mode"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "When you're done playing with dev mode, you can run it as a standard Java application."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "First compile it:"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Then run it:"
msgstr "Em seguida, execute:"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Running in Native Mode"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "This same demo can be compiled into native code: no modifications required."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid ""
"This implies that you no longer need to install a JVM on your\n"
"production environment, as the runtime technology is included in\n"
"the produced binary, and optimized to run with minimal resource overhead."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid ""
"Compilation will take a bit longer, so this step is disabled by default;\n"
"let's build again by enabling the native build:"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "After getting a cup of coffee, you'll be able to run this binary directly:"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Test the Application"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Use Dev Services for Keycloak"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid ""
"Using xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] is recommended for the integration testing against Keycloak.\n"
"`Dev Services for Keycloak` will launch and initialize a test container: it will import configured realms and set a base Keycloak URL for `CustomTenantResolver` used in this quickstart to calculate a realm specific URL."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "First you need to add the following dependencies:"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid ""
"`quarkus-test-keycloak-server` provides a utility class `io.quarkus.test.keycloak.client.KeycloakTestClient` for acquiring the realm specific access tokens and which you can use with `RestAssured` for testing the `/{tenant}/bearer` endpoint expecting bearer access tokens.\n"
"`HtmlUnit` is used for testing the `/{tenant}` endpoint and the authorization code flow."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Next, configure the required realms:"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Finally, write your test which will be executed in JVM mode:"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "and in native mode:"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Please see xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] for more information about the way it is initialized and configured."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Use Browser"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "To test the application, you should open your browser and access the following URL:"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "http://localhost:8080/default[http://localhost:8080/default]"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid ""
"If everything is working as expected, you should be redirected to the Keycloak server to authenticate. Note that the requested path\n"
"defines a `default` tenant which we don't have mapped in the configuration file. In this case, the default configuration will be used."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "In order to authenticate to the application you should type the following credentials when at the Keycloak login page:"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Username: *alice*"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Password: *alice*"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "After clicking the `Login` button you should be redirected back to the application."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "If you try now to access the application at the following URL:"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "http://localhost:8080/tenant-a[http://localhost:8080/tenant-a]"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "You should be redirected again to the login page at Keycloak. However, now you are going to authenticate using a different `realm`."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid ""
"In both cases, if the user is successfully authenticated, the landing page will show the user's name and e-mail. Even though\n"
"user `alice` exists in both tenants, for the application they are distinct users belonging to different realms/tenants."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Static tenant configuration resolution"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid ""
"When you set multiple tenant configurations in the `application.properties` file, you only need to specify how the tenant identifier gets resolved.\n"
"To configure the resolution of the tenant identifier, use one of the following options:"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "xref:tenant-resolver[Resolve with `TenantResolver`]"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "xref:default-tenant-resolver[Default resolution]"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "xref:annotations-tenant-resolver[Resolve with annotations]"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid ""
"These tenant resolution options will be tried in turn, in the order they are listed, until the tenant id gets resolved.\n"
"If the tenant id remains unresolved (`null`) in the end then the default (unnamed) tenant configuration will be selected."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Resolve with `TenantResolver`"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "The following `application.properties` example shows how you can resolve the tenant identifier of two tenants named `a` and `b` by using the `TenantResolver` method:"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "You can return the tenant ID of either `a` or `b` from `quarkus.oidc.TenantResolver`:"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "In this example, the value of the last request path segment is a tenant ID, but if required, you can implement a more complex tenant identifier resolution logic."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Default resolution"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "The default resolution for a tenant identifier is convention based, whereby the authentication request must include the tenant identifier in the last segment of the request path."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "The following `application.properties` example shows how you can configure two tenants named `google` and `github`:"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid ""
"In this example, both tenants configure OIDC `web-app` applications to use an authorization code flow to authenticate users and also require session cookies to get generated after the authentication has taken place.\n"
"After either Google or GitHub authenticates the current user, the user gets returned to the `/signed-in` area for authenticated users, for example, a secured resource path on the JAX-RS endpoint."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Finally, to complete the default tenant resolution, set the following configuration property:"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid ""
"If the endpoint is running on `http://localhost:8080`, you can also provide UI options for users to log in to either `http://localhost:8080/google` or `http://localhost:8080/github`, without having to add specific`/google` or `/github` JAX-RS resource paths.\n"
"Tenant identifiers are also recorded in the session cookie names after the authentication is completed.\n"
"Therefore, authenticated users can access the secured application area without requiring either the `google` or `github` path values to be included in the secured URL."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Default resolution can also work for Bearer token authentication but it might be less practical in this case because a tenant identifier will always need to be set as the last path segment value."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Resolve with annotations"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "You can use the `io.quarkus.oidc.Tenant` annotation for resolving the tenant identifiers as an alternative to using `io.quarkus.oidc.TenantResolver`."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Proactive HTTP authentication must be disabled (`quarkus.http.auth.proactive=false`) for this to work. For more information, see xref:security-proactive-authentication.adoc[Proactive authentication]."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid ""
"Assuming your application supports two OIDC tenants (`hr`, and default), all resource methods and classes\n"
"carrying `@Tenant(\"hr\")` will be authenticated using the OIDC provider configured by `quarkus.oidc.hr.auth-server-url`,\n"
"while all other classes and methods will still be authenticated using the default OIDC provider."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "The `io.quarkus.oidc.Tenant` annotation must be placed either on resource class or resource method."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Dynamic tenant configuration resolution"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid ""
"If you need a more dynamic configuration for the different tenants you want to support and don't want to end up with multiple\n"
"entries in your configuration file, you can use the `io.quarkus.oidc.TenantConfigResolver`."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "This interface allows you to dynamically create tenant configurations at runtime:"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "The `OidcTenantConfig` returned from this method is the same used to parse the `oidc` namespace configuration from the `application.properties`. You can populate it using any of the settings supported by the `quarkus-oidc` extension."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "If the dynamic tenant resolver returns `null` then a xref:static-tenant-resolution[Static tenant configuration resolution] will be attempted next."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Tenant resolution for OIDC `web-app` applications"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "The simplest option for resolving OIDC `web-app` application configuration is to follow the steps described in the xref:default-tenant-resolver[Default resolution] section."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Try one of the options suggested below if the default resolution strategy does not work for your application setup."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Several options are available for selecting the tenant configuration which should be used to secure the current HTTP request for both `service` and `web-app` OIDC applications, such as:"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Check URL paths, for example, a `tenant-service` configuration has to be used for the \"/service\" paths, while a `tenant-manage` configuration - for the \"/management\" paths"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Check HTTP headers, for example, with a URL path always being '/service', a header such as \"Realm: service\" or \"Realm: management\" can help to select between the `tenant-service` and `tenant-manage` configurations"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Check URL query parameters - it can work similarly to the way the headers are used to select the tenant configuration"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "All these options can be easily implemented with the custom `TenantResolver` and `TenantConfigResolver` implementations for the OIDC `service` applications."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "However, due to an HTTP redirect required to complete the code authentication flow for the OIDC `web-app` applications, a custom HTTP cookie may be needed to select the same tenant configuration before and after this redirect request because:"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "URL path may not be the same after the redirect request if a single redirect URL has been registered in the OIDC Provider - the original request path can be restored but after the tenant configuration is resolved"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "HTTP headers used during the original request are not available after the redirect"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Custom URL query parameters are restored after the redirect but after the tenant configuration is resolved"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "One option to ensure the information for resolving the tenant configurations for `web-app` applications is available before and after the redirect is to use a cookie, for example:"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Disabling Tenant Configurations"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Custom `TenantResolver` and `TenantConfigResolver` implementations may return `null` if no tenant can be inferred from the current request and a fallback to the default tenant configuration is required."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "If you expect that the custom resolvers will always infer a tenant then you do not need to configure the default tenant resolution."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "To disable the default tenant configuration, set  `quarkus.oidc.tenant-enabled=false`."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "The default tenant configuration is automatically disabled when `quarkus.oidc.auth-server-url` is not configured but either custom tenant configurations are available or `TenantConfigResolver` is registered."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "Note that tenant specific configurations can also be disabled, for example: `quarkus.oidc.tenant-a.tenant-enabled=false`."
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "References"
msgstr "Referências"

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties]"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "https://developers.google.com/identity/protocols/OpenIDConnect[Google OpenID Connect]"
msgstr ""

#: _versions/3.6/guides/security-openid-connect-multitenancy.adoc
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "xref:security-overview.adoc[Visão geral do Quarkus Security]"
