msgid ""
msgstr ""
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "Mutiny - Async for bare mortal"
msgstr "Mutiny - Assíncrono para mortais nus"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"https://smallrye.io/smallrye-mutiny[Mutiny] is an intuitive, reactive programming library.\n"
"It is the primary model to write reactive applications with Quarkus."
msgstr "link:https://smallrye.io/smallrye-mutiny[O Mutiny] é uma biblioteca de programação intuitiva e reativa. É o principal modelo para escrever aplicativos reativos com o Quarkus."

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "An event-driven reactive programming API"
msgstr "Uma API de programação reativa orientada a eventos"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"Mutiny is very different from the other reactive programming libraries.\n"
"It takes a different approach to design your program.\n"
"With Mutiny everything is event-driven: you receive events, and you react to them.\n"
"This event-driven aspect embraces the asynchronous nature of distributed systems and provides an elegant and precise way to express continuation."
msgstr "O Mutiny é muito diferente das outras bibliotecas de programação reativa. Ele adota uma abordagem diferente para projetar seu programa. Com o Mutiny, tudo é orientado por eventos: o usuário recebe eventos e reage a eles. Esse aspecto orientado por eventos abrange a natureza assíncrona dos sistemas distribuídos e oferece uma maneira elegante e precisa de expressar a continuação."

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "Mutiny offers two types that are both event-driven and lazy:"
msgstr "O Mutiny oferece dois tipos que são orientados por eventos e preguiçosos:"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"A `Uni` emits a single event (an item or a failure).\n"
"Unis are convenient to represent asynchronous actions that return 0 or 1 result.\n"
"A good example is the result of sending a message to a message broker queue."
msgstr "Um `Uni` emite um único evento (um item ou uma falha). Os Unis são convenientes para representar ações assíncronas que retornam 0 ou 1 resultado. Um bom exemplo é o resultado do envio de uma mensagem para uma fila de um corretor de mensagens."

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"A `Multi` emits multiple events (n items, 1 failure or 1 completion).\n"
"Multis can represent streams of items, potentially unbounded.\n"
"A good example is receiving messages from a message broker queue."
msgstr "Um `Multi` emite vários eventos (n itens, 1 falha ou 1 conclusão). Os Multis podem representar fluxos de itens, potencialmente ilimitados. Um bom exemplo é o recebimento de mensagens de uma fila de um corretor de mensagens."

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"These two types allow representing any type of interactions.\n"
"They are event sources.\n"
"You observe them (_subscription_) and you get notified when they emit an item, a failure, or, in the case of a bounded Multi, a completion event.\n"
"When you (the subscriber) receive the event, you can process it (e.g., transform it, filter it).\n"
"With Mutiny, you are going to write code like _onX().action()_, which reads as “on item X do action”."
msgstr "Esses dois tipos permitem representar qualquer tipo de interação. Eles são fontes de eventos. O senhor os observa _(assinatura_ ) e é notificado quando eles emitem um item, uma falha ou, no caso de um Multi limitado, um evento de conclusão. Quando o senhor (o assinante) recebe o evento, pode processá-lo (por exemplo, transformá-lo, filtrá-lo). Com o Mutiny, o senhor escreverá códigos como _onX().action()_ , que se lê como \"on item X do action\"."

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "If you want to know more about Mutiny, and the concepts behind it, check https://smallrye.io/smallrye-mutiny/latest/reference/why-is-asynchronous-important[the Mutiny Reference documentation]."
msgstr "Se o senhor quiser saber mais sobre o Mutiny e os conceitos por trás dele, consulte link:https://smallrye.io/smallrye-mutiny/latest/reference/why-is-asynchronous-important[a documentação de referência do Mutiny] ."

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "Mutiny in Quarkus"
msgstr "Motim em Quarkus"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"Mutiny is the primary API when dealing with the reactive features from Quarkus.\n"
"It means that most extensions support Mutiny either by exposing an API returning Unis and Multis (such as reactive data sources or rest clients) or understanding when your methods return a Uni or a Multi (such as RESTEasy Reactive or Reactive Messaging)."
msgstr "O Mutiny é a API principal ao lidar com os recursos reativos do Quarkus. Isso significa que a maioria das extensões oferece suporte ao Mutiny expondo uma API que retorna Unis e Multis (como fontes de dados reativas ou clientes rest) ou entendendo quando seus métodos retornam um Uni ou um Multi (como RESTEasy Reactive ou Reactive Messaging)."

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"These integrations make Mutiny a prominent and cohesive model for every reactive application developed with Quarkus.\n"
"In addition, Mutiny architecture allows fine-grain dead-code elimination which improves the memory usage when compiled to native (such as with Quarkus native mode or GraalVM native image compiler)."
msgstr "Essas integrações tornam o Mutiny um modelo proeminente e coeso para todos os aplicativos reativos desenvolvidos com o Quarkus. Além disso, a arquitetura Mutiny permite a eliminação de códigos mortos de granulação fina, o que melhora o uso da memória quando compilada para o modo nativo (como o modo nativo do Quarkus ou o compilador de imagens nativas GraalVM)."

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "Why another reactive programming API?"
msgstr "Por que outra API de programação reativa?"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"Seasoned reactive developers may wonder why Quarkus introduced yet another reactive programming APIs while there are existing ones.\n"
"Mutiny is taking a very different angle:"
msgstr "Os desenvolvedores reativos experientes podem se perguntar por que a Quarkus introduziu mais uma API de programação reativa enquanto já existem outras. A Mutiny está adotando um ângulo muito diferente:"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"**Event-Driven** -\n"
"Mutiny places events at the core of its design.\n"
"With Mutiny, you observe events, react to them, and create elegant and readable processing pipelines.\n"
"A Ph.D. in functional programming is not required."
msgstr "*Orientado por eventos* - O Mutiny coloca os eventos no centro de seu design. Com o Mutiny, o senhor observa os eventos, reage a eles e cria pipelines de processamento elegantes e legíveis. Não é necessário ter Ph.D. em programação funcional."

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"**Navigable** - Even with intelligent code completion, classes with hundreds of methods are confusing.\n"
"Mutiny provides a navigable and explicit API driving you towards the operator you need."
msgstr "*Navegável* - Mesmo com o recurso inteligente de autocompletar código, as classes com centenas de métodos são confusas. O Mutiny oferece uma API navegável e explícita que o leva até o operador de que o senhor precisa."

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"**Non-Blocking I/O** - Mutiny is the perfect companion to tame the asynchronous nature of applications with non-blocking I/O (which powers xref:quarkus-reactive-architecture.adoc[Quarkus]).\n"
"Declaratively compose operations, transform data, enforce progress, recover from failures, and more."
msgstr "*E/S sem bloqueio* - O Mutiny é o companheiro perfeito para domar a natureza assíncrona dos aplicativos com E/S sem bloqueio (que alimenta xref:quarkus-reactive-architecture.adoc[o Quarkus] ). Componha operações de forma declarativa, transforme dados, reforce o progresso, recupere-se de falhas e muito mais."

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "**Made for an asynchronous world** - Mutiny can be used in any asynchronous application such as event-driven microservices, message-based applications, network utilities, data stream processing, and of course... reactive applications!"
msgstr "*Feito para um mundo assíncrono* - o Mutiny pode ser usado em qualquer aplicativo assíncrono, como microsserviços orientados por eventos, aplicativos baseados em mensagens, utilitários de rede, processamento de fluxo de dados e, é claro... aplicativos reativos!"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"**Reactive Streams and Converters Built-In** - Mutiny is based on the https://www.reactive-streams.org/[Reactive Streams] specification, and so it can be integrated with any other reactive programming library.\n"
"In addition, it proposes converters to interact with other popular libraries."
msgstr "*Fluxos reativos e conversores integrados* - O Mutiny baseia-se na especificação link:https://www.reactive-streams.org/[Reactive Streams] e, portanto, pode ser integrado a qualquer outra biblioteca de programação reativa. Além disso, ele propõe conversores para interagir com outras bibliotecas populares."

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "Mutiny and the I/O Threads"
msgstr "Mutiny and the I/O Threads (Motim e os fios de E/S)"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"Quarkus is powered by a xref:quarkus-reactive-architecture.adoc#engine[reactive engine], and when developing a reactive application, your code is executed on one of the few I/O threads.\n"
"Remember, you must never block these threads, and the model would collapse if you do.\n"
"So, you can't use blocking I/O.\n"
"Instead, you need to schedule the I/O operation and pass a continuation."
msgstr "O Quarkus é alimentado por um xref:quarkus-reactive-architecture.adoc#engine[mecanismo reativo] e, ao desenvolver um aplicativo reativo, seu código é executado em um dos poucos threads de E/S. Lembre-se de que o senhor nunca deve bloquear esses threads, e o modelo entraria em colapso se isso acontecesse. Portanto, o senhor não pode usar o bloqueio de E/S. Em vez disso, o senhor precisa agendar a operação de E/S e passar uma continuação."

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"The Mutiny event-driven paradigm is tailored for this.\n"
"When the I/O operation completes successfully, the Uni that represents it emits an item event.\n"
"When it fails, it emits a failure event.\n"
"The continuation is simply and naturally expressed using the event-driven API."
msgstr "O paradigma orientado por eventos do Mutiny é feito sob medida para isso. Quando a operação de E/S é concluída com êxito, o Uni que a representa emite um evento de item. Quando ela falha, emite um evento de falha. A continuação é expressa de forma simples e natural usando a API orientada por eventos."

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "Mutiny through Examples"
msgstr "Motim por meio de exemplos"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "Many Quarkus extensions expose Mutiny APIs. In this section, we use the MongoDB extension to illustrate how to use Mutiny."
msgstr "Muitas extensões do Quarkus expõem as APIs do Mutiny. Nesta seção, usamos a extensão MongoDB para ilustrar como usar o Mutiny."

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "Let's imagine a simple structure representing an element from the https://en.wikipedia.org/wiki/Periodic_table[periodic table]:"
msgstr "Vamos imaginar uma estrutura simples que represente um elemento da link:https://en.wikipedia.org/wiki/Periodic_table[tabela periód] ica:"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"This structure contains the name, symbol, and position of the element.\n"
"To retrieve and store elements into a Mongo collection, you can use the following code:"
msgstr "Essa estrutura contém o nome, o símbolo e a posição do elemento. Para recuperar e armazenar elementos em uma coleção do Mongo, o senhor pode usar o seguinte código:"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"First, the Mongo client is injected.\n"
"Note that it uses the reactive variant (`io.quarkus.mongodb.reactive.ReactiveMongoClient`).\n"
"In the initialize method, we retrieve and store the collection in which elements will be inserted."
msgstr "Primeiro, o cliente Mongo é injetado. Observe que ele usa a variante reativa ( `io.quarkus.mongodb.reactive.ReactiveMongoClient` ). No método initialize, recuperamos e armazenamos a coleção na qual os elementos serão inseridos."

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"The `add` method inserts an element in the collection.\n"
"It receives the element as a parameter and uses the reactive API of the collection.\n"
"Interacting with the database involves I/Os.\n"
"The reactive principles forbid blocking while waiting for the interaction to complete.\n"
"Instead, we schedule the operation and pass a continuation.\n"
"The `insertOne` method returns a Uni, i.e., an asynchronous operation.\n"
"That's the scheduled I/O. We now need to express the continuation, which is done using the `.onItem()` method.\n"
"`.onItem()` allows configuring what needs to happen when the observed Uni emits an item, in our case when the scheduled I/Os completes.\n"
"In this example, we extract the inserted document id.\n"
"The final step is the subscription.\n"
"Without it, nothing would ever happen. Subscribing triggers the operation.\n"
"The subscription method can also define handlers:  the `id` value on success, or a failure when the insertion fails."
msgstr "O método `add` insere um elemento na coleção. Ele recebe o elemento como parâmetro e usa a API reativa da coleção. A interação com o banco de dados envolve I/Os. Os princípios reativos proíbem o bloqueio enquanto se aguarda a conclusão da interação. Em vez disso, programamos a operação e passamos uma continuação. O método `insertOne` retorna um Uni, ou seja, uma operação assíncrona. Essa é a E/S programada. Agora precisamos expressar a continuação, o que é feito usando o método `.onItem()` . O `.onItem()` permite configurar o que precisa acontecer quando o Uni observado emite um item, no nosso caso, quando as E/Ss programadas são concluídas. Neste exemplo, extraímos o ID do documento inserido. A etapa final é a assinatura. Sem ela, nada aconteceria. A assinatura aciona a operação. O método de assinatura também pode definir manipuladores: o valor `id` em caso de sucesso ou uma falha quando a inserção falhar."

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"Let's now look at the second method.\n"
"It retrieves all the stored elements.\n"
"In this case, it returns multiple items (one per stored element), so we are using a `Multi`.\n"
"As for the insertion, getting the stored elements involves I/Os.\n"
"The `find` is our operation.\n"
"As for Uni, you need to subscribe to trigger the operation.\n"
"The subscriber receives item events, a failure event, or a completion event when all the elements have been received."
msgstr "Vejamos agora o segundo método. Ele recupera todos os elementos armazenados. Nesse caso, ele retorna vários itens (um por elemento armazenado), portanto, estamos usando um `Multi` . Quanto à inserção, a obtenção dos elementos armazenados envolve E/Ss. O `find` é a nossa operação. Quanto à Uni, o senhor precisa se inscrever para acionar a operação. O assinante recebe eventos de item, um evento de falha ou um evento de conclusão quando todos os elementos tiverem sido recebidos."

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"Subscribing to a Uni or a Multi is essential, as without it, the operation is never executed.\n"
"In Quarkus some extensions deal with the subscription for you.\n"
"For example, in RESTEasy Reactive your HTTP methods can return a Uni or a Multi, and RESTEasy Reactive handles the subscription."
msgstr "A assinatura de uma Uni ou Multi é essencial, pois, sem ela, a operação nunca é executada. No Quarkus, algumas extensões lidam com a assinatura para o senhor. Por exemplo, no RESTEasy Reactive, seus métodos HTTP podem retornar um Uni ou um Multi, e o RESTEasy Reactive cuida da assinatura."

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "Mutiny Patterns"
msgstr "Padrões de motim"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"The example from the last section was simplistic on purpose.\n"
"Let's have a look at a few common patterns."
msgstr "O exemplo da última seção foi simplista de propósito. Vamos dar uma olhada em alguns padrões comuns."

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "Observing events"
msgstr "Observação de eventos"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "You can observe the various kind of events using:"
msgstr "O senhor pode observar os vários tipos de eventos usando:"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "`on{event}().invoke(ev -> System.out.println(ev));`"
msgstr "`on{event}().invoke(ev → System.out.println(ev));`"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"For example, for items use:\n"
"`onItem().invoke(item -> ...);`"
msgstr "Por exemplo, para itens, use: `onItem().invoke(item → …​);`"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"For failure, use:\n"
"`onFailure().invoke(failure -> ...)`"
msgstr "Em caso de falha, use: `onFailure().invoke(failure → …​)`"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"The `invoke` method is synchronous.\n"
"Sometimes you need to execute an asynchronous action.\n"
"In this case use `call`, as in: `onItem().call(item -> someAsyncAction(item))`.\n"
"Note that `call` does not change the item, it just calls an asynchronous action, and when this one completes, it emits the original item downstream."
msgstr "O método `invoke` é síncrono. Às vezes, o senhor precisa executar uma ação assíncrona. Nesse caso, use `call` , como em: `onItem().call(item → someAsyncAction(item))` . Observe que o `call` não altera o item, ele apenas chama uma ação assíncrona e, quando essa ação é concluída, ele emite o item original a jusante."

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "Transforming item"
msgstr "Item de transformação"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"The first instrumental pattern consists of transforming the item events you receive.\n"
"As we have seen in the previous section, it could indicate the successful insertion, or the elements stored in the database."
msgstr "O primeiro padrão instrumental consiste em transformar os eventos de itens que o senhor recebe. Como vimos na seção anterior, ele pode indicar a inserção bem-sucedida ou os elementos armazenados no banco de dados."

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "Transforming an item is done using: `onItem().transform(item -> ....)`."
msgstr "A transformação de um item é feita por meio de: `onItem().transform(item → …​.)` ."

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "More details about transformation can be found in the https://smallrye.io/smallrye-mutiny/latest/tutorials/transforming-items/[Mutiny documentation]."
msgstr "Mais detalhes sobre a transformação podem ser encontrados na link:https://smallrye.io/smallrye-mutiny/latest/tutorials/transforming-items/[documentação do Mutiny] ."

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "Sequential composition"
msgstr "Composição sequencial"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"Sequential composition allows chaining dependent asynchronous operations. This is achieved using `onItem().transformToUni(item -> ...)`.\n"
"Unlike `transform`, the function passed to `transformToUni` returns a Uni."
msgstr "A composição sequencial permite encadear operações assíncronas dependentes. Isso é feito por meio do site `onItem().transformToUni(item → …​)` . Ao contrário de `transform` , a função passada para `transformToUni` retorna um Uni."

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "More details about asynchronous transformation can be found in the https://smallrye.io/smallrye-mutiny/latest/tutorials/transforming-items-asynchronously/[Mutiny documentation]."
msgstr "Mais detalhes sobre a transformação assíncrona podem ser encontrados na link:https://smallrye.io/smallrye-mutiny/latest/tutorials/transforming-items-asynchronously/[documentação do Mutiny] ."

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "Failure handling"
msgstr "Tratamento de falhas"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "So far we only handle the item events, but handling failure is essential. You can handle failures using `onFailure()`."
msgstr "Até o momento, tratamos apenas os eventos de itens, mas o tratamento de falhas é essencial. O senhor pode tratar as falhas usando `onFailure()` ."

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "For example, you can recover with a fallback item using `onFailure().recoverWithItem(fallback)`:"
msgstr "Por exemplo, o senhor pode se recuperar com um item de fallback usando `onFailure().recoverWithItem(fallback)` :"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "You can also retry the operation such as in:"
msgstr "O senhor também pode tentar novamente a operação, como em:"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "More info about failure recovery can be found on https://smallrye.io/smallrye-mutiny/latest/tutorials/handling-failures/[the handling failure documentation] and https://smallrye.io/smallrye-mutiny/latest/tutorials/retrying/[the retrying on failures documentation]."
msgstr "Mais informações sobre a recuperação de falhas podem ser encontradas na link:https://smallrye.io/smallrye-mutiny/latest/tutorials/handling-failures/[documentação sobre como lidar com falhas] e na link:https://smallrye.io/smallrye-mutiny/latest/tutorials/retrying/[documentação sobre tentar novamente em caso de falhas] ."

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "Events and Actions"
msgstr "Eventos e ações"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "The following tables list the events that you can receive for Uni and Multi. Each of them is associated with its own group (onX). The second table lists the classic action you can do upon an event. Note that some groups offer more possibilities."
msgstr "As tabelas a seguir listam os eventos que o senhor pode receber para Uni e Multi. Cada um deles está associado a seu próprio grupo (onX). A segunda tabela lista a ação clássica que o senhor pode realizar em um evento. Observe que alguns grupos oferecem mais possibilidades."

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "Events from the upstream"
msgstr "Eventos do upstream"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "Events from the downstream"
msgstr "Eventos do downstream"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "Uni"
msgstr "Uni"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "Subscription (1), Item (0..1), failure (0..1)"
msgstr "Assinatura (1), Item (0...1), falha (0...1)"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "Cancellation"
msgstr "Cancelamento"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "Multi"
msgstr "Multi"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "Subscription (1), Item (0..n), failure (0..1), completion (0..1)"
msgstr "Assinatura (1), Item (0...n), falha (0...1), conclusão (0...1)"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "Cancellation, Request"
msgstr "Cancelamento, solicitação"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "Check the full list of events on https://smallrye.io/smallrye-mutiny/latest/tutorials/observing-events/[the event documentation]."
msgstr "Confira a lista completa de eventos na link:https://smallrye.io/smallrye-mutiny/latest/tutorials/observing-events/[documentação do evento] ."

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "Action"
msgstr "Ação"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "API"
msgstr "API"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "Comment"
msgstr "Comentário"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "transform"
msgstr "transformar"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "`onItem().transform(Function<I, O> function);`"
msgstr "`onItem().transform(Function<I, O> function);`"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"Transform the event into another event using a synchronous function.\n"
"The downstream receives the result of the function (or a failure if the transformation failed)."
msgstr "Transforme o evento em outro evento usando uma função síncrona. O downstream recebe o resultado da função (ou uma falha se a transformação falhar)."

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "transformToUni"
msgstr "transformToUni"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "`onItem().transformToUni(Function<I, Uni<O>> function);`"
msgstr "`onItem().transformToUni(Function<I, Uni<O>> function);`"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "Transform the event into another event using an asynchronous function. The downstream receives the item emitted by the produced Uni (or a failure if the transformation failed). If the produced Uni emits a failure, that failure is passed to the downstream."
msgstr "Transforme o evento em outro evento usando uma função assíncrona. O downstream recebe o item emitido pelo Uni produzido (ou uma falha se a transformação falhar). Se o Uni produzido emitir uma falha, essa falha será passada para o downstream."

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "invoke"
msgstr "invocar"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "`onItem().invoke(Consumer<I> consumer)`"
msgstr "`onItem().invoke(Consumer<I> consumer)`"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "Invokes the synchronous consumer. This is particularly convenient to execute side effects actions. The downstream receives the original event, or a failure if the consumer throws an exception"
msgstr "Invoca o consumidor síncrono. Isso é particularmente conveniente para executar ações de efeitos colaterais. O downstream recebe o evento original ou uma falha se o consumidor lançar uma exceção"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "call"
msgstr "chamada"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "`onItem().call(Function<I, Uni<?>>)`"
msgstr "`onItem().call(Function<I, Uni<?>>)`"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "Invokes the asynchronous function. This is particularly convenient to execute asynchronous side effect actions.The downstream receives the original event, or a failure if the consumer throws an exception or if the produced Uni emits a failure."
msgstr "Invoca a função assíncrona. O downstream recebe o evento original ou uma falha se o consumidor lançar uma exceção ou se a Uni produzida emitir uma falha."

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "fail"
msgstr "falhar"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "`onItem().failWith(Function<I, Throwable>)`"
msgstr "`onItem().failWith(Function<I, Throwable>)`"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "Emits a failure when it receives the event."
msgstr "Emite uma falha quando recebe o evento."

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "complete (Multi only)"
msgstr "completo (somente Multi)"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "`onItem().complete()`"
msgstr "`onItem().complete()`"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "Emits the completion event when it receives the event."
msgstr "Emite o evento de conclusão quando recebe o evento."

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "Other patterns"
msgstr "Outros padrões"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"Mutiny provides lots of other features.\n"
"Head over to the https://smallrye.io/smallrye-mutiny[Mutiny documentation] to see many more examples, including the whole list of events and how to handle them."
msgstr "O Mutiny oferece muitos outros recursos. Acesse a link:https://smallrye.io/smallrye-mutiny[documentação do Mutiny] para ver muitos outros exemplos, inclusive a lista completa de eventos e como lidar com eles."

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "Some frequently asked guides are the following:"
msgstr "Alguns guias frequentemente solicitados são os seguintes:"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "merge vs. concatenation - https://smallrye.io/smallrye-mutiny/latest/guides/merging-and-concatenating-streams/"
msgstr "merge vs. concatenation - https://smallrye.io/smallrye-mutiny/latest/guides/merging-and-concatenating-streams/"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "controlling the emission thread - https://smallrye.io/smallrye-mutiny/latest/guides/emit-on-vs-run-subscription-on/"
msgstr "controle da linha de emissão - https://smallrye.io/smallrye-mutiny/latest/guides/emit-on-vs-run-subscription-on/"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "explicit blocking  - https://smallrye.io/smallrye-mutiny/latest/guides/imperative-to-reactive/"
msgstr "Bloqueio explícito - https://smallrye.io/smallrye-mutiny/latest/guides/imperative-to-reactive/"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "Shortcuts"
msgstr "Atalhos"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"When using Uni, having to write `onItem()` can be cumbersome.\n"
"Fortunately, Mutiny provides a set of shortcut to make your code more concise:"
msgstr "Ao usar o Uni, ter de escrever `onItem()` pode ser complicado. Felizmente, o Mutiny oferece um conjunto de atalhos para tornar seu código mais conciso:"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "Shortcut"
msgstr "Atalho"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "Equivalent"
msgstr "Equivalente"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "`uni.map(x -> y)`"
msgstr "`uni.map(x → y)`"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "`uni.onItem().transform(x -> y)`"
msgstr "`uni.onItem().transform(x → y)`"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "`uni.flatMap(x -> uni2)`"
msgstr "`uni.flatMap(x → uni2)`"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "`uni.onItem().transformToUni(x -> uni2)`"
msgstr "`uni.onItem().transformToUni(x → uni2)`"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "`uni.chain(x -> uni2)`"
msgstr "`uni.chain(x → uni2)`"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "`uni.invoke(x -> System.out.println(x))`"
msgstr "`uni.invoke(x → System.out.println(x))`"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "`uni.onItem().invoke(x -> System.out.println(x))`"
msgstr "`uni.onItem().invoke(x → System.out.println(x))`"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "`uni.call(x -> uni2)`"
msgstr "`uni.call(x → uni2)`"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "`uni.onItem().call(x -> uni2)`"
msgstr "`uni.onItem().call(x → uni2)`"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "`uni.eventually\\(() -> System.out.println(\"eventually\"))`"
msgstr "`uni.eventually(() → System.out.println(\"eventually\"))`"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "`uni.onItemOrFailure().invoke\\((ignoredItem, ignoredException) -> System.out.println(\"eventually\"))`"
msgstr "`uni.onItemOrFailure().invoke((ignoredItem, ignoredException) → System.out.println(\"eventually\"))`"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "`uni.eventually(() -> uni2)`"
msgstr "`uni.eventually(() → uni2)`"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "`uni.onItemOrFailure().call((ignoredItem, ignoredException) -> uni2)`"
msgstr "`uni.onItemOrFailure().call((ignoredItem, ignoredException) → uni2)`"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "`uni.replaceWith(x)`"
msgstr "`uni.replaceWith(x)`"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "`uni.onItem().transform(ignored -> x)`"
msgstr "`uni.onItem().transform(ignored → x)`"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "`uni.replaceWith(uni2)`"
msgstr "`uni.replaceWith(uni2)`"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "`uni.onItem().transformToUni(ignored -> uni2)`"
msgstr "`uni.onItem().transformToUni(ignored → uni2)`"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "`uni.replaceIfNullWith(x)`"
msgstr "`uni.replaceIfNullWith(x)`"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "`uni.onItem().ifNull().continueWith(x)`"
msgstr "`uni.onItem().ifNull().continueWith(x)`"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "Reactive Streams"
msgstr "Fluxos reativos"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"Mutiny uses https://www.reactive-streams.org/[Reactive Streams].\n"
"`Multi` implements `Publisher` and enforces the back-pressure protocol.\n"
"Emissions are constrained by the request emitted from the downstream subscribers.\n"
"Thus, it does not overload the subscribers.\n"
"Note that in some cases, you can’t follow this protocol (because the Multi emits events that can’t be controlled, such as time, or measures sensors).\n"
"In this case, Mutiny provides a way to control the overflow using `onOverflow()`."
msgstr "O Mutiny usa link:https://www.reactive-streams.org/[fluxos reativos] . O site `Multi` implementa o `Publisher` e aplica o protocolo de contrapressão. As emissões são limitadas pela solicitação emitida pelos assinantes downstream. Assim, ele não sobrecarrega os assinantes. Observe que, em alguns casos, não é possível seguir esse protocolo (porque o Multi emite eventos que não podem ser controlados, como tempo, ou mede sensores). Nesse caso, o Mutiny oferece uma maneira de controlar o estouro usando `onOverflow()` ."

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"`Uni` does not implement Reactive Streams `Publisher`.\n"
"A `Uni` can only emit one event, so subscribing to the `Uni` is enough to express your intent to use the result and does not need the request protocol ceremony."
msgstr "`Uni` não implementa o Reactive Streams `Publisher` . Um `Uni` só pode emitir um evento, portanto, a assinatura do `Uni` é suficiente para expressar sua intenção de usar o resultado e não precisa da cerimônia do protocolo de solicitação."

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "Mutiny and Vert.x"
msgstr "Mutiny e Vert.x"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"Vert.x is a toolkit to build reactive applications and systems.\n"
"It provides a huge ecosystem of libraries following the reactive principles (i.e., non-blocking and asynchronous).\n"
"Vert.x is an essential part of Quarkus, as it provides its reactive capabilities."
msgstr "O Vert.x é um kit de ferramentas para criar aplicativos e sistemas reativos. Ele oferece um enorme ecossistema de bibliotecas que seguem os princípios reativos (ou seja, sem bloqueio e assíncrono). O Vert.x é uma parte essencial do Quarkus, pois fornece seus recursos reativos."

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"In addition, the whole Vert.x API can be used with Quarkus.\n"
"To provide a cohesive experience, the Vert.x API is also available using a Mutiny variant, i.e., returns Uni and Multi."
msgstr "Além disso, toda a API Vert.x pode ser usada com o Quarkus. Para proporcionar uma experiência coesa, a API Vert.x também está disponível usando uma variante Mutiny, ou seja, retorna Uni e Multi."

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "More details about this API can be found on: https://quarkus.io/blog/mutiny-vertx/."
msgstr "Mais detalhes sobre essa API podem ser encontrados em: link:https://quarkus.io/blog/mutiny-vertx/[https://quarkus.io/blog/mutiny-vertx/.]"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "Mutiny Integration in Quarkus"
msgstr "Integração de motim em Quarkus"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid ""
"The integration of Mutiny in Quarkus goes beyond just the library.\n"
"Mutiny exposes hooks that allow Quarkus and Mutiny to be closely integrated:"
msgstr "A integração do Mutiny no Quarkus vai além da biblioteca. A Mutiny expõe ganchos que permitem que o Quarkus e a Mutiny sejam estreitamente integrados:"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "Calling `await` or `toIterable` would fail if you are running on an I/O thread, preventing blocking the I/O thread;"
msgstr "A chamada para `await` ou `toIterable` falharia se o senhor estivesse em execução em um thread de E/S, evitando o bloqueio do thread de E/S;"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "The `log()` operator use the Quarkus logger;"
msgstr "O operador do `log()` usa o registrador Quarkus;"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "The default Mutiny thread pool is the Quarkus worker thread pool;"
msgstr "O pool de threads padrão do Mutiny é o pool de threads de trabalho do Quarkus;"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "Context Propagation is enabled by default when using Mutiny Uni and Multi"
msgstr "A propagação de contexto é ativada por padrão ao usar o Mutiny Uni e o Multi"

#: _versions/3.6/guides/mutiny-primer.adoc
#, fuzzy
msgid "More details about the infrastructure integration can be found on https://smallrye.io/smallrye-mutiny/latest/guides/framework-integration/."
msgstr "Mais detalhes sobre a integração da infraestrutura podem ser encontrados em link:https://smallrye.io/smallrye-mutiny/latest/guides/framework-integration/[https://smallrye.io/smallrye-mutiny/latest/guides/framework-integration/.]"
