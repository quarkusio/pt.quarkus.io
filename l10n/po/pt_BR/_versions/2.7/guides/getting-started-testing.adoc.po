# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:09+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/2.7/guides/getting-started-testing.adoc
#, no-wrap
msgid "Testing Your Application"
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"Learn how to test your Quarkus Application.\n"
"This guide covers:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "Testing in JVM mode"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "Testing in native mode"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "Injection of resources into tests"
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/getting-started-testing.adoc
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "The completed greeter application from the xref:getting-started.adoc[Getting Started Guide]"
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/getting-started-testing.adoc
#, no-wrap
msgid "Architecture"
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"In this guide, we expand on the initial test that was created as part of the Getting Started Guide.\n"
"We cover injection into tests and also how to test native executables."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "Quarkus supports Continuous testing, but this is covered by the xref:continuous-testing.adoc[Continuous Testing Guide]."
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/getting-started-testing.adoc
#, no-wrap
msgid "Solution"
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "The solution is located in the `getting-started-testing` {quickstarts-tree-url}/getting-started-testing[directory]."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "This guide assumes you already have the completed application from the `getting-started` directory."
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/getting-started-testing.adoc
#, no-wrap
msgid "Recap of HTTP based Testing in JVM mode"
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"If you have started from the Getting Started example you should already have a completed test, including the correct\n"
"`pom.xml` setup."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "In the `pom.xml` file you should see 2 test dependencies:"
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"`quarkus-junit5` is required for testing, as it provides the `@QuarkusTest` annotation that controls the testing framework.\n"
"`rest-assured` is not required but is a convenient way to test HTTP endpoints, we also provide integration that automatically\n"
"sets the correct URL so no configuration is required."
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"Because we are using JUnit 5, the version of the https://maven.apache.org/surefire/maven-surefire-plugin/[Surefire Maven Plugin]\n"
"must be set, as the default version does not support Junit 5:"
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"We also set the `java.util.logging.manager` system property to make sure tests will use the correct logmanager and `maven.home` to ensure that custom configuration\n"
"from `${maven.home}/conf/settings.xml` is applied (if any)."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "The project should also contain a simple test:"
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"This test uses HTTP to directly test our REST endpoint. When the test is run the application will be started before\n"
"the test is run."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/getting-started-testing.adoc
#, no-wrap
msgid "Controlling the test port"
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"While Quarkus will listen on port `8080` by default, when running tests it defaults to `8081`. This allows you to run\n"
"tests while having the application running in parallel."
msgstr ""

#. type: Block title
#: _versions/2.7/guides/getting-started-testing.adoc
#, no-wrap
msgid "Changing the test port"
msgstr ""

#. type: delimited block =
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "You can configure the ports used by tests by configuring `quarkus.http.test-port` for HTTP and `quarkus.http.test-ssl-port` for HTTPS in your `application.properties`:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "`0` will result in the use of a random port (assigned by the operating system)."
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"Quarkus also provides RestAssured integration that updates the default port used by RestAssured before the tests are run,\n"
"so no additional configuration should be required."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/getting-started-testing.adoc
#, no-wrap
msgid "Controlling HTTP interaction timeout"
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"When using REST Assured in your test, the connection and response timeouts are set to 30 seconds.\n"
"You can override this setting with the `quarkus.http.test-timeout` property:"
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/getting-started-testing.adoc
#, no-wrap
msgid "Injecting a URI"
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"It is also possible to directly inject the URL into the test which can make is easy to use a different client. This is\n"
"done via the `@TestHTTPResource` annotation."
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"Let's write a simple test that shows this off to load some static resources. First create a simple HTML file in\n"
"`src/main/resources/META-INF/resources/index.html` :"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "We will create a simple test to ensure that this is being served correctly:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "This annotation allows you to directly inject the URL of the Quarkus instance, the value of the annotation will be the path component of the URL"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "For now `@TestHTTPResource` allows you to inject `URI`, `URL` and `String` representations of the URL."
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/getting-started-testing.adoc
#, no-wrap
msgid "Testing a specific endpoint"
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"Both RESTassured and `@TestHTTPResource` allow you to specify the endpoint class you are testing rather than hard coding\n"
"a path. This currently supports both JAX-RS endpoints, Servlets and Reactive Routes. This makes it a lot easier to see exactly which endpoints\n"
"a given test is testing."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "For the purposes of these examples I am going to assume we have an endpoint that looks like the following:"
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"This currently does not support the `@ApplicationPath()` annotation to set the JAX-RS context path. Use the\n"
"`quarkus.resteasy.path` config value instead if you want a custom context path."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/getting-started-testing.adoc
#, no-wrap
msgid "TestHTTPResource"
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"You can the use the `io.quarkus.test.common.http.TestHTTPEndpoint` annotation to specify the endpoint path, and the path\n"
"will be extracted from the provided endpoint. If you also specify a value for the `TestHTTPResource` endpoint it will\n"
"be appended to the end of the endpoint path."
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"Because `GreetingResource` is annotated with `@Path(\"/hello\")` the injected URL\n"
"will end with `/hello`."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/getting-started-testing.adoc
#, no-wrap
msgid "RESTassured"
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"To control the RESTassured base path (i.e. the default path that serves as the root for every\n"
"request) you can use the `io.quarkus.test.common.http.TestHTTPEndpoint` annotation. This can\n"
"be applied at the class or method level. To test out greeting resource we would do:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "This tells RESTAssured to prefix all requests with `/hello`."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "Note we don't need to specify a path here, as `/hello` is the default for this test"
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/getting-started-testing.adoc
#, no-wrap
msgid "Injection into tests"
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"So far we have only covered integration style tests that test the app via HTTP endpoints, but what if we want to do unit\n"
"testing and test our beans directly?"
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"Quarkus supports this by allowing you to inject CDI beans into your tests via the `@Inject` annotation (in fact, tests in\n"
"Quarkus are full CDI beans, so you can use all CDI functionality). Let's create a simple test that tests the greeting\n"
"service directly without using HTTP:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "The `GreetingService` bean will be injected into the test"
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/getting-started-testing.adoc
#, no-wrap
msgid "Applying Interceptors to Tests"
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"As mentioned above Quarkus tests are actually full CDI beans, and as such you can apply CDI interceptors as you would\n"
"normally. As an example, if you want a test method to run within the context of a transaction you can simply apply the\n"
"`@Transactional` annotation to the method and the transaction interceptor will handle it."
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"In addition to this you can also create your own test stereotypes. For example we could create a `@TransactionalQuarkusTest`\n"
"as follows:"
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"If we then apply this annotation to a test class it will act as if we had applied both the `@QuarkusTest` and\n"
"`@Transactional` annotations, e.g.:"
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/getting-started-testing.adoc
#, no-wrap
msgid "Tests and Transactions"
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"You can use the standard Quarkus `@Transactional` annotation on tests, but this means that the changes your\n"
"test makes to the database will be persistent. If you want any changes made to be rolled back at the end of\n"
"the test you can use the `io.quarkus.test.TestTransaction` annotation. This will run the test method in a\n"
"transaction, but roll it back once the test method is complete to revert any database changes."
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/getting-started-testing.adoc
#, no-wrap
msgid "Enrichment via QuarkusTest*Callback"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "Alternatively or additionally to an interceptor, you can enrich *all* your `@QuarkusTest` classes by implementing the following callback interfaces:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "`io.quarkus.test.junit.callback.QuarkusTestBeforeClassCallback`"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "`io.quarkus.test.junit.callback.QuarkusTestAfterConstructCallback`"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "`io.quarkus.test.junit.callback.QuarkusTestBeforeEachCallback`"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "`io.quarkus.test.junit.callback.QuarkusTestAfterEachCallback`"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "Such a callback implementation has to be registered as a \"service provider\" as defined by `java.util.ServiceLoader`."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "E.g. the following sample callback:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "has to be registered via `src/main/resources/META-INF/services/io.quarkus.test.junit.callback.QuarkusTestBeforeEachCallback` as follows:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "It is possible to read annotations from the test class or method to control what the callback shall be doing."
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"While it is possible to use JUnit Jupiter callback interfaces like `BeforeEachCallback`, you might run into classloading issues because Quarkus has\n"
"         to run tests in a custom classloader which JUnit is not aware of."
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/getting-started-testing.adoc
#, no-wrap
msgid "Testing Different Profiles"
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"So far in all our examples we only start Quarkus once for all tests. Before the first test is run Quarkus will boot,\n"
"then all tests will run, then Quarkus will shutdown at the end. This makes for a very fast testing experience however\n"
"it is a bit limited as you can't test different configurations."
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"To get around this Quarkus supports the idea of a test profile. If a test has a different profile to the previously\n"
"run test then Quarkus will be shut down and started with the new profile before running the tests. This is obviously\n"
"a bit slower, as it adds a shutdown/startup cycle to the test time, but gives a great deal of flexibility."
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"To reduce the amount of times Quarkus needs to restart, `io.quarkus.test.junit.util.QuarkusTestProfileAwareClassOrderer`\n"
"is registered as a global `ClassOrderer` as described in the\n"
"link:https://junit.org/junit5/docs/current/user-guide/#writing-tests-test-execution-order-classes[JUnit 5 User Guide].\n"
"The behavior of this orderer is configurable via `junit-platform.properties` (see the source code or javadoc for more details).\n"
"It can also be disabled entirely by setting another orderer that is provided by JUnit 5 or even your own custom one. +\n"
"Please note that as of JUnit 5.8.2 link:https://github.com/junit-team/junit5/issues/2794[only a single `junit-platform.properties` is picked up and a warning is logged if more than one is found].\n"
"If you encounter such warnings, you can can get rid of them by removing the Quarkus-supplied `junit-platform.properties` from the classpath via an exclusion:"
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/getting-started-testing.adoc
#, no-wrap
msgid "Writing a Profile"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "To implement a test profile we need to implement `io.quarkus.test.junit.QuarkusTestProfile`:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "All these methods have default implementations so just override the ones you need to override."
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"Now we have defined our profile we need to include it on our test class.\n"
"We do this by annotating the test class with `@TestProfile(MockGreetingProfile.class)`."
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"All the test profile configuration is stored in a single class, which makes it easy to tell if the previous test ran with the\n"
"same configuration."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/getting-started-testing.adoc
#, no-wrap
msgid "Running specific tests"
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"Quarkus provides the ability to limit test execution to tests with specific  `@TestProfile` annotations.\n"
"This works by leveraging the `tags` method of `QuarkusTestProfile` in conjunction with the `quarkus.test.profile.tags` system property."
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"Essentially, any `QuarkusTestProfile` with at least one matching tag matching the value of `quarkus.test.profile.tags` will be considered active\n"
"and all the tests annotated with `@TestProfile` of active profiles, will be run while the rest will be skipped.\n"
"This is best shown in the following example."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "First let's define a few `QuarkusTestProfile` implementations like so:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "Now let's assume that we have the following tests:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "Let's consider the following scenarios:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "`quarkus.test.profile.tags` is not set: All tests will be executed."
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"`quarkus.test.profile.tags=foo`: In this case none of tests will be executed because none of the tags defined on the `QuarkusTestProfile` implementations match the value of `quarkus.test.profile.tags`.\n"
"Note that `NoQuarkusProfileTest` is not executed either because it is not annotated with `@TestProfile`."
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"`quarkus.test.profile.tags=test1`: In this case `SingleTagTest` and `MultipleTagsTest` will be run because the tags on their respective `QuarkusTestProfile` implementations\n"
"match the value of `quarkus.test.profile.tags`."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "`quarkus.test.profile.tags=test1,test3`: This case results in the same tests being executed as the previous case."
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"`quarkus.test.profile.tags=test2,test3`: In this case only `MultipleTagsTest` will be run because `MultipleTagsTest` is the only `QuarkusTestProfile` implementation whose `tags` method\n"
"matches the value of `quarkus.test.profile.tags`."
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/getting-started-testing.adoc
#, no-wrap
msgid "Mock Support"
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"Quarkus supports the use of mock objects using two different approaches. You can either use CDI alternatives to\n"
"mock out a bean for all test classes, or use `QuarkusMock` to mock out beans on a per test basis."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/getting-started-testing.adoc
#, no-wrap
msgid "CDI `@Alternative` mechanism."
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"To use this simply override the bean you wish to mock with a class in the `src/test/java` directory, and put the `@Alternative` and `@Priority(1)` annotations on the bean.\n"
"Alternatively, a convenient `io.quarkus.test.Mock` stereotype annotation could be used.\n"
"This built-in stereotype declares `@Alternative`, `@Priority(1)` and `@Dependent`.\n"
"For example if I have the following service:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "I could mock it with the following class in `src/test/java`:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "Overrides the `@Dependent` scope declared on the `@Mock` stereotype."
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"It is important that the alternative be present in the `src/test/java` directory rather than `src/main/java`, as otherwise\n"
"it will take effect all the time, not just when testing."
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"Note that at present this approach does not work with native image testing, as this would required the test alternatives\n"
"to be baked into the native image."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/getting-started-testing.adoc
#, no-wrap
msgid "Mocking using QuarkusMock"
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"The `io.quarkus.test.junit.QuarkusMock` class can be used to temporarily mock out any normal scoped\n"
"bean. If you use this method in a `@BeforeAll` method the mock will take effect for all tests on the current class,\n"
"while if you use this in a test method the mock will only take effect for the duration of the current test."
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"This method can be used for any normal scoped CDI bean (e.g. `@ApplicationScoped`, `@RequestScoped` etc, basically\n"
"every scope except `@Singleton` and `@Dependent`)."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "An example usage could look like:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "As the injected instance is not available here we use `installMockForType`, this mock is used for both test methods"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "We use `installMockForInstance` to replace the injected bean, this takes effect for the duration of the test method."
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"Note that there is no dependency on Mockito, you can use any mocking library you like, or even manually override the\n"
"objects to provide the behaviour you require."
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"Using `@Inject` will get you a CDI proxy to the mock instance you install, which is not suitable for passing to methods such as `Mockito.verify`\n"
"which want the mock instance itself. So if you need to call methods such as `verify` you need to hang on to the mock instance in your test, or use `@InjectMock`\n"
"as shown below."
msgstr ""

#. type: Title ====
#: _versions/2.7/guides/getting-started-testing.adoc
#, no-wrap
msgid "Further simplification with `@InjectMock`"
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"Building on the features provided by `QuarkusMock`, Quarkus also allows users to effortlessly take advantage of link:https://site.mockito.org/[Mockito] for mocking the beans supported by `QuarkusMock`.\n"
"This functionality is available via the `@io.quarkus.test.junit.mockito.InjectMock` annotation which is available in the `quarkus-junit5-mockito` dependency."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "Using `@InjectMock`, the previous example could be written as follows:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "`@InjectMock` results in a mock being and is available in test methods of the test class (other test classes are *not* affected by this)"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "The `mockableBean1` is configured here for every test method of the class"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "Since the `mockableBean2` mock has not been configured, it will return the default Mockito response."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "In this test the `mockableBean2` is configured, so it returns the configured response."
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"Although the test above is good for showing the capabilities of `@InjectMock`, it is not a good representation of a real test. In a real test\n"
"we would most likely configure a mock, but then test a bean that uses the mocked bean.\n"
"Here is an example:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "Since we configured `greetingService` as a mock, the `GreetingResource` which uses the `GreetingService` bean, we get the mocked response instead of the response of the regular `GreetingService` bean"
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"By default the `@InjectMock` annotation can be used for any normal CDI scoped bean (e.g. `@ApplicationScoped`, `@RequestScoped`).\n"
"Mocking `@Singleton` beans can be performed by setting the `convertScopes` property to true (such as `@InjectMock(convertScopes = true`).\n"
"This will convert the `@Singleton` bean to an `@ApplicationScoped` bean for the test."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "This is considered an advanced option and should only be performed if you fully understand the consequences of changing the scope of the bean."
msgstr ""

#. type: Title ====
#: _versions/2.7/guides/getting-started-testing.adoc
#, no-wrap
msgid "Using Spies instead of Mocks with `@InjectSpy`"
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"Building on the features provided by `InjectMock`, Quarkus also allows users to effortlessly take advantage of link:https://site.mockito.org/[Mockito] for spying on the beans supported by `QuarkusMock`.\n"
"This functionality is available via the `@io.quarkus.test.junit.mockito.InjectSpy` annotation which is available in the `quarkus-junit5-mockito` dependency."
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"Sometimes when testing you only need to verify that a certain logical path was taken, or you only need to stub out a single method's response while still executing the rest of the methods on the Spied clone. Please see link:https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#spy-T-[Mockito documentation] for more details on Spy partial mocks.\n"
"In either of those situations a Spy of the object is preferable.\n"
"Using `@InjectSpy`, the previous example could be written as follows:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "Instead of overriding the value, we just want to ensure that the greet method on our `GreetingService` was called by this test."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "Here we are telling the Spy to return \"hi\" instead of \"hello\". When the `GreetingResource` requests the greeting from `GreetingService` we get the mocked response instead of the response of the regular `GreetingService` bean"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "We are verifying that we get the mocked response from the Spy."
msgstr ""

#. type: Title ====
#: _versions/2.7/guides/getting-started-testing.adoc
#, no-wrap
msgid "Using `@InjectMock` with `@RestClient`"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "The `@RegisterRestClient` registers the implementation of the rest-client at runtime, and because the bean needs to be a regular scope, you have to annotate your interface with `@ApplicationScoped`."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "For the test class here is an example:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "Indicate that this injection point is meant to use an instance of `RestClient`."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/getting-started-testing.adoc
#, no-wrap
msgid "Mocking with Panache"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "If you are using the `quarkus-hibernate-orm-panache` or `quarkus-mongodb-panache` extensions, check out the xref:hibernate-orm-panache.adoc#mocking[Hibernate ORM with Panache Mocking] and xref:mongodb-panache.adoc#mocking[MongoDB with Panache Mocking] documentation for the easiest way to mock your data access."
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/getting-started-testing.adoc
#, no-wrap
msgid "Testing Security"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "If you are using Quarkus Security, check out the xref:security-testing.adoc[Testing Security] section for information on how to easily test security features of the application."
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/getting-started-testing.adoc
#, no-wrap
msgid "Starting services before the Quarkus application starts"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "A very common need is to start some services on which your Quarkus application depends, before the Quarkus application starts for testing. To address this need, Quarkus provides `@io.quarkus.test.common.QuarkusTestResource` and `io.quarkus.test.common.QuarkusTestResourceLifecycleManager`."
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"By simply annotating any test in the test suite with `@QuarkusTestResource`, Quarkus will run the corresponding `QuarkusTestResourceLifecycleManager` before any tests are run.\n"
"A test suite is also free to utilize multiple `@QuarkusTestResource` annotations, in which case all the corresponding `QuarkusTestResourceLifecycleManager` objects will be run before the tests. When using multiple test resources they can be started concurrently. For that you need to set `@QuarkusTestResource(parallel = true)`."
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"test resources are global, even if they are defined on a test class or custom profile, which means they will all be activated for all tests, even though we do\n"
"remove duplicates. If you want to only enable a test resource on a single test class or test profile, you can use `@QuarkusTestResource(restrictToAnnotatedClass = true)`."
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"Quarkus provides a few implementations of `QuarkusTestResourceLifecycleManager` out of the box (see `io.quarkus.test.h2.H2DatabaseTestResource` which starts an H2 database, or `io.quarkus.test.kubernetes.client.KubernetesServerTestResource` which starts a mock Kubernetes API server),\n"
"but it is common to create custom implementations to address specific application needs.\n"
"Common cases include starting docker containers using https://www.testcontainers.org/[Testcontainers] (an example of which can be found https://github.com/quarkusio/quarkus/blob/main/test-framework/keycloak-server/src/main/java/io/quarkus/test/keycloak/server/KeycloakTestResourceLifecycleManager.java[here]),\n"
"or starting a mock HTTP server using http://wiremock.org/[Wiremock] (an example of which can be found https://github.com/geoand/quarkus-test-demo/blob/main/src/test/java/org/acme/getting/started/country/WiremockCountries.java[here])."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/getting-started-testing.adoc
#, no-wrap
msgid "Altering the test class"
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"When creating a custom `QuarkusTestResourceLifecycleManager` that needs to inject the something into the test class, the `inject` methods can be used.\n"
"If for example you have a test like the following:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "Making `MyWireMockResource` inject the `wireMockServer` field can be done as shown in the `inject` method of the following code snippet:"
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"It is worth mentioning that this injection into the test class is not under the control of CDI and happens after CDI has performed\n"
"any necessary injections into the test class."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/getting-started-testing.adoc
#, no-wrap
msgid "Annotation-based test resources"
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"It is possible to write test resources that are enabled and configured using annotations. This is enabled by placing the `@QuarkusTestResource`\n"
"on an annotation which will be used to enable and configure the test resource."
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"For example, this defines the `@WithKubernetesTestServer` annotation, which you can use on your tests to activate the `KubernetesServerTestResource`,\n"
"but only for the annotated test class. You can also place them on your `QuarkusTestProfile` test profiles."
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"The `KubernetesServerTestResource` class has to implement the\n"
"`QuarkusTestResourceConfigurableLifecycleManager` interface in order to be configured using the previous annotation:"
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/getting-started-testing.adoc
#, no-wrap
msgid "Hang Detection"
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"`@QuarkusTest` has support for hang detection to help diagnose any unexpected hangs. If no progress is made for a specified\n"
"time (i.e. no JUnit callbacks are invoked) then Quarkus will print a stack trace to the console to help diagnose the hang.\n"
"The default value for this timeout is 10 minutes."
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"No further action will be taken, and the tests will continue as normal (generally until CI times out), however the printed\n"
"stack traces should help diagnose why the build has failed. You can control this timeout with the\n"
"`quarkus.test.hang-detection-timeout` system property (you can also set this in application.properties, but this won't\n"
"be read until Quarkus has started, so the timeout for Quarkus start will be the default of 10 minutes)."
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/getting-started-testing.adoc
#, no-wrap
msgid "Native Executable Testing"
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"It is also possible to test native executables using `@NativeImageTest`. This supports all the features mentioned in this\n"
"guide except injecting into tests (and the native executable runs in a separate non-JVM process this is not really possible)."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "This is covered in the xref:building-native-image.adoc[Native Executable Guide]."
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"Although `@NativeImageTest` is not yet deprecated, it will be in the future as its functionality is covered by `@QuarkusIntegrationTest`\n"
"which is described in the following section."
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/getting-started-testing.adoc
#, no-wrap
msgid "Using @QuarkusIntegrationTest"
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"`@QuarkusIntegrationTest` should be used to launch and test the artifact produced by the Quarkus build, and supports testing a jar (of whichever type), a native image or container image.\n"
"Put simply, this means that if the result of a Quarkus build (`mvn package` or `gradle build`) is a jar, that jar will be launched as `java -jar ...` and tests run against it.\n"
"If instead a native image was built, then the application is launched as `./application ...` and again the tests run against the running application.\n"
"Finally, if a container image was created during the build (by including the `quarkus-container-image-jib` or `quarkus-container-image-docker` extensions and having the\n"
"`quarkus.container-image.build=true` property configured), then a container is created and run (this requires the `docker` executable being present)."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "As is the case with `@NativeImageTest`, this is a black box test that supports the same set features and has the same limitations."
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"As a test annotated with `@QuarkusIntegrationTest` tests the result of the build, it should be run as part of the integration test suite - i.e. via the `maven-failsafe-plugin` if using Maven or an additional task if using Gradle.\n"
"These tests will **not** work if run in the same phase as `@QuarkusTest` as Quarkus has not yet created the final artifact."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/getting-started-testing.adoc
#, no-wrap
msgid "Launching containers"
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"When `@QuarkusIntegrationTest` results in launching a container (because the application was built with `quarkus.container-image.build` set to `true`), the container is launched on a predictable container network. This facilitates writing integration tests that need to launch services to support the application.\n"
"This means that `@QuarkusIntegrationTest` works out of the box with containers launched via xref:dev-services.adoc[Dev Services], but it also means that it enables using <<quarkus-test-resource,QuarkusTestLifecycleManager>> resources that launch additional containers.\n"
"This can be achieved by having your `QuarkusTestLifecycleManager` implement `io.quarkus.test.common.DevServicesContext.ContextAware`. A simple example could be the following:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "`CustomResource` would be activated on a `@QuarkusIntegrationTest` using `@QuarkusTestResource` as is described in the corresponding section of this doc."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/getting-started-testing.adoc
#, no-wrap
msgid "Executing against a running application"
msgstr ""

#. type: delimited block =
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "This feature is considered experimental and is likely to change in future versions of Quarkus."
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"`@QuarkusIntegrationTest` supports executing tests against an already running instance of the application. This can be achieved by setting the\n"
"`quarkus.http.test-host` system property when running the tests."
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "An example use of this could be the following Maven command, that forces `@QuarkusIntegrationTest` to execute against that is accessible at `http://1.2.3.4:4321`:"
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/getting-started-testing.adoc
#, no-wrap
msgid "Mixing `@QuarkusTest` with other type of tests"
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"Mixing tests annotated with `@QuarkusTest` with tests annotated with either `@QuarkusDevModeTest`, `@QuarkusProdModeTest` or `@QuarkusUnitTest`\n"
"is not allowed in a single execution run (in a single Maven Surefire Plugin execution, for instance),\n"
"while the latter three can coexist."
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"The reason of this restriction is that `@QuarkusTest` starts a Quarkus server for the whole lifetime of the tests execution run,\n"
"thus preventing the other tests to start their own Quarkus server."
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"To alleviate this restriction, the `@QuarkusTest` annotation defines a JUnit 5 `@Tag`: `io.quarkus.test.junit.QuarkusTest`.\n"
"You can use this tag to isolate the `@QuarkusTest` test in a specific execution run, for example with the Maven Surefire Plugin:"
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/getting-started-testing.adoc
#, no-wrap
msgid "Running `@QuarkusTest` from an IDE"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "Most IDEs offer the possibility to run a selected class as a JUnit test directly. For this you should set a few properties in the settings of your chosen IDE:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "`java.util.logging.manager` (see xref:logging.adoc[Logging Guide])"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "`maven.home` (only if there are any custom settings in `${maven.home}/conf/settings.xml`, see xref:maven-tooling.adoc[Maven Guide])"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "`maven.settings` (in case a custom version of `settings.xml` file should be used for the tests)"
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/getting-started-testing.adoc
#, no-wrap
msgid "Eclipse separate JRE definition"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "Copy your current \"Installed JRE\" definition into a new one, where you will add the properties as a new VM arguments:"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "`-Djava.util.logging.manager=org.jboss.logmanager.LogManager`"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "`-Dmaven.home=<path-to-your-maven-installation>`"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "Use this JRE definition as your Quarkus project targeted runtime and the workaround will be applied to any \"Run as JUnit\" configuration."
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/getting-started-testing.adoc
#, no-wrap
msgid "VSCode \"run with\" configuration"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "The `settings.json` placed in the root of your project directory or in the workspace will need the following workaround in your test configuration:"
msgstr ""

#. type: Title ===
#: _versions/2.7/guides/getting-started-testing.adoc
#, no-wrap
msgid "IntelliJ JUnit template"
msgstr ""

#. type: Plain text
#: _versions/2.7/guides/getting-started-testing.adoc
msgid "Nothing needed in IntelliJ because the IDE will pick the `systemPropertyVariables` from the surefire plugin configuration in `pom.xml`."
msgstr ""

#. type: Title ==
#: _versions/2.7/guides/getting-started-testing.adoc
#, no-wrap
msgid "Testing Dev Services"
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"By default tests should just work with xref:dev-services.adoc[Dev Services], however from some use cases you may need access to\n"
"the automatically configured properties in your tests."
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"You can do this with `io.quarkus.test.common.DevServicesContext`, which can be injected directly into any `@QuarkusTest`\n"
"or `@QuarkusIntegrationTest`. All you need to do is define a field of type `DevServicesContext` and it will be automatically\n"
"injected. Using this you can retrieve any properties that have been set. Generally this is used to directly connect to a\n"
"resource from the test itself, e.g. to connect to kafka to send messages to the application under test."
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"Injection is also supported into objects that implement `io.quarkus.test.common.DevServicesContext.ContextAware`. If you\n"
"have a field that implements `io.quarkus.test.common.DevServicesContext.ContextAware` Quarkus will call the\n"
"`setIntegrationTestContext` method to pass the context into this object. This allows client logic to be encapsulated in\n"
"a utility class."
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"`QuarkusTestResourceLifecycleManager` implementations can also implement `ContextAware` to get access to these properties,\n"
"which allows you to setup the resource before Quarkus starts (e.g. configure a KeyCloak instance, add data to a database etc)."
msgstr ""

#: _versions/2.7/guides/getting-started-testing.adoc
msgid ""
"For `@QuarkusIntegrationTest` tests that result in launcher the application as a container, `io.quarkus.test.common.DevServicesContext` also provides access to the id of the container network on which the application container was launched (via the `containerNetworkId` method).\n"
"This can be used by `QuarkusTestResourceLifecycleManager` that need to launch additional containers that the application will communicate with."
msgstr ""
