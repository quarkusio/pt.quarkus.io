# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:10+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/2.16/guides/writing-native-applications-tips.adoc
#, no-wrap
msgid "Tips for writing native applications"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "This guide contains various tips and tricks for getting around problems that might arise when attempting to run Java applications as native executables."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "Note that we differentiate two contexts where the solution applied might be different:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "in the context of an application, you will rely on configuring the `native-image` configuration by tweaking your `pom.xml`;"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "in the context of an extension, Quarkus offers a lot of infrastructure to simplify all of this."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "Please refer to the appropriate section depending on your context."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/writing-native-applications-tips.adoc
#, no-wrap
msgid "Supporting native in your application"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "GraalVM imposes a number of constraints and making your application a native executable might require a few tweaks."
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/writing-native-applications-tips.adoc
#, no-wrap
msgid "Including resources"
msgstr ""

#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid ""
"By default, when building a native executable, GraalVM will not include any of the resources that are on the classpath into the native executable it creates.\n"
"Resources that are meant to be part of the native executable need to be configured explicitly."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "Quarkus automatically includes the resources present in `META-INF/resources` (the web resources) but, outside this directory, you are on your own."
msgstr ""

#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid ""
"Note that you need to be extremely careful here as anything in `META-INF/resources` will be exposed as static web resources.\n"
"So this directory is not a shortcut for \"let's automatically include these resources in the native executable\" and should only be used for static web resources."
msgstr ""

#. type: delimited block =
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "Other resources should be declared explicitly."
msgstr ""

#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid ""
"To include more resources in the native executable, the easiest way is to use the `quarkus.native.resources.includes` configuration property,\n"
"and its counterpart to exclude resources `quarkus.native.resources.excludes`."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "Both configuration properties support glob patterns."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "For instance, having the following properties in your `application.properties`:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "will include:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "all files in the `foo/` directory and its subdirectories except for files in `foo/private/` and its subdirectories,"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "all text files in the `bar/` directory and its subdirectories."
msgstr ""

#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid ""
"If globs are not sufficiently precise for your use case and you need to rely on regular expressions, or if you prefer relying on the GraalVM infrastructure,\n"
"you can also create a `resources-config.json` (the most common location is within `src/main/resources`) JSON file defining which resources should be included:"
msgstr ""

#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid ""
"The patterns are valid Java regexps.\n"
"Here we include all the XML files and JSON files into the native executable."
msgstr ""

#. type: delimited block =
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "You can find more information about this topic in https://www.graalvm.org/{graalvm-version}/reference-manual/native-image/dynamic-features/Resources/[the GraalVM documentation]."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "The final order of business is to make the configuration file known to the `native-image` executable by adding the proper configuration to `application.properties`:"
msgstr ""

#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid ""
"In the previous snippet we were able to simply use `resources-config.json` instead of specifying the entire path of the file simply because it was added to `src/main/resources`.\n"
"If the file had been added to another directory, the proper file path would have had to be specified manually."
msgstr ""

#. type: delimited block =
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "Multiple options may be separated by a comma. For example, one could use:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "in order to ensure that various resources are included and additional reflection is registered."
msgstr ""

#. type: delimited block =
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "If for some reason adding the aforementioned configuration to `application.properties` is not desirable, it is possible to configure the build tool to effectively perform the same operation."
msgstr ""

#. type: delimited block =
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "When using Maven, we could use the following configuration:"
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/writing-native-applications-tips.adoc
#, no-wrap
msgid "Registering for reflection"
msgstr ""

#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid ""
"When building a native executable, GraalVM operates with a closed world assumption.\n"
"It analyzes the call tree and removes all the classes/methods/fields that are not used directly."
msgstr ""

#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid ""
"The elements used via reflection are not part of the call tree so they are dead code eliminated (if not called directly in other cases).\n"
"To include these elements in your native executable, you need to register them for reflection explicitly."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "This is a very common case as JSON libraries typically use reflection to serialize the objects to JSON:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "If we were to use the code above, we would get an exception like the following when using the native executable:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "or if you are using Jackson:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "An even nastier possible outcome could be for no exception to be thrown, but instead the JSON result would be completely empty."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "There are two different ways to fix this type of issues."
msgstr ""

#. type: Title ====
#: _versions/2.16/guides/writing-native-applications-tips.adoc
#, no-wrap
msgid "Using the @RegisterForReflection annotation"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "The easiest way to register a class for reflection is to use the `@RegisterForReflection` annotation:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "If your class is in a third-party jar, you can do it by using an empty class that will host the `@RegisterForReflection` for it."
msgstr ""

#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "Note that `MyClassRequiringReflection` and  `MySecondClassRequiringReflection` will be registered for reflection but not `MyReflectionConfiguration`."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "This feature is handy when using third-party libraries using object mapping features (such as Jackson or GSON):"
msgstr ""

#. type: Title ====
#: _versions/2.16/guides/writing-native-applications-tips.adoc
#, no-wrap
msgid "Using a configuration file"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "You can use a configuration file to register classes for reflection."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "As an example, in order to register all methods of class `com.acme.MyClass` for reflection, we create `reflection-config.json` (the most common location is within `src/main/resources`)"
msgstr ""

#. type: delimited block =
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "For more details on the format of this file, please refer to https://www.graalvm.org/{graalvm-version}/reference-manual/native-image/dynamic-features/Reflection/[the GraalVM documentation]."
msgstr ""

#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid ""
"In the previous snippet we were able to simply use `reflection-config.json` instead of specifying the entire path of the file simply because it was added to `src/main/resources`.\n"
"If the file had been added to another directory, the proper file path would have had to be specified manually."
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/writing-native-applications-tips.adoc
#, no-wrap
msgid "Delaying class initialization"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "By default, Quarkus initializes all classes at build time."
msgstr ""

#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid ""
"There are cases where the initialization of certain classes is done in a static block needs to be postponed to runtime.\n"
"Typically, omitting such configuration would result in a runtime exception like the following:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "Another common source of errors is when the image heap taken by GraalVM contains a `Random`/`SplittableRandom` instance:"
msgstr ""

#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid ""
"Which is more often than not caused by Quarkus initializing at build time a class with a static `Random`/`SplittableRandom` field,\n"
"causing this particular instance to be tentatively included in the image heap."
msgstr ""

#. type: delimited block =
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "You can find detailed information about this `Random`/`SplittableRandom` issue in https://foivos.zakkak.net/tutorials/working-with-randoms-native-images/[this blog post]."
msgstr ""

#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid ""
"In these cases, delaying the infringing class initialization at runtime might be the solution and, to achieve that,\n"
"you can use the `--initialize-at-run-time=<package or class>` configuration knob."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "It should be added to the `native-image` configuration using the `quarkus.native.additional-build-args` configuration property as shown in the examples above."
msgstr ""

#. type: delimited block =
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "You can find more information about all this in https://www.graalvm.org/{graalvm-version}/reference-manual/native-image/optimizations-and-performance/ClassInitialization/[the GraalVM documentation]."
msgstr ""

#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid ""
"When multiple classes or packages need to be specified via the `quarkus.native.additional-build-args` configuration property, the `,` symbol needs to be escaped.\n"
"An example of this is the following:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "and in the case of using the Maven configuration instead of `application.properties`:"
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/writing-native-applications-tips.adoc
#, no-wrap
msgid "Managing Proxy Classes"
msgstr ""

#. type: delimited block =
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "While writing native application you'll need to define proxy classes at image build time by specifying the list of interfaces that they implement."
msgstr ""

#. type: delimited block =
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "In such a situation, the error you might encounter is:"
msgstr ""

#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid ""
"Solving this issue requires adding the `-H:DynamicProxyConfigurationResources=<comma-separated-config-resources>` option and to provide a dynamic proxy configuration file.\n"
"You can find all the information about the format of this file in https://www.graalvm.org/{graalvm-version}/reference-manual/native-image/guides/configure-dynamic-proxies/[the GraalVM documentation]."
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/writing-native-applications-tips.adoc
#, no-wrap
msgid "Modularity Benefits"
msgstr ""

#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid ""
"During native executable build time GraalVM analyses the application's call tree and generates a code-set that includes all the code it needs.\n"
"Having a modular codebase is key to avoiding problems with unused or optional parts of your application,\n"
"while at the same time reducing both native executable build times and size.\n"
"In this section you will learn about the details behind the benefits of modularity for native applications."
msgstr ""

#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid ""
"When code is not modular enough, generated native executables can end up with more code than what the user needs.\n"
"If a feature is not used and the code gets compiled into the native executable,\n"
"this is a waste of native compilation time and memory usage, as well as native executable disk space and starting heap size.\n"
"Even more problems arise when third party libraries or specialized API subsystems are used which cause native compilation or runtime errors,\n"
"and their use is not modularised enough.\n"
"A recent problem can be found in the JAXB library,\n"
"which is capable of deserializing XML files containing images using Java’s AWT APIs.\n"
"The vast majority of Quarkus XML users don’t need to deserialize images,\n"
"so there shouldn’t be a need for users applications to include Java AWT code,\n"
"unless they specifically configure Quarkus to add the JAXB AWT code to the native executable.\n"
"However, because JAXB code that uses AWT is in the same jar as the rest of the XML parsing code,\n"
"achieving this separation was rather complex and required the use of Java bytecode substitutions to get around it.\n"
"These substitutions are hard to maintain and can easily break, hence they should be one's last resort."
msgstr ""

#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid ""
"A modular codebase is the best way to avoid these kind of issues.\n"
"Taking the JAXB/AWT problem above,\n"
"if the JAXB code that dealt with images was in a separate module or jar (e.g. `jaxb-images`),\n"
"then Quarkus could choose not to include that module unless the user specifically requested the need to serialize/deserialize XML files containing images at build time."
msgstr ""

#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid ""
"Another benefit of modular applications is that they can reduce the code-set that will need to get into the native executable.\n"
"The smaller the code-set, the faster the native executable builds will be and the smaller the native executable produced."
msgstr ""

#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid ""
"The key takeaway point here is the following:\n"
"Keeping optional features, particularly those that depend on third party libraries or API subsystems with a big footprint,\n"
"in separate modules is the best solution."
msgstr ""

#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid ""
"How do I know if my application suffers from similar problems?\n"
"Aside from a deep study of the application,\n"
"finding usages of\n"
"https://maven.apache.org/guides/introduction/introduction-to-optional-and-excludes-dependencies.html[Maven optional dependencies]\n"
"is a clear indicator that your application might suffer from similar problems.\n"
"These type of dependencies should be avoided,\n"
"and instead code that interacts with optional dependencies should be moved into separate modules."
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/writing-native-applications-tips.adoc
#, no-wrap
msgid "Enforcing Singletons"
msgstr ""

#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid ""
"As already explained in the <<delay-class-init-in-your-app, delay class initialization>> section,\n"
"Quarkus marks all code to be initialized at build time by default.\n"
"This means that, unless marked otherwise,\n"
"static variables will be assigned at build time,\n"
"and static blocks will be executed at build time too."
msgstr ""

#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid ""
"This can cause values in Java programs that would normally vary from one run to another,\n"
"to always return a constant value.\n"
"E.g. a static field that is assigned the value of `System.currentTimeMillis()`\n"
"will always return the same value when executed as a Quarkus native executable."
msgstr ""

#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid ""
"Singletons that rely on static variable initialization will suffer similar problems.\n"
"For example, imagine you have a singleton based around static initialization along with a REST endpoint to query it:"
msgstr ""

#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid ""
"When the `singletons/static` endpoint is queried,\n"
"it will always return the same value,\n"
"even after the application is restarted:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "Singletons that rely on `enum` classes are also affected by the same issue:"
msgstr ""

#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid ""
"When the `singletons/enum` endpoint is queried,\n"
"it will always return the same value,\n"
"even after the application is restarted:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "One way to fix it is to build singletons using CDI's `@Singleton` annotation:"
msgstr ""

#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid ""
"After each restart,\n"
"querying `singletons/cdi` will return a different value,\n"
"just like it would in JVM mode:"
msgstr ""

#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid ""
"An alternative way to enforce a singleton while relying static fields, or enums,\n"
"is to <<delay-class-init-in-your-app,delay its class initialization until run time>>.\n"
"The nice advantage of CDI-based singletons is that your class initialization is not constrained,\n"
"so you can freely decide whether it should be build-time or run-time initialized,\n"
"depending on your use case."
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/writing-native-applications-tips.adoc
#, no-wrap
msgid "Beware of common Java API overrides"
msgstr ""

#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid ""
"Certain commonly used Java methods are overriden by user classes,\n"
"e.g. `toString`, `equals`, `hashCode`...etc.\n"
"The majority of overrides do not cause problems,\n"
"but if they use third party libraries (e.g. for additional formatting),\n"
"or use dynamic language features (e.g. reflection or proxies),\n"
"they can cause native image build to fail.\n"
"Some of those failures might be solvable via configuration,\n"
"but others can be more tricky to handle."
msgstr ""

#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid ""
"From a GraalVM points-to analysis perspective,\n"
"what happens in these method overrides matters,\n"
"even if the application does not explicitly call them.\n"
"This is because these methods are used throughout the JDK,\n"
"and all it takes is for one of those calls to be done on an unconstrained type,\n"
"e.g. `java.lang.Object`,\n"
"for the analysis to have to pull all implementations of that particular method."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/writing-native-applications-tips.adoc
#, no-wrap
msgid "Supporting native in a Quarkus extension"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "Supporting native in a Quarkus extension is even easier as Quarkus provides a lot of tools to simplify all this."
msgstr ""

#. type: delimited block =
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "Everything described here will only work in the context of Quarkus extensions, it won't work in an application."
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/writing-native-applications-tips.adoc
#, no-wrap
msgid "Register reflection"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "Quarkus makes registration of reflection in an extension a breeze by using `ReflectiveClassBuildItem`, thus eliminating the need for a JSON configuration file."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "To register a class for reflection, one would need to create a Quarkus processor class and add a build step that registers reflection:"
msgstr ""

#. type: delimited block =
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "More information about reflection in GraalVM can be found https://www.graalvm.org/{graalvm-version}/reference-manual/native-image/dynamic-features/Reflection/[here]."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "In the context of an extension, Quarkus eliminates the need for a JSON configuration file by allowing extension authors to specify a `NativeImageResourceBuildItem`:"
msgstr ""

#. type: delimited block =
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "For more information about GraalVM resource handling in native executables please refer to https://www.graalvm.org/{graalvm-version}/reference-manual/native-image/dynamic-features/Resources/[the GraalVM documentation]."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/writing-native-applications-tips.adoc
#, no-wrap
msgid "Delay class initialization"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "Quarkus simplifies things by allowing extensions authors to simply register a `RuntimeInitializedClassBuildItem`. A simple example of doing so could be:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "Using such a construct means that a `--initialize-at-run-time` option will automatically be added to the `native-image` command line."
msgstr ""

#. type: delimited block =
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "For more information about `--initialize-at-run-time`, please read https://www.graalvm.org/{graalvm-version}/reference-manual/native-image/optimizations-and-performance/ClassInitialization/[the GraalVM documentation]."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "Very similarly, Quarkus allows extensions authors to register a `NativeImageProxyDefinitionBuildItem`. An example of doing so is:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "Using such a construct means that a `-H:DynamicProxyConfigurationResources` option will automatically be added to the `native-image` command line."
msgstr ""

#. type: delimited block =
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "For more information about Proxy Classes you can read https://www.graalvm.org/{graalvm-version}/reference-manual/native-image/guides/configure-dynamic-proxies/[the GraalVM documentation]."
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/writing-native-applications-tips.adoc
#, no-wrap
msgid "Logging with Native Image"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "If you are using dependencies that require logging components such as Apache Commons Logging or Log4j and are experiencing a `ClassNotFoundException` when building the native executable, you can resolve this by excluding the logging library and adding the corresponding JBoss Logging adapter."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/writing-native-applications-tips.adoc
msgid "For more details please refer to the xref:logging.adoc#logging-adapters[Logging guide]."
msgstr ""
