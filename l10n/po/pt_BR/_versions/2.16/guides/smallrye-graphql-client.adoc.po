# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:10+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, fuzzy, no-wrap
msgid "SmallRye GraphQL Client"
msgstr "Cliente SmallRye GraphQL"

#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"This guide demonstrates how your Quarkus application can use the GraphQL client library.\n"
"The client is implemented by the https://github.com/smallrye/smallrye-graphql/[SmallRye GraphQL] project.\n"
"This guide is specifically geared towards the client side, so if you need an introduction to GraphQL in\n"
"general, first refer to the xref:smallrye-graphql.adoc[SmallRye GraphQL guide], which provides an introduction\n"
"to the GraphQL query language, general concepts and server-side development."
msgstr "Este guia demonstra como o seu aplicativo Quarkus pode usar a biblioteca do cliente GraphQL. O cliente é implementado pelo projeto link:https://github.com/smallrye/smallrye-graphql/[SmallRye GraphQL] . Este guia é voltado especificamente para o lado do cliente, portanto, se o senhor precisar de uma introdução ao GraphQL em geral, consulte primeiro o xref:smallrye-graphql.adoc[guia SmallRye GraphQL] , que fornece uma introdução à linguagem de consulta GraphQL, conceitos gerais e desenvolvimento do lado do servidor."

#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"The guide will walk you through developing and running a simple application that uses both supported\n"
"types of GraphQL clients to retrieve data from a remote resource, that being a database related to Star Wars.\n"
"It's available at https://graphql.org/swapi-graphql[this webpage] if you want to experiment with it manually.\n"
"The web UI allows you to write and execute GraphQL queries against it."
msgstr "O guia orientará o senhor no desenvolvimento e na execução de um aplicativo simples que usa os dois tipos de clientes GraphQL suportados para recuperar dados de um recurso remoto, ou seja, um banco de dados relacionado a Star Wars. Ele está disponível link:https://graphql.org/swapi-graphql[nesta página da Web] se o senhor quiser experimentá-lo manualmente. A interface de usuário da Web permite que o senhor escreva e execute consultas GraphQL nele."

#. type: Title ==
#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, no-wrap
msgid "Prerequisites"
msgstr "Pré-requisitos"

#. type: Title ==
#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, fuzzy, no-wrap
msgid "GraphQL client types introduction"
msgstr "Introdução aos tipos de clientes GraphQL"

#. type: Plain text
#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid "Two types of GraphQL clients are supported."
msgstr "Há suporte para dois tipos de clientes GraphQL."

#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"The *typesafe* client works very much like the MicroProfile REST Client adjusted for calling GraphQL endpoints.\n"
"A client instance is basically a proxy that you can call like a regular Java object, but under the hood,\n"
"the call will be translated to a GraphQL operation. It works with domain classes directly.\n"
"Any input and output objects for the operation will be translated to/from their representations\n"
"in the GraphQL query language."
msgstr "O cliente *typesafe* funciona de forma muito parecida com o cliente REST do MicroProfile ajustado para chamar os pontos de extremidade do GraphQL. Uma instância de cliente é basicamente um proxy que o senhor pode chamar como um objeto Java comum, mas, nos bastidores, a chamada será traduzida para uma operação GraphQL. Ela funciona diretamente com as classes de domínio. Quaisquer objetos de entrada e saída para a operação serão traduzidos de/para suas representações na linguagem de consulta GraphQL."

#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"The *dynamic* client, on the other hand, works rather like an equivalent of the JAX-RS client\n"
"from the `javax.ws.rs.client` package. It does not require the domain classes to work, it works with\n"
"abstract representations of GraphQL documents instead. Documents are built using a domain-specific language (DSL).\n"
"The exchanged objects are treated as an abstract `JsonObject`, but, when necessary,\n"
"it is possible to convert them to concrete model objects (if suitable model classes are available)."
msgstr "O cliente *dinâmico* , por outro lado, funciona como um equivalente do cliente JAX-RS do pacote `javax.ws.rs.client` . Ele não requer as classes de domínio para funcionar, mas trabalha com representações abstratas de documentos GraphQL. Os documentos são criados usando uma linguagem específica de domínio (DSL). Os objetos trocados são tratados como abstratos `JsonObject` , mas, quando necessário, é possível convertê-los em objetos de modelo concretos (se houver classes de modelo adequadas disponíveis)."

#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"The typesafe client can be viewed as a rather high-level and more declarative approach designed for ease of use,\n"
"whereas the dynamic client is lower-level, more imperative, somewhat more verbose to use, but allows finer grained\n"
"control over operations and responses."
msgstr "O cliente typesafe pode ser visto como uma abordagem de alto nível e mais declarativa, projetada para facilitar o uso, enquanto o cliente dinâmico é de nível inferior, mais imperativo, um pouco mais verboso para usar, mas permite um controle mais refinado sobre as operações e respostas."

#. type: Title ==
#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, no-wrap
msgid "Solution"
msgstr "Solução"

#: _versions/2.16/guides/smallrye-graphql-client.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "Recomendamos que siga as instruções nas seções seguintes e crie a aplicação passo a passo. No entanto, você pode ir diretamente para o exemplo completo."

#. type: Plain text
#: _versions/2.16/guides/smallrye-graphql-client.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Clone o repositório Git: `git clone {quickstarts-clone-url}`, ou baixe um {quickstarts-archive-url}[arquivo]."

#. type: Plain text
#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid "The solution is located in the `microprofile-graphql-client-quickstart` {quickstarts-tree-url}/microprofile-graphql-client-quickstart[directory]."
msgstr "A solução está localizada em `microprofile-graphql-client-quickstart` {quickstarts-tree-url}/microprofile-graphql-client-quickstart[directory]."

#. type: Title ==
#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, no-wrap
msgid "Creating the Maven Project"
msgstr "Criando o projeto Maven"

#. type: Plain text
#: _versions/2.16/guides/smallrye-graphql-client.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "Primeiro, precisamos de um novo projeto. Crie um novo projeto com o seguinte comando:"

#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"This command generates a project, importing the `smallrye-graphql-client` extension, and also the `resteasy-reactive`\n"
"extension, because we will use that too - a REST endpoint will be the entrypoint to allow you to manually trigger\n"
"the GraphQL client to do its work."
msgstr "Esse comando gera um projeto, importando a extensão `smallrye-graphql-client` e também a extensão `resteasy-reactive` , porque também a usaremos - um ponto de extremidade REST será o ponto de entrada para permitir que o senhor acione manualmente o cliente GraphQL para fazer seu trabalho."

#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"If you already have your Quarkus project configured, you can add the `smallrye-graphql-client` extension\n"
"to your project by running the following command in your project base directory:"
msgstr "Se já tiver o projeto Quarkus configurado, o senhor pode adicionar a extensão `smallrye-graphql-client` ao projeto executando o seguinte comando no diretório base do projeto:"

#. type: Plain text
#: _versions/2.16/guides/smallrye-graphql-client.adoc
msgid "This will add the following to your build file:"
msgstr "Isto irá adicionar o seguinte trecho no seu arquivo de build:"

#. type: Block title
#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, fuzzy, no-wrap
msgid "The application"
msgstr "O aplicativo"

#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"The application we will build makes use of both types of GraphQL clients. In both cases,\n"
"they will connect to the Star Wars service at https://graphql.org/swapi-graphql[SWAPI] and\n"
"query it for a list of Star Wars films, and, for each film, the names of the planets which\n"
"appear in that film."
msgstr "O aplicativo que criaremos faz uso dos dois tipos de clientes GraphQL. Em ambos os casos, eles se conectarão ao serviço Star Wars no link:https://graphql.org/swapi-graphql[SWAPI] e o consultarão para obter uma lista de filmes de Star Wars e, para cada filme, os nomes dos planetas que aparecem nesse filme."

#. type: Plain text
#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid "The corresponding GraphQL query looks like this:"
msgstr "A consulta GraphQL correspondente tem a seguinte aparência:"

#. type: Plain text
#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid "You may go to https://graphql.org/swapi-graphql[the webpage] to execute this query manually."
msgstr "O senhor pode acessar link:https://graphql.org/swapi-graphql[a página da Web] para executar essa consulta manualmente."

#. type: Title ==
#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, fuzzy, no-wrap
msgid "Using the Typesafe client"
msgstr "Usando o cliente Typesafe"

#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"To use the typesafe client, we need the corresponding model classes that are compatible with\n"
"the schema. There are two ways to obtain them. First is to  use the client generator offered by SmallRye GraphQL,\n"
"which generates classes from the schema document and a list of queries. This generator is considered highly\n"
"experimental for now, and is not covered in this example. If interested, refer to the\n"
"https://github.com/smallrye/smallrye-graphql/tree/main/client/generator[Client Generator] and its documentation."
msgstr "Para usar o cliente typesafe, precisamos das classes de modelo correspondentes que sejam compatíveis com o esquema. Há duas maneiras de obtê-las. A primeira é usar o gerador de cliente oferecido pelo SmallRye GraphQL, que gera classes a partir do documento do esquema e de uma lista de consultas. Por enquanto, esse gerador é considerado altamente experimental e não é abordado neste exemplo. Caso tenha interesse, consulte o link:https://github.com/smallrye/smallrye-graphql/tree/main/client/generator[Client Generator] e sua documentação."

#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"In this example, we will create a slimmed down version of the model classes manually, with only the fields\n"
"that we need, and ignore all the stuff that we don't need. We will need the classes for `Film` and `Planet`.\n"
"But, the service is also using specific wrappers named `FilmConnection` and `PlanetConnection`, which,\n"
"for our purpose, will serve just to contain the actual list of `Film` and `Planet` instances, respectively."
msgstr "Neste exemplo, criaremos manualmente uma versão reduzida das classes de modelo, com apenas os campos de que precisamos e ignoraremos tudo o que não for necessário. Precisaremos das classes para `Film` e `Planet` . Mas o serviço também está usando wrappers específicos denominados `FilmConnection` e `PlanetConnection` , que, para nossa finalidade, servirão apenas para conter a lista real de instâncias de `Film` e `Planet` , respectivamente."

#. type: Plain text
#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid "Let's create all the model classes and put them into the `org.acme.microprofile.graphql.client.model` package:"
msgstr "Vamos criar todas as classes de modelo e colocá-las no pacote `org.acme.microprofile.graphql.client.model` :"

#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"Now that we have the model classes, we can create the interface that represents the actual set\n"
"of operations we want to call on the remote GraphQL service."
msgstr "Agora que temos as classes de modelo, podemos criar a interface que representa o conjunto real de operações que queremos chamar no serviço GraphQL remoto."

#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"@GraphQLClientApi(configKey = \"star-wars-typesafe\")\n"
"public interface StarWarsClientApi {\n"
"\n"
"    FilmConnection allFilms();\n"
"\n"
"}"
msgstr "@GraphQLClientApi(configKey = \"star-wars-typesafe\") public interface StarWarsClientApi {"

#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"For simplicity, we're only calling the query named `allFilms`. We named our corresponding method\n"
"`allFilms` too. If we named the method differently, we would need to annotate it with\n"
"`@Query(value=\"allFilms\")` to specify the name of the query that should be executed when this\n"
"method is called."
msgstr "Para simplificar, estamos chamando apenas a consulta chamada `allFilms` . Também nomeamos nosso método correspondente como `allFilms` . Se nomeássemos o método de forma diferente, precisaríamos anotá-lo com `@Query(value=\"allFilms\")` para especificar o nome da consulta que deve ser executada quando esse método for chamado."

#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"The client also needs some configuration, namely at least the URL of the remote service. We can either\n"
"specify that within the `@GraphQLClientApi` annotation (by setting the `endpoint` parameter),\n"
"or move this over to the configuration file, `application.properties`:"
msgstr "O cliente também precisa de alguma configuração, ou seja, pelo menos o URL do serviço remoto. Podemos especificar isso na anotação `@GraphQLClientApi` (definindo o parâmetro `endpoint` ) ou mover isso para o arquivo de configuração, `application.properties` :"

#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid "quarkus.smallrye-graphql-client.star-wars-typesafe.url=https://swapi-graphql.netlify.app/.netlify/functions/index"
msgstr "quarkus.smallrye-graphql-client.star-wars-typesafe.url=https://swapi-graphql.netlify.app/.netlify/functions/index"

#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"During *tests only*, the URL is an optional property, and if it's not specified, Quarkus will assume\n"
"that the target of the client is the application that is being tested (typically, `http://localhost:8081/graphql`).\n"
"This is useful if your application contains a GraphQL server-side API as well as a GraphQL client that is used for\n"
"testing the API."
msgstr "*Somente* durante *os testes* , a URL é uma propriedade opcional e, se não for especificada, o Quarkus assumirá que o destino do cliente é o aplicativo que está sendo testado (normalmente, `http://localhost:8081/graphql` ). Isso é útil se o seu aplicativo contiver uma API do lado do servidor GraphQL, bem como um cliente GraphQL que é usado para testar a API."

#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"`star-wars-typesafe` is the name of the configured client instance, and corresponds to the `configKey`\n"
"in the `@GraphQLClientApi` annotation. If you don't want to specify a custom name, you can leave\n"
"out the `configKey`, and then refer to it by using the fully qualified name of the interface."
msgstr "`star-wars-typesafe` é o nome da instância do cliente configurado e corresponde a `configKey` na anotação `@GraphQLClientApi` . Se não quiser especificar um nome personalizado, o senhor pode omitir o `configKey` e fazer referência a ele usando o nome totalmente qualificado da interface."

#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"Now that we have the client instance properly configured, we need a way to have it\n"
"perform something when we start the application. For that, we will use a REST endpoint that,\n"
"when called by a user, obtains the client instance and lets it execute the query."
msgstr "Agora que temos a instância do cliente configurada corretamente, precisamos de uma maneira de fazer com que ela execute algo quando iniciarmos o aplicativo. Para isso, usaremos um endpoint REST que, quando chamado por um usuário, obtém a instância do cliente e permite que ela execute a consulta."

#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"With this REST endpoint included in your application, you can simply send a GET request to `/typesafe`,\n"
"and the application will use an injected typesafe client instance to call the remote service, obtain\n"
"the films and planets, and return the JSON representation of the resulting list."
msgstr "Com esse endpoint REST incluído no seu aplicativo, o senhor pode simplesmente enviar uma solicitação GET para `/typesafe` , e o aplicativo usará uma instância de cliente typesafe injetada para chamar o serviço remoto, obter os filmes e planetas e retornar a representação JSON da lista resultante."

#. type: Title ==
#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, fuzzy, no-wrap
msgid "Using the Dynamic client"
msgstr "Usando o Dynamic client"

#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"For the dynamic client, the model classes are optional, because we can work with abstract\n"
"representations of the GraphQL types and documents. The client API interface is not needed at all."
msgstr "Para o cliente dinâmico, as classes de modelo são opcionais, pois podemos trabalhar com representações abstratas dos tipos e documentos do GraphQL. A interface da API do cliente não é necessária."

#. type: Plain text
#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid "We still need to configure the URL for the client, so let's put this into `application.properties`:"
msgstr "Ainda precisamos configurar o URL para o cliente, portanto, vamos colocar isso em `application.properties` :"

#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid "quarkus.smallrye-graphql-client.star-wars-dynamic.url=https://swapi-graphql.netlify.app/.netlify/functions/index"
msgstr "quarkus.smallrye-graphql-client.star-wars-dynamic.url=https://swapi-graphql.netlify.app/.netlify/functions/index"

#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"We decided to name the client `star-wars-dynamic`. We will use this name when injecting a dynamic client\n"
"to properly qualify the injection point."
msgstr "Decidimos nomear o cliente como `star-wars-dynamic` . Usaremos esse nome ao injetar um cliente dinâmico para qualificar adequadamente o ponto de injeção."

#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"If you need to add an authorization header, or any other custom HTTP header (in our case\n"
"it's not required), this can be done by:"
msgstr "Se o senhor precisar adicionar um cabeçalho de autorização ou qualquer outro cabeçalho HTTP personalizado (no nosso caso, não é necessário), isso pode ser feito:"

#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid "quarkus.smallrye-graphql-client.star-wars-dynamic.header.HEADER-KEY=HEADER-VALUE\""
msgstr "quarkus.smallrye-graphql-client.star-wars-dynamic.header.HEADER-KEY=HEADER-VALUE\""

#. type: Plain text
#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid "Add this to the `StarWarsResource` created earlier:"
msgstr "Adicione isso ao site `StarWarsResource` criado anteriormente:"

#. type: Plain text
#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid "Qualifies the injection point so that we know which named client needs to be injected here."
msgstr "Qualifica o ponto de injeção para que saibamos qual cliente nomeado precisa ser injetado aqui."

#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"Here we build a document representing the GraphQL query, using the provided DSL language.\n"
"We use static imports to make the code easier to read. The DSL is designed in a way that\n"
"it looks quite similar to writing a GraphQL query as a string."
msgstr "Aqui, criamos um documento que representa a consulta GraphQL, usando a linguagem DSL fornecida. Usamos importações estáticas para facilitar a leitura do código. A DSL foi projetada de forma a se parecer bastante com a escrita de uma consulta GraphQL como uma string."

#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"Execute the query and block while waiting for the response. There is also an asynchronous\n"
"variant that returns a `Uni<Response>`."
msgstr "Execute a consulta e bloqueie enquanto aguarda a resposta. Há também uma variante assíncrona que retorna um `Uni<Response>` ."

#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"Here we did the optional step of converting the response to instances of our model classes,\n"
"because we have the classes available. If you don't have the classes available or don't want to\n"
"use them, simply calling `response.getData()` would get you a `JsonObject` representing\n"
"all the returned data."
msgstr "Aqui, fizemos a etapa opcional de converter a resposta em instâncias de nossas classes de modelo, porque temos as classes disponíveis. Se o senhor não tiver as classes disponíveis ou não quiser usá-las, basta chamar `response.getData()` para obter um `JsonObject` representando todos os dados retornados."

#. type: Title ==
#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, no-wrap
msgid "Running the application"
msgstr "Executando a aplicação"

#. type: Plain text
#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid "Launch the application in dev mode using:"
msgstr "Inicie o aplicativo no modo de desenvolvimento usando:"

#. type: Plain text
#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid "To execute the queries, you need to send GET requests to our REST endpoint:"
msgstr "Para executar as consultas, o senhor precisa enviar solicitações GET ao nosso endpoint REST:"

#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"Whether you use dynamic or typesafe, the result should be the same.\n"
"If the JSON document is hard to read, you might want to run it through a tool that\n"
"formats it for better readability by humans, for example by piping the output through `jq`."
msgstr "Independentemente de o senhor usar dynamic ou typesafe, o resultado deve ser o mesmo. Se o documento JSON for difícil de ler, talvez o senhor queira executá-lo por meio de uma ferramenta que o formate para melhor legibilidade por humanos, por exemplo, canalizando a saída por meio de `jq` ."

#. type: Title ==
#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, fuzzy, no-wrap
msgid "Conclusion"
msgstr "Conclusão"

#: _versions/2.16/guides/smallrye-graphql-client.adoc
#, fuzzy
msgid ""
"This example showed how to use both the dynamic and typesafe GraphQL clients to call an external\n"
"GraphQL service and explained the difference between the client types."
msgstr "Este exemplo mostrou como usar os clientes GraphQL dinâmicos e seguros para chamar um serviço GraphQL externo e explicou a diferença entre os tipos de clientes."
