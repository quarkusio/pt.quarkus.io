# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:10+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/2.16/guides/appcds.adoc:6
#, no-wrap
msgid "AppCDS"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/appcds.adoc:12
msgid "This reference guide explains how to enable Application Class Data Sharing in your Quarkus applications."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.16/guides/appcds.adoc:13
#, no-wrap
msgid "What is Application Class Data Sharing (AppCDS)?"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/appcds.adoc:19
msgid "link:https://docs.oracle.com/en/java/javase/17/docs/specs/man/java.html#application-class-data-sharing[Application Class Data Sharing] is a JVM feature that helps reduce the startup time and memory footprint of a JVM application.  This is achieved by having the JVM create a pre-processed shared archived of classes that are loaded at startup time. As these classes are loaded every time the application starts, AppCDS is a conceptually simple way of improving the application startup time, without the application itself having to be coded or configured in a specific way. How much of an improvement depends on many factors, such as the number of classes loaded, the underlying hardware etc."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.16/guides/appcds.adoc:20
#, no-wrap
msgid "Vanilla AppCDS generation"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/appcds.adoc:23
msgid "The main downside of creating AppCDS manually for an application is that their generation requires launching the application with special flags and obtaining the archive in a step before the application is deployed to production."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/appcds.adoc:25
msgid "The exact process depends on the JVM version being used as newer JVM have incrementally made the process easier."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/appcds.adoc:27
msgid "This fact makes the use of AppCDS difficult to use for real world deployments where a CI pipeline is responsible for building and deploying applications."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.16/guides/appcds.adoc:28
#, no-wrap
msgid "AppCDS in Quarkus"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.16/guides/appcds.adoc:30
#, no-wrap
msgid "Creating the archive"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/appcds.adoc:34
msgid "Quarkus makes AppCDS generation as simple as setting the `quarkus.package.create-appcds` configuration property to `true`.  For an example Quarkus application using Maven (assuming it is located in `/tmp/code-with-quarkus`), the AppCDS archive can be generated by simply building the application like so:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/appcds.adoc:38
#, no-wrap
msgid "./mvnw package -Dquarkus.package.create-appcds=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/appcds.adoc:41
msgid "When the build completes, the output will contain (among other things) the following:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/appcds.adoc:48
#, no-wrap
msgid ""
"[INFO] [io.quarkus.deployment.pkg.steps.AppCDSBuildStep] Launching AppCDS creation process.\n"
"[INFO] [io.quarkus.deployment.pkg.steps.AppCDSBuildStep] AppCDS successfully created at: '/tmp/code-with-quarkus/target/quarkus-app/app-cds.jsa'.\n"
"[INFO] [io.quarkus.deployment.pkg.steps.AppCDSBuildStep] To ensure they are loaded properly, run the application jar from its directory and also add the '-XX:SharedArchiveFile=app-cds.jsa' JVM flag.\n"
"Moreover, make sure to use the exact same Java version (x.y.z) to run the application as was used to build it.\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/appcds.adoc:51
msgid "If we take a look at `/tmp/code-with-quarkus/target/quarkus-app`, among the other files, we see `app-cds.jsa`, which is the generated AppCDS archive."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.16/guides/appcds.adoc:52
#, no-wrap
msgid "Using the archive"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/appcds.adoc:55
msgid "Using the archive is done by using the `-XX:SharedArchiveFile` flag. However, a few caveats apply:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/appcds.adoc:57
msgid "The paths to the Quarkus jar file and the AppCDS archive need to be exactly the same as those Quarkus used to build the archive"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/appcds.adoc:58
msgid "The version of the JVM used to run the application must be **exactly** the same as the one used to build the Quarkus application."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/appcds.adoc:60
msgid "Assuming we are using the same JVM to run the application as we used to build the application, we can launch the application like so:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/appcds.adoc:65
#, no-wrap
msgid ""
"cd target/quarkus-app\n"
"java -XX:SharedArchiveFile=app-cds.jsa -jar quarkus-run.jar\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.16/guides/appcds.adoc:70
msgid "The JVM is resilient. Faced with a situation where the archive file is not usable (for whatever reason) it will simply disable the AppCDS feature."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.16/guides/appcds.adoc:72
msgid "If it is desirable to simply halt the execution when the archive is not usable, the following command line invocation can be used:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/appcds.adoc:76
#, no-wrap
msgid "java -Xshare:on -XX:SharedArchiveFile=app-cds.jsa -jar quarkus-run.jar\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/appcds.adoc:82
msgid "Given what was mentioned above about how the application needs to be launched in order for the archive to be built, the question arises of how Quarkus deals with this situation."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/appcds.adoc:85
msgid "The answer is that at application build time, right after the application archive is built, Quarkus launches the application, but only the parts of the launch process that are safe are run.  More specifically, the application is run up until the steps that actually open sockets or run application logic."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/appcds.adoc:88
msgid "This results in an archive generation process that on one hand is completely safe, but on the other hand is unable to archive every single class that the application might need at boot time.  As a result, users are expected to get a slightly more effective archive if they manually go through the hoops of generating the AppCDS archive."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.16/guides/appcds.adoc:90
#, no-wrap
msgid "Usage in containers"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.16/guides/appcds.adoc:94
msgid "When building container images using the `quarkus-container-image-jib` extension, Quarkus automatically takes care of all the steps needed to generate the archive and make it usable at runtime in the container."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.16/guides/appcds.adoc:95
msgid "This way, by simply setting `quarkus.package.create-appcds` to `true` the generated container can benefit from a slight reduction in startup time and memory usage."
msgstr ""
