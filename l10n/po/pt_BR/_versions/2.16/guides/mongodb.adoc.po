# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:10+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Using the MongoDB Client"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "MongoDB is a well known NoSQL Database that is widely used."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "In this guide, we see how you can get your REST services to use the MongoDB database."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "MongoDB installed or Docker installed"
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Architecture"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "The application built in this guide is quite simple: the user can add elements in a list using a form and the list is updated."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "All the information between the browser and the server is formatted as JSON."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "The elements are stored in MongoDB."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Solution"
msgstr ""

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "The solution is located in the `mongodb-quickstart` {quickstarts-tree-url}/mongodb-quickstart[directory]."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Creating the Maven project"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr ""

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"This command generates a Maven structure importing the RESTEasy Reactive Jackson and MongoDB Client extensions.\n"
"After this, the `quarkus-mongodb-client` extension has been added to your build file."
msgstr ""

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"If you already have your Quarkus project configured, you can add the `mongodb-client` extension\n"
"to your project by running the following command in your project base directory:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "This will add the following to your `pom.xml`:"
msgstr ""

#. type: Block title
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Creating your first JSON REST service"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "In this example, we will create an application to manage a list of fruits."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "First, let's create the `Fruit` bean as follows:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "Nothing fancy. One important thing to note is that having a default constructor is required by the JSON serialization layer."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "Now create a `org.acme.mongodb.FruitService` that will be the business layer of our application and store/load the fruits from the mongoDB database."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "Now, create the `org.acme.mongodb.FruitResource` class as follows:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "The implementation is pretty straightforward, and you just need to define your endpoints using the JAX-RS annotations and use the `FruitService` to list/add new fruits."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Configuring the MongoDB database"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "The main property to configure is the URL to access to MongoDB. Almost all configuration can be included in the connection URI, so we advise you to do so. You can find more information in the MongoDB documentation: https://docs.mongodb.com/manual/reference/connection-string/"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "A sample configuration should look like this:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "In this example, we are using a single instance running on localhost:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "If you need more configuration properties, there is a full list at the end of this guide."
msgstr ""

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"By default, Quarkus will restrict the use of JNDI within an application, as a precaution to try and mitigate any future vulnerabilities similar to Log4Shell.\n"
"Because the `mongo+srv` protocol often used to connect to MongoDB requires JNDI, this protection is automatically disabled when using the MongoDB client extension."
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Dev Services (Configuration Free Databases)"
msgstr ""

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"Quarkus supports a feature called Dev Services that allows you to create various datasources without any config. In the case of MongoDB this support extends to the default MongoDB connection.\n"
"What that means practically, is that if you have not configured `quarkus.mongodb.connection-string`, Quarkus will automatically start a MongoDB container when running tests or in dev mode,\n"
"and automatically configure the connection."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "MongoDB Dev Services is based on link:https://www.testcontainers.org/modules/databases/mongodb/[Testcontainers MongoDB module] that will start a single node replicaset."
msgstr ""

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"When running the production version of the application, the MongoDB connection need to be configured as normal, so if you want to include a production database config in your\n"
"`application.properties` and continue to use Dev Services we recommend that you use the `%prod.` profile to define your MongoDB settings."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Multiple MongoDB Clients"
msgstr ""

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"MongoDB allows you to configure multiple clients.\n"
"Using several clients works the same way as having a single client."
msgstr ""

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"Notice there's an extra bit in the key (the `users` and `inventory` segments).\n"
"The syntax is as follows: `quarkus.mongodb.[optional name.][mongo connection property]`.\n"
"If the name is omitted, it configures the default client."
msgstr ""

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"The use of multiple MongoDB clients enables multi-tenancy for MongoDB by allowing to connect to multiple MongoDB clusters. +\n"
"If you want to connect to multiple databases inside the same cluster,\n"
"multiple clients are **not** necessary as a single client is able to access all databases in the same cluster\n"
"(as a JDBC connection is able to access to multiple schemas inside the same database)."
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Named Mongo client Injection"
msgstr ""

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"When using multiple clients, each `MongoClient`, you can select the client to inject using the `io.quarkus.mongodb.MongoClientName` qualifier.\n"
"Using the above properties to configure three different clients, you can also inject each one as follows:"
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Running a MongoDB Database"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "As by default, `MongoClient` is configured to access a local MongoDB database on port 27017 (the default MongoDB port), if you have a local running database on this port, there is nothing more to do before being able to test it!"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "If you want to use Docker to run a MongoDB database, you can use the following command to launch one:"
msgstr ""

#. type: delimited block =
#: _versions/2.16/guides/mongodb.adoc
msgid "If you use <<dev-services,Dev Services>>, launching the container manually is not necessary!"
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Creating a frontend"
msgstr ""

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"Now let's add a simple web page to interact with our `FruitResource`.\n"
"Quarkus automatically serves static resources located under the `META-INF/resources` directory.\n"
"In the `src/main/resources/META-INF/resources` directory, add a `fruits.html` file with the content from this {quickstarts-blob-url}/mongodb-quickstart/src/main/resources/META-INF/resources/fruits.html[fruits.html] file in it."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "You can now interact with your REST service:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "start Quarkus with:"
msgstr ""

#: _versions/2.16/guides/mongodb.adoc
msgid "CLI"
msgstr ""

#: _versions/2.16/guides/mongodb.adoc
msgid "Maven"
msgstr ""

#: _versions/2.16/guides/mongodb.adoc
msgid "Gradle"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "open a browser to `http://localhost:8080/fruits.html`"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "add new fruits to the list via the form"
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Reactive MongoDB Client"
msgstr ""

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"A reactive MongoDB Client is included in Quarkus.\n"
"Using it is as easy as using the classic MongoDB Client.\n"
"You can rewrite the previous example to use it like the following."
msgstr ""

#. type: Block title
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Mutiny"
msgstr ""

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"The MongoDB reactive client uses Mutiny reactive types.\n"
"If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Simplifying MongoDB Client usage using BSON codec"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "By using a Bson `Codec`, the MongoDB Client will take care of the transformation of your domain object to/from a MongoDB `Document` automatically."
msgstr ""

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"First you need to create a Bson `Codec` that will tell Bson how to transform your entity to/from a MongoDB `Document`.\n"
"Here we use a `CollectibleCodec` as our object is retrievable from the database (it has a MongoDB identifier), if not we would have used a `Codec` instead.\n"
"More information in the codec documentation: https://www.mongodb.com/docs/drivers/java/sync/current/fundamentals/data-formats/codecs/."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "Then you need to create a `CodecProvider` to link this `Codec` to the `Fruit` class."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "Quarkus takes care of registering the `CodecProvider` for you as a CDI bean of `@Singleton` scope."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "Finally, when getting the `MongoCollection` from the database you can use directly the `Fruit` class instead of the `Document` one, the codec will automatically map the `Document` to/from your `Fruit` class."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "Here is an example of using a `MongoCollection` with the `FruitCodec`."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "The POJO Codec"
msgstr ""

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"The link:https://www.mongodb.com/docs/drivers/java/sync/current/fundamentals/data-formats/document-data-format-pojo/[POJO Codec] provides a set of annotations that enable the customization of\n"
"the way a POJO is mapped to a MongoDB collection and this codec is initialized automatically by Quarkus"
msgstr ""

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"One of these annotations is the `@BsonDiscriminator` annotation that allows to storage multiple Java types in a single MongoDB collection by adding\n"
"a discriminator field inside the document. It can be useful when working with abstract types or interfaces."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "Quarkus will automatically register all the classes annotated with `@BsonDiscriminator` with the POJO codec."
msgstr ""

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"The POJO Codec have enhanced generic support via `PropertyCodecProvider`,\n"
"Quarkus will automatically register any `PropertyCodecProvider` with the POJO Codec (these classes are automatically made CDI beans of `@Singleton` scope).\n"
"When building native executables and using generic types, you might need to register the type arguments for reflection."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Simplifying MongoDB with Panache"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "The xref:mongodb-panache.adoc[MongoDB with Panache] extension facilitates the usage of MongoDB by providing active record style entities (and repositories) like you have in xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache] and focuses on making your entities trivial and fun to write in Quarkus."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Schema migration with Liquibase"
msgstr ""

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"The xref:liquibase-mongodb.adoc[Liquibase MongoDB] extension facilitates the initialization of a MongoDB database including indices and initial data.\n"
"It implements the same schema migration facilities that Liquibase offers for SQL databases."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Connection Health Check"
msgstr ""

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"If you are using the `quarkus-smallrye-health` extension, `quarkus-mongodb-client` will automatically add a readiness health check\n"
"to validate the connection to the cluster."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "So when you access the `/q/health/ready` endpoint of your application you will have information about the connection validation status."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "This behavior can be disabled by setting the `quarkus.mongodb.health.enabled` property to `false` in your `application.properties`."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Metrics"
msgstr ""

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"If you are using the `quarkus-micrometer` or `quarkus-smallrye-metrics` extension, `quarkus-mongodb-client` can provide metrics about the connection pools.\n"
"This behavior must first be enabled by setting the `quarkus.mongodb.metrics.enabled` property to `true` in your `application.properties`."
msgstr ""

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"So when you access the `/q/metrics` endpoint of your application you will have information about the connection pool status.\n"
"When using xref:smallrye-metrics.adoc[SmallRye Metrics], connection pool metrics will be available under the `vendor` scope."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Tracing"
msgstr ""

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"If you are using the `quarkus-smallrye-opentracing` extension, `quarkus-mongodb-client` can register traces about the commands executed.\n"
"This behavior must be enabled by setting the `quarkus.mongodb.tracing.enabled` property to `true` in your `application.properties` and adding the dependency `io.opentracing.contrib:opentracing-mongo-common` to your pom.xml (for more info read the xref:opentracing.adoc#mongodb-client[OpenTracing - MongoDB client] section)."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "Read the xref:opentracing.adoc[OpenTracing] guide, for how to configure OpenTracing and how to use the Jaeger tracer."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Testing helpers"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "xref:#dev-services[Dev Services for MongoDB] is your best option to start a MongoDB database for your unit tests."
msgstr ""

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"But if you can't use it, you can start a MongoDB database using one of the two `QuarkusTestResourceLifecycleManager` that Quarkus provides.\n"
"They rely on link:https://github.com/flapdoodle-oss/de.flapdoodle.embed.mongo[Flapdoodle embedded MongoDB]."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "`io.quarkus.test.mongodb.MongoTestResource` will start a single instance on port 27017."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "`io.quarkus.test.mongodb.MongoReplicaSetTestResource` will start a replicaset with two instances, one on port 27017 and the other on port 27018."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "To use them, you need to add the `io.quarkus:quarkus-test-mongodb` dependency to your pom.xml."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "For more information about the usage of a `QuarkusTestResourceLifecycleManager` please read xref:getting-started-testing.adoc#quarkus-test-resource[Quarkus test resource]."
msgstr ""

#. type: delimited block =
#: _versions/2.16/guides/mongodb.adoc
msgid "To set the desired port MongoDB will listen to when it is launched, the following code should be used:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "To set the desired MongoDB version that will be launched, the following code should be used:"
msgstr ""

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"The string value used can be any of one of the `de.flapdoodle.embed.mongo.distribution.Version` or `de.flapdoodle.embed.mongo.distribution.Version.Main` enums.\n"
"If no version is specified, `Version.Main.V4_0` is used by default."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "The legacy client"
msgstr ""

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"We don't include the legacy MongoDB client by default. It contains the now retired MongoDB Java API (DB, DBCollection,... )\n"
"and the `com.mongodb.MongoClient` that is now superseded by `com.mongodb.client.MongoClient`."
msgstr ""

#. type: delimited block =
#: _versions/2.16/guides/mongodb.adoc
msgid "If you want to use the legacy API, you need to add the following dependency to your build file:"
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Building a native executable"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "You can use the MongoDB client in a native executable."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "If you want to use SSL/TLS encryption, you need to add these properties in your `application.properties`:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "You can then build a native executable with the usual command:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "Running it is as simple as executing `./target/mongodb-quickstart-1.0.0-SNAPSHOT-runner`."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "You can then point your browser to `http://localhost:8080/fruits.html` and use your application."
msgstr ""

#. type: delimited block =
#: _versions/2.16/guides/mongodb.adoc
msgid "Currently, Quarkus doesn't support link:https://docs.mongodb.com/manual/core/security-client-side-encryption/[Client-Side Field Level Encryption] in native mode."
msgstr ""

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"If you encounter the following error when running your application in native mode: +\n"
"`Failed to encode 'MyObject'. Encoding 'myVariable' errored with: Can't find a codec for class org.acme.MyVariable.` +\n"
"This means that the `org.acme.MyVariable` class is not known to GraalVM, the remedy is to add the `@RegisterForReflection` annotation to your `MyVariable class`.\n"
"More details about the `@RegisterForReflection` annotation can be found on the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Using mongo+srv:// urls"
msgstr ""

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"`mongo+srv://` urls are supported out of the box in JVM mode.\n"
"However, in native, the default DNS resolver, provided by the MongoDB client, uses JNDI and does not work in native mode."
msgstr ""

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"If you need to use `mongo+srv://` in native mode, you can configure an alternative DNS resolver.\n"
"This feature is **experimental** and may introduce a difference between JVM applications and native applications."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "To enable the alternative DNS resolver, use:"
msgstr ""

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"As indicated in the property name, it uses Vert.x to retrieve the DNS records.\n"
"By default, it tries to read the first `nameserver` from `/etc/resolv.conf`, if this file exists.\n"
"You can also configure your DNS server:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "Also, you can configure the lookup timeout using:"
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Configuration Reference"
msgstr ""

#: _versions/2.16/guides/mongodb.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""
