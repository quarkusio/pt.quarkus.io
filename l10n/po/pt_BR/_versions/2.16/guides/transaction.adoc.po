# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:10+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/2.16/guides/transaction.adoc
#, no-wrap
msgid "Using Transactions in Quarkus"
msgstr ""

#: _versions/2.16/guides/transaction.adoc
msgid ""
"Quarkus comes with a Transaction Manager and uses it to coordinate and expose transactions to your applications.\n"
"Each extension dealing with persistence will integrate with it for you.\n"
"And you will explicitly interact with transactions via CDI.\n"
"This guide will walk you through all that."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/transaction.adoc
#, no-wrap
msgid "Setting it up"
msgstr ""

#: _versions/2.16/guides/transaction.adoc
msgid ""
"You don't need to worry about setting it up most of the time as extensions needing it will simply add it as a dependency.\n"
"Hibernate ORM for example will include the transaction manager and set it up properly."
msgstr ""

#: _versions/2.16/guides/transaction.adoc
msgid ""
"You might need to add it as a dependency explicitly if you are using transactions directly without Hibernate ORM for example.\n"
"Add the following to your build file:"
msgstr ""

#. type: Block title
#: _versions/2.16/guides/transaction.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _versions/2.16/guides/transaction.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: _versions/2.16/guides/transaction.adoc
#, no-wrap
msgid "Starting and stopping transactions: defining your boundaries"
msgstr ""

#: _versions/2.16/guides/transaction.adoc
msgid ""
"You can define your transaction boundaries either declaratively with `@Transactional` or programmatically with `QuarkusTransaction`. You can also use\n"
"the JTA `UserTransaction` API directly, however this is less user-friendly than `QuarkusTransaction`."
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/transaction.adoc
#, no-wrap
msgid "Declarative approach"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/transaction.adoc
msgid "The easiest way to define your transaction boundaries is to use the `@Transactional` annotation on your entry method (`javax.transaction.Transactional`)."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/transaction.adoc
msgid "This annotation defines your transaction boundaries and will wrap this call within a transaction."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/transaction.adoc
msgid "A `RuntimeException` crossing the transaction boundaries will roll back the transaction."
msgstr ""

#: _versions/2.16/guides/transaction.adoc
msgid ""
"`@Transactional` can be used to control transaction boundaries on any CDI bean at the method level or at the class level to ensure every method is transactional.\n"
"That includes REST endpoints."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/transaction.adoc
msgid "You can control whether and how the transaction is started with parameters on `@Transactional`:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/transaction.adoc
msgid "`@Transactional(REQUIRED)` (default): starts a transaction if none was started, stays with the existing one otherwise."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/transaction.adoc
msgid "`@Transactional(REQUIRES_NEW)`: starts a transaction if none was started ; if an existing one was started, suspends it and starts a new one for the boundary of that method."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/transaction.adoc
msgid "`@Transactional(MANDATORY)`: fails if no transaction was started ; works within the existing transaction otherwise."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/transaction.adoc
msgid "`@Transactional(SUPPORTS)`: if a transaction was started, joins it ; otherwise works with no transaction."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/transaction.adoc
msgid "`@Transactional(NOT_SUPPORTED)`: if a transaction was started, suspends it and works with no transaction for the boundary of the method ; otherwise works with no transaction."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/transaction.adoc
msgid "`@Transactional(NEVER)`: if a transaction was started, raises an exception ; otherwise works with no transaction."
msgstr ""

#: _versions/2.16/guides/transaction.adoc
msgid ""
"`REQUIRED` or `NOT_SUPPORTED` are probably the most useful ones.\n"
"This is how you decide whether a method is to be running within or outside a transaction.\n"
"Make sure to check the JavaDoc for the precise semantic."
msgstr ""

#: _versions/2.16/guides/transaction.adoc
msgid ""
"The transaction context is propagated to all calls nested in the `@Transactional` method as you would expect (in this example `childDAO.addToGiftList()` and `santaDAO.addToSantaTodoList()`).\n"
"The transaction will commit unless a runtime exception crosses the method boundary.\n"
"You can override whether an exception forces the rollback or not by using `@Transactional(dontRollbackOn=SomeException.class)` (or `rollbackOn`)."
msgstr ""

#: _versions/2.16/guides/transaction.adoc
msgid ""
"You can also programmatically ask for a transaction to be marked for rollback.\n"
"Inject a `TransactionManager` for this."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/transaction.adoc
msgid "Inject the `TransactionManager` to be able to activate `setRollbackOnly` semantic."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/transaction.adoc
msgid "Programmatically decide to set the transaction for rollback."
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/transaction.adoc
#, no-wrap
msgid "Transaction Configuration"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/transaction.adoc
msgid "Advanced configuration of the transaction is possible with the use of the `@TransactionConfiguration` annotation that is set in addition to the standard `@Transactional` annotation on your entry method or at the class level."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/transaction.adoc
msgid "The `@TransactionConfiguration` annotation allows to set a timeout property, in seconds, that applies to transactions created within the annotated method."
msgstr ""

#: _versions/2.16/guides/transaction.adoc
msgid ""
"This annotation may only be placed on the top level method delineating the transaction.\n"
"Annotated nested methods once a transaction has started will throw an exception."
msgstr ""

#: _versions/2.16/guides/transaction.adoc
msgid ""
"If defined on a class, it is equivalent to defining it on all the methods of the class marked with `@Transactional`.\n"
"The configuration defined on a method takes precedence over the configuration defined on a class."
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/transaction.adoc
#, no-wrap
msgid "Reactive extensions"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/transaction.adoc
msgid "If your `@Transactional`-annotated method returns a reactive value, such as:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/transaction.adoc
msgid "`CompletionStage` (from the JDK)"
msgstr ""

#: _versions/2.16/guides/transaction.adoc
msgid "`Publisher` (from  Reactive-Streams)"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/transaction.adoc
msgid "Any type which can be converted to one of the two previous types using Reactive Type Converters"
msgstr ""

#: _versions/2.16/guides/transaction.adoc
msgid ""
"then the behaviour is a bit different, because the transaction will not be terminated until the\n"
"returned reactive value is terminated. In effect, the returned reactive value will be listened to\n"
"and if it terminates exceptionally the transaction will be marked for rollback, and will be committed\n"
"or rolled-back only at termination of the reactive value."
msgstr ""

#: _versions/2.16/guides/transaction.adoc
msgid ""
"This allows your reactive methods to keep on working on the transaction asynchronously until their\n"
"work is really done, and not just until the reactive method returns."
msgstr ""

#: _versions/2.16/guides/transaction.adoc
msgid ""
"If you need to propagate your transaction context across your reactive pipeline, please see the\n"
"xref:context-propagation.adoc[Context Propagation guide]."
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/transaction.adoc
#, no-wrap
msgid "Programmatic Approach"
msgstr ""

#: _versions/2.16/guides/transaction.adoc
msgid ""
"You can use static methods on `QuarkusTransaction` to define transaction boundaries. This provides two different options,\n"
"a functional approach that allows you to run a lambda within the scope of a transaction, or by using explicit `begin`,\n"
"`commit` and `rollback` methods."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/transaction.adoc
msgid "The above example shows a few different ways the API can be used."
msgstr ""

#: _versions/2.16/guides/transaction.adoc
msgid ""
"The first method simply calls begin, does some work and commits it.\n"
"This created transaction is tied to the CDI request scope, so if it is still active when the request scope is destroyed then it will\n"
"be automatically rolled back. This removes the need to explicitly catch exceptions and call `rollback`, and acts as a safety net\n"
"against inadvertent transaction leaks, however it does mean that this can only be used when the request scope is active. The second\n"
"example in the method calls begin with a timeout option, and then rolls back the transaction."
msgstr ""

#: _versions/2.16/guides/transaction.adoc
msgid ""
"The second method shows the use of lambda scoped transactions with `QuarkusTransaction.runner(...)`;\n"
"the first example just runs a `Runnable` within a new transaction,\n"
"the second does the same but joining the existing transaction (if any),\n"
"and the third calls a `Callable` with some specific options.\n"
"In particular the `exceptionHandler` method can be used to control if the transaction is rolled back or not on exception."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/transaction.adoc
msgid "The following semantics are supported:"
msgstr ""

#. type: Labeled list
#: _versions/2.16/guides/transaction.adoc
#, no-wrap
msgid "`QuarkusTransaction.disallowingExisting()`/`DISALLOW_EXISTING`"
msgstr ""

#: _versions/2.16/guides/transaction.adoc
msgid ""
"If a transaction is already associated with the current thread a `QuarkusTransactionException` will be thrown,\n"
"otherwise a new transaction is started, and follows all the normal lifecycle rules."
msgstr ""

#. type: Labeled list
#: _versions/2.16/guides/transaction.adoc
#, no-wrap
msgid "`QuarkusTransaction.joiningExisting()`/`JOIN_EXISTING`"
msgstr ""

#: _versions/2.16/guides/transaction.adoc
msgid ""
"If no transaction is active then a new transaction will be started, and committed when the method ends.\n"
"If an exception is thrown the exception handler registered by `#exceptionHandler(Function)` will be called to\n"
"decide if the TX should be committed or rolled back.\n"
"If an existing transaction is active then the method is run in the context of the existing transaction. If an\n"
"exception is thrown the exception handler will be called, however\n"
"a result of `ExceptionResult#ROLLBACK` will result in the TX marked as rollback only, while a result of\n"
"`ExceptionResult#COMMIT` will result in no action being taken."
msgstr ""

#. type: Labeled list
#: _versions/2.16/guides/transaction.adoc
#, no-wrap
msgid "`QuarkusTransaction.requiringNew()`/`REQUIRE_NEW`"
msgstr ""

#: _versions/2.16/guides/transaction.adoc
msgid ""
"If an existing transaction is already associated with the current thread then the transaction is suspended,\n"
"then a new transaction is started which follows all the normal lifecycle rules,\n"
"and when it's complete the original transaction is resumed.\n"
"Otherwise, a new transaction is started, and follows all the normal lifecycle rules."
msgstr ""

#. type: Labeled list
#: _versions/2.16/guides/transaction.adoc
#, no-wrap
msgid "`QuarkusTransaction.suspendingExisting()`/`SUSPEND_EXISTING`"
msgstr ""

#: _versions/2.16/guides/transaction.adoc
msgid ""
"If no transaction is active then these semantics are basically a no-op.\n"
"If a transaction is active then it is suspended, and resumed after the task is run.\n"
"The exception handler will never be consulted when these semantics are in use, specifying both an exception handler and\n"
"these semantics are considered an error.\n"
"These semantics allows for code to easily be run outside the scope of a transaction."
msgstr ""

#. type: Title ===
#: _versions/2.16/guides/transaction.adoc
#, no-wrap
msgid "Legacy API approach"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/transaction.adoc
msgid "The less easy way is to inject a `UserTransaction` and use the various transaction demarcation methods."
msgstr ""

#. type: delimited block =
#: _versions/2.16/guides/transaction.adoc
msgid "You cannot use `UserTransaction` in a method having a transaction started by a `@Transactional` call."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/transaction.adoc
#, no-wrap
msgid "Configuring the transaction timeout"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/transaction.adoc
msgid "You can configure the default transaction timeout, the timeout that applies to all transactions managed by the transaction manager, via the property `quarkus.transaction-manager.default-transaction-timeout`, specified as a duration."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/transaction.adoc
msgid "The default value is 60 seconds."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/transaction.adoc
#, no-wrap
msgid "Configuring transaction node name identifier"
msgstr ""

#: _versions/2.16/guides/transaction.adoc
msgid ""
"Narayana, as the underlying transaction manager, has a concept of a unique node identifier.\n"
"This is important if you consider using XA transactions that involve multiple resources."
msgstr ""

#: _versions/2.16/guides/transaction.adoc
msgid ""
"The node name identifier plays a crucial part in the identification of a transaction.\n"
"The node name identifier is forged into the transaction id when the transaction is created.\n"
"Based on the node name identifier, the transaction manager is capable of recognizing the XA transaction\n"
"counterparts created in database or JMS broker. The identifier makes possible for the transaction manager\n"
"to roll back the transaction counterparts during recovery."
msgstr ""

#: _versions/2.16/guides/transaction.adoc
msgid ""
"The node name identifier needs to be unique per transaction manager deployment.\n"
"And the node identifier needs to be stable over the transaction manager restarts."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/transaction.adoc
msgid "The node name identifier may be configured via the property `quarkus.transaction-manager.node-name`."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/transaction.adoc
#, no-wrap
msgid "Using `@TransactionScoped` to bind CDI beans to the transaction lifecycle"
msgstr ""

#: _versions/2.16/guides/transaction.adoc
msgid ""
"You can define beans that live for as long as a transaction,\n"
"and through CDI lifecycle events perform actions when a transaction starts and ends."
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/transaction.adoc
msgid "Just assign the transaction xref:cdi.adoc#bean-scope[scope] to such beans using the `@TransactionScoped` annotation:"
msgstr ""

#: _versions/2.16/guides/transaction.adoc
msgid ""
"Alternatively, if you don't necessarily need to hold state during the transaction,\n"
"and just want to react to transaction start/end events,\n"
"you can simply declare event listeners in a differently scoped bean:"
msgstr ""

#. type: Plain text
#: _versions/2.16/guides/transaction.adoc
msgid "The `event` object represents the transaction ID, and defines `toString()`/`equals()`/`hashCode()` accordingly."
msgstr ""

#: _versions/2.16/guides/transaction.adoc
msgid ""
"In listener methods, you can access more information about the transaction in progress by accessing the `TransactionManager`,\n"
"which is a CDI bean and can be ``@Inject``ed."
msgstr ""

#. type: Title ==
#: _versions/2.16/guides/transaction.adoc
#, no-wrap
msgid "Why always having a transaction manager?"
msgstr ""

#. type: Labeled list
#: _versions/2.16/guides/transaction.adoc
#, no-wrap
msgid "Does it work everywhere I want to?"
msgstr ""

#: _versions/2.16/guides/transaction.adoc
msgid ""
"Yep, it works in your Quarkus application, in your IDE, in your tests, because all of these are Quarkus applications.\n"
"JTA has some bad press for some people.\n"
"I don't know why.\n"
"Let's just say that this is not your grandpa's JTA implementation.\n"
"What we have is perfectly embeddable and lean."
msgstr ""

#. type: Labeled list
#: _versions/2.16/guides/transaction.adoc
#, no-wrap
msgid "Does it do 2 Phase Commit and slow down my app?"
msgstr ""

#: _versions/2.16/guides/transaction.adoc
msgid ""
"No, this is an old folk tale.\n"
"Let's assume it essentially comes for free and let you scale to more complex cases involving several datasources as needed."
msgstr ""

#. type: Labeled list
#: _versions/2.16/guides/transaction.adoc
#, no-wrap
msgid "I don't need transaction when I do read only operations, it's faster."
msgstr ""

#: _versions/2.16/guides/transaction.adoc
msgid ""
"Wrong. +\n"
"First off, just disable the transaction by marking your transaction boundary with `@Transactional(NOT_SUPPORTED)` (or `NEVER` or `SUPPORTS` depending on the semantic you want). +\n"
"Second, it's again fairy tale that not using transaction is faster.\n"
"The answer is, it depends on your DB and how many SQL SELECTs you are making.\n"
"No transaction means the DB does have a single operation transaction context anyway. +\n"
"Third, when you do several SELECTs, it's better to wrap them in a single transaction because they will all be consistent with one another.\n"
"Say your DB represents your car dashboard, you can see the number of kilometers remaining and the fuel gauge level.\n"
"By reading it in one transaction, they will be consistent.\n"
"If you read one and the other from two different transactions, then they can be inconsistent.\n"
"It can be more dramatic if you read data related to rights and access management for example."
msgstr ""

#. type: Labeled list
#: _versions/2.16/guides/transaction.adoc
#, no-wrap
msgid "Why do you prefer JTA vs Hibernate's transaction management API"
msgstr ""

#: _versions/2.16/guides/transaction.adoc
msgid ""
"Managing the transactions manually via `entityManager.getTransaction().begin()` and friends lead to a butt ugly code with tons of try catch finally that people get wrong.\n"
"Transactions are also about JMS and other database access, so one API makes more sense."
msgstr ""

#. type: Labeled list
#: _versions/2.16/guides/transaction.adoc
#, no-wrap
msgid "It's a mess because I don't know if my JPA persistence unit is using `JTA` or `Resource-level` Transaction"
msgstr ""

#: _versions/2.16/guides/transaction.adoc
msgid ""
"It's not a mess in Quarkus :)\n"
"Resource-level was introduced to support JPA in a non managed environment.\n"
"But Quarkus is both lean and a managed environment, so we can safely always assume we are in JTA mode.\n"
"The end result is that the difficulties of running Hibernate ORM + CDI + a transaction manager in Java SE mode are solved by Quarkus."
msgstr ""
