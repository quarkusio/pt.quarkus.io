# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:10+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:2
#, no-wrap
msgid "Secure a Quarkus application with Basic authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:8
msgid "Secure your Quarkus application endpoints by combining xref:security-built-in-authentication-support-concept.adoc#basic-auth[Quarkus built-in basic HTTP authentication] with the JPA identity provider to enable role-based access control (RBAC).  The JPA `IdentityProvider` creates a `SecurityIdentity` instance, which is used during user authentication to verify and authorize access requests making your Quarkus application secure."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:10
msgid "This tutorial prepares you for implementing more advanced security mechanisms in Quarkus, for example, how to use the OpenID Connect (OIDC) authentication mechanism."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:11
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:15
#, no-wrap
msgid "What you will build"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:18
msgid "The steps in this tutorial guide you through building an application that provides the following endpoints:"
msgstr ""

#. type: Table
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:21
#, no-wrap
msgid "Endpoint"
msgstr ""

#. type: Table
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:22
#, no-wrap
msgid "Description"
msgstr ""

#. type: Table
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:22
#, no-wrap
msgid "`/api/public`"
msgstr ""

#. type: Table
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:23
#, no-wrap
msgid "The `/api/public` endpoint can be accessed anonymously."
msgstr ""

#. type: Table
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:23
#, no-wrap
msgid "`/api/admin`"
msgstr ""

#. type: Table
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:25
#, no-wrap
msgid ""
"The `/api/admin` endpoint is protected with role-based access control (RBAC), and only users who have been granted the `admin` role can access it.\n"
"At this endpoint, the `@RolesAllowed` annotation is used to declaratively enforce the access constraint."
msgstr ""

#. type: Table
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:25
#, no-wrap
msgid "`/api/users/me`"
msgstr ""

#. type: Table
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:26
#, no-wrap
msgid "The `/api/users/me` endpoint is protected with RBAC and only users that have been granted the `user` role can access it. A JSON document with details about the user is returned as a response."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:31
msgid "If you just want to examine the code, you can fast-forward to the completed example by using one of the following ways:"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:33
msgid "Download the {quickstarts-archive-url}[archive]"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:34
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:36
msgid "You can find the solution in the `security-jpa-quickstart` {quickstarts-tree-url}/security-jpa-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:41
#, no-wrap
msgid "Create a Maven project"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:45
msgid "For Quarkus security to be able to map your security source to JPA entities, ensure that the Maven project that is used in this tutorial includes the `security-jpa` extension.  You can either create a new Maven project with the `security-jpa` extension or you can add the extension to an existing Maven project."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:47
msgid "To create the Maven project, use the following command:"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:56
msgid "xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache] is used to store your user identities but you can also use xref:hibernate-orm.adoc[Hibernate ORM].  You must also add your preferred database connector library.  The instructions in this example tutorial use a PostgreSQL database for the identity store."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:58
msgid "To add the `security-jpa` extension to an existing Maven project, run the following command from your project base directory:"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:62
#, no-wrap
msgid "Verification"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:65
msgid "When you run either command, the following XML is added to your build file:"
msgstr ""

#. type: Block title
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:67
#, no-wrap
msgid "pom.xml"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:73
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-security-jpa</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:76
#, no-wrap
msgid "build.gradle"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:79
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-security-jpa\")\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:81
#, no-wrap
msgid "Write the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:85
msgid "Let's start by implementing the `/api/public` endpoint to allow all users access to access the application.  Add a regular JAX-RS resource to your Java source code, as outlined in the following code snippet:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:89
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:113
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:137
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:164
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:247
#, no-wrap
msgid "package org.acme.security.jpa;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:95
#, no-wrap
msgid ""
"import javax.annotation.security.PermitAll;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:98
#, no-wrap
msgid ""
"@Path(\"/api/public\")\n"
"public class PublicResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:106
#, no-wrap
msgid ""
"    @GET\n"
"    @PermitAll\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String publicResource() {\n"
"        return \"public\";\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:109
msgid "The source code for the `/api/admin` endpoint is similar but instead you use a `@RolesAllowed` annotation to make sure that only users granted the `admin` role can access the endpoint.  Add a JAX-RS resource with the following `@RolesAllowed` annotation:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:119
#, no-wrap
msgid ""
"import javax.annotation.security.RolesAllowed;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:122
#, no-wrap
msgid ""
"@Path(\"/api/admin\")\n"
"public class AdminResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:130
#, no-wrap
msgid ""
"    @GET\n"
"    @RolesAllowed(\"admin\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String adminResource() {\n"
"         return \"admin\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:133
msgid "Finally, implement the `/api/users/me` endpoint. As you can see from the source code example below, we are trusting only users with the `user` role.  We are also using `SecurityContext` to get access to the currently authenticated `Principal`, and we return the user name, all of which is loaded from the database."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:144
#, no-wrap
msgid ""
"import javax.annotation.security.RolesAllowed;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.core.Context;\n"
"import javax.ws.rs.core.SecurityContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:147
#, no-wrap
msgid ""
"@Path(\"/api/users\")\n"
"public class UserResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:155
#, no-wrap
msgid ""
"    @GET\n"
"    @RolesAllowed(\"user\")\n"
"    @Path(\"/me\")\n"
"    public String me(@Context SecurityContext securityContext) {\n"
"        return securityContext.getUserPrincipal().getName();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:157
#, no-wrap
msgid "Define the user entity"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:160
msgid "You can now describe how you want security information to be stored in the model by adding annotations to the `user` entity, as outlined in the following code snippet:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:167
#, no-wrap
msgid ""
"import javax.persistence.Entity;\n"
"import javax.persistence.Table;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:174
#, no-wrap
msgid ""
"import io.quarkus.hibernate.orm.panache.PanacheEntity;\n"
"import io.quarkus.elytron.security.common.BcryptUtil;\n"
"import io.quarkus.security.jpa.Password;\n"
"import io.quarkus.security.jpa.Roles;\n"
"import io.quarkus.security.jpa.UserDefinition;\n"
"import io.quarkus.security.jpa.Username;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:185
#, no-wrap
msgid ""
"@Entity\n"
"@Table(name = \"test_user\")\n"
"@UserDefinition <1>\n"
"public class User extends PanacheEntity {\n"
"    @Username <2>\n"
"    public String username;\n"
"    @Password <3>\n"
"    public String password;\n"
"    @Roles <4>\n"
"    public String role;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:200
#, no-wrap
msgid ""
"    /**\n"
"     * Adds a new user to the database\n"
"     * @param username the username\n"
"     * @param password the unencrypted password (it will be encrypted with bcrypt)\n"
"     * @param role the comma-separated roles\n"
"     */\n"
"    public static void add(String username, String password, String role) { <5>\n"
"        User user = new User();\n"
"        user.username = username;\n"
"        user.password = BcryptUtil.bcryptHash(password);\n"
"        user.role = role;\n"
"        user.persist();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:204
msgid "The `security-jpa` extension initializes only if there is a single entity annotated with `@UserDefinition`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:206
msgid "The `@UserDefinition` annotation must be present on a single entity and can be either a regular Hibernate ORM entity or a Hibernate ORM with Panache entity."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:207
msgid "Indicates the field used for the user name."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:208
msgid "Indicates the field used for the password, which defaults to using bcrypt hashed passwords but you can also configure it for plain text or custom passwords."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:209
msgid "This indicates the comma-separated list of roles added to the target principal representation attributes."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:210
msgid "This method allows us to add users while hashing the password with the proper bcrypt hash."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:211
#, no-wrap
msgid "Configure the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:214
msgid "Enable xref:security-built-in-authentication-support-concept.adoc#basic-auth[Quarkus built-in basic HTTP authentication] by setting the `quarkus.http.auth.basic` property to `true`:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:216
msgid "`quarkus.http.auth.basic`=true`"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:221
msgid "When secure access is required and no other authentication mechanisms are enabled, xref:security-built-in-authentication-support-concept.adoc#basic-auth[Quarkus built-in basic HTTP authentication] is the fallback authentication mechanism.  Therefore, in this tutorial, you do not need to set the property `quarkus.http.auth.basic=true`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:224
msgid "Configure at least one data source so that the `security-jpa` extension can access your database."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:228
#, no-wrap
msgid "quarkus.http.auth.basic=true\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:233
#, no-wrap
msgid ""
"quarkus.datasource.db-kind=postgresql\n"
"quarkus.datasource.username=quarkus\n"
"quarkus.datasource.password=quarkus\n"
"quarkus.datasource.jdbc.url=jdbc:postgresql:security_jpa\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:235
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:297
#, no-wrap
msgid "quarkus.hibernate-orm.database.generation=drop-and-create\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:238
msgid "To initialize the database with users and roles, implement the `Startup` class, as outlined in the following code snippet:"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:242
msgid "In this tutorial, a PostgreSQL database is used for the identity store. Hibernate ORM automatically creates the database schema on startup (change this in production)."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:251
#, no-wrap
msgid ""
"import javax.enterprise.event.Observes;\n"
"import javax.inject.Singleton;\n"
"import javax.transaction.Transactional;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:253
#, no-wrap
msgid "import io.quarkus.runtime.StartupEvent;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:265
#, no-wrap
msgid ""
"@Singleton\n"
"public class Startup {\n"
"    @Transactional\n"
"    public void loadUsers(@Observes StartupEvent evt) {\n"
"        // reset and load all test users\n"
"        User.deleteAll();\n"
"        User.add(\"admin\", \"admin\", \"admin\");\n"
"        User.add(\"user\", \"user\", \"user\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:268
msgid "The application is now protected and the user identities are provided by the specified database."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:273
msgid "In a production environment, do not store plain text passwords.  As a result, the `security-jpa` defaults to using bcrypt-hashed passwords."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:275
#, no-wrap
msgid "Test your application"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:277
#, no-wrap
msgid "Use Dev Services for PostgreSQL to test your application"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:282
msgid "Add the integration tests before you run your application in production mode."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:285
msgid "Use xref:https://quarkus.io/guides/dev-services#databases[Dev Services for PostgreSQL] for the integration testing of your application in JVM and native modes."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:288
msgid "The following properties configuration demonstrates how you can enable PostgreSQL testing to run in production (`prod`) mode only.  In this scenario, `Dev Services for PostgreSQL` launches and configures a `PostgreSQL` test container."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:295
#, no-wrap
msgid ""
"%prod.quarkus.datasource.db-kind=postgresql\n"
"%prod.quarkus.datasource.username=quarkus\n"
"%prod.quarkus.datasource.password=quarkus\n"
"%prod.quarkus.datasource.jdbc.url=jdbc:postgresql:elytron_security_jpa\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:300
msgid "If you add the `%prod.` profile prefix, data source properties are not visible to `Dev Services for PostgreSQL` and are only observed by an application running in production mode."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:302
msgid "To write the integration test, use the following code sample:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:306
#, no-wrap
msgid "package org.acme.elytron.security.jpa;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:310
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.get;\n"
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.core.Is.is;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:313
#, no-wrap
msgid ""
"import org.apache.http.HttpStatus;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:315
#, no-wrap
msgid "import io.quarkus.test.junit.QuarkusTest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:318
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class JpaSecurityRealmTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:324
#, no-wrap
msgid ""
"    @Test\n"
"    void shouldAccessPublicWhenAnonymous() {\n"
"        get(\"/api/public\")\n"
"                .then()\n"
"                .statusCode(HttpStatus.SC_OK);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:326
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:334
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:345
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:332
#, no-wrap
msgid ""
"    @Test\n"
"    void shouldNotAccessAdminWhenAnonymous() {\n"
"        get(\"/api/admin\")\n"
"                .then()\n"
"                .statusCode(HttpStatus.SC_UNAUTHORIZED);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:343
#, no-wrap
msgid ""
"    @Test\n"
"    void shouldAccessAdminWhenAdminAuthenticated() {\n"
"        given()\n"
"                .auth().preemptive().basic(\"admin\", \"admin\")\n"
"                .when()\n"
"                .get(\"/api/admin\")\n"
"                .then()\n"
"                .statusCode(HttpStatus.SC_OK);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:355
#, no-wrap
msgid ""
"    @Test\n"
"    void shouldNotAccessUserWhenAdminAuthenticated() {\n"
"        given()\n"
"                .auth().preemptive().basic(\"admin\", \"admin\")\n"
"                .when()\n"
"                .get(\"/api/users/me\")\n"
"                .then()\n"
"                .statusCode(HttpStatus.SC_FORBIDDEN);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:367
#, no-wrap
msgid ""
"    @Test\n"
"    void shouldAccessUserAndGetIdentityWhenUserAuthenticated() {\n"
"        given()\n"
"                .auth().preemptive().basic(\"user\", \"user\")\n"
"                .when()\n"
"                .get(\"/api/users/me\")\n"
"                .then()\n"
"                .statusCode(HttpStatus.SC_OK)\n"
"                .body(is(\"user\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:370
msgid "As you can see in this code sample, you do not need to start the test container from the test code."
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:376
msgid "If you start your application in dev mode, `Dev Services for PostgreSQL` launches a `PostgreSQL` `devmode` container so that you can start developing your application.  While developing your application, you can also start to add tests one by one and run them by using the xref:continuous-testing.adoc[Continuous Testing] feature.  `Dev Services for PostgreSQL` supports testing while you develop by providing a separate `PostgreSQL` test container that does not conflict with the `devmode` container."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:378
#, no-wrap
msgid "Use `curl` or a browser to test your application"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:381
msgid "Use the following example to start the PostgreSQL server:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:386
#, no-wrap
msgid ""
"docker run --rm=true --name security-getting-started -e POSTGRES_USER=quarkus \\\n"
"           -e POSTGRES_PASSWORD=quarkus -e POSTGRES_DB=elytron_security_jpa \\\n"
"           -p 5432:5432 postgres:14.1\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:387
#, no-wrap
msgid "Compile and run the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:390
msgid "Compile and run your Quarkus application by using one of the following methods:"
msgstr ""

#. type: Title ====
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:391
#, no-wrap
msgid "JVM mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:396
msgid "Compile the application: Run the application:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:400
#, no-wrap
msgid "java -jar target/quarkus-app/quarkus-run.jar\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:402
#, no-wrap
msgid "Native mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:405
msgid "Compile the application:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:409
msgid "Run the application:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:412
#, no-wrap
msgid "./target/security-jpa-quickstart-runner\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:414
#, no-wrap
msgid "Access and test the application security"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:418
msgid "When your application is running, you can access your application by using one of the following `curl` commands.  You can also access the same endpoint URLs by using a browser."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:420
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:431
msgid "Connect to a protected endpoint anonymously:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:426
#, no-wrap
msgid ""
"$ curl -i -X GET http://localhost:8080/api/public\n"
"HTTP/1.1 200 OK\n"
"Content-Length: 6\n"
"Content-Type: text/plain;charset=UTF-8\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:428
#, no-wrap
msgid "public%\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:438
#, no-wrap
msgid ""
"$ curl -i -X GET http://localhost:8080/api/admin\n"
"HTTP/1.1 401 Unauthorized\n"
"Content-Length: 14\n"
"Content-Type: text/html;charset=UTF-8\n"
"WWW-Authenticate: Basic\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:440
#, no-wrap
msgid "Not authorized%\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:445
msgid "When you use a browser to anonymously connect to a protected resource, a basic authentication form displays prompting you to enter credentials."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:448
msgid "Connect to a protected endpoint as an authorized user:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:455
#, no-wrap
msgid ""
"$ curl -i -X GET -u admin:admin http://localhost:8080/api/admin\n"
"HTTP/1.1 200 OK\n"
"Content-Length: 5\n"
"Content-Type: text/plain;charset=UTF-8\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:457
#, no-wrap
msgid "admin%\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:459
#, no-wrap
msgid "Results"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:463
msgid "When you provide the credentials of an authorized user, for example, `admin:admin`, the JPA security extension authenticates and loads the roles of the user.  The `admin` user is authorized to access the protected resources."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:465
msgid "If a resource is protected with `@RolesAllowed(\"user\")`, the user `admin` is not authorized to access the resource because it is not assigned to the \"user\" role, as outlined in the following shell example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:472
#, no-wrap
msgid ""
"$ curl -i -X GET -u admin:admin http://localhost:8080/api/users/me\n"
"HTTP/1.1 403 Forbidden\n"
"Content-Length: 34\n"
"Content-Type: text/html;charset=UTF-8\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:474
#, no-wrap
msgid "Forbidden%\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:477
msgid "Finally, the user name `user` is authorized and the security context contains the principal details, for example, the user name."
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:484
#, no-wrap
msgid ""
"$ curl -i -X GET -u user:user http://localhost:8080/api/users/me\n"
"HTTP/1.1 200 OK\n"
"Content-Length: 4\n"
"Content-Type: text/plain;charset=UTF-8\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:486
#, no-wrap
msgid "user%\n"
msgstr ""

#.  The following section needs to be moved as SMEs confirmed that it does not really fit in the new content here. In the next phase of refactoring, consider moving this section into a dedicated concept/reference topic.
#. type: Title ==
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:492
#, no-wrap
msgid "Quarkus Security JPA information"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:495
msgid "Now that you have successfully run and tested the security quick start project, you are ready to explore more security features of Quarkus Security and the JPA identity store."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:496
#, no-wrap
msgid "Supported model types"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:499
msgid "The `@UserDefinition` class must be a JPA entity (with Panache or not)."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:500
msgid "The `@Username` and `@Password` field types must be of type `String`."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:501
msgid "The `@Roles` field must either be of type `String` or `Collection<String>` or alternately a `Collection<X>` where `X` is an entity class with one `String` field annotated with the `@RolesValue` annotation."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:502
msgid "Each `String` role element type will be parsed as a comma-separated list of roles."
msgstr ""

#. type: Title ===
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:503
#, no-wrap
msgid "Storing roles in another entity"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:506
msgid "Use the following sample to store roles inside another entity:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:515
#, no-wrap
msgid ""
"@UserDefinition\n"
"@Table(name = \"test_user\")\n"
"@Entity\n"
"public class User extends PanacheEntity {\n"
"    @Username\n"
"    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:518
#, no-wrap
msgid ""
"    @Password\n"
"    public String pass;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:523
#, no-wrap
msgid ""
"    @ManyToMany\n"
"    @Roles\n"
"    public List<Role> roles = new ArrayList<>();\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:526
#, no-wrap
msgid ""
"@Entity\n"
"public class Role extends PanacheEntity {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:529
#, no-wrap
msgid ""
"    @ManyToMany(mappedBy = \"roles\")\n"
"    public List<ExternalRolesUserEntity> users;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:533
#, no-wrap
msgid ""
"    @RolesValue\n"
"    public String role;\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:535
#, no-wrap
msgid "Password storage and hashing"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:539
msgid "By default, passwords are stored and hashed by using https://en.wikipedia.org/wiki/Bcrypt[bcrypt] under the https://en.wikipedia.org/wiki/Crypt_(C)[Modular Crypt Format] (MCF)."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:543
msgid "When you need to create a hashed password we provide the convenient `String BcryptUtil.bcryptHash(String password)` function, which defaults to creating a random salt and hashing in 10 iterations.  You can also specify the number of iterations and the salt."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:545
msgid "When you use MCF, you don't need dedicated columns to store the hashing algorithm, the iterations count, or the salt because they are all stored in the hashed value."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:547
msgid "You can also store passwords by using a different hashing algorithm, for example, `@Password(value = PasswordType.CUSTOM, provider = CustomPasswordProvider.class)`, as outlined in the following code snippet:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:557
#, no-wrap
msgid ""
"@UserDefinition\n"
"@Table(name = \"test_user\")\n"
"@Entity\n"
"public class CustomPasswordUserEntity {\n"
"    @Id\n"
"    @GeneratedValue\n"
"    public Long id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:561
#, no-wrap
msgid ""
"    @Column(name = \"username\")\n"
"    @Username\n"
"    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:565
#, no-wrap
msgid ""
"    @Column(name = \"password\")\n"
"    @Password(value = PasswordType.CUSTOM, provider = CustomPasswordProvider.class)\n"
"    public String pass;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:569
#, no-wrap
msgid ""
"    @Roles\n"
"    public String role;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:577
#, no-wrap
msgid ""
"public class CustomPasswordProvider implements PasswordProvider {\n"
"    @Override\n"
"    public Password getPassword(String pass) {\n"
"        byte[] digest = DatatypeConverter.parseHexBinary(pass);\n"
"        return SimpleDigestPassword.createRaw(SimpleDigestPassword.ALGORITHM_SIMPLE_DIGEST_SHA_256, digest);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:581
msgid "In a test environment, you can also store passwords in plain text by using `@Password(PasswordType.CLEAR)`.  For applications running in production, do not store passwords in plain text."
msgstr ""

#. type: Title ==
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:582
#, no-wrap
msgid "What's next"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:586
msgid "Congratulations! You have learned how to create and test a secure Quarkus application by combining the xref:security-built-in-authentication-support-concept.adoc#basic-auth[Quarkus built-in basic HTTP authentication] with the JPA identity provider."
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:589
msgid "After you have completed this tutorial, explore some of the more advanced security mechanisms in Quarkus.  Use the following information to learn how you can securely use `OpenID Connect` to provide secure single sign-on access to your Quarkus endpoints:"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:591
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:598
msgid "xref:security-openid-connect.adoc[Using OpenID Connect (OIDC) to Protect Service Applications using Bearer Token Authorization]"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:593
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:600
msgid "xref:security-openid-connect-web-authentication.adoc[Using OpenID Connect (OIDC) to Protect Web Applications using Authorization Code Flow ]"
msgstr ""

#. type: Title ==
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:594
#, no-wrap
msgid "References"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:597
msgid "xref:security-overview-concept.adoc[Quarkus Security overview]"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:601
msgid "xref:hibernate-orm-panache.adoc[Simplified Hibernate ORM with Panache]"
msgstr ""

#. type: Plain text
#: upstream/_versions/2.16/guides/security-basic-authentication-tutorial.adoc:601
msgid "xref:hibernate-orm.adoc[Using Hibernate ORM and JPA]"
msgstr ""
