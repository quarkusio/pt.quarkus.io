# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:10+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/3.2/guides/funqy.adoc
#, fuzzy, no-wrap
msgid "Funqy"
msgstr "Funqy"

#: _versions/3.2/guides/funqy.adoc
#, fuzzy
msgid ""
"Quarkus Funqy is part of Quarkus's serverless strategy and aims to provide a portable Java API to write functions\n"
"deployable to various FaaS environments like AWS Lambda, Azure Functions, Google Cloud Functions, Knative, and Knative Events (Cloud Events).\n"
"It is also usable as a standalone service."
msgstr "O Quarkus Funqy faz parte da estratégia sem servidor da Quarkus e tem como objetivo fornecer uma API Java portátil para escrever funções implantáveis em vários ambientes FaaS, como AWS Lambda, Azure Functions, Google Cloud Functions, Knative e Knative Events (Cloud Events). Ele também pode ser usado como um serviço autônomo."

#: _versions/3.2/guides/funqy.adoc
#, fuzzy
msgid ""
"Because Funqy is an abstraction that spans multiple different cloud/function providers\n"
"and protocols it has to be a very simple API and thus, might not have all the features you are used\n"
"to in other remoting abstractions.  A nice side effect though is that Funqy is as optimized and\n"
"as small as possible.  This means that because Funqy sacrifices a little on flexibility, you'll\n"
"get a framework that has little to no overhead."
msgstr "Como a Funqy é uma abstração que abrange vários protocolos e provedores de nuvem/função diferentes, ela precisa ser uma API muito simples e, portanto, pode não ter todos os recursos com os quais o senhor está acostumado em outras abstrações de remoting. Um bom efeito colateral, porém, é que a Funqy é tão otimizada e tão pequena quanto possível. Isso significa que, como o Funqy sacrifica um pouco a flexibilidade, o senhor terá uma estrutura com pouca ou nenhuma sobrecarga."

#. type: Title ==
#: _versions/3.2/guides/funqy.adoc
#, fuzzy, no-wrap
msgid "Funqy Basics"
msgstr "Fundamentos do Funqy"

#: _versions/3.2/guides/funqy.adoc
#, fuzzy
msgid ""
"The Funqy API is simple.  Annotate a method with `@Funq`.  This method may only have one optional input parameter\n"
"and may or may not return a response."
msgstr "A API da Funqy é simples. Anote um método com `@Funq` . Esse método pode ter apenas um parâmetro de entrada opcional e pode ou não retornar uma resposta."

#: _versions/3.2/guides/funqy.adoc
#, fuzzy
msgid ""
"Java classes can also be used as input and output and must follow the Java bean convention and have\n"
"a default constructor.  The Java type that is declared as the parameter or return type is the type that will be\n"
"expected by the Funqy runtime.  Funqy does type introspection at build time to speed up boot time, so any derived types\n"
"will not be noticed by the Funqy marshalling layer at runtime."
msgstr "As classes Java também podem ser usadas como entrada e saída e devem seguir a convenção Java bean e ter um construtor padrão. O tipo Java que é declarado como parâmetro ou tipo de retorno é o tipo que será esperado pelo tempo de execução do Funqy. A Funqy faz a introspecção de tipos no momento da construção para acelerar o tempo de inicialização, de modo que quaisquer tipos derivados não serão percebidos pela camada de marshalling da Funqy em tempo de execução."

#. type: Plain text
#: _versions/3.2/guides/funqy.adoc
#, fuzzy
msgid "Here's an example of using a POJO as input and output types."
msgstr "Aqui está um exemplo de uso de um POJO como tipos de entrada e saída."

#. type: Title ==
#: _versions/3.2/guides/funqy.adoc
#, fuzzy, no-wrap
msgid "Async Reactive Types"
msgstr "Tipos reativos assíncronos"

#: _versions/3.2/guides/funqy.adoc
#, fuzzy
msgid ""
"Funqy supports the https://smallrye.io/smallrye-mutiny[Smallrye Mutiny] `Uni` reactive type as a return type.  The only requirement is that\n"
"the `Uni` must fill out the generic type."
msgstr "A Funqy suporta o tipo reativo link:https://smallrye.io/smallrye-mutiny[Smallrye Mutiny] `Uni` como um tipo de retorno. A única exigência é que o site `Uni` preencha o tipo genérico."

#. type: Title ==
#: _versions/3.2/guides/funqy.adoc
#, fuzzy, no-wrap
msgid "Function Names"
msgstr "Nomes de funções"

#: _versions/3.2/guides/funqy.adoc
#, fuzzy
msgid ""
"The function name defaults to the method name and is case-sensitive.  If you want your function referenced by a different name,\n"
"parameterize the `@Funq` annotation as follows:"
msgstr "O nome da função tem como padrão o nome do método e diferencia maiúsculas de minúsculas. Se o senhor quiser que a função seja referenciada por um nome diferente, parametrize a anotação `@Funq` da seguinte forma:"

#. type: Title ==
#: _versions/3.2/guides/funqy.adoc
#, fuzzy, no-wrap
msgid "Funqy DI"
msgstr "Funqy DI"

#: _versions/3.2/guides/funqy.adoc
#, fuzzy
msgid ""
"Each Funqy Java class is a Quarkus Arc component and supports dependency injection through\n"
"CDI or Spring DI.  Spring DI requires including the `quarkus-spring-di` dependency in your build."
msgstr "Cada classe Java da Funqy é um componente do Quarkus Arc e suporta injeção de dependência por meio de CDI ou Spring DI. O Spring DI requer a inclusão da dependência `quarkus-spring-di` em sua construção."

#. type: Plain text
#: _versions/3.2/guides/funqy.adoc
#, fuzzy
msgid "The default object lifecycle for a Funqy class is `@Dependent`."
msgstr "O ciclo de vida padrão do objeto para uma classe Funqy é `@Dependent` ."

#. type: Title ==
#: _versions/3.2/guides/funqy.adoc
#, fuzzy, no-wrap
msgid "Context injection"
msgstr "Injeção de contexto"

#: _versions/3.2/guides/funqy.adoc
#, fuzzy
msgid ""
"The Funqy API will usually not allow you to inject or use abstractions that\n"
"are specific to a protocol (i.e. HTTP) or function API (i.e. AWS Lambda).  There are\n"
"exceptions to the rule though, and you may be able to inject\n"
"contextual information that is specific to the environment you are deploying in."
msgstr "Normalmente, a API da Funqy não permite que o senhor injete ou use abstrações específicas de um protocolo (por exemplo, HTTP) ou de uma API de função (por exemplo, AWS Lambda). No entanto, há exceções à regra, e o senhor poderá injetar informações contextuais específicas do ambiente em que está implantando."

#. type: Plain text
#: _versions/3.2/guides/funqy.adoc
#, fuzzy
msgid "We do not recommend injecting contextual information specific to a runtime.  Keep your functions portable."
msgstr "Não recomendamos a injeção de informações contextuais específicas de um tempo de execução. Mantenha suas funções portáteis."

#: _versions/3.2/guides/funqy.adoc
#, fuzzy
msgid ""
"Contextual information is injected via the `@Context` annotation which can be used on a function parameter\n"
"or a class field.  A good example is the `io.quarkus.funqy.knative.events.CloudEvent` interface that comes with our Funqy\n"
"Knative Cloud Events integration:"
msgstr "As informações contextuais são injetadas por meio da anotação `@Context` , que pode ser usada em um parâmetro de função ou em um campo de classe. Um bom exemplo é a interface `io.quarkus.funqy.knative.events.CloudEvent` que vem com nossa integração Funqy Knative Cloud Events:"

#. type: Title ==
#: _versions/3.2/guides/funqy.adoc
#, fuzzy, no-wrap
msgid "Should I Use Funqy?"
msgstr "Devo usar o Funqy?"

#: _versions/3.2/guides/funqy.adoc
#, fuzzy
msgid ""
"REST over HTTP has become a very common way to write services over the past decade.  While Funqy\n"
"has an HTTP binding it is not a replacement for REST.  Because Funqy has to work across a variety\n"
"of protocols and function cloud platforms, it is very minimalistic and constrained.  For example, if you\n"
"use Funqy you lose the ability to link (think URIs) to the data your functions spit out.  You also\n"
"lose the ability to leverage cool HTTP features like `cache-control` and conditional GETs.  Many\n"
"developers will be ok with that as many won't be using these REST/HTTP features or styles. You'll\n"
"have to make the decision on what camp you are in.  Quarkus does support REST integration (through Jakarta REST,\n"
" Spring MVC, Vert.x Web, and Servlet) with\n"
"various cloud/function providers, but there are some disadvantages of using that approach as well.  For example,\n"
"if you want to do xref:amazon-lambda-http.adoc[HTTP with AWS Lambda], this requires you to use the AWS API Gateway which may\n"
"slow down deployment and cold start time or even cost you more."
msgstr "O REST sobre HTTP tornou-se uma forma muito comum de escrever serviços na última década. Embora o Funqy tenha uma ligação HTTP, ele não substitui o REST. Como a Funqy precisa trabalhar em uma variedade de protocolos e plataformas de nuvem de funções, ela é muito minimalista e limitada. Por exemplo, se o senhor usar o Funqy, perderá a capacidade de criar links (pense em URIs) para os dados que suas funções geram. O senhor também perde a capacidade de aproveitar recursos HTTP interessantes, como `cache-control` e GETs condicionais. Muitos desenvolvedores não se importarão com isso, pois muitos não usarão esses recursos ou estilos REST/HTTP. O senhor terá de decidir em que campo se encontra. O Quarkus oferece suporte à integração REST (por meio de Jakarta REST, Spring MVC, Vert.x Web e Servlet) com vários provedores de nuvem/função, mas também há algumas desvantagens em usar essa abordagem. Por exemplo, se quiser fazer xref:amazon-lambda-http.adoc[HTTP com o AWS Lambda] , será necessário usar o AWS API Gateway, o que pode tornar a implementação e o tempo de inicialização a frio mais lentos ou até mesmo mais caros."

#: _versions/3.2/guides/funqy.adoc
#, fuzzy
msgid ""
"The purpose of Funqy is to allow you to write cross-provider functions so that you can move\n"
"off of your current function provider if, for instance, they start charging you a lot more for their\n"
"service.  Another reason you might not want to use Funqy is if you need access specific APIs of the\n"
"target function environment.  For example, developers often want access to the AWS Context on\n"
"Lambda.  In this case, we tell them they may be better off using the xref:amazon-lambda.adoc[Quarkus Amazon Lambda] integration instead."
msgstr "O objetivo da Funqy é permitir que o usuário escreva funções entre provedores para que possa sair do provedor de funções atual se, por exemplo, ele começar a cobrar muito mais pelo serviço. Outro motivo pelo qual o senhor pode não querer usar a Funqy é se precisar acessar APIs específicas do ambiente de função de destino. Por exemplo, os desenvolvedores geralmente querem acessar o AWS Context no Lambda. Nesse caso, dizemos a eles que talvez seja melhor usar a integração xref:amazon-lambda.adoc[do Quarkus com o Amazon Lambda] ."
