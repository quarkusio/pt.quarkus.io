# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:10+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/3.2/guides/redis-reference.adoc:6
#, no-wrap
msgid "Redis Extension Reference Guide"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:15
msgid "Redis is an in-memory data store used as a database, cache, streaming engine, and message broker.  The Quarkus Redis extension allows integrating Quarkus applications with Redis."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:18
msgid "To use this extension, the user must be familiar with Redis, especially understanding the mechanism of commands and how they are organized.  Typically, we recommend:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:20
msgid "The https://try.redis.io/[interactive tutorial] introducing Redis."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:21
msgid "The https://redis.io/commands/[command references] explains Redis commands and contains links to reference documentation."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:23
msgid "This extension provides imperative and reactive APIs and low-level and high-level (type-safe) clients."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/redis-reference.adoc:25
#, no-wrap
msgid "Installation"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:29
msgid "If you want to use this extension, you need to add the `io.quarkus:quarkus-redis` extension first.  In your `pom.xml` file, add:"
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/redis-reference.adoc:31
#, no-wrap
msgid "pom.xml"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:37
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-redis-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/redis-reference.adoc:40
#, no-wrap
msgid "build.gradle"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:43
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-redis-client\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:46
msgid "With this dependency, you can then inject Redis clients or _datasource_ (high-level, type-safe API), such as:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:50
#, no-wrap
msgid "import io.quarkus.redis.datasource.RedisDataSource;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:54
#, no-wrap
msgid ""
"// ...\n"
"@Inject RedisAPI lowLevelClient;\n"
"@Inject RedisDataSource highLevelApi;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:57
msgid "More details about the various APIs offered by the quarkus-redis extension are available in the xref:apis[One extension, multiple APIs] section."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:60
msgid "To use Redis as a cache backend, refer to the xref:cache-redis-reference.adoc[Redis Cache Backend reference]."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/redis-reference.adoc:62
#, no-wrap
msgid "One extension, multiple APIs"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:65
msgid "This extension provides multiple ways to interact with Redis:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:70
msgid "the _low-level_ Vert.x client: it's a fully reactive, non-blocking, and asynchronous client.  More details on https://vertx.io/docs/vertx-redis-client/java/[the Vert.x Redis Client documentation].  Two APIs are exposed: `io.vertx.redis.client.Redis`, and `io.vertx.redis.client.RedisAPI`.  You will generally use the latter, except if you need to manage connections yourself."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:73
msgid "the _low-level_ Mutiny variant of the Vert.x API: Unlike the previous one, it exposes a Mutiny API and provides both reactive and imperative methods (suffixed with `andAwait()`).  Two APIs are exposed: `io.vertx.mutiny.redis.client.Redis` and `io.vertx.mutiny.redis.client.RedisAPI`.  You will generally use the latter, except if you need to manage connections yourself."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:77
msgid "a _high-level_ reactive data source: A type-safe, high-level API to interact with Redis.  This API is fully reactive and asynchronous.  It exposes a Mutiny API.  It exposes the `io.quarkus.redis.datasource.ReactiveRedisDataSource` interface."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:80
msgid "a _high-level_ imperative data source: A type-safe, high-level API to interact with Redis.  It is the imperative variant of the reactive data source.  It exposes the `io.quarkus.redis.datasource.RedisDataSource` interface."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:82
msgid "To help you select the suitable API for you, here are some recommendations:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:84
msgid "If you are building an imperative (_classic_) Quarkus application integrating with Redis: use `io.quarkus.redis.datasource.RedisDataSource`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:85
msgid "If you are building a reactive Quarkus application integrating with Redis: use `io.quarkus.redis.datasource.ReactiveRedisDataSource`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:86
msgid "If you need fine-grain control, or execute commands in a generic way: use `io.vertx.mutiny.redis.client.RedisAPI`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:87
msgid "If you have existing Vert.x code, use `io.vertx.redis.client.RedisAPI`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:88
msgid "If you need to emit custom commands, you can either use the data sources (reactive or imperative) or the `io.vertx.mutiny.redis.client.Redis`."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/redis-reference.adoc:90
#, no-wrap
msgid "Default and named clients"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:94
msgid "This extension lets you configure a _default_ Redis client/data sources or _named_ ones.  The latter is essential when you need to connect to multiple Redis instances."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:97
msgid "The default connection is configured using the `quarkus.redis.*` properties.  For example, to configure the default Redis client, use:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:102
#, no-wrap
msgid "quarkus.redis.hosts=redis://localhost/\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:105
msgid "When using the default connection, you can inject the various APIS using a _plain_ `@Inject`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:115
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class RedisExample {\n"
"    @Inject ReactiveRedisDataSource reactiveDataSource;\n"
"    @Inject RedisDataSource redisDataSource;\n"
"    @Inject RedisAPI redisAPI;\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:118
msgid "In general, you inject a single one; the previous snippet is just an example."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:121
msgid "_Named_ clients are configured using the `quarkus.redis.<name>.*` properties:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:126
#, no-wrap
msgid ""
"quarkus.redis.my-redis-1.hosts=redis://localhost/\n"
"quarkus.redis.my-redis-2.hosts=redis://my-other-redis:6379\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:129
msgid "To access the APIs, you need to use the `@RedisClientName` qualifier:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:138
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class RedisExample {\n"
"    @Inject @RedisClientName(\"my-redis-1\") ReactiveRedisDataSource reactiveDataSource;\n"
"    @Inject @RedisClientName(\"my-redis-2\") RedisDataSource redisDataSource;\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:141
msgid "You can omit the `@Inject` annotation when using `@RedisClientName`."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/redis-reference.adoc:142
#, no-wrap
msgid "Connection to Redis"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:145
msgid "The Redis extension can operate in 4 distinct modes:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:147
msgid "Simple client (probably what most users need)."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:148
msgid "Sentinel (when working with Redis in High Availability mode)."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:149
msgid "Cluster (when working with Redis in Clustered mode)."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:150
msgid "Replication (single shard, one node write, multiple read)."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:152
msgid "The connection url is configured with the `quarkus.redis.hosts` (or `quarkus.redis.<name>.hosts`) as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:156
#, no-wrap
msgid "quarkus.redis.hosts=redis://[:password@]host[:port][/db-number]\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/redis-reference.adoc:158
#, no-wrap
msgid "Unix Socket"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:161
msgid "When using unix-socket, you need:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:165
#, no-wrap
msgid "quarkus.redis.hosts=unix://[:password@]/domain/docker.sock[?select=db-number]\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/redis-reference.adoc:167
#, no-wrap
msgid "Sentinel Mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:170
msgid "When using Sentinel, you need to pass multiple _host urls_ and configure the client type to `sentinel`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:175
#, no-wrap
msgid ""
"quarkus.redis.hosts=redis://localhost:5000,redis://localhost:5001,redis://localhost:5002\n"
"quarkus.redis.client-type=sentinel\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:179
#, no-wrap
msgid ""
"# Optional\n"
"quarkus.redis.master-name=my-sentinel # Default is my-master\n"
"quarkus.redis.role=master # master is the default\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/redis-reference.adoc:181
#, no-wrap
msgid "Cluster Mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:184
msgid "When using Redis in cluster mode, you need to pass multiple _host urls_, configure the client type to `cluster` and configure the `replicas` mode:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:190
#, no-wrap
msgid ""
"quarkus.redis.hosts=redis://localhost:7000,redis://localhost:7001,redis://localhost:7002\n"
"quarkus.redis.client-type=cluster\n"
"quarkus.redis.replicas=share\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/redis-reference.adoc:192
#, no-wrap
msgid "Replication Mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:195
msgid "When using the replication mode, you need to pass a single host url and configure the type to be `replication`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:200
#, no-wrap
msgid ""
"quarkus.redis.hosts=redis://localhost:7000\n"
"quarkus.redis.client-type=replication\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/redis-reference.adoc:202
#, no-wrap
msgid "Redis Cloud"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:205
msgid "To connect to redis cloud, you need the following properties:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:210
#, no-wrap
msgid ""
"quarkus.redis.hosts=<the redis cloud url such as redis://redis-12436.c14.us-east-1-3.ec2.cloud.redislabs.com:12436>\n"
"quarkus.redis.password=<the password>\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/redis-reference.adoc:212
#, no-wrap
msgid "Authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:216
msgid "The Redis password can be set in the `redis://` URL or with the `quarkus.redis.password` property.  We recommend the latter, and if possible, using secrets or an environment variable to configure the password."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:218
msgid "The associated environment variable is `QUARKUS_REDIS_PASSWORD`, or `QUARKUS_REDIS_<NAME>_PASSWORD` for named clients."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/redis-reference.adoc:219
#, no-wrap
msgid "Quarkus client API for data sources"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:224
msgid "Quarkus exposes a high-level API on top of Redis.  This API is type-safe and structured around the notion of _group_, inherited from the https://redis.io/commands/command-docs/[Redis command organization].  This API lets you execute Redis commands more conveniently and safely."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/redis-reference.adoc:225
#, no-wrap
msgid "Inject data sources"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:228
msgid "For each configured Redis client, two Redis data sources are exposed:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:231
msgid "`io.quarkus.redis.datasource.RedisDataSource` - an imperative (blocking) Redis data source.  Each operation blocks until a response is received or a timeout is reached"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:232
msgid "`io.quarkus.redis.datasource.ReactiveRedisDataSource` - a reactive Redis data source returning `Uni<X>` or `Multi<X>`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:234
msgid "If you configured the _default_ Redis client, you could inject the data sources using:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:239
#, no-wrap
msgid ""
"@Inject RedisDataSource defaultRedisDataSource;\n"
"@Inject ReactiveRedisDataSource defaultReactiveRedisDataSource;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:242
msgid "If you configured a _named_ Redis client, you need to use the `io.quarkus.redis.RedisClientName` qualifier to select the right client:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:247
#, no-wrap
msgid ""
"@RedisClientName(\"my-redis\") RedisDataSource myRedisDataSource;\n"
"@RedisClientName(\"my-redis\") ReactiveRedisDataSource myReactiveRedisDataSource;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:250
msgid "When using the _blocking_ variant, you can configure the default timeout with:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:255
#, no-wrap
msgid ""
"quarkus.redis.timeout=5s\n"
"quarkus.redis.my-redis.timeout=5s\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:258
msgid "The default timeout is configured to 10s."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/redis-reference.adoc:260
#, no-wrap
msgid "All about delegation"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/redis-reference.adoc:264
msgid "The blocking data source (`io.quarkus.redis.datasource.RedisDataSource`) is implemented on top of the reactive one (`io.quarkus.redis.datasource.ReactiveRedisDataSource`).  The `ReactiveRedisDataSource` is implemented on top of the `io.vertx.mutiny.redis.Redis` API."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/redis-reference.adoc:266
#, no-wrap
msgid "Data Source groups"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:269
msgid "As mentioned above, the API is divided into groups:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:271
#: upstream/_versions/3.2/guides/redis-reference.adoc:272
msgid "bitmap - `.bitmap()`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:273
msgid "key (generic) - `.key()`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:274
msgid "geo - `.geo(memberType)`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:275
msgid "hash - `.hash(`valueType)`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:276
msgid "hyperloglog - `.hyperloglog(memberType)`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:277
msgid "list - `.list(memberType)`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:278
msgid "pubsub - `pubsub()`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:279
msgid "set - `.set(memberType)`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:280
msgid "sorted-set - `.sortedSet(memberType)`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:281
msgid "string - `.value(valueType)`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:282
msgid "stream - `.stream(`valueType`)"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:283
msgid "transactions - `withTransaction`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:284
msgid "json - `.json()` (requires the https://redis.com/modules/redis-json/[RedisJSON] module on the server side)"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:285
msgid "bloom - `.bloom()` (requires the https://redis.com/modules/redis-bloom/[RedisBloom] module on the server side)"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:286
msgid "cuckoo - `.cuckoo()` (requires the https://redis.com/modules/redis-bloom/[rRedisBloom] module on the server side, which also provides the cuckoo filter commands)"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:287
msgid "count-min - `.countmin()` (requires the https://redis.com/modules/redis-bloom/[RedisBloom] module on the server side, which also provides the count-min filter commands)"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:288
msgid "top-k - `.topk()` (requires the https://redis.com/modules/redis-bloom/[RedisBloom] module on the server side, which also provides the top-k filter commands)"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:290
msgid "graph - `.graph()` (requires the https://redis.com/modules/redis-graph/[RedisGraph] module on the server side).  These commands are marked as experimental, as we would need feedback before making them stable."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:291
msgid "search - `.search()` (requires the https://redis.com/modules/redis-search/[RedisSearch] module on the server side)."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:292
msgid "auto-suggest - `.autosuggest()` (requires the https://redis.com/modules/redis-search/[RedisSearch] module on the server side)."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:293
msgid "time-series - `.timeseries()` (requires the https://redis.com/modules/redis-timeseries/[Redis Time Series] module on the server side)."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:295
msgid "These commands are marked as experimental, as we would need feedback before making them stable."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:298
msgid "Each of these methods returns an object that lets you execute the commands related to the group.  The following snippet demonstrates how to use the _hash_ group:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:303
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyRedisService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:305
#, no-wrap
msgid "    private static final String MY_KEY = \"my-key\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:307
#, no-wrap
msgid "    private final HashCommands<String, String, Person> commands;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:311
#, no-wrap
msgid ""
"    public MyRedisService(RedisDataSource ds) { // <1>\n"
"        commands = ds.hash(Person.class); // <2>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:315
#, no-wrap
msgid ""
"    public void set(String field, Person value) {\n"
"        commands.hset(MY_KEY, field, value);  // <3>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:320
#, no-wrap
msgid ""
"    public Person get(String field) {\n"
"        return commands.hget(MY_KEY, field);  // <4>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:322
msgid "Inject the `RedisDataSource` in the constructor"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:324
msgid "Creates the `HashCommands` object.  This object has three type parameters: the type of the key, the type of the field, and the type of the member"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:325
msgid "Use the created `commands` to associate the field `field` with the value `value`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:326
msgid "Use the created `commands` to retrieve the field `field` value."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/redis-reference.adoc:327
#, no-wrap
msgid "Serialization and Deserialization"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:332
msgid "The data source APIs handle the serialization and deserialization automatically.  When a non-standard type is used, the object is serialized into JSON and deserialized from JSON.  In this case, `quarkus-jackson` is used."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:334
msgid "To store binary data, use `byte[]`."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/redis-reference.adoc:335
#, no-wrap
msgid "The `value` group"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:339
msgid "The `value` group is used to manipulate https://redis.io/docs/manual/data-types/#strings[Redis Strings].  Thus, this group is not limited to Java Strings but can be used for integers (like a counter) or binary content (like images)."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/redis-reference.adoc:340
#, no-wrap
msgid "Work with cached values"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:344
msgid "You can use Redis as a cache using the `setex` command, which stores a given value to a given key for a given duration.  The following snippet shows how such a command can be used to store `BusinessObject` for 1 second."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:349
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public static class MyRedisCache {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:351
#, no-wrap
msgid "    private final ValueCommands<String, BusinessObject> commands;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:355
#, no-wrap
msgid ""
"    public MyRedisCache(RedisDataSource ds) {\n"
"        commands = ds.value(BusinessObject.class);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:359
#: upstream/_versions/3.2/guides/redis-reference.adoc:519
#, no-wrap
msgid ""
"    public BusinessObject get(String key) {\n"
"        return commands.get(key);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:364
#, no-wrap
msgid ""
"    public void set(String key, BusinessObject bo) {\n"
"        commands.setex(key, 1, bo); // Expires after 1 second\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:367
msgid "You can use the `setnx` method only to set the value if no value has been stored for the given key."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:369
msgid "The `key` group provides more fine-grain control on expiration and ttl of each key."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/redis-reference.adoc:373
msgid "The `set` method can also receive a `SetArgs` argument that modify the behavior:"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/redis-reference.adoc:375
msgid "`ex(seconds)` - Set the specified expire time, in seconds."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/redis-reference.adoc:376
msgid "`px(milliseconds)` - Set the specified expire time, in milliseconds."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/redis-reference.adoc:377
msgid "`exat(timestamp-seconds)` - Set the specified Unix time at which the key will expire, in seconds."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/redis-reference.adoc:378
msgid "`pxat(timestamp-milliseconds)` - Set the specified Unix time at which the key will expire, in milliseconds."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/redis-reference.adoc:379
msgid "`nx()` - Only set the key if it does not already exist."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/redis-reference.adoc:380
msgid "`xx()` - Only set the key if it already exists."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/redis-reference.adoc:381
msgid "`keepttl()` - Retain the time to live associated with the key."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/redis-reference.adoc:383
#, no-wrap
msgid "Store binary data"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:387
msgid "Redis _strings_ can be used to store binary data, such as images.  In this case, we will use `byte[]` as value type:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:392
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public static class MyBinaryRepository {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:394
#, no-wrap
msgid "    private final ValueCommands<String, byte[]> commands;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:398
#, no-wrap
msgid ""
"    public MyBinaryRepository(RedisDataSource ds) {\n"
"        commands = ds.value(byte[].class);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:406
#, no-wrap
msgid ""
"    public byte[] get(String key) {\n"
"        byte[] bytes = commands.get(key);\n"
"        if (bytes == null) {\n"
"            throw new NoSuchElementException(\"`\" + key + \"` not found\");\n"
"        }\n"
"        return bytes;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:410
#, no-wrap
msgid ""
"    public void add(String key, byte[] bytes) {\n"
"        commands.set(key, bytes);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:415
#, no-wrap
msgid ""
"    public void addIfAbsent(String key, byte[] bytes) {\n"
"        commands.setnx(key, bytes);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/redis-reference.adoc:417
#, no-wrap
msgid "Store a counter"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:420
msgid "You can store counters in Redis as demonstrated below:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:425
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public static class MyRedisCounter {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:427
#, no-wrap
msgid "    private final ValueCommands<String, Long> commands;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:431
#, no-wrap
msgid ""
"    public MyRedisCounter(RedisDataSource ds) {\n"
"        commands = ds.value(Long.class); // <1>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:439
#, no-wrap
msgid ""
"    public long get(String key) {\n"
"        Long l = commands.get(key);  // <2>\n"
"        if (l == null) {\n"
"            return 0L;\n"
"        }\n"
"        return l;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:443
#, no-wrap
msgid ""
"    public void incr(String key) {\n"
"        commands.incr(key);  // <3>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:445
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:448
msgid "Retrieve the commands.  This time we will manipulate `Long` values"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:450
msgid "Retrieve the counter associated with the given `key`.  Return `0L` when no counter is stored."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:452
msgid "Increment the value.  If there are no counter stored for the key, the `incr` command considers 0 as value (so `incr` sets the value to 1)."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:454
msgid "There are other methods that can be useful to manipulate counters, such as:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:456
msgid "`incrby` - allows setting the increment value (positive or negative)"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:457
msgid "`incrbyfloat` - allows setting the increment value as a float/ double (the stored value will be a double)"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:458
msgid "`set` - to set an initial value if needed"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:459
msgid "`decr` and `decrby` - allows decrementing the stored value"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/redis-reference.adoc:460
#, no-wrap
msgid "Communicate with pub/sub"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:464
msgid "Redis allows sending _messages_ to channels and listening for these messages.  These features are available from the `pubsub` group."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:466
msgid "The following snippets shows how a _cache_ can emit a `Notification` after every `set`, and how a subscriber can receive the notification."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:472
#, no-wrap
msgid ""
"public static final class Notification {\n"
"    public String key;\n"
"    public BusinessObject bo;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:474
#, no-wrap
msgid "    public Notification() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:476
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:482
#, no-wrap
msgid ""
"    public Notification(String key, BusinessObject bo) {\n"
"        this.key = key;\n"
"        this.bo = bo;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:488
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"@Startup // We want to create the bean instance on startup to subscribe to the channel.\n"
"public static class MySubscriber implements Consumer<Notification> {\n"
"    private final PubSubCommands<Notification> pub;\n"
"    private final PubSubCommands.RedisSubscriber subscriber;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:493
#, no-wrap
msgid ""
"    public MySubscriber(RedisDataSource ds) {\n"
"        pub = ds.pubsub(Notification.class);\n"
"        subscriber = pub.subscribe(\"notifications\", this);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:498
#, no-wrap
msgid ""
"    @Override\n"
"    public void accept(Notification notification) {\n"
"        // Receive the notification\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:504
#, no-wrap
msgid ""
"    @PreDestroy\n"
"    public void terminate() {\n"
"        subscriber.unsubscribe(); // Unsubscribe from all subscribed channels\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:507
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public static class MyCache {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:510
#, no-wrap
msgid ""
"    private final ValueCommands<String, BusinessObject> commands;\n"
"    private final PubSubCommands<Notification> pub;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:515
#, no-wrap
msgid ""
"    public MyCache(RedisDataSource ds) {\n"
"        commands = ds.value(BusinessObject.class);\n"
"        pub = ds.pubsub(Notification.class);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:525
#, no-wrap
msgid ""
"    public void set(String key, BusinessObject bo) {\n"
"        commands.set(key, bo);\n"
"        pub.publish(\"notifications\", new Notification(key, bo));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/redis-reference.adoc:527
#, no-wrap
msgid "Redis transactions"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:531
msgid "Redis transactions are slightly different from relational database transactions.  Redis transactions are a batch of commands executed altogether."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:533
msgid "A Redis transaction can _watch_ a set of keys, which would _discard_ the transaction is one of these keys are updated during the transaction execution."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:538
msgid "Commands enqueued in a transaction are not executed before the whole transaction is executed.  It means that you cannot retrieve a result during the transaction.  Results are accumulated in a `TransactionResult` object you will access after the completion of the transaction.  This object contains whether the transaction succeeded or was discarded, and in the former case the result of each command (indexed by the command order)."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:542
msgid "To start a transaction, you use the `withTransaction` method.  This method receives a `Consumer<TransactionalRedisDataSource>`, which follows the same API as the regular `RedisDataSource` except that the commands return `void` (`Uni<Void>` for the reactive variant).  When that consumer returns, the transaction is _executed_."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:544
msgid "The following snippet shows how to create a transaction executing two related _writes_:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:548
#, no-wrap
msgid "@Inject RedisDataSource ds;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:550
#: upstream/_versions/3.2/guides/redis-reference.adoc:568
#: upstream/_versions/3.2/guides/redis-reference.adoc:649
#, no-wrap
msgid "// ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:556
#, no-wrap
msgid ""
"TransactionResult result = ds.withTransaction(tx -> {\n"
"        TransactionalHashCommands<String, String, String> hash = tx.hash(String.class);\n"
"        hash.hset(KEY, \"field-1\", \"hello\");\n"
"        hash.hset(KEY, \"field-2\", \"hello\");\n"
"    });\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:560
msgid "The received `tx` object can also be used to _discard_ the transaction, using: `tx.discard();`.  The returned `TransactionResult` lets you retrieve the result of each command."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:562
msgid "When using the reactive variant of the data source, the passed callback is a `Function<ReactiveTransactionalRedisDataSource, Uni<Void>>`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:566
#: upstream/_versions/3.2/guides/redis-reference.adoc:647
#, no-wrap
msgid "@Inject ReactiveRedisDataSource ds;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:574
#, no-wrap
msgid ""
"Uni<TransactionResult> result = ds.withTransaction(tx -> {\n"
"        ReactiveTransactionalHashCommands<String, String, String> hash = tx.hash(String.class);\n"
"        return hash.hset(KEY, \"field-1\", \"hello\")\n"
"            .chain(() -> hash.hset(KEY, \"field-2\", \"hello\"));\n"
"});\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:579
msgid "Transaction execution can be conditioned by _keys_.  When a passed key gets modified during the execution of a transaction, the transaction is discarded.  The keys are passed as `String` as a second parameter to the `withTransaction` method:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:587
#, no-wrap
msgid ""
"TransactionResult result = ds.withTransaction(tx -> {\n"
"    TransactionalHashCommands<String, String, String> hash = tx.hash(String.class);\n"
"    hash.hset(KEY, \"field-1\", \"hello\");\n"
"    hash.hset(KEY, \"field-2\", \"hello\");\n"
"}, KEY);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:590
msgid "You cannot use the pub/sub feature from within a transaction."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/redis-reference.adoc:591
#, no-wrap
msgid "Optimistic locking"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:595
msgid "To use optimistic locking, you need to use a variant of the `withTransaction` method, allowing the execution of code before the transaction starts.  In other words, it will be executed as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:599
#, no-wrap
msgid "WATCH key\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:603
#, no-wrap
msgid ""
"// Pre-transaction block\n"
"// ....\n"
"// Produce a result\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:607
#, no-wrap
msgid ""
"MULTI\n"
"  // In transaction code, receive the result produced by the pre-transaction block.\n"
"EXEC\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:610
msgid "For example, if you need to update a value in a hash only if the field exists, you will use the following API:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:626
#, no-wrap
msgid ""
"OptimisticLockingTransactionResult<Boolean> result = blocking.withTransaction(ds -> {\n"
"    // The pre-transaction block:\n"
"    HashCommands<String, String, String> hashCommands = ds.hash(String.class);\n"
"    return hashCommands.hexists(key, \"field\"); // Produce a result (boolean in this case)\n"
"},\n"
" (exists, tx) -> { // The transactional block, receives the result and the transactional data source\n"
"        if (exists) {\n"
"            tx.hash(String.class).hset(key, \"field\", \"new value\");\n"
"        } else {\n"
"            tx.discard();\n"
"        }\n"
" },\n"
"  key); // The watched key\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:632
msgid "If one of the watched keys is touched before or during the execution of the pre-transaction or transactional blocks, the transaction is aborted.  The pre-transactional block produces a result that the transactional block can use.  This construct is necessary because, within a transaction, the commands do not produce a result.  Results can only be retrieved after the execution of the transaction."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:637
msgid "The pre-transaction and transactional blocks are invoked on the same Redis connection.  Consequently, the pre-transaction block must use the passed data source to execute commands.  Thus, the commands are emitted from that connection.  These commands must not modify the watched keys."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:639
msgid "The transaction is aborted if the pre-transaction block throws an exception (or produces a failure when using the reactive API)."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/redis-reference.adoc:640
#, no-wrap
msgid "Execute custom commands"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:643
msgid "To execute a custom command, or a command not supported by the API, use the following approach:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:651
#, no-wrap
msgid "Response response = ds.execute(\"my-command\", param1, param2, param3);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:657
msgid "The `execute` method sends the command to Redis and retrieves the `Response`.  The command name is passed as first parameters.  You can add an arbitrary number of **String** parameters to your command.  The result is wrapped into a `Response` object."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:659
msgid "The reactive variant returns a `Uni<Response>`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:661
msgid "You can also execute custom command in a transaction."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/redis-reference.adoc:662
#, no-wrap
msgid "Preload data into Redis"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:665
msgid "On startup, you can configure the Redis client to preload data into the Redis database."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/redis-reference.adoc:666
#, no-wrap
msgid "Load scripts"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:669
msgid "Specify the _load script_ you want to load using:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:674
#, no-wrap
msgid ""
"quarkus.redis.load-script=import.redis # import.redis is the default in dev mode, no-file is the default in production mode\n"
"quarkus.redis.my-redis.load-script=actors.redis, movies.redis\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:677
msgid "`load-script` is a build time property than cannot be overridden at runtime."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:680
msgid "Note that each client can have a different script, even a list of scripts.  In the case of a list, the data is imported in the list order (for example, first `actors.redis`, then `movies.redis` for the `my-redis` client)."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/redis-reference.adoc:681
#, no-wrap
msgid "Load Script format"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:684
msgid "The `.redis` file follows a _one command per line_ format:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:688
#, no-wrap
msgid "# Line starting with # and -- are ignored, as well as empty lines\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:691
#, no-wrap
msgid ""
"-- One command per line:\n"
"HSET foo field1 abc field2 123\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:694
#, no-wrap
msgid ""
"-- Parameters with spaces must be wrapped into single or double quotes\n"
"HSET bar field1 \"abc def\" field2 '123 456 '\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:698
#, no-wrap
msgid ""
"-- Parameters with double quotes must be wrapped into single quotes and the opposite\n"
"SET key1 'A value using \"double-quotes\"'\n"
"SET key2 \"A value using 'single-quotes'\"\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:703
msgid "Quarkus batches all the commands from a single file and sends all the commands.  The loading process fails if there is any error, but the previous instructions may have been executed.  To avoid that, you can wrap your command into a Redis _transaction_:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:712
#, no-wrap
msgid ""
"-- Run inside a transaction\n"
"MULTI\n"
"SET key value\n"
"SET space:key 'another value'\n"
"INCR counter\n"
"EXEC\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/redis-reference.adoc:714
#, no-wrap
msgid "Configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:719
msgid "The data is loaded when the application starts.  By default, it drops the whole database before importing.  You can prevent this using `quarkus.redis.flush-before-load=false`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:722
msgid "Also, the import process only runs if the database is empty (no key).  You can force to import even if there is data using the `quarkus.redis.load-only-if-empty=false`"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/redis-reference.adoc:723
#, no-wrap
msgid "Dev/Test vs. Prod"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:727
msgid "As mentioned above, in dev and test modes, Quarkus tries to import data by looking for the `src/main/resources/import.redis`.  This behavior is disabled in _prod_ mode, and if you want to import even in production, add:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:731
#, no-wrap
msgid "%prod.quarkus.redis.load-script=import.redis\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:734
msgid "Before importing in _prod_ mode, make sure you configured `quarkus.redis.flush-before-load` accordingly."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:736
msgid "In dev mode, to reload the content of the `.redis` load scripts, you need to add: `%dev.quarkus.vertx.caching=false`"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/redis-reference.adoc:737
#, no-wrap
msgid "Vert.x Redis Client"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:741
msgid "In addition to the high-level API, you can use the Vertx Redis clients directly in your code.  The documentation of the Vert.x Redis Client is available on the https://vertx.io/docs/vertx-redis-client/java/[Vert.x Web Site]."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/redis-reference.adoc:742
#, no-wrap
msgid "Redis Health Check"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:745
msgid "If you are using the `quarkus-smallrye-health` extension, `quarkus-redis` will automatically add a readiness health check to validate the connection to the Redis server."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:747
msgid "So when you access the `/q/health/ready` endpoint of your application you will have information about the connection validation status."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:749
msgid "This behavior can be disabled by setting the `quarkus.redis.health.enabled` property to `false` in your `application.properties`."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/redis-reference.adoc:750
#, no-wrap
msgid "Programmatic Redis Hosts"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:754
msgid "The `RedisHostsProvider` programmatically provides redis hosts.  This allows for configuration of properties like redis connection password coming from other sources."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/redis-reference.adoc:758
msgid "This is useful as it removes the need to store sensitive data in application.properties."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:772
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"@Identifier(\"hosts-provider\") // the name of the host provider\n"
"public class ExampleRedisHostProvider implements RedisHostsProvider {\n"
"    @Override\n"
"    public Set<URI> getHosts() {\n"
"        // do stuff to get the host\n"
"        String host = \"redis://localhost:6379/3\";\n"
"        return Collections.singleton(URI.create(host));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:775
msgid "The host provider can be used to configure the redis client like shown below"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:779
#, no-wrap
msgid "quarkus.redis.hosts-provider-name=hosts-provider\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/redis-reference.adoc:781
#, no-wrap
msgid "Customize the Redis options programmatically"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:785
msgid "You can expose a bean implementing the `io.quarkus.redis.client.RedisOptionsCustomizer` interface to customize the Redis client options.  The bean is called for each configured Redis client:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:790
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public static class MyExampleCustomizer implements RedisOptionsCustomizer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:801
#, no-wrap
msgid ""
"    @Override\n"
"    public void customize(String clientName, RedisOptions options) {\n"
"        if (clientName.equalsIgnoreCase(\"my-redis\")\n"
"                || clientName.equalsIgnoreCase(RedisConfig.DEFAULT_CLIENT_NAME)) {\n"
"            // modify the given options\n"
"        } else {\n"
"            throw new IllegalStateException(\"Unknown client name: \" + clientName);\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/redis-reference.adoc:804
#, no-wrap
msgid "Dev Services"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:807
msgid "See xref:redis-dev-services.adoc[Redis Dev Service]."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/redis-reference.adoc:808
#, no-wrap
msgid "Redis client metrics"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/redis-reference.adoc:810
#, no-wrap
msgid "Enable metrics collection"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:814
msgid "Redis client metrics are automatically enabled when the application also uses the xref:telemetry-micrometer.adoc[`quarkus-micrometer`] extension.  Micrometer collects the metrics of all the Redis clients implemented by the application."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:816
msgid "As an example, if you export the metrics to Prometheus, you will get:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:864
#, no-wrap
msgid ""
"# HELP redis_commands_duration_seconds The duration of the operations (commands of batches\n"
"# TYPE redis_commands_duration_seconds summary\n"
"redis_commands_duration_seconds_count{client_name=\"<default>\",} 3.0\n"
"redis_commands_duration_seconds_sum{client_name=\"<default>\",} 0.047500042\n"
"# HELP redis_commands_duration_seconds_max The duration of the operations (commands of batches\n"
"# TYPE redis_commands_duration_seconds_max gauge\n"
"redis_commands_duration_seconds_max{client_name=\"<default>\",} 0.033273167\n"
"# HELP redis_pool_active The number of resources from the pool currently used\n"
"# TYPE redis_pool_active gauge\n"
"redis_pool_active{pool_name=\"<default>\",pool_type=\"redis\",} 0.0\n"
"# HELP redis_pool_ratio Pool usage ratio\n"
"# TYPE redis_pool_ratio gauge\n"
"redis_pool_ratio{pool_name=\"<default>\",pool_type=\"redis\",} 0.0\n"
"# HELP redis_pool_queue_size Number of pending elements in the waiting queue\n"
"# TYPE redis_pool_queue_size gauge\n"
"redis_pool_queue_size{pool_name=\"<default>\",pool_type=\"redis\",} 0.0\n"
"# HELP redis_commands_failure_total The number of operations (commands or batches) that have been failed\n"
"# TYPE redis_commands_failure_total counter\n"
"redis_commands_failure_total{client_name=\"<default>\",} 0.0\n"
"# HELP redis_commands_success_total The number of operations (commands or batches) that have been executed successfully\n"
"# TYPE redis_commands_success_total counter\n"
"redis_commands_success_total{client_name=\"<default>\",} 3.0\n"
"# HELP redis_pool_idle The number of resources from the pool currently used\n"
"# TYPE redis_pool_idle gauge\n"
"redis_pool_idle{pool_name=\"<default>\",pool_type=\"redis\",} 6.0\n"
"# HELP redis_pool_completed_total Number of times resources from the pool have been acquired\n"
"# TYPE redis_pool_completed_total counter\n"
"redis_pool_completed_total{pool_name=\"<default>\",pool_type=\"redis\",} 3.0\n"
"# HELP redis_commands_count_total The number of operations (commands or batches) executed\n"
"# TYPE redis_commands_count_total counter\n"
"redis_commands_count_total{client_name=\"<default>\",} 3.0\n"
"# HELP redis_pool_usage_seconds Time spent using resources from the pool\n"
"# TYPE redis_pool_usage_seconds summary\n"
"redis_pool_usage_seconds_count{pool_name=\"<default>\",pool_type=\"redis\",} 3.0\n"
"redis_pool_usage_seconds_sum{pool_name=\"<default>\",pool_type=\"redis\",} 0.024381375\n"
"# HELP redis_pool_usage_seconds_max Time spent using resources from the pool\n"
"# TYPE redis_pool_usage_seconds_max gauge\n"
"redis_pool_usage_seconds_max{pool_name=\"<default>\",pool_type=\"redis\",} 0.010671542\n"
"# HELP redis_pool_queue_delay_seconds Time spent in the waiting queue before being processed\n"
"# TYPE redis_pool_queue_delay_seconds summary\n"
"redis_pool_queue_delay_seconds_count{pool_name=\"<default>\",pool_type=\"redis\",} 3.0\n"
"redis_pool_queue_delay_seconds_sum{pool_name=\"<default>\",pool_type=\"redis\",} 0.022341249\n"
"# HELP redis_pool_queue_delay_seconds_max Time spent in the waiting queue before being processed\n"
"# TYPE redis_pool_queue_delay_seconds_max gauge\n"
"redis_pool_queue_delay_seconds_max{pool_name=\"<default>\",pool_type=\"redis\",} 0.021926083\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:867
msgid "The Redis client name can be found in the _tags_."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:869
msgid "The metrics contain both the Redis connection pool metrics (`redis_pool_*`) and the metrics about the command execution (`redis_commands_*`) such as the number of command, successes, failures, and durations."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/redis-reference.adoc:870
#, no-wrap
msgid "Disable metrics collection"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/redis-reference.adoc:873
msgid "To disable the Redis client metrics when `quarkus-micrometer` is used, add the following property to the application configuration:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/redis-reference.adoc:877
#, no-wrap
msgid "quarkus.micrometer.binder.redis.enabled=false\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/redis-reference.adoc:880
#, no-wrap
msgid "Configuration reference"
msgstr ""
