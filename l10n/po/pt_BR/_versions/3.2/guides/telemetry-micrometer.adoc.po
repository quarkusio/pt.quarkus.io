# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:10+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:7
#, no-wrap
msgid "Micrometer Metrics"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:17
msgid "Micrometer provides an abstraction layer for metrics collection.  It defines an API for basic meter types, like counters, gauges, timers, and distribution summaries, along with a `MeterRegistry` API that generalizes metrics collection and propagation for different backend monitoring systems."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:19
msgid "Micrometer is the recommended approach to metrics for Quarkus."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:22
msgid "By default, the metrics are exposed on the main HTTP server.  If you would like to surface metrics from a separate management port, see the xref:management-interface[Managed interface] section."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:23
#, no-wrap
msgid "Micrometer and monitoring system extensions"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:28
msgid "Quarkus Micrometer extensions are structured in the same way as the Micrometer project.  The `quarkus-micrometer` extension provides core Micrometer support and runtime integration.  Other Quarkus and Quarkiverse extensions use the Quarkus Micrometer extension to provide support for other monitoring systems."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:30
msgid "Quarkus extensions:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:32
msgid "micrometer"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:33
msgid "micrometer-registry-prometheus"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:35
msgid "link:https://github.com/quarkiverse/quarkus-micrometer-registry[Quarkiverse extensions] (may be incomplete):"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:37
msgid "micrometer-registry-azure-monitor"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:38
msgid "micrometer-registry-datadog"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:39
msgid "micrometer-registry-graphite"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:40
msgid "micrometer-registry-influx"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:41
msgid "micrometer-registry-jmx"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:42
msgid "micrometer-registry-newrelic-telemetry"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:43
msgid "micrometer-registry-otlp"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:44
msgid "micrometer-registry-signalfx"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:45
msgid "micrometer-registry-stackdriver"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:46
msgid "micrometer-registry-statsd"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:49
msgid "To add support for Prometheus metrics to your application, for example, use the `micrometer-registry-prometheus` extension.  It will bring in the Quarkus Micrometer extension and Micrometer core libraries as dependencies."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:51
msgid "Add the extension to your project using following command (from your project directory):"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:56
msgid "This will add the following to your build file:"
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:58
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:82
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:102
#, no-wrap
msgid "pom.xml"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:64
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-micrometer-registry-prometheus</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:67
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:91
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:116
#, no-wrap
msgid "build.gradle"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:70
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-micrometer-registry-prometheus\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:73
msgid "And you're all set!"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:77
msgid "A similar process applies for other meter registry extensions.  To use the Micrometer StackDriver MeterRegistry, for example, you would use the `quarkus-micrometer-registry-stackdriver` extension from the Quarkiverse:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:88
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkiverse.micrometer.registry</groupId>\n"
"    <artifactId>quarkus-micrometer-registry-stackdriver</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:94
#, no-wrap
msgid "implementation(\"io.quarkiverse.micrometer.registry:quarkus-micrometer-registry-stackdriver\")\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:96
#, no-wrap
msgid "Other registry implementations"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:100
msgid "If the Micrometer registry you would like to use does not yet have an associated extension, use the `quarkus-micrometer` extension and bring in the Micrometer meter registry dependency directly:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:113
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-micrometer</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>com.acme</groupId>\n"
"    <artifactId>custom-micrometer-registry</artifactId>\n"
"    <version>...</version>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:120
#, no-wrap
msgid ""
"implementation(\"io.quarkus:quarkus-micrometer\")\n"
"implementation(\"com.acme:custom-micrometer-registry\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:124
msgid "You will then need to specify your own provider to configure and initialize the MeterRegistry, as discussed in the next section."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:125
#, no-wrap
msgid "Create a customized MeterRegistry"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:128
msgid "Use a custom `@Produces` method to create and configure a your own `MeterRegistry` if you need to."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:130
msgid "The following example customizes the line format used for StatsD:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:138
#, no-wrap
msgid ""
"@Produces\n"
"@Singleton // <1>\n"
"public StatsdMeterRegistry createStatsdMeterRegistry(StatsdConfig statsdConfig, Clock clock) { // <2>\n"
"    // define what to do with lines\n"
"    Consumer<String> lineLogger = line -> logger.info(line);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:145
#, no-wrap
msgid ""
"    // inject a configuration object, and then customize the line builder\n"
"    return StatsdMeterRegistry.builder(statsdConfig)\n"
"          .clock(clock)\n"
"          .lineSink(lineLogger)\n"
"          .build();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:148
msgid "The method returns a `@Singleton`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:149
msgid "The method returns the specific type of `MeterRegistry`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:151
msgid "This example corresponds to the following instructions in the Micrometer documentation: link:https://micrometer.io/docs/registry/statsD#_customizing_the_metrics_sink[Micrometer StatsD: Customizing the Metrics Sink]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:155
msgid "Use MicroProfile Config to inject any configuration attributes you need to configure the registry.  Most Micrometer registry extensions, like `quarkus-micrometer-registry-statsd`, provide registry-specific configuration objects that are integrated with the Quarkus configuration model.  The link:https://github.com/quarkiverse/quarkus-micrometer-registry[Quarkiverse GitHub Repository] can be a useful implementation reference."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:156
#, no-wrap
msgid "Create your own metrics"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:161
msgid "Metrics data is used in the aggregate to observe how data changes over time.  This data is used for trend analysis, anomaly detection, and alerting.  Data is stored by backend monitoring systems in time series databases, with new values appended to the end of the series."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:163
msgid "Metrics are constructed lazily. You may not see any data for the metric you're looking for until you've performed an action that will create it, like visiting an endpoint."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:164
#, no-wrap
msgid "Naming conventions"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:168
msgid "Meter names should use dots to separate segments, `a.name.like.this`.  Micrometer applies naming conventions to convert registered meter names to match the expectations of backend monitoring systems."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:170
msgid "Given the following declaration of a timer: `registry.timer(\"http.server.requests\")`, applied naming conventions will emit the following metrics for different monitoring systems:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:172
msgid "Prometheus: `http_server_requests_duration_seconds`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:173
msgid "Atlas: `httpServerRequests`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:174
msgid "Graphite: `http.server.requests`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:175
msgid "InfluxDB: `http_server_requests`"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:177
#, no-wrap
msgid "Define dimensions for aggregation"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:181
msgid "Metrics, single numerical measurements, often have additional data captured with them. This ancillary data is used to group or aggregate metrics for analysis.  The Micrometer API refers to this dimensional data as tags, but you may it referred to as \"labels\" or \"attributes\" in other documentation sources."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:184
msgid "Micrometer is built primariliy for backend monitoring systems that support dimensional data (metric names that are enchriched with key/value pairs).  For heirarchical systems that only support a flat metric name, Micrometer will flatten the set of key/value pairs (sorted by key) and add them to the name."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:186
msgid "Tags can be specified when a meter is registered with a `MeterRegistry` or using a xref:meter-filter[Meter Filter]."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:188
msgid "See the Micrometer documentation for additional advice on link:{concepts}#_tag_naming[tag naming]."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:191
msgid "Each unique combination of metric name and dimension produces a unique time series.  Using an unbounded set of dimensional data can lead to a \"cardinality explosion\", an exponential increase in the creation of new time series."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:192
#, no-wrap
msgid "Obtain a reference to a MeterRegistry"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:195
msgid "To register meters, you need a reference to a `MeterRegistry`, which is configured and maintained by the Micrometer extension."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:197
msgid "Use one of the following methods to obtain a reference to a `MeterRegistry`:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:199
msgid "Use CDI Constructor injection:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:203
#, no-wrap
msgid "package org.acme.micrometer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:205
#, no-wrap
msgid "import io.micrometer.core.instrument.MeterRegistry;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:209
#, no-wrap
msgid ""
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:213
#, no-wrap
msgid ""
"@Path(\"/example\")\n"
"@Produces(\"text/plain\")\n"
"public class ExampleResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:215
#, no-wrap
msgid "    private final MeterRegistry registry;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:220
#, no-wrap
msgid ""
"    ExampleResource(MeterRegistry registry) {\n"
"        this.registry = registry;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:223
msgid "Use a `MeterRegistry` member variable and use `@Inject`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:228
#, no-wrap
msgid ""
"    @Inject\n"
"    MeterRegistry registry;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:231
msgid "Use the global `MeterRegistry`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:235
#, no-wrap
msgid "    MeterRegistry registry = Metrics.globalRegistry;\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:237
#, no-wrap
msgid "Gauges"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:241
msgid "Gauges measure a value that can increase or decrease over time, like the speedometer on a car.  Gauges can be useful when monitoring the statistics for a cache or collection."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:244
msgid "Gauge values are sampled rather than set; there is no record of how the value associated with a gauge may have changed between measurements."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:246
msgid "Micrometer provides a few mechanisms for creating gauges:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:248
msgid "Wrap construction of a collection to monitor its size:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:254
#, no-wrap
msgid ""
"List<String> list = registry.gaugeCollectionSize(\"fantastic.list\", // <1>\n"
"        Tags.of(\"key\", \"value\") // optional <2>\n"
"        new ArrayList<>());  // <3>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:257
msgid "Create a new gauge, `list.size`, using the dot-separated convention."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:259
msgid "Associate xref:define-tags[tags] with the gauge.  Gauge tag values are constant, and must be assigned at construction time."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:260
msgid "Construct the array list whose size should be observed."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:262
msgid "Use a builder to create a Gauge that will call a function:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:270
#, no-wrap
msgid ""
"Gauge.builder(\"jvm.threads.peak\", threadBean, ThreadMXBean::getPeakThreadCount) // <1>\n"
"    .baseUnit(BaseUnits.THREADS) // optional <2>\n"
"    .description(\"The peak live thread count...\") // optional <3>\n"
"    .tags(\"key\", \"value\") // optional <4>\n"
"    .register(registry); // <5>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:273
msgid "Create a new gauge called `jvm.threads.peak` that will call `getPeakThreadCount` on `threadBean`, an instance of `ThreadMXBean`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:274
msgid "Define the base unit, see link:{base-units}[BaseUnits.java] for predefined values."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:275
msgid "Provide a description of the Gauge"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:276
msgid "Associate xref:define-tags[tags] with the gauge"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:277
msgid "Register the Gauge with the MeterRegistry"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:280
msgid "See link:{concepts}#_gauges[Gauges] in the Micrometer documentation for more information and examples.  Of note are two special cases: `TimeGauge` for measuring time, and a `MultiGauge` for reporting several criteria together."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:284
msgid "Micrometer does not create strong references to the objects it observes by default.  Depending on the registry, Micrometer either omits gauges that observe objects that have been garbage-collected entirely or uses `NaN` (not a number) as the observed value."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:289
msgid "When should you use a gauge? Only use a gauge when you can't use something else.  Gauges can be less straight-forward to use than other meters.  If what you are measuring can be counted (because the value always increments), use a counter instead."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:290
#, no-wrap
msgid "Counters"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:294
msgid "Counters measure values that only increase.  Use one of the methods below to create a counter."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:296
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:359
msgid "Use a convenience method on the `MeterRegistry`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:300
#, no-wrap
msgid "registry.counter(\"example.prime.number\", \"type\", \"prime\"); // <1> <2>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:303
msgid "`example.prime.number` is the counter name."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:304
msgid "`type` is a dimensional tag with value `prime`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:307
msgid "Use `Counter.builder` to provide a description and units:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:315
#, no-wrap
msgid ""
"Counter.builder(\"count.me\") // <1>\n"
"    .baseUnit(\"beans\")            // optional <2>\n"
"    .description(\"a description\") // optional <3>\n"
"    .tags(\"region\", \"test\")       // optional <4>\n"
"    .register(registry);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:318
msgid "Create a new counter called `count.me`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:319
msgid "Define a custom base unit. See link:{base-units}[BaseUnits.java] for predefined values."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:320
msgid "Provide a description for the counter"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:321
msgid "Associate xref:define-tags[tags] with the counter"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:323
msgid "xref:annotations[Annotate] a method"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:330
#, no-wrap
msgid ""
"@Counted(value = \"counted.method\", extraTags = { \"extra\", \"annotated\" }) // <1> <2>\n"
"void countThisMethod(){\n"
"    ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:333
msgid "A CDI interceptor will create and register a counter called `counted.method`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:334
msgid "The interceptor-created counter will have the \"extra\" dimension tag with value \"annotated\""
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:336
msgid "See link:{concepts}#_counters[Counters] in the Micrometer documentation for more information and examples, including the less common `FunctionCounter` that can be used to measure the result returned by an always increasing function."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:342
msgid "When should you use a counter? Use a counter if you are doing something that can not be either timed or summarized.  If you want to understand more about how a value is changing, a timer (when the base unit of measurement is time) or a distribution summary might be more appropriate."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:343
#, no-wrap
msgid "Summaries and Timers"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:346
msgid "Timers and distribution summaries in Micrometer are very similar. Both meters record data, and can capture additional histogram or percentile data. While distribution summaries can be use for arbitrary types of data, timers are optimized for measuring time and durations."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:348
msgid "Timers and distribution summaries store at least three values internally:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:350
msgid "the aggregation of all recorded values as a sum"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:351
msgid "the number of values that have been recorded (a counter)"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:352
msgid "the highest value seen within a decaying time window (a gauge)."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:353
#, no-wrap
msgid "Create a distribution summary"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:357
msgid "Use a distribution summary to record a value, not time.  Use one of the following methods to create a distribution summary."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:363
#, no-wrap
msgid "registry.summary(\"bytes.written\", \"protocol\", \"http\"); // <1> <2>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:366
msgid "`bytes.written` is the summary name"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:367
msgid "`protocol` is a dimensional tag with value `http`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:370
msgid "Use `DistributionSummary.builder` to provide a description and units:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:374
msgid "  DistributionSummary.builder(\"response.size\") // <1>"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:378
#, no-wrap
msgid ""
".baseUnit(\"bytes\")            // optional <2>\n"
".description(\"a description\") // optional <3>\n"
".tags(\"protocol\", \"http\")     // optional <4>\n"
".register(registry);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:384
#, no-wrap
msgid ""
"+\n"
"<1> Create a new distribution summary called `response.size`\n"
"<2> Use `bytes` as a base unit. See link:{base-units}[BaseUnits.java] for predefined values.\n"
"<3> Provide a description for the distribution summary\n"
"<4> Associate xref:define-tags[tags] with the distribution summary\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:385
#, no-wrap
msgid "Create a timer"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:388
msgid "Timers measure short-duration latencies and how often they occur. Negative values are not supported, and longer durations could cause an overflow of the total time (Long.MAX_VALUE nanoseconds (292.3 years))."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:390
msgid "Use one of the following methods to construct a timer."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:394
#, no-wrap
msgid ""
"1. Use a convenience method on the `MeterRegistry`:\n"
"+\n"
"[source,java]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:396
msgid "registry.timer(\"fabric.selection\", \"primary\", \"blue\"); // <1> <2>"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:400
#, no-wrap
msgid ""
"+\n"
"<1> `fabric.selection` is the summary name\n"
"<2> `primary` is a dimensional tag with value `blue`.\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:405
#, no-wrap
msgid ""
"2. Use `Timer.builder` to provide a description and units:\n"
"+\n"
"[source,java]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:410
#, no-wrap
msgid ""
"Timer.builder(\"my.timer\")        // <1> <2>\n"
"    .description(\"description \") // optional <3>\n"
"    .tags(\"region\", \"test\")      // optional <4>\n"
"    .register(registry);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:416
#, no-wrap
msgid ""
"+\n"
"<1> Create a new timer called `my.timer`\n"
"<2> Timers measure time, and will convert it into the units required by the monitoring backend\n"
"<3> Provide a description for the distribution summary\n"
"<4> Associate xref:define-tags[tags] with the timer\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:420
#, no-wrap
msgid ""
"3. xref:annotations[Annotate] a method\n"
"+\n"
"[source,java]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:422
msgid "@Timed(value = \"call\", extraTags = {\"region\", \"test\"}) // <1> <2>"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:426
#, no-wrap
msgid ""
"+\n"
"<1> A CDI interceptor will create and register a timer called `call`\n"
"<2> The interceptor-created timer will have the \"region\" dimension tag with value \"test\"\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:427
#, no-wrap
msgid "Measure durations with Timers"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:430
msgid "Micrometer provides the following convenience mechanisms for recording durations."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:434
#, no-wrap
msgid ""
"1. Wrap the invocation of a `Runnable`:\n"
"+\n"
"[source,java]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:436
msgid "timer.record(() -> noReturnValue());"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:441
#, no-wrap
msgid ""
"2. Wrap the invocation of a `Callable`:\n"
"+\n"
"[source,java]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:443
msgid "timer.recordCallable(() -> returnValue());"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:448
#, no-wrap
msgid ""
"3. Create a wrapped `Runnable` for repeated invocation:\n"
"+\n"
"[source,java]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:450
msgid "Runnable r = timer.wrap(() -> noReturnValue());"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:455
#, no-wrap
msgid ""
"4. Create a wrapped `Callable` for repeated invocation:\n"
"+\n"
"[source,java]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:457
msgid "Callable c = timer.wrap(() -> returnValue());"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:462
#, no-wrap
msgid ""
"5. Use a `Sample` for more complex code paths:\n"
"+\n"
"[source,java]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:464
msgid "Sample sample = Timer.start(registry); // <1>"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:466
msgid "doStuff; // <2>"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:468
msgid "sample.stop(registry.timer(\"my.timer\", \"response\", response.status())); // <3>"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:473
#, no-wrap
msgid ""
"+\n"
"<1> We create a sample, which records the start of the timer.\n"
"<2> The sample can be passed along as context\n"
"<3> We can choose the timer when the sample is stopped. This example uses a response status as a tag identifying the timer, which won't be known until processing is complete.\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:474
#, no-wrap
msgid "Histograms and percentiles"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:478
msgid "Both timers and distribution summaries can be configured to emit additional statistics, like histogram data, precomputed percentiles, or service level objective (SLO) boundaries.  See link:{concepts}#_timers[Timers] and link:{concepts}#_distribution_summaries[Distribution Summaries] in the Micrometer documentation for more information and examples, including memory footprint estimation for both types."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:482
msgid "[IMPORTANT] ==== The count, sum, and histogram data associated with timers and distribution summaries can be re-aggregated across dimensions (or across a series of instances)."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:485
msgid "Precomputed percentile values can not. Percentiles are unique to each dataset (the 90th percentile of this collection of measurements).  ===="
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:486
#, no-wrap
msgid "Automatically generated metrics"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:492
msgid "The Micrometer extension automatically times HTTP server requests. Following Prometheus naming conventions for timers, look for `http_server_requests_seconds_count`, `http_server_requests_seconds_sum`, and `http_server_requests_seconds_max`. Dimensional labels have been added for the requested uri, the HTTP method (GET, POST, etc.), the status code (200, 302, 404, etc.), and a more general outcome field."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:494
msgid ".Ignoring endpoints"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:503
msgid "You can disable measurement of HTTP endpoints using the `quarkus.micrometer.binder.http-server.ignore-patterns` property.  This property accepts a comma-separated list of simple regex match patterns identifying URI paths that should be ignored.  For example, setting `quarkus.micrometer.binder.http-server.ignore-patterns=/example/prime/[0-9]+` will ignore a request to `http://localhost:8080/example/prime/7919`.  A request to `http://localhost:8080/example/gauge/7919` would still be measured."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:505
msgid ".URI templates"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:509
msgid "The micrometer extension will make a best effort at representing URIs containing path parameters in templated form.  Using examples from above, a request to `http://localhost:8080/example/prime/7919` should appear as an attribute of `http_server_requests_seconds_*` metrics with a value of `uri=/example/prime/{number}`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:516
msgid "Use the `quarkus.micrometer.binder.http-server.match-patterns` property if the correct URL can not be determined.  This property accepts a comma-separated list defining an association between a simple regex match pattern and a replacement string.  For example, setting `quarkus.micrometer.binder.http-server.match-patterns=/example/prime/[0-9]+=/example/{jellybeans}` would use the value `/example/{jellybeans}` for the uri attribute any time the requested uri matches `/example/prime/[0-9]+`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:518
msgid ".Exported metrics format"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:521
msgid "By default, the metrics are exported using the Prometheus format `application/openmetrics-text`, you can revert to the former format by specifying the `Accept` request header to `text/plain` (`curl -H \"Accept: text/plain\" localhost:8080/q/metrics/`)."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:523
msgid "[[meter-filter]]"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:523
#, no-wrap
msgid "Use `MeterFilter` to customize emitted tags and metrics"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:528
msgid "Micrometer uses `MeterFilter` instances to customize the metrics emitted by `MeterRegistry` instances.  The Micrometer extension will detect `MeterFilter` CDI beans and use them when initializing `MeterRegistry` instances."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:530
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:603
msgid "[source,java]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:533
msgid "@Singleton public class CustomConfiguration {"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:536
#, no-wrap
msgid ""
"    @ConfigProperty(name = \"deployment.env\")\n"
"    String deploymentEnv;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:545
#, no-wrap
msgid ""
"    /** Define common tags that apply only to a Prometheus Registry */\n"
"    @Produces\n"
"    @Singleton\n"
"    @MeterFilterConstraint(applyTo = PrometheusMeterRegistry.class)\n"
"    public MeterFilter configurePrometheusRegistries() {\n"
"        return MeterFilter.commonTags(Arrays.asList(\n"
"                Tag.of(\"registry\", \"prometheus\")));\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:553
#, no-wrap
msgid ""
"    /** Define common tags that apply globally */\n"
"    @Produces\n"
"    @Singleton\n"
"    public MeterFilter configureAllRegistries() {\n"
"        return MeterFilter.commonTags(Arrays.asList(\n"
"                Tag.of(\"env\", deploymentEnv)));\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:573
#, no-wrap
msgid ""
"    /** Enable histogram buckets for a specific timer */\n"
"    @Produces\n"
"    @Singleton\n"
"    public MeterFilter enableHistogram() {\n"
"        return new MeterFilter() {\n"
"            @Override\n"
"            public DistributionStatisticConfig configure(Meter.Id id, DistributionStatisticConfig config) {\n"
"                if(id.getName().startsWith(\"myservice\")) {\n"
"                    return DistributionStatisticConfig.builder()\n"
"                        .percentiles(0.5, 0.95)     // median and 95th percentile, not aggregable\n"
"                        .percentilesHistogram(true) // histogram buckets (e.g. prometheus histogram_quantile)\n"
"                        .build()\n"
"                        .merge(config);\n"
"                }\n"
"                return config;\n"
"            }\n"
"        };\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:582
#, no-wrap
msgid ""
"In this example, a singleton CDI bean will produce two different `MeterFilter` beans.\n"
"One will be applied only to\n"
"Prometheus `MeterRegistry` instances (using the `@MeterFilterConstraint` qualifier), and another will be applied\n"
"to all `MeterRegistry` instances.\n"
"An application configuration property is also injected and used as a tag value.\n"
"Additional examples of MeterFilters can be found in the\n"
"link:https://micrometer.io/docs/concepts[official documentation].\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:584
#, no-wrap
msgid "[[annotations]]\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:584
#, no-wrap
msgid "Does Micrometer support annotations?"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:590
msgid "Micrometer does define two annotations, `@Counted` and `@Timed`, that can be added to methods.  The `@Timed` annotation will wrap the execution of a method and will emit the following tags in addition to any tags defined on the annotation itself: class, method, and exception (either \"none\" or the simple class name of a detected exception)."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:593
msgid "Using annotations is limited, as you can't dynamically assign meaningful tag values.  Also note that many methods, e.g. REST endpoint methods or Vert.x Routes, are counted and timed by the micrometer extension out of the box."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:594
#, no-wrap
msgid "Support for the MicroProfile Metrics API"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:599
msgid "If you use the MicroProfile Metrics API in your application, the Micrometer extension will create an adaptive layer to map those metrics into the Micrometer registry.  Note that naming conventions between the two systems is different, so the metrics that are emitted when using MP Metrics with Micrometer will change."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:601
msgid "Use a `MeterFilter` to remap names or tags according to your conventions."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:608
#, no-wrap
msgid ""
"@Produces\n"
"@Singleton\n"
"public MeterFilter renameApplicationMeters() {\n"
"    final String targetMetric = MPResourceClass.class.getName() + \".mpAnnotatedMethodName\";\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:623
#, no-wrap
msgid ""
"    return MeterFilter() {\n"
"        @Override\n"
"        public Meter.Id map(Meter.Id id) {\n"
"            if (id.getName().equals(targetMetric)) {\n"
"                // Drop the scope tag (MP Registry type: application, vendor, base)\n"
"                List<Tag> tags = id.getTags().stream().filter(x -> !\"scope\".equals(x.getKey()))\n"
"                        .collect(Collectors.toList());\n"
"                // rename the metric\n"
"                return id.withName(\"my.metric.name\").replaceTags(tags);\n"
"            }\n"
"            return id;\n"
"        }\n"
"    };\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:626
#, no-wrap
msgid "Ensure the following dependency is present if you require the MicroProfile Metrics API:\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:629
#, no-wrap
msgid ""
"[source,xml,role=\"primary asciidoc-tabs-target-sync-cli asciidoc-tabs-target-sync-maven\"]\n"
".pom.xml\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:634
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>org.eclipse.microprofile.metrics</groupId>\n"
"    <artifactId>microprofile-metrics-api</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:638
#, no-wrap
msgid ""
"[source,gradle,role=\"secondary asciidoc-tabs-target-sync-gradle\"]\n"
".build.gradle\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:640
msgid "implementation(\"org.eclipse.microprofile.metrics:microprofile-metrics-api\")"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:643
#, no-wrap
msgid "NOTE: The MP Metrics API compatibility layer may be moved to a different extension in the future.\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:645
#, no-wrap
msgid "[[management-interface]]\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:645
#, no-wrap
msgid "Management interface"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:648
msgid "By default, the metrics are exposed on the main HTTP server."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:652
msgid "You can expose them on a separate network interface and port by setting `quarkus.management.enabled=true` in your application configuration.  Note that this property is a build-time property.  The value cannot be overridden at runtime."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:654
msgid "If you enable the management interface without customizing the management network interface and port, the metrics are exposed under: `http://0.0.0.0:9000/q/metrics`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:657
msgid "You can configure the path of each exposed format using: [source, properties]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:661
msgid "quarkus.micrometer.export.json.enabled=true # Enable json metrics quarkus.micrometer.export.json.path=metrics/json quarkus.micrometer.export.prometheus.path=metrics/prometheus"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:665
#, no-wrap
msgid ""
"With such a configuration, the json metrics will be available from `http://0.0.0.0:9000/q/metrics/json`.\n"
"The prometheus metrics will be available from `http://0.0.0.0:9000/q/metrics/prometheus`.\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:667
#, no-wrap
msgid "Refer to the xref:./management-interface-reference.adoc[management interface reference] for more information.\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:668
#, no-wrap
msgid "Configuration Reference"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/telemetry-micrometer.adoc:670
msgid "include::{generated-dir}/config/quarkus-micrometer.adoc[opts=optional, leveloffset=+1]"
msgstr ""
