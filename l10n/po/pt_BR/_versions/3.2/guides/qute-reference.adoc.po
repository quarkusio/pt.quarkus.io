# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:10+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/3.2/guides/qute-reference.adoc:6
#, no-wrap
msgid "Qute Reference Guide"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:19
msgid "Qute is a templating engine designed specifically to meet the Quarkus needs.  The usage of reflection is minimized to reduce the size of native images.  The API combines both the imperative and the non-blocking reactive style of coding.  In the development mode, all files located in the `src/main/resources/templates` folder are watched for changes and modifications are immediately visible in your application.  Furthermore, Qute attempts to detect most of the template problems at build time and fail fast."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:21
msgid "In this guide, you will find an xref:hello_world_example[introductory example], the description of the xref:core_features[core features] and xref:quarkus_integration[Quarkus integration] details."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/qute-reference.adoc:29
msgid "Qute is primarily designed as a Quarkus extension.  It is possible to use it as a \"standalone\" library too.  However, in such case some features are not available.  In general, any feature mentioned under the xref:quarkus_integration[Quarkus Integration] section is missing.  Find more information about the limitations and possibilities in the xref:standalone[Qute Used as a Standalone Library] section."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/qute-reference.adoc:32
#, no-wrap
msgid "The Simplest Example"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:35
msgid "The easiest way to try Qute is to use the convenient `io.quarkus.qute.Qute` class and call one of its `fmt()` static methods that can be used to format simple messages:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:39
#, no-wrap
msgid "import io.quarkus.qute.Qute;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:42
#, no-wrap
msgid ""
"Qute.fmt(\"Hello {}!\", \"Lucy\"); <1>\n"
"// => Hello Lucy!\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:45
#, no-wrap
msgid ""
"Qute.fmt(\"Hello {name} {surname ?: 'Default'}!\", Map.of(\"name\", \"Andy\")); <2>\n"
"// => Hello Andy Default!\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:48
#, no-wrap
msgid ""
"Qute.fmt(\"<html>{header}</html>\").contentType(\"text/html\").data(\"header\", \"<h1>My header</h1>\").render(); <3>\n"
"// <html>&lt;h1&gt;Header&lt;/h1&gt;</html> <4>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:51
#, no-wrap
msgid ""
"Qute.fmt(\"I am {#if ok}happy{#else}sad{/if}!\", Map.of(\"ok\", true)); <5>\n"
"// => I am happy!\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:53
msgid "The empty expression `{}` is a placeholder that is replaced with an index-based array accessor, i.e. `{data[0]}`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:54
msgid "You can provide a data map instead."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:55
msgid "A builder-like API is available for more complex formatting requirements."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:56
msgid "Note that for a \"text/html\" template the special chars are replaced with html entities by default."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:58
msgid "You can use any xref:basic-building-blocks[building block] in the template.  In this case, the xref:if_section[If Section] is used to render the appropriate part of the message based on the input data."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:60
msgid "In xref:quarkus_integration[Quarkus], the engine used to format the messages is the same as the one injected by `@Inject Engine`. Therefore, you can make use of any Quarkus-specific integration feature such as xref:template_extension_methods[Template Extension Methods], xref:injecting-beans-directly-in-templates[Injecting Beans Directly In Templates] or even xref:type-safe-message-bundles[Type-safe Message Bundles]."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:63
msgid "The format object returned by the `Qute.fmt(String)` method can be evaluated lazily and used e.g. as a log message:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:68
#, no-wrap
msgid ""
"LOG.info(Qute.fmt(\"Hello {name}!\").data(\"name\", \"Foo\"));\n"
"// => Hello Foo! and the message template is only evaluated if the log level INFO is used for the specific logger\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:71
msgid "Please read the javadoc of the `io.quarkus.qute.Qute` class for more details."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/qute-reference.adoc:73
#, no-wrap
msgid "Hello World Example"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:78
msgid "In this example, we would like to demonstrate the _basic workflow_ when working with Qute templates.  Let's start with a simple \"hello world\" example.  We will always need some *template contents*:"
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:79
#, no-wrap
msgid "hello.html"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:85
#, no-wrap
msgid ""
"<html>\n"
"  <p>Hello {name}! <1>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:87
msgid "`{name}` is a value expression that is evaluated when the template is rendered."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:90
msgid "Then, we will need to parse the contents into a *template definition* Java object.  A template definition is an instance of `io.quarkus.qute.Template`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:94
msgid "If using Qute \"standalone\" you'll need to create an instance of `io.quarkus.qute.Engine` first.  The `Engine` represents a central point for template management with dedicated configuration.  Let's use the convenient builder:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:98
#, no-wrap
msgid "Engine engine = Engine.builder().addDefaults().build();\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:101
msgid "In Quarkus, there is a preconfigured `Engine` available for injection - see xref:quarkus_integration[Quarkus Integration]."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:103
msgid "Once we have an `Engine` instance we could parse the template contents:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:107
#, no-wrap
msgid "Template hello = engine.parse(helloHtmlContent);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:110
msgid "In Quarkus, you can simply inject the template definition. The template is automatically parsed and cached - see xref:quarkus_integration[Quarkus Integration]."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:112
msgid "Finally, create a *template instance*, set the data and render the output:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:117
#, no-wrap
msgid ""
"// Renders <html><p>Hello Jim!</p></html>\n"
"hello.data(\"name\", \"Jim\").render(); <1> <2>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:119
msgid "`Template.data(String, Object)` is a convenient method that creates a template instance and sets the data in one step."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:120
msgid "`TemplateInstance.render()` triggers a synchronous rendering, i.e. the current thread is blocked until the rendering is finished. However, there are also asynchronous ways to trigger the rendering and consume the results. For example, there is the `TemplateInstance.renderAsync()` method that returns `CompletionStage<String>` or `TemplateInstance.createMulti()` that returns Mutiny's `Multi<String>`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:122
msgid "So the workflow is simple:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:124
msgid "Create the template contents (`hello.html`),"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:125
msgid "Parse the template definition (`io.quarkus.qute.Template`),"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:126
msgid "Create a template instance (`io.quarkus.qute.TemplateInstance`),"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:127
msgid "Render the output."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:129
msgid "The `Engine` is able to cache the template definitions so that it's not necessary to parse the contents again and again. In Quarkus, the caching is done automatically."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/qute-reference.adoc:131
#, no-wrap
msgid "Core Features"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/qute-reference.adoc:134
#, no-wrap
msgid "Basic Building Blocks"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:137
msgid "The dynamic parts of a template include comments, expressions, sections and unparsed character data."
msgstr ""

#. type: Labeled list
#: upstream/_versions/3.2/guides/qute-reference.adoc:138
#, no-wrap
msgid "Comments"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:142
msgid "A comment starts with the sequence `{!` and ends with the sequence `!}`, e.g. `{! This is a comment !}`.  Can be multiline and may contain expressions and sections: `{! {#if true} !}`.  The content of a comment is completely ignored when rendering the output."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/qute-reference.adoc:143
#: upstream/_versions/3.2/guides/qute-reference.adoc:264
#, no-wrap
msgid "Expressions"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:148
msgid "An xref:expressions[expression] outputs an evaluated value.  It consists of one or more parts.  A part may represent simple properties: `{foo}`, `{item.name}`, and virtual methods: `{item.get(name)}`, `{name ?: 'John'}`.  An expression may also start with a namespace: `{inject:colors}`."
msgstr ""

#. type: Labeled list
#: upstream/_versions/3.2/guides/qute-reference.adoc:149
#: upstream/_versions/3.2/guides/qute-reference.adoc:583
#: upstream/_versions/3.2/guides/qute-reference.adoc:2800
#, no-wrap
msgid "Sections"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:155
msgid "A xref:sections[section] may contain static text, expressions and nested sections: `{#if foo.active}{foo.name}{/if}`.  The name in the closing tag is optional: `{#if active}ACTIVE!{/}`.  A section can be empty: `{#myTag image=true /}`.  Some sections support optional end tags, i.e. if the end tag is missing then the section ends where the parent section ends.  A section may also declare nested section blocks: `{#if item.valid} Valid. {#else} Invalid. {/if}` and decide which block to render."
msgstr ""

#. type: Labeled list
#: upstream/_versions/3.2/guides/qute-reference.adoc:156
#, no-wrap
msgid "Unparsed Character Data"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:159
msgid "It is used to mark the content that should be rendered but _not parsed_.  It starts with the sequence `{|` and ends with the sequence `|}`: `{| <script>if(true){alert('Qute is cute!')};</script> |}`, and could be multi-line."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/qute-reference.adoc:163
msgid "Previously, unparsed character data could start with `{[` and end with `]}`. This syntax is now removed due to common collisions with constructs from other languages."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/qute-reference.adoc:166
#, no-wrap
msgid "Identifiers and Tags"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:171
msgid "Identifiers are used in expressions and section tags.  A valid identifier is a sequence of non-whitespace characters.  However, users are encouraged to only use valid Java identifiers in expressions."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:173
msgid "You can use bracket notation if you need to specify an identifier that contains a dot, e.g. `{map['my.key']}`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:177
msgid "When parsing a template document the parser identifies all _tags_.  A tag starts and ends with a curly bracket, e.g. `{foo}`.  The content of a tag must start with:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:179
msgid "a digit, or"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:180
msgid "an alphabet character, or"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:181
msgid "underscore, or"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:182
msgid "a built-in command: `#`, `!`, `@`, `/`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:184
msgid "If it does not start with any of the above it is ignored by the parser."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:185
#, no-wrap
msgid "Tag Examples"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:197
#, no-wrap
msgid ""
"<html>\n"
"   <body>\n"
"   {_foo.bar}   <1>\n"
"   {! comment !}<2>\n"
"   {  foo}      <3>\n"
"   {{foo}}      <4>\n"
"   {\"foo\":true} <5>\n"
"   </body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:199
msgid "Parsed: an expression that starts with underscore."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:200
msgid "Parsed: a comment"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:201
msgid "Ignored: starts with whitespace."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:202
msgid "Ignored: starts with `{`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:203
msgid "Ignored: starts with `\"`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:205
msgid "It is also possible to use escape sequences `\\{` and `\\}` to insert delimiters in the text. In fact, an escape sequence is usually only needed for the start delimiter, i.e. `\\\\{foo}` will be rendered as `{foo}` (no parsing/evaluation will happen)."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/qute-reference.adoc:206
#, no-wrap
msgid "Removing Standalone Lines From the Template"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:212
msgid "By default, the parser removes standalone lines from the template output.  A *standalone line* is a line that contains at least one section tag (e.g. `{#each}` and `{/each}`), parameter declaration (e.g. `{@org.acme.Foo foo}`) or comment but no expression and no non-whitespace character.  In other words, a line that contains no section tag or a parameter declaration is *not* a standalone line.  Likewise, a line that contains an _expression_ or a _non-whitespace character_ is *not* a standalone line."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:213
#, no-wrap
msgid "Template Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:226
#, no-wrap
msgid ""
"<html>\n"
"  <body>\n"
"     <ul>\n"
"     {#for item in items} <1>\n"
"       <li>{item.name} {#if item.active}{item.price}{/if}</li>  <2>\n"
"                          <3>\n"
"     {/for}               <4>\n"
"     </ul>\n"
"   <body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:228
msgid "This is a standalone line and will be removed."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:229
msgid "Not a standalone line - contains an expression and non-whitespace characters"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:230
msgid "Not a standalone line - contains no section tag/parameter declaration"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:231
msgid "This is a standalone line."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:232
#, no-wrap
msgid "Default Output"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:239
#, no-wrap
msgid ""
"<html>\n"
"  <body>\n"
"     <ul>\n"
"       <li>Foo 100</li>  \n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:243
#: upstream/_versions/3.2/guides/qute-reference.adoc:261
#, no-wrap
msgid ""
"     </ul>\n"
"   <body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:247
msgid "In Quarkus, the default behavior can be disabled by setting the property `quarkus.qute.remove-standalone-lines` to `false`.  In this case, all whitespace characters from a standalone line will be printed to the output."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:248
#, no-wrap
msgid "Output with `quarkus.qute.remove-standalone-lines=false`"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:254
#, no-wrap
msgid ""
"<html>\n"
"  <body>\n"
"     <ul>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:256
#, no-wrap
msgid "       <li>Foo 100</li>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:268
msgid "An expression is evaluated and outputs the value.  It has one or more parts, where each part represents either a property accessor (aka Field Access Expression) or a virtual method invocation (aka Method Invocation Expression)."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:272
msgid "When accessing the properties you can either use the dot notation or bracket notation.  In the `object.property` (dot notation) syntax, the `property` must be a xref:identifiers[valid identifier].  In the `object[property_name]` (bracket notation) syntax, the `property_name` has to be a non-null xref:literals[literal] value."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:276
msgid "An expression can start with an optional namespace followed by a colon (`:`).  A valid namespace consist of alphanumeric characters and underscores.  Namespace expressions are resolved differently - see also xref:expression_resolution[Resolution]."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:277
#, no-wrap
msgid "Property Accessor Examples"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:284
#, no-wrap
msgid ""
"{name} <1>\n"
"{item.name} <2>\n"
"{item['name']} <3>\n"
"{global:colors} <4> \n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:286
msgid "no namespace, one part: `name`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:287
msgid "no namespace, two parts: `item`, `name`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:288
msgid "equivalent to `{item.name}` but using the bracket notation"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:289
msgid "namespace `global`, one part: `colors`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:294
msgid "A part of an expression can be a _virtual method_ in which case the name can be followed by a list of comma-separated parameters in parentheses.  A parameter of a virtual method can be either a nested expression or a xref:literals[literal] value.  We call these methods _\"virtual\"_ because they do not have to be backed by a real Java method.  You can learn more about virtual methods in the xref:virtual_methods[following section]."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:295
#: upstream/_versions/3.2/guides/qute-reference.adoc:486
#, no-wrap
msgid "Virtual Method Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:300
#, no-wrap
msgid ""
"{item.getLabels(1)} <1>\n"
"{name or 'John'} <2>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:302
msgid "no namespace, two parts - `item`, `getLabels(1)`, the second part is a virtual method with name `getLabels` and params `1`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:303
msgid "infix notation that can be used for virtual methods with single parameter, translated to `name.or('John')`; no namespace, two parts - `name`, `or('John')`"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/qute-reference.adoc:305
#, no-wrap
msgid "Supported Literals"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:308
#, no-wrap
msgid "Literal"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:310
#: upstream/_versions/3.2/guides/qute-reference.adoc:399
#, no-wrap
msgid "Examples"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:311
#, no-wrap
msgid "boolean"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:313
#, no-wrap
msgid "`true`, `false`"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:314
#, no-wrap
msgid "null"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:316
#, no-wrap
msgid "`null`"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:317
#, no-wrap
msgid "string"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:319
#, no-wrap
msgid "`'value'`, `\"string\"`"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:320
#, no-wrap
msgid "integer"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:322
#, no-wrap
msgid "`1`, `-5`"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:323
#, no-wrap
msgid "long"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:325
#, no-wrap
msgid "`1l`, `-5L`"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:326
#, no-wrap
msgid "double"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:328
#, no-wrap
msgid "`1D`, `-5d`"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:329
#, no-wrap
msgid "float"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:331
#, no-wrap
msgid "`1f`, `-5F`"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/qute-reference.adoc:334
#, no-wrap
msgid "Resolution"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:341
msgid "The first part of the expression is always resolved against the xref:current_context_object[current context object].  If no result is found for the first part it's resolved against the parent context object (if available).  For an expression that starts with a namespace the current context object is found using all the available ``NamespaceResolver``s.  For an expression that does not start with a namespace the current context object is *derived from the position* of the tag.  All other parts of an expression are resolved using all ``ValueResolver``s against the result of the previous resolution."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:347
msgid "For example, expression `{name}` has no namespace and single part - `name`.  The \"name\" will be resolved using all available value resolvers against the current context object.  However, the expression `{global:colors}` has the namespace `global` and single part - `colors`.  First, all available ``NamespaceResolver``s will be used to find the current context object.  And afterwards value resolvers will be used to resolve \"colors\" against the context object found."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/qute-reference.adoc:352
msgid "Data passed to the template instance are always accessible using the `data` namespace.  This could be useful to access data for which the key is overridden:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:367
#, no-wrap
msgid ""
"<html>\n"
"{item.name} <1>\n"
"<ul>\n"
"{#for item in item.derivedItems} <2>\n"
"  <li>\n"
"  {item.name} <3> \n"
"  is derived from\n"
"  {data:item.name} <4>\n"
"  </li>\n"
"{/for}\n"
"</ul>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:369
msgid "`item` is passed to the template instance as a data object."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:370
msgid "Iterate over the list of derived items."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:371
msgid "`item` is an alias for the iterated element."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:372
msgid "Use the `data` namespace to access the `item` data object."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/qute-reference.adoc:376
#, no-wrap
msgid "Current Context"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/qute-reference.adoc:382
msgid "If an expression does not specify a namespace, the _current context object_ is derived from the position of the tag.  By default, the current context object represents the data passed to the template instance.  However, sections may change the current context object.  A typical example is the xref:let_section[`let`] section that can be used to define named local variables:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:389
#, no-wrap
msgid ""
"{#let myParent=order.item.parent myPrice=order.price} <1>\n"
"  <h1>{myParent.name}</h1>\n"
"  <p>Price: {myPrice}</p>\n"
"{/let}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:391
msgid "The current context object inside the section is the map of resolved parameters."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:393
msgid "The current context can be accessed via the implicit binding `this`."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/qute-reference.adoc:394
#, no-wrap
msgid "Built-in Resolvers"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:397
#, no-wrap
msgid "Name"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:397
#, no-wrap
msgid "Description"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:400
#, no-wrap
msgid "Elvis Operator"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:401
#, no-wrap
msgid "Outputs the default value if the previous part cannot be resolved or resolves to `null`."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:403
#, no-wrap
msgid "`{person.name ?: 'John'}`, `{person.name or 'John'}`, `{person.name.or('John')}`"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:404
#, no-wrap
msgid "orEmpty"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:405
#, no-wrap
msgid "Outputs an empty list if the previous part cannot be resolved or resolves to `null`."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:407
#, no-wrap
msgid "`{pets.orEmpty.size}` outputs `0` if `pets` is not resolvable or `null`"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:408
#, no-wrap
msgid "Ternary Operator"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:409
#, no-wrap
msgid "Shorthand for if-then-else statement. Unlike in xref:if_section[If Section] nested operators are not supported."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:411
#, no-wrap
msgid "`{item.isActive ? item.name : 'Inactive item'}` outputs the value of `item.name` if `item.isActive` resolves to `true`."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:412
#, no-wrap
msgid "Logical AND Operator"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:414
#, no-wrap
msgid ""
"Outputs `true` if both parts are not `falsy` as described in the xref:if_section[If Section].\n"
"The parameter is only evaluated if needed."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:416
#, no-wrap
msgid "`{person.isActive && person.hasStyle}`"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:417
#, no-wrap
msgid "Logical OR Operator"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:419
#, no-wrap
msgid ""
"Outputs `true` if any of the parts is not `falsy` as described in the xref:if_section[If Section].\n"
"The parameter is only evaluated if needed."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:419
#, no-wrap
msgid "`{person.isActive \\"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:419
#: upstream/_versions/3.2/guides/qute-reference.adoc:823
#, no-wrap
msgid "\\"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:421
#, no-wrap
msgid "person.hasStyle}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:424
msgid "The condition in a ternary operator evaluates to `true` if the value is not considered `falsy` as described in xref:if_section[If Section]."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:426
msgid "In fact, the operators are implemented as \"virtual methods\" that consume one parameter and can be used with infix notation. For example `{person.name or 'John'}` is translated to `{person.name.or('John')}` and `{item.isActive ? item.name : 'Inactive item'}` is translated to `{item.isActive.ifTruthy(item.name).or('Inactive item')}`"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/qute-reference.adoc:427
#, no-wrap
msgid "Arrays"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:432
msgid "You can iterate over elements of an array with xref:loop_section[Loop Section].  Moreover, it's also possible to get the length of the specified array and access the elements directly via an index value.  Additionally, you can access the first/last `n` elements via the `take(n)/takeLast(n)` methods."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:433
#, no-wrap
msgid "Array Examples"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:448
#, no-wrap
msgid ""
"<h1>Array of length: {myArray.length}</h1> <1>\n"
"<ul>\n"
"  <li>First: {myArray.0}</li> <2>\n"
"  <li>Second: {myArray[1]}</li> <3>\n"
"  <li>Third: {myArray.get(2)}</li> <4>\n"
"</ul>\n"
"<ol>\n"
" {#for element in myArray}\n"
" <li>{element}</li>\n"
" {/for}\n"
"</ol>\n"
"First two elements: {#each myArray.take(2)}{it}{/each} <5>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:450
msgid "Outputs the length of the array."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:451
msgid "Outputs the first element of the array."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:452
msgid "Outputs the second element of the array using the bracket notation."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:453
msgid "Outputs the third element of the array via the virtual method `get()`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:454
msgid "Outputs the first two elements of the array."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/qute-reference.adoc:455
#, no-wrap
msgid "Character Escapes"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:458
msgid "For HTML and XML templates the `'`, `\"`, `<`, `>`, `&` characters are escaped by default if a template variant is set."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:460
msgid "In Quarkus, a variant is set automatically for templates located in the `src/main/resources/templates`. By default, the `java.net.URLConnection#getFileNameMap()` is used to determine the content-type of a template file. The additional map of suffixes to content types can be set via `quarkus.qute.content-types`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:462
msgid "If you need to render the unescaped value:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:464
msgid "Either use the `raw` or `safe` properties implemented as extension methods of the `java.lang.Object`,"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:465
msgid "Or wrap the `String` value in a `io.quarkus.qute.RawString`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:472
#, no-wrap
msgid ""
"<html>\n"
"<h1>{title}</h1> <1>\n"
"{paragraph.raw} <2>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:474
msgid "`title` that resolves to `Expressions & Escapes` will be rendered as `Expressions &amp;amp; Escapes`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:475
msgid "`paragraph` that resolves to `<p>My text!</p>` will be rendered as `<p>My text!</p>`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:477
msgid "By default, a template with one of the following content types is escaped: `text/html`, `text/xml`, `application/xml` and `application/xhtml+xml`. However, it's possible to extend this list via the `quarkus.qute.escape-content-types` configuration property."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/qute-reference.adoc:479
#, no-wrap
msgid "Virtual Methods"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:485
msgid "A virtual method is a *part of an expression* that looks like a regular Java method invocation.  It's called \"virtual\" because it does not have to match the actual method of a Java class.  In fact, like normal properties a virtual method is also handled by a value resolver.  The only difference is that for virtual methods a value resolver consumes parameters that are also expressions."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:492
#, no-wrap
msgid ""
"<html>\n"
"<h1>{item.buildName(item.name,5)}</h1> <1>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:494
#, no-wrap
msgid "`buildName(item.name,5)` represents a virtual method with name `buildName` and two parameters: `item.name` and `5` . The virtual method could be evaluated by a value resolver generated for the following Java class:   \n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:502
#, no-wrap
msgid ""
"class Item {\n"
"   String buildName(String name, int age) {\n"
"      return name + \":\" + age;\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:506
msgid "Virtual methods are usually evaluated by value resolvers generated for xref:template_extension_methods[@TemplateExtension methods], xref:template_data[@TemplateData] or classes used in xref:typesafe_expressions[parameter declarations].  However, a custom value resolver that is not backed by any Java class/method can be registered as well."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:508
msgid "A virtual method with single parameter can be called using the infix notation:"
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:509
#, no-wrap
msgid "Infix Notation Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:515
#, no-wrap
msgid ""
"<html>\n"
"<p>{item.price or 5}</p>  <1>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:517
msgid "`item.price or 5` is translated to `item.price.or(5)`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:519
msgid "Virtual method parameters can be \"nested\" virtual method invocations."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:520
#, no-wrap
msgid "Nested Virtual Method Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:526
#, no-wrap
msgid ""
"<html>\n"
"<p>{item.subtractPrice(item.calculateDiscount(10))}</p>  <1>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:528
msgid "`item.calculateDiscount(10)` is evaluated first and then passed as an argument to `item.subtractPrice()`."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/qute-reference.adoc:529
#, no-wrap
msgid "Evaluation of `CompletionStage` and `Uni` Objects"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:535
msgid "Objects that implement `java.util.concurrent.CompletionStage` and `io.smallrye.mutiny.Uni` are evaluated in a special way.  If a part of an expression resolves to a `CompletionStage`, the resolution continues once this stage is completed and the next part of the expression (if any) is evaluated against the result of the completed stage.  For example, if there is an expression `{foo.size}` and `foo` resolves to `CompletionStage<List<String>>` then `size` is resolved against the completed result, i.e. `List<String>`.  If a part of an expression resolves to a `Uni`, a `CompletionStage` is first created from `Uni` using `Uni#subscribeAsCompletionStage()` and then evaluated as described above."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:537
msgid "Note that each `Uni#subscribeAsCompletionStage()` results in a new subscription. You might need to configure memoization of the `Uni` item or failure before it's used as template data, i.e. `myUni.memoize().indefinitely()`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:542
msgid "It can happen that a `CompletionStage` never completes or a `Uni` emits no item/failure.  In this case, the rendering methods (such as `TemplateInstance#render()` and `TemplateInstance#createUni()`) fail after a specific timeout.  The timeout can be specified as a template instance `timeout` attribute.  If no `timeout` attribute is set the global rendering timeout is used."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:544
msgid "In Quarkus, the default timeout can be set via the `io.quarkus.qute.timeout` configuration property. If using Qute standalone then the `EngineBuilder#timeout()` method can be used."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:546
msgid "In previous versions, only the `TemplateInstance#render()` method honored the timeout attribute. You can use the `io.quarkus.qute.useAsyncTimeout=false` config property to preserve the old behavior and take care of the timeout yourself, for example `templateInstance.createUtni().ifNoItem().after(Duration.ofMillis(500)).fail()`."
msgstr ""

#. type: Title =====
#: upstream/_versions/3.2/guides/qute-reference.adoc:547
#, no-wrap
msgid "How to Identify a Problematic Part of the Template"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:551
msgid "It's not easy to find the problematic part of a template when a timeout occurs.  You can set the `TRACE` level for the logger `io.quarkus.qute.nodeResolve` and try to analyze the log output afterwards."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:552
#, no-wrap
msgid "`application.properties` Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:557
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.qute.nodeResolve\".min-level=TRACE\n"
"quarkus.log.category.\"io.quarkus.qute.nodeResolve\".level=TRACE\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:560
msgid "You should see the following pair of log messages for every expression and section used in a template:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:563
#, no-wrap
msgid ""
"TRACE [io.qua.qut.nodeResolve] Resolve {name} started: Template hello.html at line 8\n"
"TRACE [io.qua.qut.nodeResolve] Resolve {name} completed: Template hello.html at line 8\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:566
msgid "If a `completed` log message is missing then you have a good candidate to explore."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/qute-reference.adoc:567
#, no-wrap
msgid "Missing Properties"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:572
msgid "It can happen that an expression may not be evaluated at runtime.  For example, if there is an expression `{person.age}` and there is no property `age` declared on the `Person` class.  The behavior differs based on whether the xref:strict_rendering[Strict Rendering] is enabled or not."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:575
msgid "If enabled then a missing property will always result in a `TemplateException` and the rendering is aborted.  You can use _default values_ and _safe expressions_ in order to suppress the error."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:577
msgid "If disabled then the special constant `NOT_FOUND` is written to the output by default."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:579
msgid "In Quarkus, it's possible to change the default strategy via the `quarkus.qute.property-not-found-strategy` as described in the xref:configuration-reference[Configuration Reference]."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:581
msgid "Similar errors are detected at build time if xref:typesafe_expressions[Type-safe Expressions] and xref:typesafe_templates[Type-safe Templates] are used."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:590
msgid "A section has a start tag that starts with `#`, followed by the name of the section such as `{#if}` and `{#each}`.  It may be empty, i.e. the start tag ends with `/`: `{#myEmptySection /}`.  Sections usually contain nested expressions and other sections.  The end tag starts with `/` and contains the name of the section (optional): `{#if foo}Foo!{/if}` or `{#if foo}Foo!{/}`.  Some sections support optional end tags, i.e. if the end tag is missing then the section ends where the parent section ends."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:591
#, no-wrap
msgid "`#let` Optional End Tag Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:600
#, no-wrap
msgid ""
"{#if item.isActive}\n"
"  {#let price = item.price} <1>\n"
"  {price}\n"
"  // synthetic {/let} added here automatically\n"
"{/if}\n"
"// {price} cannot be used here!\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:602
msgid "Defines the local variable that can be used inside the parent `{#if}` section."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:604
#, no-wrap
msgid "Built-in section"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:606
#, no-wrap
msgid "Supports Optional End Tag"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:607
#, no-wrap
msgid "`{#for}`"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:609
#: upstream/_versions/3.2/guides/qute-reference.adoc:612
#: upstream/_versions/3.2/guides/qute-reference.adoc:615
#: upstream/_versions/3.2/guides/qute-reference.adoc:621
#: upstream/_versions/3.2/guides/qute-reference.adoc:627
#: upstream/_versions/3.2/guides/qute-reference.adoc:630
#: upstream/_versions/3.2/guides/qute-reference.adoc:633
#, no-wrap
msgid "❌"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:610
#, no-wrap
msgid "`{#if}`"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:613
#, no-wrap
msgid "`{#when}`"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:616
#, no-wrap
msgid "`{#let}`"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:618
#: upstream/_versions/3.2/guides/qute-reference.adoc:624
#, no-wrap
msgid "✅"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:619
#, no-wrap
msgid "`{#with}`"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:622
#, no-wrap
msgid "`{#include}`"
msgstr ""

#. type: Labeled list
#: upstream/_versions/3.2/guides/qute-reference.adoc:625
#: upstream/_versions/3.2/guides/qute-reference.adoc:1102
#: upstream/_versions/3.2/guides/qute-reference.adoc:2815
#, no-wrap
msgid "User-defined Tags"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:628
#, no-wrap
msgid "`{#fragment}`"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:631
#, no-wrap
msgid "`{#cached}`"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/qute-reference.adoc:636
#, no-wrap
msgid "Parameters"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:645
msgid "A start tag can define parameters with optional names, e.g. `{#if item.isActive}` and `{#let foo=1 bar=false}`.  Parameters are separated by one or more spaces.  Names are separated from the values by the equals sign.  Names and values can be prefixed and suffixed with any number of spaces, e.g. `{#let id='Foo'}` and `{#let id = 'Foo'}` are equivalents where the name of the parameter is `id` and the value is `Foo`.  Values can be grouped using parentheses, e.g. `{#let id=(item.id ?: 42)}` where the name is `id` and the value is `item.id ?: 42`.  Sections can interpret parameter values in any way, e.g. take the value as is.  However, in most cases, the parameter value is registered as an xref:expressions[expression] and evaluated before use."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:650
msgid "A section may contain several content *blocks*.  The \"main\" block is always present.  Additional/nested blocks also start with `#` and can have parameters too - `{#else if item.isActive}`.  A section helper that defines the logic of a section can \"execute\" any of the blocks and evaluate the parameters."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:651
#, no-wrap
msgid "`#if` Section Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:661
#, no-wrap
msgid ""
"{#if item.name is 'sword'}\n"
"  It's a sword! <1>\n"
"{#else if item.name is 'shield'}\n"
"  It's a shield! <2>\n"
"{#else}\n"
"  Item is neither a sword nor a shield. <3>\n"
"{/if}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:663
msgid "This is the main block."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:664
#: upstream/_versions/3.2/guides/qute-reference.adoc:665
msgid "Additional block."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/qute-reference.adoc:667
#, no-wrap
msgid "Loop Section"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:671
msgid "The loop section makes it possible to iterate over an instance of `Iterable`, `Iterator`, array, `Map` (element is a `Map.Entry`), `Stream`, `Integer` and `int` (primitive value).  A `null` parameter value results in a no-op."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:674
msgid "This section has two flavors.  The first one is using the name `each` and `it` is an implicit alias for the iteration element."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:680
#, no-wrap
msgid ""
"{#each items}\n"
"  {it.name} <1>\n"
"{/each}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:682
msgid "`name` is resolved against the current iteration element."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:684
msgid "The other form is using the name `for` and specifies the alias used to reference the iteration element:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:690
#, no-wrap
msgid ""
"{#for item in items} <1>\n"
"  {item.name} \n"
"{/for}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:692
msgid "`item` is the alias used for the iteration element."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:694
msgid "It's also possible to access the iteration metadata inside the loop via the following keys:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:696
msgid "`count` - 1-based index"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:697
msgid "`index` - zero-based index"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:698
msgid "`hasNext` - `true` if the iteration has more elements"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:699
msgid "`isLast` - `true` if `hasNext == false`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:700
msgid "`isFirst` - `true` if `count == 1`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:701
msgid "`odd` - `true` if the element's count is odd"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:702
msgid "`even` - `true` if the element's count is even"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:703
msgid "`indexParity` - outputs `odd` or `even` based on the count value"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:708
msgid "However, the keys cannot be used directly.  Instead, a prefix is used to avoid possible collisions with variables from the outer scope.  By default, the alias of an iterated element suffixed with an underscore is used as a prefix.  For example, the `hasNext` key must be prefixed with `it_` inside an `{#each}` section: `{it_hasNext}`."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:709
#, no-wrap
msgid "`each` Iteration Metadata Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:716
#, no-wrap
msgid ""
"{#each items}\n"
"  {it_count}. {it.name} <1>\n"
"  {#if it_hasNext}<br>{/if} <2>\n"
"{/each}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:718
msgid "`it_count` represents one-based index."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:719
#: upstream/_versions/3.2/guides/qute-reference.adoc:732
msgid "`<br>` is only rendered if the iteration has more elements."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:721
msgid "And must be used in a form of `{item_hasNext}` inside a `{#for}` section with the `item` element alias."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:722
#, no-wrap
msgid "`for` Iteration Metadata Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:729
#, no-wrap
msgid ""
"{#for item in items}\n"
"  {item_count}. {item.name} <1>\n"
"  {#if item_hasNext}<br>{/if} <2>\n"
"{/for}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:731
msgid "`item_count` represents one-based index."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/qute-reference.adoc:736
msgid "The iteration metadata prefix is configurable either via `EngineBuilder.iterationMetadataPrefix()` for standalone Qute or via the `quarkus.qute.iteration-metadata-prefix` configuration property in a Quarkus application. Three special constants can be used:"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/qute-reference.adoc:738
msgid "`<alias_>` - the alias of an iterated element suffixed with an underscore is used (default)"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/qute-reference.adoc:739
msgid "`<alias?>` - the alias of an iterated element suffixed with a question mark is used"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/qute-reference.adoc:740
msgid "`<none>` - no prefix is used"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:743
msgid "The `for` statement also works with integers, starting from 1. In the example below, considering that `total = 3`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:749
#, no-wrap
msgid ""
"{#for i in total}\n"
"  {i}: ({i_count} {i_indexParity} {i_even})<br>\n"
"{/for}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:752
msgid "And the output will be:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:758
#, no-wrap
msgid ""
"1: (1 odd false)\n"
"2: (2 even true)\n"
"3: (3 odd false)\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:761
msgid "A loop section may also define the `{#else}` block that is executed when there are no items to iterate:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:769
#, no-wrap
msgid ""
"{#for item in items}\n"
"  {item.name}\n"
"{#else}\n"
"  No items.\n"
"{/for}\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/qute-reference.adoc:772
#, no-wrap
msgid "If Section"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:777
msgid "The `if` section represents a basic control flow section.  The simplest possible version accepts a single parameter and renders the content if the condition is evaluated to `true`.  A condition without an operator evaluates to `true` if the value is not considered `falsy`, i.e. if the value is not `null`, `false`, an empty collection, an empty map, an empty array, an empty string/char sequence or a number equal to zero."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:783
#, no-wrap
msgid ""
"{#if item.active}\n"
"  This item is active.\n"
"{/if}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:786
msgid "You can also use the following operators in a condition:"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:788
#: upstream/_versions/3.2/guides/qute-reference.adoc:931
#, no-wrap
msgid "Operator"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:788
#: upstream/_versions/3.2/guides/qute-reference.adoc:931
#, no-wrap
msgid "Aliases"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:790
#, no-wrap
msgid "Precedence (higher wins)"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:791
#, no-wrap
msgid "logical complement"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:792
#, no-wrap
msgid "`!`"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:794
#, no-wrap
msgid "4"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:795
#: upstream/_versions/3.2/guides/qute-reference.adoc:938
#, no-wrap
msgid "greater than"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:796
#: upstream/_versions/3.2/guides/qute-reference.adoc:939
#, no-wrap
msgid "`gt`, `>`"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:798
#: upstream/_versions/3.2/guides/qute-reference.adoc:802
#: upstream/_versions/3.2/guides/qute-reference.adoc:806
#: upstream/_versions/3.2/guides/qute-reference.adoc:810
#, no-wrap
msgid "3"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:799
#: upstream/_versions/3.2/guides/qute-reference.adoc:942
#, no-wrap
msgid "greater than or equal to"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:800
#: upstream/_versions/3.2/guides/qute-reference.adoc:943
#, no-wrap
msgid "`ge`, `>=`"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:803
#: upstream/_versions/3.2/guides/qute-reference.adoc:946
#, no-wrap
msgid "less than"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:804
#: upstream/_versions/3.2/guides/qute-reference.adoc:947
#, no-wrap
msgid "`lt`, `<`"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:807
#: upstream/_versions/3.2/guides/qute-reference.adoc:950
#, no-wrap
msgid "less than or equal to"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:808
#: upstream/_versions/3.2/guides/qute-reference.adoc:951
#, no-wrap
msgid "`le`, `\\<=`"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:811
#, no-wrap
msgid "equals"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:812
#, no-wrap
msgid "`eq`, `==`, `is`"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:814
#: upstream/_versions/3.2/guides/qute-reference.adoc:818
#, no-wrap
msgid "2"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:815
#, no-wrap
msgid "not equals"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:816
#, no-wrap
msgid "`ne`, `!=`"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:819
#, no-wrap
msgid "logical AND (short-circuiting)"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:820
#, no-wrap
msgid "`&&`, `and`"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:822
#: upstream/_versions/3.2/guides/qute-reference.adoc:826
#, no-wrap
msgid "1"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:823
#, no-wrap
msgid "logical OR (short-circuiting)"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:823
#, no-wrap
msgid "`\\"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:824
#, no-wrap
msgid "`, `or`"
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:828
#, no-wrap
msgid "A simple operator example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:834
#, no-wrap
msgid ""
"{#if item.age > 10}\n"
"  This item is very old.\n"
"{/if}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:837
msgid "Multiple conditions are also supported."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:838
#, no-wrap
msgid "Multiple conditions example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:844
#, no-wrap
msgid ""
"{#if item.age > 10 && item.price > 500}\n"
"  This item is very old and expensive.\n"
"{/if}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:847
msgid "Precedence rules can be overridden by parentheses."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:848
#, no-wrap
msgid "Parentheses example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:854
#, no-wrap
msgid ""
"{#if (item.age > 10 || item.price > 500) && user.loggedIn}\n"
"  User must be logged in and item age must be > 10 or price must be > 500.\n"
"{/if}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:858
msgid "You can also add any number of `else` blocks:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:870
#, no-wrap
msgid ""
"{#if item.age > 10}\n"
"  This item is very old.\n"
"{#else if item.age > 5}\n"
"  This item is quite old.\n"
"{#else if item.age > 2}\n"
"  This item is old.\n"
"{#else}\n"
"  This item is not old at all!\n"
"{/if}\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/qute-reference.adoc:873
#, no-wrap
msgid "When Section"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:879
msgid "This section is similar to Java's `switch` or Kotlin's `when` constructs.  It matches a _tested value_ against all blocks sequentially until a condition is satisfied.  The first matching block is executed.  All other blocks are ignored (this behavior differs to the Java `switch` where a `break` statement is necessary)."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:880
#, no-wrap
msgid "Example using the `when`/`is` name aliases"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:891
#, no-wrap
msgid ""
"{#when items.size}\n"
"  {#is 1} <1>\n"
"    There is exactly one item!\n"
"  {#is > 10} <2>\n"
"    There are more than 10 items!\n"
"  {#else} <3>\n"
"    There are 2 -10 items!\n"
"{/when}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:893
msgid "If there is exactly one parameter it's tested for equality."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:895
msgid "It is possible to use xref:when_operators[an operator] to specify the matching logic.  Unlike in the xref:if_section[If Section] nested operators are not supported."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:896
msgid "`else` is block is executed if no other block matches the value."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:897
#, no-wrap
msgid "Example using the `switch`/`case` name aliases"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:906
#, no-wrap
msgid ""
"{#switch person.name}\n"
"  {#case 'John'} <1>\n"
"    Hey John!\n"
"  {#case 'Mary'}\n"
"    Hey Mary!\n"
"{/switch}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:908
msgid "`case` is an alias for `is`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:911
msgid "A tested value that resolves to an enum is handled specifically.  The parameters of an `is`/`case` block are not evaluated as expressions but compared with the result of `toString()` invocation upon the tested value."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:920
#, no-wrap
msgid ""
"{#when machine.status}\n"
"  {#is ON} \n"
"    It's running. <1>\n"
"  {#is in OFF BROKEN}\n"
"    It's broken or OFF. <2>\n"
"{/when}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:922
msgid "This block is executed if `machine.status.toString().equals(\"ON\")`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:923
msgid "This block is executed if `machine.status.toString().equals(\"OFF\")` or `machine.status.toString().equals(\"BROKEN\")`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:925
msgid "An enum constant is validated if the tested value has a type information available and resolves to an enum type."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:927
msgid "The following operators are supported in `is`/`case` block conditions:"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:933
#, no-wrap
msgid "Example"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:934
#, no-wrap
msgid "not equal"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:935
#, no-wrap
msgid "`!=`, `not`, `ne`"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:937
#, no-wrap
msgid "`{#is not 10}`,`{#case != 10}`"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:941
#: upstream/_versions/3.2/guides/qute-reference.adoc:953
#, no-wrap
msgid "`{#case le 10}`"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:945
#, no-wrap
msgid "`{#is >= 10}`"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:949
#, no-wrap
msgid "`{#is < 10}`"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:954
#, no-wrap
msgid "in"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:955
#, no-wrap
msgid "`in`"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:957
#, no-wrap
msgid "`{#is in 'foo' 'bar' 'baz'}`"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:958
#, no-wrap
msgid "not in"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:959
#, no-wrap
msgid "`ni`,`!in`"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/qute-reference.adoc:961
#, no-wrap
msgid "`{#is !in 1 2 3}`"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/qute-reference.adoc:964
#, no-wrap
msgid "Let Section"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:967
msgid "This section allows you to define named local variables:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:975
#, no-wrap
msgid ""
"{#let myParent=order.item.parent isActive=false age=10 price=(order.price + 10)} <1><2>\n"
"  <h1>{myParent.name}</h1>\n"
"  Is active: {isActive}\n"
"  Age: {age}\n"
"{/let} <3>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:977
msgid "The local variable is initialized with an expression that can also represent a xref:literals[literal], i.e. `isActive=false` and `age=10`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:978
msgid "The infix notation is only supported if parentheses are used for grouping, e.g. `price=(order.price + 10)` is equivalent to `price=order.price.plus(10)`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:979
msgid "Keep in mind that the variable is not available outside the `let` section that defines it."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:981
msgid "If a key of a section parameter, such as the name of the local variable, ends with a `?`, then the local variable is only set if the key without the `?` suffix resolves to `null` or _\"not found\"_:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:987
#, no-wrap
msgid ""
"{#let enabled?=true} <1> <2>\n"
"  {#if enabled}ON{/if} \n"
"{/let}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:989
msgid "`true` is effectively a _default value_ that is only used if the parent scope does not define `enabled` already."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:990
msgid "`enabled?=true` is a short version of `enabled=enabled.or(true)`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:992
msgid "This section tag is also registered under the `set` alias:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:999
#, no-wrap
msgid ""
"{#set myParent=item.parent price=item.price}\n"
"  <h1>{myParent.name}</h1>\n"
"  <p>Price: {price}\n"
"{/set}\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/qute-reference.adoc:1002
#, no-wrap
msgid "With Section"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1006
msgid "This section can be used to set the current context object.  This could be useful to simplify the template structure:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1013
#, no-wrap
msgid ""
"{#with item.parent}\n"
"  <h1>{name}</h1>  <1>\n"
"  <p>{description}</p> <2>\n"
"{/with}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1015
msgid "The `name` will be resolved against the `item.parent`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1016
msgid "The `description` will be also resolved against the `item.parent`."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/qute-reference.adoc:1022
msgid "Note that the `with` section should not be used in xref:typesafe_templates[Type-safe Templates] or templates that define xref:typesafe_expressions[Type-safe Expressions].  The reason is that it prevents Qute from validating the nested expressions.  If possible, replace it with the `{#let}` section which declares an explicit binding:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1029
#, no-wrap
msgid ""
"{#let it=item.parent}\n"
"  <h1>{it.name}</h1>\n"
"  <p>{it.description}</p>\n"
"{/let}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/qute-reference.adoc:1033
msgid "This section might also come in handy when we'd like to avoid multiple expensive invocations:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1043
#, no-wrap
msgid ""
"{#with item.callExpensiveLogicToGetTheValue(1,'foo',bazinga)}\n"
"  {#if this is \"fun\"} <1>\n"
"    <h1>Yay!</h1>\n"
"  {#else}\n"
"    <h1>{this} is not fun at all!</h1>\n"
"  {/if}\n"
"{/with}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1045
msgid "`this` is the result of `item.callExpensiveLogicToGetTheValue(1,'foo',bazinga)`. The method is only invoked once even though the result may be used in multiple expressions."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/qute-reference.adoc:1047
#, no-wrap
msgid "Include Section"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1050
msgid "This section can be used to include another template and possibly override some parts of the template (see the _template inheritance_ below)."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:1051
#, no-wrap
msgid "Simple Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1063
#, no-wrap
msgid ""
"<html>\n"
"<head>\n"
"<meta charset=\"UTF-8\">\n"
"<title>Simple Include</title>\n"
"</head>\n"
"<body>\n"
"  {#include foo limit=10 /} <1><2>\n"
"</body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1065
msgid "Include a template with id `foo`. The included template can reference data from the current context."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1066
msgid "It's also possible to define optional parameters that can be used in the included template."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1068
msgid "_Template inheritance_ makes it possible to reuse template layouts."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:1069
#, no-wrap
msgid "Template \"base\""
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1081
#, no-wrap
msgid ""
"<html>\n"
"<head>\n"
"<meta charset=\"UTF-8\">\n"
"<title>{#insert title}Default Title{/}</title> <1>\n"
"</head>\n"
"<body>\n"
"  {#insert}No body!{/} <2>\n"
"</body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1083
#: upstream/_versions/3.2/guides/qute-reference.adoc:1159
msgid "`insert` sections are used to specify parts that could be overridden by a template that includes the given template."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1084
msgid "An `insert` section may define the default content that is rendered if not overridden. If there is no name supplied then the main block of the relevant `{#include}` section is used."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:1085
#, no-wrap
msgid "Template \"detail\""
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1094
#, no-wrap
msgid ""
"{#include base} <1>\n"
"  {#title}My Title{/title} <2>\n"
"  <div> <3>\n"
"    My body.\n"
"  </div>\n"
"{/include}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1096
msgid "`include` section is used to specify the extended template."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1097
msgid "Nested blocks are used to specify the parts that should be overridden."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1098
msgid "The content of the main block is used for an `{#insert}` section with no name parameter specified."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1100
msgid "Section blocks can also define an optional end tag - `{/title}`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1106
msgid "User-defined tags can be used to include a _tag template_, optionally pass some arguments and possibly override some parts of the template.  Let's suppose we have a tag template called `itemDetail.html`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1113
#, no-wrap
msgid ""
"{#if showImage} <1>\n"
"  {it.image} <2>\n"
"  {nested-content} <3>\n"
"{/if}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1115
msgid "`showImage` is a named parameter."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1116
msgid "`it` is a special key that is replaced with the first unnamed parameter of the tag."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1117
msgid "(optional) `nested-content` is a special key that will be replaced by the content of the tag."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1120
msgid "In Quarkus, all files from the `src/main/resources/templates/tags` are registered and monitored automatically.  For Qute standalone, you need to put the parsed template under the name `itemDetail.html` and register a relevant `UserTagSectionHelper` to the engine:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1127
#, no-wrap
msgid ""
"Engine engine = Engine.builder()\n"
"                   .addSectionHelper(new UserTagSectionHelper.Factory(\"itemDetail\",\"itemDetail.html\"))\n"
"                   .build();\n"
"engine.putTemplate(\"itemDetail.html\", engine.parse(\"...\"));\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1130
msgid "Then, we can call the tag like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1142
#, no-wrap
msgid ""
"<ul>\n"
"{#for item in items}\n"
"  <li>\n"
"  {#itemDetail item showImage=true} <1>\n"
"    = <b>{item.name}</b> <2>\n"
"  {/itemDetail}\n"
"  </li>\n"
"{/for}\n"
"</ul>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1144
msgid "`item` is resolved to an iteration element and can be referenced using the `it` key in the tag template."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1145
msgid "Tag content injected using the `nested-content` key in the tag template."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1150
msgid "By default, the tag template can reference data from the parent context.  For example, the tag above could use the following expression `{items.size}`.  However, sometimes it might be useful to disable this behavior and execute the tag as an _isolated_ template, i.e. without access to the context of the template that calls the tag.  In this case, just add `_isolated` or `_isolated=true` argument to the call site, e.g. `{#itemDetail item showImage=true _isolated /}`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1152
msgid "User tags can also make use of the template inheritance in the same way as regular `{#include}` sections do."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:1153
#, no-wrap
msgid "Tag `myTag`"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1157
#, no-wrap
msgid "This is {#insert title}my title{/title}! <1>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:1160
#, no-wrap
msgid "Tag Call Site"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1168
#, no-wrap
msgid ""
"<p>\n"
"  {#myTag}\n"
"    {#title}my custom title{/title} <1>\n"
"  {/myTag}\n"
"</p>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1170
msgid "The result would be something like `<p>This is my custom title!</p>`."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/qute-reference.adoc:1173
#, no-wrap
msgid "Fragments"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1177
msgid "A fragment represents a part of the template that can be treated as a separate template, i.e. rendered separately.  One of the main motivations to introduce this feature was to support use cases like https://htmx.org/essays/template-fragments/[htmx fragments]."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1180
msgid "Fragments can be defined with the `{#fragment}` section.  Each fragment has an identifier that can only consist of alphanumeric characters and underscores."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1182
msgid "Note that a fragment identifier must be unique in a template."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:1183
#: upstream/_versions/3.2/guides/qute-reference.adoc:1258
#, no-wrap
msgid "Fragment Definition in `item.html`"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1188
#, no-wrap
msgid ""
"{@org.acme.Item item}\n"
"{@java.util.List<String> aliases}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1190
#, no-wrap
msgid "<h1>Item - {item.name}</h1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1192
#, no-wrap
msgid "<p>This document contains a detailed info about an item.</p>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1201
#, no-wrap
msgid ""
"{#fragment id=item_aliases} <1>\n"
"<h2>Aliases</h2>\n"
"<ol>\n"
"    {#for alias in aliases}\n"
"    <li>{alias}</li>\n"
"    {/for}\n"
"</ol>\n"
"{/fragment}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1203
msgid "Defines a fragment with identifier `item_aliases`. Note that only alphanumeric characters and underscores can be used in the identifier."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1205
msgid "You can obtain a fragment programmatically via the `io.quarkus.qute.Template.getFragment(String)` method."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:1206
#, no-wrap
msgid "Obtaining a Fragment"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1211
#, no-wrap
msgid ""
"@Inject\n"
"Template item;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1217
#, no-wrap
msgid ""
"String useTheFragment() {\n"
"   return item.getFragment(\"item_aliases\") <1>\n"
"            .data(\"aliases\", List.of(\"Foo\",\"Bar\")) <2>\n"
"            .render();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1219
msgid "Obtains the template fragment with identifier `item_aliases`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1220
msgid "Make sure the data are set correctly."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1222
msgid "The snippet above should render something like:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1230
#, no-wrap
msgid ""
"<h2>Aliases</h2>\n"
"<ol>\n"
"    <li>Foo</li>\n"
"    <li>Bar</li>\n"
"</ol>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1233
msgid "In Quarkus, it is also possible to define a xref:type_safe_fragments[type-safe fragment]."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1235
msgid "You can also include a fragment with an `{#include}` section inside another template or the template that defines the fragment."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:1236
#, no-wrap
msgid "Including a Fragment in `user.html`"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1240
#, no-wrap
msgid "<h1>User - {user.name}</h1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1242
#, no-wrap
msgid "<p>This document contains a detailed info about a user.</p>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1244
#, no-wrap
msgid "{#include item$item_aliases aliases=user.aliases /} <1><2>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1246
msgid "A template identifier that contains a dollar sign `$` denotes a fragment. The `item$item_aliases` value is translated as: _Use the fragment `item_aliases` from the template `item`._"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1247
msgid "The `aliases` parameter is used to pass the relevant data. We need to make sure that the data are set correctly. In this particular case the fragment will use the expression `user.aliases` as the value of `aliases` in the `{#for alias in aliases}` section."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1249
msgid "If you want to reference a fragment from the same template, skip the part before `$`, i.e. something like `{#include $item_aliases /}`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1251
msgid "You can specify `{#include item$item_aliases _ignoreFragments=true /}` in order to disable this feature, i.e. a dollar sign `$` in the template identifier does not result in a fragment lookup."
msgstr ""

#. type: Title =====
#: upstream/_versions/3.2/guides/qute-reference.adoc:1252
#, no-wrap
msgid "Hidden Fragments"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1257
msgid "By default, a fragment is normally rendered as a part of the original template.  However, sometimes it might be useful to mark a fragment as _hidden_ with `rendered=false`.  An interesting use case would be a fragment that can be used multiple-times inside the template that defines it."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1264
#, no-wrap
msgid ""
"{#fragment id=strong rendered=false} <1>\n"
"<strong>{val}</strong>\n"
"{/fragment}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1271
#, no-wrap
msgid ""
"<h1>My page</h1>\n"
"<p>This document \n"
"{#include $strong val='contains' /} <2>\n"
"a lot of \n"
"{#include $strong val='information' /} <3>\n"
"!</p>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1275
msgid "Defines a hidden fragment with identifier `strong`.  In this particular case, we use the `false` boolean literal as the value of the `rendered` parameter.  However, it's possible to use any expression there."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1277
msgid "Include the fragment `strong` and pass the value.  Note the syntax `$strong` which is translated to include the fragment `strong` from the current template."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1278
msgid "Include the fragment `strong` and pass the value."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1280
msgid "The snippet above renders something like:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1289
#, no-wrap
msgid ""
"<h1>My page</h1>\n"
"<p>This document \n"
"<strong>contains</strong>\n"
"a lot of \n"
"<strong>information</strong>\n"
"!</p>\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/qute-reference.adoc:1291
#, no-wrap
msgid "Eval Section"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1295
msgid "This section can be used to parse and evaluate a template dynamically.  The behavior is very similar to xref:include_helper[Include Section] but:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1297
msgid "The template content is passed directly, i.e. not obtained via an `io.quarkus.qute.TemplateLocator`,"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1298
msgid "It's not possible to override parts of the evaluated template."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1302
#, no-wrap
msgid "{#eval myData.template name='Mia' /} <1><2><3>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1305
msgid "The result of `myData.template` will be used as the template.  The template is executed with the xref:current_context_object[Current Context], i.e. can reference data from the template it's included into."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1306
msgid "It's also possible to define optional parameters that can be used in the evaluated template."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1307
msgid "The content of the section is always ignored."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1310
msgid "The evaluated template is parsed and evaluated every time the section is executed.  In other words, it is not possible to cache the parsed value to conserve resources and optimize performance."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/qute-reference.adoc:1311
#, no-wrap
msgid "Cached Section"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1315
msgid "Sometimes it's practical to cache parts of the template that rarely change.  In order to use the caching capability, register and configure the built-in `io.quarkus.qute.CacheSectionHelper.Factory`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1328
#, no-wrap
msgid ""
"// A simple map-based cache\n"
"ConcurrentMap<String, CompletionStage<ResultNode>> map = new ConcurrentHashMap<>();\n"
"engineBuilder\n"
"    .addSectionHelper(new CacheSectionHelper.Factory(new Cache() {\n"
"        @Override\n"
"        public CompletionStage<ResultNode> getValue(String key,\n"
"           Function<String, CompletionStage<ResultNode>> loader) {\n"
"              return map.computeIfAbsent(key, k -> loader.apply(k));\n"
"           }\n"
"     })).build();\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1331
msgid "If the `quarkus-cache` extension is present in a Quarkus application then the `CacheSectionHelper` is registered and configured _automatically_. The name of the cache is `qute-cache`. It can be configured xref:cache.adoc#configuring-the-underlying-caching-provider[in a standard way] and even managed programmatically via `@Inject @CacheName(\"qute-cache\") Cache`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1333
msgid "Then, the `{#cached}` section can be used in a template:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1339
#, no-wrap
msgid ""
"{#cached} <1>\n"
" Result: {service.findResult} <2>\n"
"{/cached}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1341
msgid "If the `key` param is not used then all clients of the template share the same cached value."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1342
msgid "This part of the template will be cached and the `{service.findResult}` expression is only evaluated when a cache entry is missing/invalidated."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1348
#, no-wrap
msgid ""
"{#cached key=currentUser.username} <1>\n"
" User-specific result: {service.findResult(currentUser)}\n"
"{/cached}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1350
msgid "The `key` param is set and so a different cached value is used for each result of the `{currentUser.username}` expression."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1352
msgid "When using cache it's very often important to have the option to invalidate a cache entry by the specific key. In Qute the key of a cache entry is a `String` that consist of the template name, line and column of the starting `{#cached}` tag and the optional `key` parameter: `{TEMPLATE}:{LINE}:{COLUMN}_{KEY}`. For example, `foo.html:10:1_alpha` is a key for the cached section in a template `foo.html`, the `{#cached}` tag is placed on the line 10, column 1. And the optional `key` parameter resolves to `alpha`."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/qute-reference.adoc:1354
#, no-wrap
msgid "Rendering Output"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1360
msgid "`TemplateInstance` provides several ways to trigger the rendering and consume the result.  The most straightforward approach is represented by `TemplateInstance.render()`.  This method triggers a synchronous rendering, i.e. the current thread is blocked until the rendering is finished, and returns the output.  By contrast, `TemplateInstance.renderAsync()` returns a `CompletionStage<String>` which is completed when the rendering is finished."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:1361
#, no-wrap
msgid "`TemplateInstance.renderAsync()` Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1371
#, no-wrap
msgid ""
"template.data(foo).renderAsync().whenComplete((result, failure) -> { <1>\n"
"   if (failure == null) {\n"
"      // consume the output...\n"
"   } else {\n"
"      // process failure...\n"
"   }\n"
"};\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1373
msgid "Register a callback that is executed once the rendering is finished."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1378
msgid "There are also two methods that return https://smallrye.io/smallrye-mutiny/[Mutiny] types.  `TemplateInstance.createUni()` returns a new `Uni<String>` object.  If you call `createUni()` the template is not rendered right away.  Instead, every time `Uni.subscribe()` is called a new rendering of the template is triggered."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:1379
#, no-wrap
msgid "`TemplateInstance.createUni()` Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1383
#, no-wrap
msgid "template.data(foo).createUni().subscribe().with(System.out::println);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1389
msgid "`TemplateInstance.createMulti()` returns a new `Multi<String>` object.  Each item represents a part/chunk of the rendered template.  Again, `createMulti()` does not trigger rendering.  Instead, every time a computation is triggered by a subscriber the template is rendered again."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:1390
#, no-wrap
msgid "`TemplateInstance.createMulti()` Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1394
#, no-wrap
msgid "template.data(foo).createMulti().subscribe().with(buffer:append,buffer::flush);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1397
msgid "The template rendering is divided in two phases. During the first phase, which is asynchronous, all expressions in the template are resolved and a _result tree_ is built. In the second phase, which is synchronous, the result tree is _materialized_, i.e. one by one the result nodes emit chunks that are consumed/buffered by the specific consumer."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/qute-reference.adoc:1398
#, no-wrap
msgid "Engine Configuration"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/qute-reference.adoc:1401
#, no-wrap
msgid "Value Resolvers"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1405
msgid "Value resolvers are used when evaluating expressions.  A custom `io.quarkus.qute.ValueResolver` can be registered programmatically via `EngineBuilder.addValueResolver()`."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:1406
#, no-wrap
msgid "`ValueResolver` Builder Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1413
#, no-wrap
msgid ""
"engineBuilder.addValueResolver(ValueResolver.builder()\n"
"    .appliesTo(ctx -> ctx.getBase() instanceof Long && ctx.getName().equals(\"tenTimes\"))\n"
"    .resolveSync(ctx -> (Long) ctx.getBase() * 10)\n"
"    .build());\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/qute-reference.adoc:1416
#, no-wrap
msgid "Template Locator"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1421
msgid "A template can be either registered manually or automatically via a template locator.  The locators are used whenever the `Engine.getTemplate()` method is called, and the engine has no template for a given id stored in the cache.  The locator is responsible for using the correct character encoding when reading the contents of a template."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1424
msgid "In Quarkus, all templates from the `src/main/resources/templates` are located automatically and the encoding set via `quarkus.qute.default-charset` (UTF-8 by default) is used.  Custom locators can be xref:template-locator-registration[registered] by using the `@Locate` annotation."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/qute-reference.adoc:1425
#, no-wrap
msgid "Content Filters"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1428
msgid "Content filters can be used to modify the template contents before parsing."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:1429
#, no-wrap
msgid "Content Filter Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1438
#, no-wrap
msgid ""
"engineBuilder.addParserHook(new ParserHook() {\n"
"    @Override\n"
"    public void beforeParsing(ParserHelper parserHelper) {\n"
"        parserHelper.addContentFilter(contents -> contents.replace(\"${\", \"$\\\\{\")); <1>\n"
"    }\n"
"});\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1440
msgid "Escape all occurrences of `${`."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/qute-reference.adoc:1442
#, no-wrap
msgid "Strict Rendering"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1447
msgid "The strict rendering enables the developers to catch insidious errors caused by typos and invalid expressions.  If enabled then any expression that cannot be resolved, i.e. is evaluated to an instance of `io.quarkus.qute.Results.NotFound`, will always result in a `TemplateException` and the rendering is aborted.  A `NotFound` value is considered an error because it basically means that no value resolver was able to resolve the expression correctly."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1449
msgid "`null` is a valid value though. It is considered `falsy` as described in xref:if_section[If Section] and does not produce any output."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1452
msgid "Strict rendering is enabled by default.  However, you can disable this functionality via `io.quarkus.qute.EngineBuilder.strictRendering(boolean)`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1454
msgid "In Quarkus, a dedicated config property can be used instead: `quarkus.qute.strict-rendering`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1461
msgid "If you really need to use an expression which can potentially lead to a \"not found\" error, you can use _default values_ and _safe expressions_ in order to suppress the error.  A default value is used if the previous part of an expression cannot be resolved or resolves to `null`.  You can use the elvis operator to output the default value: `{foo.bar ?: 'baz'}`, which is effectively the same as the following virtual method: `{foo.bar.or('baz')}`.  A safe expression ends with the `??` suffix and results in `null` if the expression cannot be resolved.  It can be very useful e.g. in `{#if}` sections: `{#if valueNotFound??}Only rendered if valueNotFound is truthy!{/if}`.  In fact, `??` is just a shorthand notation for `.or(null)`, i.e. `{#if valueNotFound??}` becomes `{#if valueNotFound.or(null)}`."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/qute-reference.adoc:1463
#, no-wrap
msgid "Quarkus Integration"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1466
msgid "If you want to use Qute in your Quarkus application, add the following dependency to your project:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1473
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-qute</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1477
msgid "In Quarkus, a preconfigured engine instance is provided and available for injection - a bean with scope `@ApplicationScoped`, bean type `io.quarkus.qute.Engine` and qualifier `@Default` is registered automatically.  Moreover, all templates located in the `src/main/resources/templates` directory are validated and can be easily injected."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1483
#, no-wrap
msgid ""
"import io.quarkus.qute.Engine;\n"
"import io.quarkus.qute.Template;\n"
"import io.quarkus.qute.Location;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1485
#: upstream/_versions/3.2/guides/qute-reference.adoc:1509
#, no-wrap
msgid "class MyBean {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1488
#, no-wrap
msgid ""
"    @Inject \n"
"    Template items; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1491
#, no-wrap
msgid ""
"    @Location(\"detail/items2_v1.html\") <2>\n"
"    Template items2;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1495
#, no-wrap
msgid ""
"    @Inject\n"
"    Engine engine; <3>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1497
msgid "If there is no `Location` qualifier provided, the field name is used to locate the template. In this particular case, the container will attempt to locate a template with path `src/main/resources/templates/items.html`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1498
msgid "The `Location` qualifier instructs the container to inject a template from a path relative from `src/main/resources/templates`. In this case, the full path is `src/main/resources/templates/detail/items2_v1.html`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1499
msgid "Inject the configured `Engine` instance."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/qute-reference.adoc:1500
#, no-wrap
msgid "Engine Customization"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1503
msgid "Additional components can be registered manually via `EngineBuilder` methods in a CDI observer method at runtime:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1507
#, no-wrap
msgid "import io.quarkus.qute.EngineBuilder;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1520
#, no-wrap
msgid ""
"    void configureEngine(@Observes EngineBuilder builder) {\n"
"       // Add a custom section helper\n"
"       builder.addSectionHelper(new CustomSectionFactory());\n"
"       // Add a custom value resolver\n"
"       builder.addValueResolver(ValueResolver.builder()\n"
"                .appliesTo(ctx -> ctx.getBase() instanceof Long && ctx.getName().equals(\"tenTimes\"))\n"
"                .resolveSync(ctx -> (Long) ec.getBase() * 10)\n"
"                .build());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1524
msgid "However, in this particular case the section helper factory is ignored during validation at build time.  If you want to register a section that participates in validation of templates at build time then use the convenient `@EngineConfiguration` annotation:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1530
#, no-wrap
msgid ""
"import io.quarkus.qute.EngineConfiguration;\n"
"import io.quarkus.qute.SectionHelper;\n"
"import io.quarkus.qute.SectionHelperFactory;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1533
#, no-wrap
msgid ""
"@EngineConfiguration <1>\n"
"public class CustomSectionFactory implements SectionHelperFactory<CustomSectionFactory.CustomSectionHelper> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1536
#, no-wrap
msgid ""
"    @Inject\n"
"    Service service; <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1541
#, no-wrap
msgid ""
"    @Override\n"
"    public List<String> getDefaultAliases() {\n"
"        return List.of(\"custom\");\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1547
#, no-wrap
msgid ""
"    @Override\n"
"    public ParametersInfo getParameters() {\n"
"        // Param \"foo\" is required\n"
"        return ParametersInfo.builder().addParameter(\"foo\").build(); <3>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1553
#, no-wrap
msgid ""
"    @Override\n"
"    public Scope initializeBlock(Scope outerScope, BlockInfo block) {\n"
"        block.addExpression(\"foo\", block.getParameter(\"foo\"));\n"
"        return outerScope;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1559
#, no-wrap
msgid ""
"    @Override\n"
"    public CustomSectionHelper initialize(SectionInitContext context) {\n"
"        return new CustomSectionHelper();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1561
#, no-wrap
msgid "    class CustomSectionHelper implements SectionHelper {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1563
#, no-wrap
msgid "        private final Expression foo;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1567
#, no-wrap
msgid ""
"        public CustomSectionHelper(Expression foo) {\n"
"            this.foo = foo;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1574
#, no-wrap
msgid ""
"        @Override\n"
"        public CompletionStage<ResultNode> resolve(SectionResolutionContext context) {\n"
"            return context.evaluate(foo).thenApply(fooVal -> new SingleResultNode(service.getValueForFoo(fooVal))); <4>\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1576
msgid "A `SectionHelperFactory` annotated with `@EngineConfiguration` is used during validation of templates at build time and automatically registered at runtime (a) as a section factory and (b) as a CDI bean."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1577
msgid "A CDI bean instance is used at runtime - this means that the factory can define injection points"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1578
msgid "Validate that `foo` parameter is always present; e.g. `{#custom foo='bar' /}` is ok but `{#custom /}` results in a build failure."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1579
msgid "Use the injected `Service` during rendering."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1581
msgid "The `@EngineConfiguration` annotation can be also used to register ``ValueResolver``s and ``NamespaceResolver``s."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/qute-reference.adoc:1583
#, no-wrap
msgid "Template Locator Registration"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1587
msgid "The easiest way to register xref:template-locator[template locators] is to make them CDI beans.  As the custom locator is not available during the build time when a template validation is done, you need to disable the validation via the `@Locate` annotation."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:1588
#, no-wrap
msgid "Custom Locator Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1594
#, no-wrap
msgid ""
"@Locate(\"bar.html\") <1>\n"
"@Locate(\"foo.*\") <2>\n"
"public class CustomLocator implements TemplateLocator {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1597
#, no-wrap
msgid ""
"    @Inject <3>\n"
"    MyLocationService myLocationService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1600
#, no-wrap
msgid ""
"    @Override\n"
"    public Optional<TemplateLocation> locate(String templateId) {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1603
#, no-wrap
msgid ""
"        return myLocationService.getTemplateLocation(templateId);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1605
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1607
msgid "A template named `bar.html` is located by the custom locator at runtime."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1608
msgid "A regular expression `foo.*` disables validation for templates whose name is starting with `foo`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1609
msgid "Injection fields are resolved as template locators annotated with `@Locate` are registered as singleton session beans."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/qute-reference.adoc:1610
#, no-wrap
msgid "Template Variants"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1614
msgid "Sometimes it's useful to render a specific variant of the template based on the content negotiation.  This can be done by setting a special attribute via `TemplateInstance.setAttribute()`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1618
#, no-wrap
msgid "class MyService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1621
#, no-wrap
msgid ""
"    @Inject\n"
"    Template items; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1624
#, no-wrap
msgid ""
"    @Inject\n"
"    ItemManager manager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1629
#, no-wrap
msgid ""
"    String renderItems() {\n"
"       return items.data(\"items\",manager.findItems()).setAttribute(TemplateInstance.SELECTED_VARIANT, new Variant(Locale.getDefault(),\"text/html\",\"UTF-8\")).render();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1633
msgid "When using `quarkus-resteasy-qute` the content negotiation is performed automatically.  For more information, see the xref:resteasy_integration[RESTEasy Integration] section."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/qute-reference.adoc:1635
#, no-wrap
msgid "Injecting Beans Directly In Templates"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1638
msgid "A CDI bean annotated with `@Named` can be referenced in any template through `cdi` and/or `inject` namespaces:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1643
#, no-wrap
msgid ""
"{cdi:personService.findPerson(10).name} <1>\n"
"{inject:foo.price} <2>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1645
msgid "First, a bean with name `personService` is found and then used as the base object."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1646
msgid "First, a bean with name `foo` is found and then used as the base object."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1648
msgid "`@Named @Dependent` beans are shared across all expressions in a template for a single rendering operation, and destroyed after the rendering finished."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1650
msgid "All expressions with `cdi` and `inject` namespaces are validated during build."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1652
msgid "For the expression `cdi:personService.findPerson(10).name`, the implementation class of the injected bean must either declare the `findPerson` method or a matching xref:template_extension_methods[template extension method] must exist."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1654
msgid "For the expression `inject:foo.price`, the implementation class of the injected bean must either have the `price` property (e.g. a `getPrice()` method) or a matching xref:template_extension_methods[template extension method] must exist."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1656
msgid "A `ValueResolver` is also generated for all beans annotated with `@Named` so that it's possible to access its properties without reflection."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1658
msgid "If your application serves xref:http-reference.adoc[HTTP requests] you can also inject the current `io.vertx.core.http.HttpServerRequest` via the `inject` namespace, e.g. `{inject:vertxRequest.getParam('foo')}`."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/qute-reference.adoc:1660
#, no-wrap
msgid "Type-safe Expressions"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1665
msgid "Template expressions can be optionally type-safe.  Which means that an expression is validated against the existing Java types and template extension methods.  If an invalid/incorrect expression is found then the build fails."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1667
msgid "For example, if there is an expression `item.name` where `item` maps to `org.acme.Item` then `Item` must have a property `name` or a matching template extension method must exist."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1670
msgid "An optional _parameter declaration_ is used to bind a Java type to expressions whose first part matches the parameter name.  Parameter declarations are specified directly in a template."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1675
msgid "A Java type should be always identified with a _fully qualified name_ unless it's a JDK type from the `java.lang` package - in this case, the package name is optional.  Parameterized types are supported, however wildcards are always ignored - only the upper/lower bound is taken into account.  For example, the parameter declaration `{@java.util.List<? extends org.acme.Foo> list}` is recognized as `{@java.util.List<org.acme.Foo> list}`.  Type variables are not handled in a special way and should never be used."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:1676
#, no-wrap
msgid "Parameter Declaration Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1691
#, no-wrap
msgid ""
"{@org.acme.Foo foo} <1>\n"
"<!DOCTYPE html>\n"
"<html>\n"
"<head>\n"
"<meta charset=\"UTF-8\">\n"
"<title>Qute Hello</title>\n"
"</head>\n"
"<body>\n"
"  <h1>{title}</h1> <2>\n"
"  Hello {foo.message.toLowerCase}! <3> <4>\n"
"</body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1693
msgid "Parameter declaration - maps `foo` to `org.acme.Foo`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1694
msgid "Not validated - not matching a param declaration."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1695
msgid "This expression is validated. `org.acme.Foo` must have a property `message` or a matching template extension method must exist."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1696
msgid "Likewise, the Java type of the object resolved from `foo.message` must have a property `toLowerCase` or a matching template extension method must exist."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1698
msgid "A value resolver is automatically generated for all types used in parameter declarations so that it's possible to access its properties without reflection."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1700
msgid "Method parameters of xref:typesafe_templates[type-safe templates] are automatically turned into parameter declarations."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1702
msgid "Note that sections can override names that would otherwise match a parameter declaration:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1719
#, no-wrap
msgid ""
"{@org.acme.Foo foo}\n"
"<!DOCTYPE html>\n"
"<html>\n"
"<head>\n"
"<meta charset=\"UTF-8\">\n"
"<title>Qute Hello</title>\n"
"</head>\n"
"<body>\n"
"  <h1>{foo.message}</h1> <1>\n"
"  {#for foo in baz.foos}\n"
"    <p>Hello {foo.message}!</p> <2>\n"
"  {/for}\n"
"</body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1721
msgid "Validated against `org.acme.Foo`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1722
msgid "Not validated - `foo` is overridden in the loop section."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1726
msgid "A parameter declaration may specify the _default value_ after the key.  The key and the default value are separated by an equals sign: `{@int age=10}`.  The default value is used in the template if the parameter key resolves to `null` or is not found."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1729
msgid "For example, if there's a parameter declaration `{@String foo=\"Ping\"}` and `foo` is not found then you can use `{foo}` and the output will be `Ping`.  On the other hand, if the value is set (e.g. via `TemplateInstance.data(\"foo\", \"Pong\")`) then the output of `{foo}` will be `Pong`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1731
msgid "The type of a default value must be assignable to the type of the parameter declaration. For example, see the incorrect parameter declaration that results in a build failure: `{@org.acme.Foo foo=1}`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1734
msgid "The default value is actually an xref:expressions[expression]. So the default value does not have to be a literal (such as `42` or `true`). For example, you can leverage the `@TemplateEnum` and specify an enum constant as a default value of a parameter declaration: `{@org.acme.MyEnum myEnum=MyEnum:FOO}`.  However, the infix notation is not supported in default values unless the parentheses are used for grouping, e.g. `{@org.acme.Foo foo=(foo1 ?: foo2)}`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1736
msgid "The type of a default value is not validated in xref:standalone[Qute standalone]."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:1737
#, no-wrap
msgid "More Parameter Declarations Examples "
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1745
#, no-wrap
msgid ""
"{@int pages} <1>\n"
"{@java.util.List<String> strings} <2>\n"
"{@java.util.Map<String,? extends Number> numbers} <3>\n"
"{@java.util.Optional<?> param} <4>\n"
"{@String name=\"Quarkus\"} <5>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1747
msgid "A primitive type."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1748
msgid "`String` is replaced with `java.lang.String`: `{@java.util.List<java.lang.String> strings}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1749
msgid "The wildcard is ignored and the upper bound is used instead: `{@java.util.Map<String,Number>}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1750
msgid "The wildcard is ignored and the `java.lang.Object` is used instead: `{@java.util.Optional<java.lang.Object>}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1751
msgid "The type is `java.lang.String`, the key is `name` and the default value is `Quarkus`."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/qute-reference.adoc:1753
#, no-wrap
msgid "Type-safe Templates"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1756
msgid "You can also define type-safe templates in your Java code.  If using xref:resteasy_integration[templates in Jakarta REST resources], you can rely on the following convention:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1760
msgid "Organise your template files in the `/src/main/resources/templates` directory, by grouping them into one directory per resource class. So, if your `ItemResource` class references two templates `hello` and `goodbye`, place them at `/src/main/resources/templates/ItemResource/hello.txt` and `/src/main/resources/templates/ItemResource/goodbye.txt`. Grouping templates per resource class makes it easier to navigate to them."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1761
msgid "In each of your resource class, declare a `@CheckedTemplate static class Template {}` class within your resource class."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1762
msgid "Declare one `public static native TemplateInstance method();` per template file for your resource."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1763
msgid "Use those static methods to build your template instances."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:1764
#, no-wrap
msgid "ItemResource.java"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1768
#: upstream/_versions/3.2/guides/qute-reference.adoc:1809
#: upstream/_versions/3.2/guides/qute-reference.adoc:1828
#: upstream/_versions/3.2/guides/qute-reference.adoc:1861
#: upstream/_versions/3.2/guides/qute-reference.adoc:2473
#, no-wrap
msgid "package org.acme.quarkus.sample;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1774
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1778
#: upstream/_versions/3.2/guides/qute-reference.adoc:1813
#, no-wrap
msgid ""
"import io.quarkus.qute.TemplateInstance;\n"
"import io.quarkus.qute.Template;\n"
"import io.quarkus.qute.CheckedTemplate;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1781
#: upstream/_versions/3.2/guides/qute-reference.adoc:1869
#, no-wrap
msgid ""
"@Path(\"item\")\n"
"public class ItemResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1786
#, no-wrap
msgid ""
"    @CheckedTemplate\n"
"    public static class Templates {\n"
"        public static native TemplateInstance item(Item item); <1> <2>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1794
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"{id}\")\n"
"    @Produces(MediaType.TEXT_HTML)\n"
"    public TemplateInstance get(Integer id) {\n"
"        return Templates.item(service.findItem(id)); <3>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1796
msgid "Declare a method that gives us a `TemplateInstance` for `templates/ItemResource/item.html` and declare its `Item item` parameter so we can validate the template."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1797
msgid "The `item` parameter is automatically turned into a xref:typesafe_expressions[parameter declaration] and so all expressions that reference this name will be validated."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1798
msgid "Make the `Item` object accessible in the template."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1800
msgid "By default, the templates defined in a class annotated with `@CheckedTemplate` can only contain type-safe expressions, i.e. expressions that can be validated at build time. You can use `@CheckedTemplate(requireTypeSafeExpressions = false)` to relax this requirement."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/qute-reference.adoc:1801
#, no-wrap
msgid "Top-level Type-safe Templates"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1804
msgid "You can also declare a top-level Java class annotated with `@CheckedTemplate`:"
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:1805
#, no-wrap
msgid "Top-level checked templates"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1818
#, no-wrap
msgid ""
"@CheckedTemplate\n"
"public class Templates {\n"
"    public static native TemplateInstance hello(String name); <1>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1820
msgid "This declares a template with path `templates/hello.txt`. The `name` parameter is automatically turned into a xref:typesafe_expressions[parameter declaration], so that all expressions referencing this name will be validated."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1823
msgid "Then declare one `public static native TemplateInstance method();` per template file.  Use those static methods to build your template instances:"
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:1824
#: upstream/_versions/3.2/guides/qute-reference.adoc:2469
#, no-wrap
msgid "HelloResource.java"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1835
#: upstream/_versions/3.2/guides/qute-reference.adoc:2480
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.QueryParam;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1837
#, no-wrap
msgid "import io.quarkus.qute.TemplateInstance;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1840
#: upstream/_versions/3.2/guides/qute-reference.adoc:2486
#, no-wrap
msgid ""
"@Path(\"hello\")\n"
"public class HelloResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1847
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public TemplateInstance get(@QueryParam(\"name\") String name) {\n"
"        return Templates.hello(name);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/qute-reference.adoc:1849
#, no-wrap
msgid "Customized Template Path"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1856
msgid "The template path of a `@CheckedTemplate` method consists of the _base path_ and a _defaulted name_.  The _base path_ is supplied by the `@CheckedTemplate#basePath()`.  By default, the simple name of the declaring class for a nested static class or an empty string for a top level class is used.  The _defaulted name_ is derived by the strategy specified in `@CheckedTemplate#defaultName()`.  By default, the name of the `@CheckedTemplate` method is used as is."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:1857
#, no-wrap
msgid "Customized Template Path Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1863
#, no-wrap
msgid "import jakarta.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1866
#, no-wrap
msgid ""
"import io.quarkus.qute.TemplateInstance;\n"
"import io.quarkus.qute.CheckedTemplate;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1875
#, no-wrap
msgid ""
"    @CheckedTemplate(basePath = \"items\", defaultName = CheckedTemplate.HYPHENATED_ELEMENT_NAME)\n"
"    static class Templates {\n"
"        static native TemplateInstance itemAndOrder(Item item); <1>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1877
msgid "The template path for this method will be `items/item-and-order`."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/qute-reference.adoc:1879
#, no-wrap
msgid "Type-safe Fragments"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1887
msgid "You can also define a type-safe xref:fragments[fragment] in your Java code.  A _native static_ method with the name that contains a dollar sign `$` denotes a method that represents a fragment of a type-safe template.  The name of the fragment is derived from the annotated method name.  The part before the last occurence of a dollar sign `$` is the method name of the related type-safe template.  The part after the last occurence of a dollar sign is the fragment identifier.  The strategy defined by the relevant `CheckedTemplate#defaultName()` is honored when constructing the defaulted names."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:1888
#, no-wrap
msgid "Type-safe Fragment Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1893
#, no-wrap
msgid ""
"import io.quarkus.qute.CheckedTemplate;\n"
"import org.acme.Item;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1896
#, no-wrap
msgid ""
"@CheckedTemplate\n"
"class Templates {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1899
#, no-wrap
msgid ""
"  // defines a type-safe template\n"
"  static native TemplateInstance items(List<Item> items);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1903
#, no-wrap
msgid ""
"  // defines a fragment of Templates#items() with identifier \"item\"\n"
"  static native TemplateInstance items$item(Item item); <1>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1905
msgid "Quarkus validates at build time that each template that corresponds to the `Templates#items()` contains a fragment with identifier `item`. Moreover, the parameters of the fragment method are validated too. In general, all type-safe expressions that are found in the fragment and that reference some data from the original/outer template require a specific parameter to be present."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:1906
#, no-wrap
msgid "Fragment Definition in `items.html`"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1917
#, no-wrap
msgid ""
"<h1>Items</h1>\n"
"<ol>\n"
"    {#for item in items}\n"
"    {#fragment id=item}   <1>\n"
"    <li>{item.name}</li>  <2>\n"
"    {/fragment}\n"
"    {/for}\n"
"</ol>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1919
msgid "Defines a fragment with identifier `item`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1920
msgid "The `{item.name}` expression implies that the `Templates#items$item()` method must declare a parameter of name `item` and type `org.acme.Item`."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:1921
#, no-wrap
msgid "Type-safe Fragment Call Site Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1925
#, no-wrap
msgid "class ItemService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1931
#, no-wrap
msgid ""
"  String renderItem(Item item) {\n"
"     // this would return something like \"<li>Foo</li>\"\n"
"     return Templates.items$item(item).render();\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1934
msgid "You can specify `@CheckedTemplate#ignoreFragments=true` in order to disable this feature, i.e. a dollar sign `$` in the method name will not result in a checked fragment method."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/qute-reference.adoc:1936
#, no-wrap
msgid "Template Extension Methods"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1940
msgid "Extension methods can be used to extend the data classes with new functionality (to extend the set of accessible properties and methods) or to resolve expressions for a specific xref:namespace_extension_methods[namespace].  For example, it is possible to add _computed properties_ and _virtual methods_."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1945
msgid "A value resolver is automatically generated for a method annotated with `@TemplateExtension`.  If a class is annotated with `@TemplateExtension` then a value resolver is generated for every _non-private static method_ declared on the class.  Method-level annotations override the behavior defined on the class.  Methods that do not meet the following requirements are ignored."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1947
msgid "A template extension method:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1949
msgid "must not be `private`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1950
msgid "must be static,"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1951
msgid "must not return `void`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1953
msgid "If there is no namespace defined the class of the first parameter that is not annotated with `@TemplateAttribute` is used to match the base object. Otherwise, the namespace is used to match an expression."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/qute-reference.adoc:1954
#, no-wrap
msgid "Matching by Name"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1957
msgid "The method name is used to match the property name by default."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:1958
#, no-wrap
msgid "Extension Method Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1962
#: upstream/_versions/3.2/guides/qute-reference.adoc:2224
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1964
#, no-wrap
msgid "class Item {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1966
#: upstream/_versions/3.2/guides/qute-reference.adoc:2229
#: upstream/_versions/3.2/guides/qute-reference.adoc:2260
#, no-wrap
msgid "    public final BigDecimal price;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1971
#: upstream/_versions/3.2/guides/qute-reference.adoc:2265
#, no-wrap
msgid ""
"    public Item(BigDecimal price) {\n"
"        this.price = price;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1974
#, no-wrap
msgid ""
"@TemplateExtension\n"
"class MyExtensions {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1979
#, no-wrap
msgid ""
"    static BigDecimal discountedPrice(Item item) { <1>\n"
"        return item.getPrice().multiply(new BigDecimal(\"0.9\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1981
msgid "This method matches an expression with base object of the type `Item.class` and the `discountedPrice` property name."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1983
msgid "This template extension method makes it possible to render the following template:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:1987
#, no-wrap
msgid "{item.discountedPrice} <1>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1989
msgid "`item` is resolved to an instance of `org.acme.Item`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:1991
msgid "However, it is possible to specify the matching name with `matchName()`."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:1992
#, no-wrap
msgid "`TemplateExtension#matchName()` Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2000
#, no-wrap
msgid ""
"@TemplateExtension(matchName = \"discounted\")\n"
"static BigDecimal discountedPrice(Item item) {\n"
"   // this method matches {item.discounted} if \"item\" resolves to an object assignable to \"Item\"\n"
"   return item.getPrice().multiply(new BigDecimal(\"0.9\"));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2003
msgid "A special constant - `TemplateExtension#ANY`/`*` - can be used to specify that the extension method matches any name."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:2004
#, no-wrap
msgid "`TemplateExtension#ANY` Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2012
#, no-wrap
msgid ""
"@TemplateExtension(matchName = \"*\")\n"
"static String itemProperty(Item item, String name) { <1>\n"
"   // this method matches {item.foo} if \"item\" resolves to an object assignable to \"Item\"\n"
"   // the value of the \"name\" argument is \"foo\"\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2014
#: upstream/_versions/3.2/guides/qute-reference.adoc:2027
msgid "A additional string method parameter is used to pass the actual property name."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2016
msgid "It's also possible to match the name against a regular expression specified in `matchRegex()`."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:2017
#, no-wrap
msgid "`TemplateExtension#matchRegex()` Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2025
#, no-wrap
msgid ""
"@TemplateExtension(matchRegex = \"foo|bar\")\n"
"static String itemProperty(Item item, String name) { <1>\n"
"   // this method matches {item.foo} and {item.bar} if \"item\" resolves to an object assignable to \"Item\"\n"
"   // the value of the \"name\" argument is \"foo\" or \"bar\"\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2030
msgid "Finally, `matchNames()` can be used to specify a collection of matching names.  An additional string method parameter is mandatory as well."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:2032
#, no-wrap
msgid "`TemplateExtension#matchNames()` Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2040
#, no-wrap
msgid ""
"@TemplateExtension(matchNames = {\"foo\", \"bar\"})\n"
"static String itemProperty(Item item, String name) {\n"
"   // this method matches {item.foo} and {item.bar} if \"item\" resolves to an object assignable to \"Item\"\n"
"   // the value of the \"name\" argument is \"foo\" or \"bar\"\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2044
msgid "Superfluous matching conditions are ignored. The conditions sorted by priority in descending order are: `matchRegex()`, `matchNames()` and `matchName()`."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/qute-reference.adoc:2045
#, no-wrap
msgid "Method Parameters"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2052
msgid "An extension method may declare parameters.  If no namespace is specified then the first parameter that is not annotated with `@TemplateAttribute` is used to pass the base object, i.e. `org.acme.Item` in the first example.  If matching any name or using a regular expression, then a string method parameter needs to be used to pass the property name.  Parameters annotated with `@TemplateAttribute` are obtained via `TemplateInstance#getAttribute()`.  All other parameters are resolved when rendering the template and passed to the extension method."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:2053
#, no-wrap
msgid "Multiple Parameters Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2058
#, no-wrap
msgid ""
"@TemplateExtension\n"
"class BigDecimalExtensions {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2063
#, no-wrap
msgid ""
"    static BigDecimal scale(BigDecimal val, int scale, RoundingMode mode) { <1>\n"
"        return val.setScale(scale, mode);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2065
msgid "This method matches an expression with base object of the type `BigDecimal.class`, with the `scale` virtual method name and two virtual method parameters."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2069
#, no-wrap
msgid "{item.discountedPrice.scale(2,mode)} <1>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2071
msgid "`item.discountedPrice` is resolved to an instance of `BigDecimal`."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/qute-reference.adoc:2073
#, no-wrap
msgid "Namespace Extension Methods"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2078
msgid "If `TemplateExtension#namespace()` is specified then the extension method is used to resolve expressions with the given xref:expressions[namespace].  Template extension methods that share the same namespace are grouped in one resolver ordered by `TemplateExtension#priority()`.  The first matching extension method is used to resolve an expression."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:2079
#, no-wrap
msgid "Namespace Extension Method Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2084
#, no-wrap
msgid ""
"@TemplateExtension(namespace = \"str\")\n"
"public class StringExtensions {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2088
#, no-wrap
msgid ""
"   static String format(String fmt, Object... args) {\n"
"      return String.format(fmt, args);\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2093
#, no-wrap
msgid ""
"   static String reverse(String val) {\n"
"      return new StringBuilder(val).reverse().toString();\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2096
msgid "These extension methods can be used as follows."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2101
#, no-wrap
msgid ""
"{str:format('%s %s!','Hello', 'world')} <1>\n"
"{str:reverse('hello')} <2>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2103
msgid "The output is `Hello world!`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2104
msgid "The output is `olleh`"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/qute-reference.adoc:2106
#, no-wrap
msgid "Built-in Template Extensions"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2109
msgid "Quarkus provides a set of built-in extension methods."
msgstr ""

#. type: Title =====
#: upstream/_versions/3.2/guides/qute-reference.adoc:2110
#, no-wrap
msgid "Maps"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2113
msgid "`keys` or `keySet`: Returns a Set view of the keys contained in a map"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2114
msgid "`{#for key in map.keySet}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2116
msgid "`values`: Returns a Collection view of the values contained in a map"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2117
msgid "`{#for value in map.values}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2119
msgid "`size`: Returns the number of key-value mappings in a map"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2120
msgid "`{map.size}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2122
msgid "`isEmpty`: Returns true if a map contains no key-value mappings"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2123
msgid "`{#if map.isEmpty}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2125
msgid "`get(key)`: Returns the value to which the specified key is mapped"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2126
msgid "`{map.get('foo')}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2128
msgid "A map value can be also accessed directly: `{map.myKey}`. Use the bracket notation for keys that are not legal identifiers: `{map['my key']}`."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/qute-reference.adoc:2129
#, no-wrap
msgid "Lists"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2132
msgid "`get(index)`: Returns the element at the specified position in a list"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2133
msgid "`{list.get(0)}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2135
msgid "`reversed`: Returns a reversed iterator over a list"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2136
msgid "`{#for r in recordsList.reversed}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2138
msgid "`take`: Returns the first `n` elements from the given list; throws an `IndexOutOfBoundsException` if `n` is out of range"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2139
msgid "`{#for r in recordsList.take(3)}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2141
msgid "`takeLast`: Returns the last `n` elements from the given list; throws an `IndexOutOfBoundsException` if `n` is out of range"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2142
msgid "`{#for r in recordsList.takeLast(3)}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2144
msgid "`first`: Returns the first element of the given list; throws an `NoSuchElementException` if the list is empty"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2145
msgid "`{recordsList.first}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2147
msgid "`last`: Returns the last element of the given list; throws an `NoSuchElementException` if the list is empty"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2148
msgid "`{recordsList.last}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2150
msgid "A list element can be accessed directly via an index: `{list.10}` or even `{list[10]}`."
msgstr ""

#. type: Title =====
#: upstream/_versions/3.2/guides/qute-reference.adoc:2151
#, no-wrap
msgid "Integer Numbers"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2154
msgid "`mod`: Modulo operation"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2155
msgid "`{#if counter.mod(5) == 0}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2156
msgid "`plus` or `+`: Addition"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2157
msgid "`{counter + 1}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2158
msgid "`{age plus 10}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2159
msgid "`{age.plus(10)}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2160
msgid "`minus` or `-`: Subtraction"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2161
msgid "`{counter - 1}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2162
msgid "`{age minus 10}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2163
msgid "`{age.minus(10)}`"
msgstr ""

#. type: Title =====
#: upstream/_versions/3.2/guides/qute-reference.adoc:2164
#, no-wrap
msgid "Strings"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2167
msgid "`fmt` or `format`: Formats the string instance via `java.lang.String.format()`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2168
msgid "`{myStr.fmt(\"arg1\",\"arg2\")}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2169
msgid "`{myStr.format(locale,arg1)}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2170
msgid "`str:fmt` or `str:format`: Formats the supplied string value via `java.lang.String.format()`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2171
msgid "`{str:format(\"Hello %s!\",name)}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2172
msgid "`{str:fmt(locale,'%tA',now)}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2173
msgid "`+`: Concatenation"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2174
msgid "`{item.name + '_' + mySuffix}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2175
msgid "`{name + 10}`"
msgstr ""

#. type: Title =====
#: upstream/_versions/3.2/guides/qute-reference.adoc:2176
#, no-wrap
msgid "Config "
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2179
msgid "`config:<name>` or `config:[<name>]`: Returns the config value for the given property name"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2180
msgid "`{config:foo}` or `{config:['property.with.dot.in.name']}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2182
msgid "`config:property(name)`: Returns the config value for the given property name; the name can be obtained dynamically by an expression"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2183
msgid "`{config:property('quarkus.foo')}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2184
msgid "`{config:property(foo.getPropertyName())}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2186
msgid "`config:boolean(name)`: Returns the config value for the given property name as a boolean; the name can be obtained dynamically by an expression"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2187
msgid "`{config:boolean('quarkus.foo.boolean') ?: 'Not Found'}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2188
msgid "`{config:boolean(foo.getPropertyName()) ?: 'property is false'}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2190
msgid "`config:integer(name)`: Returns the config value for the given property name as an integer; the name can be obtained dynamically by an expression"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2191
msgid "`{config:integer('quarkus.foo')}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2192
msgid "`{config:integer(foo.getPropertyName())}`"
msgstr ""

#. type: Title =====
#: upstream/_versions/3.2/guides/qute-reference.adoc:2193
#, no-wrap
msgid "Time"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2196
msgid "`format(pattern)`: Formats temporal objects from the `java.time` package"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2197
msgid "`{dateTime.format('d MMM uuuu')}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2199
msgid "`format(pattern,locale)`: Formats temporal objects from the `java.time` package"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2200
msgid "`{dateTime.format('d MMM uuuu',myLocale)}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2202
msgid "`format(pattern,locale,timeZone)`: Formats temporal objects from the `java.time` package"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2203
msgid "`{dateTime.format('d MMM uuuu',myLocale,myTimeZoneId)}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2205
msgid "`time:format(dateTime,pattern)`: Formats temporal objects from the `java.time` package, `java.util.Date`, `java.util.Calendar` and `java.lang.Number`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2206
msgid "`{time:format(myDate,'d MMM uuuu')}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2208
msgid "`time:format(dateTime,pattern,locale)`: Formats temporal objects from the `java.time` package, `java.util.Date`, `java.util.Calendar` and `java.lang.Number`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2209
msgid "`{time:format(myDate,'d MMM uuuu', myLocale)}`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2211
msgid "`time:format(dateTime,pattern,locale,timeZone)`: Formats temporal objects from the `java.time` package, `java.util.Date`, `java.util.Calendar` and `java.lang.Number`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2212
msgid "`{time:format(myDate,'d MMM uuuu',myLocale,myTimeZoneId)}`"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/qute-reference.adoc:2214
#, no-wrap
msgid "@TemplateData"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2218
msgid "A value resolver is automatically generated for a type annotated with `@TemplateData`.  This allows Quarkus to avoid using reflection to access the data at runtime."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2220
msgid "Non-public members, constructors, static initializers, static, synthetic and void methods are always ignored."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2227
#, no-wrap
msgid ""
"@TemplateData\n"
"class Item {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2233
#, no-wrap
msgid ""
"    public Item(BigDecimal price) {\n"
"        this.price = price;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2238
#, no-wrap
msgid ""
"    public BigDecimal getDiscountedPrice() {\n"
"        return price.multiply(new BigDecimal(\"0.9\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2241
msgid "Any instance of `Item` can be used directly in the template:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2247
#, no-wrap
msgid ""
"{#each items} <1>\n"
"  {it.price} / {it.discountedPrice}\n"
"{/each}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2249
msgid "`items` is resolved to a list of `org.acme.Item` instances."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2252
msgid "Furthermore, `@TemplateData.properties()` and `@TemplateData.ignore()` can be used to fine-tune the generated resolver.  Finally, it is also possible to specify the \"target\" of the annotation - this could be useful for third-party classes not controlled by the application:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2258
#, no-wrap
msgid ""
"@TemplateData(target = BigDecimal.class)\n"
"@TemplateData\n"
"class Item {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2272
#, no-wrap
msgid ""
"{#each items}\n"
"  {it.price.setScale(2, rounding)} <1>\n"
"{/each}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2274
msgid "The generated value resolver knows how to invoke the `BigDecimal.setScale()` method."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/qute-reference.adoc:2275
#, no-wrap
msgid "Accessing Static Fields and Methods"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2282
msgid "If `@TemplateData#namespace()` is set to a non-empty value then a namespace resolver is automatically generated to access the public static fields and methods of the target class.  By default, the namespace is the FQCN of the target class where dots and dollar signs are replaced by underscores.  For example, the namespace for a class with name `org.acme.Foo` is `org_acme_Foo`.  The static field `Foo.AGE` can be accessed via `{org_acme_Foo:AGE}`.  The static method `Foo.computeValue(int number)` can be accessed via `{org_acme_Foo:computeValue(10)}`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2284
msgid "A namespace can only consist of alphanumeric characters and underscores."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:2285
#, no-wrap
msgid "Class Annotated With `@TemplateData`"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2289
#: upstream/_versions/3.2/guides/qute-reference.adoc:2316
#, no-wrap
msgid "package model;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2295
#, no-wrap
msgid ""
"@TemplateData <1>\n"
"public class Statuses {\n"
"    public static final String ON = \"on\";\n"
"    public static final String OFF = \"off\";\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2297
msgid "A name resolver with the namespace `model_Status` is generated automatically."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:2298
#, no-wrap
msgid "Template Accessing Class Constants"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2304
#, no-wrap
msgid ""
"{#if machine.status == model_Status:ON}\n"
"  The machine is ON!\n"
"{/if}\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/qute-reference.adoc:2307
#, no-wrap
msgid "Convenient Annotation For Enums"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2311
msgid "There's also a convenient annotation to access enum constants: `@io.quarkus.qute.TemplateEnum`.  This annotation is functionally equivalent to `@TemplateData(namespace = TemplateData.SIMPLENAME)`, i.e. a namespace resolver is automatically generated for the target enum and the simple name of the target enum is used as the namespace."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:2312
#, no-wrap
msgid "Enum Annotated With `@TemplateEnum`"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2322
#, no-wrap
msgid ""
"@TemplateEnum <1>\n"
"public enum Status {\n"
"    ON,\n"
"    OFF\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2324
msgid "A name resolver with the namespace `Status` is generated automatically."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2326
msgid "`@TemplateEnum` declared on a non-enum class is ignored. Also, if an enum also declares the `@TemplateData` annotation, then the `@TemplateEnum` annotation is ignored."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:2327
#, no-wrap
msgid "Template Accessing Enum Constants"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2333
#, no-wrap
msgid ""
"{#if machine.status == Status:ON}\n"
"  The machine is ON!\n"
"{/if}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2336
msgid "Quarkus detects possible namespace collisions and fails the build if a specific namespace is defined by multiple `@TemplateData` and/or `@TemplateEnum` annotations."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/qute-reference.adoc:2338
#, no-wrap
msgid "Global Variables"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2342
msgid "The `io.quarkus.qute.TemplateGlobal` annotation can be used to denote static fields and methods that supply _global variables_ which are accessible in any template.  Internally, each global variable is added to the data map of any `TemplateInstance` via the `TemplateInstance#data(String, Object)` method."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:2343
#, no-wrap
msgid "Global Variables Definition"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2347
#, no-wrap
msgid "enum Color { RED, GREEN, BLUE }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2350
#, no-wrap
msgid ""
"@TemplateGlobal <1>\n"
"public class Globals {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2352
#, no-wrap
msgid "    static int age = 40;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2356
#, no-wrap
msgid ""
"    static Color[] myColors() {\n"
"      return new Color[] { Color.RED, Color.BLUE };\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2362
#, no-wrap
msgid ""
"    @TemplateGlobal(name = \"currentUser\") <2>\n"
"    static String user() {\n"
"       return \"Mia\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2364
msgid "If a class is annotated with `@TemplateGlobal` then every non-void non-private static method that declares no parameters and every non-private static field is considered a global variable. The name is defaulted, i.e. the name of the field/method is used."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2365
msgid "Method-level annotations override the class-level annotation. In this particular case, the name is not defaulted but selected explicitly."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:2366
#, no-wrap
msgid "A Template Accessing Global Variables"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2372
#, no-wrap
msgid ""
"User: {currentUser} <1>\n"
"Age:  {age} <2>\n"
"Colors: {#each myColors}{it}{#if it_hasNext}, {/if}{/each} <3>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2374
msgid "`currentUser` resolves to `Globals#user()`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2375
msgid "`age` resolves to `Globals#age`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2376
msgid "`myColors` resolves to `Globals#myColors()`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2378
msgid "Note that global variables implicitly add xref:typesafe_expressions[parameter declarations] to all templates and so any expression that references a global variable is validated during build."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:2379
#, no-wrap
msgid "The Output"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2385
#, no-wrap
msgid ""
"User: Mia\n"
"Age:  40\n"
"Colors: RED, BLUE\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/qute-reference.adoc:2387
#, no-wrap
msgid "Resolving Conflicts"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2392
msgid "Global variables may conflict with regular data objects.  xref:typesafe_templates[Type-safe templates] override the global variables automatically.  For example, the following definition overrides the global variable supplied by the `Globals#user()` method:"
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:2393
#, no-wrap
msgid "Type-safe Template Definition"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2397
#, no-wrap
msgid "import org.acme.User;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2402
#, no-wrap
msgid ""
"@CheckedTemplate\n"
"public class Templates {\n"
"    static native TemplateInstance hello(User currentUser); <1>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2404
msgid "`currentUser` conflicts with the global variable supplied by `Globals#user()`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2406
msgid "So the corresponding template does not result in a validation error even though the `Globals#user()` method returns `java.lang.String` which does not have the `name` property:"
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:2407
#, no-wrap
msgid "`templates/hello.txt`"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2411
#, no-wrap
msgid "User name: {currentUser.name} <1>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2413
msgid "`org.acme.User` has the `name` property."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2415
msgid "For other templates an explicit parameter declaration is needed:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2419
#, no-wrap
msgid "{@org.acme.User currentUser} <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2421
#, no-wrap
msgid "User name: {currentUser.name}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2423
msgid "This parameter declaration overrides the declaration added by the global variable supplied by the `Globals#user()` method."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/qute-reference.adoc:2426
#, no-wrap
msgid "Native Executables"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2431
msgid "In the JVM mode a reflection-based value resolver may be used to access properties and call methods of the model classes.  But this does not work for xref:building-native-image.adoc[a native executable] out of the box.  As a result, you may encounter template exceptions like `Property \"name\" not found on the base object \"org.acme.Foo\" in expression {foo.name} in template hello.html` even if the `Foo` class declares a relevant getter method."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2433
msgid "There are several ways to solve this problem:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2435
msgid "Make use of xref:typesafe_templates[type-safe templates] or xref:typesafe_expressions[type-safe expressions]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2436
msgid "In this case, an optimized value resolver is generated automatically and used at runtime"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2437
msgid "This is the preferred solution"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2438
msgid "Annotate the model class with xref:template_data[`@TemplateData`] - a specialized value resolver is generated and used at runtime"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2439
msgid "Annotate the model class with `@io.quarkus.runtime.annotations.RegisterForReflection` to make the reflection-based value resolver work"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/qute-reference.adoc:2442
#, no-wrap
msgid "RESTEasy Integration"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2446
msgid "If you want to use Qute in your Jakarta REST application, then depending on which Jakarta REST stack you are using, you'll need to register the proper extension first.  If you are using the traditional `quakus-resteasy` extension, then in your `pom.xml` file, add:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2453
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-qute</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2456
msgid "If instead you are using RESTEasy Reactive via the `quarkus-resteasy-reactive` extension, then in your `pom.xml` file, add:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2463
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-reactive-qute</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2466
msgid "Both of these extensions register a special `ContainerResponseFilter` implementation which enables resource methods to return a `TemplateInstance`, thus freeing users of having to take care of all necessary internal steps."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2468
msgid "The end result is that a using Qute within a Jakarta REST resource may look as simple as:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2483
#, no-wrap
msgid ""
"import io.quarkus.qute.TemplateInstance;\n"
"import io.quarkus.qute.Template;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2489
#, no-wrap
msgid ""
"    @Inject\n"
"    Template hello; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2496
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public TemplateInstance get(@QueryParam(\"name\") String name) {\n"
"        return hello.data(\"name\", name); <2> <3>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2499
msgid "If there is no `@Location` qualifier provided, the field name is used to locate the template.  In this particular case, we're injecting a template with path `templates/hello.txt`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2502
msgid "`Template.data()` returns a new template instance that can be customized before the actual rendering is triggered.  In this case, we put the name value under the key `name`.  The data map is accessible during rendering."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2503
msgid "Note that we don't trigger the rendering - this is done automatically by a special `ContainerResponseFilter` implementation."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2505
msgid "Users are encouraged to use xref:typesafe_templates[Type-safe templates] that help to organize the templates for a specific Jakarta REST resource and enable xref:typesafe_expressions[type-safe expressions] automatically."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2508
msgid "The content negotiation is performed automatically.  The resulting output depends on the `Accept` header received from the client."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2513
#: upstream/_versions/3.2/guides/qute-reference.adoc:2534
#, no-wrap
msgid ""
"@Path(\"/detail\")\n"
"class DetailResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2516
#, no-wrap
msgid ""
"    @Inject\n"
"    Template item; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2523
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces({ MediaType.TEXT_HTML, MediaType.TEXT_PLAIN })\n"
"    public TemplateInstance item() {\n"
"        return item.data(\"myItem\", new Item(\"Alpha\", 1000)); <2>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2525
msgid "Inject a variant template with base path derived from the injected field - `src/main/resources/templates/item`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2526
msgid "For `text/plain` the `src/main/resources/templates/item.txt` template is used. For `text/html` the `META-INF/resources/templates/item.html` template is used."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2528
msgid "The `RestTemplate` util class can be used to obtain a template instance from a body of a Jakarta REST resource method:"
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:2529
#, no-wrap
msgid "RestTemplate Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2541
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces({ MediaType.TEXT_HTML, MediaType.TEXT_PLAIN })\n"
"    public TemplateInstance item() {\n"
"        return RestTemplate.data(\"myItem\", new Item(\"Alpha\", 1000)); <1>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2543
msgid "The name of the template is derived from the resource class and method name; `DetailResource/item` in this particular case."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2545
msgid "Unlike with `@Inject` the templates obtained via `RestTemplate` are not validated, i.e. the build does not fail if a template does not exist."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/qute-reference.adoc:2546
#, no-wrap
msgid "Development Mode"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2549
msgid "In the development mode, all files located in `src/main/resources/templates` are watched for changes and modifications are immediately visible."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/qute-reference.adoc:2551
#, no-wrap
msgid "Type-safe Message Bundles"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/qute-reference.adoc:2553
#, no-wrap
msgid "Basic Concepts"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2558
msgid "The basic idea is that every message is potentially a very simple template.  In order to prevent type errors, a message is defined as an annotated method of a *message bundle interface*.  Quarkus generates the *message bundle implementation* at build time."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:2559
#, no-wrap
msgid "Message Bundle Interface Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2564
#: upstream/_versions/3.2/guides/qute-reference.adoc:2753
#, no-wrap
msgid ""
"import io.quarkus.qute.i18n.Message;\n"
"import io.quarkus.qute.i18n.MessageBundle;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2567
#, no-wrap
msgid ""
"@MessageBundle <1>\n"
"public interface AppMessages {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2571
#, no-wrap
msgid ""
"    @Message(\"Hello {name}!\") <2>\n"
"    String hello_name(String name); <3>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2573
msgid "Denotes a message bundle interface. The bundle name is defaulted to `msg` and is used as a namespace in templates expressions, e.g. `{msg:hello_name}`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2574
msgid "Each method must be annotated with `@Message`. The value is a qute template. If no value is provided, then a corresponding value from a localized file is taken. If no such file exists, an exception is thrown and the build fails."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2575
msgid "The method parameters can be used in the template."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2577
msgid "The message bundles can be used at runtime:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2579
msgid "Directly in your code via `io.quarkus.qute.i18n.MessageBundles#get()`; e.g. `MessageBundles.get(AppMessages.class).hello_name(\"Lucie\")`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2580
msgid "Injected in your beans via `@Inject`; e.g. `@Inject AppMessages`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2581
msgid "Referenced in the templates via the message bundle namespace:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2586
#, no-wrap
msgid ""
" {msg:hello_name('Lucie')} <1> <2> <3>\n"
" {msg:message(myKey,'Lu')} <4>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2588
msgid "`msg` is the default namespace."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2589
msgid "`hello_name` is the message key."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2590
msgid "`Lucie` is the parameter of the message bundle interface method."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2591
msgid "It is also possible to obtain a localized message for a key resolved at runtime using a reserved key `message`. The validation is skipped in this case though."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/qute-reference.adoc:2593
#, no-wrap
msgid "Default Bundle Name"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2599
msgid "The bundle name is defaulted unless it's specified with `@MessageBundle#value()`.  For a top-level class the `msg` value is used by default.  For a nested class the name consists of the simple names of all enclosing classes in the hierarchy (top-level class goes first), followed by the simple name of the message bundle interface.  Names are separated by underscores."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2601
msgid "For example, the name of the following message bundle will be defaulted to `Controller_index`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2605
#, no-wrap
msgid "class Controller {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2608
#, no-wrap
msgid ""
"    @MessageBundle\n"
"    interface index {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2613
#, no-wrap
msgid ""
"        @Message(\"Hello {name}!\")\n"
"        String hello(String name); <1>\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2615
msgid "This message could be used in a template via `{Controller_index:hello(name)}`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2617
msgid "The bundle name is also used as a part of the name of a localized file, e.g. `Controller_index` in the `Controller_index_de.properties`."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/qute-reference.adoc:2618
#, no-wrap
msgid "Bundle Name and Message Keys"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2626
msgid "Message keys are used directly in templates.  The bundle name is used as a namespace in template expressions.  The `@MessageBundle` can be used to define the default strategy used to generate message keys from method names.  However, the `@Message` can override this strategy and even define a custom key.  By default, the annotated element's name is used as-is.  Other possibilities are:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2628
msgid "De-camel-cased and hyphenated; e.g. `helloName()` -> `hello-name`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2629
msgid "De-camel-cased and parts separated by underscores; e.g. `helloName()` -> `hello_name`."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/qute-reference.adoc:2630
#, no-wrap
msgid "Validation"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2633
msgid "All message bundle templates are validated:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2634
msgid "All expressions without a namespace must map to a parameter; e.g. `Hello {foo}` -> the method must have a param of name `foo`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2635
msgid "All expressions are validated against the types of the parameters; e.g. `Hello {foo.bar}` where the parameter `foo` is of type `org.acme.Foo` -> `org.acme.Foo` must have a property of name `bar`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2637
msgid "A warning message is logged for each _unused_ parameter."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2638
msgid "Expressions that reference a message bundle method, such as `{msg:hello(item.name)}`, are validated too."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/qute-reference.adoc:2639
#, no-wrap
msgid "Localization"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2644
msgid "The default locale specified via the `quarkus.default-locale` config property is used for the `@MessageBundle` interface by default.  However, the `io.quarkus.qute.i18n.MessageBundle#locale()` can be used to specify a custom locale.  Additionally, there are two ways to define a localized bundle:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2646
msgid "Create an interface that extends the default interface that is annotated with `@Localized`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2647
msgid "Create an UTF-8 encoded file located in the `src/main/resources/messages` directory of an application archive; e.g. `msg_de.properties`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2649
msgid "While a localized interface enables easy refactoring, an external file might be more convenient in many situations."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:2650
#, no-wrap
msgid "Localized Interface Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2655
#, no-wrap
msgid ""
"import io.quarkus.qute.i18n.Localized;\n"
"import io.quarkus.qute.i18n.Message;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2658
#, no-wrap
msgid ""
"@Localized(\"de\") <1>\n"
"public interface GermanAppMessages extends AppMessages {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2663
#, no-wrap
msgid ""
"    @Override\n"
"    @Message(\"Hallo {name}!\") <2>\n"
"    String hello_name(String name);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2665
msgid "The value is the locale tag string (IETF)."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2666
msgid "The value is the localized template."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2679
msgid "Message bundle files must be encoded in _UTF-8_.  The file name consists of the relevant bundle name (e.g. `msg`) and underscore followed by a language tag (IETF; e.g. `en-US`).  The language tag may be omitted, in which case the language tag of the default bundle locale is used.  For example, if bundle `msg` has default locale `en`, then `msg.properties` is going to be treated as `msg_en.properties`.  If both `msg.properties` and `msg_en.properties` are detected, an exception is thrown and build fails.  The file format is very simple: each line represents either a key/value pair with the equals sign used as a separator or a comment (line starts with `#`).  Blank lines are ignored.  Keys are _mapped to method names_ from the corresponding message bundle interface.  Values represent the templates normally defined by `io.quarkus.qute.i18n.Message#value()`.  A value may be spread out across several adjacent normal lines.  In such case, the line terminator must be escaped with a backslash character `\\`.  The behavior is very similar to the behavior of the `java.util.Properties.load(Reader)` method."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:2680
#, no-wrap
msgid "Localized File Example - `msg_de.properties`"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2685
#, no-wrap
msgid ""
"# This comment is ignored\n"
"hello_name=Hallo {name}! <1> <2>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2687
msgid "Each line in a localized file represents a key/value pair. The key must correspond to a method declared on the message bundle interface. The value is the message template."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2688
msgid "Keys and values are separated by the equals sign."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2690
msgid "We use the `.properties` suffix in our example because most IDEs and text editors support syntax highlighting of `.properties` files. But in fact, the suffix could be anything - it is just ignored."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2692
msgid "An example properties file is generated into the target directory for each message bundle interface automatically. For example, by default if no name is specified for `@MessageBundle` the file `target/qute-i18n-examples/msg.properties` is generated when the application is build via `mvn clean package`. You can use this file as a base for a specific locale. Just rename the file - e.g. `msg_fr.properties`, change the message templates and move it in the `src/main/resources/messages` directory."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:2693
#, no-wrap
msgid "Value Spread Out Across Several Adjacent Lines"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2699
#, no-wrap
msgid ""
"hello=Hello \\\n"
"   {name} and \\\n"
"   good morning!\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2701
msgid "Note that the line terminator is escaped with a backslash character `\\` and white space at the start of the following line is ignored. I.e. `{msg:hello('Edgar')}` would be rendered as `Hello Edgar and good morning!`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2705
msgid "Once we have the localized bundles defined, we need a way to _select_ the correct bundle for a specific template instance, i.e. to specify the locale for all message bundle expressions in the template.  By default, the locale specified via the `quarkus.default-locale` configuration property is used to select the bundle.  Alternatively, you can specify the `locale` attribute of a template instance."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:2706
#, no-wrap
msgid "`locale` Attribute Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2711
#: upstream/_versions/3.2/guides/qute-reference.adoc:2732
#, no-wrap
msgid ""
"@Singleton\n"
"public class MyBean {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2714
#, no-wrap
msgid ""
"    @Inject\n"
"    Template hello;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2719
#, no-wrap
msgid ""
"    String render() {\n"
"       return hello.instance().setAttribute(\"locale\", Locale.forLanguageTag(\"cs\")).render(); <1>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2721
msgid "You can set a `Locale` instance or a locale tag string (IETF)."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2724
msgid "When using xref:resteasy_integration[quarkus-resteasy-qute] the `locale` attribute is derived from the `Accept-Language` header if not set by a user."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2726
msgid "The `@Localized` qualifier can be used to inject a localized message bundle interface."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:2727
#, no-wrap
msgid "Injected Localized Message Bundle Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2735
#, no-wrap
msgid ""
"    @Localized(\"cs\") <1>\n"
"    AppMessages msg;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2740
#, no-wrap
msgid ""
"    String render() {\n"
"       return msg.hello_name(\"Jachym\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2742
msgid "The annotation value is a locale tag string (IETF)."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/qute-reference.adoc:2743
#, no-wrap
msgid "Message Templates"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2747
msgid "Every method of a message bundle interface must define a message template. The value is normally defined by `io.quarkus.qute.i18n.Message#value()`, but for convenience, there is also an option to define the value in a localized file."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:2748
#, no-wrap
msgid "Example of the Message Bundle Interface without the value"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2756
#, no-wrap
msgid ""
"@MessageBundle\n"
"public interface AppMessages {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2759
#, no-wrap
msgid ""
"    @Message <1>\n"
"    String hello_name(String name);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2763
#, no-wrap
msgid ""
"    @Message(\"Goodbye {name}!\") <2>\n"
"    String goodbye(String name);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2765
msgid "The annotation value is not defined. In such a case, the value from supplementary localized file is taken."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2766
msgid "The annotation value is defined and preferred to the value defined in the localized file."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/qute-reference.adoc:2767
#, no-wrap
msgid "Supplementary localized file"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/qute-reference.adoc:2774
#, no-wrap
msgid ""
"hello_name=Hello \\\n"
"   {name} and \\\n"
"   good morning!\n"
"goodbye=Best regards, {name} <1>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2776
msgid "The value is ignored as `io.quarkus.qute.i18n.Message#value()` is always prioritized."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2778
msgid "Message templates are validated during the build. If a missing message template is detected, an exception is thrown and build fails."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/qute-reference.adoc:2780
#, no-wrap
msgid "Configuration Reference"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/qute-reference.adoc:2786
#, no-wrap
msgid "Qute Used as a Standalone Library"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2791
msgid "Qute is primarily designed as a Quarkus extension.  However. it is possible to use it as a \"standalone\" library.  In this case, some features are not available and some additional configuration is needed."
msgstr ""

#. type: Labeled list
#: upstream/_versions/3.2/guides/qute-reference.adoc:2792
#, no-wrap
msgid "Engine"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2795
msgid "First, no managed `Engine` instance is available out of the box.  You'll need to configure a new instance via `Engine.builder()`."
msgstr ""

#. type: Labeled list
#: upstream/_versions/3.2/guides/qute-reference.adoc:2796
#, no-wrap
msgid "Templates"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2798
msgid "By default, no xref:template-locator[template locators] are registered, i.e. `Engine.getTemplate(String)` will not work."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2799
msgid "You can register a custom template locator using `EngineBuilder.addLocator()` or parse a template manually and put the result in the cache via `Engine.putTemplate(String, Template)`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2802
msgid "No section helpers are registered by default."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2803
msgid "The default set of value resolvers can be registered via the convenient `EngineBuilder.addDefaultSectionHelpers()` method and the `EngineBuilder.addDefaults()` method respectively."
msgstr ""

#. type: Labeled list
#: upstream/_versions/3.2/guides/qute-reference.adoc:2804
#, no-wrap
msgid "Value resolvers"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2806
msgid "No xref:value-resolvers[``ValueResolver``s] are generated automatically."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2807
msgid "xref:template_extension_methods[`@TemplateExtension` methods] will not work."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2808
msgid "xref:template_data[`@TemplateData`] and xref:convenient-annotation-for-enums[`@TemplateEnum`] annotations are ignored."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2809
msgid "The default set of value resolvers can be registered via the convenient `EngineBuilder.addDefaultValueResolvers()` method and the `EngineBuilder.addDefaults()` method respectively."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2811
msgid "Not all functionality provided by the built-in extension methods is covered by the default value resolvers. However, a custom value resolver can be easily built via the `ValueResolver.builder()`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2812
msgid "It's recommended to register a `ReflectionValueResolver` instance via `Engine.addValueResolver(new ReflectionValueResolver())` so that Qute can access object properties and call public methods."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2814
msgid "Keep in mind that reflection may not work correctly in some restricted environments or may require additional configuration, e.g. registration in case of a GraalVM native image."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2817
msgid "No user-defined tags are registered automatically."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2818
msgid "A tag can be registered manually via `Engine.builder().addSectionHelper(new UserTagSectionHelper.Factory(\"tagName\",\"tagTemplate.html\")).build()`"
msgstr ""

#. type: Labeled list
#: upstream/_versions/3.2/guides/qute-reference.adoc:2819
#, no-wrap
msgid "Type-safety"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2821
msgid "xref:typesafe_expressions[Type-safe Expressions] are not validated."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2822
msgid "xref:type-safe-message-bundles[Type-safe message bundles] are not supported."
msgstr ""

#. type: Labeled list
#: upstream/_versions/3.2/guides/qute-reference.adoc:2823
#, no-wrap
msgid "Injection"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/qute-reference.adoc:2823
msgid "It is not possible to inject a `Template` instance and vice versa - a template cannot inject a `@Named` CDI bean via the `inject:` and `cdi:` namespace."
msgstr ""
