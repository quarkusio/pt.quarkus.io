# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:09+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/3.2/guides/cache-redis-reference.adoc:6
#, no-wrap
msgid "Redis Cache"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/cache-redis-reference.adoc:14
msgid "By default, Quarkus Cache uses Caffeine as backend.  It's possible to use Redis instead."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/cache-redis-reference.adoc:17
#, no-wrap
msgid "Redis as cache backend"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/cache-redis-reference.adoc:20
msgid "When using Redis as the backend for Quarkus cache, each cached item will be stored in Redis:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/cache-redis-reference.adoc:22
msgid "The backend uses the _<default>_ Redis client (if not configured otherwise), so make sure it's configured (or use the xref:redis-dev-services.adoc[redis dev service])"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/cache-redis-reference.adoc:23
msgid "the Redis key is built as follows: `cache:$cache-name:$cache-key`, where `cache-key` is the key the application uses."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/cache-redis-reference.adoc:24
msgid "the value is encoded to JSON if needed"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/cache-redis-reference.adoc:26
#, no-wrap
msgid "Use the Redis backend"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/cache-redis-reference.adoc:29
msgid "First, you need to add the `quarkus-redis-cache` extension to your project:"
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/cache-redis-reference.adoc:31
#, no-wrap
msgid "pom.xml"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/cache-redis-reference.adoc:37
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-redis-cache</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/cache-redis-reference.adoc:40
#, no-wrap
msgid "build.gradle"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/cache-redis-reference.adoc:43
#, no-wrap
msgid "implementation(\"io.quarkus:quarkus-redis-cache\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/cache-redis-reference.adoc:46
msgid "Then, use the `@CacheResult` and others cache annotations as explained in the xref:cache.adoc[Quarkus Cache guide]:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/cache-redis-reference.adoc:60
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/{keyElement1}/{keyElement2}/{keyElement3}\")\n"
"@CacheResult(cacheName = \"expensiveResourceCache\")\n"
"public ExpensiveResponse getExpensiveResponse(@PathParam(\"keyElement1\") @CacheKey String keyElement1,\n"
"        @PathParam(\"keyElement2\") @CacheKey String keyElement2, @PathParam(\"keyElement3\") @CacheKey String keyElement3,\n"
"        @QueryParam(\"foo\") String foo) {\n"
"    invocations.incrementAndGet();\n"
"    ExpensiveResponse response = new ExpensiveResponse();\n"
"    response.setResult(keyElement1 + \" \" + keyElement2 + \" \" + keyElement3 + \" too!\");\n"
"    return response;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/cache-redis-reference.adoc:64
#, no-wrap
msgid ""
"@POST\n"
"@CacheInvalidateAll(cacheName = \"expensiveResourceCache\")\n"
"public void invalidateAll() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/cache-redis-reference.adoc:66
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/cache-redis-reference.adoc:69
#, no-wrap
msgid "Configure the Redis backend"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/cache-redis-reference.adoc:73
msgid "The Redis backend uses the `<default>` Redis client.  See the xref:redis-reference.adoc[Redis reference] to configure the access to Redis."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/cache-redis-reference.adoc:75
msgid "In dev mode, you can use the xref:redis-dev-services.adoc[Redis Dev Service]."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/cache-redis-reference.adoc:77
msgid "If you want to use another Redis for your cache, configure the `client-name` as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/cache-redis-reference.adoc:81
#, no-wrap
msgid "quarkus.cache.redis.client-name=my-redis-for-cache\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/cache-redis-reference.adoc:87
msgid "When writing to Redis or reading from Redis, Quarkus needs to know the type.  Indeed, the objects need to be serialized and deserialized.  For that purpose, you may need to configure type (class names) of the key and value you want to cache.  At build time, Quarkus tries to deduce the types from the application code, but that decision can be overridden using:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/cache-redis-reference.adoc:93
#, no-wrap
msgid ""
"# Default configuration\n"
"quarkus.cache.redis.key-type=java.lang.String\n"
"quarkus.cache.redis.value-type=org.acme.Person\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/cache-redis-reference.adoc:97
#, no-wrap
msgid ""
"# Configuration for `expensiveResourceCache`\n"
"quarkus.cache.redis.expensiveResourceCache.key-type=java.lang.String\n"
"quarkus.cache.redis.expensiveResourceCache.value-type=org.acme.Supes\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/cache-redis-reference.adoc:100
msgid "You can also configure the time to live of the cached entries:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/cache-redis-reference.adoc:105
#, no-wrap
msgid ""
"# Default configuration\n"
"quarkus.cache.redis.ttl=10s\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/cache-redis-reference.adoc:108
#, no-wrap
msgid ""
"# Configuration for `expensiveResourceCache`\n"
"quarkus.cache.redis.expensiveResourceCache.ttl=1h\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/cache-redis-reference.adoc:112
msgid "If the `ttl` is not configured, the entry won't be evicted.  You would need to invalidate the values using the `@CacheInvalidateAll` or `@CacheInvalidate` annotations."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/cache-redis-reference.adoc:114
msgid "The following table lists the supported properties:"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/cache-redis-reference.adoc:117
#, no-wrap
msgid "Configure the Redis key"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/cache-redis-reference.adoc:121
msgid "By default, the Redis backend stores the entry using the following keys: `cache:$cache-name:$cache-key`, where `cache-key` is the key the application uses.  So, you can find all the entries for a single cache using the Redis `KEYS` command: `KEYS cache:$cache-name:*`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/cache-redis-reference.adoc:123
msgid "The `cache:$cache-name:` segment can be configured using the `prefix` property:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/cache-redis-reference.adoc:129
#, no-wrap
msgid ""
"# Default configuration\n"
"quarkus.cache.redis.prefix=my-cache\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/cache-redis-reference.adoc:132
#, no-wrap
msgid ""
"# Configuration for `expensiveResourceCache`\n"
"quarkus.cache.redis.expensiveResourceCache.prefix=my-expensive-cache\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/cache-redis-reference.adoc:135
msgid "In these cases, you can find all the keys managed by the default cache using `KEYS my-cache:*`, and all the keys managed by the `expensiveResourceCache` cache using: `KEYS my-expensive-cache:*`."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/cache-redis-reference.adoc:136
#, no-wrap
msgid "Enable optimistic locking"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/cache-redis-reference.adoc:140
msgid "The access to the cache can be _direct_ or use https://redis.io/docs/manual/transactions/#optimistic-locking-using-check-and-set[optimistic locking].  By default, optimistic locking is disabled."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/cache-redis-reference.adoc:142
msgid "You can enable optimistic locking using:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/cache-redis-reference.adoc:146
#, no-wrap
msgid ""
"# Default configuration\n"
"quarkus.cache.redis.use-optimistic-locking=true\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/cache-redis-reference.adoc:149
#, no-wrap
msgid ""
"# Configuration for `expensiveResourceCache`\n"
"quarkus.cache.redis.expensiveResourceCache.use-optimistic-locking=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/cache-redis-reference.adoc:151
msgid "When used, the key is _watched_ and the _SET_ command is executed in a transaction (`MULTI/EXEC`)."
msgstr ""
