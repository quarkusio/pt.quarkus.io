# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:10+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: upstream/_versions/3.2/guides/security-jwt.adoc:7
#, no-wrap
msgid "Using JWT RBAC"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:17
msgid "This guide explains how your Quarkus application can utilize https://github.com/smallrye/smallrye-jwt/[SmallRye JWT] to verify https://tools.ietf.org/html/rfc7519[JSON Web Token]s, represent them as MicroProfile JWT `org.eclipse.microprofile.jwt.JsonWebToken` and provide secured access to the Quarkus HTTP endpoints using Bearer Token Authorization and https://en.wikipedia.org/wiki/Role-based_access_control[Role-Based Access Control]."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:22
msgid "Quarkus OpenID Connect `quarkus-oidc` extension also supports Bearer Token Authorization and uses `smallrye-jwt` to represent the bearer tokens as `JsonWebToken`.  For more information, read the xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication] guide.  OpenID Connect extension has to be used if the Quarkus application needs to authenticate the users using OIDC Authorization Code Flow.  For more information, see xref:security-oidc-code-flow-authentication.adoc[OIDC code flow mechanism for protecting web applications]"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/security-jwt.adoc:23
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/security-jwt.adoc:27
#, no-wrap
msgid "Quickstart"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-jwt.adoc:29
#, no-wrap
msgid "Solution"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:33
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can skip right to the completed example."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:35
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:37
msgid "The solution is located in the `security-jwt-quickstart` link:{quickstarts-tree-url}/security-jwt-quickstart[directory]."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-jwt.adoc:38
#, no-wrap
msgid "Creating the Maven project"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:41
msgid "First, create a new project with the following command:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:47
msgid "This command generates the Maven project and imports the `smallrye-jwt` extension, which includes the {mp-jwt} support."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:50
msgid "If you already have your Quarkus project configured, you can add the `smallrye-jwt` extension to your project by running the following command in your project base directory:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:55
msgid "This will add the following to your build file:"
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/security-jwt.adoc:57
#: upstream/_versions/3.2/guides/security-jwt.adoc:865
#: upstream/_versions/3.2/guides/security-jwt.adoc:995
#, no-wrap
msgid "pom.xml"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:67
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-jwt</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-jwt-build</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/security-jwt.adoc:70
#: upstream/_versions/3.2/guides/security-jwt.adoc:875
#: upstream/_versions/3.2/guides/security-jwt.adoc:1004
#, no-wrap
msgid "build.gradle"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:74
#, no-wrap
msgid ""
"implementation(\"io.quarkus:quarkus-smallrye-jwt\")\n"
"implementation(\"io.quarkus:quarkus-smallrye-jwt-build\")\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-jwt.adoc:76
#, no-wrap
msgid "Examine the Jakarta REST resource"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:79
msgid "Create a REST endpoint in `src/main/java/org/acme/security/jwt/TokenSecuredResource.java` with the following content:"
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/security-jwt.adoc:80
#, no-wrap
msgid "REST Endpoint V1"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:84
#: upstream/_versions/3.2/guides/security-jwt.adoc:192
#: upstream/_versions/3.2/guides/security-jwt.adoc:339
#: upstream/_versions/3.2/guides/security-jwt.adoc:484
#: upstream/_versions/3.2/guides/security-jwt.adoc:635
#, no-wrap
msgid "package org.acme.security.jwt;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:86
#, no-wrap
msgid "import java.security.Principal;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:97
#, no-wrap
msgid ""
"import jakarta.annotation.security.PermitAll;\n"
"import jakarta.enterprise.context.RequestScoped;\n"
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.InternalServerErrorException;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.Context;\n"
"import jakarta.ws.rs.core.MediaType;\n"
"import jakarta.ws.rs.core.SecurityContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:99
#: upstream/_versions/3.2/guides/security-jwt.adoc:206
#, no-wrap
msgid "import org.eclipse.microprofile.jwt.JsonWebToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:102
#, no-wrap
msgid ""
"@Path(\"/secured\")\n"
"public class TokenSecuredResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:105
#: upstream/_versions/3.2/guides/security-jwt.adoc:213
#, no-wrap
msgid ""
"    @Inject\n"
"    JsonWebToken jwt; // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:113
#, no-wrap
msgid ""
"    @GET()\n"
"    @Path(\"permit-all\")\n"
"    @PermitAll // <2>\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello(@Context SecurityContext ctx) {\n"
"        return getResponseString(ctx); // <3>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:129
#, no-wrap
msgid ""
"    private String getResponseString(SecurityContext ctx) {\n"
"        String name;\n"
"        if (ctx.getUserPrincipal() == null) { // <4>\n"
"            name = \"anonymous\";\n"
"        } else if (!ctx.getUserPrincipal().getName().equals(jwt.getName())) { // <5>\n"
"            throw new InternalServerErrorException(\"Principal and JsonWebToken names do not match\");\n"
"        } else {\n"
"            name = ctx.getUserPrincipal().getName(); // <6>\n"
"        }\n"
"        return String.format(\"hello + %s,\"\n"
"            + \" isHttps: %s,\"\n"
"            + \" authScheme: %s,\"\n"
"            + \" hasJWT: %s\",\n"
"            name, ctx.isSecure(), ctx.getAuthenticationScheme(), hasJwt()); // <7>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:134
#: upstream/_versions/3.2/guides/security-jwt.adoc:250
#: upstream/_versions/3.2/guides/security-jwt.adoc:555
#, no-wrap
msgid ""
"    private boolean hasJwt() {\n"
"        return jwt.getClaimNames() != null;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:137
msgid "Here we inject the JsonWebToken interface, an extension of the java.security.  Principal interface that provides access to the claims associated with the current authenticated token."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:138
msgid "@PermitAll is a JSR 250 common security annotation that indicates that the given endpoint is accessible by any caller, authenticated or not."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:139
msgid "Here we inject the Jakarta REST SecurityContext to inspect the security state of the call and use a `getResponseString()` function to populate a response string."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:140
msgid "Here we check if the call is insecure by checking the request user/caller `Principal` against null."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:141
msgid "Here we check that the Principal and JsonWebToken have the same name since JsonWebToken does represent the current Principal."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:142
msgid "Here we get the Principal name."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:143
msgid "The reply we build up makes use of the caller name, the `isSecure()` and `getAuthenticationScheme()` states of the request `SecurityContext`, and whether a non-null `JsonWebToken` was injected."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-jwt.adoc:144
#, no-wrap
msgid "Run the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:147
msgid "Now we are ready to run our application. Use:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:151
msgid "and you should see output similar to:"
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/security-jwt.adoc:152
#, no-wrap
msgid "quarkus:dev Output"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:165
#, no-wrap
msgid ""
"[INFO] Scanning for projects...\n"
"[INFO]\n"
"[INFO] ----------------------< org.acme:security-jwt-quickstart >-----------------------\n"
"[INFO] Building security-jwt-quickstart 1.0.0-SNAPSHOT\n"
"[INFO] --------------------------------[ jar ]---------------------------------\n"
"...\n"
"Listening for transport dt_socket at address: 5005\n"
"2020-07-15 16:09:50,883 INFO  [io.quarkus] (Quarkus Main Thread) security-jwt-quickstart 1.0.0-SNAPSHOT on JVM (powered by Quarkus 999-SNAPSHOT) started in 1.073s. Listening on: http://0.0.0.0:8080\n"
"2020-07-15 16:09:50,885 INFO  [io.quarkus] (Quarkus Main Thread) Profile dev activated. Live Coding activated.\n"
"2020-07-15 16:09:50,885 INFO  [io.quarkus] (Quarkus Main Thread) Installed features: [cdi, mutiny, resteasy-reactive, resteasy-reactive-jackson, security, smallrye-context-propagation, smallrye-jwt, vertx, vertx-web]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:168
msgid "Now that the REST endpoint is running, we can access it using a command line tool like curl:"
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/security-jwt.adoc:169
#, no-wrap
msgid "curl command for /secured/permit-all"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:174
#, no-wrap
msgid ""
"$ curl http://127.0.0.1:8080/secured/permit-all; echo\n"
"hello + anonymous, isHttps: false, authScheme: null, hasJWT: false\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:178
msgid "We have not provided any JWT in our request, so we would not expect that there is any security state seen by the endpoint, and the response is consistent with that:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:180
msgid "username is anonymous"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:181
msgid "isHttps is false as https is not used"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:182
msgid "authScheme is null"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:183
msgid "hasJWT is false"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:185
msgid "Use Ctrl-C to stop the Quarkus server."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:187
msgid "So now let's actually secure something. Take a look at the new endpoint method `helloRolesAllowed` in the following:"
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/security-jwt.adoc:188
#, no-wrap
msgid "REST Endpoint V2"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:204
#: upstream/_versions/3.2/guides/security-jwt.adoc:496
#, no-wrap
msgid ""
"import jakarta.annotation.security.PermitAll;\n"
"import jakarta.annotation.security.RolesAllowed;\n"
"import jakarta.enterprise.context.RequestScoped;\n"
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.InternalServerErrorException;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.Context;\n"
"import jakarta.ws.rs.core.MediaType;\n"
"import jakarta.ws.rs.core.SecurityContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:210
#: upstream/_versions/3.2/guides/security-jwt.adoc:504
#: upstream/_versions/3.2/guides/security-jwt.adoc:643
#, no-wrap
msgid ""
"@Path(\"/secured\")\n"
"@RequestScoped\n"
"public class TokenSecuredResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:221
#: upstream/_versions/3.2/guides/security-jwt.adoc:518
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"permit-all\")\n"
"    @PermitAll\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello(@Context SecurityContext ctx) {\n"
"        return getResponseString(ctx);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:229
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"roles-allowed\") // <2>\n"
"    @RolesAllowed({ \"User\", \"Admin\" }) // <3>\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String helloRolesAllowed(@Context SecurityContext ctx) {\n"
"        return getResponseString(ctx) + \", birthdate: \" + jwt.getClaim(\"birthdate\").toString(); // <4>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:245
#: upstream/_versions/3.2/guides/security-jwt.adoc:550
#, no-wrap
msgid ""
"    private String getResponseString(SecurityContext ctx) {\n"
"        String name;\n"
"        if (ctx.getUserPrincipal() == null) {\n"
"            name = \"anonymous\";\n"
"        } else if (!ctx.getUserPrincipal().getName().equals(jwt.getName())) {\n"
"            throw new InternalServerErrorException(\"Principal and JsonWebToken names do not match\");\n"
"        } else {\n"
"            name = ctx.getUserPrincipal().getName();\n"
"        }\n"
"        return String.format(\"hello + %s,\"\n"
"            + \" isHttps: %s,\"\n"
"            + \" authScheme: %s,\"\n"
"            + \" hasJWT: %s\",\n"
"            name, ctx.isSecure(), ctx.getAuthenticationScheme(), hasJwt());\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:252
msgid "Here we inject `JsonWebToken`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:253
msgid "This new endpoint will be located at /secured/roles-allowed"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:255
msgid "@RolesAllowed is a JSR 250 common security annotation that indicates that the given endpoint is accessible by a caller if they have either a \"User\" or \"Admin\" role assigned."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:256
msgid "Here we build the reply the same way as in the `hello` method but also add a value of the JWT `birthdate` claim by directly calling the injected `JsonWebToken`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:258
msgid "After you make this addition to your `TokenSecuredResource`, rerun the `./mvnw compile quarkus:dev` command, and then try `curl -v http://127.0.0.1:8080/secured/roles-allowed; echo` to attempt to access the new endpoint."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:260
msgid "Your output should be as follows:"
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/security-jwt.adoc:261
#, no-wrap
msgid "curl command for /secured/roles-allowed"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:281
#, no-wrap
msgid ""
"$ curl -v http://127.0.0.1:8080/secured/roles-allowed; echo\n"
"*   Trying 127.0.0.1...\n"
"* TCP_NODELAY set\n"
"* Connected to 127.0.0.1 (127.0.0.1) port 8080 (#0)\n"
"> GET /secured/roles-allowed HTTP/1.1\n"
"> Host: 127.0.0.1:8080\n"
"> User-Agent: curl/7.54.0\n"
"> Accept: */*\n"
">\n"
"< HTTP/1.1 401 Unauthorized\n"
"< Connection: keep-alive\n"
"< Content-Type: text/html;charset=UTF-8\n"
"< Content-Length: 14\n"
"< Date: Sun, 03 Mar 2019 16:32:34 GMT\n"
"<\n"
"* Connection #0 to host 127.0.0.1 left intact\n"
"Not authorized\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:285
msgid "Excellent, we have not provided any JWT in the request, so we should not be able to access the endpoint, and we were not. Instead, we received an HTTP 401 Unauthorized error.  We need to obtain and pass in a valid JWT to access that endpoint. There are two steps to this, 1) configuring our {extension-name} extension with information on how to validate a JWT, and 2) generating a matching JWT with the appropriate claims."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-jwt.adoc:286
#, no-wrap
msgid "Configuring the {extension-name} Extension Security Information"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:289
msgid "Create a `security-jwt-quickstart/src/main/resources/application.properties` with the following content:"
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/security-jwt.adoc:290
#, no-wrap
msgid "application.properties for TokenSecuredResource"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:295
#, no-wrap
msgid ""
"mp.jwt.verify.publickey.location=publicKey.pem #<1>\n"
"mp.jwt.verify.issuer=https://example.com/issuer #<2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:297
#, no-wrap
msgid "quarkus.native.resources.includes=publicKey.pem #<3>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:299
msgid "We are setting public key location to point to a classpath publicKey.pem location. We will add this key in part B, xref:add-public-key[Adding a Public Key]."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:300
msgid "We are setting the issuer to the URL string `https://example.com/issuer`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:301
msgid "We are including the public key as a resource in the native executable."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-jwt.adoc:303
#, no-wrap
msgid "Adding a Public Key"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:313
msgid "The https://tools.ietf.org/html/rfc7519[JWT specification] defines various levels of security of JWTs that one can use.  The {mp-jwt} specification requires that JWTs that are signed with the RSA-256 signature algorithm. This in turn requires an RSA public key pair.  On the REST endpoint server side, you need to configure the location of the RSA public key to use to verify the JWT sent along with requests.  The `mp.jwt.verify.publickey.location=publicKey.pem` setting configured previously expects that the public key is available on the classpath as `publicKey.pem`.  To accomplish this, copy the following content to a `security-jwt-quickstart/src/main/resources/publicKey.pem` file."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/security-jwt.adoc:314
#, no-wrap
msgid "RSA Public Key PEM Content"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:326
#, no-wrap
msgid ""
"-----BEGIN PUBLIC KEY-----\n"
"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlivFI8qB4D0y2jy0CfEq\n"
"Fyy46R0o7S8TKpsx5xbHKoU1VWg6QkQm+ntyIv1p4kE1sPEQO73+HY8+Bzs75XwR\n"
"TYL1BmR1w8J5hmjVWjc6R2BTBGAYRPFRhor3kpM6ni2SPmNNhurEAHw7TaqszP5e\n"
"UF/F9+KEBWkwVta+PZ37bwqSE4sCb1soZFrVz/UT/LF4tYpuVYt3YbqToZ3pZOZ9\n"
"AX2o1GCG3xwOjkc4x0W7ezbQZdC9iftPxVHR8irOijJRRjcPDtA6vPKpzLl6CyYn\n"
"sIYPd99ltwxTHjr3npfv/3Lw50bAkbT4HeLFxTx4flEoZLKO/g0bAoV2uqBhkA9x\n"
"nQIDAQAB\n"
"-----END PUBLIC KEY-----\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-jwt.adoc:328
#, no-wrap
msgid "Generating a JWT"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:332
msgid "Often one obtains a JWT from an identity manager like https://www.keycloak.org/[Keycloak], but for this quickstart we will generate our own using the JWT generation API provided by `smallrye-jwt`.  For more information, see xref:security-jwt-build.adoc[Generate JWT tokens with SmallRye JWT]."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:334
msgid "Take the code from the following listing and place into `security-jwt-quickstart/src/test/java/org/acme/security/jwt/GenerateToken.java`:"
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/security-jwt.adoc:335
#, no-wrap
msgid "GenerateToken main Driver Class"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:342
#, no-wrap
msgid ""
"import java.util.Arrays;\n"
"import java.util.HashSet;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:344
#, no-wrap
msgid "import org.eclipse.microprofile.jwt.Claims;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:346
#, no-wrap
msgid "import io.smallrye.jwt.build.Jwt;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:361
#, no-wrap
msgid ""
"public class GenerateToken {\n"
"    /**\n"
"     * Generate JWT token\n"
"     */\n"
"    public static void main(String[] args) {\n"
"        String token =\n"
"           Jwt.issuer(\"https://example.com/issuer\") // <1>\n"
"             .upn(\"jdoe@quarkus.io\") // <2>\n"
"             .groups(new HashSet<>(Arrays.asList(\"User\", \"Admin\"))) // <3>\n"
"             .claim(Claims.birthdate.name(), \"2001-07-13\") // <4>\n"
"           .sign();\n"
"        System.out.println(token);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:365
msgid "The `iss` claim is the issuer of the JWT. This needs to match the server side `mp.jwt.verify.issuer`.  in order for the token to be accepted as valid."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:367
msgid "The `upn` claim is defined by the {mp-jwt} spec as preferred claim to use for the `Principal` seen via the container security APIs."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:368
msgid "The `group` claim provides the groups and top-level roles associated with the JWT bearer."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:369
msgid "The `birthday` claim. It can be considered to be a sensitive claim, so you may want to consider encrypting the claims, see xref:security-jwt-build.adoc[Generate JWT tokens with SmallRye JWT]."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:371
msgid "Note for this code to work we need the content of the RSA private key that corresponds to the public key we have in the TokenSecuredResource application. Take the following PEM content and place it into `security-jwt-quickstart/src/test/resources/privateKey.pem`:"
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/security-jwt.adoc:372
#, no-wrap
msgid "RSA Private Key PEM Content"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:403
#, no-wrap
msgid ""
"-----BEGIN PRIVATE KEY-----\n"
"MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCWK8UjyoHgPTLa\n"
"PLQJ8SoXLLjpHSjtLxMqmzHnFscqhTVVaDpCRCb6e3Ii/WniQTWw8RA7vf4djz4H\n"
"OzvlfBFNgvUGZHXDwnmGaNVaNzpHYFMEYBhE8VGGiveSkzqeLZI+Y02G6sQAfDtN\n"
"qqzM/l5QX8X34oQFaTBW1r49nftvCpITiwJvWyhkWtXP9RP8sXi1im5Vi3dhupOh\n"
"nelk5n0BfajUYIbfHA6ORzjHRbt7NtBl0L2J+0/FUdHyKs6KMlFGNw8O0Dq88qnM\n"
"uXoLJiewhg9332W3DFMeOveel+//cvDnRsCRtPgd4sXFPHh+UShkso7+DRsChXa6\n"
"oGGQD3GdAgMBAAECggEAAjfTSZwMHwvIXIDZB+yP+pemg4ryt84iMlbofclQV8hv\n"
"6TsI4UGwcbKxFOM5VSYxbNOisb80qasb929gixsyBjsQ8284bhPJR7r0q8h1C+jY\n"
"URA6S4pk8d/LmFakXwG9Tz6YPo3pJziuh48lzkFTk0xW2Dp4SLwtAptZY/+ZXyJ6\n"
"96QXDrZKSSM99Jh9s7a0ST66WoxSS0UC51ak+Keb0KJ1jz4bIJ2C3r4rYlSu4hHB\n"
"Y73GfkWORtQuyUDa9yDOem0/z0nr6pp+pBSXPLHADsqvZiIhxD/O0Xk5I6/zVHB3\n"
"zuoQqLERk0WvA8FXz2o8AYwcQRY2g30eX9kU4uDQAQKBgQDmf7KGImUGitsEPepF\n"
"KH5yLWYWqghHx6wfV+fdbBxoqn9WlwcQ7JbynIiVx8MX8/1lLCCe8v41ypu/eLtP\n"
"iY1ev2IKdrUStvYRSsFigRkuPHUo1ajsGHQd+ucTDf58mn7kRLW1JGMeGxo/t32B\n"
"m96Af6AiPWPEJuVfgGV0iwg+HQKBgQCmyPzL9M2rhYZn1AozRUguvlpmJHU2DpqS\n"
"34Q+7x2Ghf7MgBUhqE0t3FAOxEC7IYBwHmeYOvFR8ZkVRKNF4gbnF9RtLdz0DMEG\n"
"5qsMnvJUSQbNB1yVjUCnDAtElqiFRlQ/k0LgYkjKDY7LfciZl9uJRl0OSYeX/qG2\n"
"tRW09tOpgQKBgBSGkpM3RN/MRayfBtmZvYjVWh3yjkI2GbHA1jj1g6IebLB9SnfL\n"
"WbXJErCj1U+wvoPf5hfBc7m+jRgD3Eo86YXibQyZfY5pFIh9q7Ll5CQl5hj4zc4Y\n"
"b16sFR+xQ1Q9Pcd+BuBWmSz5JOE/qcF869dthgkGhnfVLt/OQzqZluZRAoGAXQ09\n"
"nT0TkmKIvlza5Af/YbTqEpq8mlBDhTYXPlWCD4+qvMWpBII1rSSBtftgcgca9XLB\n"
"MXmRMbqtQeRtg4u7dishZVh1MeP7vbHsNLppUQT9Ol6lFPsd2xUpJDc6BkFat62d\n"
"Xjr3iWNPC9E9nhPPdCNBv7reX7q81obpeXFMXgECgYEAmk2Qlus3OV0tfoNRqNpe\n"
"Mb0teduf2+h3xaI1XDIzPVtZF35ELY/RkAHlmWRT4PCdR0zXDidE67L6XdJyecSt\n"
"FdOUH8z5qUraVVebRFvJqf/oGsXc4+ex1ZKUTbY0wqY1y9E39yvB3MaTmZFuuqk8\n"
"f3cg+fr8aou7pr9SHhJlZCU=\n"
"-----END PRIVATE KEY-----\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:406
msgid "We will use a `smallrye.jwt.sign.key.location` property to point to this private signing key."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/security-jwt.adoc:408
#, no-wrap
msgid "Generating Keys with OpenSSL"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/security-jwt.adoc:411
msgid "It is also possible to generate a public and private key pair using the OpenSSL command line tool."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/security-jwt.adoc:412
#, no-wrap
msgid "openssl commands for generating keys"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:417
#, no-wrap
msgid ""
"openssl genrsa -out rsaPrivateKey.pem 2048\n"
"openssl rsa -pubout -in rsaPrivateKey.pem -out publicKey.pem\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:420
msgid "An additional step is needed for generating the private key for converting it into the PKCS#8 format."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/security-jwt.adoc:421
#, no-wrap
msgid "openssl command for converting private key"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:425
#, no-wrap
msgid "openssl pkcs8 -topk8 -nocrypt -inform pem -in rsaPrivateKey.pem -outform pem -out privateKey.pem\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:428
msgid "You can use the generated pair of keys instead of the keys used in this quickstart."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/security-jwt.adoc:431
msgid "Now we can generate a JWT to use with `TokenSecuredResource` endpoint. To do this, run the following command:"
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/security-jwt.adoc:432
#, no-wrap
msgid "Command to Generate JWT"
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/security-jwt.adoc:434
#, no-wrap
msgid "Sample JWT Generation Output"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:438
#, no-wrap
msgid "$ mvn exec:java -Dexec.mainClass=org.acme.security.jwt.GenerateToken -Dexec.classpathScope=test -Dsmallrye.jwt.sign.key.location=privateKey.pem\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:440
#, no-wrap
msgid "eyJraWQiOiJcL3ByaXZhdGVLZXkucGVtIiwidHlwIjoiSldUIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiJqZG9lLXVzaW5nLWp3dC1yYmFjIiwiYXVkIjoidXNpbmctand0LXJiYWMiLCJ1cG4iOiJqZG9lQHF1YXJrdXMuaW8iLCJiaXJ0aGRhdGUiOiIyMDAxLTA3LTEzIiwiYXV0aF90aW1lIjoxNTUxNjU5Njc2LCJpc3MiOiJodHRwczpcL1wvcXVhcmt1cy5pb1wvdXNpbmctand0LXJiYWMiLCJyb2xlTWFwcGluZ3MiOnsiZ3JvdXAyIjoiR3JvdXAyTWFwcGVkUm9sZSIsImdyb3VwMSI6Ikdyb3VwMU1hcHBlZFJvbGUifSwiZ3JvdXBzIjpbIkVjaG9lciIsIlRlc3RlciIsIlN1YnNjcmliZXIiLCJncm91cDIiXSwicHJlZmVycmVkX3VzZXJuYW1lIjoiamRvZSIsImV4cCI6MTU1MTY1OTk3NiwiaWF0IjoxNTUxNjU5Njc2LCJqdGkiOiJhLTEyMyJ9.O9tx_wNNS4qdpFhxeD1e7v4aBNWz1FCq0UV8qmXd7dW9xM4hA5TO-ZREk3ApMrL7_rnX8z81qGPIo_R8IfHDyNaI1SLD56gVX-NaOLS2OjfcbO3zOWJPKR_BoZkYACtMoqlWgIwIRC-wJKUJU025dHZiNL0FWO4PjwuCz8hpZYXIuRscfFhXKrDX1fh3jDhTsOEFfu67ACd85f3BdX9pe-ayKSVLh_RSbTbBPeyoYPE59FW7H5-i8IE-Gqu838Hz0i38ksEJFI25eR-AJ6_PSUD0_-TV3NjXhF3bFIeT4VSaIZcpibekoJg0cQm-4ApPEcPLdgTejYHA-mupb8hSwg\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:444
msgid "The JWT string is the Base64 URL encoded string that has 3 parts separated by '.' characters.  First part - JWT headers, second part - JWT claims, third part - JWT signature."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-jwt.adoc:445
#, no-wrap
msgid "Finally, Secured Access to /secured/roles-allowed"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:447
msgid "Now let's use this to make a secured request to the /secured/roles-allowed endpoint. Make sure you have the Quarkus server still running in dev mode, and then run the following command, making sure to use your version of the generated JWT from the previous step:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:451
#, no-wrap
msgid "curl -H \"Authorization: Bearer eyJraWQiOiJcL3ByaXZhdGVLZXkucGVtIiwidHlwIjoiSldUIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiJqZG9lLXVzaW5nLWp3dC1yYmFjIiwiYXVkIjoidXNpbmctand0LXJiYWMiLCJ1cG4iOiJqZG9lQHF1YXJrdXMuaW8iLCJiaXJ0aGRhdGUiOiIyMDAxLTA3LTEzIiwiYXV0aF90aW1lIjoxNTUxNjUyMDkxLCJpc3MiOiJodHRwczpcL1wvcXVhcmt1cy5pb1wvdXNpbmctand0LXJiYWMiLCJyb2xlTWFwcGluZ3MiOnsiZ3JvdXAyIjoiR3JvdXAyTWFwcGVkUm9sZSIsImdyb3VwMSI6Ikdyb3VwMU1hcHBlZFJvbGUifSwiZ3JvdXBzIjpbIkVjaG9lciIsIlRlc3RlciIsIlN1YnNjcmliZXIiLCJncm91cDIiXSwicHJlZmVycmVkX3VzZXJuYW1lIjoiamRvZSIsImV4cCI6MTU1MTY1MjM5MSwiaWF0IjoxNTUxNjUyMDkxLCJqdGkiOiJhLTEyMyJ9.aPA4Rlc4kw7n_OZZRRk25xZydJy_J_3BRR8ryYLyHTO1o68_aNWWQCgpnAuOW64svPhPnLYYnQzK-l2vHX34B64JySyBD4y_vRObGmdwH_SEufBAWZV7mkG3Y4mTKT3_4EWNu4VH92IhdnkGI4GJB6yHAEzlQI6EdSOa4Nq8Gp4uPGqHsUZTJrA3uIW0TbNshFBm47-oVM3ZUrBz57JKtr0e9jv0HjPQWyvbzx1HuxZd6eA8ow8xzvooKXFxoSFCMnxotd3wagvYQ9ysBa89bgzL-lhjWtusuMFDUVYwFqADE7oOSOD4Vtclgq8svznBQ-YpfTHfb9QEcofMlpyjNA\" http://127.0.0.1:8080/secured/roles-allowed; echo\n"
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/security-jwt.adoc:453
#, no-wrap
msgid "curl Command for /secured/roles-allowed With JWT"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:458
#, no-wrap
msgid ""
"$ curl -H \"Authorization: Bearer eyJraWQ...\" http://127.0.0.1:8080/secured/roles-allowed; echo\n"
"hello + jdoe@quarkus.io, isHttps: false, authScheme: Bearer, hasJWT: true, birthdate: 2001-07-13\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:461
msgid "Success! We now have:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:463
msgid "a non-anonymous caller name of jdoe@quarkus.io"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:464
msgid "an authentication scheme of Bearer"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:465
msgid "a non-null JsonWebToken"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:466
msgid "birthdate claim value"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-jwt.adoc:467
#, no-wrap
msgid "Using the JsonWebToken and Claim Injection"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:474
msgid "Now that we can generate a JWT to access our secured REST endpoints, let's see what more we can do with the `JsonWebToken` interface and the JWT claims. The `org.eclipse.microprofile.jwt.JsonWebToken` interface extends the `java.security.Principal` interface, and is in fact the type of the object that is returned by the `jakarta.ws.rs.core.SecurityContext#getUserPrincipal()` call we used previously. This means that code that does not use CDI but does have access to the REST container `SecurityContext` can get hold of the caller `JsonWebToken` interface by casting the `SecurityContext#getUserPrincipal()`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:477
msgid "The `JsonWebToken` interface defines methods for accessing claims in the underlying JWT.  It provides accessors for common claims that are required by the {mp-jwt} specification as well as arbitrary claims that may exist in the JWT."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:480
msgid "All the JWT claims can also be injected.  Let's expand our `TokenSecuredResource` with another endpoint /secured/roles-allowed-admin which uses the injected `birthdate` claim (as opposed to getting it from `JsonWebToken`):"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:500
#, no-wrap
msgid ""
"import org.eclipse.microprofile.jwt.Claim;\n"
"import org.eclipse.microprofile.jwt.Claims;\n"
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:510
#, no-wrap
msgid ""
"    @Inject\n"
"    JsonWebToken jwt; // <1>\n"
"    @Inject\n"
"    @Claim(standard = Claims.birthdate)\n"
"    String birthdate; // <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:526
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"roles-allowed\")\n"
"    @RolesAllowed({ \"User\", \"Admin\" })\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String helloRolesAllowed(@Context SecurityContext ctx) {\n"
"        return getResponseString(ctx) + \", birthdate: \" + jwt.getClaim(\"birthdate\").toString();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:534
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"roles-allowed-admin\")\n"
"    @RolesAllowed(\"Admin\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String helloRolesAllowedAdmin(@Context SecurityContext ctx) {\n"
"        return getResponseString(ctx) + \", birthdate: \" + birthdate; // <3>\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:557
msgid "Here we inject the JsonWebToken."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:558
msgid "Here we inject the `birthday` claim as `String` - this is why the `@RequestScoped` scope is now required."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:559
msgid "Here we use the injected `birthday` claim to build the final reply."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:561
msgid "Now generate the token again and run:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:565
#, no-wrap
msgid "curl -H \"Authorization: Bearer eyJraWQiOiJcL3ByaXZhdGVLZXkucGVtIiwidHlwIjoiSldUIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiJqZG9lLXVzaW5nLWp3dC1yYmFjIiwiYXVkIjoidXNpbmctand0LXJiYWMiLCJ1cG4iOiJqZG9lQHF1YXJrdXMuaW8iLCJiaXJ0aGRhdGUiOiIyMDAxLTA3LTEzIiwiYXV0aF90aW1lIjoxNTUxNjUyMDkxLCJpc3MiOiJodHRwczpcL1wvcXVhcmt1cy5pb1wvdXNpbmctand0LXJiYWMiLCJyb2xlTWFwcGluZ3MiOnsiZ3JvdXAyIjoiR3JvdXAyTWFwcGVkUm9sZSIsImdyb3VwMSI6Ikdyb3VwMU1hcHBlZFJvbGUifSwiZ3JvdXBzIjpbIkVjaG9lciIsIlRlc3RlciIsIlN1YnNjcmliZXIiLCJncm91cDIiXSwicHJlZmVycmVkX3VzZXJuYW1lIjoiamRvZSIsImV4cCI6MTU1MTY1MjM5MSwiaWF0IjoxNTUxNjUyMDkxLCJqdGkiOiJhLTEyMyJ9.aPA4Rlc4kw7n_OZZRRk25xZydJy_J_3BRR8ryYLyHTO1o68_aNWWQCgpnAuOW64svPhPnLYYnQzK-l2vHX34B64JySyBD4y_vRObGmdwH_SEufBAWZV7mkG3Y4mTKT3_4EWNu4VH92IhdnkGI4GJB6yHAEzlQI6EdSOa4Nq8Gp4uPGqHsUZTJrA3uIW0TbNshFBm47-oVM3ZUrBz57JKtr0e9jv0HjPQWyvbzx1HuxZd6eA8ow8xzvooKXFxoSFCMnxotd3wagvYQ9ysBa89bgzL-lhjWtusuMFDUVYwFqADE7oOSOD4Vtclgq8svznBQ-YpfTHfb9QEcofMlpyjNA\" http://127.0.0.1:8080/secured/roles-allowed-admin; echo\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:571
#, no-wrap
msgid ""
"$ curl -H \"Authorization: Bearer eyJraWQ...\" http://127.0.0.1:8080/secured/roles-allowed-admin; echo\n"
"hello + jdoe@quarkus.io, isHttps: false, authScheme: Bearer, hasJWT: true, birthdate: 2001-07-13\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-jwt.adoc:573
#, no-wrap
msgid "Package and run the application"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:576
msgid "As usual, the application can be packaged using:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:580
msgid "And executed using `java -jar target/quarkus-app/quarkus-run.jar`:"
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/security-jwt.adoc:581
#, no-wrap
msgid "Runner jar Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:587
#, no-wrap
msgid ""
"$ java -jar target/quarkus-app/quarkus-run.jar\n"
"2019-03-28 14:27:48,839 INFO  [io.quarkus] (main) Quarkus {quarkus-version} started in 0.796s. Listening on: http://[::]:8080\n"
"2019-03-28 14:27:48,841 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy-reactive, resteasy-reactive-jackson, security, smallrye-jwt]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:590
msgid "You can also generate the native executable with:"
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/security-jwt.adoc:593
#, no-wrap
msgid "Native Executable Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:612
#, no-wrap
msgid ""
"[INFO] Scanning for projects...\n"
"...\n"
"[security-jwt-quickstart-runner:25602]     universe:     493.17 ms\n"
"[security-jwt-quickstart-runner:25602]      (parse):     660.41 ms\n"
"[security-jwt-quickstart-runner:25602]     (inline):   1,431.10 ms\n"
"[security-jwt-quickstart-runner:25602]    (compile):   7,301.78 ms\n"
"[security-jwt-quickstart-runner:25602]      compile:  10,542.16 ms\n"
"[security-jwt-quickstart-runner:25602]        image:   2,797.62 ms\n"
"[security-jwt-quickstart-runner:25602]        write:     988.24 ms\n"
"[security-jwt-quickstart-runner:25602]      [total]:  43,778.16 ms\n"
"[INFO] ------------------------------------------------------------------------\n"
"[INFO] BUILD SUCCESS\n"
"[INFO] ------------------------------------------------------------------------\n"
"[INFO] Total time:  51.500 s\n"
"[INFO] Finished at: 2019-03-28T14:30:56-07:00\n"
"[INFO] ------------------------------------------------------------------------\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:616
#, no-wrap
msgid ""
"$ ./target/security-jwt-quickstart-runner\n"
"2019-03-28 14:31:37,315 INFO  [io.quarkus] (main) Quarkus 0.12.0 started in 0.006s. Listening on: http://[::]:8080\n"
"2019-03-28 14:31:37,316 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy-reactive, resteasy-reactive-jackson, security, smallrye-jwt]\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-jwt.adoc:618
#, no-wrap
msgid "Explore the Solution"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:622
msgid "The solution repository located in the `security-jwt-quickstart` link:{quickstarts-tree-url}/security-jwt-quickstart[directory] contains all the versions we have worked through in this quickstart guide as well as some additional endpoints that illustrate subresources with injection of ``JsonWebToken``s and their claims into those using the CDI APIs.  We suggest that you check out the quickstart solutions and explore the `security-jwt-quickstart` directory to learn more about the {extension-name} extension features."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/security-jwt.adoc:623
#, no-wrap
msgid "Reference Guide"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-jwt.adoc:626
#, no-wrap
msgid "Supported Injection Scopes"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:629
msgid "`@ApplicationScoped`, `@Singleton` and `@RequestScoped` outer bean injection scopes are all supported when an `org.eclipse.microprofile.jwt.JsonWebToken` is injected, with the `@RequestScoped` scoping for `JsonWebToken` enforced to ensure the current token is represented."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:631
msgid "However, `@RequestScoped` must be used when the individual token claims are injected as simple types such as `String`, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:639
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import org.eclipse.microprofile.jwt.Claim;\n"
"import org.eclipse.microprofile.jwt.Claims;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:648
#, no-wrap
msgid ""
"    @Inject\n"
"    @Claim(standard = Claims.birthdate)\n"
"    String birthdate;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:651
msgid "Note you can also use the injected `JsonWebToken` to access the individual claims in which case setting `@RequestScoped` is not necessary."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:653
msgid "Please see link:https://download.eclipse.org/microprofile/microprofile-jwt-auth-1.2/microprofile-jwt-auth-spec-1.2.html#_cdi_injection_requirements[MP JWT CDI Injection Requirements] for more details."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-jwt.adoc:655
#, no-wrap
msgid "Supported Public Key Formats"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:659
msgid "Public Keys may be formatted in any of the following formats, specified in order of precedence:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:661
msgid "Public Key Cryptography Standards #8 (PKCS#8) PEM"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:662
msgid "JSON Web Key (JWK)"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:663
msgid "JSON Web Key Set (JWKS)"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:664
msgid "JSON Web Key (JWK) Base64 URL encoded"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:665
msgid "JSON Web Key Set (JWKS) Base64 URL encoded"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-jwt.adoc:666
#, no-wrap
msgid "Dealing with the verification keys"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:669
msgid "If you need to verify the token signature using the asymmetric RSA or Elliptic Curve (EC) key then use the `mp.jwt.verify.publickey.location` property to refer to the local or remote verification key."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:671
msgid "Use `mp.jwt.verify.publickey.algorithm` to customize the verification algorithm (default is `RS256`), for example, set it to `ES256` when working with the EC keys."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:673
msgid "If you need to verify the token signature using the symmetric secret key then either a `JSON Web Key` (JWK) or `JSON Web Key Set` (JWK Set) format must be used to represent this secret key, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:685
#, no-wrap
msgid ""
"{\n"
" \"keys\": [\n"
"   {\n"
"     \"kty\":\"oct\",\n"
"     \"kid\":\"secretKey\",\n"
"     \"k\":\"AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\"\n"
"   }\n"
" ]\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:689
msgid "This secret key JWK will also need to be referred to with `smallrye.jwt.verify.key.location`.  `smallrye.jwt.verify.algorithm` should be set to `HS256`/`HS384`/`HS512`."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-jwt.adoc:691
#, no-wrap
msgid "Parse and Verify JsonWebToken with JWTParser"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:694
msgid "If the JWT token can not be injected, for example, if it is embedded in the service request payload or the service endpoint acquires it out of band, then one can use `JWTParser`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:701
#, no-wrap
msgid ""
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"import io.smallrye.jwt.auth.principal.JWTParser;\n"
"...\n"
"@Inject JWTParser parser;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:703
#, no-wrap
msgid "String token = getTokenFromOidcServer();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:706
#, no-wrap
msgid ""
"// Parse and verify the token\n"
"JsonWebToken jwt = parser.parse(token);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:709
msgid "You can also use it to customize the way the token is verified or decrypted. For example, one can supply a local `SecretKey`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:719
#, no-wrap
msgid ""
"import javax.crypto.SecretKey;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.core.NewCookie;\n"
"import jakarta.ws.rs.core.Response;\n"
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"import io.smallrye.jwt.auth.principal.JWTParser;\n"
"import io.smallrye.jwt.build.Jwt;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:724
#, no-wrap
msgid ""
"@Path(\"/secured\")\n"
"public class SecuredResource {\n"
"  @Inject JWTParser parser;\n"
"  private String secret = \"AyM1SysPpbyDfgZld3umj1qzKObwVMko\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:743
#, no-wrap
msgid ""
"  @GET\n"
"  @Produces(\"text/plain\")\n"
"  public Response getUserName(@CookieParam(\"jwt\") String jwtCookie) {\n"
"    Response response = null;\n"
"    if (jwtCookie == null) {\n"
"        // Create a JWT token signed using the 'HS256' algorithm\n"
"        String newJwtCookie = Jwt.upn(\"Alice\").signWithSecret(secret);\n"
"        // or create a JWT token encrypted using the 'A256KW' algorithm\n"
"        // Jwt.upn(\"alice\").encryptWithSecret(secret);\n"
"        return Response.ok(\"Alice\").cookie(new NewCookie(\"jwt\", newJwtCookie)).build();\n"
"    } else {\n"
"        // All mp.jwt and smallrye.jwt properties are still effective, only the verification key is customized.\n"
"        JsonWebToken jwt = parser.verify(jwtCookie, secret);\n"
"        // or jwt = parser.decrypt(jwtCookie, secret);\n"
"        return Response.ok(jwt.getName()).build();\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:746
msgid "Please also see the xref:add-smallrye-jwt[How to Add SmallRye JWT directly] section about using `JWTParser` without the `HTTP` support provided by `quarkus-smallrye-jwt`."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-jwt.adoc:747
#, no-wrap
msgid "Token Decryption"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:751
msgid "If your application needs to accept the tokens with the encrypted claims or the encrypted inner-signed claims, all you have to do is set `smallrye.jwt.decrypt.key.location` pointing to the decryption key."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:754
msgid "If this is the only key property that is set, the incoming token is expected to contain the encrypted claims only.  If either `mp.jwt.verify.publickey` or `mp.jwt.verify.publickey.location` verification properties are also set then the incoming token is expected to contain the encrypted inner-signed token."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:756
msgid "See xref:security-jwt-build.adoc[Generate JWT tokens with SmallRye JWT] and learn how to generate the encrypted or inner-signed and then encrypted tokens fast."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-jwt.adoc:757
#, no-wrap
msgid "Custom Factories"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:761
msgid "`io.smallrye.jwt.auth.principal.DefaultJWTCallerPrincipalFactory` is used by default to parse and verify JWT tokens and convert them to `JsonWebToken` principals.  It uses `MP JWT` and `smallrye-jwt` properties listed in the `Configuration` section to verify and customize JWT tokens."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:763
msgid "If you need to provide your own factory, for example, to avoid verifying the tokens again which have already been verified by the firewall, then you can either use a `ServiceLoader` mechanism by providing a `META-INF/services/io.smallrye.jwt.auth.principal.JWTCallerPrincipalFactory` resource or simply have an `Alternative` CDI bean implementation like this one:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:778
#, no-wrap
msgid ""
"import java.nio.charset.StandardCharsets;\n"
"import java.util.Base64;\n"
"import jakarta.annotation.Priority;\n"
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.enterprise.inject.Alternative;\n"
"import org.jose4j.jwt.JwtClaims;\n"
"import org.jose4j.jwt.consumer.InvalidJwtException;\n"
"import io.smallrye.jwt.auth.principal.DefaultJWTCallerPrincipal;\n"
"import io.smallrye.jwt.auth.principal.JWTAuthContextInfo;\n"
"import io.smallrye.jwt.auth.principal.JWTCallerPrincipal;\n"
"import io.smallrye.jwt.auth.principal.JWTCallerPrincipalFactory;\n"
"import io.smallrye.jwt.auth.principal.ParseException;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:783
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"@Alternative\n"
"@Priority(1)\n"
"public class TestJWTCallerPrincipalFactory extends JWTCallerPrincipalFactory {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:795
#, no-wrap
msgid ""
"    @Override\n"
"    public JWTCallerPrincipal parse(String token, JWTAuthContextInfo authContextInfo) throws ParseException {\n"
"        try {\n"
"            // Token has already been verified, parse the token claims only\n"
"            String json = new String(Base64.getUrlDecoder().decode(token.split(\"\\\\.\")[1]), StandardCharsets.UTF_8);\n"
"            return new DefaultJWTCallerPrincipal(JwtClaims.parse(json));\n"
"        } catch (InvalidJwtException ex) {\n"
"            throw new ParseException(ex.getMessage());\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-jwt.adoc:797
#, no-wrap
msgid "Token Propagation"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:800
msgid "Please see the xref:security-openid-connect-client.adoc#token-propagation[Token Propagation] section about the Bearer access token propagation to the downstream services."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-jwt.adoc:802
#, no-wrap
msgid "Testing"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/security-jwt.adoc:805
#, no-wrap
msgid "Wiremock"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:808
msgid "If you configure `mp.jwt.verify.publickey.location` to point to HTTPS or HTTP based JsonWebKey (JWK) set then you can use the same approach as described in the xref:security-oidc-bearer-token-authentication.adoc#integration-testing[OpenID Connect Bearer Token Integration testing] `Wiremock` section but only change the `application.properties` to use MP JWT configuration properties instead:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:814
#, no-wrap
msgid ""
"# keycloak.url is set by OidcWiremockTestResource\n"
"mp.jwt.verify.publickey.location=${keycloak.url}/realms/quarkus/protocol/openid-connect/certs\n"
"mp.jwt.verify.issuer=${keycloak.url}/realms/quarkus\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/security-jwt.adoc:817
#, no-wrap
msgid "Keycloak"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:820
msgid "If you work with Keycloak and configure `mp.jwt.verify.publickey.location` to point to HTTPS or HTTP based JsonWebKey (JWK) set then you can use the same approach as described in the xref:security-oidc-bearer-token-authentication.adoc#integration-testing[OpenID Connect Bearer Token Integration testing] Keycloak section but only change the `application.properties` to use MP JWT configuration properties instead:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:826
#, no-wrap
msgid ""
"# keycloak.url is set by DevServices for Keycloak\n"
"mp.jwt.verify.publickey.location=${keycloak.url}/realms/quarkus/protocol/openid-connect/certs\n"
"mp.jwt.verify.issuer=${keycloak.url}/realms/quarkus\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:829
msgid "Note that the tokens issued by Keycloak have an `iss` (issuer) claim set to the realm endpoint address."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:831
msgid "If your Quarkus application is running in a docker container, it may share a network interface with a Keycloak docker container launched by DevServices for Keycloak, with the Quarkus application and Keycloak communicating with each other via an internal shared docker network."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:833
msgid "In such cases, use the following configuration instead:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:839
#, no-wrap
msgid ""
"# keycloak.url is set by DevServices for Keycloak,\n"
"# Quarkus will access it via an internal shared docker network interface.\n"
"mp.jwt.verify.publickey.location=${keycloak.url}/realms/quarkus/protocol/openid-connect/certs\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:842
#, no-wrap
msgid ""
"# Issuer is set to the docker bridge localhost endpoint address represented by the `client.quarkus.oidc.auth-server-url` property\n"
"mp.jwt.verify.issuer=${client.quarkus.oidc.auth-server-url}\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/security-jwt.adoc:845
#, no-wrap
msgid "Local Public Key"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:848
msgid "You can use the same approach as described in the xref:security-oidc-bearer-token-authentication.adoc#integration-testing[OpenID Connect Bearer Token Integration testing] `Local Public Key` section but only change the `application.properties` to use MP JWT configuration properties instead:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:854
#, no-wrap
msgid ""
"mp.jwt.verify.publickey=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlivFI8qB4D0y2jy0CfEqFyy46R0o7S8TKpsx5xbHKoU1VWg6QkQm+ntyIv1p4kE1sPEQO73+HY8+Bzs75XwRTYL1BmR1w8J5hmjVWjc6R2BTBGAYRPFRhor3kpM6ni2SPmNNhurEAHw7TaqszP5eUF/F9+KEBWkwVta+PZ37bwqSE4sCb1soZFrVz/UT/LF4tYpuVYt3YbqToZ3pZOZ9AX2o1GCG3xwOjkc4x0W7ezbQZdC9iftPxVHR8irOijJRRjcPDtA6vPKpzLl6CyYnsIYPd99ltwxTHjr3npfv/3Lw50bAkbT4HeLFxTx4flEoZLKO/g0bAoV2uqBhkA9xnQIDAQAB\n"
"# set it to the issuer value which is used to generate the tokens\n"
"mp.jwt.verify.issuer=${keycloak.url}/realms/quarkus\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:857
#, no-wrap
msgid ""
"# required to sign the tokens\n"
"smallrye.jwt.sign.key.location=privateKey.pem\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/security-jwt.adoc:860
#, no-wrap
msgid "TestSecurity annotation"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:863
msgid "Add the following dependency:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:872
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-security-jwt</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:878
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-test-security-jwt\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:881
msgid "and write a test code like this one:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:892
#, no-wrap
msgid ""
"import static org.hamcrest.Matchers.is;\n"
"import org.junit.jupiter.api.Test;\n"
"import io.quarkus.test.common.http.TestHTTPEndpoint;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.security.TestSecurity;\n"
"import io.quarkus.test.security.jwt.Claim;\n"
"import io.quarkus.test.security.jwt.JwtSecurity;\n"
"import io.restassured.RestAssured;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:896
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@TestHTTPEndpoint(ProtectedResource.class)\n"
"public class TestSecurityAuthTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:903
#, no-wrap
msgid ""
"    @Test\n"
"    @TestSecurity(user = \"userJwt\", roles = \"viewer\")\n"
"    public void testJwt() {\n"
"        RestAssured.when().get(\"test-security-jwt\").then()\n"
"                .body(is(\"userJwt:viewer\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:913
#, no-wrap
msgid ""
"    @Test\n"
"    @TestSecurity(user = \"userJwt\", roles = \"viewer\")\n"
"    @JwtSecurity(claims = {\n"
"            @Claim(key = \"email\", value = \"user@gmail.com\")\n"
"    })\n"
"    public void testJwtWithClaims() {\n"
"        RestAssured.when().get(\"test-security-jwt-claims\").then()\n"
"                .body(is(\"userJwt:viewer:user@gmail.com\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:915
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:918
msgid "where `ProtectedResource` class may look like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:924
#, no-wrap
msgid ""
"@Path(\"/web-app\")\n"
"@Authenticated\n"
"public class ProtectedResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:927
#, no-wrap
msgid ""
"    @Inject\n"
"    JsonWebToken accessToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:933
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"test-security-jwt\")\n"
"    public String testSecurityOidc() {\n"
"        return accessToken.getName() + \":\" + accessToken.getGroups().iterator().next();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:941
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"test-security-jwt-claims\")\n"
"    public String testSecurityOidcUserInfoMetadata() {\n"
"        return accessToken.getName() + \":\" + accessToken.getGroups().iterator().next()\n"
"                + \":\" + accessToken.getClaim(\"email\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:945
msgid "Note that `@TestSecurity` annotation must always be used and its `user` property is returned as `JsonWebToken.getName()` and `roles` property - as `JsonWebToken.getGroups()`.  `@JwtSecurity` annotation is optional and can be used to set the additional token claims."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/security-jwt.adoc:949
msgid "`@TestSecurity` and `@JwtSecurity` can be combined in a meta-annotation, as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:961
#, no-wrap
msgid ""
"    @Retention(RetentionPolicy.RUNTIME)\n"
"    @Target({ ElementType.METHOD })\n"
"    @TestSecurity(user = \"userOidc\", roles = \"viewer\")\n"
"    @OidcSecurity(introspectionRequired = true,\n"
"        introspection = {\n"
"            @TokenIntrospection(key = \"email\", value = \"user@gmail.com\")\n"
"        }\n"
"    )\n"
"    public @interface TestSecurityMetaAnnotation {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:963
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:966
msgid "This is particularly useful if the same set of security settings needs to be used in multiple test methods."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-jwt.adoc:968
#, no-wrap
msgid "How to check the errors in the logs"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/security-jwt.adoc:971
msgid "Please enable `io.quarkus.smallrye.jwt.runtime.auth.MpJwtValidator` `TRACE` level logging to see more details about the token verification or decryption errors:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:976
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.smallrye.jwt.runtime.auth.MpJwtValidator\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.smallrye.jwt.runtime.auth.MpJwtValidator\".min-level=TRACE\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-jwt.adoc:978
#, no-wrap
msgid "Proactive Authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:981
msgid "If you'd like to skip the token verification when the public endpoint methods are invoked, disable the xref:security-proactive-authentication.adoc[proactive authentication]."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:983
msgid "Note that you can't access the injected `JsonWebToken` in the public methods if the token verification has not been done."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-jwt.adoc:985
#, no-wrap
msgid "How to Add SmallRye JWT directly"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:988
msgid "To xref:jwt-parser[parse and verify JsonWebToken with JWTParser], use `smallrye-jwt` instead of `quarkus-smallrye-jwt` directly for the following situations:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:990
msgid "You work with Quarkus extensions that do not support `HTTP`, such as `Quarkus GRPC`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:991
msgid "You provide an extension-specific `HTTP`, the support of which conflicts with the support of those offered by `quarkus-smallrye-jwt` and `Vert.x HTTP`, such as `Quarkus Amazon Lambda`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:993
msgid "Start with adding the `smallrye-jwt` dependency:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:1001
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.smallrye</groupId>\n"
"    <artifactId>smallrye-jwt</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:1007
#, no-wrap
msgid "implementation(\"io.smallrye:smallrye-jwt\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:1010
msgid "and update `application.properties` to get all the CDI producers provided by `smallrye-jwt` included as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-jwt.adoc:1015
#, no-wrap
msgid ""
"quarkus.index-dependency.smallrye-jwt.group-id=io.smallrye\n"
"quarkus.index-dependency.smallrye-jwt.artifact-id=smallrye-jwt\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/security-jwt.adoc:1018
#, no-wrap
msgid "Configuration Reference"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-jwt.adoc:1020
#, no-wrap
msgid "Quarkus configuration"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-jwt.adoc:1024
#, no-wrap
msgid "MicroProfile JWT configuration"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1028
#: upstream/_versions/3.2/guides/security-jwt.adoc:1047
#, no-wrap
msgid "Property Nam"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1028
#: upstream/_versions/3.2/guides/security-jwt.adoc:1047
#, no-wrap
msgid "Default"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1029
#: upstream/_versions/3.2/guides/security-jwt.adoc:1048
#, no-wrap
msgid "Description"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1029
#, no-wrap
msgid "mp.jwt.verify.publickey"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1029
#: upstream/_versions/3.2/guides/security-jwt.adoc:1030
#: upstream/_versions/3.2/guides/security-jwt.adoc:1032
#: upstream/_versions/3.2/guides/security-jwt.adoc:1033
#: upstream/_versions/3.2/guides/security-jwt.adoc:1034
#: upstream/_versions/3.2/guides/security-jwt.adoc:1038
#: upstream/_versions/3.2/guides/security-jwt.adoc:1054
#: upstream/_versions/3.2/guides/security-jwt.adoc:1057
#: upstream/_versions/3.2/guides/security-jwt.adoc:1058
#: upstream/_versions/3.2/guides/security-jwt.adoc:1060
#: upstream/_versions/3.2/guides/security-jwt.adoc:1061
#: upstream/_versions/3.2/guides/security-jwt.adoc:1062
#: upstream/_versions/3.2/guides/security-jwt.adoc:1064
#: upstream/_versions/3.2/guides/security-jwt.adoc:1068
#: upstream/_versions/3.2/guides/security-jwt.adoc:1069
#: upstream/_versions/3.2/guides/security-jwt.adoc:1070
#: upstream/_versions/3.2/guides/security-jwt.adoc:1072
#: upstream/_versions/3.2/guides/security-jwt.adoc:1073
#: upstream/_versions/3.2/guides/security-jwt.adoc:1074
#: upstream/_versions/3.2/guides/security-jwt.adoc:1076
#: upstream/_versions/3.2/guides/security-jwt.adoc:1077
#, no-wrap
msgid "non"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1030
#, no-wrap
msgid "The `mp.jwt.verify.publickey` config property allows the Public Key text itself to be supplied as a string.  The Public Key will be parsed from the supplied string in the order defined in the xref:supported-public-key-formats[Supported Public Key Formats] section."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1030
#, no-wrap
msgid "mp.jwt.verify.publickey.location"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1031
#, no-wrap
msgid "Config property allows for an external or internal location of Public Key to be specified.  The value may be a relative path or a URL. If the value points to an HTTPS based JWK set then, for it to work in native mode, the `quarkus.ssl.native` property must also be set to `true`, see xref:native-and-ssl.adoc[Using SSL With Native Executables] for more details."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1031
#, no-wrap
msgid "mp.jwt.verify.publickey.algorith"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1031
#, no-wrap
msgid "`RS256`"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1032
#, no-wrap
msgid "Signature algorithm. Set it to `ES256` to support the Elliptic Curve signature algorithm."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1032
#, no-wrap
msgid "mp.jwt.decrypt.key.location"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1033
#, no-wrap
msgid "Config property allows for an external or internal location of Private Decryption Key to be specified."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1033
#, no-wrap
msgid "mp.jwt.verify.issuer"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1034
#, no-wrap
msgid "Config property specifies the value of the `iss` (issuer) claim of the JWT that the server will accept as valid."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1034
#, no-wrap
msgid "mp.jwt.verify.audience"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1035
#, no-wrap
msgid "Comma separated list of the audiences that a token `aud` claim may contain."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1035
#, no-wrap
msgid "mp.jwt.verify.clock.skew"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1035
#, no-wrap
msgid "`60`"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1036
#, no-wrap
msgid "Clock skew in seconds used during the token expiration and age verification. An expired token is accepted if the current time is within the number of seconds specified by this property after the token expiration time. The default value is 60 seconds."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1036
#, no-wrap
msgid "mp.jwt.verify.token.ag"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1036
#, no-wrap
msgid "`none`"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1037
#, no-wrap
msgid "Number of seconds that must not elapse since the token `iat` (issued at) time."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1037
#, no-wrap
msgid "mp.jwt.token.header"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1037
#: upstream/_versions/3.2/guides/security-jwt.adoc:1053
#, no-wrap
msgid "`Authorization`"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1038
#, no-wrap
msgid "Set this property if another header such as `Cookie` is used to pass the token."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1038
#, no-wrap
msgid "mp.jwt.token.cooki"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1039
#, no-wrap
msgid "Name of the cookie containing a token. This property will be effective only if `mp.jwt.token.header` is set to `Cookie`."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-jwt.adoc:1041
#, no-wrap
msgid "Additional SmallRye JWT configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:1044
msgid "SmallRye JWT provides more properties which can be used to customize the token processing:"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1048
#, no-wrap
msgid "smallrye.jwt.verify.key.location"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1048
#, no-wrap
msgid "NONE"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1049
#, no-wrap
msgid "Location of the verification key which can point to both public and secret keys. Secret keys can only be in the JWK format. Note that 'mp.jwt.verify.publickey.location' will be ignored if this property is set."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1049
#, no-wrap
msgid "smallrye.jwt.verify.algorith"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1050
#, no-wrap
msgid "Signature algorithm. This property should only be used for setting a required symmetric algorithm such as `HS256`. It is deprecated for setting asymmetric algorithms such as `ES256` - use 'mp.jwt.verify.publickey.algorithm' instead."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1050
#, no-wrap
msgid "smallrye.jwt.verify.key-format"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1050
#, no-wrap
msgid "`ANY`"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1051
#, no-wrap
msgid "Set this property to a specific key format such as `PEM_KEY`, `PEM_CERTIFICATE`, `JWK` or `JWK_BASE64URL` to optimize the way the verification key is loaded."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1051
#, no-wrap
msgid "smallrye.jwt.verify.relax-key-validation"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1051
#: upstream/_versions/3.2/guides/security-jwt.adoc:1052
#: upstream/_versions/3.2/guides/security-jwt.adoc:1055
#: upstream/_versions/3.2/guides/security-jwt.adoc:1075
#, no-wrap
msgid "fals"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1052
#, no-wrap
msgid "Relax the validation of the verification keys, setting this property to `true` will allow public RSA keys with the length less than 2048 bit."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1052
#, no-wrap
msgid "smallrye.jwt.verify.certificate-thumbprint"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1053
#, no-wrap
msgid "If this property is enabled then a signed token must contain either 'x5t' or 'x5t#S256' X509Certificate thumbprint headers. Verification keys can only be in JWK or PEM Certificate key formats in this case. JWK keys must have a 'x5c' (Base64-encoded X509Certificate) property set."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1053
#, no-wrap
msgid "smallrye.jwt.token.header"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1054
#, no-wrap
msgid "Set this property if another header such as `Cookie` is used to pass the token. This property is deprecated - use 'mp.jwt.token.header'."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1054
#, no-wrap
msgid "smallrye.jwt.token.cooki"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1055
#, no-wrap
msgid "Name of the cookie containing a token. This property will be effective only if `smallrye.jwt.token.header` is set to `Cookie`. This property is deprecated - use 'mp.jwt.token.cookie`."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1055
#, no-wrap
msgid "smallrye.jwt.always-check-authorization"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1056
#, no-wrap
msgid "Set this property to `true` for `Authorization` header be checked even if the `smallrye.jwt.token.header` is set to `Cookie` but no cookie with a `smallrye.jwt.token.cookie` name exists."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1056
#, no-wrap
msgid "smallrye.jwt.token.scheme"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1056
#, no-wrap
msgid "`Bearer`"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1057
#, no-wrap
msgid "Comma-separated list containing an alternative single or multiple schemes, for example, `DPoP`."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1057
#, no-wrap
msgid "smallrye.jwt.token.ki"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1058
#, no-wrap
msgid "Key identifier. If it is set then the verification JWK key as well every JWT token must have a matching `kid` header."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1058
#, no-wrap
msgid "smallrye.jwt.time-to-liv"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1059
#, no-wrap
msgid "The maximum number of seconds that a JWT may be issued for use. Effectively, the difference between the expiration date of the JWT and the issued at date must not exceed this value. Setting this property to a non-positive value relaxes the requirement for the token to have a valid 'iat' (issued at) claim."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1059
#, no-wrap
msgid "smallrye.jwt.require.named-principa"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1059
#, no-wrap
msgid "`true`"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1060
#, no-wrap
msgid "If an application relies on `java.security.Principal` returning a name then a token must have a `upn` or `preferred_username` or `sub` claim set. Setting this property will result in SmallRye JWT throwing an exception if none of these claims is available for the application code to reliably deal with a non-null `Principal` name."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1060
#, no-wrap
msgid "smallrye.jwt.path.sub"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1061
#, no-wrap
msgid "Path to the claim containing the subject name. It starts from the top level JSON object and can contain multiple segments where each segment represents a JSON object name only, example: `realms/subject`. This property can be used if a token has no 'sub' claim but has the subject set in a different claim. Use double quotes with the namespace qualified claims."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1061
#, no-wrap
msgid "smallrye.jwt.claims.sub"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1062
#, no-wrap
msgid "This property can be used to set a default sub claim value when the current token has no standard or custom `sub` claim available. Effectively this property can be used to customize `java.security.Principal` name if no `upn` or `preferred_username` or `sub` claim is set."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1062
#, no-wrap
msgid "smallrye.jwt.path.group"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1063
#, no-wrap
msgid "Path to the claim containing the groups. It starts from the top level JSON object and can contain multiple segments where each segment represents a JSON object name only, example: `realm/groups`. This property can be used if a token has no 'groups' claim but has the groups set in a different claim. Use double quotes with the namespace qualified claims."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1063
#, no-wrap
msgid "smallrye.jwt.groups-separator"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1063
#, no-wrap
msgid "' '"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1064
#, no-wrap
msgid "Separator for splitting a string which may contain multiple group values. It will only be used if the `smallrye.jwt.path.groups` property points to a custom claim whose value is a string. The default value is a single space because a standard OAuth2 `scope` claim may contain a space separated sequence."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1064
#, no-wrap
msgid "smallrye.jwt.claims.group"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1065
#, no-wrap
msgid "This property can be used to set a default groups claim value when the current token has no standard or custom groups claim available."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1065
#, no-wrap
msgid "smallrye.jwt.jwks.refresh-interva"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1065
#, no-wrap
msgid "60"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1066
#, no-wrap
msgid "JWK cache refresh interval in minutes. It will be ignored unless the `mp.jwt.verify.publickey.location` points to the HTTP or HTTPS URL based JWK set and no HTTP `Cache-Control` response header with a positive `max-age` parameter value is returned from a JWK HTTPS endpoint."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1066
#, no-wrap
msgid "smallrye.jwt.jwks.forced-refresh-interva"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1066
#, no-wrap
msgid "30"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1067
#, no-wrap
msgid "Forced JWK cache refresh interval in minutes which is used to restrict the frequency of the forced refresh attempts which may happen when the token verification fails due to the cache having no JWK key with a `kid` property matching the current token's `kid` header. It will be ignored unless the `mp.jwt.verify.publickey.location` points to the HTTP or HTTPS URL based JWK set."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1067
#, no-wrap
msgid "smallrye.jwt.expiration.grac"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1067
#, no-wrap
msgid "0"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1068
#, no-wrap
msgid "Expiration grace in seconds. By default an expired token will still be accepted if the current time is no more than 1 min after the token expiry time. This property is deprecated. Use `mp.jwt.verify.clock.skew` instead."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1068
#, no-wrap
msgid "smallrye.jwt.verify.au"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1069
#, no-wrap
msgid "Comma separated list of the audiences that a token `aud` claim may contain. This property is deprecated - use `mp.jwt.verify.audiences`."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1069
#, no-wrap
msgid "smallrye.jwt.required.claim"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1070
#, no-wrap
msgid "Comma separated list of the claims that a token must contain."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1070
#, no-wrap
msgid "smallrye.jwt.decrypt.key.location"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1071
#, no-wrap
msgid "Config property allows for an external or internal location of Private Decryption Key to be specified. This property is deprecated - use 'mp.jwt.decrypt.key.location'."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1071
#, no-wrap
msgid "smallrye.jwt.decrypt.algorith"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1071
#, no-wrap
msgid "`RSA_OAEP`"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1072
#, no-wrap
msgid "Decryption algorithm."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1072
#, no-wrap
msgid "smallrye.jwt.decrypt.key"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1073
#, no-wrap
msgid "Decryption key supplied as a string."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1073
#, no-wrap
msgid "smallrye.jwt.token.decryption.ki"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1074
#, no-wrap
msgid "Decryption Key identifier. If it is set then the decryption JWK key as well every JWT token must have a matching `kid` header."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1074
#, no-wrap
msgid "smallrye.jwt.client.tls.certificate.pat"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1075
#, no-wrap
msgid "Path to TLS trusted certificate which may need to be configured if the keys have to be fetched over `HTTPS`."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1075
#, no-wrap
msgid "smallrye.jwt.client.tls.trust-al"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1076
#, no-wrap
msgid "Trust all the hostnames. If the keys have to be fetched over `HTTPS` and this property is set to `true` then all the hostnames are trusted by default."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1076
#, no-wrap
msgid "smallrye.jwt.client.tls.host"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1077
#, no-wrap
msgid "Set of trusted hostnames. If the keys have to be fetched over `HTTPS` and `smallrye.jwt.client.tls.trust-all` is set to `false` then this property can be used to configure the trusted hostnames."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1077
#, no-wrap
msgid "smallrye.jwt.http.proxy.host"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1078
#, no-wrap
msgid "HTTP proxy host."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1078
#, no-wrap
msgid "smallrye.jwt.http.proxy.port"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1078
#, no-wrap
msgid "80"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1079
#, no-wrap
msgid "HTTP proxy port."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1079
#, no-wrap
msgid "smallrye.jwt.keystore.typ"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1079
#, no-wrap
msgid "`JKS`"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1080
#, no-wrap
msgid "This property can be used to customize a keystore type if either `mp.jwt.verify.publickey.location` or mp.jwt.decrypt.key.location` points to a `KeyStore` file. If it is not set then the file name will be checked to determine the keystore type before defaulting to `JKS`."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1080
#, no-wrap
msgid "smallrye.jwt.keystore.provider"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1081
#, no-wrap
msgid "This property can be used to customize a `KeyStore` provider if `mp.jwt.verify.publickey.location` or `mp.jwt.decrypt.key.location` points to a `KeyStore` file."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1081
#, no-wrap
msgid "smallrye.jwt.keystore.passwor"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1082
#, no-wrap
msgid "Keystore password. If `mp.jwt.verify.publickey.location` or `mp.jwt.decrypt.key.location` then this property has be set."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1082
#, no-wrap
msgid "smallrye.jwt.keystore.verify.key.alia"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1083
#, no-wrap
msgid "This property has to be set to identify a public verification key which will be extracted from `KeyStore` from a matching certificate if `mp.jwt.verify.publickey.location` points to a `KeyStore` file."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1083
#, no-wrap
msgid "smallrye.jwt.keystore.decrypt.key.alia"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1084
#, no-wrap
msgid "This property has to be set to identify a private decryption key if `mp.jwt.decrypt.key.location` points to a `KeyStore` file."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1084
#, no-wrap
msgid "smallrye.jwt.keystore.decrypt.key.passwor"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-jwt.adoc:1085
#, no-wrap
msgid "This property may be set if a private decryption key's password in `KeyStore` is different to `smallrye.jwt.keystore.password` when `mp.jwt.decrypt.key.location` points to a `KeyStore` file."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/security-jwt.adoc:1087
#, no-wrap
msgid "References"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:1090
msgid "link:https://download.eclipse.org/microprofile/microprofile-jwt-auth-1.2/microprofile-jwt-auth-spec-1.2.html[MP JWT 1.2 HTML]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:1091
msgid "link:https://download.eclipse.org/microprofile/microprofile-jwt-auth-1.2/microprofile-jwt-auth-spec-1.2.pdf[MP JWT 1.2 PDF]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:1092
msgid "link:https://github.com/smallrye/smallrye-jwt[SmallRye JWT]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:1093
msgid "link:https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:1094
msgid "link:https://tools.ietf.org/html/rfc7515[JSON Web Signature]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:1095
msgid "link:https://tools.ietf.org/html/rfc7516[JSON Web Encryption]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:1096
msgid "link:https://tools.ietf.org/html/rfc7518[JSON Web Algorithms]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:1097
msgid "xref:security-jwt-build.adoc[Sign and encrypt JWT tokens with SmallRye JWT Build]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:1098
msgid "xref:security-authentication-mechanisms.adoc#combining-authentication-mechanisms[Combining authentication mechanisms]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-jwt.adoc:1098
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr ""
