# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:09+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:6
#, no-wrap
msgid "Amazon Lambda"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:13
msgid "The `quarkus-amazon-lambda` extension allows you to use Quarkus to build your AWS Lambdas.  Your lambdas can use injection annotations from CDI or Spring and other Quarkus facilities as you need them."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:16
msgid "Quarkus lambdas can be deployed using the Amazon Java Runtime, or you can build a native executable and use Amazon's Custom Runtime if you want a smaller memory footprint and faster cold boot startup time."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:19
msgid "Quarkus's integration with lambdas also supports Quarkus's Live Coding development cycle.  You can bring up your Quarkus lambda project in dev or test mode and code on your project live."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:20
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:25
msgid "https://aws.amazon.com[An Amazon AWS account]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:26
msgid "https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html[AWS CLI]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:27
msgid "https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI], for local testing"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:29
msgid "For Gradle projects please xref:gradle[see below], or for further reference consult the guide in the xref:gradle-tooling.adoc[Gradle setup page]."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:30
#, no-wrap
msgid "Getting Started"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:33
msgid "This guide walks you through generating an example Java project via a maven archetype and deploying it to AWS."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:34
#, no-wrap
msgid "Installing AWS bits"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:38
msgid "Installing all the AWS bits is probably the most difficult thing about this guide.  Make sure that you follow all the steps for installing AWS CLI."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:39
#, no-wrap
msgid "Creating the Maven Deployment Project"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:42
msgid "Create the Quarkus AWS Lambda maven project using our Maven Archetype."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:50
#, no-wrap
msgid ""
"mvn archetype:generate \\\n"
"       -DarchetypeGroupId=io.quarkus \\\n"
"       -DarchetypeArtifactId=quarkus-amazon-lambda-archetype \\\n"
"       -DarchetypeVersion={quarkus-version}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:56
msgid "If you prefer to use Gradle, you can quickly and easily generate a Gradle project via https://code.quarkus.io/[code.quarkus.io] adding the `quarkus-amazon-lambda` extension as a dependency."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:58
msgid "Copy the build.gradle, gradle.properties and settings.gradle into the above-generated Maven archetype project, to follow along with this guide."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:60
msgid "Execute: gradle wrapper to set up the gradle wrapper (recommended)."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:62
msgid "For full Gradle details, see the xref:gradle[Gradle build] section below."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:65
#, no-wrap
msgid "Choose Your Lambda"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:70
msgid "The `quarkus-amazon-lambda` extension scans your project for a class that directly implements the Amazon `RequestHandler<?, ?>` or `RequestStreamHandler` interface.  It must find a class in your project that implements this interface, or it will throw a build time failure.  If it finds more than one handler class, a build time exception will also be thrown."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:74
msgid "Sometimes, though, you might have a few related lambdas that share code and creating multiple maven modules is just an overhead you don't want to do.  The `quarkus-amazon-lambda` extension allows you to bundle multiple lambdas in one project and use configuration or an environment variable to pick the handler you want to deploy."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:77
msgid "The generated project has three lambdas within it.  Two that implement the `RequestHandler<?, ?>` interface, and one that implements the `RequestStreamHandler` interface. One that is used and two that are unused.  If you open up `src/main/resources/application.properties` you'll see this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:81
#, no-wrap
msgid "quarkus.lambda.handler=test\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:85
msgid "The `quarkus.lambda.handler` property tells Quarkus which lambda handler to deploy. This can be overridden with an environment variable too."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:87
msgid "If you look at the three generated handler classes in the project, you'll see that they are `@Named` differently."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:93
#, no-wrap
msgid ""
"@Named(\"test\")\n"
"public class TestLambda implements RequestHandler<InputObject, OutputObject> {\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:97
#, no-wrap
msgid ""
"@Named(\"unused\")\n"
"public class UnusedLambda implements RequestHandler<InputObject, OutputObject> {\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:101
#, no-wrap
msgid ""
"@Named(\"stream\")\n"
"public class StreamLambda implements RequestStreamHandler {\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:104
msgid "The CDI name of the handler class must match the value specified within the `quarkus.lambda.handler` property."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:106
#, no-wrap
msgid "Deploy to AWS Lambda Java Runtime"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:110
msgid "There are a few steps to get your lambda running on AWS.  The generated maven project contains a helpful script to create, update, delete, and invoke your lambdas for pure Java and native deployments."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:111
#, no-wrap
msgid "Build and Deploy"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:114
msgid "Build the project:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:118
msgid "This will compile and package your code."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:119
#, no-wrap
msgid "Create an Execution Role"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:125
msgid "View the https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-awscli.html[Getting Started Guide] for deploying a lambda with AWS CLI.  Specifically, make sure you have created an `Execution Role`.  You will need to define a `LAMBDA_ROLE_ARN` environment variable in your profile or console window, Alternatively, you can edit the `manage.sh` script that is generated by the build and put the role value directly there:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:129
#, no-wrap
msgid "LAMBDA_ROLE_ARN=\"arn:aws:iam::1234567890:role/lambda-role\"\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:131
#, no-wrap
msgid "Extra Build Generated Files"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:135
msgid "After you run the build, there are a few extra files generated by the `quarkus-amazon-lambda` extension.  These files are in the build directory: `target/` for maven, `build/` for gradle."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:137
msgid "`function.zip` - lambda deployment file"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:138
msgid "`manage.sh` - wrapper around aws lambda cli calls"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:139
msgid "`bootstrap-example.sh` - example bootstrap script for native deployments"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:140
msgid "`sam.jvm.yaml` - (optional) for use with sam cli and local testing"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:141
msgid "`sam.native.yaml` - (optional) for use with sam cli and native local testing"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:142
#, no-wrap
msgid "Create the function"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:147
msgid "The `target/manage.sh` script is for managing your lambda using the AWS Lambda Java runtime.  This script is provided only for your convenience. Examine the output of the `manage.sh` script if you want to learn what aws commands are executed to create, delete, and update your lambdas."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:149
msgid "`manage.sh` supports four operation: `create`, `delete`, `update`, and `invoke`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:153
msgid "To verify your setup, that you have the AWS CLI installed, executed aws configure for the AWS access keys, and set up the `LAMBDA_ROLE_ARN` environment variable (as described above), please execute `manage.sh` without any parameters.  A usage statement will be printed to guide you accordingly."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:155
msgid "If using Gradle, the path to the binaries in the `manage.sh` must be changed from `target` to `build`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:157
msgid "To see the `usage` statement, and validate AWS configuration:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:160
#, no-wrap
msgid "sh target/manage.sh\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:163
msgid "You can `create` your function using the following command:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:167
#, no-wrap
msgid "sh target/manage.sh create\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:170
msgid "or if you do not have `LAMBDA_ROLE_ARN` already defined in this shell:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:174
#, no-wrap
msgid "LAMBDA_ROLE_ARN=\"arn:aws:iam::1234567890:role/lambda-role\" sh target/manage.sh create\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:178
msgid "Do not change the handler switch.  This must be hardcoded to `io.quarkus.amazon.lambda.runtime.QuarkusStreamHandler::handleRequest`.  This handler bootstraps Quarkus and wraps your actual handler so that injection can be performed."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:181
msgid "If there are any problems creating the function, you must delete it with the `delete` function before re-running the `create` command."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:185
#, no-wrap
msgid "sh target/manage.sh delete\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:188
msgid "Commands may also be stacked:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:191
#, no-wrap
msgid "sh target/manage.sh delete create\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:193
#, no-wrap
msgid "Invoke the Lambda"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:196
msgid "Use the `invoke` command to invoke your function."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:200
#, no-wrap
msgid "sh target/manage.sh invoke\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:204
msgid "The example lambda takes input passed in via the `--payload` switch which points to a json file in the root directory of the project."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:206
msgid "The lambda can also be invoked locally with the SAM CLI like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:210
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:390
#, no-wrap
msgid "sam local invoke --template target/sam.jvm.yaml --event payload.json\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:213
msgid "If you are working with your native image build, simply replace the template name with the native version:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:217
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:397
#, no-wrap
msgid "sam local invoke --template target/sam.native.yaml --event payload.json\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:219
#, no-wrap
msgid "Update the Lambda"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:223
msgid "You can update the Java code as you see fit.  Once you've rebuilt, you can redeploy your lambda by executing the `update` command."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:227
#, no-wrap
msgid "sh target/manage.sh update\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:229
#, no-wrap
msgid "Deploy to AWS Lambda Custom (native) Runtime"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:233
msgid "If you want a lower memory footprint and faster initialization times for your lambda, you can compile your Java code to a native executable.  Just make sure to rebuild your project with the `-Dnative` switch."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:235
msgid "For Linux hosts, execute:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:241
msgid "If you are building on a non-Linux system, you will need to also pass in a property instructing Quarkus to use a docker build as Amazon Lambda requires linux binaries.  You can do this by passing this property to your build: `-Dquarkus.native.container-build=true`. This requires you to have Docker installed locally, however."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:247
msgid "Either of these commands will compile and create a native executable image.  It also generates a zip file `target/function.zip`.  This zip file contains your native executable image renamed to `bootstrap`.  This is a requirement of the AWS Lambda Custom (Provided) Runtime."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:250
msgid "The instructions here are exactly as above with one change: you'll need to add `native` as the first parameter to the `manage.sh` script:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:254
#, no-wrap
msgid "sh target/manage.sh native create\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:259
msgid "As above, commands can be stacked.  The only requirement is that `native` be the first parameter should you wish to work with native image builds.  The script will take care of the rest of the details necessary to manage your native image function deployments."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:262
msgid "Examine the output of the `manage.sh` script if you want to learn what aws commands are executed to create, delete, and update your lambdas."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:265
msgid "One thing to note about the create command for native is that the `aws lambda create-function` call must set a specific environment variable:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:269
#, no-wrap
msgid "--environment 'Variables={DISABLE_SIGNAL_HANDLERS=true}'\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:271
#, no-wrap
msgid "Examine the POM and Gradle build"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:275
msgid "There is nothing special about the POM other than the inclusion of the `quarkus-amazon-lambda` extension as a dependency.  The extension automatically generates everything you might need for your lambda deployment."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:278
msgid "In previous versions of this extension, you had to set up your pom or gradle to zip up your executable for native deployments, but this is not the case anymore."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:280
#, no-wrap
msgid "Gradle build"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:284
msgid "Similarly, for Gradle projects, you also just have to add the `quarkus-amazon-lambda` dependency.  The extension automatically generates everything you might need for your lambda deployment."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:286
msgid "Example Gradle dependencies:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:293
#, no-wrap
msgid ""
"dependencies {\n"
"    implementation enforcedPlatform(\"${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}\")\n"
"    implementation 'io.quarkus:quarkus-resteasy'\n"
"    implementation 'io.quarkus:quarkus-amazon-lambda'\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:297
#, no-wrap
msgid ""
"    testImplementation 'io.quarkus:quarkus-junit5'\n"
"    testImplementation 'io.rest-assured:rest-assured'\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:300
#, no-wrap
msgid "Live Coding and Unit/Integration Testing"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:304
msgid "To mirror the AWS Lambda environment as closely as possible in a dev environment, the Quarkus Amazon Lambda extension boots up a mock AWS Lambda event server in Quarkus Dev and Test mode.  This mock event server simulates a true AWS Lambda environment."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:308
msgid "While running in Quarkus Dev Mode, you can feed events to it by doing an HTTP POST to `http://localhost:8080`.  The mock event server will receive the events and your lambda will be invoked.  You can perform live coding on your lambda and changes will automatically be recompiled and available the next invocation you make.  Here's an example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:314
#, no-wrap
msgid "$ curl -d \"{\\\"name\\\":\\\"John\\\"}\" -X POST http://localhost:8080\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:320
msgid "For your unit tests, you can also invoke on the mock event server using any HTTP client you want.  Here's an example using rest-assured.  Quarkus starts up a separate Mock Event server under port 8081.  The default port for Rest Assured is automatically set to 8081 by Quarkus, so you can invoke on this endpoint."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:325
#, no-wrap
msgid "import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:327
#, no-wrap
msgid "import io.quarkus.test.junit.QuarkusTest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:330
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.CoreMatchers.containsString;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:333
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class LambdaHandlerTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:349
#, no-wrap
msgid ""
"    @Test\n"
"    public void testSimpleLambdaSuccess() throws Exception {\n"
"        Person in = new Person();\n"
"        in.setName(\"Stu\");\n"
"        given()\n"
"                .contentType(\"application/json\")\n"
"                .accept(\"application/json\")\n"
"                .body(in)\n"
"                .when()\n"
"                .post()\n"
"                .then()\n"
"                .statusCode(200)\n"
"                .body(containsString(\"Hello Stu\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:353
msgid "The mock event server is also started for `@QuarkusIntegrationTest` tests so will work with native binaries too.  All this provides similar functionality to the SAM CLI local testing, without the overhead of Docker."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:356
msgid "Finally, if port 8080 or port 8081 is not available on your computer, you can modify the dev and test mode ports with application.properties"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:361
#, no-wrap
msgid ""
"quarkus.lambda.mock-event-server.dev-port=8082\n"
"quarkus.lambda.mock-event-server.test-port=8083\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:364
msgid "A port value of zero will result in a randomly assigned port."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:366
msgid "To turn off the mock event server:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:369
#, no-wrap
msgid "quarkus.lambda.mock-event-server.enabled=false\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:372
#, no-wrap
msgid "Testing with the SAM CLI"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:374
msgid "If you do not want to use the mock event server, you can test your lambdas with SAM CLI."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:379
msgid "The https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI] allows you to run your lambdas locally on your laptop in a simulated Lambda environment.  This requires https://www.docker.com/products/docker-desktop[docker] to be installed.  This is an optional approach should you choose to take advantage of it.  Otherwise, the Quarkus JUnit integration should be sufficient for most of your needs."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:381
msgid "A starter template has been generated for both JVM and native execution modes."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:384
msgid "Run the following SAM CLI command to locally test your lambda function, passing the appropriate SAM `template`.  The `event` parameter takes any JSON file, in this case the sample `payload.json`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:386
msgid "If using Gradle, the path to the binaries in the YAML templates must be changed from `target` to `build`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:393
msgid "The native image can also be locally tested using the `sam.native.yaml` template:"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:399
#, no-wrap
msgid "Modifying `function.zip`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:404
msgid "There are times when you may have to add some additions to the `function.zip` lambda deployment that is generated by the build.  To do this, create a `zip.jvm` or `zip.native` directory within `src/main`.  Create `zip.jvm/` if you are doing a pure Java lambda.  `zip.native/` if you are doing a native deployment."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:406
msgid "Any you files and directories you create under your zip directory will be included within `function.zip`"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:407
#, no-wrap
msgid "Custom `bootstrap` script"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:413
msgid "There are times you may want to set a specific system properties or other arguments when lambda invokes your native quarkus lambda deployment.  If you include a `bootstrap` script file within `zip.native`, the quarkus extension will automatically rename the executable to `runner` within `function.zip` and set the unix mode of the `bootstrap` script to executable."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:415
msgid "The native executable must be referenced as `runner` if you include a custom `bootstrap` script."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:417
msgid "The extension generates an example script within `target/bootstrap-example.sh`."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:418
#, no-wrap
msgid "Tracing with AWS XRay and GraalVM"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:423
msgid "If you are building native images, and want to use https://aws.amazon.com/xray[AWS X-Ray Tracing] with your lambda you will need to include `quarkus-amazon-lambda-xray` as a dependency in your pom.  The AWS X-Ray library is not fully compatible with GraalVM, so we had to do some integration work to make this work."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:425
msgid "In addition, remember to enable the AWS X-Ray tracing parameter in `manage.sh`, in the `cmd_create()` function.  This can also be set in the AWS Management Console."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:428
#, no-wrap
msgid "    --tracing-config Mode=Active\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:431
msgid "For the sam template files, add the following to the YAML function Properties."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:434
#, no-wrap
msgid "    Tracing: Active\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:438
msgid "AWS X-Ray does add many classes to your distribution, do ensure you are using at least the 256MB AWS Lambda memory size.  This is explicitly set in `manage.sh` `cmd_create()`. Whilst the native image potentially can always use a lower memory setting, it would be recommended to keep the setting the same, especially to help compare performance."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:440
#, no-wrap
msgid "Using HTTPS or SSL/TLS"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:445
msgid "If your code makes HTTPS calls (e.g. to a microservice, to an AWS service), you will need to add configuration to the native image, as GraalVM will only include the dependencies when explicitly declared.  Quarkus, by default enables this functionality on extensions that implicitly require it.  For further information, please consult the xref:native-and-ssl.adoc[Quarkus SSL guide]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:447
msgid "Open src/main/resources/application.properties and add the following line to enable SSL in your native image."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:451
#, no-wrap
msgid "quarkus.ssl.native=true\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:454
#, no-wrap
msgid "Using the AWS Java SDK v2"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:458
msgid "Quarkus now has extensions for DynamoDB, S3, SNS and SQS (more coming).  Please check link:{amazon-services-guide}[those guides] on how to use the various AWS Services with Quarkus, as opposed to wiring manually like below."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:461
msgid "With minimal integration, it is possible to leverage the AWS Java SDK v2, which can be used to invoke services such as SQS, SNS, S3 and DynamoDB."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:464
msgid "For native image, however, the URL Connection client must be preferred over the Apache HTTP Client when using synchronous mode, due to issues in the GraalVM compilation (at present)."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:466
msgid "Add `quarkus-jaxb` as a dependency in your Maven `pom.xml`, or Gradle `build.gradle` file."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:469
msgid "You must also force your AWS service client for SQS, SNS, S3 et al., to use the URL Connection client, which connects to AWS services over HTTPS, hence the inclusion of the SSL enabled property, as described in the xref:https[Using HTTPS or SSL/TLS] section above."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:475
#, no-wrap
msgid ""
"// select the appropriate client, in this case SQS, and\n"
"// insert your region, instead of XXXX, which also improves startup time over the default client\n"
"  client = SqsClient.builder().region(Region.XXXX).httpClient(software.amazon.awssdk.http.urlconnection.UrlConnectionHttpClient.builder().build()).build();\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:478
msgid "For Maven, add the following to your `pom.xml`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:485
#, no-wrap
msgid ""
"    <properties>\n"
"        <aws.sdk2.version>2.10.69</aws.sdk2.version>\n"
"    </properties>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:488
#, no-wrap
msgid ""
"    <dependencyManagement>\n"
"        <dependencies>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:496
#, no-wrap
msgid ""
"            <dependency>\n"
"                <groupId>software.amazon.awssdk</groupId>\n"
"                <artifactId>bom</artifactId>\n"
"                <version>${aws.sdk2.version}</version>\n"
"                <type>pom</type>\n"
"                <scope>import</scope>\n"
"            </dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:500
#, no-wrap
msgid ""
"        </dependencies>\n"
"    </dependencyManagement>\n"
"    <dependencies>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:505
#, no-wrap
msgid ""
"        <dependency>\n"
"            <groupId>software.amazon.awssdk</groupId>\n"
"            <artifactId>url-connection-client</artifactId>\n"
"        </dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:516
#, no-wrap
msgid ""
"        <dependency>\n"
"            <groupId>software.amazon.awssdk</groupId>\n"
"            <artifactId>apache-client</artifactId>\n"
"            <exclusions>\n"
"                <exclusion>\n"
"                    <groupId>commons-logging</groupId>\n"
"                    <artifactId>commons-logging</artifactId>\n"
"                </exclusion>\n"
"            </exclusions>\n"
"        </dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:537
#, no-wrap
msgid ""
"        <dependency>\n"
"            <groupId>software.amazon.awssdk</groupId>\n"
"            <!-- sqs/sns/s3 etc -->\n"
"            <artifactId>sqs</artifactId>\n"
"            <exclusions>\n"
"                <!-- exclude the apache-client and netty client -->\n"
"                <exclusion>\n"
"                    <groupId>software.amazon.awssdk</groupId>\n"
"                    <artifactId>apache-client</artifactId>\n"
"                </exclusion>\n"
"                <exclusion>\n"
"                    <groupId>software.amazon.awssdk</groupId>\n"
"                    <artifactId>netty-nio-client</artifactId>\n"
"                </exclusion>\n"
"                <exclusion>\n"
"                    <groupId>commons-logging</groupId>\n"
"                    <artifactId>commons-logging</artifactId>\n"
"                </exclusion>\n"
"            </exclusions>\n"
"        </dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:543
#, no-wrap
msgid ""
"        <dependency>\n"
"            <groupId>org.jboss.logging</groupId>\n"
"            <artifactId>commons-logging-jboss-logging</artifactId>\n"
"        </dependency>\n"
"    </dependencies>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:547
msgid "if you see `java.security.InvalidAlgorithmParameterException: the trustAnchors parameter must be non-empty` or similar SSL error, due to the current status of GraalVM, there is some additional work to bundle the `function.zip`, as below.  For more information, please see the xref:native-and-ssl.adoc[Quarkus Native SSL Guide]."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:548
#, no-wrap
msgid "Additional requirements for client SSL"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:551
msgid "The native executable requires some additional steps to enable client SSL that S3 and other AWS libraries need."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:553
msgid "A custom `bootstrap` script"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:554
msgid "`libsunec.so` must be added to `function.zip`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:555
msgid "`cacerts` must be added to `function.zip`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:558
msgid "To do this, first create a directory `src/main/zip.native/` with your build.  Next create a shell script file called `bootstrap` within `src/main/zip.native/`, like below. An example is created automatically in your build folder (target or build), called `bootstrap-example.sh`"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:562
#, no-wrap
msgid "#!/usr/bin/env bash\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:564
#, no-wrap
msgid "./runner -Djava.library.path=./ -Djavax.net.ssl.trustStore=./cacerts\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:567
msgid "Additional set `-Djavax.net.ssl.trustStorePassword=changeit` if your `cacerts` file is password protected."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:569
msgid "Next you must copy some files from your GraalVM distribution into `src/main/zip.native/`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:571
msgid "GraalVM versions can have different paths for these files whether you are using the Java 8 or 11 version. Adjust accordingly."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:576
#, no-wrap
msgid ""
"cp $GRAALVM_HOME/lib/libsunec.so $PROJECT_DIR/src/main/zip.native/\n"
"cp $GRAALVM_HOME/lib/security/cacerts $PROJECT_DIR/src/main/zip.native/\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:579
msgid "Now when you run the native build all these files will be included within `function.zip`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:581
msgid "If you are using a Docker image to build, then you must extract these files from this image."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:583
msgid "To extract the required ssl, you must start up a Docker container in the background, and attach to that container to copy the artifacts."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:585
msgid "First, let's start the GraalVM container, noting the container id output."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:588
#, no-wrap
msgid "docker run -it -d --entrypoint bash quay.io/quarkus/ubi-quarkus-mandrel-builder-image:{mandrel-flavor}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:591
#, no-wrap
msgid ""
"# This will output a container id, like 6304eea6179522aff69acb38eca90bedfd4b970a5475aa37ccda3585bc2abdde\n"
"# Note this value as we will need it for the commands below\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:594
msgid "First, `libsunec.so`, the C library used for the SSL implementation:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:598
#, no-wrap
msgid "docker cp {container-id-from-above}:/opt/graalvm/lib/libsunec.so src/main/zip.native/\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:601
msgid "Second, `cacerts`, the certificate store.  You may need to periodically obtain an updated copy, also."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:604
#, no-wrap
msgid "docker cp {container-id-from-above}:/opt/graalvm/lib/security/cacerts src/main/zip.native/\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:607
msgid "Your final archive will look like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:610
#, no-wrap
msgid "jar tvf target/function.zip\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:615
#, no-wrap
msgid ""
"    bootstrap\n"
"    runner\n"
"    cacerts\n"
"    libsunec.so\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:617
#, no-wrap
msgid "Deploy to AWS Lambda using a Container Image"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:620
msgid "AWS Lambda supports creating your lambdas by referencing https://docs.aws.amazon.com/lambda/latest/dg/lambda-images.html[container images] rather than uploading ZIP files. This can have some benefits such as bypassing the size limit of the uploaded ZIP files. You can define lambda functions for both native builds and regular JVM builds."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:621
#, no-wrap
msgid "JVM container image"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:624
msgid "For a regular JVM distribution you need to base your image off the official AWS Java base images. Below is an example of a Dockerfile that would create a container image from your Quarkus Lambda project. It assumes that `mvn package` has been executed and binaries are available in the `target/` directory:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:628
#, no-wrap
msgid "FROM  public.ecr.aws/lambda/java:11\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:631
#, no-wrap
msgid ""
"ADD target/my-service-0.0.1-SNAPSHOT-runner.jar /var/task/lib/my-service.jar\n"
"ADD target/lib/  /var/task/lib/\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:633
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:647
#, no-wrap
msgid "CMD [\"io.quarkus.amazon.lambda.runtime.QuarkusStreamHandler::handleRequest\"]\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:635
#, no-wrap
msgid "Native executable container image"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:638
msgid "To create a lambda container image that uses the native executable we'll need to do things a little differently. In this case, we won't need to use the `java:11` base image from AWS, but instead we'll use a special image that assumes that the runtime environment for the lambda is provided. The example below creates such a container. It assumes that a Maven build has been executed (such as `mvn package -Dnative=true`) and has generated the native binary into the `target/` directory. The binary needs to be named `bootstrap` and be placed in `/var/runtime/`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:642
#, no-wrap
msgid "FROM  public.ecr.aws/lambda/provided\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:645
#, no-wrap
msgid ""
"ADD target/my-service-0.0.1-SNAPSHOT-runner /var/runtime/bootstrap\n"
"RUN chmod ugo+x /var/runtime/bootstrap\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:649
#, no-wrap
msgid "Deploying a container image lambda"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:652
msgid "Below, you can see how the container images created above can be built and deployed to AWS using the `docker` and `aws` command line tools. These instructions work for both native and jvm container images and assume that the `aws` command line tool has been logged in."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:653
#, no-wrap
msgid "Build the Docker image"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:663
#, no-wrap
msgid ""
"# Assuming we are located in the root directory of the project and created a Dockerfile there\n"
"docker build .\n"
"   [output omitted]\n"
"    => exporting to image                    0.0s\n"
"    => => exporting layers                   0.0s\n"
"    => => writing image sha256:[SOME SHA]    0.0s\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:665
#, no-wrap
msgid "Create an ECR repository in the users AWS account"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:670
#, no-wrap
msgid "aws ecr create-repository --repository-name my/test/quarkus-lambda\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:672
#, no-wrap
msgid "Tag the image using your ECR registry information"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:677
#, no-wrap
msgid "docker tag [SOME SHA] [YOUR AWS ACCOUNT ID].dkr.ecr.[YOUR AWS ACCOUNT REGION].amazonaws.com/my/test/quarkus-lambda:v1\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:679
#, no-wrap
msgid "Log Docker into your ECR registry and push the Docker image to it"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:685
#, no-wrap
msgid ""
"aws ecr get-login-password --region region | docker login --username AWS --password-stdin [YOUR AWS ACCOUNT ID].dkr.ecr.[YOUR AWS ACCOUNT REGION].amazonaws.com\n"
"docker push [YOUR AWS ACCOUNT ID].dkr.ecr.[YOUR AWS ACCOUNT REGION].amazonaws.com/my/test/quarkus-lambda:v1\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:687
#, no-wrap
msgid "Create the AWS lambda function with the AWS CLI tool"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:690
msgid "Make sure you reference the image you uploaded previously (assumes that a role exists that can be used to run the lambda). Please note that it is not unlikely that for the JVM lambda function, the default memory limit of `128Mb` will not be enough to run the function. In that case, you can increase the memory limit when creating the function by providing the `--memory-size 256` parameter to your `aws lambda create-function` command. You can also adjust the function in the AWS console after you've created it."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:694
#, no-wrap
msgid "aws lambda create-function --function-name my-test-quarkus-lambda-function --package-type Image --code ImageUri=[YOUR AWS ACCOUNT ID].dkr.ecr.[YOUR AWS ACCOUNT REGION].amazonaws.com/my/test/quarkus-lambda:v1 --role arn:aws:iam::[YOUR AWS ACCOUNT ID]:role/[SOME ROLE]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:697
msgid "Now you can use the AWS console to view and test your new lambda function."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:698
#, no-wrap
msgid "Amazon Alexa Integration"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:701
msgid "To use Alexa with Quarkus native, you need to use the https://github.com/quarkiverse/quarkus-amazon-alexa[Quarkus Amazon Alexa extension hosted at the Quarkiverse Hub]."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:709
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkiverse.alexa</groupId>\n"
"    <artifactId>quarkus-amazon-alexa</artifactId>\n"
"    <version>${quarkus-amazon-alexa.version}</version> <1>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:711
msgid "Define the latest version of the extension in your POM file."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:713
msgid "Create your Alexa handler, as normal, by sub-classing the abstract `com.amazon.ask.SkillStreamHandler`, and add your request handler implementation."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:715
msgid "That's all there is to it!"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:716
#, no-wrap
msgid "SnapStart"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/amazon-lambda.adoc:718
msgid "To optimize your application for Lambda SnapStart, check xref:amazon-snapstart.adoc[the SnapStart Configuration Documentation]."
msgstr ""
