# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:10+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:7
#, no-wrap
msgid "OpenID Connect (OIDC) Bearer token authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:13
msgid "Secure HTTP access to Jakarta REST (formerly known as JAX-RS) endpoints in your application with Bearer token authentication by using the Quarkus OpenID Connect (OIDC) extension."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:14
#, no-wrap
msgid "Overview of the Bearer token authentication mechanism in Quarkus"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:17
msgid "Quarkus supports the Bearer token authentication mechanism through the Quarkus OpenID Connect (OIDC) extension."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:19
msgid "The bearer tokens are issued by OIDC and OAuth 2.0 compliant authorization servers, such as link:https://www.keycloak.org[Keycloak]."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:22
msgid "Bearer token authentication is the process of authorizing HTTP requests based on the existence and validity of a bearer token.  The bearer token provides information about the subject of the call, which is used to determine whether or not an HTTP resource can be accessed."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:24
msgid "The following diagrams outline the Bearer token authentication mechanism in Quarkus:"
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:25
#, no-wrap
msgid "Bearer token authentication mechanism in Quarkus with Single-page application"
msgstr ""

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:26
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:36
#, no-wrap
msgid "Bearer"
msgstr ""

#. type: Target for macro image
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:26
#, no-wrap
msgid "security-bearer-token-authorization-mechanism-1.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:29
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:39
msgid "The Quarkus service retrieves verification keys from the OpenID Connect provider. The verification keys are used to verify the bearer access token signatures."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:30
msgid "The Quarkus user accesses the Single-page application."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:31
msgid "The Single-page application uses Authorization Code Flow to authenticate the user and retrieve tokens from the OpenID Connect provider."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:32
msgid "The Single-page application uses the access token to retrieve the service data from the Quarkus service."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:33
msgid "The Quarkus service verifies the bearer access token signature using the verification keys, checks the token expiry date and other claims, allows the request to proceed if the token is valid, and returns the service response to the Single-page application."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:34
msgid "The Single-page application returns the same data to the Quarkus user."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:35
#, no-wrap
msgid "Bearer token authentication mechanism in Quarkus with Java or command line client"
msgstr ""

#. type: Target for macro image
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:36
#, no-wrap
msgid "security-bearer-token-authorization-mechanism-2.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:40
msgid "The Client uses `client_credentials` that requires client ID and secret or password grant, which also requires client ID, secret, user name, and password to retrieve the access token from the OpenID Connect provider."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:41
msgid "The Client uses the access token to retrieve the service data from the Quarkus service."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:42
msgid "The Quarkus service verifies the bearer access token signature using the verification keys, checks the token expiry date and other claims, allows the request to proceed if the token is valid, and returns the service response to the Client."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:45
msgid "If you need to authenticate and authorize the users using OpenID Connect Authorization Code Flow, see xref:security-oidc-code-flow-authentication.adoc[OIDC code flow mechanism for protecting web applications].  Also, if you use Keycloak and bearer tokens, see xref:security-keycloak-authorization.adoc[Using Keycloak to Centralize Authorization]."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:47
msgid "To learn about how you can protect service applications by using OIDC Bearer token authentication, see xref:security-oidc-bearer-token-authentication-tutorial.adoc[OIDC Bearer token authentication tutorial]."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:49
msgid "If you want to protect web applications by using OIDC authorization code flow authentication, see xref:security-oidc-code-flow-authentication-concept.adoc[OIDC authorization code flow authentication]."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:51
msgid "For information about how to support multiple tenants, see xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect Multi-Tenancy]."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:52
#, no-wrap
msgid "Accessing JWT claims"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:55
msgid "If you need to access JWT token claims then you can inject `JsonWebToken`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:59
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:521
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:555
#, no-wrap
msgid "package org.acme.security.openid.connect;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:67
#, no-wrap
msgid ""
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"import jakarta.inject.Inject;\n"
"import jakarta.annotation.security.RolesAllowed;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
"import jakarta.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:70
#, no-wrap
msgid ""
"@Path(\"/api/admin\")\n"
"public class AdminResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:73
#, no-wrap
msgid ""
"    @Inject\n"
"    JsonWebToken jwt;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:81
#, no-wrap
msgid ""
"    @GET\n"
"    @RolesAllowed(\"admin\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String admin() {\n"
"        return \"Access for subject \" + jwt.getSubject() + \" is granted\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:84
msgid "Injection of `JsonWebToken` is supported in `@ApplicationScoped`, `@Singleton` and `@RequestScoped` scopes however the use of `@RequestScoped` is required if the individual claims are injected as simple types, please see xref:security-jwt.adoc#supported-injection-scopes[Support Injection Scopes for JsonWebToken and Claims] for more details."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:86
#, no-wrap
msgid "User Info"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:91
msgid "Set `quarkus.oidc.authentication.user-info-required=true` if a UserInfo JSON object from the OIDC userinfo endpoint has to be requested.  A request will be sent to the OpenID Provider UserInfo endpoint and an `io.quarkus.oidc.UserInfo` (a simple `jakarta.json.JsonObject` wrapper) object will be created.  `io.quarkus.oidc.UserInfo` can be either injected or accessed as a SecurityIdentity `userinfo` attribute."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:93
#, no-wrap
msgid "Configuration Metadata"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:96
msgid "The current tenant's discovered link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenID Connect Configuration Metadata] is represented by `io.quarkus.oidc.OidcConfigurationMetadata` and can be either injected or accessed as a `SecurityIdentity` `configuration-metadata` attribute."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:98
msgid "The default tenant's `OidcConfigurationMetadata` is injected if the endpoint is public."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:99
#, no-wrap
msgid "Token Claims And SecurityIdentity Roles"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:102
msgid "SecurityIdentity roles can be mapped from the verified JWT access tokens as follows:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:105
msgid "If `quarkus.oidc.roles.role-claim-path` property is set and matching array or string claims are found then the roles are extracted from these claims.  For example, `customroles`, `customroles/array`, `scope`, `\"http://namespace-qualified-custom-claim\"/roles`, `\"http://namespace-qualified-roles\"`, etc."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:106
msgid "If `groups` claim is available then its value is used"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:108
msgid "If `realm_access/roles` or `resource_access/client_id/roles` (where `client_id` is the value of the `quarkus.oidc.client-id` property) claim is available then its value is used.  This check supports the tokens issued by Keycloak"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:110
msgid "If the token is opaque (binary) then a `scope` property from the remote token introspection response will be used."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:112
msgid "If UserInfo is the source of the roles then set `quarkus.oidc.authentication.user-info-required=true` and `quarkus.oidc.roles.source=userinfo`, and if needed, `quarkus.oidc.roles.role-claim-path`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:114
msgid "Additionally, a custom `SecurityIdentityAugmentor` can also be used to add the roles as documented in xref:security-customization.adoc#security-identity-customization[Security Identity Customization]."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:116
#, no-wrap
msgid "Token Verification And Introspection"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:121
msgid "If the token is a JWT token then, by default, it will be verified with a `JsonWebKey` (JWK) key from a local `JsonWebKeySet` retrieved from the OpenID Connect Provider's JWK endpoint. The token's key identifier `kid` header value will be used to find the matching JWK key.  If no matching `JWK` is available locally then `JsonWebKeySet` will be refreshed by fetching the current key set from the JWK endpoint. The `JsonWebKeySet` refresh can be repeated only after the `quarkus.oidc.token.forced-jwk-refresh-interval` (default is 10 minutes) expires.  If no matching `JWK` is available after the refresh then the JWT token will be sent to the OpenID Connect Provider's token introspection endpoint."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:123
msgid "If the token is opaque (it can be a binary token or an encrypted JWT token) then it will always be sent to the OpenID Connect Provider's token introspection endpoint."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:125
msgid "If you work with JWT tokens only and expect that a matching `JsonWebKey` will always be available (possibly after a key set refresh) then you should disable the token introspection:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:130
#, no-wrap
msgid ""
"quarkus.oidc.token.allow-jwt-introspection=false\n"
"quarkus.oidc.token.allow-opaque-token-introspection=false\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:133
msgid "However, there could be cases where JWT tokens must be verified via the introspection only. It can be forced by configuring an introspection endpoint address only, for example, in case of Keycloak you can do it like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:140
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.discovery-enabled=false\n"
"# Token Introspection endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/tokens/introspect\n"
"quarkus.oidc.introspection-path=/protocol/openid-connect/tokens/introspect\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:143
msgid "An advantage of this indirect enforcement of JWT tokens being only introspected remotely is that two remote call are avoided: a remote OIDC metadata discovery call followed by another remote call fetching the verification keys which will not be used, while its disavantage is that the users need to know the introspection endpoint address and configure it manually."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:145
msgid "The alternative approach is to allow discovering the OIDC metadata (which is a default option) but require that only the remote JWT introspection is performed:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:150
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.token.require-jwt-introspection-only=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:153
msgid "An advantage of this approach is that the configuration is simple and easy to understand, while its disavantage is that a remote OIDC metadata discovery call is required to discover an introspection endpoint address (though the verification keys will also not be fetched)."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:155
msgid "Note that `io.quarkus.oidc.TokenIntrospection` (a simple `jakarta.json.JsonObject` wrapper) object will be created and can be either injected or accessed as a SecurityIdentity `introspection` attribute if either JWT or opaque token has been successfully introspected."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:157
#, no-wrap
msgid "Token Introspection and UserInfo Cache"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:160
msgid "All opaque and sometimes JWT Bearer access tokens have to be remotely introspected. If `UserInfo` is also required then the same access token will be used to do a remote call to OpenID Connect Provider again. So, if `UserInfo` is required and the current access token is opaque then for every such token there will be 2 remote calls done - one to introspect it and one to get UserInfo with it, and if the token is JWT then usually only a single remote call will be needed - to get UserInfo with it."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:162
msgid "The cost of making up to 2 remote calls per every incoming bearer or code flow access token can sometimes be problematic."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:164
msgid "If it is the case in your production then it can be recommended that the token introspection and `UserInfo` data are cached for a short period of time, for example, for 3 or 5 minutes."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:166
msgid "`quarkus-oidc` provides `quarkus.oidc.TokenIntrospectionCache` and `quarkus.oidc.UserInfoCache` interfaces which can be used to implement `@ApplicationScoped` cache implementation which can be used to store and retrieve `quarkus.oidc.TokenIntrospection` and/or `quarkus.oidc.UserInfo` objects, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:175
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"@Alternative\n"
"@Priority(1)\n"
"public class CustomIntrospectionUserInfoCache implements TokenIntrospectionCache, UserInfoCache {\n"
"...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:178
msgid "Each OIDC tenant can either permit or deny storing its `quarkus.oidc.TokenIntrospection` and/or `quarkus.oidc.UserInfo` data with boolean `quarkus.oidc.\"tenant\".allow-token-introspection-cache` and `quarkus.oidc.\"tenant\".allow-user-info-cache` properties."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:180
msgid "Additionally, `quarkus-oidc` provides a simple default memory based token cache which implements both `quarkus.oidc.TokenIntrospectionCache` and `quarkus.oidc.UserInfoCache` interfaces."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:182
msgid "It can be activated and configured as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:191
#, no-wrap
msgid ""
"# 'max-size' is 0 by default so the cache can be activated by setting 'max-size' to a positive value.\n"
"quarkus.oidc.token-cache.max-size=1000\n"
"# 'time-to-live' specifies how long a cache entry can be valid for and will be used by a cleanup timer.\n"
"quarkus.oidc.token-cache.time-to-live=3M\n"
"# 'clean-up-timer-interval' is not set by default so the cleanup timer can be activated by setting 'clean-up-timer-interval'.\n"
"quarkus.oidc.token-cache.clean-up-timer-interval=1M\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:194
msgid "The default cache uses a token as a key and each entry can have `TokenIntrospection` and/or `UserInfo`. It will only keep up to a `max-size` number of entries. If the cache is full when a new entry is to be added then an attempt will be made to find a space for it by removing a single expired entry. Additionally, the cleanup timer, if activated, will periodically check for the expired entries and remove them."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:196
msgid "Please experiment with the default cache implementation or register a custom one."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:198
#, no-wrap
msgid "JSON Web Token Claim Verification"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:201
msgid "Once the bearer JWT token's signature has been verified and its `expires at` (`exp`) claim has been checked, the `iss` (`issuer`) claim value is verified next."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:204
msgid "By default, the `iss` claim value is compared to the `issuer` property which may have been discovered in the well-known provider configuration.  But if `quarkus.oidc.token.issuer` property is set then the `iss` claim value is compared to it instead."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:206
msgid "In some cases, this `iss` claim verification may not work. For example, if the discovered `issuer` property contains an internal HTTP/IP address while the token `iss` claim value contains an external HTTP/IP address. Or when a discovered `issuer` property contains the template tenant variable but the token `iss` claim value has the complete tenant-specific issuer value."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:208
msgid "In such cases you may want to consider skipping the issuer verification by setting `quarkus.oidc.token.issuer=any`. Please note that it is not recommended and should be avoided unless no other options are available:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:210
msgid "If you work with Keycloak and observe the issuer verification errors due to the different host addresses then configure Keycloak with a `KEYCLOAK_FRONTEND_URL` property to ensure the same host address is used."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:211
msgid "If the `iss` property is tenant specific in a multi-tenant deployment then you can use the `SecurityIdentity` `tenant-id` attribute to check the issuer is correct in the endpoint itself or the custom Jakarta REST filter, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:218
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.container.ContainerRequestContext;\n"
"import jakarta.ws.rs.container.ContainerRequestFilter;\n"
"import jakarta.ws.rs.ext.Provider;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:222
#, no-wrap
msgid ""
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"import io.quarkus.oidc.OidcConfigurationMetadata;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:227
#, no-wrap
msgid ""
"@Provider\n"
"public class IssuerValidator implements ContainerRequestFilter {\n"
"    @Inject\n"
"    OidcConfigurationMetadata configMetadata;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:230
#, no-wrap
msgid ""
"    @Inject JsonWebToken jwt;\n"
"    @Inject SecurityIdentity identity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:238
#, no-wrap
msgid ""
"    public void filter(ContainerRequestContext requestContext) {\n"
"        String issuer = configMetadata.getIssuer().replace(\"{tenant-id}\", identity.getAttribute(\"tenant-id\"));\n"
"        if (!issuer.equals(jwt.getIssuer())) {\n"
"            requestContext.abortWith(Response.status(401).build());\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:241
msgid "Note it is also recommended to use `quarkus.oidc.token.audience` property to verify the token `aud` (`audience`) claim value."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:243
#, no-wrap
msgid "Single Page Applications"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:247
msgid "Single Page Application (SPA) typically uses `XMLHttpRequest`(XHR) and the JavaScript utility code provided by the OpenID Connect provider to acquire a bearer token and use it to access Quarkus `service` applications."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:249
msgid "For example, here is how you can use `keycloak.js` to authenticate the users and refresh the expired tokens from the SPA:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:288
#, no-wrap
msgid ""
"<html>\n"
"<head>\n"
"    <title>keycloak-spa</title>\n"
"    <script src=\"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\"></script>\n"
"    <script src=\"http://localhost:8180/js/keycloak.js\"></script>\n"
"    <script>\n"
"        var keycloak = new Keycloak();\n"
"        keycloak.init({onLoad: 'login-required'}).success(function () {\n"
"            console.log('User is now authenticated.');\n"
"        }).error(function () {\n"
"            window.location.reload();\n"
"        });\n"
"        function makeAjaxRequest() {\n"
"            axios.get(\"/api/hello\", {\n"
"                headers: {\n"
"                    'Authorization': 'Bearer ' + keycloak.token\n"
"                }\n"
"            })\n"
"            .then( function (response) {\n"
"                console.log(\"Response: \", response.status);\n"
"            }).catch(function (error) {\n"
"                console.log('refreshing');\n"
"                keycloak.updateToken(5).then(function () {\n"
"                    console.log('Token refreshed');\n"
"                }).catch(function () {\n"
"                    console.log('Failed to refresh token');\n"
"                    window.location.reload();\n"
"                });\n"
"            });\n"
"    }\n"
"    </script>\n"
"</head>\n"
"<body>\n"
"    <button onclick=\"makeAjaxRequest()\">Request</button>\n"
"</body>\n"
"</html>\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:290
#, no-wrap
msgid "Cross Origin Resource Sharing"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:293
msgid "If you plan to consume your OpenID Connect `service` application from a Single Page Application running on a different domain, you will need to configure CORS (Cross-Origin Resource Sharing). Please read the xref:http-reference.adoc#cors-filter[HTTP CORS documentation] for more details."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:294
#, no-wrap
msgid "Provider Endpoint configuration"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:297
msgid "OIDC `service` application needs to know OpenID Connect provider's token, `JsonWebKey` (JWK) set and possibly `UserInfo` and introspection endpoint addresses."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:299
msgid "By default, they are discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc.auth-server-url`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:301
msgid "Alternatively, if the discovery endpoint is not available, or if you would like to save on the discovery endpoint round-trip, you can disable the discovery and configure them with relative path values, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:314
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.discovery-enabled=false\n"
"# Token endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/token\n"
"quarkus.oidc.token-path=/protocol/openid-connect/token\n"
"# JWK set endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/certs\n"
"quarkus.oidc.jwks-path=/protocol/openid-connect/certs\n"
"# UserInfo endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/userinfo\n"
"quarkus.oidc.user-info-path=/protocol/openid-connect/userinfo\n"
"# Token Introspection endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/tokens/introspect\n"
"quarkus.oidc.introspection-path=/protocol/openid-connect/tokens/introspect\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:316
#, no-wrap
msgid "Token Propagation"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:319
msgid "Please see xref:security-openid-connect-client-reference.adoc#token-propagation[Token Propagation] section about the Bearer access token propagation to the downstream services."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:321
#, no-wrap
msgid "Oidc Provider Client Authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:324
msgid "`quarkus.oidc.runtime.OidcProviderClient` is used when a remote request to an OpenID Connect Provider has to be done. If the bearer token has to be introspected then `OidcProviderClient` has to authenticate to the OpenID Connect Provider. Please see xref:security-oidc-code-flow-authentication.adoc#oidc-provider-client-authentication[OidcProviderClient Authentication] for more information about all the supported authentication options."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:326
#, no-wrap
msgid "Testing"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:329
msgid "Start by adding the following dependencies to your test project:"
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:331
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:358
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:482
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:574
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:685
#, no-wrap
msgid "pom.xml"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:343
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.rest-assured</groupId>\n"
"    <artifactId>rest-assured</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:346
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:368
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:492
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:584
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:695
#, no-wrap
msgid "build.gradle"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:350
#, no-wrap
msgid ""
"testImplementation(\"io.rest-assured:rest-assured\")\n"
"testImplementation(\"io.quarkus:quarkus-junit5\")\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:353
#, no-wrap
msgid "Wiremock"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:356
msgid "Add the following dependencies to your test project:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:365
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-oidc-server</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:371
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-test-oidc-server\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:374
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:613
msgid "Prepare the REST test endpoint, set `application.properties`, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:381
#, no-wrap
msgid ""
"# keycloak.url is set by OidcWiremockTestResource\n"
"quarkus.oidc.auth-server-url=${keycloak.url}/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-service-app\n"
"quarkus.oidc.application-type=service\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:384
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:624
msgid "and finally write the test code, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:388
#, no-wrap
msgid "import static org.hamcrest.Matchers.equalTo;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:390
#, no-wrap
msgid "import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:392
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:444
#, no-wrap
msgid "import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:398
#, no-wrap
msgid ""
"import io.quarkus.test.common.QuarkusTestResource;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.oidc.server.OidcWiremockTestResource;\n"
"import io.restassured.RestAssured;\n"
"import io.smallrye.jwt.build.Jwt;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:402
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(OidcWiremockTestResource.class)\n"
"public class BearerTokenAuthorizationTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:412
#, no-wrap
msgid ""
"    @Test\n"
"    public void testBearerToken() {\n"
"        RestAssured.given().auth().oauth2(getAccessToken(\"alice\", Set.of(\"user\")))\n"
"            .when().get(\"/api/users/me\")\n"
"            .then()\n"
"            .statusCode(200)\n"
"            // the test endpoint returns the name extracted from the injected SecurityIdentity Principal\n"
"            .body(\"userName\", equalTo(\"alice\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:421
#, no-wrap
msgid ""
"    private String getAccessToken(String userName, Set<String> groups) {\n"
"        return Jwt.preferredUserName(userName)\n"
"                .groups(groups)\n"
"                .issuer(\"https://server.example.com\")\n"
"                .audience(\"https://service.example.com\")\n"
"                .sign();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:424
msgid "Note that the `quarkus-test-oidc-server` extension includes a signing RSA private key file in a `JSON Web Key` (`JWK`) format and points to it with a `smallrye.jwt.sign.key.location` configuration property. It allows to use a no argument `sign()` operation to sign the token."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:427
msgid "Testing your `quarkus-oidc` `service` application with `OidcWiremockTestResource` provides the best coverage as even the communication channel is tested against the Wiremock HTTP stubs.  `OidcWiremockTestResource` will be enhanced going forward to support more complex bearer token test scenarios."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:430
msgid "If there is an immediate need for a test to define Wiremock stubs not currently supported by `OidcWiremockTestResource` one can do so via a `WireMockServer` instance injected into the test class, for example:"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:434
msgid "`OidcWiremockTestResource` does not work with `@QuarkusIntegrationTest` against Docker containers, because the Wiremock server is running in the JVM running the test, which cannot be accessed from the Docker container running the Quarkus application."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:439
#, no-wrap
msgid "package io.quarkus.it.keycloak;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:442
#, no-wrap
msgid ""
"import static com.github.tomakehurst.wiremock.client.WireMock.matching;\n"
"import static org.hamcrest.Matchers.equalTo;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:447
#, no-wrap
msgid ""
"import com.github.tomakehurst.wiremock.WireMockServer;\n"
"import com.github.tomakehurst.wiremock.client.WireMock;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:451
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.oidc.server.OidcWireMock;\n"
"import io.restassured.RestAssured;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:454
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class CustomOidcWireMockStubTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:457
#, no-wrap
msgid ""
"    @OidcWireMock\n"
"    WireMockServer wireMockServer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:463
#, no-wrap
msgid ""
"    @Test\n"
"    public void testInvalidBearerToken() {\n"
"        wireMockServer.stubFor(WireMock.post(\"/auth/realms/quarkus/protocol/openid-connect/token/introspect\")\n"
"                .withRequestBody(matching(\".*token=invalid_token.*\"))\n"
"                .willReturn(WireMock.aResponse().withStatus(400)));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:471
#, no-wrap
msgid ""
"        RestAssured.given().auth().oauth2(\"invalid_token\").when()\n"
"                .get(\"/api/users/me/bearer\")\n"
"                .then()\n"
"                .statusCode(401)\n"
"                .header(\"WWW-Authenticate\", equalTo(\"Bearer\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:474
#, no-wrap
msgid "Dev Services for Keycloak"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:478
msgid "Using xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] is recommended for the integration testing against Keycloak.  `Dev Services for Keycloak` will launch and initialize a test container: it will create a `quarkus` realm, a `quarkus-app` client (`secret` secret) and add `alice` (`admin` and `user` roles) and `bob` (`user` role) users, where all of these properties can be customized."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:480
msgid "First you need to add the following dependency:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:489
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:581
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-keycloak-server</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:495
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:587
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-test-keycloak-server\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:498
msgid "which provides a utility class `io.quarkus.test.keycloak.client.KeycloakTestClient` you can use in tests for acquiring the access tokens."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:500
msgid "Next prepare your `application.properties`. You can start with a completely empty `application.properties` as `Dev Services for Keycloak` will register `quarkus.oidc.auth-server-url` pointing to the running test container as well as `quarkus.oidc.client-id=quarkus-app` and `quarkus.oidc.credentials.secret=secret`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:502
msgid "But if you already have all the required `quarkus-oidc` properties configured then you only need to associate `quarkus.oidc.auth-server-url` with the `prod` profile for `Dev Services for Keycloak`to start a container, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:506
#, no-wrap
msgid "%prod.quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:509
msgid "If a custom realm file has to be imported into Keycloak before running the tests then you can configure `Dev Services for Keycloak` as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:514
#, no-wrap
msgid ""
"%prod.quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.keycloak.devservices.realm-path=quarkus-realm.json\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:517
msgid "Finally, write your test which will be executed in JVM mode:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:526
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.keycloak.client.KeycloakTestClient;\n"
"import io.restassured.RestAssured;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:529
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class BearerTokenAuthenticationTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:531
#, no-wrap
msgid "    KeycloakTestClient keycloakClient = new KeycloakTestClient();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:543
#, no-wrap
msgid ""
"    @Test\n"
"    public void testAdminAccess() {\n"
"        RestAssured.given().auth().oauth2(getAccessToken(\"alice\"))\n"
"                .when().get(\"/api/admin\")\n"
"                .then()\n"
"                .statusCode(200);\n"
"        RestAssured.given().auth().oauth2(getAccessToken(\"bob\"))\n"
"                .when().get(\"/api/admin\")\n"
"                .then()\n"
"                .statusCode(403);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:548
#, no-wrap
msgid ""
"    protected String getAccessToken(String userName) {\n"
"        return keycloakClient.getAccessToken(userName);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:551
msgid "and in native mode:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:557
#, no-wrap
msgid "import io.quarkus.test.junit.QuarkusIntegrationTest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:561
#, no-wrap
msgid ""
"@QuarkusIntegrationTest\n"
"public class NativeBearerTokenAuthenticationIT extends BearerTokenAuthenticationTest {\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:564
msgid "Please see xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] for more information about the way it is initialized and configured."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:566
#, no-wrap
msgid "KeycloakTestResourceLifecycleManager"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:570
msgid "If you need to do some integration testing against Keycloak then you are encouraged to do it with xref:integration-testing-keycloak-devservices[Dev Services For Keycloak].  Use `KeycloakTestResourceLifecycleManager` for your tests only if there is a good reason not to use `Dev Services for Keycloak`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:572
msgid "Start with adding the following dependency:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:590
msgid "which provides `io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager` - an implementation of `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` which starts a Keycloak container."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:592
msgid "And configure the Maven Surefire plugin as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:608
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-surefire-plugin</artifactId>\n"
"    <configuration>\n"
"        <systemPropertyVariables>\n"
"            <!-- or, alternatively, configure 'keycloak.version' -->\n"
"            <keycloak.docker.image>${keycloak.docker.image}</keycloak.docker.image>\n"
"            <!--\n"
"              Disable HTTPS if required:\n"
"              <keycloak.use.https>false</keycloak.use.https>\n"
"            -->\n"
"        </systemPropertyVariables>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:611
msgid "(and similarly `maven.failsafe.plugin` when testing in native image)."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:621
#, no-wrap
msgid ""
"# keycloak.url is set by KeycloakTestResourceLifecycleManager\n"
"quarkus.oidc.auth-server-url=${keycloak.url}/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-service-app\n"
"quarkus.oidc.credentials=secret\n"
"quarkus.oidc.application-type=service\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:629
#, no-wrap
msgid ""
"import static io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager.getAccessToken;\n"
"import static org.hamcrest.Matchers.equalTo;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:632
#, no-wrap
msgid ""
"import org.hamcrest.Matchers;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:637
#, no-wrap
msgid ""
"import io.quarkus.test.common.QuarkusTestResource;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager;\n"
"import io.restassured.RestAssured;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:641
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(KeycloakTestResourceLifecycleManager.class)\n"
"public class BearerTokenAuthorizationTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:651
#, no-wrap
msgid ""
"    @Test\n"
"    public void testBearerToken() {\n"
"        RestAssured.given().auth().oauth2(getAccessToken(\"alice\"))))\n"
"            .when().get(\"/api/users/preferredUserName\")\n"
"            .then()\n"
"            .statusCode(200)\n"
"            // the test endpoint returns the name extracted from the injected SecurityIdentity Principal\n"
"            .body(\"userName\", equalTo(\"alice\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:653
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:742
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:814
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:656
msgid "`KeycloakTestResourceLifecycleManager` registers `alice` and `admin` users. The user `alice` has the `user` role only by default - it can be customized with a `keycloak.token.user-roles` system property. The user `admin` has the `user` and `admin` roles by default - it can be customized with a `keycloak.token.admin-roles` system property."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:659
msgid "By default, `KeycloakTestResourceLifecycleManager` uses HTTPS to initialize a Keycloak instance which can be disabled with `keycloak.use.https=false`.  Default realm name is `quarkus` and client id - `quarkus-service-app` - set `keycloak.realm` and `keycloak.service.client` system properties to customize the values if needed."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:661
#, no-wrap
msgid "Local Public Key"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:664
msgid "You can also use a local inlined public key for testing your `quarkus-oidc` `service` applications:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:669
#, no-wrap
msgid ""
"quarkus.oidc.client-id=test\n"
"quarkus.oidc.public-key=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlivFI8qB4D0y2jy0CfEqFyy46R0o7S8TKpsx5xbHKoU1VWg6QkQm+ntyIv1p4kE1sPEQO73+HY8+Bzs75XwRTYL1BmR1w8J5hmjVWjc6R2BTBGAYRPFRhor3kpM6ni2SPmNNhurEAHw7TaqszP5eUF/F9+KEBWkwVta+PZ37bwqSE4sCb1soZFrVz/UT/LF4tYpuVYt3YbqToZ3pZOZ9AX2o1GCG3xwOjkc4x0W7ezbQZdC9iftPxVHR8irOijJRRjcPDtA6vPKpzLl6CyYnsIYPd99ltwxTHjr3npfv/3Lw50bAkbT4HeLFxTx4flEoZLKO/g0bAoV2uqBhkA9xnQIDAQAB\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:671
#, no-wrap
msgid "smallrye.jwt.sign.key.location=/privateKey.pem\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:674
msgid "copy `privateKey.pem` from the `integration-tests/oidc-tenancy` in the `main` Quarkus repository and use a test code similar to the one in the `Wiremock` section above to generate JWT tokens. You can use your own test keys if preferred."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:676
msgid "This approach provides a more limited coverage compared to the Wiremock approach - for example, the remote communication code is not covered."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:678
#, no-wrap
msgid "TestSecurity annotation"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:681
msgid "You can use `@TestSecurity` and `@OidcSecurity` annotations for testing the `service` application endpoint code which depends on the injected `JsonWebToken` as well as `UserInfo` and `OidcConfigurationMetadata`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:683
msgid "Add the following dependency:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:692
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-security-oidc</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:698
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-test-security-oidc\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:701
msgid "and write a test code like this one:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:715
#, no-wrap
msgid ""
"import static org.hamcrest.Matchers.is;\n"
"import org.junit.jupiter.api.Test;\n"
"import io.quarkus.test.common.http.TestHTTPEndpoint;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.security.TestSecurity;\n"
"import io.quarkus.test.security.oidc.Claim;\n"
"import io.quarkus.test.security.oidc.ConfigMetadata;\n"
"import io.quarkus.test.security.oidc.OidcSecurity;\n"
"import io.quarkus.test.security.oidc.OidcConfigurationMetadata;\n"
"import io.quarkus.test.security.oidc.UserInfo;\n"
"import io.restassured.RestAssured;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:719
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:800
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@TestHTTPEndpoint(ProtectedResource.class)\n"
"public class TestSecurityAuthTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:726
#, no-wrap
msgid ""
"    @Test\n"
"    @TestSecurity(user = \"userOidc\", roles = \"viewer\")\n"
"    public void testOidc() {\n"
"        RestAssured.when().get(\"test-security-oidc\").then()\n"
"                .body(is(\"userOidc:viewer\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:740
#, no-wrap
msgid ""
"    @Test\n"
"    @TestSecurity(user = \"userOidc\", roles = \"viewer\")\n"
"    @OidcSecurity(claims = {\n"
"            @Claim(key = \"email\", value = \"user@gmail.com\")\n"
"    }, userinfo = {\n"
"            @UserInfo(key = \"sub\", value = \"subject\")\n"
"    }, config = {\n"
"            @ConfigMetadata(key = \"issuer\", value = \"issuer\")\n"
"    })\n"
"    public void testOidcWithClaimsUserInfoAndMetadata() {\n"
"        RestAssured.when().get(\"test-security-oidc-claims-userinfo-metadata\").then()\n"
"                .body(is(\"userOidc:viewer:user@gmail.com:subject:issuer\"));\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:745
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:817
msgid "where `ProtectedResource` class may look like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:751
#, no-wrap
msgid ""
"import io.quarkus.oidc.OidcConfigurationMetadata;\n"
"import io.quarkus.oidc.UserInfo;\n"
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:755
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:826
#, no-wrap
msgid ""
"@Path(\"/service\")\n"
"@Authenticated\n"
"public class ProtectedResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:762
#, no-wrap
msgid ""
"    @Inject\n"
"    JsonWebToken accessToken;\n"
"    @Inject\n"
"    UserInfo userInfo;\n"
"    @Inject\n"
"    OidcConfigurationMetadata configMetadata;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:768
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"test-security-oidc\")\n"
"    public String testSecurityOidc() {\n"
"        return accessToken.getName() + \":\" + accessToken.getGroups().iterator().next();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:778
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"test-security-oidc-claims-userinfo-metadata\")\n"
"    public String testSecurityOidcWithClaimsUserInfoMetadata() {\n"
"        return accessToken.getName() + \":\" + accessToken.getGroups().iterator().next()\n"
"                + \":\" + accessToken.getClaim(\"email\")\n"
"                + \":\" + userInfo.getString(\"sub\")\n"
"                + \":\" + configMetadata.get(\"issuer\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:783
msgid "Note that `@TestSecurity` annotation must always be used and its `user` property is returned as `JsonWebToken.getName()` and `roles` property - as `JsonWebToken.getGroups()`.  `@OidcSecurity` annotation is optional and can be used to set the additional token claims, as well as `UserInfo` and `OidcConfigurationMetadata` properties.  Additionally, if `quarkus.oidc.token.issuer` property is configured then it will be used as an `OidcConfigurationMetadata` `issuer` property value."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:785
msgid "If you work with the opaque tokens then you can test them as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:796
#, no-wrap
msgid ""
"import static org.hamcrest.Matchers.is;\n"
"import org.junit.jupiter.api.Test;\n"
"import io.quarkus.test.common.http.TestHTTPEndpoint;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.security.TestSecurity;\n"
"import io.quarkus.test.security.oidc.OidcSecurity;\n"
"import io.quarkus.test.security.oidc.TokenIntrospection;\n"
"import io.restassured.RestAssured;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:812
#, no-wrap
msgid ""
"    @Test\n"
"    @TestSecurity(user = \"userOidc\", roles = \"viewer\")\n"
"    @OidcSecurity(introspectionRequired = true,\n"
"        introspection = {\n"
"            @TokenIntrospection(key = \"email\", value = \"user@gmail.com\")\n"
"        }\n"
"    )\n"
"    public void testOidcWithClaimsUserInfoAndMetadata() {\n"
"        RestAssured.when().get(\"test-security-oidc-claims-userinfo-metadata\").then()\n"
"                .body(is(\"userOidc:viewer:userOidc:viewer\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:822
#, no-wrap
msgid ""
"import io.quarkus.oidc.TokenIntrospection;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:831
#, no-wrap
msgid ""
"    @Inject\n"
"    SecurityIdentity securityIdentity;\n"
"    @Inject\n"
"    TokenIntrospection introspection;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:841
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"test-security-oidc-opaque-token\")\n"
"    public String testSecurityOidcOpaqueToken() {\n"
"        return securityIdentity.getPrincipal().getName() + \":\" + securityIdentity.getRoles().iterator().next()\n"
"            + \":\" + introspection.getString(\"username\")\n"
"            + \":\" + introspection.getString(\"scope\")\n"
"            + \":\" + introspection.getString(\"email\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:844
msgid "Note that `@TestSecurity` `user` and `roles` attributes are available as `TokenIntrospection` `username` and `scope` properties and you can use `io.quarkus.test.security.oidc.TokenIntrospection` to add the additional introspection response properties such as an `email`, etc."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:848
msgid "`@TestSecurity` and `@OidcSecurity` can be combined in a meta-annotation, for example like so:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:860
#, no-wrap
msgid ""
"    @Retention(RetentionPolicy.RUNTIME)\n"
"    @Target({ ElementType.METHOD })\n"
"    @TestSecurity(user = \"userOidc\", roles = \"viewer\")\n"
"    @OidcSecurity(introspectionRequired = true,\n"
"        introspection = {\n"
"            @TokenIntrospection(key = \"email\", value = \"user@gmail.com\")\n"
"        }\n"
"    )\n"
"    public @interface TestSecurityMetaAnnotation {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:862
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:865
msgid "This is particularly useful if the same set of security settings needs to be used in multiple test methods."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:867
#, no-wrap
msgid "How to check the errors in the logs"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:870
msgid "Please enable `io.quarkus.oidc.runtime.OidcProvider` `TRACE` level logging to see more details about the token verification errors:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:875
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcProvider\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcProvider\".min-level=TRACE\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:878
msgid "Please enable `io.quarkus.oidc.runtime.OidcRecorder` `TRACE` level logging to see more details about the OidcProvider client initialization errors:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:883
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcRecorder\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcRecorder\".min-level=TRACE\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:885
#, no-wrap
msgid "External and Internal Access to OpenID Connect Provider"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:888
msgid "Note that the OpenID Connect Provider externally accessible token and other endpoints may have different HTTP(S) URLs compared to the URLs auto-discovered or configured relative to `quarkus.oidc.auth-server-url` internal URL. For example, if your SPA acquires a token from an external token endpoint address and sends it to Quarkus as a bearer token then an issuer verification failure may be reported by the endpoint."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:891
msgid "In such cases, if you work with Keycloak then please start it with a `KEYCLOAK_FRONTEND_URL` system property set to the externally accessible base URL.  If you work with other Openid Connect providers then please check your provider's documentation."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:892
#, no-wrap
msgid "How to use 'client-id' property"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:895
msgid "`quarkus.oidc.client-id` property identifies an OpenID Connect Client which requested the current bearer token. It can be an SPA application running in a browser or a Quarkus `web-app` confidential client application propagating the access token to the Quarkus `service` application."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:898
msgid "This property is required if the `service` application is expected to introspect the tokens remotely - which is always the case for the opaque tokens.  This property is optional if the local Json Web Key token verification only is used."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:900
msgid "Nonetheless, setting this property is encouraged even if the endpoint does not require access to the remote introspection endpoint. The reasons behind it that `client-id`, if set, can be used to verify the token audience and will also be included in the logs when the token verification fails for the better traceability of the tokens issued to specific clients to be analyzed over a longer period of time."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:902
msgid "For example, if your OpenID Connect provider sets a token audience then the following configuration pattern is recommended:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:909
#, no-wrap
msgid ""
"# Set client-id\n"
"quarkus.oidc.client-id=quarkus-app\n"
"# Token audience claim must contain 'quarkus-app'\n"
"quarkus.oidc.token.audience=${quarkus.oidc.client-id}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:912
msgid "If you set `quarkus.oidc.client-id` but your endpoint does not require remote access to one of OpenID Connect Provider endpoints (introspection, token acquisition, etc.) then do not set a client secret with the `quarkus.oidc.credentials` or similar properties as it will not be used."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:914
msgid "Note Quarkus `web-app` applications always require `quarkus.oidc.client-id` property."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:915
#, no-wrap
msgid "References"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:918
msgid "xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:919
msgid "xref:security-oidc-bearer-token-authentication-tutorial.adoc[Protect a service application by using OIDC Bearer token authentication]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:920
msgid "xref:security-protect-service-applications-by-using-oidc-bearer-authentication-how-to.adoc[Protect service applications by using OIDC Bearer token authentication]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:921
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:922
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:923
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:924
msgid "xref:security-openid-connect-client-reference.adoc[OpenID Connect and OAuth2 Client and Filters Reference Guide]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:925
msgid "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:926
msgid "xref:security-jwt-build.adoc[Sign and encrypt JWT tokens with SmallRye JWT Build]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:927
msgid "xref:security-authentication-mechanisms.adoc#oidc-jwt-oauth2-comparison[Choosing between OpenID Connect, SmallRye JWT, and OAuth2 authentication mechanisms]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:928
msgid "xref:security-authentication-mechanisms.adoc#combining-authentication-mechanisms[Combining authentication mechanisms]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:929
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-bearer-token-authentication.adoc:929
msgid "xref:security-keycloak-admin-client.adoc[Quarkus Keycloak Admin Client]"
msgstr ""
