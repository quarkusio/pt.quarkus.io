# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:10+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title =
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:7
#, no-wrap
msgid "OpenID Connect authorization code flow mechanism for protecting web applications"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:14
msgid "To protect your web applications, you can use the industry-standard OpenID Connect (OIDC) Authorization Code Flow mechanism provided by the Quarkus OIDC extension."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:15
#, no-wrap
msgid "Overview of the OIDC authorization code flow mechanism"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:18
msgid "The Quarkus OpenID Connect (OIDC) extension can protect application HTTP endpoints by using the OIDC Authorization Code Flow mechanism supported by OIDC-compliant authorization servers, such as link:https://www.keycloak.org[Keycloak]."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:22
msgid "The Authorization Code Flow mechanism authenticates users of your web application by redirecting them to an OIDC provider, such as Keycloak, to log in.  After authentication, the OIDC provider redirects the user back to the application with an authorization code that confirms that authentication was successful.  Then, the application exchanges this code with the OIDC provider for an ID token (which represents the authenticated user), an access token, and a refresh token to authorize the user's access to the application."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:24
msgid "The following diagram outlines the Authorization Code Flow mechanism in Quarkus."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:25
#, no-wrap
msgid "Authorization code flow mechanism in Quarkus"
msgstr ""

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:26
#, no-wrap
msgid "Authorization"
msgstr ""

#. type: Target for macro image
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:26
#, no-wrap
msgid "authorization_code_flow.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:28
msgid "The Quarkus user requests access to a Quarkus web-app application."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:29
msgid "The Quarkus web-app redirects the user to the authorization endpoint, that is, the OIDC provider for authentication."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:30
msgid "The OIDC provider redirects the user to a login and authentication prompt."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:31
msgid "At the prompt, the user enters their user credentials."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:32
msgid "The OIDC provider authenticates the user credentials entered and, if successful, issues an authorization code then redirects the user back to the Quarkus web-app with the code included as a query parameter."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:33
msgid "The Quarkus web-app exchanges this authorization code with the OIDC provider for ID, access, and refresh tokens."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:36
msgid "The authorization code flow is completed and the Quarkus web-app uses the tokens issued to access information about the user and grants the relevant role-based authorization to that user.  The following tokens are issued:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:38
msgid "ID token: The Quarkus `web-app` application uses the user information in the ID token to enable the authenticated user to log in securely and to provide role-based access to the web application."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:39
msgid "Access token: The Quarkus web-app might use the access token to access the UserInfo API to get additional information about the authenticated user or to propagate it to another endpoint."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:40
msgid "Refresh token: (Optional) If the ID and access tokens expire, the Quarkus web-app can use the refresh token to get new ID and access tokens."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:42
msgid "See also the xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties] reference guide."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:44
msgid "To learn about how you can protect web applications by using the OIDC authorization code flow mechanism, see xref:security-oidc-code-flow-authentication-tutorial.adoc[Protect a web application by using OIDC authorization code flow]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:46
msgid "If you want to protect service applications by using OIDC Bearer token authentication, see xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication]."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:48
msgid "For information about how to support multiple tenants, see xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect Multi-Tenancy]."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:49
#, no-wrap
msgid "Using the authorization code flow mechanism"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:51
#, no-wrap
msgid "Configuring access to the OIDC provider endpoint"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:54
msgid "The OIDC `web-app` application requires URLs of the OIDC provider's authorization, token, `JsonWebKey` (JWK) set, and possibly the `UserInfo`, introspection, and end session (RP-initiated logout) endpoints."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:56
msgid "By convention, they are discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc.auth-server-url`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:58
msgid "Alternatively, if the discovery endpoint is not available, or you prefer to reduce the discovery endpoint round-trip, you can disable endpoint discovery and configure relative path values, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:75
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.discovery-enabled=false\n"
"# Authorization endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/auth\n"
"quarkus.oidc.authorization-path=/protocol/openid-connect/auth\n"
"# Token endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/token\n"
"quarkus.oidc.token-path=/protocol/openid-connect/token\n"
"# JWK set endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/certs\n"
"quarkus.oidc.jwks-path=/protocol/openid-connect/certs\n"
"# UserInfo endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/userinfo\n"
"quarkus.oidc.user-info-path=/protocol/openid-connect/userinfo\n"
"# Token Introspection endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/token/introspect\n"
"quarkus.oidc.introspection-path=/protocol/openid-connect/token/introspect\n"
"# End session endpoint: http://localhost:8180/realms/quarkus/protocol/openid-connect/logout\n"
"quarkus.oidc.end-session-path=/protocol/openid-connect/logout\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:79
msgid "Some OIDC providers support metadata discovery but do not return all the endpoint URL values required for the authorization code flow to complete or to support application functions, for example, user logout.  To work around this limitation, you can configure the missing endpoint URL values locally, as outlined in the following example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:83
#, no-wrap
msgid "# Metadata is auto-discovered but it does not return an end-session endpoint URL\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:85
#, no-wrap
msgid "quarkus.oidc.auth-server-url=http://localhost:8180/oidcprovider/account\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:88
#, no-wrap
msgid ""
"# Configure the end-session URL locally, it can be an absolute or relative (to 'quarkus.oidc.auth-server-url') address\n"
"quarkus.oidc.end-session-path=logout\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:94
msgid "You can use this same configuration to override a discovered endpoint URL if that URL does not work for the local Quarkus endpoint and a more specific value is required.  For example, a provider that supports both global and application-specific end-session endpoints returns a global end-session URL such as `http://localhost:8180/oidcprovider/account/global-logout`.  This URL will log the user out of all of the applications that the user is currently logged into.  However, if the requirement is for the current application to log the user out of only the specific application, you can override the global end-session URL, by setting the `quarkus.oidc.end-session-path=logout` parameter."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:96
#, no-wrap
msgid "OIDC provider client authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:100
msgid "OIDC providers typically require applications to be identified and authenticated when they interact with the OIDC endpoints.  Quarkus OIDC, specifically the `quarkus.oidc.runtime.OidcProviderClient` class, authenticates to the OIDC provider when the authorization code must be exchanged for the ID, access, and refresh tokens, or when the ID and access tokens need to be refreshed or introspected."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:103
msgid "Typically, client id and client secrets are defined for a given application when it enlists to the OIDC provider.  All the https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] options are supported, for example:"
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:104
#, no-wrap
msgid "Example of  `client_secret_basic`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:111
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.secret=mysecret\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:114
msgid "Or:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:120
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.client-secret.value=mysecret\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:123
msgid "The following example shows the secret retrieved from a xref:credentials-provider.adoc[credentials provider]:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:128
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:160
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:133
#, no-wrap
msgid ""
"# This is a key which will be used to retrieve a secret from the map of credentials returned from CredentialsProvider\n"
"quarkus.oidc.credentials.client-secret.provider.key=mysecret-key\n"
"# Set it only if more than one CredentialsProvider can be registered\n"
"quarkus.oidc.credentials.client-secret.provider.name=oidc-credentials-provider\n"
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:135
#, no-wrap
msgid "Example of `client_secret_post`"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:143
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.client-secret.value=mysecret\n"
"quarkus.oidc.credentials.client-secret.method=post\n"
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:145
#, no-wrap
msgid "Example of `client_secret_jwt`, where the signature algorithm is HS256:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:152
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow\n"
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:154
#, no-wrap
msgid "Example of `client_secret_jwt`, where the secret is retrieved from a xref:credentials-provider.adoc[credentials provider]:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:165
#, no-wrap
msgid ""
"# This is a key which will be used to retrieve a secret from the map of credentials returned from CredentialsProvider\n"
"quarkus.oidc.credentials.jwt.secret-provider.key=mysecret-key\n"
"# Set it only if more than one CredentialsProvider can be registered\n"
"quarkus.oidc.credentials.jwt.secret-provider.name=oidc-credentials-provider\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:168
msgid "Example of `private_key_jwt` with the PEM key file, and where the signature algorithm is RS256:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:174
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:203
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.jwt.key-file=privateKey.pem\n"
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:176
#, no-wrap
msgid "Example of `private_key_jwt` with the keystore file, where the signature algorithm is RS256:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:185
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.jwt.key-store-file=keystore.jks\n"
"quarkus.oidc.credentials.jwt.key-store-password=mypassword\n"
"quarkus.oidc.credentials.jwt.key-password=mykeypassword\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:188
#, no-wrap
msgid ""
"# Private key alias inside the keystore\n"
"quarkus.oidc.credentials.jwt.key-id=mykeyAlias\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:191
msgid "Using `client_secret_jwt` or `private_key_jwt` authentication methods ensures that a client secret does not get sent to the OIDC provider, therefore avoiding the risk of a secret being intercepted by a 'man-in-the-middle' attack."
msgstr ""

#. type: Title =====
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:192
#, no-wrap
msgid "Additional JWT authentication options"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:195
msgid "If `client_secret_jwt`, `private_key_jwt` authentication methods are used or an Apple `post_jwt` method is used, then the JWT signature algorithm, key identifier, audience, subject and issuer can be customized, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:199
#, no-wrap
msgid "# private_key_jwt client authentication\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:208
#, no-wrap
msgid ""
"# This is a token key identifier 'kid' header - set it if your OpenID Connect provider requires it.\n"
"# Note if the key is represented in a JSON Web Key (JWK) format with a `kid` property then\n"
"# using 'quarkus.oidc.credentials.jwt.token-key-id' is not necessary.\n"
"quarkus.oidc.credentials.jwt.token-key-id=mykey\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:211
#, no-wrap
msgid ""
"# Use RS512 signature algorithm instead of the default RS256\n"
"quarkus.oidc.credentials.jwt.signature-algorithm=RS512\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:214
#, no-wrap
msgid ""
"# The token endpoint URL is the default audience value, use the base address URL instead:\n"
"quarkus.oidc.credentials.jwt.audience=${quarkus.oidc-client.auth-server-url}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:217
#, no-wrap
msgid ""
"# custom subject instead of the client id :\n"
"quarkus.oidc.credentials.jwt.subject=custom-subject\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:220
#, no-wrap
msgid ""
"# custom issuer instead of the client id :\n"
"quarkus.oidc.credentials.jwt.issuer=custom-issuer\n"
msgstr ""

#. type: Title =====
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:222
#, no-wrap
msgid "Apple POST JWT"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:225
msgid "The Apple OIDC provider uses a `client_secret_post` method whereby a secret is a JWT produced with a `private_key_jwt` authentication method but with the Apple account-specific issuer and subject claims."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:227
msgid "In Quarkus Security, `quarkus-oidc` supports a non-standard `client_secret_post_jwt` authentication method, which you can configure as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:232
#, no-wrap
msgid ""
"# Apple provider configuration sets a 'client_secret_post_jwt' authentication method\n"
"quarkus.oidc.provider=apple\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:237
#, no-wrap
msgid ""
"quarkus.oidc.client-id=${apple.client-id}\n"
"quarkus.oidc.credentials.jwt.key-file=ecPrivateKey.pem\n"
"quarkus.oidc.credentials.jwt.token-key-id=${apple.key-id}\n"
"# Apple provider configuration sets ES256 signature algorithm\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:240
#, no-wrap
msgid ""
"quarkus.oidc.credentials.jwt.subject=${apple.subject}\n"
"quarkus.oidc.credentials.jwt.issuer=${apple.issuer}\n"
msgstr ""

#. type: Title =====
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:242
#, no-wrap
msgid "mutual TLS (mTLS)"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:245
msgid "Some OpenID Connect providers might require that a client is authenticated as part of the mutual TLS authentication process."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:247
msgid "The following example shows how you can configure `quarkus-oidc` to support `mTLS`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:251
#, no-wrap
msgid "quarkus.oidc.tls.verification=certificate-validation\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:255
#, no-wrap
msgid ""
"# Keystore configuration\n"
"quarkus.oidc.tls.key-store-file=client-keystore.jks\n"
"quarkus.oidc.tls.key-store-password=${key-store-password}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:259
#, no-wrap
msgid ""
"# Add more keystore properties if needed:\n"
"#quarkus.oidc.tls.key-store-alias=keyAlias\n"
"#quarkus.oidc.tls.key-store-alias-password=keyAliasPassword\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:265
#, no-wrap
msgid ""
"# Truststore configuration\n"
"quarkus.oidc.tls.trust-store-file=client-truststore.jks\n"
"quarkus.oidc.tls.trust-store-password=${trust-store-password}\n"
"# Add more truststore properties if needed:\n"
"#quarkus.oidc.tls.trust-store-alias=certAlias\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:267
#, no-wrap
msgid "Introspection endpoint authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:271
msgid "Some OIDC providers require authenticating to its introspection endpoint by using Basic authentication and with credentials that are different to the `client_id` and `client_secret`.  If you have previously configured security authentication to support either the`client_secret_basic` or `client_secret_post` client authentication methods as described in the xref:oidc-provider-client-authentication[OIDC provider client authentication] section, you might need to apply the additional configuration, as follows."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:273
msgid "If the tokens have to be introspected and the introspection endpoint-specific authentication mechanism is required, then you can configure `quarkus-oidc`, as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:278
#, no-wrap
msgid ""
"quarkus.oidc.introspection-credentials.name=introspection-user-name\n"
"quarkus.oidc.introspection-credentials.secret=introspection-user-secret\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:280
#, no-wrap
msgid "Redirecting to and from the OIDC provider"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:284
msgid "When a user is redirected to the OpenID Connect provider to authenticate, the redirect URL includes a `redirect_uri` query parameter, which indicates to the provider where the user has to be redirected to when the authentication is complete.  In our case, this is the Quarkus application."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:288
msgid "Quarkus sets this parameter to the current application request URL by default.  For example, if a user is trying to access a Quarkus service endpoint at `http://localhost:8080/service/1` then the `redirect_uri` parameter is set to `http://localhost:8080/service/1`.  Similarly, if the request URL is `http://localhost:8080/service/2` then the `redirect_uri` parameter is set to `http://localhost:8080/service/2`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:291
msgid "Some OIDC providers require the `redirect_uri` to have the same value for a given application, for example, `http://localhost:8080/service/callback`, for all the redirect URLs.  In such cases, a `quarkus.oidc.authentication.redirect-path` property has to be set, for example, `quarkus.oidc.authentication.redirect-path=/service/callback`, and Quarkus will set the `redirect_uri` parameter to an absolute URL such as `http://localhost:8080/service/callback`, which will be the same regardless of the current request URL."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:294
msgid "If `quarkus.oidc.authentication.redirect-path` is set but you need the original request URL to be restored after the user has been redirected back to a unique callback URL, for example, `http://localhost:8080/service/callback`, set `quarkus.oidc.authentication.restore-path-after-redirect` property to `true`.  This will restore the request URL such as `http://localhost:8080/service/1`."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:295
#, no-wrap
msgid "Customizing authentication requests"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:298
msgid "By default, only the `response_type` (set to `code`), `scope` (set to 'openid'), `client_id`, `redirect_uri` and `state` properties are passed as HTTP query parameters to the OpenID Connect provider's authorization endpoint when the user is redirected to it to authenticate."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:302
msgid "You can add more properties to it with `quarkus.oidc.authentication.extra-params`.  For example, some OIDC providers might choose to return the authorization code as part of the redirect URI's fragment, which would break the authentication process.  The following example shows how you can work around this issue:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:306
#, no-wrap
msgid "quarkus.oidc.authentication.extra-params.response_mode=query\n"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:308
#, no-wrap
msgid "Customizing the authentication error response"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:312
msgid "If the user authentication fails at the OIDC authorization endpoint, then the provider will redirect the user back to Quarkus with `error` and `error_description` parameters instead of `code`.  For example, this can happen when an invalid scope or other invalid parameters are included in the redirect to the provider."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:316
msgid "In such cases, an HTTP `401`error will be returned by default.  However, you can instead request that a custom public error endpoint is called to return a more user-friendly HTML error page.  To do this, set the `quarkus.oidc.authentication.error-path` property, as shown in the following example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:320
#, no-wrap
msgid "quarkus.oidc.authentication.error-path=/error\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:324
msgid "Ensure that the property starts with a forward slash (/) character and the path is relative to the base URI of the current endpoint.  For example, if it is set as '/error' and the current request URI is `https://localhost:8080/callback?error=invalid_scope` then a final redirect will be made to `https://localhost:8080/error?error=invalid_scope`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:326
msgid "It is important to ensure that this error endpoint is a public resource to prevent the user from being redirected to this page to be authenticated again."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:327
#, no-wrap
msgid "Accessing authorization data"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:330
msgid "Let's first discuss how to access information around authorization."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:332
#, no-wrap
msgid "Accessing ID and access tokens"
msgstr ""

#. SJ: new concept topic to describe the different token types and usage proposed in next iteration
#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:335
msgid "The OIDC code authentication mechanism acquires three tokens during the authorization code flow: https://openid.net/specs/openid-connect-core-1_0.html#IDToken[IDToken], Access Token, and Refresh Token."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:339
msgid "ID Token is always a JWT token and is used to represent a user authentication with the JWT claims.  You can use this to get the issuing OIDC endpoint, the username, and other information called _claims_.  One can access ID Token claims by injecting `JsonWebToken` with an `IdToken` qualifier:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:346
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"import io.quarkus.oidc.IdToken;\n"
"import io.quarkus.security.Authenticated;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:350
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:374
#, no-wrap
msgid ""
"@Path(\"/web-app\")\n"
"@Authenticated\n"
"public class ProtectedResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:354
#, no-wrap
msgid ""
"    @Inject\n"
"    @IdToken\n"
"    JsonWebToken idToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:360
#, no-wrap
msgid ""
"    @GET\n"
"    public String getUserName() {\n"
"        return idToken.getName();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:363
msgid "Access Token is usually used by the OIDC `web-app` application to access other endpoints on behalf of the currently logged-in user. The raw access token can be accessed as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:370
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"import io.quarkus.oidc.AccessTokenCredential;\n"
"import io.quarkus.security.Authenticated;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:377
#, no-wrap
msgid ""
"    @Inject\n"
"    JsonWebToken accessToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:381
#, no-wrap
msgid ""
"    // or\n"
"    // @Inject\n"
"    // AccessTokenCredential accessTokenCredential;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:387
#, no-wrap
msgid ""
"    @GET\n"
"    public String getReservationOnBehalfOfUser() {\n"
"        String rawAccessToken = accessToken.getRawToken();\n"
"        //or\n"
"        //String rawAccessToken = accessTokenCredential.getToken();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:392
#, no-wrap
msgid ""
"        // Use the raw access token to access a remote endpoint\n"
"        return getReservationfromRemoteEndpoint(rawAccesstoken);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:395
msgid "Note that `AccessTokenCredential` is used if the access token issued to the Quarkus `web-app` application is opaque (binary) and can not be parsed to a `JsonWebToken` or if the inner content is necessary for the application."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:397
msgid "Injection of the `JsonWebToken` and `AccessTokenCredential` is supported in both `@RequestScoped` and `@ApplicationScoped` contexts."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:399
msgid "RefreshToken is used by Quarkusn OIDC to refresh the current ID and access tokens as part of its xref:session-management[session management] process."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:401
#, no-wrap
msgid "User info"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:405
msgid "If the ID token does not provide enough information about the currently-authenticated user, you can get more information from the `UserInfo` endpoint.  Set the `quarkus.oidc.authentication.user-info-required=true` property for a link:https://openid.net/specs/openid-connect-core-1_0.html#UserInfo[UserInfo] JSON object from the OIDC `UserInfo` endpoint to be requested."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:407
msgid "A request will be sent to the OpenID Provider UserInfo endpoint using the access token returned with the authorization code grant response and an `io.quarkus.oidc.UserInfo` (a simple `jakarta.json.JsonObject` wrapper) object will be created. `io.quarkus.oidc.UserInfo` can be either injected or accessed as a SecurityIdentity `userinfo` attribute."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:409
#, no-wrap
msgid "Accessing the OIDC configuration information"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:412
msgid "The current tenant's discovered link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenID Connect Configuration Metadata] is represented by `io.quarkus.oidc.OidcConfigurationMetadata` and can be either injected or accessed as a `SecurityIdentity` `configuration-metadata` attribute."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:414
msgid "The default tenant's `OidcConfigurationMetadata` is injected if the endpoint is public."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:416
#, no-wrap
msgid "Mapping token claims and `SecurityIdentity` roles"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:419
msgid "The way the roles are mapped to the SecurityIdentity roles from the verified tokens is identical to how it is done for the xref:security-oidc-bearer-token-authentication.adoc[Bearer tokens] with the only difference being that https://openid.net/specs/openid-connect-core-1_0.html#IDToken[ID Token] is used as a source of the roles by default."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:424
msgid "If you use Keycloak, set a `microprofile_jwt` client scope for ID token to contain a `groups` claim.  For more information, see the link:https://www.keycloak.org/docs/latest/server_admin/#protocol[Keycloak Server Administration Guide]."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:427
msgid "But depending on your OIDC provider, roles might be stored in the access token or the user info."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:429
msgid "If the access token contains the roles and this access token is not meant to be propagated to the downstream endpoints then set `quarkus.oidc.roles.source=accesstoken`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:431
msgid "If UserInfo is the source of the roles then set `quarkus.oidc.roles.source=userinfo`, and if needed, `quarkus.oidc.roles.role-claim-path`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:433
msgid "Additionally, a custom `SecurityIdentityAugmentor` can also be used to add the roles. For more information, see xref:security-customization.adoc#security-identity-customization[SecurityIdentity customization]."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:434
#, no-wrap
msgid "Ensuring validity of tokens and authentication data"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:438
msgid "A core part of the authentication process is ensuring the chain of trust and validity of the information.  This is done by ensuring tokens are trustable."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:440
#, no-wrap
msgid "Token verification and introspection"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:443
msgid "The verification process of OIDC authorization code flow tokens follows the Bearer token authentication token verification and introspection logic. For more information, see the xref:security-oidc-bearer-token-authentication.adoc#token-verification-introspection[Token Verification And Introspection] section of the \"Quarkus OpenID Connect (OIDC) Bearer token authentication\" guide."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:448
msgid "With Quarkus `web-app` applications, only the `IdToken` is verified by default because the access token is not used to access the current Quarkus `web-app` endpoint and is intended to be propagated to the services expecting this access token.  If you expect the access token to contain the roles required to access the current Quarkus endpoint (`quarkus.oidc.roles.source=accesstoken`) then it will also be verified."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:451
#, no-wrap
msgid "Token introspection and UserInfo cache"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:456
msgid "Code flow access tokens are not introspected unless they are expected to be the source of roles.  They will however be used to get `UserInfo`.  There will be one or two remote calls with the code flow access token, if the token introspection and/or `UserInfo` are required."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:458
msgid "Please see xref:security-oidc-bearer-token-authentication.adoc#token-introspection-userinfo-cache[Token Introspection and UserInfo cache] for more information about using a default token cache or registering a custom cache implementation."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:460
#, no-wrap
msgid "JSON web token claim verification"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:464
msgid "Please see xref:security-oidc-bearer-token-authentication.adoc#jwt-claim-verification[JSON Web Token Claim verification] section about the claim verification, including the `iss` (issuer) claim.  It applies to ID tokens but also to access tokens in a JWT format if the `web-app` application has requested the access token verification."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:465
#, no-wrap
msgid "Further security with Proof Key for Code Exchange (PKCE)"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:468
msgid "link:https://datatracker.ietf.org/doc/html/rfc7636[Proof Key for Code Exchange] (PKCE) minimizes the risk of authorization code interception."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:471
msgid "While PKCE is of primary importance to public OpenID Connect clients, such as SPA scripts running in a browser, it can also provide an extra level of protection to Quarkus OIDC `web-app` applications.  With PKCE, Quarkus OIDC `web-app` applications are confidential OpenID Connect clients capable of securely storing the client secret and using it to exchange the code for the tokens."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:473
msgid "You can enable `PKCE` for your OIDC `web-app` endpoint with a `quarkus.oidc.authentication.pkce-required` property and a 32-character secret, as shown in the following example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:478
#, no-wrap
msgid ""
"quarkus.oidc.authentication.pkce-required=true\n"
"quarkus.oidc.authentication.pkce-secret=eUk1p7UB3nFiXZGUXi0uph1Y9p34YhBU\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:481
msgid "If you already have a 32-characters client secret then you do not need to set the `quarkus.oidc.authentication.pkce-secret` property unless you prefer to use a different secret key."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:485
msgid "The secret key is required for encrypting a randomly generated `PKCE` `code_verifier` while the user is being redirected with the `code_challenge` query parameter to an OIDC provider to authenticate.  The `code_verifier` is decrypted when the user is redirected back to Quarkus and sent to the token endpoint alongside the `code`, client secret, and other parameters to complete the code exchange.  The provider will fail the code exchange if a `SHA256` digest of the `code_verifier` does not match the `code_challenge` that was provided during the authentication request."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:487
#, no-wrap
msgid "Handling and controlling the lifetime of authentication"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:492
msgid "Another important requirement for authentication is to ensure that the data the session is based on is up-to-date without requiring the user to authenticate for every single request.  There are also situations where a logout event is explicitly requested.  Use the following key points to find the right balance for securing your Quarkus applications:"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:494
#, no-wrap
msgid "Cookies"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:498
msgid "The OIDC adapter uses cookies to keep the session, code flow, and post-logout state.  This state is a key element controlling the lifetime of authentication data."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:500
msgid "Use the `quarkus.oidc.authentication.cookie-path` property to ensure that the same cookie is visible when you access protected resources with overlapping or different roots, for example:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:502
msgid "`/index.html` and `/web-app/service`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:503
msgid "`/web-app/service1` and `/web-app/service2`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:504
msgid "`/web-app1/service` and `/web-app2/service`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:506
msgid "By default, `quarkus.oidc.authentication.cookie-path` is set to `/` but you can change this to a more specific path if required, for example, `/web-app`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:510
msgid "To set the cookie path dynamically, configure the `quarkus.oidc.authentication.cookie-path-header` property.  Set the `quarkus.oidc.authentication.cookie-path-header` property.  For example, to set the cookie path dynamically by using the value of the`X-Forwarded-Prefix` HTTP header, configure the property to `quarkus.oidc.authentication.cookie-path-header=X-Forwarded-Prefix`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:512
msgid "If `quarkus.oidc.authentication.cookie-path-header` is set but no configured HTTP header is available in the current request then the `quarkus.oidc.authentication.cookie-path` will be checked."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:515
msgid "If your application is deployed across multiple domains, set the `quarkus.oidc.authentication.cookie-domain` property so that the session cookie is visible to all protected Quarkus services.  For example, if you have Quarkus services deployed on the following two domains, then you must set the `quarkus.oidc.authentication.cookie-domain` property to `company.net`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:517
msgid "\\https://whatever.wherever.company.net/"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:518
msgid "\\https://another.address.company.net/"
msgstr ""

#. type: Title =====
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:521
#, no-wrap
msgid "Customizing the cookie with TokenStateManager"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:525
msgid "OIDC `CodeAuthenticationMechanism` uses the default `io.quarkus.oidc.TokenStateManager` interface implementation to keep the ID, access, and refresh tokens returned in the authorization code or to refresh grant responses in a session cookie.  This makes Quarkus OIDC endpoints completely stateless."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:527
msgid "An access token is only required if the endpoint needs to:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:529
msgid "Retrieve `UserInfo`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:530
msgid "Access the downstream service with this access token"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:531
msgid "Use the roles associated with the access token, which are checked by default"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:533
msgid "In such cases, use the `quarkus.oidc.token-state-manager.strategy` property to configure the token state strategy as follows:"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:535
#, no-wrap
msgid "To..."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:537
#, no-wrap
msgid "Set the property to ..."
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:538
#, no-wrap
msgid "Keep the ID and refresh tokens only"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:540
#, no-wrap
msgid "`quarkus.oidc.token-state-manager.strategy=id-refresh-token`"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:541
#, no-wrap
msgid "Keep the ID token only"
msgstr ""

#. type: Table
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:543
#, no-wrap
msgid "`quarkus.oidc.token-state-manager.strategy=id-token`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:549
msgid "If your chosen cookie strategy combines tokens and generates a large session cookie value that is greater than 4KB, some browsers might not be able to handle such cookie sizes.  This can occur when the ID, access, and refresh tokens are JWT tokens and the selected strategy is `keep-all-tokens` or with ID and refresh tokens when the strategy is `id-refresh-token`.  To workaround this issue, you can set `quarkus.oidc.token-state-manager.split-tokens=true` to create a unique session token for each token."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:552
msgid "`TokenStateManager` encrypts the tokens before storing them in the session cookie.  The following example shows how you configure `TokenStateManager` to split the tokens and encrypt them:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:561
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.client-id=quarkus-app\n"
"quarkus.oidc.credentials.secret=secret\n"
"quarkus.oidc.application-type=web-app\n"
"quarkus.oidc.token-state-manager.split-tokens=true\n"
"quarkus.oidc.token-state-manager.encryption-secret=eUk1p7UB3nFiXZGUXi0uph1Y9p34YhBU\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:565
msgid "The token encryption secret must be at least 32 characters long.  If this key is not configured then either `quarkus.oidc.credentials.secret` or `quarkus.oidc.credentials.jwt.secret` will be hashed to create an encryption key."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:568
msgid "Configure the `quarkus.oidc.token-state-manager.encryption-secret` property if Quarkus authenticates to the OpenId Connect Provider by using one of the following authentication methods:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:570
msgid "mTLS"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:571
msgid "`private_key_jwt`, where a private RSA or EC key is used to sign a JWT token"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:573
msgid "Otherwise, a random key is generated, which can be problematic if the Quarkus application is running in the cloud with multiple pods managing the requests."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:575
msgid "You can disable token encryption in the session cookie by setting `quarkus.oidc.token-state-manager.encryption-required=false`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:579
msgid "Register your own `io.quarkus.oidc.TokenStateManager' implementation as an `@ApplicationScoped` CDI bean if you need to customize the way the tokens are associated with the session cookie.  For example, you may want to keep the tokens in a database and have only a database pointer stored in a session cookie.  Note that this approach might introduce some challenges if you need to make the tokens available across multiple microservices nodes."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:581
msgid "Here is a simple example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:585
#, no-wrap
msgid "package io.quarkus.oidc.test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:590
#, no-wrap
msgid ""
"import jakarta.annotation.Priority;\n"
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.enterprise.inject.Alternative;\n"
"import jakarta.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:597
#, no-wrap
msgid ""
"import io.quarkus.oidc.AuthorizationCodeTokens;\n"
"import io.quarkus.oidc.OidcTenantConfig;\n"
"import io.quarkus.oidc.TokenStateManager;\n"
"import io.quarkus.oidc.runtime.DefaultTokenStateManager;\n"
"import io.smallrye.mutiny.Uni;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:602
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"@Alternative\n"
"@Priority(1)\n"
"public class CustomTokenStateManager implements TokenStateManager {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:605
#, no-wrap
msgid ""
"    @Inject\n"
"    DefaultTokenStateManager tokenStateManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:612
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<String> createTokenState(RoutingContext routingContext, OidcTenantConfig oidcConfig,\n"
"            AuthorizationCodeTokens sessionContent, TokenStateManager.CreateTokenStateRequestContext requestContext) {\n"
"        return tokenStateManager.createTokenState(routingContext, oidcConfig, sessionContent, requestContext)\n"
"                .map(t -> (t + \"|custom\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:622
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<AuthorizationCodeTokens> getTokens(RoutingContext routingContext, OidcTenantConfig oidcConfig,\n"
"            String tokenState, TokenStateManager.GetTokensRequestContext requestContext) {\n"
"        if (!tokenState.endsWith(\"|custom\")) {\n"
"            throw new IllegalStateException();\n"
"        }\n"
"        String defaultState = tokenState.substring(0, tokenState.length() - 7);\n"
"        return tokenStateManager.getTokens(routingContext, oidcConfig, defaultState, requestContext);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:633
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<Void> deleteTokens(RoutingContext routingContext, OidcTenantConfig oidcConfig, String tokenState,\n"
"            TokenStateManager.DeleteTokensRequestContext requestContext) {\n"
"        if (!tokenState.endsWith(\"|custom\")) {\n"
"            throw new IllegalStateException();\n"
"        }\n"
"        String defaultState = tokenState.substring(0, tokenState.length() - 7);\n"
"        return tokenStateManager.deleteTokens(routingContext, oidcConfig, defaultState, requestContext);\n"
"    }\n"
"}\n"
msgstr ""

#. SJ: In next iteration, propose to recompose Logout information into a new concept topic
#. type: Title ====
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:636
#, no-wrap
msgid "Logout and expiration"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:639
msgid "There are two main ways for the authentication information to expire: the tokens expired and were not renewed or an explicit logout operation was triggered."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:641
msgid "Let's start with explicit logout operations."
msgstr ""

#. type: Title =====
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:644
#, no-wrap
msgid "User-initiated logout"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:648
msgid "Users can request a logout by sending a request to the Quarkus endpoint logout path set with a `quarkus.oidc.logout.path` property.  For example, if the endpoint address is `https://application.com/webapp` and the `quarkus.oidc.logout.path` is set to \"/logout\" then the logout request has to be sent to `https://application.com/webapp/logout`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:650
msgid "This logout request will start an https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-Initiated Logout] and the user will be redirected to the OpenID Connect Provider to logout where a user may be asked to confirm the logout is indeed intended."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:652
msgid "The user will be returned to the endpoint post logout page once the logout has been completed if the `quarkus.oidc.logout.post-logout-path` property is set. For example, if the endpoint address is `https://application.com/webapp` and the `quarkus.oidc.logout.post-logout-path` is set to \"/signin\" then the user will be returned to `https://application.com/webapp/signin` (note this URI must be registered as a valid `post_logout_redirect_uri` in the OpenID Connect Provider)."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:654
msgid "If the `quarkus.oidc.logout.post-logout-path` is set then a `q_post_logout` cookie will be created and a matching `state` query parameter will be added to the logout redirect URI and the OpenID Connect Provider will return this `state` once the logout has been completed. It is recommended for the Quarkus `web-app` applications to check that a `state` query parameter matches the value of the `q_post_logout` cookie which can be done for example in a Jakarta REST filter."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:656
msgid "Note that a cookie name varies when using xref:security-openid-connect-multitenancy.adoc[OpenID Connect Multi-Tenancy]. For example, it will be named `q_post_logout_tenant_1` for a tenant with a `tenant_1` ID, and so on."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:658
msgid "Here is an example of how to configure a Quarkus app initiated logout flow:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:665
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:728
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:753
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.oidc.client-id=frontend\n"
"quarkus.oidc.credentials.secret=secret\n"
"quarkus.oidc.application-type=web-app\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:669
#, no-wrap
msgid ""
"quarkus.oidc.logout.path=/logout\n"
"# Logged-out users should be returned to the /welcome.html site which will offer an option to re-login:\n"
"quarkus.oidc.logout.post-logout-path=/welcome.html\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:673
#, no-wrap
msgid ""
"# Only the authenticated users can initiate a logout:\n"
"quarkus.http.auth.permission.authenticated.paths=/logout\n"
"quarkus.http.auth.permission.authenticated.policy=authenticated\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:677
#, no-wrap
msgid ""
"# All users can see the welcome page:\n"
"quarkus.http.auth.permission.public.paths=/welcome.html\n"
"quarkus.http.auth.permission.public.policy=permit\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:681
msgid "You may also need to set `quarkus.oidc.authentication.cookie-path` to a path value common to all the application resources which is `/` in this example.  For more information, see the xref:oidc-cookies[Cookies] section."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:686
msgid "Some OIDC providers do not support link:https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-initiated logout] specification and do not return an OpenID Connect well-known `end_session_endpoint` metadata property.  However, this is not a problem for Quarkus because the specific logout mechanisms of such OIDC providers only differ in how the logout URL query parameters are named."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:688
msgid "According to the https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-initiated logout] specification, the `quarkus.oidc.logout.post-logout-path` property is represented as a `post_logout_redirect_uri` query parameter, which is not recognized by the providers that do not support this specification."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:690
msgid "You can use `quarkus.oidc.logout.post-logout-url-param` to work around this issue. You can also request more logout query parameters added with `quarkus.oidc.logout.extra-params`. For example, here is how you can support a logout with `Auth0`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:697
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=https://dev-xxx.us.auth0.com\n"
"quarkus.oidc.client-id=redacted\n"
"quarkus.oidc.credentials.secret=redacted\n"
"quarkus.oidc.application-type=web-app\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:700
#, no-wrap
msgid ""
"quarkus.oidc.tenant-logout.logout.path=/logout\n"
"quarkus.oidc.tenant-logout.logout.post-logout-path=/welcome.html\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:705
#, no-wrap
msgid ""
"# Auth0 does not return the `end_session_endpoint` metadata property, configure it instead\n"
"quarkus.oidc.end-session-path=v2/logout\n"
"# Auth0 will not recognize the 'post_logout_redirect_uri' query parameter so make sure it is named as 'returnTo'\n"
"quarkus.oidc.logout.post-logout-uri-param=returnTo\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:709
#, no-wrap
msgid ""
"# Set more properties if needed.\n"
"# For example, if 'client_id' is provided then a valid logout URI should be set as Auth0 Application property, without it - as Auth0 Tenant property.\n"
"quarkus.oidc.logout.extra-params.client_id=${quarkus.oidc.client-id}\n"
msgstr ""

#. type: Title =====
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:713
#, no-wrap
msgid "Back-channel logout"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:717
msgid "The OIDC provider can force the logout of all applications using the authentification data: this is called back-channel logout.  In this case the OIDC will call a specific URL from each application to trigger that logout."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:719
msgid "link:https://openid.net/specs/openid-connect-backchannel-1_0.html[Back-Channel Logout] is used by OpenID Connect providers to log out the current user from all the applications this user is currently logged in, bypassing the user agent."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:721
msgid "You can configure Quarkus to support `Back-Channel Logout` as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:730
#, no-wrap
msgid "quarkus.oidc.logout.backchannel.path=/back-channel-logout\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:734
msgid "The absolute `back-channel logout` URL is calculated by adding `quarkus.oidc.back-channel-logout.path` to the current endpoint URL, for example, `http://localhost:8080/back-channel-logout`.  You will need to configure this URL in the admin console of your OIDC provider."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:737
msgid "You will also need to configure a token age property for the logout token verification to succeed if your OpenID Connect Provider does not set an expiry claim in the current logout token.  For example, set `quarkus.oidc.token.age=10S` to ensure that no more than 10 seconds elapse since the logout token's `iat` (issued at) time."
msgstr ""

#. type: Title =====
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:739
#, no-wrap
msgid "Front-channel logout"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:744
msgid "link:https://openid.net/specs/openid-connect-frontchannel-1_0.html[Front-Channel Logout] can be used to logout the current user directly from the user agent (e.g. its browser).  It is like xref:back-channel-logout[Back-channel logout] but the logout steps are executed by the user agent like the browser and not in the background by the OIDP provider.  This option is rarely used."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:746
msgid "You can configure Quarkus to support `Front-Channel Logout` as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:755
#, no-wrap
msgid "quarkus.oidc.logout.frontchannel.path=/front-channel-logout\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:758
msgid "This path will be compared against the current request's path and the user will be logged out if these paths match."
msgstr ""

#. type: Title =====
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:760
#, no-wrap
msgid "Local logout"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:766
msgid "xref:user-initiated-logout[User-initiated logout] will log the user out of the OIDC provider, if it is used as single sign-on, it might not be what you require.  If, for example, your OIDC provider is Google, you will be logged out from Google and its services.  Instead the user might just want to log out of that specific application.  Another use case might be when the OIDC provider does not have a logout endpoint."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:768
msgid "By using xref:oidc-session[OidcSession], you can support a local logout, which means that only the local session cookie is cleared, as shown in the following example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:774
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:776
#, no-wrap
msgid "import io.quarkus.oidc.OidcSession;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:779
#, no-wrap
msgid ""
"@Path(\"/service\")\n"
"public class ServiceResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:782
#, no-wrap
msgid ""
"    @Inject\n"
"    OidcSession oidcSession;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:789
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"logout\")\n"
"    public String logout() {\n"
"        oidcSession.logout().await().indefinitely();\n"
"        return \"You are logged out\".\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:793
msgid "====== Using `OidcSession` for local logout"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:796
msgid "`io.quarkus.oidc.OidcSession` is a wrapper around the current `IdToken`, which can help to perform a xref:local-logout[Local logout], retrieve the current session's tenant identifier, and check when the session will expire.  More useful methods will be added to it over time."
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:798
#, no-wrap
msgid "Session management"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:802
msgid "By default, logout is based on the expiration time of the ID token issued by the OIDC provider. When the ID token expires, the current user session at the Quarkus endpoint is invalidated and the user is redirected to the OIDC provider again to authenticate.  If the session at the OIDC provider is still active, users are automatically re-authenticated without needing to provide their credentials again."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:805
msgid "The current user session can be automatically extended by enabling the `quarkus.oidc.token.refresh-expired` property.  If set to `true`, when the current ID token expires, a refresh token grant will be used to refresh the ID token as well as access and refresh tokens."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:809
msgid "If you have a xref:security-oidc-bearer-token-authentication.adoc#single-page-applications[single page application for service applications] where your OIDC provider script such as `keycloak.js` is managing an authorization code flow then that script will also control the SPA authentication session lifespan."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:812
msgid "If you work with a Quarkus OIDC `web-app` application, then it is the Quarkus OIDC code authentication mechanism that is managing the user session lifespan."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:815
msgid "To use the refresh token, you should carefully configure the session cookie age.  The session age should be longer than the ID token lifespan and close to or equal to the refresh token lifespan."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:817
msgid "You calculate the session age by adding the lifespan value of the current ID token and the values of the `quarkus.oidc.authentication.session-age-extension` and `quarkus.oidc.token.lifespan-grace` properties."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:821
msgid "You use only the `quarkus.oidc.authentication.session-age-extension` property to significantly extend the session lifespan, if required.  You use the `quarkus.oidc.token.lifespan-grace` property only for taking some small clock skews into consideration."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:825
msgid "When the current authenticated user returns to the protected Quarkus endpoint and the ID token associated with the session cookie has expired, then, by default, the user is automatically redirected to the OIDC Authorization endpoint to re-authenticate.  The OIDC provider might challenge the user again if the session between the user and this OIDC provider is still active, which might happen if the session is configured to last longer than the ID token."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:829
msgid "If the `quarkus.oidc.token.refresh-expired` is set to `true`, then the expired ID token (as well as the access token) is refreshed by using the refresh token returned with the initial authorization code grant response.  This refresh token might also be recycled (refreshed) itself as part of this process.  As a result, the new session cookie is created and the session is extended."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:836
msgid "In instances where the user is not very active, you can use the `quarkus.oidc.authentication.session-age-extension` property to help handle expired ID tokens.  If the ID token expires, the session cookie might not be returned to the Quarkus endpoint during the next user request as the cookie lifespan would have elapsed.  Quarkus assumes that this request is the first authentication request.  Set `quarkus.oidc.authentication.session-age-extension` to be _reasonably_ long for your barely-active users and in accordance with your security policies."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:840
msgid "You can go one step further and proactively refresh ID tokens or access tokens that are about to expire.  Set `quarkus.oidc.token.refresh-token-time-skew` to the value you want to anticipate the refresh. If, during the current user request, it is calculated that the current ID token will expire within this `quarkus.oidc.token.refresh-token-time-skew` then it will be refreshed and the new session cookie will be created. This property should be set to a value which is less than the ID token lifespan; the closer it is to this lifespan value the more often the ID token will be refreshed."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:842
msgid "You can further optimize this process by having a simple JavaScript function ping your Quarkus endpoint to periodically emulate the user activity, which minimizes the time frame during which the user might have to be re-authenticated."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:847
msgid "You cannot extend the user session indefinitely.  The returning user with the expired ID token will have to re-authenticate at the OIDC provider endpoint once the refresh token has expired."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:850
#, no-wrap
msgid "Integration with GitHub and non-OIDC OAuth2 providers"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:854
msgid "Some well known providers such as GitHub or LinkedIn are not OpenID Connect but OAuth2 providers which support the `authorization code flow`, for example, link:https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps[GitHub OAuth2] and link:https://docs.microsoft.com/en-us/linkedin/shared/authentication/authorization-code-flow[LinkedIn OAuth2].  Remember, OIDC is built on top of OAuth2."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:856
msgid "The main difference between OpenID Connect and OAuth2 providers is that OpenID Connect providers return an `ID Token` that represents a user authentication, in addition to the standard authorization code flow `access` and `refresh` tokens returned by `OAuth2` providers."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:858
msgid "OAuth2 providers such as GitHub do not return `IdToken`, the fact of the user authentication is implicit and is indirectly represented by the `access` token which represents an authenticated user authorizing the current Quarkus `web-app` application to access some data on behalf of the authenticated user."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:862
msgid "For OIDC, you validate the ID token as proof of authentication validity whereas in the case of OAuth2, you validate the access token.  This is done by subsequently calling an endpoint that requires the access token and that typically returns user information.  This approach is similar to the OIDC xref:user-info[UserInfo] approach, with `UserInfo` fetched by Quarkus OIDC on your behalf."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:864
msgid "For example, when working with GitHub, the Quarkus endpoint can acquire an `access` token which allows the Quarkus endpoint to request a GitHub profile for the current user."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:866
msgid "To support the integration with such OAuth2 servers, `quarkus-oidc` needs to be configured a bit differently to allow the authorization code flow responses without `IdToken`: `quarkus.oidc.authentication.id-token-required=false`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:872
msgid "Even though you configure the extension to support the authorization code flows without `IdToken`, an internal `IdToken` is generated to standardize the way `quarkus-oidc` operates.  You use an `IdToken` to support the authentication session and to avoid redirecting the user to the provider, such as GitHub, on every request.  In this case, the session lifespan is set to 5 minutes, which you can can extend further as described in the xref:session-management[session management] section."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:874
msgid "This simplifies how you handle an application that supports multiple OIDC providers."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:883
msgid "The next step is to ensure that the returned access token can be useful and is valid to the current Quarkus endpoint.  The first way is to call the OAuth2 provider introspection endpoint by configuring `quarkus.oidc.introspection-path`, if the provider offers such an endpoint.  In this case you can use the access token as a source of roles using `quarkus.oidc.roles.source=accesstoken`.  If no introspection endpoint is present, you can attempt instead to request xref:user-info[UserInfo] from the provider as it will at least validate the access token.  To do so, specify `quarkus.oidc.token.verify-access-token-with-user-info=true`.  You also need to set the `quarkus.oidc.user-info-path` property to a URL endpoint that fetches the user info (or to an endpoint protected by the access token).  For GitHub, since it does not have an introspection endpoint, requesting the UserInfo is required."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:889
msgid "Requiring xref:user-info[UserInfo] involves making a remote call on every request.  Therefore, you might want to consider caching `UserInfo` data.  For more information, see the xref:security-oidc-bearer-token-authentication.adoc#token-introspection-userinfo-cache[Token Introspection and UserInfo cache] section of the \"OpenID Connect (OIDC) Bearer token authentication\" guide."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:891
msgid "Alternatively, you may want to request that `UserInfo` is embedded into the internal generated `IdToken` with the `quarkus.oidc.cache-user-info-in-idtoken=true` property - the advantage of this approach is that by default no cached `UserInfo` state will be kept with the endpoint - instead it will be stored in a session cookie. You may also want to consider encrypting `IdToken` in this case if `UserInfo` contains sensitive data. For more information, see xref:token-state-manager[Encrypt tokens with TokenStateManager]."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:895
msgid "OAuth2 servers might not support a well-known configuration endpoint.  In this case, you must disable the discovery and configure the authorization, token, and introspection and the userinfo endpoint paths manually."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:898
msgid "For well-known OIDC or OAuth2 providers, like Apple, Facebook, GitHub, Google, Microsoft, Spotify, and Twitter, Quarkus can help significantly simplify your application's configuration with the `quarkus.oidc.provider` property.  Here is how you can integrate `quarkus-oidc` with GitHub after you have link:https://docs.github.com/en/developers/apps/building-oauth-apps/creating-an-oauth-app[created a GitHub OAuth application]. Configure your Quarkus endpoint like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:904
#, no-wrap
msgid ""
"quarkus.oidc.provider=github\n"
"quarkus.oidc.client-id=github_app_clientid\n"
"quarkus.oidc.credentials.secret=github_app_clientsecret\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:907
#, no-wrap
msgid ""
"# user:email scope is requested by default, use 'quarkus.oidc.authentication.scopes' to request different scopes such as `read:user`.\n"
"# See https://docs.github.com/en/developers/apps/building-oauth-apps/scopes-for-oauth-apps for more information.\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:914
#, no-wrap
msgid ""
"# Consider enabling UserInfo Cache\n"
"# quarkus.oidc.token-cache.max-size=1000\n"
"# quarkus.oidc.token-cache.time-to-live=5M\n"
"#\n"
"# Or having UserInfo cached inside IdToken itself\n"
"# quarkus.oidc.cache-user-info-in-idtoken=true\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:917
msgid "See xref:security-openid-connect-providers.adoc[OpenID Connect providers] for more details about configuring other well-known providers."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:919
msgid "This is all what is needed for an endpoint like this one to return the currently-authenticated user's profile with `GET http://localhost:8080/github/userinfo` and access it as the individual `UserInfo` properties:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:926
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:997
#, no-wrap
msgid ""
"import jakarta.inject.Inject;\n"
"import jakarta.ws.rs.GET;\n"
"import jakarta.ws.rs.Path;\n"
"import jakarta.ws.rs.Produces;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:929
#, no-wrap
msgid ""
"import io.quarkus.oidc.UserInfo;\n"
"import io.quarkus.security.Authenticated;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:933
#, no-wrap
msgid ""
"@Path(\"/github\")\n"
"@Authenticated\n"
"public class TokenResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:936
#, no-wrap
msgid ""
"    @Inject\n"
"    UserInfo userInfo;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:944
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/userinfo\")\n"
"    @Produces(\"application/json\")\n"
"    public String getUserInfo() {\n"
"        return userInfo.getUserInfoString();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:947
msgid "If you support more than one social provider with the help of xref:security-openid-connect-multitenancy.adoc[OpenID Connect Multi-Tenancy], for example, Google which is an OpenID Connect Provider returning `IdToken` and GitHub which is an OAuth2 provider returning no `IdToken` and only allowing to access `UserInfo` then you can have your endpoint working with only the injected `SecurityIdentity` for both Google and GitHub flows. A simple augmentation of `SecurityIdentity` will be required where a principal created with the internally generated `IdToken` will be replaced with the `UserInfo` based principal when the GiHub flow is active:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:951
#, no-wrap
msgid "package io.quarkus.it.keycloak;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:953
#, no-wrap
msgid "import java.security.Principal;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:955
#, no-wrap
msgid "import jakarta.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:963
#, no-wrap
msgid ""
"import io.quarkus.oidc.UserInfo;\n"
"import io.quarkus.security.identity.AuthenticationRequestContext;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"
"import io.quarkus.security.identity.SecurityIdentityAugmentor;\n"
"import io.quarkus.security.runtime.QuarkusSecurityIdentity;\n"
"import io.smallrye.mutiny.Uni;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:966
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CustomSecurityIdentityAugmentor implements SecurityIdentityAugmentor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:974
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<SecurityIdentity> augment(SecurityIdentity identity, AuthenticationRequestContext context) {\n"
"        RoutingContext routingContext = identity.getAttribute(RoutingContext.class.getName());\n"
"        if (routingContext != null && routingContext.normalizedPath().endsWith(\"/github\")) {\n"
"\t        QuarkusSecurityIdentity.Builder builder = QuarkusSecurityIdentity.builder(identity);\n"
"\t        UserInfo userInfo = identity.getAttribute(\"userinfo\");\n"
"\t        builder.setPrincipal(new Principal() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:979
#, no-wrap
msgid ""
"\t            @Override\n"
"\t            public String getName() {\n"
"\t                return userInfo.getString(\"preferred_username\");\n"
"\t            }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:985
#, no-wrap
msgid ""
"\t        });\n"
"\t        identity = builder.build();\n"
"        }\n"
"        return Uni.createFrom().item(identity);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:987
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:990
msgid "Now, the following code will work when the user signs into your application by using Google or GitHub:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1000
#, no-wrap
msgid ""
"import io.quarkus.security.Authenticated;\n"
"import io.quarkus.security.identity.SecurityIdentity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1004
#, no-wrap
msgid ""
"@Path(\"/service\")\n"
"@Authenticated\n"
"public class TokenResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1007
#, no-wrap
msgid ""
"    @Inject\n"
"    SecurityIdentity identity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1014
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/google\")\n"
"    @Produces(\"application/json\")\n"
"    public String getUserName() {\n"
"        return identity.getPrincipal().getName();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1022
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/github\")\n"
"    @Produces(\"application/json\")\n"
"    public String getUserName() {\n"
"        return identity.getPrincipal().getUserName();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1025
msgid "Possibly a simpler alternative is to inject both `@IdToken JsonWebToken` and `UserInfo` and use `JsonWebToken` when dealing with the providers returning `IdToken` and `UserInfo` with the providers which do not return `IdToken`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1027
msgid "You must ensure that the callback path you enter in the GitHub OAuth application configuration matches the endpoint path where you'd like the user be redirected to after a successful GitHub authentication and application authorization, in this case it has to be set to `http:localhost:8080/github/userinfo`."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1029
#, no-wrap
msgid "Listening to important authentication events"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1035
msgid "You can register the `@ApplicationScoped` bean which will observe important OIDC authentication events.  When a user logs in for the first time, reauthenticates, or refreshes the session, the listener is updated.  In the future, more events might be reported.  For example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1040
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.enterprise.event.Observes;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1045
#, no-wrap
msgid ""
"import io.quarkus.oidc.IdTokenCredential;\n"
"import io.quarkus.oidc.SecurityEvent;\n"
"import io.quarkus.security.identity.AuthenticationRequestContext;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1048
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class SecurityEventListener {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1055
#, no-wrap
msgid ""
"    public void event(@Observes SecurityEvent event) {\n"
"        String tenantId = event.getSecurityIdentity().getAttribute(\"tenant-id\");\n"
"        RoutingContext vertxContext = event.getSecurityIdentity().getAttribute(RoutingContext.class.getName());\n"
"        vertxContext.put(\"listener-message\", String.format(\"event:%s,tenantId:%s\", event.getEventType().name(), tenantId));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1057
#, no-wrap
msgid "Propagating tokens to downstream services"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1060
msgid "For information about Authorization Code Flow access token propagation to downstream services, see the xref:security-openid-connect-client-reference.adoc#token-propagation[Token Propagation] section."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1062
#, no-wrap
msgid "Integration considerations"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1065
msgid "Your application secured by OIDC integrates in an environment where it can be called from single-page applications, needs to work with well-known OIDC providers, run behind HTTP Reverse Proxy, require external and internal access, etc."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1067
msgid "This section discusses these considerations."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1068
#, no-wrap
msgid "Single-page applications"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1071
msgid "You can check if implementing single-page applications (SPAs) the way it is suggested in the xref:security-oidc-bearer-token-authentication.adoc#single-page-applications[Single-page applications] section of the \"OpenID Connect (OIDC) Bearer token authentication\" guide meets your requirements."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1074
msgid "If you prefer to use SPAs and JavaScript APIs such as `Fetch` or `XMLHttpRequest`(XHR) with Quarkus web applications, be aware that OpenID Connect providers might not support cross-origin resource sharing (CORS) for authorization endpoints where the users are authenticated after a redirect from Quarkus.  This will lead to authentication failures if the Quarkus application and the OpenID Connect provider are hosted on different HTTP domains, ports, or both."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1078
msgid "In such cases, set the `quarkus.oidc.authentication.java-script-auto-redirect` property to `false`, which will instruct Quarkus to return a `499` status code and a `WWW-Authenticate` header with the `OIDC` value.  You must also update the browser script to set the `X-Requested-With` header with the `JavaScript` value and reload the last requested page in case of a `499` status code.  For example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1083
#, no-wrap
msgid ""
"Future<void> callQuarkusService() async {\n"
"    Map<String, String> headers = Map.fromEntries([MapEntry(\"X-Requested-With\", \"JavaScript\")]);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1092
#, no-wrap
msgid ""
"    await http\n"
"        .get(\"https://localhost:443/serviceCall\")\n"
"        .then((response) {\n"
"            if (response.statusCode == 499) {\n"
"                window.location.assign(\"https://localhost.com:443/serviceCall\");\n"
"            }\n"
"         });\n"
"  }\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1094
#, no-wrap
msgid "Cross-origin resource sharing"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1098
msgid "If you plan to consume this application from a single-page application running on a different domain, you need to configure cross-origin resource sharing (CORS).  For more information, see the xref:http-reference.adoc#cors-filter[CORS filter] section of the \"HTTP reference\" guide."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1099
#, no-wrap
msgid "Calling Cloud provider services"
msgstr ""

#. type: Title ====
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1101
#, no-wrap
msgid "Google Cloud"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1104
msgid "You can have Quarkus OIDC `web-app` applications access **Google Cloud services** such as **BigQuery** on behalf of the currently-authenticated users who have enabled OpenID Connect (Authorization Code Flow) permissions to such services in their Google developer consoles."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1107
msgid "It is super easy to do with https://github.com/quarkiverse[Quarkiverse] https://github.com/quarkiverse/quarkiverse-google-cloud-services[Google Cloud Services], only add the https://github.com/quarkiverse/quarkiverse-google-cloud-services/releases/latest[latest tag] service dependency, for example:"
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1109
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1171
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1204
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1324
#, no-wrap
msgid "pom.xml"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1116
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkiverse.googlecloudservices</groupId>\n"
"    <artifactId>quarkus-google-cloud-bigquery</artifactId>\n"
"    <version>${quarkiverse.googlecloudservices.version}</version>\n"
"</dependency>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1119
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1192
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1214
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1334
#, no-wrap
msgid "build.gradle"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1122
#, no-wrap
msgid "implementation(\"io.quarkiverse.googlecloudservices:quarkus-google-cloud-bigquery:${quarkiverse.googlecloudservices.version}\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1125
msgid "and configure Google OIDC properties:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1132
#, no-wrap
msgid ""
"quarkus.oidc.provider=google\n"
"quarkus.oidc.client-id={GOOGLE_CLIENT_ID}\n"
"quarkus.oidc.credentials.secret={GOOGLE_CLIENT_SECRET}\n"
"quarkus.oidc.token.issuer=https://accounts.google.com\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1134
#, no-wrap
msgid "Running Quarkus application behind a reverse proxy"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1137
msgid "OIDC authentication mechanism can be affected if your Quarkus application is running behind a reverse proxy/gateway/firewall when HTTP `Host` header may be reset to the internal IP address, HTTPS connection may be terminated, etc. For example, an authorization code flow `redirect_uri` parameter may be set to the internal host instead of the expected external one."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1139
msgid "In such cases configuring Quarkus to recognize the original headers forwarded by the proxy will be required, for more information, see the xref:http-reference.adoc#reverse-proxy[Running behind a reverse proxy] Vert.x documentation section."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1141
msgid "For example, if your Quarkus endpoint runs in a cluster behind Kubernetes Ingress then a redirect from the OpenID Connect Provider back to this endpoint may not work since the calculated `redirect_uri` parameter may point to the internal endpoint address. This problem can be resolved with the following configuration:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1148
#, no-wrap
msgid ""
"quarkus.http.proxy.proxy-address-forwarding=true\n"
"quarkus.http.proxy.allow-forwarded=false\n"
"quarkus.http.proxy.enable-forwarded-host=true\n"
"quarkus.http.proxy.forwarded-host-header=X-ORIGINAL-HOST\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1151
msgid "where `X-ORIGINAL-HOST` is set by Kubernetes Ingress to represent the external endpoint address."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1153
msgid "`quarkus.oidc.authentication.force-redirect-https-scheme` property may also be used when the Quarkus application is running behind an SSL terminating reverse proxy."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1154
#, no-wrap
msgid "External and internal access to the OIDC provider"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1158
msgid "Note that the OpenID Connect Provider externally accessible authorization, logout and other endpoints may have different HTTP(S) URLs compared to the URLs auto-discovered or configured relative to `quarkus.oidc.auth-server-url` internal URL.  In such cases an issuer verification failure may be reported by the endpoint and redirects to the externally accessible Connect Provider endpoints may fail."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1161
msgid "In such cases, if you work with Keycloak then please start it with a `KEYCLOAK_FRONTEND_URL` system property set to the externally accessible base URL.  If you work with other Openid Connect providers then please check your provider's documentation."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1163
#, no-wrap
msgid "Testing"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1167
msgid "Testing is often tricky when it comes to authentification to a separate OIDC like server.  Quarkus offers several options from mocking to a local run of an OIDC provider."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1169
msgid "Start by adding the following dependencies to your test project:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1189
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>net.sourceforge.htmlunit</groupId>\n"
"    <artifactId>htmlunit</artifactId>\n"
"    <exclusions>\n"
"        <exclusion>\n"
"            <groupId>org.eclipse.jetty</groupId>\n"
"            <artifactId>*</artifactId>\n"
"       </exclusion>\n"
"    </exclusions>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1196
#, no-wrap
msgid ""
"testImplementation(\"net.sourceforge.htmlunit:htmlunit\")\n"
"testImplementation(\"io.quarkus:quarkus-junit5\")\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1199
#, no-wrap
msgid "Wiremock"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1202
msgid "Add the following dependency:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1211
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-oidc-server</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1217
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-test-oidc-server\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1220
msgid "Prepare the REST test endpoints, set `application.properties`, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1228
#, no-wrap
msgid ""
"# keycloak.url is set by OidcWiremockTestResource\n"
"quarkus.oidc.auth-server-url=${keycloak.url}/realms/quarkus/\n"
"quarkus.oidc.client-id=quarkus-web-app\n"
"quarkus.oidc.credentials.secret=secret\n"
"quarkus.oidc.application-type=web-app\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1231
msgid "and finally write the test code, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1235
#, no-wrap
msgid "import static org.junit.jupiter.api.Assertions.assertEquals;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1237
#, no-wrap
msgid "import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1242
#, no-wrap
msgid ""
"import com.gargoylesoftware.htmlunit.SilentCssErrorHandler;\n"
"import com.gargoylesoftware.htmlunit.WebClient;\n"
"import com.gargoylesoftware.htmlunit.html.HtmlForm;\n"
"import com.gargoylesoftware.htmlunit.html.HtmlPage;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1246
#, no-wrap
msgid ""
"import io.quarkus.test.common.QuarkusTestResource;\n"
"import io.quarkus.test.junit.QuarkusTest;\n"
"import io.quarkus.test.oidc.server.OidcWiremockTestResource;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1250
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(OidcWiremockTestResource.class)\n"
"public class CodeFlowAuthorizationTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1256
#, no-wrap
msgid ""
"    @Test\n"
"    public void testCodeFlow() throws Exception {\n"
"        try (final WebClient webClient = createWebClient()) {\n"
"            // the test REST endpoint listens on '/code-flow'\n"
"            HtmlPage page = webClient.getPage(\"http://localhost:8081/code-flow\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1261
#, no-wrap
msgid ""
"            HtmlForm form = page.getFormByName(\"form\");\n"
"            // user 'alice' has the 'user' role\n"
"            form.getInputByName(\"username\").type(\"alice\");\n"
"            form.getInputByName(\"password\").type(\"alice\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1263
#, no-wrap
msgid "            page = form.getInputByValue(\"login\").click();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1267
#, no-wrap
msgid ""
"            assertEquals(\"alice\", page.getBody().asText());\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1274
#, no-wrap
msgid ""
"    private WebClient createWebClient() {\n"
"        WebClient webClient = new WebClient();\n"
"        webClient.setCssErrorHandler(new SilentCssErrorHandler());\n"
"        return webClient;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1277
msgid "`OidcWiremockTestResource` recognizes `alice` and `admin` users. The user `alice` has the `user` role only by default - it can be customized with a `quarkus.test.oidc.token.user-roles` system property. The user `admin` has the `user` and `admin` roles by default - it can be customized with a `quarkus.test.oidc.token.admin-roles` system property."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1279
msgid "Additionally, `OidcWiremockTestResource` set token issuer and audience to `https://service.example.com` which can be customized with `quarkus.test.oidc.token.issuer` and `quarkus.test.oidc.token.audience` system properties."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1281
msgid "`OidcWiremockTestResource` can be used to emulate all OpenID Connect providers."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1283
#, no-wrap
msgid "Dev services for Keycloak"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1287
msgid "Using xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] is recommended for the integration testing against Keycloak.  `Dev Services for Keycloak` will launch and initialize a test container: it will create a `quarkus` realm, a `quarkus-app` client (`secret` secret) and add `alice` (`admin` and `user` roles) and `bob` (`user` role) users, where all of these properties can be customized."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1289
msgid "First, prepare `application.properties`. You can start with a completely empty `application.properties` as `Dev Services for Keycloak` will register `quarkus.oidc.auth-server-url` pointing to the running test container as well as `quarkus.oidc.client-id=quarkus-app` and `quarkus.oidc.credentials.secret=secret`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1291
msgid "But if you already have all the required `quarkus-oidc` properties configured then you only need to associate `quarkus.oidc.auth-server-url` with the `prod` profile for `Dev Services for Keycloak`to start a container, for example:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1295
#, no-wrap
msgid "%prod.quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1298
msgid "If a custom realm file has to be imported into Keycloak before running the tests then you can configure `Dev Services for Keycloak` as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1303
#, no-wrap
msgid ""
"%prod.quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus\n"
"quarkus.keycloak.devservices.realm-path=quarkus-realm.json\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1307
msgid "Finally, write a test code the same way as it is described in the xref:integration-testing-wiremock[Wiremock] section.  The only difference is that `@QuarkusTestResource` is no longer needed:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1313
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class CodeFlowAuthorizationTest {\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1316
#, no-wrap
msgid "Using KeycloakTestResourceLifecycleManager"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1320
msgid "Use `KeycloakTestResourceLifecycleManager` for your tests only if there is a good reason not to use `Dev Services for Keycloak`.  If you need to do the integration testing against Keycloak then you are encouraged to do it with xref:integration-testing-keycloak-devservices[Dev services For Keycloak]."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1322
msgid "Start with adding the following dependency:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1331
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-test-keycloak-server</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1337
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-test-keycloak-server\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1340
msgid "which provides `io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager` - an implementation of `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` which starts a Keycloak container."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1342
msgid "And configure the Maven Surefire plugin as follows:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1358
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-surefire-plugin</artifactId>\n"
"    <configuration>\n"
"        <systemPropertyVariables>\n"
"            <!-- or, alternatively, configure 'keycloak.version' -->\n"
"            <keycloak.docker.image>${keycloak.docker.image}</keycloak.docker.image>\n"
"            <!--\n"
"              Disable HTTPS if required:\n"
"              <keycloak.use.https>false</keycloak.use.https>\n"
"            -->\n"
"        </systemPropertyVariables>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1361
msgid "(and similarly the Maven Failsafe plugin when testing in native image)."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1364
msgid "And now set the configuration and write the test code the same way as it is described in the xref:integration-testing-wiremock[Wiremock] section.  The only difference is the name of `QuarkusTestResource`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1368
#, no-wrap
msgid "import io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1373
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(KeycloakTestResourceLifecycleManager.class)\n"
"public class CodeFlowAuthorizationTest {\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1376
msgid "`KeycloakTestResourceLifecycleManager` registers `alice` and `admin` users. The user `alice` has the `user` role only by default - it can be customized with a `keycloak.token.user-roles` system property. The user `admin` has the `user` and `admin` roles by default - it can be customized with a `keycloak.token.admin-roles` system property."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1379
msgid "By default, `KeycloakTestResourceLifecycleManager` uses HTTPS to initialize a Keycloak instance which can be disabled with `keycloak.use.https=false`.  Default realm name is `quarkus` and client id - `quarkus-web-app` - set `keycloak.realm` and `keycloak.web-app.client` system properties to customize the values if needed."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1381
#, no-wrap
msgid "TestSecurity annotation"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1384
msgid "See xref:security-oidc-bearer-token-authentication.adoc#integration-testing-security-annotation[Use TestingSecurity with injected JsonWebToken] section for more information about using `@TestSecurity` and `@OidcSecurity` annotations for testing the `web-app` application endpoint code which depends on the injected ID and access `JsonWebToken` as well as `UserInfo` and `OidcConfigurationMetadata`."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1385
#, no-wrap
msgid "Checking errors in the logs"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1388
msgid "To see details about the token verification errors, you must enable `io.quarkus.oidc.runtime.OidcProvider` `TRACE` level logging:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1393
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcProvider\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcProvider\".min-level=TRACE\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1396
msgid "To see details about the OidcProvider client initialization errors, enable `io.quarkus.oidc.runtime.OidcRecorder` `TRACE` level logging:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1401
#, no-wrap
msgid ""
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcRecorder\".level=TRACE\n"
"quarkus.log.category.\"io.quarkus.oidc.runtime.OidcRecorder\".min-level=TRACE\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1404
msgid "You can also from `quarkus dev` console hit `j` to change the application global log level."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1405
#, no-wrap
msgid "References"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1408
msgid "xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1409
msgid "xref:security-openid-connect-providers.adoc[Configuring well-known OpenID Connect Providers]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1410
msgid "xref:security-openid-connect-client-reference.adoc[OpenID Connect and OAuth2 Client and Filters Reference Guide]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1411
msgid "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1412
msgid "xref:security-authentication-mechanisms.adoc#oidc-jwt-oauth2-comparison[Choosing between OpenID Connect, SmallRye JWT, and OAuth2 authentication mechanisms]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1413
msgid "xref:security-authentication-mechanisms.adoc#combining-authentication-mechanisms[Combining authentication mechanisms]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1414
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1415
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1416
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/security-oidc-code-flow-authentication.adoc:1417
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr ""
