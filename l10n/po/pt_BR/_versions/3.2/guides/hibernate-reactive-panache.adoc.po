# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:10+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:6
#, no-wrap
msgid "Simplified Hibernate Reactive with Panache"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:16
msgid "link:https://hibernate.org/reactive/[Hibernate Reactive] is the only reactive Jakarta Persistence (formerly known as JPA) implementation and offers you the full breadth of an Object Relational Mapper allowing you to access your database over reactive drivers.  It makes complex mappings possible, but it does not make simple and common mappings trivial.  Hibernate Reactive with Panache focuses on making your entities trivial and fun to write in Quarkus."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:17
#, no-wrap
msgid "First: an example"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:20
msgid "What we're doing in Panache allows you to write your Hibernate Reactive entities like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:24
#, no-wrap
msgid "import io.quarkus.hibernate.reactive.panache.PanacheEntity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:30
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:177
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:259
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:34
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:263
#, no-wrap
msgid ""
"    public static Uni<Person> findByName(String name){\n"
"        return find(\"name\", name).firstResult();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:38
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:267
#, no-wrap
msgid ""
"    public static Uni<List<Person>> findAlive(){\n"
"        return list(\"status\", Status.Alive);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:43
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:272
#, no-wrap
msgid ""
"    public static Uni<Long> deleteStefs(){\n"
"        return delete(\"name\", \"Stef\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:47
msgid "You have noticed how much more compact and readable the code is? Does this look interesting? Read on!"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:49
msgid "The `list()` method might be surprising at first. It takes fragments of HQL (JP-QL) queries and contextualizes the rest. That makes for very concise but yet readable code."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:52
msgid "What was described above is essentially the link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[active record pattern], sometimes just called the entity pattern.  Hibernate with Panache also allows for the use of the more classical link:https://martinfowler.com/eaaCatalog/repository.html[repository pattern] via `PanacheRepository`."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:53
#, no-wrap
msgid "Solution"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:57
msgid "We recommend that you follow the instructions in the next sections and create the application step by step.  However, you can go right to the completed example."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:59
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:61
msgid "The solution is located in the `hibernate-reactive-panache-quickstart` link:{quickstarts-tree-url}/hibernate-reactive-panache-quickstart[directory]."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:65
msgid "If your project is already configured to use other annotation processors, you will need to additionally add the Panache annotation processor:"
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:67
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:111
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:909
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1019
#, no-wrap
msgid "pom.xml"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:84
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-compiler-plugin</artifactId>\n"
"    <version>${compiler-plugin.version}</version>\n"
"    <configuration>\n"
"        <parameters>${maven.compiler.parameters}</parameters>\n"
"        <annotationProcessorPaths>\n"
"            <!-- Your existing annotation processor(s)... -->\n"
"            <path>\n"
"                <groupId>io.quarkus</groupId>\n"
"                <artifactId>quarkus-panache-common</artifactId>\n"
"                <version>${quarkus.platform.version}</version>\n"
"            </path>\n"
"        </annotationProcessorPaths>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:87
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:127
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:919
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1029
#, no-wrap
msgid "build.gradle"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:90
#, no-wrap
msgid "annotationProcessor(\"io.quarkus:quarkus-panache-common\")\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:93
#, no-wrap
msgid "Setting up and configuring Hibernate Reactive with Panache"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:96
msgid "To get started:"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:98
msgid "add your settings in `{config-file}`"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:99
msgid "annotate your entities with `@Entity`"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:100
msgid "make your entities extend `PanacheEntity` (optional if you are using the repository pattern)"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:102
msgid "Follow the xref:hibernate-orm.adoc#setting-up-and-configuring-hibernate-orm[Hibernate set-up guide for all configuration]."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:104
msgid "In your `pom.xml`, add the following dependencies:"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:106
msgid "the Hibernate Reactive with Panache extension"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:107
msgid "your reactive driver extension (`quarkus-reactive-pg-client`, `quarkus-reactive-mysql-client`, `quarkus-reactive-db2-client`, ...)"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:109
msgid "For instance:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:118
#, no-wrap
msgid ""
"<!-- Hibernate Reactive dependency -->\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-hibernate-reactive-panache</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:124
#, no-wrap
msgid ""
"<!-- Reactive SQL client for PostgreSQL -->\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-reactive-pg-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:131
#, no-wrap
msgid ""
"// Hibernate Reactive dependency\n"
"implementation(\"io.quarkus:quarkus-hibernate-reactive-panache\")\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:134
#, no-wrap
msgid ""
"Reactive SQL client for PostgreSQL\n"
"implementation(\"io.quarkus:quarkus-reactive-pg-client\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:137
msgid "Then add the relevant configuration properties in `{config-file}`."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:145
#, no-wrap
msgid ""
"# configure your datasource\n"
"quarkus.datasource.db-kind = postgresql\n"
"quarkus.datasource.username = sarah\n"
"quarkus.datasource.password = connor\n"
"quarkus.datasource.reactive.url = vertx-reactive:postgresql://localhost:5432/mydatabase\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:148
#, no-wrap
msgid ""
"# drop and create the database at startup (use `update` to only update the schema)\n"
"quarkus.hibernate-orm.database.generation = drop-and-create\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:150
#, no-wrap
msgid "Solution 1: using the active record pattern"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:152
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:277
#, no-wrap
msgid "Defining your entity"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:156
msgid "To define a Panache entity, simply extend `PanacheEntity`, annotate it with `@Entity` and add your columns as public fields:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:165
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:169
msgid "You can put all your Jakarta Persistence column annotations on the public fields. If you need a field to not be persisted, use the `@Transient` annotation on it. If you need to write accessors, you can:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:182
#, no-wrap
msgid ""
"    // return name as uppercase in the model\n"
"    public String getName(){\n"
"        return name.toUpperCase();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:188
#, no-wrap
msgid ""
"    // store all names in lowercase in the DB\n"
"    public void setName(String name){\n"
"        this.name = name.toLowerCase();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:193
msgid "And thanks to our field access rewrite, when your users read `person.name` they will actually call your `getName()` accessor, and similarly for field writes and the setter.  This allows for proper encapsulation at runtime as all fields calls will be replaced by the corresponding getter/setter calls."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:194
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:360
#, no-wrap
msgid "Most useful operations"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:197
msgid "Once you have written your entity, here are the most common operations you will be able to perform:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:205
#, no-wrap
msgid ""
"// creating a person\n"
"Person person = new Person();\n"
"person.name = \"Stef\";\n"
"person.birth = LocalDate.of(1910, Month.FEBRUARY, 1);\n"
"person.status = Status.Alive;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:208
#, no-wrap
msgid ""
"// persist it\n"
"Uni<Void> persistOperation = person.persist();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:211
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:377
#, no-wrap
msgid ""
"// note that once persisted, you don't need to explicitly save your entity: all\n"
"// modifications are automatically persisted on transaction commit.\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:217
#, no-wrap
msgid ""
"// check if it is persistent\n"
"if(person.isPersistent()){\n"
"    // delete it\n"
"    Uni<Void> deleteOperation = person.delete();\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:220
#, no-wrap
msgid ""
"// getting a list of all Person entities\n"
"Uni<List<Person>> allPersons = Person.listAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:223
#, no-wrap
msgid ""
"// finding a specific person by ID\n"
"Uni<Person> personById = Person.findById(23L);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:226
#, no-wrap
msgid ""
"// finding all living persons\n"
"Uni<List<Person>> livingPersons = Person.list(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:229
#, no-wrap
msgid ""
"// counting all persons\n"
"Uni<Long> countAll = Person.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:232
#, no-wrap
msgid ""
"// counting all living persons\n"
"Uni<Long> countAlive = Person.count(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:235
#, no-wrap
msgid ""
"// delete all living persons\n"
"Uni<Long> deleteAliveOperation = Person.delete(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:238
#, no-wrap
msgid ""
"// delete all persons\n"
"Uni<Long> deleteAllOperation = Person.deleteAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:241
#, no-wrap
msgid ""
"// delete by id\n"
"Uni<Boolean> deleteByIdOperation = Person.deleteById(23L);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:244
#, no-wrap
msgid ""
"// set the name of all living persons to 'Mortal'\n"
"Uni<Integer> updateOperation = Person.update(\"name = 'Mortal' where status = ?1\", Status.Alive);\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:246
#, no-wrap
msgid "Adding entity methods"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:251
msgid "Add custom queries on your entities inside the entities themselves.  That way, you and your co-workers can find them easily, and queries are co-located with the object they operate on.  Adding them as static methods in your entity class is the Panache Active Record way."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:274
#, no-wrap
msgid "Solution 2: using the repository pattern"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:280
msgid "When using the repository pattern, you can define your entities as regular Jakarta Persistence entities."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:289
#, no-wrap
msgid ""
"@Entity\n"
"public class Person {\n"
"    @Id @GeneratedValue private Long id;\n"
"    private String name;\n"
"    private LocalDate birth;\n"
"    private Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:315
#, no-wrap
msgid ""
"    public Long getId(){\n"
"        return id;\n"
"    }\n"
"    public void setId(Long id){\n"
"        this.id = id;\n"
"    }\n"
"    public String getName() {\n"
"        return name;\n"
"    }\n"
"    public void setName(String name) {\n"
"        this.name = name;\n"
"    }\n"
"    public LocalDate getBirth() {\n"
"        return birth;\n"
"    }\n"
"    public void setBirth(LocalDate birth) {\n"
"        this.birth = birth;\n"
"    }\n"
"    public Status getStatus() {\n"
"        return status;\n"
"    }\n"
"    public void setStatus(Status status) {\n"
"        this.status = status;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:319
msgid "If you don't want to bother defining getters/setters for your entities, you can make them extend `PanacheEntityBase` and Quarkus will generate them for you. You can even extend `PanacheEntity` and take advantage of the default ID it provides."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:320
#, no-wrap
msgid "Defining your repository"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:324
msgid "When using Repositories, you get the exact same convenient methods as with the active record pattern, injected in your Repository, by making them implements `PanacheRepository`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:329
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheRepository<Person> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:331
#, no-wrap
msgid "   // put your custom logic here as instance methods\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:335
#, no-wrap
msgid ""
"   public Uni<Person> findByName(String name){\n"
"       return find(\"name\", name).firstResult();\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:339
#, no-wrap
msgid ""
"   public Uni<List<Person>> findAlive(){\n"
"       return list(\"status\", Status.Alive);\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:344
#, no-wrap
msgid ""
"   public Uni<Long> deleteStefs(){\n"
"       return delete(\"name\", \"Stef\");\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:348
msgid "All the operations that are defined on `PanacheEntityBase` are available on your repository, so using it is exactly the same as using the active record pattern, except you need to inject it:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:353
#, no-wrap
msgid ""
"@Inject\n"
"PersonRepository personRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:358
#, no-wrap
msgid ""
"@GET\n"
"public Uni<Long> count(){\n"
"    return personRepository.count();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:363
msgid "Once you have written your repository, here are the most common operations you will be able to perform:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:371
#, no-wrap
msgid ""
"// creating a person\n"
"Person person = new Person();\n"
"person.setName(\"Stef\");\n"
"person.setBirth(LocalDate.of(1910, Month.FEBRUARY, 1));\n"
"person.setStatus(Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:374
#, no-wrap
msgid ""
"// persist it\n"
"Uni<Void> persistOperation = personRepository.persist(person);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:383
#, no-wrap
msgid ""
"// check if it is persistent\n"
"if(personRepository.isPersistent(person)){\n"
"    // delete it\n"
"    Uni<Void> deleteOperation = personRepository.delete(person);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:386
#, no-wrap
msgid ""
"// getting a list of all Person entities\n"
"Uni<List<Person>> allPersons = personRepository.listAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:389
#, no-wrap
msgid ""
"// finding a specific person by ID\n"
"Uni<Person> personById = personRepository.findById(23L);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:392
#, no-wrap
msgid ""
"// finding all living persons\n"
"Uni<List<Person>> livingPersons = personRepository.list(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:395
#, no-wrap
msgid ""
"// counting all persons\n"
"Uni<Long> countAll = personRepository.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:398
#, no-wrap
msgid ""
"// counting all living persons\n"
"Uni<Long> countAlive = personRepository.count(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:401
#, no-wrap
msgid ""
"// delete all living persons\n"
"Uni<Long> deleteLivingOperation = personRepository.delete(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:404
#, no-wrap
msgid ""
"// delete all persons\n"
"Uni<Long> deleteAllOperation = personRepository.deleteAll();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:407
#, no-wrap
msgid ""
"// delete by id\n"
"Uni<Boolean> deleteByIdOperation = personRepository.deleteById(23L);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:410
#, no-wrap
msgid ""
"// set the name of all living persons to 'Mortal'\n"
"Uni<Integer> updateOperation = personRepository.update(\"name = 'Mortal' where status = ?1\", Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:415
msgid "The rest of the documentation show usages based on the active record pattern only, but keep in mind that they can be performed with the repository pattern as well.  The repository pattern examples have been omitted for brevity."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:416
#, no-wrap
msgid "Advanced Query"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:418
#, no-wrap
msgid "Paging"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:422
msgid "You should only use the `list` methods if your table contains small enough data sets. For larger data sets you can use the `find` method equivalents, which return a `PanacheQuery` on which you can do paging:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:427
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:463
#, no-wrap
msgid ""
"// create a query for all living persons\n"
"PanacheQuery<Person> livingPersons = Person.find(\"status\", Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:430
#, no-wrap
msgid ""
"// make it use pages of 25 entries at a time\n"
"livingPersons.page(Page.ofSize(25));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:433
#, no-wrap
msgid ""
"// get the first page\n"
"Uni<List<Person>> firstPage = livingPersons.list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:436
#, no-wrap
msgid ""
"// get the second page\n"
"Uni<List<Person>> secondPage = livingPersons.nextPage().list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:439
#, no-wrap
msgid ""
"// get page 7\n"
"Uni<List<Person>> page7 = livingPersons.page(Page.of(7, 25)).list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:442
#, no-wrap
msgid ""
"// get the number of pages\n"
"Uni<Integer> numberOfPages = livingPersons.pageCount();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:445
#, no-wrap
msgid ""
"// get the total number of entities returned by this query without paging\n"
"Uni<Long> count = livingPersons.count();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:451
#, no-wrap
msgid ""
"// and you can chain methods of course\n"
"Uni<List<Person>> persons = Person.find(\"status\", Status.Alive)\n"
"        .page(Page.ofSize(25))\n"
"        .nextPage()\n"
"        .list();\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:454
msgid "The `PanacheQuery` type has many other methods to deal with paging and returning streams."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:455
#, no-wrap
msgid "Using a range instead of pages"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:458
msgid "`PanacheQuery` also allows range-based queries."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:466
#, no-wrap
msgid ""
"// make it use a range: start at index 0 until index 24 (inclusive).\n"
"livingPersons.range(0, 24);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:469
#, no-wrap
msgid ""
"// get the range\n"
"Uni<List<Person>> firstRange = livingPersons.list();\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:472
#, no-wrap
msgid ""
"// to get the next range, you need to call range again\n"
"Uni<List<Person>> secondRange = livingPersons.range(25, 49).list();\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:478
msgid "You cannot mix ranges and pages: if you use a range, all methods that depend on having a current page will throw an `UnsupportedOperationException`; you can switch back to paging using `page(Page)` or `page(int, int)`."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:480
#, no-wrap
msgid "Sorting"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:483
msgid "All methods accepting a query string also accept the following simplified query form:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:487
#, no-wrap
msgid "Uni<List<Person>> persons = Person.list(\"order by name,birth\");\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:490
msgid "But these methods also accept an optional `Sort` parameter, which allows you to abstract your sorting:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:494
#, no-wrap
msgid "Uni<List<Person>> persons = Person.list(Sort.by(\"name\").and(\"birth\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:497
#, no-wrap
msgid ""
"// and with more restrictions\n"
"Uni<List<Person>> persons = Person.list(\"status\", Sort.by(\"name\").and(\"birth\"), Status.Alive);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:500
#, no-wrap
msgid ""
"// and list first the entries with null values in the field \"birth\"\n"
"Uni<List<Person>> persons = Person.list(Sort.by(\"birth\", Sort.NullPrecedence.NULLS_FIRST));\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:503
msgid "The `Sort` class has plenty of methods for adding columns and specifying sort direction or the null precedence."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:504
#, no-wrap
msgid "Simplified queries"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:508
msgid "Normally, HQL queries are of this form: `from EntityName [where ...] [order by ...]`, with optional elements at the end."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:510
msgid "If your select query does not start with `from`, we support the following additional forms:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:512
msgid "`order by ...` which will expand to `from EntityName order by ...`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:513
msgid "`<singleColumnName>` (and single parameter) which will expand to `from EntityName where <singleColumnName> = ?`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:514
msgid "`<query>` will expand to `from EntityName where <query>`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:516
msgid "If your update query does not start with `update`, we support the following additional forms:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:518
msgid "`from EntityName ...` which will expand to `update from EntityName ...`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:519
msgid "`set? <singleColumnName>` (and single parameter) which will expand to `update from EntityName set <singleColumnName> = ?`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:520
msgid "`set? <update-query>` will expand to `update from EntityName set <update-query>`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:522
msgid "If your delete query does not start with `delete`, we support the following additional forms:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:524
msgid "`from EntityName ...` which will expand to `delete from EntityName ...`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:525
msgid "`<singleColumnName>` (and single parameter) which will expand to `delete from EntityName where <singleColumnName> = ?`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:526
msgid "`<query>` will expand to `delete from EntityName where <query>`"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:529
msgid "You can also write your queries in plain link:{hibernate-orm-docs-url}#hql[HQL]:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:534
#, no-wrap
msgid ""
"Order.find(\"select distinct o from Order o left join fetch o.lineItems\");\n"
"Order.update(\"update from Person set name = 'Mortal' where status = ?\", Status.Alive);\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:536
#, no-wrap
msgid "Named queries"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:539
msgid "You can reference a named query instead of a (simplified) HQL query by prefixing its name with the '#' character. You can also use named queries for count, update and delete queries."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:553
#, no-wrap
msgid ""
"@Entity\n"
"@NamedQueries({\n"
"    @NamedQuery(name = \"Person.getByName\", query = \"from Person where name = ?1\"),\n"
"    @NamedQuery(name = \"Person.countByStatus\", query = \"select count(*) from Person p where p.status = :status\"),\n"
"    @NamedQuery(name = \"Person.updateStatusById\", query = \"update Person p set p.status = :status where p.id = :id\"),\n"
"    @NamedQuery(name = \"Person.deleteById\", query = \"delete from Person p where p.id = ?1\")\n"
"})\n"
"public class Person extends PanacheEntity {\n"
"    public String name;\n"
"    public LocalDate birth;\n"
"    public Status status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:557
#, no-wrap
msgid ""
"    public static Uni<Person> findByName(String name){\n"
"        return find(\"#Person.getByName\", name).firstResult();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:561
#, no-wrap
msgid ""
"    public static Uni<Long> countByStatus(Status status) {\n"
"        return count(\"#Person.countByStatus\", Parameters.with(\"status\", status).map());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:565
#, no-wrap
msgid ""
"    public static Uni<Long> updateStatusById(Status status, Long id) {\n"
"        return update(\"#Person.updateStatusById\", Parameters.with(\"status\", status).and(\"id\", id));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:570
#, no-wrap
msgid ""
"    public static Uni<Long> deleteById(Long id) {\n"
"        return delete(\"#Person.deleteById\", id);\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:576
msgid "Named queries can only be defined inside your Jakarta Persistence entity classes (being the Panache entity class, or the repository parameterized type), or on one of its super classes."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:578
#, no-wrap
msgid "Query parameters"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:581
msgid "You can pass query parameters by index (1-based) as shown below:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:585
#, no-wrap
msgid "Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:588
msgid "Or by name using a `Map`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:595
#, no-wrap
msgid ""
"Map<String, Object> params = new HashMap<>();\n"
"params.put(\"name\", \"stef\");\n"
"params.put(\"status\", Status.Alive);\n"
"Person.find(\"name = :name and status = :status\", params);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:598
msgid "Or using the convenience class `Parameters` either as is or to build a `Map`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:604
#, no-wrap
msgid ""
"// generate a Map\n"
"Person.find(\"name = :name and status = :status\",\n"
"         Parameters.with(\"name\", \"stef\").and(\"status\", Status.Alive).map());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:608
#, no-wrap
msgid ""
"// use it as-is\n"
"Person.find(\"name = :name and status = :status\",\n"
"         Parameters.with(\"name\", \"stef\").and(\"status\", Status.Alive));\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:611
msgid "Every query operation accepts passing parameters by index (`Object...`), or by name (`Map<String,Object>` or `Parameters`)."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:612
#, no-wrap
msgid "Query projection"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:615
msgid "Query projection can be done with the `project(Class)` method on the `PanacheQuery` object that is returned by the `find()` methods."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:617
msgid "You can use it to restrict which fields will be returned by the database."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:621
msgid "Hibernate will use **DTO projection** and generate a SELECT clause with the attributes from the projection class.  This is also called **dynamic instantiation** or **constructor expression**, more info can be found on the Hibernate guide: link:{hibernate-orm-docs-url}#hql-select-clause[hql select clause]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:624
msgid "The projection class needs to be a valid Java Bean and have a constructor that contains all its attributes, this constructor will be used to instantiate the projection DTO instead of using the entity class. This must be the only constructor of the class."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:628
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:687
#, no-wrap
msgid "import io.quarkus.runtime.annotations.RegisterForReflection;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:632
#, no-wrap
msgid ""
"@RegisterForReflection // <1>\n"
"public class PersonName {\n"
"    public final String name; // <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:637
#, no-wrap
msgid ""
"    public PersonName(String name){ // <3>\n"
"        this.name = name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:640
#, no-wrap
msgid ""
"// only 'name' will be loaded from the database\n"
"PanacheQuery<PersonName> query = Person.find(\"status\", Status.Alive).project(PersonName.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:642
msgid "The `@RegisterForReflection` annotation instructs Quarkus to keep the class and its members during the native compilation. More details about the `@RegisterForReflection` annotation can be found on the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:643
msgid "We use public fields here, but you can use private fields and getters/setters if you prefer."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:644
msgid "This constructor will be used by Hibernate, and it must have a matching constructor with all the class attributes as parameters."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:651
msgid "The implementation of the `project(Class)` method uses the constructor's parameter names to build the select clause of the query, so the compiler must be configured to store parameter names inside the compiled class.  This is enabled by default if you are using the Quarkus Maven archetype. If you are not using it, add the property `<maven.compiler.parameters>true</maven.compiler.parameters>` to your pom.xml."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:654
msgid "If in the DTO projection object you have a field from a referenced entity, you can use the `@ProjectedFieldName` annotation to provide the path for the SELECT statement."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:665
#, no-wrap
msgid ""
"@Entity\n"
"public class Dog extends PanacheEntity {\n"
"    public String name;\n"
"    public String race;\n"
"    public Double weight;\n"
"    @ManyToOne\n"
"    public Person owner;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:670
#, no-wrap
msgid ""
"@RegisterForReflection\n"
"public class DogDto {\n"
"    public String name;\n"
"    public String ownerName;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:676
#, no-wrap
msgid ""
"    public DogDto(String name, @ProjectedFieldName(\"owner.name\") String ownerName) {  // <1>\n"
"        this.name = name;\n"
"        this.ownerName = ownerName;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:678
#, no-wrap
msgid "PanacheQuery<DogDto> query = Dog.findAll().project(DogDto.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:680
msgid "The `ownerName` DTO constructor's parameter will be loaded from the `owner.name` HQL property."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:683
msgid "It is also possible to specify a HQL query with a select clause. In this case, the projection class must have a constructor matching the values returned by the select clause:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:692
#, no-wrap
msgid ""
"@RegisterForReflection \n"
"public class RaceWeight {\n"
"    public final String race;\n"
"    public final Double weight\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:696
#, no-wrap
msgid ""
"    public RaceWeight(String race) {\n"
"        this(race, null);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:702
#, no-wrap
msgid ""
"    public RaceWeight(String race, Double weight) { // <1>\n"
"        this.race = race;\n"
"        this.weight = weight;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:705
#, no-wrap
msgid ""
"// Only the race and the average weight will be loaded\n"
"PanacheQuery<RaceWeight> query = Person.find(\"select d.race, AVG(d.weight) from Dog d group by d.race\").project(RaceWeight.class);\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:707
msgid "Hibernate Reactive will use this constructor. When the query has a select clause, it is possible to have multiple constructors."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:711
msgid "It is not possible to have a HQL `select new` query and `.project(Class)` at the same time - you need to pick one approach."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:713
msgid "For example, this will fail:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:716
#, no-wrap
msgid "PanacheQuery<RaceWeight> query = Person.find(\"select new MyView(d.race, AVG(d.weight)) from Dog d group by d.race\").project(AnotherView.class);\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:719
#, no-wrap
msgid "Multiple Persistence Units"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:722
msgid "Hibernate Reactive in Quarkus currently does not support multiple persistence units."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:724
#, no-wrap
msgid "Sessions and Transactions"
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:733
msgid "First of all, most of the methods of a Panache entity must be invoked within the scope of a reactive `Mutiny.Session`.  In some cases, the session is opened automatically on demand.  For example, if a Panache entity method is invoked in a Jakarta REST resource method in an application that includes the `quarkus-resteasy-reactive` extension.  For other cases, there are both a declarative and a programmatic way to ensure the session is opened.  You can annotate a CDI business method that returns `Uni` with the `@WithSession` annotation.  The method will be intercepted and the returned `Uni` will be triggered within a scope of a reactive session.  Alternatively, you can use the `Panache.withSession()` method to achieve the same effect."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:735
msgid "Note that a Panache entity may not be used from a blocking thread. See also xref:getting-started-reactive.adoc[Getting Started With Reactive] guide that explains the basics of reactive principles in Quarkus."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:740
msgid "Also make sure to wrap methods that modify the database or involve multiple queries (e.g. `entity.persist()`) within a transaction.  You can annotate a CDI business method that returns `Uni` with the `@WithTransaction` annotation.  The method will be intercepted and the returned `Uni` is triggered within a transaction boundary.  Alternatively, you can use the `Panache.withTransaction()` method for the same effect."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:742
msgid "You cannot use the `@Transactional` annotation with Hibernate Reactive for your transactions: you must use `@WithTransaction`, and your annotated method must return a `Uni` to be non-blocking."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:748
msgid "Hibernate Reactive batches changes you make to your entities and sends changes (it is called flush) at the end of the transaction or before a query.  This is usually a good thing as it is more efficient.  But if you want to check optimistic locking failures, do object validation right away or generally want to get immediate feedback, you can force the flush operation by calling `entity.flush()` or even use `entity.persistAndFlush()` to make it a single method call. This will allow you to catch any `PersistenceException` that could occur when Hibernate Reactive send those changes to the database.  Remember, this is less efficient so don't abuse it.  And your transaction still has to be committed."
msgstr ""

#. type: delimited block =
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:750
msgid "Here is an example of the usage of the flush method to allow making a specific action in case of `PersistenceException`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:764
#, no-wrap
msgid ""
"@WithTransaction\n"
"public Uni<Void> create(Person person){\n"
"    // Here we use the persistAndFlush() shorthand method on a Panache repository to persist to database then flush the changes.\n"
"    return person.persistAndFlush()\n"
"            .onFailure(PersistenceException.class)\n"
"            .recoverWithItem(() -> {\n"
"                LOG.error(\"Unable to create the parameter\", pe);\n"
"                //in case of error, I save it to disk\n"
"                diskPersister.save(person);\n"
"                return null;\n"
"            });\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:771
msgid "The `@WithTransaction` annotation will also work for testing.  This means that changes done during the test will be propagated to the database.  If you want any changes made to be rolled back at the end of the test you can use the `io.quarkus.test.TestReactiveTransaction` annotation.  This will run the test method in a transaction, but roll it back once the test method is complete to revert any database changes."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:772
#, no-wrap
msgid "Lock management"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:775
msgid "Panache provides direct support for database locking with your entity/repository, using `findById(Object, LockModeType)` or `find().withLock(LockModeType)`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:777
msgid "The following examples are for the active record pattern, but the same can be used with repositories."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:778
#, no-wrap
msgid "First: Locking using findById()."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:783
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:801
#, no-wrap
msgid "public class PersonEndpoint {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:794
#, no-wrap
msgid ""
"    @GET\n"
"    public Uni<Person> findByIdForUpdate(Long id){\n"
"        return Panache.withTransaction(() -> {\n"
"            return Person.<Person>findById(id, LockModeType.PESSIMISTIC_WRITE)\n"
"                    .invoke(person -> {\n"
"                        //do something useful, the lock will be released when the transaction ends.\n"
"                    });\n"
"        });\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:796
#, no-wrap
msgid "Second: Locking in a find()."
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:811
#, no-wrap
msgid ""
"    @GET\n"
"    public Uni<Person> findByNameForUpdate(String name){\n"
"        return Panache.withTransaction(() -> {\n"
"            return Person.<Person>find(\"name\", name).withLock(LockModeType.PESSIMISTIC_WRITE).firstResult()\n"
"                    .invoke(person -> {\n"
"                        //do something useful, the lock will be released when the transaction ends.\n"
"                    });\n"
"        });\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:813
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:816
msgid "Be careful that locks are released when the transaction ends, so the method that invokes the lock query must be called within a transaction."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:817
#, no-wrap
msgid "Custom IDs"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:821
msgid "IDs are often a touchy subject, and not everyone's up for letting them handled by the framework, once again we have you covered."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:824
msgid "You can specify your own ID strategy by extending `PanacheEntityBase` instead of `PanacheEntity`. Then you just declare whatever ID you want as a public field:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:829
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntityBase {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:838
#, no-wrap
msgid ""
"    @Id\n"
"    @SequenceGenerator(\n"
"            name = \"personSequence\",\n"
"            sequenceName = \"person_id_seq\",\n"
"            allocationSize = 1,\n"
"            initialValue = 4)\n"
"    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"personSequence\")\n"
"    public Integer id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:841
#, no-wrap
msgid ""
"    //...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:845
msgid "If you're using repositories, then you will want to extend `PanacheRepositoryBase` instead of `PanacheRepository` and specify your ID type as an extra type parameter:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:852
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheRepositoryBase<Person,Integer> {\n"
"    //...\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:854
#, no-wrap
msgid "Testing"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:857
msgid "Testing reactive Panache entities in a `@QuarkusTest` is slightly more complicated than testing regular Panache entities due to the asynchronous nature of the APIs and the fact that all operations need to run on a Vert.x event loop."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:860
msgid "The `quarkus-test-vertx` dependency provides the `@io.quarkus.test.vertx.RunOnVertxContext` annotation and the `io.quarkus.test.vertx.UniAsserter` class which are intended precisely for this purpose.  The usage is described in the xref:hibernate-reactive.adoc#testing[Hibernate Reactive] guide."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:863
msgid "You can also extend the `io.quarkus.test.vertx.UniAsserterInterceptor` to wrap the injected `UniAsserter` and customize the behavior.  For example, the interceptor can be used to execute the assert methods within a separate database transaction."
msgstr ""

#. type: Block title
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:864
#, no-wrap
msgid "`UniAsserterInterceptor` Example"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:868
#, no-wrap
msgid "import io.quarkus.test.vertx.UniAsserterInterceptor;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:871
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class SomeTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:873
#, no-wrap
msgid "    static class TransactionalUniAsserterInterceptor extends UniAsserterInterceptor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:877
#, no-wrap
msgid ""
"        public TransactionUniAsserterInterceptor(UniAsserter asserter) {\n"
"            super(asserter);\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:884
#, no-wrap
msgid ""
"        @Override\n"
"        protected <T> Supplier<Uni<T>> transformUni(Supplier<Uni<T>> uniSupplier) {\n"
"            // Assert/execute methods are invoked within a database transaction\n"
"            return () -> Panache.withTransaction(uniSupplier);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:894
#, no-wrap
msgid ""
"    @Test\n"
"    @RunOnVertxContext\n"
"    public void testEntity(UniAsserter asserter) {\n"
"        asserter = new TransactionalUniAsserterInterceptor(asserter); <1>\n"
"        asserter.execute(() -> new MyEntity().persist());\n"
"        asserter.assertEquals(() -> MyEntity.count(), 1l);\n"
"        asserter.execute(() -> MyEntity.deleteAll());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:896
msgid "The `TransactionalUniAsserterInterceptor` wraps the injected `UniAsserter`."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:898
#, no-wrap
msgid "Mocking"
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:900
#, no-wrap
msgid "Using the active record pattern"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:905
msgid "If you are using the active record pattern you cannot use Mockito directly as it does not support mocking static methods, but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static methods, including your own."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:907
msgid "Add this dependency to your build file:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:916
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-panache-mock</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:922
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-panache-mock\")\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:925
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1035
msgid "Given this simple entity:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:930
#, no-wrap
msgid ""
"@Entity\n"
"public class Person extends PanacheEntity {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:932
#, no-wrap
msgid "    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:937
#, no-wrap
msgid ""
"    public static Uni<List<Person>> findOrdered() {\n"
"        return find(\"ORDER BY name\").list();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:940
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1062
msgid "You can write your mocking test like this:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:945
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1067
#, no-wrap
msgid ""
"import io.quarkus.test.vertx.UniAsserter;\n"
"import io.quarkus.test.vertx.RunOnVertxContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:948
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheFunctionalityTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:953
#, no-wrap
msgid ""
"    @RunOnVertxContext // <1>\n"
"    @Test\n"
"    public void testPanacheMocking(UniAsserter asserter) { // <2>\n"
"        asserter.execute(() -> PanacheMock.mock(Person.class));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:956
#, no-wrap
msgid ""
"        // Mocked classes always return a default value\n"
"        asserter.assertEquals(() -> Person.count(), 0l);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:960
#, no-wrap
msgid ""
"        // Now let's specify the return value\n"
"        asserter.execute(() -> Mockito.when(Person.count()).thenReturn(Uni.createFrom().item(23l)));\n"
"        asserter.assertEquals(() -> Person.count(), 23l);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:964
#, no-wrap
msgid ""
"        // Now let's change the return value\n"
"        asserter.execute(() -> Mockito.when(Person.count()).thenReturn(Uni.createFrom().item(42l)));\n"
"        asserter.assertEquals(() -> Person.count(), 42l);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:968
#, no-wrap
msgid ""
"        // Now let's call the original method\n"
"        asserter.execute(() -> Mockito.when(Person.count()).thenCallRealMethod());\n"
"        asserter.assertEquals(() -> Person.count(), 0l);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:973
#, no-wrap
msgid ""
"        // Check that we called it 4 times\n"
"        asserter.execute(() -> {\n"
"            PanacheMock.verify(Person.class, Mockito.times(4)).count(); // <3>\n"
"        });\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:982
#, no-wrap
msgid ""
"        // Mock only with specific parameters\n"
"        asserter.execute(() -> {\n"
"            Person p = new Person();\n"
"            Mockito.when(Person.findById(12l)).thenReturn(Uni.createFrom().item(p));\n"
"            asserter.putData(key, p);\n"
"        });\n"
"        asserter.assertThat(() -> Person.findById(12l), p -> Assertions.assertSame(p, asserter.getData(key)));\n"
"        asserter.assertNull(() -> Person.findById(42l));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:992
#, no-wrap
msgid ""
"        // Mock throwing\n"
"        asserter.execute(() -> Mockito.when(Person.findById(12l)).thenThrow(new WebApplicationException()));\n"
"        asserter.assertFailedWith(() -> {\n"
"            try {\n"
"                return Person.findById(12l);\n"
"            } catch (Exception e) {\n"
"                return Uni.createFrom().failure(e);\n"
"            }\n"
"        }, t -> assertEquals(WebApplicationException.class, t.getClass()));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:996
#, no-wrap
msgid ""
"        // We can even mock your custom methods\n"
"        asserter.execute(() -> Mockito.when(Person.findOrdered()).thenReturn(Uni.createFrom().item(Collections.emptyList())));\n"
"        asserter.assertThat(() -> Person.findOrdered(), list -> list.isEmpty());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1002
#, no-wrap
msgid ""
"        asserter.execute(() -> {\n"
"            PanacheMock.verify(Person.class).findOrdered();\n"
"            PanacheMock.verify(Person.class, Mockito.atLeastOnce()).findById(Mockito.any());\n"
"            PanacheMock.verifyNoMoreInteractions(Person.class);\n"
"        });\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1007
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1132
#, no-wrap
msgid ""
"        // IMPORTANT: We need to execute the asserter within a reactive session\n"
"        asserter.surroundWith(u -> Panache.withSession(() -> u));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1009
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1134
msgid "Make sure the test method is run on the Vert.x event loop."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1010
msgid "The injected `UniAsserter` argument is used to make assertions."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1012
msgid "Be sure to call your `verify` and `do*` methods on `PanacheMock` rather than `Mockito`, otherwise you won't know what mock object to pass."
msgstr ""

#. type: Title ===
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1013
#, no-wrap
msgid "Using the repository pattern"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1017
msgid "If you are using the repository pattern you can use Mockito directly, using the `quarkus-junit5-mockito` module, which makes mocking beans much easier:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1026
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-junit5-mockito</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1032
#, no-wrap
msgid "testImplementation(\"io.quarkus:quarkus-junit5-mockito\")\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1040
#, no-wrap
msgid ""
"@Entity\n"
"public class Person {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1044
#, no-wrap
msgid ""
"    @Id\n"
"    @GeneratedValue\n"
"    public Long id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1047
#, no-wrap
msgid ""
"    public String name;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1050
msgid "And this repository:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1059
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class PersonRepository implements PanacheRepository<Person> {\n"
"    public Uni<List<Person>> findOrdered() {\n"
"        return find(\"ORDER BY name\").list();\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1072
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class PanacheFunctionalityTest {\n"
"    @InjectMock\n"
"    PersonRepository personRepository;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1076
#, no-wrap
msgid ""
"    @RunOnVertxContext // <1>\n"
"    @Test\n"
"    public void testPanacheRepositoryMocking(UniAsserter asserter) { // <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1079
#, no-wrap
msgid ""
"        // Mocked classes always return a default value\n"
"        asserter.assertEquals(() -> mockablePersonRepository.count(), 0l);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1083
#, no-wrap
msgid ""
"        // Now let's specify the return value\n"
"        asserter.execute(() -> Mockito.when(mockablePersonRepository.count()).thenReturn(Uni.createFrom().item(23l)));\n"
"        asserter.assertEquals(() -> mockablePersonRepository.count(), 23l);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1087
#, no-wrap
msgid ""
"        // Now let's change the return value\n"
"        asserter.execute(() -> Mockito.when(mockablePersonRepository.count()).thenReturn(Uni.createFrom().item(42l)));\n"
"        asserter.assertEquals(() -> mockablePersonRepository.count(), 42l);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1091
#, no-wrap
msgid ""
"        // Now let's call the original method\n"
"        asserter.execute(() -> Mockito.when(mockablePersonRepository.count()).thenCallRealMethod());\n"
"        asserter.assertEquals(() -> mockablePersonRepository.count(), 0l);\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1096
#, no-wrap
msgid ""
"        // Check that we called it 4 times\n"
"        asserter.execute(() -> {\n"
"            Mockito.verify(mockablePersonRepository, Mockito.times(4)).count();\n"
"        });\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1105
#, no-wrap
msgid ""
"        // Mock only with specific parameters\n"
"        asserter.execute(() -> {\n"
"            Person p = new Person();\n"
"            Mockito.when(mockablePersonRepository.findById(12l)).thenReturn(Uni.createFrom().item(p));\n"
"            asserter.putData(key, p);\n"
"        });\n"
"        asserter.assertThat(() -> mockablePersonRepository.findById(12l), p -> Assertions.assertSame(p, asserter.getData(key)));\n"
"        asserter.assertNull(() -> mockablePersonRepository.findById(42l));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1115
#, no-wrap
msgid ""
"        // Mock throwing\n"
"        asserter.execute(() -> Mockito.when(mockablePersonRepository.findById(12l)).thenThrow(new WebApplicationException()));\n"
"        asserter.assertFailedWith(() -> {\n"
"            try {\n"
"                return mockablePersonRepository.findById(12l);\n"
"            } catch (Exception e) {\n"
"                return Uni.createFrom().failure(e);\n"
"            }\n"
"        }, t -> assertEquals(WebApplicationException.class, t.getClass()));\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1120
#, no-wrap
msgid ""
"        // We can even mock your custom methods\n"
"        asserter.execute(() -> Mockito.when(mockablePersonRepository.findOrdered())\n"
"                .thenReturn(Uni.createFrom().item(Collections.emptyList())));\n"
"        asserter.assertThat(() -> mockablePersonRepository.findOrdered(), list -> list.isEmpty());\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1127
#, no-wrap
msgid ""
"        asserter.execute(() -> {\n"
"            Mockito.verify(mockablePersonRepository).findOrdered();\n"
"            Mockito.verify(mockablePersonRepository, Mockito.atLeastOnce()).findById(Mockito.any());\n"
"            Mockito.verify(mockablePersonRepository).persist(Mockito.<Person> any());\n"
"            Mockito.verifyNoMoreInteractions(mockablePersonRepository);\n"
"        });\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1135
msgid "The injected `UniAsserter` agrument is used to make assertions."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1136
#, no-wrap
msgid "How and why we simplify Hibernate Reactive mappings"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1140
msgid "When it comes to writing Hibernate Reactive entities, there are a number of annoying things that users have grown used to reluctantly deal with, such as:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1143
msgid "Duplicating ID logic: most entities need an ID, most people don't care how it is set, because it is not really relevant to your model."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1146
msgid "Dumb getters and setters: since Java lacks support for properties in the language, we have to create fields, then generate getters and setters for those fields, even if they don't actually do anything more than read/write the fields."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1152
msgid "Traditional EE patterns advise to split entity definition (the model) from the operations you can do on them (DAOs, Repositories), but really that requires an unnatural split between the state and its operations even though we would never do something like that for regular objects in the Object-Oriented architecture, where state and methods are in the same class. Moreover, this requires two classes per entity, and requires injection of the DAO or Repository where you need to do entity operations, which breaks your edit flow and requires you to get out of the code you're writing to set up an injection point before coming back to use it."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1154
msgid "Hibernate queries are super powerful, but overly verbose for common operations, requiring you to write queries even when you don't need all the parts."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1156
msgid "Hibernate is very general-purpose, but does not make it trivial to do trivial operations that make up 90% of our model usage."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1158
msgid "With Panache, we took an opinionated approach to tackle all these problems:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1161
msgid "Make your entities extend `PanacheEntity`: it has an ID field that is auto-generated. If you require a custom ID strategy, you can extend `PanacheEntityBase` instead and handle the ID yourself."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1164
msgid "Use public fields. Get rid of dumb getter and setters. Under the hood, we will generate all getters and setters that are missing, and rewrite every access to these fields to use the accessor methods. This way you can still write _useful_ accessors when you need them, which will be used even though your entity users still use field accesses."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1167
msgid "With the active record pattern: put all your entity logic in static methods in your entity class and don't create DAOs.  Your entity superclass comes with lots of super useful static methods, and you can add your own in your entity class.  Users can just start using your entity `Person` by typing `Person.` and getting completion for all the operations in a single place."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1170
msgid "Don't write parts of the query that you don't need: write `Person.find(\"order by name\")` or `Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive)` or even better `Person.find(\"name\", \"stef\")`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1172
msgid "That's all there is to it: with Panache, Hibernate Reactive has never looked so trim and neat."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1173
#, no-wrap
msgid "Defining entities in external projects or jars"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1176
msgid "Hibernate Reactive with Panache relies on compile-time bytecode enhancements to your entities."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1182
msgid "It attempts to identify archives with Panache entities (and consumers of Panache entities)  by the presence of the marker file `META-INF/panache-archive.marker`. Panache includes an annotation processor that will automatically create this file in archives that depend on Panache (even indirectly). If you have disabled annotation processors you may need to create this file manually in some cases."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1186
msgid "If you include the jpa-modelgen annotation processor this will exclude the Panache annotation processor by default. If you do this you should either create the marker file yourself, or add the `quarkus-panache-common` as well, as shown below:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/hibernate-reactive-panache.adoc:1207
#, no-wrap
msgid ""
"<plugin>\n"
"    <artifactId>maven-compiler-plugin</artifactId>\n"
"    <version>${compiler-plugin.version}</version>\n"
"    <configuration>\n"
"      <annotationProcessorPaths>\n"
"        <annotationProcessorPath>\n"
"          <groupId>org.hibernate</groupId>\n"
"          <artifactId>hibernate-jpamodelgen</artifactId>\n"
"          <version>${hibernate.version}</version>\n"
"        </annotationProcessorPath>\n"
"        <annotationProcessorPath>\n"
"          <groupId>io.quarkus</groupId>\n"
"          <artifactId>quarkus-panache-common</artifactId>\n"
"          <version>${quarkus.platform.version}</version>\n"
"        </annotationProcessorPath>\n"
"      </annotationProcessorPaths>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""
