# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:10+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:6
#, no-wrap
msgid "Getting Started With Reactive"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:13
msgid "_Reactive_ is a set of principles to build robust, efficient, and concurrent applications and systems.  These principles let you handle more load than traditional approaches while using the resources (CPU and memory) more efficiently while also reacting to failures gracefully."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:17
msgid "Quarkus is a _Reactive_ framework.  Since the beginning, _Reactive_ has been an essential tenet of the Quarkus architecture.  It includes many reactive features and offers a broad ecosystem."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:20
msgid "This guide is not an in-depth article about what _Reactive_ is and how Quarkus enables reactive architectures.  If you want to read more about these topics, refer to the xref:quarkus-reactive-architecture.adoc[Reactive Architecture guide], which provides an overview of the Quarkus reactive ecosystem."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:24
msgid "In this guide, we will get you started with some reactive features of Quarkus.  We are going to implement a simple CRUD application.  Yet, unlike in the xref:hibernate-orm-panache.adoc[Hibernate with Panache guide], it uses the reactive features of Quarkus."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:26
msgid "This guide will help you with:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:28
msgid "Bootstrapping a reactive CRUD application with Quarkus"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:29
msgid "Using Hibernate Reactive with Panache to interact with a database in a reactive fashion"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:30
msgid "Using RESTEasy Reactive to implement HTTP API while enforcing the reactive principle"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:31
msgid "Packaging and Running the application"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:32
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:39
msgid "Verify that Maven is using the Java version you expect.  If you have multiple JDKs installed, make sure Maven is using the expected one.  You can verify which JDK Maven uses by running `mvn --version.`"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:40
#, no-wrap
msgid "Imperative vs. Reactive: a question of threads"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:44
msgid "As mentioned above, in this guide, we are going to implement a reactive CRUD application.  But you may wonder what the differences and benefits are in comparison to the traditional and imperative model."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:47
msgid "To better understand the contrast, we need to explain the difference between the reactive and imperative execution models.  It's essential to comprehend that _Reactive_ is not just a different execution model, but that distinction is necessary to understand this guide."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:54
msgid "In the traditional and imperative approach, frameworks assign a thread to handle the request.  So, the whole processing of the request runs on this worker thread.  This model does not scale very well.  Indeed, to handle multiple concurrent requests, you need multiple threads; and so your application concurrency is constrained by the number of threads.  In addition, these threads are blocked as soon as your code interacts with remote services.  So, it leads to inefficient usage of the resources, as you may need more threads, and each thread, as they are mapped to OS threads, has a cost in terms of memory and CPU."
msgstr ""

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:55
#, no-wrap
msgid "Imperative"
msgstr ""

#. type: Target for macro image
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:55
#, no-wrap
msgid "blocking-threads.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:63
msgid "On the other side, the reactive model relies on non-blocking I/Os and a different execution model.  Non-blocking I/O provides an efficient way to deal with concurrent I/O.  A minimal amount of threads called I/O threads, can handle many concurrent I/O.  With such a model, request processing is not delegated to a worker thread but uses these I/O threads directly.It saves memory and CPU as there is no need to create worker threads to handle the requests.  It also improves the concurrency as it removes the constraint on the number of threads.  Finally, it also improves response time as it reduces the number of thread switches."
msgstr ""

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:64
#, no-wrap
msgid "Reactive"
msgstr ""

#. type: Target for macro image
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:64
#, no-wrap
msgid "reactive-thread.png"
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:67
#, no-wrap
msgid "From sequential to continuation style"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:73
msgid "So, with the reactive execution model, the requests are processed using I/O threads.  But that's not all.  An I/O thread can handle multiple concurrent requests.  How? Here is the trick and one of the most significant differences between reactive and imperative."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:79
msgid "When processing a request requires interacting with a remote service, like an HTTP API or a database, it does not block the execution while waiting for the response.  Instead, it schedules the I/O operation and attaches a continuation, i.e., the request processing remaining code.  This continuation can be passed as a callback (a function invoked with the I/O outcome), or use more advanced constructs such as reactive programming or co-routines.  Regardless of how the continuation is expressed, the essential aspect is the release of the I/O thread and, as a consequence, the fact that this thread can be used to process another request.  When the scheduled I/O completes, the I/O thread executes the continuation, and the processing of the pending request continues."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:82
msgid "So, unlike the imperative model, where I/O blocks the execution, reactive switches to a continuation-based design, where the I/O threads are released, and continuation invoked when the I/Os complete.  As a result, the I/O thread can handle multiple concurrent requests, improving the overall concurrency of the application."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:87
msgid "But, there is a catch.  We need a way to write continuation-passing code.  There are many ways of doing this.  In Quarkus, we propose:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:89
msgid "Mutiny - an intuitive and event-driven reactive programming library"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:90
msgid "Kotlin co-routines - a way to write asynchronous code in a sequential manner"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:93
msgid "In this guide, we will use Mutiny.  To know more about Mutiny, check the xref:mutiny-primer.adoc[Mutiny documentation]."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:96
msgid "Project Loom is coming to the JDK soon and proposes a virtual thread-based model.  The Quarkus architecture is ready to support Loom as soon as it's become globally available."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:97
#, no-wrap
msgid "Bootstrapping the Reactive Fruits application"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:100
msgid "With this in mind, let's see how we can develop a CRUD application with Quarkus, which will use the I/O thread to handle the HTTP requests, interact with a database, process the result, and write the HTTP response; in other words: a reactive CRUD application."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:102
msgid "While we recommend you to follow the step-by-step instructions, you can find the final solution on https://github.com/quarkusio/quarkus-quickstarts/tree/main/hibernate-reactive-panache-quickstart."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:104
msgid "First, go to https://code.quarkus.io[code.quarkus.io] and select the following extensions:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:106
msgid "RESTEasy Reactive Jackson"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:107
msgid "Hibernate Reactive with Panache"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:108
msgid "Reactive PostgreSQL client"
msgstr ""

#. type: Named 'alt' AttributeList argument for macro 'image'
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:109
#, no-wrap
msgid "Extensions"
msgstr ""

#. type: Target for macro image
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:109
#, no-wrap
msgid "reactive-guide-code.png"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:113
msgid "The last extension is the reactive database driver for PostgreSQL.  Hibernate Reactive uses that driver to interact with the database without blocking the caller thread."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:115
msgid "Once selected, click on \"Generate your application\", download the zip file, unzip it and open the code in your favorite IDE."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:116
#, no-wrap
msgid "Reactive Panache Entity"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:119
msgid "Let's start with the `Fruit` entity.Create the `src/main/java/org/acme/hibernate/orm/panache/Fruit.java` file with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:123
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:185
#, no-wrap
msgid "package org.acme.hibernate.orm.panache;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:127
#, no-wrap
msgid ""
"import jakarta.persistence.Cacheable;\n"
"import jakarta.persistence.Column;\n"
"import jakarta.persistence.Entity;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:129
#, no-wrap
msgid "import io.quarkus.hibernate.reactive.panache.PanacheEntity;  // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:133
#, no-wrap
msgid ""
"@Entity\n"
"@Cacheable\n"
"public class Fruit extends PanacheEntity {\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:136
#, no-wrap
msgid ""
"\t @Column(length = 40, unique = true)\n"
"\t public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:138
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:194
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:140
msgid "Make sure you import the reactive variant of `PanacheEntity`."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:148
msgid "This class represents `Fruits`.  It's a straightforward entity with a single field (`name`).  Note that it uses `io.quarkus.hibernate.reactive.panache.PanacheEntity`, the reactive variant of `PanacheEntity`.  So, behind the scenes, Hibernate uses the execution model we described above.  It interacts with the database without blocking the thread.  In addition, this reactive `PanacheEntity` proposes a reactive API.  We will use this API to implement the REST endpoint."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:150
msgid "Before going further, open the `src/main/resources/application.properties` file and add:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:155
#, no-wrap
msgid ""
"quarkus.datasource.db-kind=postgresql\n"
"quarkus.hibernate-orm.database.generation=drop-and-create\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:158
msgid "It instructs the application to use PostgreSQL for the database and to handle the database schema generation."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:160
msgid "In the same directory, create an `import.sql` file, which inserts a few fruits, so we don't start with an empty database in dev mode:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:167
#, no-wrap
msgid ""
"INSERT INTO fruit(id, name) VALUES (1, 'Cherry');\n"
"INSERT INTO fruit(id, name) VALUES (2, 'Apple');\n"
"INSERT INTO fruit(id, name) VALUES (3, 'Banana');\n"
"ALTER SEQUENCE fruit_seq RESTART WITH 4;\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:171
msgid "In a terminal, launch the application in dev mode using: `./mvnw quarkus:dev`.  Quarkus automatically starts a database instance for you and configure the application. Now we only need to implement the HTTP endpoint."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:173
#, no-wrap
msgid "Reactive Resource"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:179
msgid "Because the interaction with the database is non-blocking and asynchronous, we need to use asynchronous constructs to implement our HTTP resource.  Quarkus uses Mutiny as its central reactive programming model.  So, it supports returning Mutiny types (`Uni` and `Multi`) from HTTP endpoints.  Also, our Fruit Panache entity exposes methods using these types, so we only need to implement the _glue_."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:181
msgid "Create the `src/main/java/org/acme/hibernate/orm/panache/FruitResource.java` file with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:188
#, no-wrap
msgid ""
"import jakarta.enterprise.context.ApplicationScoped;\n"
"import jakarta.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:192
#, no-wrap
msgid ""
"@Path(\"/fruits\")\n"
"@ApplicationScoped\n"
"public class FruitResource {\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:198
msgid "Let's start with the `getAll` method. The `getAll` method returns all the fruits stored in the database.  In the `FruitResource`, add the following code:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:205
#, no-wrap
msgid ""
"@GET\n"
"public Uni<List<Fruit>> get() {\n"
"    return Fruit.listAll(Sort.by(\"name\"));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:208
msgid "Open http://localhost:8080/fruits to invoke this method:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:212
#, no-wrap
msgid "[{\"id\":2,\"name\":\"Apple\"},{\"id\":3,\"name\":\"Banana\"},{\"id\":1,\"name\":\"Cherry\"},{\"id\":4,\"name\":\"peach\"}]\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:216
msgid "We get the expected JSON array.  RESTEasy Reactive automatically maps the list into a JSON Array, except if instructed otherwise."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:223
msgid "Look at the return type; it returns a `Uni` of `List<Fruit>`.  `Uni` is an asynchronous type.  It's a bit like a future.  It's a placeholder that will get its value (item) later.  When it receives the item (Mutiny says it _emits_ its item), you can attach some behavior.  That's how we express the continuation: get a uni, and when the uni emits its item, execute the rest of the processing."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:233
msgid "Reactive developers may wonder why we can't return a stream of fruits directly.  It tends to be a bad idea when dealing with a database.  Relational databases do not handle streaming well.  It’s a problem of protocols not designed for this use case.  So, to stream rows from the database, you need to keep a connection (and sometimes a transaction) open until all the rows are consumed.  If you have slow consumers, you break the golden rule of databases: don’t hold connections for too long.  Indeed, the number of connections is rather low, and having consumers keeping them for too long will dramatically reduce the concurrency of your application.  So, when possible, use a `Uni<List<T>>` and load the content.  If you have a large set of results, implement pagination."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:235
msgid "Let's continue our API with `getSingle`:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:243
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/{id}\")\n"
"public Uni<Fruit> getSingle(Long id) {\n"
"    return Fruit.findById(id);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:247
msgid "In this case, we use `Fruit.findById` to retrieve the fruit.  It returns a `Uni`, which will complete when the database has retrieved the row."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:249
msgid "The `create` method allows adding a new fruit to the database:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:256
#, no-wrap
msgid ""
"@POST\n"
"public Uni<RestResponse<Fruit>> create(Fruit fruit) {\n"
"    return Panache.withTransaction(fruit::persist).replaceWith(RestResponse.status(CREATED, fruit));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:262
msgid "The code is a bit more involved.  To write to a database, we need a transaction, therefore we use `Panache.withTransaction` to obtain one (asynchronously) and proceed to call the `persist` method.  The `persist` method returns a `Uni` that emits the result of the insertion of the fruit in the database.  Once the insertion completes (which plays the role of the continuation), we create a `201 CREATED` HTTP response."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:264
msgid "If you have https://curl.se/[curl] on your machine, you can try the endpoint using:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:271
#, no-wrap
msgid ""
"> curl --header \"Content-Type: application/json\" \\\n"
"  --request POST \\\n"
"  --data '{\"name\":\"peach\"}' \\\n"
"  http://localhost:8080/fruits\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:274
msgid "Following the same ideas, you can implement the other CRUD methods."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:275
#, no-wrap
msgid "Testing and Running"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:279
msgid "Testing a reactive application is similar to testing a non-reactive one: use the HTTP endpoint and verify the HTTP responses.  The fact that the application is reactive does not change anything."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:281
msgid "In https://github.com/quarkusio/quarkus-quickstarts/blob/main/hibernate-reactive-panache-quickstart/src/test/java/org/acme/hibernate/orm/panache/FruitsEndpointTest.java[FruitsEndpointTest.java] you can see how the test for the fruit application can be implemented."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:283
msgid "Packaging and running the application does not change either."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:285
msgid "You can use the following command as usual:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:289
msgid "or to build a native executable:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:293
msgid "You can also package the application in a container."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:295
msgid "To run the application, don’t forget to start a database and provide the configuration to your application."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:297
msgid "For example, you can use Docker to run your database:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:304
#, no-wrap
msgid ""
"docker run -it --rm=true \\\n"
"    --name postgres-quarkus -e POSTGRES_USER=quarkus \\\n"
"    -e POSTGRES_PASSWORD=quarkus -e POSTGRES_DB=fruits \\\n"
"    -p 5432:5432 postgres:14.1\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:307
msgid "Then, launch the application using:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:315
#, no-wrap
msgid ""
"java \\\n"
"   -Dquarkus.datasource.reactive.url=postgresql://localhost/fruits \\\n"
"   -Dquarkus.datasource.username=quarkus \\\n"
"   -Dquarkus.datasource.password=quarkus \\\n"
"   -jar target/quarkus-app/quarkus-run.jar\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:318
msgid "Or, if you packaged your application as native executable, use:"
msgstr ""

#. type: delimited block -
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:326
#, no-wrap
msgid ""
"./target/getting-started-with-reactive-runner \\\n"
"  -Dquarkus.datasource.reactive.url=postgresql://localhost/fruits \\\n"
"  -Dquarkus.datasource.username=quarkus \\\n"
"  -Dquarkus.datasource.password=quarkus\n"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:330
msgid "The parameters passed to the application are described in the datasource guide.  There are other ways to configure the application - please check the xref:config-reference.adoc#configuration-sources[configuration guide] to have an overview of the possibilities (such as env variable, .env files and so on)."
msgstr ""

#. type: Title ==
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:331
#, no-wrap
msgid "Going further"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:335
msgid "This guide is a brief introduction to some reactive features offered by Quarkus.  Quarkus is a reactive framework, and so offers a lot of reactive features."
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:337
msgid "If you want to continue on this topic check:"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:339
msgid "xref:quarkus-reactive-architecture.adoc[The Quarkus Reactive Architecture]"
msgstr ""

#. type: Plain text
#: upstream/_versions/3.2/guides/getting-started-reactive.adoc:340
msgid "xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]"
msgstr ""
