# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2023-09-21 08:25+0900\n"
"PO-Revision-Date: 2023-09-25 19:59-0300\n"
"Last-Translator: George Gastaldi <gegastaldi@gmail.com>\n"
"Language-Team: \n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.3.2\n"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:7
msgid "For years, the client-server architecture has been the de-facto standard to build applications. But a significant shift happened. The <em>one model rules them all</em> age is over. A new range of applications and architectural styles have emerged and transformed how code is written and how applications are deployed and executed. HTTP microservices, reactive applications, event-driven architecture, and serverless are now central players in modern systems."
msgstr "Por anos, a arquitetura cliente-servidor tem sido o padrão de fato para criar aplicativos. Mas uma mudança significativa aconteceu. A era do <em>único modelo que rege todos eles</em> acabou. Uma nova gama de aplicativos e estilos de arquitetura surgiram e transformaram a forma como o código é escrito e como as aplicações são implantadas e executadas. Microsserviços HTTP, aplicações reativas, arquitetura orientada a eventos e sem servidor agora são atores centrais em sistemas modernos."

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:10
msgid "Quarkus has been designed with this new world in mind and provides first-class support for these different paradigms. That does not mean you cannot build monoliths with Quarkus; you can do it smoothly. On the contrary, it means that the Quarkus development model morphs to adapt itself to the type of application you are developing, monolith, microservice, reactive, event-driven, functions…"
msgstr "O Quarkus foi projetado com esse novo mundo em mente e fornece suporte de primeira classe para esses diferentes paradigmas. Isso não significa que você não possa construir monólitos com Quarkus; você pode fazê-lo sem problemas. Pelo contrário, isso significa que o modelo de desenvolvimento do Quarkus se transforma para se adaptar ao tipo de aplicação que você está desenvolvendo, monólito, microsserviço, reativo, orientado a eventos, funções..."

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/continuum.html:11
msgid "<a class=\"anchor\" href=\"#http-microservices\"></a>HTTP microservices"
msgstr "<a class=\"anchor\" href=\"#http-microservices\"></a>Microsserviços HTTP"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:12
msgid "Let’s start with the basics: HTTP microservices. In this context, you need to develop an HTTP endpoint, often called REST or CRUD. You process incoming HTTP requests, and to do so you often need to rely on other services, such as databases, or another HTTP service."
msgstr "Vamos começar com o básico: microsserviços HTTP. Nesse contexto, você precisa desenvolver um endpoint HTTP, geralmente chamado de REST ou CRUD. Você processa solicitações HTTP de entrada e, para isso, geralmente precisa confiar em outros serviços, como bancos de dados ou outro serviço HTTP."

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:13
msgid "For this type of application, Quarkus relies on well-known standards such as JAX-RS, JPA and MicroProfile Rest Client, but also Hibernate with Panache to simplify interactions with databases."
msgstr "Para esse tipo de aplicação, o Quarkus conta com padrões bem conhecidos, como JAX-RS, JPA e MicroProfile Rest Client, mas também Hibernate com Panache para simplificar as interações com bancos de dados."

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:14
msgid "Let’s take a very simple application handling <em>elements</em> from the periodic table. The code would be something like:"
msgstr "Vamos pegar uma aplicação muito simples manipulando <em>elementos</em> da tabela periódica. O código seria algo como:"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:15
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/elements\"</span>)\n"
"        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ElementResource</span> </span>{\n"
"\n"
"    <span class=\"hljs-meta\">@GET</span>\n"
"    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> List&lt;Element&gt; <span class=\"hljs-title\">getAll</span><span class=\"hljs-params\">()</span> </span>{\n"
"        <span class=\"hljs-keyword\">return</span> Element.listAll();\n"
"    }\n"
"\n"
"    <span class=\"hljs-meta\">@GET</span>\n"
"    <span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/{position}\"</span>)\n"
"    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Element <span class=\"hljs-title\">getOne</span><span class=\"hljs-params\">(@PathParam(<span class=\"hljs-string\">\"position\"</span>)</span> <span class=\"hljs-keyword\">int</span> position) </span>{\n"
"        Element element = Element.find(<span class=\"hljs-string\">\"position\"</span>, position).firstResult();\n"
"        <span class=\"hljs-keyword\">if</span> (element == <span class=\"hljs-keyword\">null</span>) {\n"
"            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> WebApplicationException(<span class=\"hljs-string\">\"Element with position \"</span> + position + <span class=\"hljs-string\">\" does not exist.\"</span>, <span class=\"hljs-number\">404</span>);\n"
"        }\n"
"        <span class=\"hljs-keyword\">return</span> element;\n"
"    }\n"
"\n"
"    <span class=\"hljs-meta\">@POST</span>\n"
"    <span class=\"hljs-meta\">@Transactional</span>\n"
"    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title\">create</span><span class=\"hljs-params\">(Element element)</span> </span>{\n"
"        element.persist();\n"
"        <span class=\"hljs-keyword\">return</span> Response.ok(element).status(<span class=\"hljs-number\">201</span>).build();\n"
"    }\n"
"\n"
"    <span class=\"hljs-comment\">//...</span>\n"
"}</code>"
msgstr "&lt;code class=\"language-java hljs\" data-lang=\"java\"&gt;&lt;span class=\"hljs-meta\"&gt;@Path&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;\"/elements\"&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-class\"&gt;&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;ElementResource&lt;/span&gt; &lt;/span&gt;{"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:42
msgid "If you are a Java EE or Spring user, this development model should look familiar.  You expose a resource containing methods annotated with <code>@GET</code>, <code>@POST</code>…&ZeroWidthSpace;&ZeroWidthSpace; to handle the different requests.  The path is specified using the <code>@Path</code> annotation.  Quarkus also supports <a href=\"https://quarkus.io/guides/spring-web\">Spring controller</a> annotations such as <code>@GetMapping</code> or <code>@RestController</code>."
msgstr "Se você é um usuário Java EE ou Spring, esse modelo de desenvolvimento deve parecer familiar.  Você expõe um recurso que contém métodos anotados com <code>@GET</code>, <code>@POST</code>... para lidar com as diferentes solicitações.  O caminho é especificado usando a <code>@Path</code> anotação.  O Quarkus também oferece suporte a anotações do <a href=\"https://quarkus.io/guides/spring-web\">controlador Spring</a> , como <code>@GetMapping</code> ou <code>@RestController</code>."

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:47
msgid "You can use the JPA entity manager directly.  Panache proposes an alternative removing boilerplate and exposing an active record and repository models."
msgstr "Você pode usar o gerenciador de entidade JPA diretamente.  Panache propõe uma alternativa removendo clichês e expondo uma solução active record e também modelado como um repositório."

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:50
msgid "With Panache, the <code>Element</code> class would be as simple as:"
msgstr "Com o Panache, a classe <code>Element</code> seria tão simples quanto:"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:53
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Entity</span>\n"
"<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Element</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">PanacheEntity</span> </span>{\n"
"\n"
"    <span class=\"hljs-keyword\">public</span> String name;\n"
"    <span class=\"hljs-keyword\">public</span> String symbol;\n"
"    <span class=\"hljs-meta\">@Column</span>(unique = <span class=\"hljs-keyword\">true</span>)\n"
"    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> position;\n"
"}</code>"
msgstr "&lt;code class=\"language-java hljs\" data-lang=\"java\"&gt;&lt;span class=\"hljs-meta\"&gt;@Entity&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-class\"&gt;&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Element&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;extends&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;PanacheEntity&lt;/span&gt; &lt;/span&gt;{"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:62
msgid "Microservices tend to come in systems.  Let’s now imagine you need to access another HTTP endpoint.  You can use an HTTP client directly; this is nothing more than repeating boilerplate code.  Quarkus provides a way to call HTTP endpoints easily using the <a href=\"https://quarkus.io/guides/rest-client\">MicroProfile Rest Client API</a>."
msgstr "Os microsserviços tendem a vir em sistemas.  Agora vamos imaginar que você precise acessar outro endpoint HTTP.  Você pode usar um cliente HTTP diretamente; isso nada mais é do que repetir código clichê.  O Quarkus fornece uma maneira de chamar endpoints HTTP facilmente usando a <a href=\"https://quarkus.io/guides/rest-client\">MicroProfile Rest Client API</a>."

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:67
msgid "First declare your service as follows:"
msgstr "Primeiro declare seu serviço da seguinte maneira:"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:69
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/elements\"</span>)\n"
"<span class=\"hljs-meta\">@RegisterRestClient</span>(configKey=<span class=\"hljs-string\">\"element-service\"</span>)\n"
"<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">ElementService</span> </span>{\n"
"\n"
"    <span class=\"hljs-meta\">@GET</span>\n"
"    <span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/{position}\"</span>)\n"
"    <span class=\"hljs-function\">Element <span class=\"hljs-title\">getElement</span><span class=\"hljs-params\">(@PathParam(<span class=\"hljs-string\">\"position\"</span>)</span> <span class=\"hljs-keyword\">int</span> position)</span>;\n"
"}</code>"
msgstr "&lt;code class=\"language-java hljs\" data-lang=\"java\"&gt;&lt;span class=\"hljs-meta\"&gt;@Path&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;\"/elements\"&lt;/span&gt;) &lt;span class=\"hljs-meta\"&gt;@RegisterRestClient&lt;/span&gt;(configKey=&lt;span class=\"hljs-string\"&gt;\"element-service\"&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-class\"&gt;&lt;span class=\"hljs-keyword\"&gt;interface&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;ElementService&lt;/span&gt; &lt;/span&gt;{"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:78
msgid "For each call you are intending to do, add a method and use annotations to describe the behavior.  You can combine the REST Client with the <a href=\"https://quarkus.io/guides/smallrye-fault-tolerance\">fault tolerance extension</a> to handle failure gracefully.  Then, in your resource, just use the <code>ElementService</code> interface:"
msgstr "Para cada chamada que você pretende fazer, adicione um método e use anotações para descrever o comportamento.  Você pode combinar o cliente REST com a <a href=\"https://quarkus.io/guides/smallrye-fault-tolerance\">extensão de tolerância a falhas</a> para lidar com falhas normalmente.  Depois, no seu recurso, basta utilizar a <code>ElementService</code> interface:"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:82
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/elem\"</span>)\n"
"<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ElementResource</span> </span>{\n"
"\n"
"    <span class=\"hljs-meta\">@RestClient</span>\n"
"    ElementService elements;\n"
"\n"
"    <span class=\"hljs-meta\">@GET</span>\n"
"    <span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/{position}\"</span>)\n"
"    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Element <span class=\"hljs-title\">name</span><span class=\"hljs-params\">(@PathParam(<span class=\"hljs-string\">\"position\"</span>)</span> <span class=\"hljs-keyword\">int</span> position) </span>{\n"
"        <span class=\"hljs-keyword\">return</span> elements.getElement(position);\n"
"    }\n"
"}</code>"
msgstr "&lt;code class=\"language-java hljs\" data-lang=\"java\"&gt;&lt;span class=\"hljs-meta\"&gt;@Path&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;\"/elem\"&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-class\"&gt;&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;ElementResource&lt;/span&gt; &lt;/span&gt;{"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:94
msgid "But you may be wondering where the URL is configured as it’s not in the code. Remember, it must not be hard-coded because the URL likely depends on the environment. The URL is configured in the application configuration:"
msgstr "Mas você pode estar se perguntando onde a URL está configurada, pois não está no código. Lembre-se, ele não deve ser embutido em código porque a URL provavelmente depende do ambiente. A URL é configurada na configuração do aplicativo:"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:96
#, fuzzy, no-wrap
msgid "<code class=\"language-text hljs\" data-lang=\"text\">element-service/mp-rest/url=http://localhost:9001</code>"
msgstr "&lt;code class=\"language-text hljs\" data-lang=\"text\"&gt;element-service/mp-rest/url=http://localhost:9001&lt;/code&gt;"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:98
msgid "The URL can now be updated during the deployment or at launch time using system properties or environment variables."
msgstr "A URL agora pode ser atualizada durante a implantação ou no momento da inicialização usando propriedades do sistema ou variáveis de ambiente."

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:100
msgid "Quarkus is not limited to HTTP.  You can use <a href=\"https://quarkus.io/guides/grpc-getting-started\">gRPC</a> or <a href=\"https://quarkus.io/guides/smallrye-graphql\">GraphQL</a>, two prominent alternatives in the microservice space."
msgstr "O Quarkus não está limitado a HTTP.  Você pode usar <a href=\"https://quarkus.io/guides/grpc-getting-started\">gRPC</a> ou <a href=\"https://quarkus.io/guides/smallrye-graphql\">GraphQL</a>, duas alternativas proeminentes no espaço de microsserviços."

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/continuum.html:103
msgid "<a class=\"anchor\" href=\"#being-reactive\"></a>Being reactive"
msgstr "<a class=\"anchor\" href=\"#being-reactive\"></a>Sendo reativo"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:105
msgid "Application requirements have changed drastically over the last few years.  For any application to succeed in the era of cloud computing, Big Data, or IoT, going reactive is increasingly becoming the architecture style to follow."
msgstr "Os requisitos das aplicações mudaram drasticamente nos últimos anos. Para que qualquer aplicação tenha sucesso na era da computação em nuvem, Big Data ou IoT, tornar-se reativo está se tornando cada vez mais o estilo de arquitetura a ser seguido."

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:108
msgid "Today’s users embrace applications with milliseconds of response time, 100% uptime, lower latency, push data instead of pull, higher throughput, and elasticity. However, these features are nearly impossible to achieve using yesterday’s software architecture without a considerable investment in resources, infrastructure, and tooling. The world changed, and having dozens of servers, long response times (&gt; 500 ms), downtime due to maintenance or waterfalls of failures does not meet the expected user experience."
msgstr "Os usuários de hoje adotam aplicações com milissegundos de tempo de resposta, disponibilidade de 100%, menor latência, dados por push em vez de pull, maior taxa de transferência e elasticidade. No entanto, esses recursos são quase impossíveis de alcançar usando a arquitetura de software de ontem sem um investimento considerável em recursos, infraestrutura e ferramentas. O mundo mudou, e ter dezenas de servidores, longos tempos de resposta (&gt; de 500 ms), tempo de inatividade devido a manutenção ou cascatas de falhas não atende à experiência esperada do usuário."

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:110
msgid "Quarkus aids you on your journey to reactive.  Quarkus is based on a <a href=\"https://quarkus.io/version/main/guides/quarkus-reactive-architecture\">reactive core</a> allowing your application to mix reactive and imperative components.  As an example, you can implement reactive HTTP endpoint using the <a href=\"https://quarkus.io/guides/resteasy-reactive\">RESTEasy Reactive extension</a> as follows:"
msgstr "Quarkus ajuda você em sua jornada para reativo.  O Quarkus é baseado em um <a href=\"https://quarkus.io/version/main/guides/quarkus-reactive-architecture\">núcleo reativo</a> , permitindo que sua aplicação misture componentes reativos e imperativos.  Como exemplo, você pode implementar o endpoint HTTP reativo usando a <a href=\"https://quarkus.io/guides/resteasy-reactive\">extensão RESTEasy Reactive</a> da seguinte maneira:"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:113
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@GET</span>\n"
"<span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/elements/{position}\"</span>)\n"
"<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Uni&lt;Element&gt; <span class=\"hljs-title\">getElement</span><span class=\"hljs-params\">(@PathParam(<span class=\"hljs-string\">\"position\"</span>)</span> <span class=\"hljs-keyword\">int</span> position) </span>{\n"
"    <span class=\"hljs-keyword\">return</span> elements.getElement(position)\n"
"        .onFailure().recoverWithItem(FALLBACK);\n"
"}</code>"
msgstr "&lt;code class=\"language-java hljs\" data-lang=\"java\"&gt;&lt;span class=\"hljs-meta\"&gt;@GET&lt;/span&gt; &lt;span class=\"hljs-meta\"&gt;@Path&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;\"/elements/{position}\"&lt;/span&gt;) &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; Uni&lt;Element&gt; &lt;span class=\"hljs-title\"&gt;getElement&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(@PathParam(&lt;span class=\"hljs-string\"&gt;\"position\"&lt;/span&gt;)&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; position) &lt;/span&gt;{ &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; elements.getElement(position) .onFailure().recoverWithItem(FALLBACK); }&lt;/code&gt;"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:119
msgid "Thanks to the <a href=\"https://quarkus.io/version/main/guides/mutiny-primer\">Mutiny Reactive API</a> , you can compose asynchronous operations and complete the result when everything is done without blocking the I/O threads.  This greatly improves resource consumption and elasticity.  Most Quarkus APIs are available in both imperative and reactive.  As example, you can use the reactive version of the REST Client:"
msgstr "Graças à <a href=\"https://quarkus.io/version/main/guides/mutiny-primer\">Mutiny Reactive API</a> , você pode compor operações assíncronas e concluir o resultado quando tudo for feito sem bloquear os threads de E/S.  Isso melhora muito o consumo de recursos e a elasticidade.  A maioria das APIs do Quarkus está disponível em imperativa e reativa.  Como exemplo, você pode usar a versão reativa do cliente REST:"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:123
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/elements\"</span>)\n"
"<span class=\"hljs-meta\">@RegisterRestClient</span>(configKey=<span class=\"hljs-string\">\"element-service\"</span>)\n"
"<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">ElementService</span> </span>{\n"
"\n"
"    <span class=\"hljs-meta\">@GET</span>\n"
"    <span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/{position}\"</span>)\n"
"    <span class=\"hljs-function\">Uni&lt;Element&gt; <span class=\"hljs-title\">getElement</span><span class=\"hljs-params\">(@PathParam(<span class=\"hljs-string\">\"position\"</span>)</span> <span class=\"hljs-keyword\">int</span> position)</span>;\n"
"}</code>"
msgstr "&lt;code class=\"language-java hljs\" data-lang=\"java\"&gt;&lt;span class=\"hljs-meta\"&gt;@Path&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;\"/elements\"&lt;/span&gt;) &lt;span class=\"hljs-meta\"&gt;@RegisterRestClient&lt;/span&gt;(configKey=&lt;span class=\"hljs-string\"&gt;\"element-service\"&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-class\"&gt;&lt;span class=\"hljs-keyword\"&gt;interface&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;ElementService&lt;/span&gt; &lt;/span&gt;{"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:131
msgid "But, what about streams? Generating a <em>server-sent event</em> response with Quarkus is just as simple:"
msgstr "Mas, e os streamings? Gerar uma resposta <em>server-sent event</em> com o Quarkus é igualmente simples:"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:132
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Produces</span>(MediaType.SERVER_SENT_EVENTS)\n"
"<span class=\"hljs-meta\">@GET</span>\n"
"<span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/events\"</span>)\n"
"<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Multi&lt;String&gt; <span class=\"hljs-title\">stream</span><span class=\"hljs-params\">()</span> </span>{\n"
"    <span class=\"hljs-keyword\">return</span> kafka.toMulti();\n"
"}</code>"
msgstr "&lt;code class=\"language-java hljs\" data-lang=\"java\"&gt;&lt;span class=\"hljs-meta\"&gt;@Produces&lt;/span&gt;(MediaType.SERVER_SENT_EVENTS) &lt;span class=\"hljs-meta\"&gt;@GET&lt;/span&gt; &lt;span class=\"hljs-meta\"&gt;@Path&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;\"/events\"&lt;/span&gt;) &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; Multi&lt;String&gt; &lt;span class=\"hljs-title\"&gt;stream&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{ &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; kafka.toMulti(); }&lt;/code&gt;"

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/continuum.html:138
msgid "<a class=\"anchor\" href=\"#event-driven-architectures\"></a>Event-driven Architectures"
msgstr "<a class=\"anchor\" href=\"#event-driven-architectures\"></a>Arquiteturas orientadas a eventos"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:139
msgid "However, HTTP characteristics prohibit implementing <a href=\"https://www.reactivemanifesto.org/\">reactive systems</a>, where all the components interact using asynchronous messages passing."
msgstr "No entanto, as características HTTP proíbem a implementação de <a href=\"https://www.reactivemanifesto.org/\">sistemas reativos</a>, onde todos os componentes interagem usando a passagem assíncrona de mensagens."

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:140
msgid "First, you can consume messages from various brokers such as AMQP or Apache Kafka, and process these messages smoothly:"
msgstr "Primeiro, você pode consumir mensagens de vários brokers, como AMQP ou Apache Kafka, e processar essas mensagens sem problemas:"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:141
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@ApplicationScoped</span>\n"
"<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyEventProcessor</span> </span>{\n"
"\n"
"  <span class=\"hljs-meta\">@Incoming</span>(<span class=\"hljs-string\">\"health\"</span>)\n"
"  <span class=\"hljs-meta\">@Outgoing</span>(<span class=\"hljs-string\">\"heartbeat\"</span>)\n"
"  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">extractHeartbeat</span><span class=\"hljs-params\">(Health health)</span> </span>{\n"
"    <span class=\"hljs-keyword\">return</span> health.getHeartbeat();\n"
"  }\n"
"}</code>"
msgstr "&lt;code class=\"language-java hljs\" data-lang=\"java\"&gt;&lt;span class=\"hljs-meta\"&gt;@ApplicationScoped&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-class\"&gt;&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;MyEventProcessor&lt;/span&gt; &lt;/span&gt;{"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:150
msgid "The <code>@Incoming</code> and <code>@Outgoing</code> annotations are part of <a href=\"https://www.smallrye.io/smallrye-reactive-messaging\">Reactive Messaging</a>.  They are used to express from which <em>channel</em> you are consuming and to which <em>channel</em> you are sending.  Thanks to Reactive Messaging you can consume and send messages from and to different brokers and transports such as HTTP, Kafka, or <a href=\"http://camel.apache.org\">Apache Camel</a>."
msgstr "As anotações<code>@Incoming</code> e <code>@Outgoing</code> fazem parte do <a href=\"https://www.smallrye.io/smallrye-reactive-messaging\">Reactive Messaging</a>.  Eles são usados para expressar de qual <em>channel</em> você está consumindo e para qual <em>channel</em> você está enviando.  Graças ao Reactive Messaging, você pode consumir e enviar mensagens de e para diferentes brokers e transportes, como HTTP, Kafka ou <a href=\"http://camel.apache.org\">Apache Camel</a>."

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:153
msgid "Sometimes you need more than just handling messages one by one.  You can also express your message processing logic using reactive programming as illustrated in the following snippet:"
msgstr "Às vezes, você precisa de mais do que apenas lidar com mensagens uma a uma.  Você também pode expressar sua lógica de processamento de mensagens usando programação reativa, conforme ilustrado no trecho a seguir:"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:155
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Incoming</span>(<span class=\"hljs-string\">\"health\"</span>)\n"
"<span class=\"hljs-meta\">@Outgoing</span>(<span class=\"hljs-string\">\"output\"</span>)\n"
"<span class=\"hljs-keyword\">public</span> Multi&lt;<span class=\"hljs-function\">Record&lt;String, Measure&gt; <span class=\"hljs-title\">filterState</span><span class=\"hljs-params\">(Multi&lt;Capture&gt; input)</span> </span>{\n"
"    <span class=\"hljs-keyword\">return</span> input\n"
"        .drop().repetitions()\n"
"        .select().where(capture -&gt; capture.value &gt; <span class=\"hljs-number\">0</span>)\n"
"        .onItem().transform(capture -&gt; <span class=\"hljs-keyword\">new</span> Measure(capture.sensor, capture.value, capture.unit))\n"
"        .onItem().transform(measure -&gt; Record.of(measure.sensor, measure));\n"
"}</code>"
msgstr "&lt;code class=\"language-java hljs\" data-lang=\"java\"&gt;&lt;span class=\"hljs-meta\"&gt;@Incoming&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;\"health\"&lt;/span&gt;) &lt;span class=\"hljs-meta\"&gt;@Outgoing&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;\"output\"&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; Multi&lt;&lt;span class=\"hljs-function\"&gt;Record&lt;String, Measure&gt; &lt;span class=\"hljs-title\"&gt;filterState&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(Multi&lt;Capture&gt; input)&lt;/span&gt; &lt;/span&gt;{ &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; input .drop().repetitions() .select().where(capture -&gt; capture.value &gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) .onItem().transform(capture -&gt; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; Measure(capture.sensor, capture.value, capture.unit)) .onItem().transform(measure -&gt; Record.of(measure.sensor, measure)); }&lt;/code&gt;"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:164
msgid "As for the reactive APIs exposed by Quarkus, stream manipulation uses the Mutiny API."
msgstr "Quanto às APIs reativas expostas pelo Quarkus, a manipulação de fluxo usa a API Mutiny ."

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/continuum.html:165
#, fuzzy
msgid "<a class=\"anchor\" href=\"#functions-as-a-service-and-serverless\"></a>Functions as a Service and Serverless"
msgstr "&lt;a class=\"anchor\" href=\"#functions-as-a-service-and-serverless\"&gt;&lt;/a&gt;Funções como serviço e sem servidor"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:166
msgid "Thanks to their stellar startup time and low memory usage, you can implement functions using Quarkus to be used in serverless environments.  Quarkus provides Funqy, an approach to writing functions that are deployable to various FaaS environments like AWS Lambda, Azure Functions, Knative, and Knative Events (Cloud Events). It is also usable as a standalone service."
msgstr "Graças ao seu excelente tempo de inicialização e baixo uso de memória, você pode implementar funções usando o Quarkus para serem usadas em ambientes sem servidor.  O Quarkus fornece o Funqy, uma abordagem para escrever funções que podem ser implantadas em vários ambientes FaaS, como AWS Lambda, Azure Functions, Knative, e Knative Events (Cloud Events). Também é utilizável como um serviço independente."

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:168
msgid "With Funqy, a function is just:"
msgstr "Com o Funqy, uma função é apenas:"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:169
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-keyword\">import</span> io.quarkus.funqy.Funq;\n"
"\n"
"<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">GreetingFunction</span> </span>{\n"
"    <span class=\"hljs-meta\">@Funq</span>\n"
"    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">greet</span><span class=\"hljs-params\">(String name)</span> </span>{\n"
"       <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Hello \"</span> + name;\n"
"    }\n"
"}</code>"
msgstr "&lt;code class=\"language-java hljs\" data-lang=\"java\"&gt;&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; io.quarkus.funqy.Funq;"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:177
msgid "You can use any of the Quarkus features in your function and benefit from the fast startup and low memory utilization. With Quarkus, you can embrace this new world without having to change your programming language."
msgstr "Você pode usar qualquer um dos recursos do Quarkus em sua função e se beneficiar da inicialização rápida e da baixa utilização de memória. Com o Quarkus, você pode abraçar esse novo mundo sem ter que mudar sua linguagem de programação."
