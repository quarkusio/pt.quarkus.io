# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:25+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:7
#, fuzzy
msgid "For years, the client-server architecture has been the de-facto standard to build applications. But a significant shift happened. The <em>one model rules them all</em> age is over. A new range of applications and architectural styles have emerged and transformed how code is written and how applications are deployed and executed. HTTP microservices, reactive applications, event-driven architecture, and serverless are now central players in modern systems."
msgstr "Durante anos, a arquitetura cliente-servidor foi a norma de facto para criar aplicações. Mas houve uma mudança significativa. A era do &lt;em&gt;um modelo que rege todos&lt;/em&gt; acabou. Surgiu uma nova gama de aplicações e estilos de arquitetura que transformaram a forma como o código é escrito e como as aplicações são implantadas e executadas. Microsserviços HTTP, aplicativos reativos, arquitetura orientada a eventos e sem servidor são agora atores centrais nos sistemas modernos."

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:10
#, fuzzy
msgid "Quarkus has been designed with this new world in mind and provides first-class support for these different paradigms. That does not mean you cannot build monoliths with Quarkus; you can do it smoothly. On the contrary, it means that the Quarkus development model morphs to adapt itself to the type of application you are developing, monolith, microservice, reactive, event-driven, functions…"
msgstr "O Quarkus foi concebido com este novo mundo em mente e fornece suporte de primeira classe para estes diferentes paradigmas. Isso não significa que não possa construir monólitos com o Quarkus; pode fazê-lo sem problemas. Pelo contrário, significa que o modelo de desenvolvimento do Quarkus se transforma para se adaptar ao tipo de aplicação que está a desenvolver, monólito, microsserviço, reativo, orientado por eventos, funções..."

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/continuum.html:11
#, fuzzy
msgid "<a class=\"anchor\" href=\"#http-microservices\"></a>HTTP microservices"
msgstr "&lt;a class=\"anchor\" href=\"#http-microservices\"&gt;&lt;/a&gt;Microsserviços HTTP"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:12
#, fuzzy
msgid "Let’s start with the basics: HTTP microservices. In this context, you need to develop an HTTP endpoint, often called REST or CRUD. You process incoming HTTP requests, and to do so you often need to rely on other services, such as databases, or another HTTP service."
msgstr "Comecemos pelo básico: microsserviços HTTP. Neste contexto, é necessário desenvolver um ponto de extremidade HTTP, frequentemente designado por REST ou CRUD. Processa os pedidos HTTP de entrada e, para o fazer, precisa frequentemente de recorrer a outros serviços, como bases de dados ou outro serviço HTTP."

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:13
#, fuzzy
msgid "For this type of application, Quarkus relies on well-known standards such as JAX-RS, JPA and MicroProfile Rest Client, but also Hibernate with Panache to simplify interactions with databases."
msgstr "Para este tipo de aplicação, o Quarkus apoia-se em normas bem conhecidas, como JAX-RS, JPA e MicroProfile Rest Client, mas também no Hibernate com Panache para simplificar as interacções com as bases de dados."

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:14
#, fuzzy
msgid "Let’s take a very simple application handling <em>elements</em> from the periodic table. The code would be something like:"
msgstr "Vamos pegar uma aplicação muito simples que manipula &lt;em&gt;elementos&lt;/em&gt; da tabela periódica. O código seria algo como:"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:15
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/elements\"</span>)\n"
"        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ElementResource</span> </span>{\n"
"\n"
"    <span class=\"hljs-meta\">@GET</span>\n"
"    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> List&lt;Element&gt; <span class=\"hljs-title\">getAll</span><span class=\"hljs-params\">()</span> </span>{\n"
"        <span class=\"hljs-keyword\">return</span> Element.listAll();\n"
"    }\n"
"\n"
"    <span class=\"hljs-meta\">@GET</span>\n"
"    <span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/{position}\"</span>)\n"
"    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Element <span class=\"hljs-title\">getOne</span><span class=\"hljs-params\">(@PathParam(<span class=\"hljs-string\">\"position\"</span>)</span> <span class=\"hljs-keyword\">int</span> position) </span>{\n"
"        Element element = Element.find(<span class=\"hljs-string\">\"position\"</span>, position).firstResult();\n"
"        <span class=\"hljs-keyword\">if</span> (element == <span class=\"hljs-keyword\">null</span>) {\n"
"            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> WebApplicationException(<span class=\"hljs-string\">\"Element with position \"</span> + position + <span class=\"hljs-string\">\" does not exist.\"</span>, <span class=\"hljs-number\">404</span>);\n"
"        }\n"
"        <span class=\"hljs-keyword\">return</span> element;\n"
"    }\n"
"\n"
"    <span class=\"hljs-meta\">@POST</span>\n"
"    <span class=\"hljs-meta\">@Transactional</span>\n"
"    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title\">create</span><span class=\"hljs-params\">(Element element)</span> </span>{\n"
"        element.persist();\n"
"        <span class=\"hljs-keyword\">return</span> Response.ok(element).status(<span class=\"hljs-number\">201</span>).build();\n"
"    }\n"
"\n"
"    <span class=\"hljs-comment\">//...</span>\n"
"}</code>"
msgstr "&lt;code class=\"language-java hljs\" data-lang=\"java\"&gt;&lt;span class=\"hljs-meta\"&gt;@Path&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;\"/elements\"&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-class\"&gt;&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;ElementResource&lt;/span&gt; &lt;/span&gt;{"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:42
#, fuzzy
msgid "If you are a Java EE or Spring user, this development model should look familiar.  You expose a resource containing methods annotated with <code>@GET</code>, <code>@POST</code>…&ZeroWidthSpace;&ZeroWidthSpace; to handle the different requests.  The path is specified using the <code>@Path</code> annotation.  Quarkus also supports <a href=\"https://quarkus.io/guides/spring-web\">Spring controller</a> annotations such as <code>@GetMapping</code> or <code>@RestController</code>."
msgstr "Se for um utilizador de Java EE ou Spring, este modelo de desenvolvimento deve parecer-lhe familiar. Você expõe um recurso contendo métodos anotados com &lt;code&gt;@GET&lt;/code&gt;, &lt;code&gt;@POST&lt;/code&gt;... para tratar os diferentes pedidos. O caminho é especificado usando a anotação &lt;code&gt;@Path&lt;/code&gt;. O Quarkus também suporta anotações &lt;a href=\"https://quarkus.io/guides/spring-web\"&gt;controlador Spring&lt;/a&gt;, como &lt;code&gt;@GetMapping&lt;/code&gt; ou &lt;code&gt;@RestController&lt;/code&gt;."

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:47
#, fuzzy
msgid "You can use the JPA entity manager directly.  Panache proposes an alternative removing boilerplate and exposing an active record and repository models."
msgstr "É possível utilizar diretamente o gestor de entidades JPA. O Panache propõe uma alternativa que elimina o boilerplate e expõe um registo ativo e modelos de repositório."

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:50
#, fuzzy
msgid "With Panache, the <code>Element</code> class would be as simple as:"
msgstr "Com o Panache, a classe &lt;code&gt;Element&lt;/code&gt; seria tão simples quanto:"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:53
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Entity</span>\n"
"<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Element</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">PanacheEntity</span> </span>{\n"
"\n"
"    <span class=\"hljs-keyword\">public</span> String name;\n"
"    <span class=\"hljs-keyword\">public</span> String symbol;\n"
"    <span class=\"hljs-meta\">@Column</span>(unique = <span class=\"hljs-keyword\">true</span>)\n"
"    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> position;\n"
"}</code>"
msgstr "&lt;code class=\"language-java hljs\" data-lang=\"java\"&gt;&lt;span class=\"hljs-meta\"&gt;@Entity&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-class\"&gt;&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;Element&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;extends&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;PanacheEntity&lt;/span&gt; &lt;/span&gt;{"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:62
#, fuzzy
msgid "Microservices tend to come in systems.  Let’s now imagine you need to access another HTTP endpoint.  You can use an HTTP client directly; this is nothing more than repeating boilerplate code.  Quarkus provides a way to call HTTP endpoints easily using the <a href=\"https://quarkus.io/guides/rest-client\">MicroProfile Rest Client API</a>."
msgstr "Os microsserviços tendem a ser fornecidos em sistemas. Imaginemos agora que precisa de aceder a outro ponto de extremidade HTTP. Pode usar um cliente HTTP diretamente; isto não é mais do que repetir código padrão. O Quarkus fornece uma maneira de chamar pontos de extremidade HTTP facilmente usando a &lt;a href=\"https://quarkus.io/guides/rest-client\"&gt; API de cliente de descanso de microperfil&lt;/a&gt;."

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:67
#, fuzzy
msgid "First declare your service as follows:"
msgstr "Primeiro, declare o seu serviço da seguinte forma:"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:69
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/elements\"</span>)\n"
"<span class=\"hljs-meta\">@RegisterRestClient</span>(configKey=<span class=\"hljs-string\">\"element-service\"</span>)\n"
"<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">ElementService</span> </span>{\n"
"\n"
"    <span class=\"hljs-meta\">@GET</span>\n"
"    <span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/{position}\"</span>)\n"
"    <span class=\"hljs-function\">Element <span class=\"hljs-title\">getElement</span><span class=\"hljs-params\">(@PathParam(<span class=\"hljs-string\">\"position\"</span>)</span> <span class=\"hljs-keyword\">int</span> position)</span>;\n"
"}</code>"
msgstr "&lt;code class=\"language-java hljs\" data-lang=\"java\"&gt;&lt;span class=\"hljs-meta\"&gt;@Path&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;\"/elementos\"&lt;/span&gt;) &lt;span class=\"hljs-meta\"&gt;@RegisterRestClient&lt;/span&gt;(configKey=&lt;span class=\"hljs-string\"&gt;\"element-service\"&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-class\"&gt;&lt;span class=\"hljs-keyword\"&gt;interface&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;ElementService&lt;/span&gt; &lt;/span&gt;{"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:78
#, fuzzy
msgid "For each call you are intending to do, add a method and use annotations to describe the behavior.  You can combine the REST Client with the <a href=\"https://quarkus.io/guides/smallrye-fault-tolerance\">fault tolerance extension</a> to handle failure gracefully.  Then, in your resource, just use the <code>ElementService</code> interface:"
msgstr "Para cada chamada que você pretende fazer, adicione um método e use anotações para descrever o comportamento. Você pode combinar o Cliente REST com a &lt;a href=\"https://quarkus.io/guides/smallrye-fault-tolerance\"&gt;extensão de tolerância a falhas&lt;/a&gt; para lidar com falhas de forma elegante. Em seguida, no seu recurso, basta usar a interface &lt;code&gt;ElementService&lt;/code&gt;:"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:82
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/elem\"</span>)\n"
"<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ElementResource</span> </span>{\n"
"\n"
"    <span class=\"hljs-meta\">@RestClient</span>\n"
"    ElementService elements;\n"
"\n"
"    <span class=\"hljs-meta\">@GET</span>\n"
"    <span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/{position}\"</span>)\n"
"    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Element <span class=\"hljs-title\">name</span><span class=\"hljs-params\">(@PathParam(<span class=\"hljs-string\">\"position\"</span>)</span> <span class=\"hljs-keyword\">int</span> position) </span>{\n"
"        <span class=\"hljs-keyword\">return</span> elements.getElement(position);\n"
"    }\n"
"}</code>"
msgstr "&lt;code class=\"language-java hljs\" data-lang=\"java\"&gt;&lt;span class=\"hljs-meta\"&gt;@Path&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;\"/elem\"&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-class\"&gt;&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;ElementResource&lt;/span&gt; &lt;/span&gt;{"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:94
#, fuzzy
msgid "But you may be wondering where the URL is configured as it’s not in the code. Remember, it must not be hard-coded because the URL likely depends on the environment. The URL is configured in the application configuration:"
msgstr "Mas pode estar a perguntar-se onde é que o URL está configurado, uma vez que não está no código. Lembre-se de que não deve ser codificado porque o URL provavelmente depende do ambiente. O URL é configurado na configuração da aplicação:"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:96
#, fuzzy, no-wrap
msgid "<code class=\"language-text hljs\" data-lang=\"text\">element-service/mp-rest/url=http://localhost:9001</code>"
msgstr "&lt;code class=\"language-text hljs\" data-lang=\"text\"&gt;element-service/mp-rest/url=http://localhost:9001&lt;/code&gt;"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:98
#, fuzzy
msgid "The URL can now be updated during the deployment or at launch time using system properties or environment variables."
msgstr "O URL pode agora ser atualizado durante a implementação ou no momento do lançamento utilizando propriedades do sistema ou variáveis de ambiente."

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:100
#, fuzzy
msgid "Quarkus is not limited to HTTP.  You can use <a href=\"https://quarkus.io/guides/grpc-getting-started\">gRPC</a> or <a href=\"https://quarkus.io/guides/smallrye-graphql\">GraphQL</a>, two prominent alternatives in the microservice space."
msgstr "O Quarkus não se limita ao HTTP. Pode utilizar &lt;a href=\"https://quarkus.io/guides/grpc-getting-started\"&gt;gRPC&lt;/a&gt; ou &lt;a href=\"https://quarkus.io/guides/smallrye-graphql\"&gt;GraphQL&lt;/a&gt;, duas alternativas proeminentes no espaço dos microsserviços."

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/continuum.html:103
#, fuzzy
msgid "<a class=\"anchor\" href=\"#being-reactive\"></a>Being reactive"
msgstr "&lt;a class=\"anchor\" href=\"#ser-reativo\"&gt;&lt;/a&gt;Ser reativo"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:105
#, fuzzy
msgid "Application requirements have changed drastically over the last few years.  For any application to succeed in the era of cloud computing, Big Data, or IoT, going reactive is increasingly becoming the architecture style to follow."
msgstr "Os requisitos das aplicações mudaram drasticamente nos últimos anos. Para que qualquer aplicação tenha sucesso na era da computação em nuvem, Big Data ou IoT, a reatividade está a tornar-se cada vez mais o estilo de arquitetura a seguir."

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:108
#, fuzzy
msgid "Today’s users embrace applications with milliseconds of response time, 100% uptime, lower latency, push data instead of pull, higher throughput, and elasticity. However, these features are nearly impossible to achieve using yesterday’s software architecture without a considerable investment in resources, infrastructure, and tooling. The world changed, and having dozens of servers, long response times (&gt; 500 ms), downtime due to maintenance or waterfalls of failures does not meet the expected user experience."
msgstr "Os utilizadores de hoje aceitam aplicações com milissegundos de tempo de resposta, 100% de tempo de funcionamento, menor latência, dados push em vez de pull, maior rendimento e elasticidade. No entanto, estas características são quase impossíveis de obter utilizando a arquitetura de software de ontem sem um investimento considerável em recursos, infra-estruturas e ferramentas. O mundo mudou, e ter dezenas de servidores, tempos de resposta longos (&gt; 500 ms), tempo de inatividade devido a manutenção ou cascatas de falhas não corresponde à experiência de utilizador esperada."

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:110
#, fuzzy
msgid "Quarkus aids you on your journey to reactive.  Quarkus is based on a <a href=\"https://quarkus.io/version/main/guides/quarkus-reactive-architecture\">reactive core</a> allowing your application to mix reactive and imperative components.  As an example, you can implement reactive HTTP endpoint using the <a href=\"https://quarkus.io/guides/resteasy-reactive\">RESTEasy Reactive extension</a> as follows:"
msgstr "O Quarkus ajuda-o na sua jornada para a reatividade. O Quarkus é baseado em um &lt;a href=\"https://quarkus.io/version/main/guides/quarkus-reactive-architecture\"&gt;núcleo reativo&lt;/a&gt;, permitindo que seu aplicativo misture componentes reativos e imperativos. Como exemplo, você pode implementar um ponto de extremidade HTTP reativo usando a extensão &lt;a href=\"https://quarkus.io/guides/resteasy-reactive\"&gt;RESTEasy Reactive&lt;/a&gt; da seguinte forma:"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:113
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@GET</span>\n"
"<span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/elements/{position}\"</span>)\n"
"<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Uni&lt;Element&gt; <span class=\"hljs-title\">getElement</span><span class=\"hljs-params\">(@PathParam(<span class=\"hljs-string\">\"position\"</span>)</span> <span class=\"hljs-keyword\">int</span> position) </span>{\n"
"    <span class=\"hljs-keyword\">return</span> elements.getElement(position)\n"
"        .onFailure().recoverWithItem(FALLBACK);\n"
"}</code>"
msgstr "&lt;code class=\"language-java hljs\" data-lang=\"java\"&gt;&lt;span class=\"hljs-meta\"&gt;@GET&lt;/span&gt; &lt;span class=\"hljs-meta\"&gt;@Path&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;\"/elementos/{posição}\"&lt;/span&gt;) &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; Uni&lt;Element&gt; &lt;span class=\"hljs-title\"&gt;getElement&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(@PathParam(&lt;span class=\"hljs-string\"&gt;\"position\"&lt;/span&gt;)&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;int&lt;/span&gt; position) &lt;/span&gt;{ &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; elements.getElement(position) .onFailure().recoverWithItem(FALLBACK); }&lt;/code&gt;"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:119
#, fuzzy
msgid "Thanks to the <a href=\"https://quarkus.io/version/main/guides/mutiny-primer\">Mutiny Reactive API</a> , you can compose asynchronous operations and complete the result when everything is done without blocking the I/O threads.  This greatly improves resource consumption and elasticity.  Most Quarkus APIs are available in both imperative and reactive.  As example, you can use the reactive version of the REST Client:"
msgstr "Graças à &lt;a href=\"https://quarkus.io/version/main/guides/mutiny-primer\"&gt;Mutiny Reactive API&lt;/a&gt; , é possível compor operações assíncronas e concluir o resultado quando tudo estiver concluído, sem bloquear os threads de E/S. Isso melhora muito o consumo de recursos e a elasticidade. A maioria das APIs do Quarkus está disponível tanto em imperativo como em reativo. Por exemplo, pode utilizar a versão reactiva do cliente REST:"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:123
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/elements\"</span>)\n"
"<span class=\"hljs-meta\">@RegisterRestClient</span>(configKey=<span class=\"hljs-string\">\"element-service\"</span>)\n"
"<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">ElementService</span> </span>{\n"
"\n"
"    <span class=\"hljs-meta\">@GET</span>\n"
"    <span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/{position}\"</span>)\n"
"    <span class=\"hljs-function\">Uni&lt;Element&gt; <span class=\"hljs-title\">getElement</span><span class=\"hljs-params\">(@PathParam(<span class=\"hljs-string\">\"position\"</span>)</span> <span class=\"hljs-keyword\">int</span> position)</span>;\n"
"}</code>"
msgstr "&lt;code class=\"language-java hljs\" data-lang=\"java\"&gt;&lt;span class=\"hljs-meta\"&gt;@Path&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;\"/elementos\"&lt;/span&gt;) &lt;span class=\"hljs-meta\"&gt;@RegisterRestClient&lt;/span&gt;(configKey=&lt;span class=\"hljs-string\"&gt;\"element-service\"&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-class\"&gt;&lt;span class=\"hljs-keyword\"&gt;interface&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;ElementService&lt;/span&gt; &lt;/span&gt;{"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:131
#, fuzzy
msgid "But, what about streams? Generating a <em>server-sent event</em> response with Quarkus is just as simple:"
msgstr "Mas, e quanto aos fluxos? Gerar uma resposta de &lt;em&gt;evento enviado pelo servidor&lt;/em&gt; com o Quarkus é igualmente simples:"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:132
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Produces</span>(MediaType.SERVER_SENT_EVENTS)\n"
"<span class=\"hljs-meta\">@GET</span>\n"
"<span class=\"hljs-meta\">@Path</span>(<span class=\"hljs-string\">\"/events\"</span>)\n"
"<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Multi&lt;String&gt; <span class=\"hljs-title\">stream</span><span class=\"hljs-params\">()</span> </span>{\n"
"    <span class=\"hljs-keyword\">return</span> kafka.toMulti();\n"
"}</code>"
msgstr "&lt;code class=\"language-java hljs\" data-lang=\"java\"&gt;&lt;span class=\"hljs-meta\"&gt;@Produces&lt;/span&gt;(MediaType.SERVER_SENT_EVENTS) &lt;span class=\"hljs-meta\"&gt;@GET&lt;/span&gt; &lt;span class=\"hljs-meta\"&gt;@Path&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;\"/events\"&lt;/span&gt;) &lt;span class=\"hljs-function\"&gt;&lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; Multi&lt;String&gt; &lt;span class=\"hljs-title\"&gt;stream&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;()&lt;/span&gt; &lt;/span&gt;{ &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; kafka.toMulti(); }&lt;/code&gt;"

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/continuum.html:138
#, fuzzy
msgid "<a class=\"anchor\" href=\"#event-driven-architectures\"></a>Event-driven Architectures"
msgstr "&lt;a class=\"anchor\" href=\"#event-driven-architectures\"&gt;&lt;/a&gt;Arquitecturas orientadas para os eventos"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:139
#, fuzzy
msgid "However, HTTP characteristics prohibit implementing <a href=\"https://www.reactivemanifesto.org/\">reactive systems</a>, where all the components interact using asynchronous messages passing."
msgstr "No entanto, as características do HTTP proíbem a implementação de &lt;a href=\"https://www.reactivemanifesto.org/\"&gt;sistemas reactivos&lt;/a&gt;, em que todos os componentes interagem utilizando a passagem de mensagens assíncronas."

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:140
#, fuzzy
msgid "First, you can consume messages from various brokers such as AMQP or Apache Kafka, and process these messages smoothly:"
msgstr "Em primeiro lugar, pode consumir mensagens de vários corretores, como o AMQP ou o Apache Kafka, e processar essas mensagens sem problemas:"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:141
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@ApplicationScoped</span>\n"
"<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyEventProcessor</span> </span>{\n"
"\n"
"  <span class=\"hljs-meta\">@Incoming</span>(<span class=\"hljs-string\">\"health\"</span>)\n"
"  <span class=\"hljs-meta\">@Outgoing</span>(<span class=\"hljs-string\">\"heartbeat\"</span>)\n"
"  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">extractHeartbeat</span><span class=\"hljs-params\">(Health health)</span> </span>{\n"
"    <span class=\"hljs-keyword\">return</span> health.getHeartbeat();\n"
"  }\n"
"}</code>"
msgstr "&lt;code class=\"language-java hljs\" data-lang=\"java\"&gt;&lt;span class=\"hljs-meta\"&gt;@ApplicationScoped&lt;/span&gt; &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; &lt;span class=\"hljs-class\"&gt;&lt;span class=\"hljs-keyword\"&gt;class&lt;/span&gt; &lt;span class=\"hljs-title\"&gt;MyEventProcessor&lt;/span&gt; &lt;/span&gt;{"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:150
#, fuzzy
msgid "The <code>@Incoming</code> and <code>@Outgoing</code> annotations are part of <a href=\"https://www.smallrye.io/smallrye-reactive-messaging\">Reactive Messaging</a>.  They are used to express from which <em>channel</em> you are consuming and to which <em>channel</em> you are sending.  Thanks to Reactive Messaging you can consume and send messages from and to different brokers and transports such as HTTP, Kafka, or <a href=\"http://camel.apache.org\">Apache Camel</a>."
msgstr "As anotações &lt;code&gt;@Incoming&lt;/code&gt; e &lt;code&gt;@Outgoing&lt;/code&gt; fazem parte de &lt;a href=\"https://www.smallrye.io/smallrye-reactive-messaging\"&gt;Mensagens reativas&lt;/a&gt;. Elas são usadas para expressar de qual &lt;em&gt;canal&lt;/em&gt; você está consumindo e para qual &lt;em&gt;canal&lt;/em&gt; você está enviando. Graças ao Reactive Messaging, é possível consumir e enviar mensagens de e para diferentes intermediários e transportes, como HTTP, Kafka ou &lt;a href=\"http://camel.apache.org\"&gt;Apache Camel&lt;/a&gt;."

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:153
#, fuzzy
msgid "Sometimes you need more than just handling messages one by one.  You can also express your message processing logic using reactive programming as illustrated in the following snippet:"
msgstr "Por vezes, é necessário mais do que apenas tratar as mensagens uma a uma. Também pode exprimir a sua lógica de processamento de mensagens utilizando programação reactiva, tal como ilustrado no seguinte excerto:"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:155
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-meta\">@Incoming</span>(<span class=\"hljs-string\">\"health\"</span>)\n"
"<span class=\"hljs-meta\">@Outgoing</span>(<span class=\"hljs-string\">\"output\"</span>)\n"
"<span class=\"hljs-keyword\">public</span> Multi&lt;<span class=\"hljs-function\">Record&lt;String, Measure&gt; <span class=\"hljs-title\">filterState</span><span class=\"hljs-params\">(Multi&lt;Capture&gt; input)</span> </span>{\n"
"    <span class=\"hljs-keyword\">return</span> input\n"
"        .drop().repetitions()\n"
"        .select().where(capture -&gt; capture.value &gt; <span class=\"hljs-number\">0</span>)\n"
"        .onItem().transform(capture -&gt; <span class=\"hljs-keyword\">new</span> Measure(capture.sensor, capture.value, capture.unit))\n"
"        .onItem().transform(measure -&gt; Record.of(measure.sensor, measure));\n"
"}</code>"
msgstr "&lt;code class=\"language-java hljs\" data-lang=\"java\"&gt;&lt;span class=\"hljs-meta\"&gt;@Incoming&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;\"health\"&lt;/span&gt;) &lt;span class=\"hljs-meta\"&gt;@Outgoing&lt;/span&gt;(&lt;span class=\"hljs-string\"&gt;\"output\"&lt;/span&gt;) &lt;span class=\"hljs-keyword\"&gt;public&lt;/span&gt; Multi&lt;&lt;span class=\"hljs-function\"&gt;Record&lt;String, Measure&gt; &lt;span class=\"hljs-title\"&gt;filterState&lt;/span&gt;&lt;span class=\"hljs-params\"&gt;(Multi&lt;Capture&gt; input)&lt;/span&gt; &lt;/span&gt;{ &lt;span class=\"hljs-keyword\"&gt;return&lt;/span&gt; input .drop().repetitions() .select().where(capture -&gt; capture.value &gt; &lt;span class=\"hljs-number\"&gt;0&lt;/span&gt;) .onItem().transform(capture -&gt; &lt;span class=\"hljs-keyword\"&gt;new&lt;/span&gt; Measure(capture.sensor, capture.value, capture.unit)) .onItem().transform(measure -&gt; Record.of(measure.sensor, measure)); }&lt;/code&gt;"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:164
#, fuzzy
msgid "As for the reactive APIs exposed by Quarkus, stream manipulation uses the Mutiny API."
msgstr "Quanto às APIs reactivas expostas pelo Quarkus, a manipulação de fluxos utiliza a API Mutiny."

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/continuum.html:165
#, fuzzy
msgid "<a class=\"anchor\" href=\"#functions-as-a-service-and-serverless\"></a>Functions as a Service and Serverless"
msgstr "&lt;a class=\"anchor\" href=\"#funções-como-um-serviço-e-sem-servidor\"&gt;&lt;/a&gt;Funções-como-um-serviço-e-sem-servidor"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:166
#, fuzzy
msgid "Thanks to their stellar startup time and low memory usage, you can implement functions using Quarkus to be used in serverless environments.  Quarkus provides Funqy, an approach to writing functions that are deployable to various FaaS environments like AWS Lambda, Azure Functions, Knative, and Knative Events (Cloud Events). It is also usable as a standalone service."
msgstr "Graças ao seu tempo de inicialização estelar e baixo uso de memória, você pode implementar funções usando o Quarkus para serem usadas em ambientes sem servidor. O Quarkus fornece o Funqy, uma abordagem para escrever funções que podem ser implantadas em vários ambientes FaaS, como AWS Lambda, Azure Functions, Knative e Knative Events (Cloud Events). Ele também pode ser usado como um serviço autônomo."

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:168
#, fuzzy
msgid "With Funqy, a function is just:"
msgstr "Com Funqy, uma função é apenas:"

#. type: Content of: <div><div><div><pre>
#: upstream/_includes/continuum.html:169
#, fuzzy, no-wrap
msgid ""
"<code class=\"language-java hljs\" data-lang=\"java\"><span class=\"hljs-keyword\">import</span> io.quarkus.funqy.Funq;\n"
"\n"
"<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">GreetingFunction</span> </span>{\n"
"    <span class=\"hljs-meta\">@Funq</span>\n"
"    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">greet</span><span class=\"hljs-params\">(String name)</span> </span>{\n"
"       <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Hello \"</span> + name;\n"
"    }\n"
"}</code>"
msgstr "&lt;code class=\"language-java hljs\" data-lang=\"java\"&gt;&lt;span class=\"hljs-keyword\"&gt;import&lt;/span&gt; io.quarkus.funqy.Funq;"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/continuum.html:177
#, fuzzy
msgid "You can use any of the Quarkus features in your function and benefit from the fast startup and low memory utilization. With Quarkus, you can embrace this new world without having to change your programming language."
msgstr "Pode utilizar qualquer uma das características do Quarkus na sua função e beneficiar do arranque rápido e da baixa utilização de memória. Com o Quarkus, pode abraçar este novo mundo sem ter de mudar a sua linguagem de programação."
