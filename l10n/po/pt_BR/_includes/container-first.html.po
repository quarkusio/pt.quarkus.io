# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2023-09-21 08:25+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/container-first.html:9
#, fuzzy
msgid "From the outset, Quarkus has been designed around a container-first philosophy. What this means in concrete terms is that Quarkus applications are optimised for low memory usage and fast startup times in the following ways:"
msgstr "Desde o início, o Quarkus foi concebido em torno de uma filosofia de contentor primeiro. O que isto significa em termos concretos é que as aplicações Quarkus são optimizadas para uma utilização reduzida da memória e tempos de arranque rápidos das seguintes formas:"

#. type: Attribute 'alt' of: <div><div><div><img>
#: upstream/_includes/container-first.html:10
#, fuzzy
msgid "Quarkus Build Time Principle"
msgstr "Princípio do tempo de construção do Quarkus"

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/container-first.html:13
#, fuzzy
msgid "Build Time Processing"
msgstr "Processamento do tempo de construção"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/container-first.html:14
#, fuzzy
msgid "The central idea behind Quarkus is to do at build-time what traditional frameworks do at runtime: configuration parsing, classpath scanning, feature toggle based on classloading, and so on."
msgstr "A idéia central por trás do Quarkus é fazer em tempo de construção o que os frameworks tradicionais fazem em tempo de execução: análise de configuração, varredura de classpath, alternância de recursos com base no carregamento de classes, e assim por diante."

#. type: Content of: <div><div><div><p>
#: upstream/_includes/container-first.html:15
#, fuzzy
msgid "As much processing as possible is done at build time; thus, your application only contains the classes used at runtime. In traditional frameworks, all the classes required to perform the initial application deployment hang around for the application’s life, even though they are only used once. With Quarkus, they are not even loaded into the production JVM! Quarkus does not stop here. During the build-time processing, it prepares the initialization of all components used by your application. It results in less memory usage and faster startup time as all metadata processing has already been done."
msgstr "O máximo de processamento possível é feito no momento da construção; assim, sua aplicação contém apenas as classes usadas em tempo de execução. Nas estruturas tradicionais, todas as classes necessárias para realizar a implementação inicial da aplicação permanecem durante toda a vida da aplicação, mesmo que sejam utilizadas apenas uma vez. Com a Quarkus, elas nem sequer são carregadas na JVM de produção! O Quarkus não pára por aqui. Durante o processamento do tempo de construção, prepara a inicialização de todos os componentes utilizados pela sua aplicação. Isto resulta numa menor utilização de memória e num tempo de arranque mais rápido, uma vez que todo o processamento de metadados já foi efectuado."

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/container-first.html:17
#, fuzzy
msgid "Reduction in Reflection Usage"
msgstr "Redução da utilização da reflexão"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/container-first.html:18
#, fuzzy
msgid "As much as possible Quarkus tries to avoid reflection, reducing startup time and memory usage. During the built-time processing, extensions can analyze the application code and the classes available on the classpath and replace reflection calls with regular invocations. The usage of dynamic proxies is also prevented by using generating custom proxy at build time."
msgstr "Tanto quanto possível, o Quarkus tenta evitar a reflexão, reduzindo o tempo de arranque e a utilização de memória. Durante o processamento em tempo de construção, as extensões podem analisar o código da aplicação e as classes disponíveis no classpath e substituir as chamadas de reflexão por invocações regulares. A utilização de proxies dinâmicos também é evitada através da geração de um proxy personalizado em tempo de construção."

#. type: Content of: <div><div><div><p>
#: upstream/_includes/container-first.html:19
#, fuzzy
msgid "Arc, the dependency injection framework used by Quarkus, eliminates all the reflection calls and deduces the injection graph at build time. So, when the application starts, no expensive lookups; it’s done already!"
msgstr "Arc, a estrutura de injeção de dependências utilizada pelo Quarkus, elimina todas as chamadas de reflexão e deduz o gráfico de injeção em tempo de construção. Assim, quando a aplicação é iniciada, não há pesquisas dispendiosas; já está feito!"

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/container-first.html:21
#, fuzzy
msgid "First-Class Support for GraalVM Native Images"
msgstr "Suporte de primeira classe para imagens nativas GraalVM"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/container-first.html:22
#, fuzzy
msgid "GraalVM Native Executable support has been an essential part of the design for Quarkus from the beginning. When an application is compiled down to a native executable, it starts much faster and can run with a much smaller heap than a standard JVM. The native compiler uses aggressive dead-code elimination techniques to only embed the parts of the JVM and classes that are absolutely required by your application. Quarkus makes building optimized native executables plain easy. The build-time approach allows Quarkus to collect enough metadata on your application to fine-tune the compilation. No <code>-H:+ReportUnsupportedElementsAtRuntime</code> flag, no fallback, no compromise!"
msgstr "O suporte ao executável nativo GraalVM tem sido uma parte essencial do projeto do Quarkus desde o início. Quando uma aplicação é compilada para um executável nativo, ela inicia muito mais rápido e pode ser executada com um heap muito menor do que uma JVM padrão. O compilador nativo utiliza técnicas agressivas de eliminação de código morto para incorporar apenas as partes da JVM e as classes que são absolutamente necessárias para a sua aplicação. O Quarkus torna a construção de executáveis nativos optimizados muito fácil. A abordagem de tempo de construção permite que o Quarkus colete metadados suficientes sobre seu aplicativo para ajustar a compilação. Sem &lt;code&gt;-H:+ReportUnsupportedElementsAtRuntime&lt;/code&gt;, sem fallback, sem compromisso!"

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/container-first.html:24
#, fuzzy
msgid "Native Image Pre-Boot"
msgstr "Imagem nativa pré-inicialização"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/container-first.html:25
#, fuzzy
msgid "We pre-boot as many of the frameworks as possible during the native compilation of a Quarkus application. It means that the resulting native executable has already run most of the startup code and serialized the result into the executable: even faster startup!"
msgstr "Pré-inicializamos o maior número possível de frameworks durante a compilação nativa de uma aplicação Quarkus. Isso significa que o executável nativo resultante já executou a maior parte do código de inicialização e serializou o resultado no executável: inicialização ainda mais rápida!"

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/container-first.html:27
#, fuzzy
msgid "Kubernetes, but also bare metal"
msgstr "Kubernetes, mas também bare metal"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/container-first.html:28
#, fuzzy
msgid "All the techniques allowing reducing the memory usage and provide faster startup times are not only advantageous in containers. Even on bare metal, it would reduce your memory pressure, and it’s always pleasant to not have to wait 10 seconds to see your application running."
msgstr "Todas as técnicas que permitem reduzir a utilização de memória e proporcionar tempos de arranque mais rápidos não são apenas vantajosas em contentores. Mesmo em bare metal, isso reduziria a pressão da memória, e é sempre agradável não ter de esperar 10 segundos para ver a sua aplicação a funcionar."

#. type: Content of: <div><div><div><p>
#: upstream/_includes/container-first.html:29
#, fuzzy
msgid "When Quarkus was designed, we didn’t focus only on containers but also on deploying Quarkus applications on container orchestrators such as Kubernetes. Quarkus build-time processing also generates the Kubernetes metadata, so your application is ready to be deployed on Kubernetes. Runtime capabilities such as health checks and metrics are exposed out of the box. Quarkus collects all the required metadata at build time to create the Kubernetes deployment descriptor and produce a container image. A single command line can deploy your application onto your Kubernetes cluster."
msgstr "Quando o Quarkus foi concebido, não nos concentrámos apenas nos contentores, mas também na implantação de aplicações Quarkus em orquestradores de contentores, como o Kubernetes. O processamento do tempo de compilação do Quarkus também gera os metadados do Kubernetes, de modo que seu aplicativo está pronto para ser implantado no Kubernetes. Os recursos de tempo de execução, como verificações de integridade e métricas, são expostos de imediato. O Quarkus recolhe todos os metadados necessários em tempo de compilação para criar o descritor de implantação do Kubernetes e produzir uma imagem de contentor. Uma única linha de comando pode implantar seu aplicativo no cluster do Kubernetes."
