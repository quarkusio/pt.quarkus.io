# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2024-05-19 08:10+0000\n"
"PO-Revision-Date: 2023-09-25 19:45-0300\n"
"Last-Translator: George Gastaldi <gegastaldi@gmail.com>\n"
"Language-Team: \n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.3.2\n"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/container-first.html:10
msgid "From the outset, Quarkus has been designed around a container-first philosophy. What this means in concrete terms is that Quarkus applications are optimised for low memory usage and fast startup times in the following ways:"
msgstr "Desde o início, o Quarkus foi projetado em torno de uma filosofia de contêiner em primeiro lugar. O que isso significa em termos concretos é que as aplicações Quarkus são otimizadas para baixo uso de memória e tempos de inicialização rápidos das seguintes maneiras:"

#. type: Attribute 'alt' of: <div><div><div><img>
#: upstream/_includes/container-first.html:11
msgid "Quarkus Build Time Principle"
msgstr "Princípio do tempo de compilação do Quarkus"

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/container-first.html:14
msgid "Build Time Processing"
msgstr "Processamento de tempo de compilação"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/container-first.html:15
msgid "The central idea behind Quarkus is to do at build-time what traditional frameworks do at runtime: configuration parsing, classpath scanning, feature toggle based on classloading, and so on."
msgstr "A ideia central por trás do Quarkus é fazer em tempo de compilação o que as estruturas tradicionais fazem em tempo de execução: análise de configuração, varredura de classpath, alternância de recursos com base no carregamento de classes e assim por diante."

#. type: Content of: <div><div><div><p>
#: upstream/_includes/container-first.html:16
msgid "As much processing as possible is done at build time; thus, your application only contains the classes used at runtime. In traditional frameworks, all the classes required to perform the initial application deployment hang around for the application’s life, even though they are only used once. With Quarkus, they are not even loaded into the production JVM! Quarkus does not stop here. During the build-time processing, it prepares the initialization of all components used by your application. It results in less memory usage and faster startup time as all metadata processing has already been done."
msgstr "O máximo de processamento possível é feito em tempo de compilação; assim, seu aplicativo contém apenas as classes usadas em tempo de execução. Em estruturas tradicionais, todas as classes necessárias para executar a implantação inicial do aplicativo permanecem durante a vida útil do aplicativo, mesmo que sejam usadas apenas uma vez. Com o Quarkus, eles nem são carregados na JVM de produção! O Quarkus não para por aqui. Durante o processamento em tempo de compilação, ele prepara a inicialização de todos os componentes usados pelo seu aplicativo. Isso resulta em menos uso de memória e tempo de inicialização mais rápido, pois todo o processamento de metadados já foi feito."

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/container-first.html:18
msgid "Reduction in Reflection Usage"
msgstr "Redução no uso de reflexão"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/container-first.html:19
msgid "As much as possible Quarkus tries to avoid reflection, reducing startup time and memory usage. During the built-time processing, extensions can analyze the application code and the classes available on the classpath and replace reflection calls with regular invocations. The usage of dynamic proxies is also prevented by using generating custom proxy at build time."
msgstr "Tanto quanto possível, o Quarkus tenta evitar a reflexão, reduzindo o tempo de inicialização e o uso de memória. Durante o processamento em tempo de compilação, as extensões podem analisar o código do aplicativo e as classes disponíveis no classpath e substituir chamadas de reflexão por chamadas regulares. O uso de proxies dinâmicos também é impedido usando a geração de proxy personalizado em tempo de compilação."

#. type: Content of: <div><div><div><p>
#: upstream/_includes/container-first.html:20
msgid "Arc, the dependency injection framework used by Quarkus, eliminates all the reflection calls and deduces the injection graph at build time. So, when the application starts, no expensive lookups; it’s done already!"
msgstr "Arc, a estrutura de injeção de dependência usada pelo Quarkus, elimina todas as chamadas de reflexão e deduz o gráfico de injeção em tempo de compilação. Assim, quando o aplicativo é iniciado, não há pesquisas caras; já está feito!"

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/container-first.html:22
msgid "First-Class Support for GraalVM Native Images"
msgstr "Suporte de primeira classe para imagens nativas do GraalVM"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/container-first.html:23
msgid "GraalVM Native Executable support has been an essential part of the design for Quarkus from the beginning. When an application is compiled down to a native executable, it starts much faster and can run with a much smaller heap than a standard JVM. The native compiler uses aggressive dead-code elimination techniques to only embed the parts of the JVM and classes that are absolutely required by your application. Quarkus makes building optimized native executables plain easy. The build-time approach allows Quarkus to collect enough metadata on your application to fine-tune the compilation. No <code>-H:+ReportUnsupportedElementsAtRuntime</code> flag, no fallback, no compromise!"
msgstr "O suporte ao GraalVM Native Executable tem sido uma parte essencial do design do Quarkus desde o início. Quando um aplicativo é compilado em um executável nativo, ele é iniciado muito mais rápido e pode ser executado com um heap muito menor do que uma JVM padrão. O compilador nativo usa técnicas agressivas de eliminação de código morto para incorporar apenas as partes da JVM e as classes que são absolutamente exigidas pelo seu aplicativo. O Quarkus facilita a criação de executáveis nativos otimizados. A abordagem de tempo de compilação permite que o Quarkus colete metadados suficientes em seu aplicativo para ajustar a compilação. Acabou-se a necessidade de adicionar a flag <code>-H:+ReportUnsupportedElementsAtRuntime</code> e outras gambiarras!"

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/container-first.html:25
msgid "Native Image Pre-Boot"
msgstr "Pré-inicialização da imagem nativa"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/container-first.html:26
msgid "We pre-boot as many of the frameworks as possible during the native compilation of a Quarkus application. It means that the resulting native executable has already run most of the startup code and serialized the result into the executable: even faster startup!"
msgstr "Nós pré-inicializamos o maior número possível de frameworks durante a compilação nativa de um aplicativo Quarkus. Isso significa que o executável nativo resultante já executou a maior parte do código de inicialização e serializou o resultado no executável: inicialização ainda mais rápida!"

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/container-first.html:28
msgid "Kubernetes, but also bare metal"
msgstr "Kubernetes, mas também bare metal"

#. type: Content of: <div><div><div><p>
#: upstream/_includes/container-first.html:29
msgid "All the techniques allowing reducing the memory usage and provide faster startup times are not only advantageous in containers. Even on bare metal, it would reduce your memory pressure, and it’s always pleasant to not have to wait 10 seconds to see your application running."
msgstr "Todas as técnicas que permitem reduzir o uso de memória e proporcionar tempos de inicialização mais rápidos não são vantajosas apenas em contêineres. Mesmo em bare metal, isso reduziria sua pressão de memória, e é sempre agradável não ter que esperar 10 segundos para ver seu aplicativo em execução."

#. type: Content of: <div><div><div><p>
#: upstream/_includes/container-first.html:30
msgid "When Quarkus was designed, we didn’t focus only on containers but also on deploying Quarkus applications on container orchestrators such as Kubernetes. Quarkus build-time processing also generates the Kubernetes metadata, so your application is ready to be deployed on Kubernetes. Runtime capabilities such as health checks and metrics are exposed out of the box. Quarkus collects all the required metadata at build time to create the Kubernetes deployment descriptor and produce a container image. A single command line can deploy your application onto your Kubernetes cluster."
msgstr "Quando o Quarkus foi projetado, não nos concentramos apenas em contêineres, mas também na implantação de aplicativos Quarkus em orquestradores de contêineres, como o Kubernetes. O processamento em tempo de compilação do Quarkus também gera os metadados do Kubernetes, para que sua aplicação esteja pronta para ser implantado no Kubernetes. Os recursos de tempo de execução, como verificações de integridade e métricas, são expostos imediatamente. O Quarkus coleta todos os metadados necessários em tempo de compilação para criar o descritor de deployment do Kubernetes e produzir uma imagem de contêiner. Uma única linha de comando pode implantar seu aplicativo no cluster do Kubernetes."
